
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000354

Program Header:
0x70000003 off    0x0000a572 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000034 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00007a30 memsz 0x00007a30 flags r-x
    LOAD off    0x00008a50 vaddr 0x00007a50 paddr 0x00009560 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x00000070 vaddr 0x0000b070 paddr 0x0000b070 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007354  000002d0  000002d0  000012d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000042c  00007624  00007624  00008624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  00007a50  00009560  00008a50  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000158  0000b070  0000b070  0000b070  2**3
                  ALLOC
  6 .onchip_memory2 00000000  0000b1c8  0000b1c8  0000a560  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  0000a560  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000034  00000000  00000000  0000a572  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005a8  00000000  00000000  0000a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00007628  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030ec  00000000  00000000  00012178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00003e28  00000000  00000000  00015264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000e78  00000000  00000000  0001908c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001107  00000000  00000000  00019f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00001381  00000000  00000000  0001b00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  0001c390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000070  00000000  00000000  0001c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000002d0 l    d  .text	00000000 .text
00007624 l    d  .rodata	00000000 .rodata
00007a50 l    d  .rwdata	00000000 .rwdata
0000b070 l    d  .bss	00000000 .bss
0000b1c8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
00000460 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000464 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007af0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000016d8 l     F .text	00000250 altera_avalon_jtag_uart_irq
00001928 l     F .text	000000bc altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_log_macro.S.obj
00001fb8 l       .text	00000000 tx_next_char
00001fec l       .text	00000000 end_tx
00001fc4 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000221c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002284 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002628 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00008cf8 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
00003418 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
00003494 l     F .text	00000040 __fp_lock
000034d4 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 alt_close.c
00006600 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00006804 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00006930 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00006a78 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00006bb8 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
00006ce4 l     F .text	0000004c alt_get_errno
00006d30 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00006f84 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000955c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000718c l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00003074 g     F .text	0000000c .hidden __stack_chk_fail_local
000065a8 g     F .text	00000058 _isatty_r
00000fb8 g     F .text	00000184 alt_main
00002e2c g     F .text	00000094 cleanup_glue
00006910 g     F .text	00000020 _getpid
00002cf4 g     F .text	0000012c _puts_r
0000b0f0 g     O .bss	00000080 alt_irq
00006218 g     F .text	00000064 _lseek_r
00009560 g       *ABS*	00000000 __flash_rwdata_start
0000b1c8 g       *ABS*	00000000 __alt_heap_start
00005990 g     F .text	00000060 _kill_r
00009d28 g       *ABS*	00000000 __global_pointer$
0000b0d8 g     O .bss	00000001 __lock___atexit_recursive_mutex
000054d0 g     F .text	00000090 _signal_r
00005ae0 g     F .text	00000078 __sseek
00003594 g     F .text	000001b0 __sinit
00003514 g     F .text	0000006c __sfmoreglue
00007a50 g       *ABS*	00000000 __tls_base
00004e54 g     F .text	0000000c __malloc_unlock
00000d7c g     F .text	0000005c alt_log_jtag_uart_isr_proc
0000b0c0 g     O .bss	00000001 __lock___arc4random_mutex
00004c50 g     F .text	0000011c memmove
00003580 g     F .text	00000014 _cleanup
0000b0bc g     O .bss	00000004 __stack_chk_guard
0000b078 g     O .bss	00000001 alt_log_write_on_flag
00009550 g     O .rwdata	00000004 __atexit_recursive_mutex
000043c4 g     F .text	00000004 __retarget_lock_close
0000b07b g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
00000000 g     F .entry	00000004 __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00006548 g     F .text	00000060 _fstat_r
0000b0b8 g     O .bss	00000004 errno
00005a50 g     F .text	00000008 __seofread
0000b170 g     O .bss	00000011 alt_log_write_buf
0000b08c g     O .bss	00000004 alt_argv
00001334 g     F .text	00000034 usleep
00008b78 g     O .rwdata	00000180 alt_fd_list
00007a6c g     O .rwdata	0000001d alt_log_msg_alt_main
0000b07a g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
000072e8 g     F .text	00000120 alt_find_dev
00002b50 g     F .text	000001a4 memcpy
00003488 g     F .text	0000000c _cleanup_r
00002a1c g     F .text	000000b0 alt_niosv_timer_sc_isr
00002704 g     F .text	00000078 alt_io_redirect
00002e20 g     F .text	0000000c puts
00007624 g       *ABS*	00000000 __fini_array_end
00001b50 g     F .text	0000022c altera_avalon_jtag_uart_read
00005560 g     F .text	000000c4 _raise_r
00006850 g     F .text	000000c0 _fstat
000001b4 g     F .exceptions	0000011c handle_trap
00000f30 g     F .text	00000088 alt_log_system_clock
0000b0ec g     O .bss	00000004 __malloc_top_pad
000059f0 g     F .text	00000004 _getpid_r
0000b0a8 g     O .bss	00000004 __dso_handle
00003dc8 g     F .text	0000049c __sfvwrite_r
00005624 g     F .text	000000e0 __sigtramp_r
00000b34 g     F .text	000000a4 alt_log_printf_proc
0000541c g     F .text	00000058 _sbrk_r
0000b07c g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
000064e4 g     F .text	00000064 _read_r
00009544 g     O .rwdata	00000004 alt_max_fd
00005ca0 g     F .text	00000178 _fclose_r
00006150 g     F .text	000000c8 fflush
0000b0e8 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b188 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
00003080 g     F .text	0000001c __stack_chk_init
0000b0cc g     O .bss	00000001 __lock___env_recursive_mutex
0000697c g     F .text	000000fc _isatty
0000b0e0 g     O .bss	00000001 __lock___sinit_recursive_mutex
00007a4c g     O .rodata	00000004 _global_impure_ptr
00004ec4 g     F .text	00000558 _realloc_r
0000b1c8 g       *ABS*	00000000 __bss_end
000024ac g     F .text	0000017c alt_iic_isr_register
000011d4 g     F .text	00000160 alt_tick
00006e1c g     F .text	00000168 _open
0000b084 g     O .bss	00000004 alt_system_clock_in_sec
000070d8 g     F .text	000000b4 _sbrk
00000d34 g     F .text	00000048 alt_log_jtag_uart_startup_info
00002fdc g     F .text	00000098 __stack_chk_fail
00007a50 g       *ABS*	00000000 __tbss_start
00002acc g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
000038d0 g     F .text	0000002c __fp_lock_all
0000113c g     F .text	00000098 alt_alarm_stop
0000b079 g     O .bss	00000001 alt_log_sys_clk_on_flag
000000c0 g     F .exceptions	000000f4 alt_irq_handler
000005ec g     F .text	00000548 alt_log_private_printf
00008b50 g     O .rwdata	00000028 alt_dev_null
00003928 g     F .text	0000005c __libc_fini_array
00007a50 g     O .rwdata	00000019 alt_log_msg_bss
000028d0 g     F .text	00000084 alt_niosv_mtime_get
00002ec0 g     F .text	0000011c _reclaim_reent
000021d4 g     F .text	00000048 alt_dcache_flush_all
0000b0d0 g     O .bss	00000001 __lock___malloc_recursive_mutex
00009560 g       *ABS*	00000000 __ram_rwdata_end
0000953c g     O .rwdata	00000008 alt_dev_list
0000317c g     F .text	00000014 write
000028ac g     F .text	00000024 alt_timestamp_freq
00007a50 g       *ABS*	00000000 __ram_rodata_end
0000760c g     F .text	00000010 fstat
0000b1c8 g       *ABS*	00000000 end
00002248 g     F .text	0000003c alt_dev_reg
000043e8 g     F .text	00000004 __retarget_lock_release_recursive
00000534 g     F .text	00000058 alt_log_txchar
000043dc g     F .text	00000008 __retarget_lock_try_acquire_recursive
000015b0 g     F .text	00000128 altera_avalon_jtag_uart_init
00010000 g       *ABS*	00000000 __alt_stack_pointer
00001d7c g     F .text	0000023c altera_avalon_jtag_uart_write
000038a0 g     F .text	0000000c __sfp_lock_acquire
00004b8c g     F .text	000000c4 memchr
00003ac0 g     F .text	00000308 _free_r
000032dc g     F .text	0000013c __call_exitprocs
00009554 g     O .rwdata	00000004 __malloc_sbrk_base
00000354 g     F .text	00000110 _start
0000b098 g     O .bss	00000004 _alt_tick_rate
000043d4 g     F .text	00000008 __retarget_lock_try_acquire
00006c04 g     F .text	000000e0 _lseek
0000b0a0 g     O .bss	00000008 _alt_nticks
000057c4 g     F .text	00000094 signal
000029b0 g     F .text	0000006c alt_niosv_mtimecmp_get
000013a0 g     F .text	0000009c alt_sys_init
00004e60 g     F .text	00000064 _open_r
00007a50 g       *ABS*	00000000 __tdata_source
000031f4 g     F .text	000000e8 __register_exitproc
00001fb8 g       .text	00000000 tx_log_str
000019e4 g     F .text	0000006c altera_avalon_jtag_uart_close
00007a50 g       *ABS*	00000000 __ram_rwdata_start
00007624 g       *ABS*	00000000 __ram_rodata_start
0000b1a0 g     O .bss	00000028 __malloc_current_mallinfo
0000b0b0 g     O .bss	00000008 alt_niosv_timestamp_offset
00009528 g     O .rwdata	00000004 alt_log_boot_on_flag
0000b074 g     O .bss	00000004 alt_niosv_timer_interrupt_handler
0000143c g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00007544 g     F .text	000000c8 alt_get_fd
0000215c g     F .text	00000078 alt_busy_sleep
00003430 g     F .text	00000058 _close_r
00000c54 g     F .text	000000e0 alt_log_jtag_uart_print_control_reg
00001504 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
0000b1c8 g       *ABS*	00000000 __alt_stack_base
00001558 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
000043c8 g     F .text	00000004 __retarget_lock_close_recursive
00005b60 g     F .text	00000140 __swsetup_r
00003744 g     F .text	0000015c __sfp
00009120 g     O .rwdata	00000408 __malloc_av_
000038c4 g     F .text	0000000c __sinit_lock_release
000059f4 g     F .text	0000005c __sread
00007408 g     F .text	0000013c alt_find_file
000022d0 g     F .text	000000a8 alt_dev_llist_insert
00004e48 g     F .text	0000000c __malloc_lock
00007624 g       *ABS*	00000000 __fini_array_start
00006070 g     F .text	000000e0 _fflush_r
000043d0 g     F .text	00000004 __retarget_lock_acquire_recursive
0000b070 g       *ABS*	00000000 __bss_start
00007a50 g       *ABS*	00000000 __tdata_start
00007a50 g       *ABS*	00000000 __tdata_end
00004d6c g     F .text	000000dc memset
000002d0 g     F .text	00000084 main
0000b090 g     O .bss	00000004 alt_envp
0000b0e4 g     O .bss	00000004 __malloc_max_total_mem
000014a0 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
000043c0 g     F .text	00000004 __retarget_lock_init_recursive
00005b58 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
00005e18 g     F .text	0000000c fclose
00002814 g     F .text	00000040 alt_timestamp_start
00007624 g       *ABS*	00000000 __init_array_end
000043ec g     F .text	000007a0 _malloc_r
00009548 g     O .rwdata	00000004 alt_errno
00000bd8 g     F .text	0000007c altera_avalon_jtag_uart_report_log
00005858 g     F .text	0000005c _init_signal
00004264 g     F .text	000000a4 _fwalk
00007ac0 g     O .rwdata	0000002a alt_log_msg_cache
00003984 g     F .text	0000013c _malloc_trim_r
00007624 g       *ABS*	00000000 __flash_rodata_start
000043bc g     F .text	00000004 __retarget_lock_init
00001368 g     F .text	00000038 alt_irq_init
0000277c g     F .text	00000074 alt_release_fd
00007a8c g     O .rwdata	00000031 alt_log_msg_stackpointer
00002b08 g     F .text	00000014 atexit
00003190 g     F .text	00000064 _write_r
0000954c g     O .rwdata	00000004 _impure_ptr
0000b088 g     O .bss	00000004 alt_argc
00005e24 g     F .text	0000024c __sflush_r
000023d8 g     F .text	00000060 _do_dtors
000038fc g     F .text	0000002c __fp_unlock_all
00009534 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002854 g     F .text	00000058 alt_timestamp
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0000640c g     F .text	000000d8 __swhatbuf_r
0000b080 g     O .bss	00000004 alt_log_sys_clk_count
00000dd8 g     F .text	00000158 alt_log_write
00002458 g     F .text	00000054 alt_ic_isr_register
00000020 g       .exceptions	00000000 trap_vector
000071d8 g     F .text	00000110 _write
00009560 g       *ABS*	00000000 _edata
0000b1c8 g       *ABS*	00000000 _end
000002d0 g       *ABS*	00000000 __ram_exceptions_end
0000b0d4 g     O .bss	00000001 __lock___at_quick_exit_mutex
00001a50 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
000027f0 g     F .text	00000024 intel_niosv_irq_init
00005a58 g     F .text	00000088 __swrite
00009558 g     O .rwdata	00000004 __malloc_trim_threshold
00002b1c g     F .text	00000034 exit
00004308 g     F .text	000000b4 _fwalk_reent
00006ac4 g     F .text	000000f4 _kill
00010000 g       *ABS*	00000000 __alt_data_end
00007a50 g       *ABS*	00000000 __tbss_end
000038ac g     F .text	0000000c __sfp_lock_release
00006fd0 g     F .text	00000108 _read
0000761c g       *ABS*	00000000 __init_array_start
000043cc g     F .text	00000004 __retarget_lock_acquire
000043e4 g     F .text	00000004 __retarget_lock_release
0000672c g     F .text	000000d8 _exit
00001ff0 g     F .text	0000016c alt_alarm_start
0000b0c4 g     O .bss	00000001 __lock___dd_hash_mutex
0000627c g     F .text	00000190 __smakebuf_r
0000b0c8 g     O .bss	00000001 __lock___tz_mutex
0000309c g     F .text	0000008c strlen
00005474 g     F .text	0000005c _init_signal_r
00003134 g     F .text	00000048 open
00002438 g     F .text	00000020 alt_icache_flush_all
00002954 g     F .text	0000005c alt_niosv_mtimecmp_set
0000952c g     O .rwdata	00000008 alt_alarm_list
00002378 g     F .text	00000060 _do_ctors
000058b4 g     F .text	000000dc __sigtramp
00003128 g     F .text	0000000c close
0000058c g     F .text	00000060 alt_log_repchar
000004c8 g     F .text	0000006c alt_load
0000b070 g     O .bss	00000004 alt_niosv_software_interrupt_handler
0000b0dc g     O .bss	00000001 __lock___sfp_recursive_mutex
0000664c g     F .text	000000e0 _close
00005704 g     F .text	000000c0 raise
000038b8 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	3540006f          	j	354 <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
  20:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
  24:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  28:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  2c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  30:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  34:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  38:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  3c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  40:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  44:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  48:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  4c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  50:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  54:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  58:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  5c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  60:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	ra,1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  b8:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	addi	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fe442783          	lw	a5,-28(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  f8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fd442703          	lw	a4,-44(s0)
 108:	fd842783          	lw	a5,-40(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	0000b7b7          	lui	a5,0xb
 118:	0f078713          	addi	a4,a5,240 # b0f0 <alt_irq>
 11c:	fdc42783          	lw	a5,-36(s0)
 120:	00379793          	slli	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	0000b7b7          	lui	a5,0xb
 130:	0f078693          	addi	a3,a5,240 # b0f0 <alt_irq>
 134:	fdc42783          	lw	a5,-36(s0)
 138:	00379793          	slli	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 160:	fe842703          	lw	a4,-24(s0)
 164:	fec42783          	lw	a5,-20(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srli	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fd842783          	lw	a5,-40(s0)
 178:	00179793          	slli	a5,a5,0x1
 17c:	fcf42c23          	sw	a5,-40(s0)
            i++;
 180:	fdc42783          	lw	a5,-36(s0)
 184:	00178793          	addi	a5,a5,1
 188:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 194:	fd442783          	lw	a5,-44(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	00000013          	nop
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	addi	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff7c793          	not	a5,a5
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1f4:	fe842783          	lw	a5,-24(s0)
 1f8:	0a078663          	beqz	a5,2a4 <handle_trap+0xf0>
        switch (exception_code) {
 1fc:	fec42703          	lw	a4,-20(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fec42703          	lw	a4,-20(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	0000b7b7          	lui	a5,0xb
 218:	0747a783          	lw	a5,116(a5) # b074 <alt_niosv_timer_interrupt_handler>
 21c:	08078863          	beqz	a5,2ac <handle_trap+0xf8>
                    ALT_OS_INT_ENTER();
 220:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	0000b7b7          	lui	a5,0xb
 228:	0747a783          	lw	a5,116(a5) # b074 <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	00000013          	nop
                break;
 240:	06c0006f          	j	2ac <handle_trap+0xf8>
                if (alt_niosv_software_interrupt_handler) {
 244:	0000b7b7          	lui	a5,0xb
 248:	0707a783          	lw	a5,112(a5) # b070 <alt_niosv_software_interrupt_handler>
 24c:	06078463          	beqz	a5,2b4 <handle_trap+0x100>
                    ALT_OS_INT_ENTER();
 250:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	0000b7b7          	lui	a5,0xb
 258:	0707a783          	lw	a5,112(a5) # b070 <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	00000013          	nop
                break;
 270:	0440006f          	j	2b4 <handle_trap+0x100>
                if (exception_code >= 16) {
 274:	fec42703          	lw	a4,-20(s0)
 278:	00f00793          	li	a5,15
 27c:	00e7f663          	bgeu	a5,a4,288 <handle_trap+0xd4>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	ra,c0 <alt_irq_handler>
                break;
 284:	0340006f          	j	2b8 <handle_trap+0x104>
                    ALT_LOG_PRINTF("invalid exception code: %d, epc = %d, tval = %d\n", exception_code, epc, tval);
 288:	fd442683          	lw	a3,-44(s0)
 28c:	fd842603          	lw	a2,-40(s0)
 290:	fec42583          	lw	a1,-20(s0)
 294:	000077b7          	lui	a5,0x7
 298:	64c78513          	addi	a0,a5,1612 # 764c <__fini_array_end+0x28>
 29c:	099000ef          	jal	ra,b34 <alt_log_printf_proc>
                break;
 2a0:	0180006f          	j	2b8 <handle_trap+0x104>
            NIOSV_EBREAK();
 2a4:	00100073          	ebreak
 2a8:	0100006f          	j	2b8 <handle_trap+0x104>
                break;
 2ac:	00000013          	nop
 2b0:	0080006f          	j	2b8 <handle_trap+0x104>
                break;
 2b4:	00000013          	nop
    return epc;
 2b8:	fd842783          	lw	a5,-40(s0)
}
 2bc:	00078513          	mv	a0,a5
 2c0:	02c12083          	lw	ra,44(sp)
 2c4:	02812403          	lw	s0,40(sp)
 2c8:	03010113          	addi	sp,sp,48
 2cc:	00008067          	ret

Disassembly of section .text:

000002d0 <main>:
#include <unistd.h>
#include "system.h"
#include "io.h"

int main (void)
{
     2d0:	fe010113          	addi	sp,sp,-32
     2d4:	00112e23          	sw	ra,28(sp)
     2d8:	00812c23          	sw	s0,24(sp)
     2dc:	02010413          	addi	s0,sp,32
	printf("Starting NIOS V ... \r\n");
     2e0:	000077b7          	lui	a5,0x7
     2e4:	62478513          	addi	a0,a5,1572 # 7624 <__fini_array_end>
     2e8:	339020ef          	jal	ra,2e20 <puts>

	while(1)
	{
		if (IORD_32DIRECT(KEY_BASE,0)){
     2ec:	000207b7          	lui	a5,0x20
     2f0:	02078793          	addi	a5,a5,32 # 20020 <__alt_data_end+0x10020>
     2f4:	0007a783          	lw	a5,0(a5)
     2f8:	fef42223          	sw	a5,-28(s0)
     2fc:	fe442783          	lw	a5,-28(s0)
     300:	02078263          	beqz	a5,324 <main+0x54>
			printf("LED H \r\n");
     304:	000077b7          	lui	a5,0x7
     308:	63c78513          	addi	a0,a5,1596 # 763c <__fini_array_end+0x18>
     30c:	315020ef          	jal	ra,2e20 <puts>
			IOWR_32DIRECT(LED_BASE, 0, 0);
     310:	fe042623          	sw	zero,-20(s0)
     314:	000207b7          	lui	a5,0x20
     318:	fec42703          	lw	a4,-20(s0)
     31c:	00e7a023          	sw	a4,0(a5) # 20000 <__alt_data_end+0x10000>
     320:	0240006f          	j	344 <main+0x74>
		} else {
			printf("LED L \r\n");
     324:	000077b7          	lui	a5,0x7
     328:	64478513          	addi	a0,a5,1604 # 7644 <__fini_array_end+0x20>
     32c:	2f5020ef          	jal	ra,2e20 <puts>
			IOWR_32DIRECT(LED_BASE, 0, 1);
     330:	00100793          	li	a5,1
     334:	fef42423          	sw	a5,-24(s0)
     338:	000207b7          	lui	a5,0x20
     33c:	fe842703          	lw	a4,-24(s0)
     340:	00e7a023          	sw	a4,0(a5) # 20000 <__alt_data_end+0x10000>
		}

		usleep(500000);
     344:	0007a7b7          	lui	a5,0x7a
     348:	12078513          	addi	a0,a5,288 # 7a120 <__alt_data_end+0x6a120>
     34c:	7e9000ef          	jal	ra,1334 <usleep>
		if (IORD_32DIRECT(KEY_BASE,0)){
     350:	f9dff06f          	j	2ec <main+0x1c>

00000354 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     354:	00000297          	auipc	t0,0x0
     358:	ccc28293          	addi	t0,t0,-820 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     35c:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     360:	08800293          	li	t0,136
    csrc mstatus, t0
     364:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     368:	30401073          	csrw	mie,zero
    csrw mip, zero
     36c:	34401073          	csrw	mip,zero
 * RTL simulations can ensure the data cache tag RAM is already
 * initialized so skipping this speeds up RTL simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
#if ALT_CPU_DCACHE_SIZE > 0
    li t0, ALT_CPU_DCACHE_SIZE
     370:	000012b7          	lui	t0,0x1
0:
    /* cbo.inval.ix */
    .insn i 0x0F, 0x2, zero, t0, 0x080
     374:	0802a00f          	.4byte	0x802a00f
    addi t0, t0, -ALT_CPU_DCACHE_LINE_SIZE
     378:	fe028293          	addi	t0,t0,-32 # fe0 <alt_main+0x28>
    bnez t0, 0b
     37c:	fe029ce3          	bnez	t0,374 <_start+0x20>
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     380:	0000a197          	auipc	gp,0xa
     384:	9a818193          	addi	gp,gp,-1624 # 9d28 <__global_pointer$>
    .option pop

    /* Log that the stack pointer is about to be setup. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
     388:	00009597          	auipc	a1,0x9
     38c:	1a058593          	addi	a1,a1,416 # 9528 <alt_log_boot_on_flag>
     390:	0005a503          	lw	a0,0(a1)
     394:	00050863          	beqz	a0,3a4 <_start+0x50>
     398:	00007517          	auipc	a0,0x7
     39c:	6f450513          	addi	a0,a0,1780 # 7a8c <alt_log_msg_stackpointer>
     3a0:	419010ef          	jal	ra,1fb8 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     3a4:	00010117          	auipc	sp,0x10
     3a8:	c5c10113          	addi	sp,sp,-932 # 10000 <__alt_data_end>
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
     3ac:	00009597          	auipc	a1,0x9
     3b0:	17c58593          	addi	a1,a1,380 # 9528 <alt_log_boot_on_flag>
     3b4:	0005a503          	lw	a0,0(a1)
     3b8:	00050863          	beqz	a0,3c8 <_start+0x74>
     3bc:	00007517          	auipc	a0,0x7
     3c0:	69450513          	addi	a0,a0,1684 # 7a50 <alt_log_msg_bss>
     3c4:	3f5010ef          	jal	ra,1fb8 <tx_log_str>
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     3c8:	0000b317          	auipc	t1,0xb
     3cc:	ca830313          	addi	t1,t1,-856 # b070 <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
     3d0:	0000b397          	auipc	t2,0xb
     3d4:	df838393          	addi	t2,t2,-520 # b1c8 <__alt_heap_start>
0:
    sw zero, (t1)
     3d8:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3dc:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3e0:	fe736ce3          	bltu	t1,t2,3d8 <_start+0x84>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     3e4:	0e4000ef          	jal	ra,4c8 <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     3e8:	00007317          	auipc	t1,0x7
     3ec:	66830313          	addi	t1,t1,1640 # 7a50 <alt_log_msg_bss>
    la t2, __tbss_end
     3f0:	00007397          	auipc	t2,0x7
     3f4:	66038393          	addi	t2,t2,1632 # 7a50 <alt_log_msg_bss>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     3f8:	00737863          	bgeu	t1,t2,408 <_start+0xb4>
0:
    sw zero, (t1)
     3fc:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     400:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     404:	fe736ce3          	bltu	t1,t2,3fc <_start+0xa8>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     408:	00007297          	auipc	t0,0x7
     40c:	64828293          	addi	t0,t0,1608 # 7a50 <alt_log_msg_bss>
    la t1, __tdata_end
     410:	00007317          	auipc	t1,0x7
     414:	64030313          	addi	t1,t1,1600 # 7a50 <alt_log_msg_bss>
    la t2, __tdata_source
     418:	00007397          	auipc	t2,0x7
     41c:	63838393          	addi	t2,t2,1592 # 7a50 <alt_log_msg_bss>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     420:	0062fc63          	bgeu	t0,t1,438 <_start+0xe4>
0:
    lw s1, (t0)
     424:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     428:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     42c:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     430:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     434:	fe62e8e3          	bltu	t0,t1,424 <_start+0xd0>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     438:	00007217          	auipc	tp,0x7
     43c:	61820213          	addi	tp,tp,1560 # 7a50 <alt_log_msg_bss>

    /* Log that alt_main is about to be called. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
     440:	00009597          	auipc	a1,0x9
     444:	0e858593          	addi	a1,a1,232 # 9528 <alt_log_boot_on_flag>
     448:	0005a503          	lw	a0,0(a1)
     44c:	00050863          	beqz	a0,45c <_start+0x108>
     450:	00007517          	auipc	a0,0x7
     454:	61c50513          	addi	a0,a0,1564 # 7a6c <alt_log_msg_alt_main>
     458:	361010ef          	jal	ra,1fb8 <tx_log_str>
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     45c:	35d000ef          	jal	ra,fb8 <alt_main>

00000460 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     460:	0000006f          	j	460 <alt_after_alt_main>

00000464 <alt_load_section>:
     464:	fe010113          	addi	sp,sp,-32
     468:	00812e23          	sw	s0,28(sp)
     46c:	02010413          	addi	s0,sp,32
     470:	fea42623          	sw	a0,-20(s0)
     474:	feb42423          	sw	a1,-24(s0)
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     478:	fec42223          	sw	a2,-28(s0)
  if (to != from)
     47c:	fe842703          	lw	a4,-24(s0)
     480:	fec42783          	lw	a5,-20(s0)
     484:	02f70a63          	beq	a4,a5,4b8 <alt_load_section+0x54>
  {
    while( to != end )
     488:	0240006f          	j	4ac <alt_load_section+0x48>
    {
      *to++ = *from++;
     48c:	fec42703          	lw	a4,-20(s0)
     490:	00470793          	addi	a5,a4,4
     494:	fef42623          	sw	a5,-20(s0)
     498:	fe842783          	lw	a5,-24(s0)
     49c:	00478693          	addi	a3,a5,4
     4a0:	fed42423          	sw	a3,-24(s0)
     4a4:	00072703          	lw	a4,0(a4)
     4a8:	00e7a023          	sw	a4,0(a5)
    while( to != end )
     4ac:	fe842703          	lw	a4,-24(s0)
     4b0:	fe442783          	lw	a5,-28(s0)
     4b4:	fcf71ce3          	bne	a4,a5,48c <alt_load_section+0x28>
    }
  }
}
     4b8:	00000013          	nop
     4bc:	01c12403          	lw	s0,28(sp)
     4c0:	02010113          	addi	sp,sp,32
     4c4:	00008067          	ret

000004c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     4c8:	ff010113          	addi	sp,sp,-16
     4cc:	00112623          	sw	ra,12(sp)
     4d0:	00812423          	sw	s0,8(sp)
     4d4:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     4d8:	83818613          	addi	a2,gp,-1992 # 9560 <__flash_rwdata_start>
     4dc:	000087b7          	lui	a5,0x8
     4e0:	a5078593          	addi	a1,a5,-1456 # 7a50 <alt_log_msg_bss>
     4e4:	83818513          	addi	a0,gp,-1992 # 9560 <__flash_rwdata_start>
     4e8:	f7dff0ef          	jal	ra,464 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     4ec:	2d000613          	li	a2,720
     4f0:	02000593          	li	a1,32
     4f4:	02000513          	li	a0,32
     4f8:	f6dff0ef          	jal	ra,464 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     4fc:	000087b7          	lui	a5,0x8
     500:	a5078613          	addi	a2,a5,-1456 # 7a50 <alt_log_msg_bss>
     504:	000077b7          	lui	a5,0x7
     508:	62478593          	addi	a1,a5,1572 # 7624 <__fini_array_end>
     50c:	000077b7          	lui	a5,0x7
     510:	62478513          	addi	a0,a5,1572 # 7624 <__fini_array_end>
     514:	f51ff0ef          	jal	ra,464 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     518:	4bd010ef          	jal	ra,21d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
     51c:	71d010ef          	jal	ra,2438 <alt_icache_flush_all>
}
     520:	00000013          	nop
     524:	00c12083          	lw	ra,12(sp)
     528:	00812403          	lw	s0,8(sp)
     52c:	01010113          	addi	sp,sp,16
     530:	00008067          	ret

00000534 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
     534:	fd010113          	addi	sp,sp,-48
     538:	02812623          	sw	s0,44(sp)
     53c:	03010413          	addi	s0,sp,48
     540:	fca42e23          	sw	a0,-36(s0)
     544:	fcb42c23          	sw	a1,-40(s0)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
     548:	00000013          	nop
     54c:	fd842783          	lw	a5,-40(s0)
     550:	00478793          	addi	a5,a5,4
     554:	0007a783          	lw	a5,0(a5)
     558:	fef42423          	sw	a5,-24(s0)
     55c:	fe842703          	lw	a4,-24(s0)
     560:	000107b7          	lui	a5,0x10
     564:	fef764e3          	bltu	a4,a5,54c <alt_log_txchar+0x18>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
     568:	fdc42783          	lw	a5,-36(s0)
     56c:	fef42623          	sw	a5,-20(s0)
     570:	fd842783          	lw	a5,-40(s0)
     574:	fec42703          	lw	a4,-20(s0)
     578:	00e7a023          	sw	a4,0(a5) # 10000 <__alt_data_end>
}
     57c:	00000013          	nop
     580:	02c12403          	lw	s0,44(sp)
     584:	03010113          	addi	sp,sp,48
     588:	00008067          	ret

0000058c <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
     58c:	fe010113          	addi	sp,sp,-32
     590:	00112e23          	sw	ra,28(sp)
     594:	00812c23          	sw	s0,24(sp)
     598:	02010413          	addi	s0,sp,32
     59c:	00050793          	mv	a5,a0
     5a0:	feb42423          	sw	a1,-24(s0)
     5a4:	fec42223          	sw	a2,-28(s0)
     5a8:	fef407a3          	sb	a5,-17(s0)
  while(r-- > 0)
     5ac:	0180006f          	j	5c4 <alt_log_repchar+0x38>
    alt_log_txchar(c,(char*) base);
     5b0:	fef44783          	lbu	a5,-17(s0)
     5b4:	fe442703          	lw	a4,-28(s0)
     5b8:	00070593          	mv	a1,a4
     5bc:	00078513          	mv	a0,a5
     5c0:	f75ff0ef          	jal	ra,534 <alt_log_txchar>
  while(r-- > 0)
     5c4:	fe842783          	lw	a5,-24(s0)
     5c8:	fff78713          	addi	a4,a5,-1
     5cc:	fee42423          	sw	a4,-24(s0)
     5d0:	fef040e3          	bgtz	a5,5b0 <alt_log_repchar+0x24>
}
     5d4:	00000013          	nop
     5d8:	00000013          	nop
     5dc:	01c12083          	lw	ra,28(sp)
     5e0:	01812403          	lw	s0,24(sp)
     5e4:	02010113          	addi	sp,sp,32
     5e8:	00008067          	ret

000005ec <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
     5ec:	fa010113          	addi	sp,sp,-96
     5f0:	04112e23          	sw	ra,92(sp)
     5f4:	04812c23          	sw	s0,88(sp)
     5f8:	04912a23          	sw	s1,84(sp)
     5fc:	06010413          	addi	s0,sp,96
     600:	faa42623          	sw	a0,-84(s0)
     604:	fab42423          	sw	a1,-88(s0)
     608:	fac42223          	sw	a2,-92(s0)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
     60c:	fa042e23          	sw	zero,-68(s0)
  int fmtLong = 0;
     610:	fc042023          	sw	zero,-64(s0)
  int fmtBeforeDecimal = 0;
     614:	fc042223          	sw	zero,-60(s0)
  int fmtAfterDecimal = 0;
     618:	fc042423          	sw	zero,-56(s0)
  int fmtBase = 0;
     61c:	fc042623          	sw	zero,-52(s0)
  int fmtSigned = 0;
     620:	fc042823          	sw	zero,-48(s0)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
     624:	fc042a23          	sw	zero,-44(s0)

  w = fmt;
     628:	fac42783          	lw	a5,-84(s0)
     62c:	faf42a23          	sw	a5,-76(s0)
  state = pfState_chars;
     630:	fa042c23          	sw	zero,-72(s0)

  while(0 != (c = *w++))
     634:	4c80006f          	j	afc <alt_log_private_printf+0x510>
    {
    switch(state)
     638:	fb842703          	lw	a4,-72(s0)
     63c:	00200793          	li	a5,2
     640:	0cf70c63          	beq	a4,a5,718 <alt_log_private_printf+0x12c>
     644:	fb842703          	lw	a4,-72(s0)
     648:	00200793          	li	a5,2
     64c:	4ae7c863          	blt	a5,a4,afc <alt_log_private_printf+0x510>
     650:	fb842783          	lw	a5,-72(s0)
     654:	00078a63          	beqz	a5,668 <alt_log_private_printf+0x7c>
     658:	fb842703          	lw	a4,-72(s0)
     65c:	00100793          	li	a5,1
     660:	06f70263          	beq	a4,a5,6c4 <alt_log_private_printf+0xd8>
     664:	4980006f          	j	afc <alt_log_private_printf+0x510>
      {
      case pfState_chars:
        if(c == '%')
     668:	fb344703          	lbu	a4,-77(s0)
     66c:	02500793          	li	a5,37
     670:	02f71e63          	bne	a4,a5,6ac <alt_log_private_printf+0xc0>
        {
          fmtLeadingZero = 0;
     674:	fa042e23          	sw	zero,-68(s0)
          fmtLong = 0;
     678:	fc042023          	sw	zero,-64(s0)
          fmtBase = 10;
     67c:	00a00793          	li	a5,10
     680:	fcf42623          	sw	a5,-52(s0)
          fmtSigned = 1;
     684:	00100793          	li	a5,1
     688:	fcf42823          	sw	a5,-48(s0)
          fmtCase = 0; /* Only %X sets this. */
     68c:	fc042a23          	sw	zero,-44(s0)
          fmtBeforeDecimal = -1;
     690:	fff00793          	li	a5,-1
     694:	fcf42223          	sw	a5,-60(s0)
          fmtAfterDecimal = -1;
     698:	fff00793          	li	a5,-1
     69c:	fcf42423          	sw	a5,-56(s0)
          state = pfState_firstFmtChar;
     6a0:	00100793          	li	a5,1
     6a4:	faf42c23          	sw	a5,-72(s0)
        }
        else
        {
          alt_log_txchar(c,(char*)base);
        }
        break;
     6a8:	4540006f          	j	afc <alt_log_private_printf+0x510>
          alt_log_txchar(c,(char*)base);
     6ac:	fb344783          	lbu	a5,-77(s0)
     6b0:	fa842703          	lw	a4,-88(s0)
     6b4:	00070593          	mv	a1,a4
     6b8:	00078513          	mv	a0,a5
     6bc:	e79ff0ef          	jal	ra,534 <alt_log_txchar>
        break;
     6c0:	43c0006f          	j	afc <alt_log_private_printf+0x510>

      case pfState_firstFmtChar:
        if(c == '0')
     6c4:	fb344703          	lbu	a4,-77(s0)
     6c8:	03000793          	li	a5,48
     6cc:	00f71c63          	bne	a4,a5,6e4 <alt_log_private_printf+0xf8>
        {
          fmtLeadingZero = 1;
     6d0:	00100793          	li	a5,1
     6d4:	faf42e23          	sw	a5,-68(s0)
          state = pfState_otherFmtChar;
     6d8:	00200793          	li	a5,2
     6dc:	faf42c23          	sw	a5,-72(s0)
        else
        {
          state = pfState_otherFmtChar;
          goto otherFmtChar;
        }
        break;
     6e0:	41c0006f          	j	afc <alt_log_private_printf+0x510>
        else if(c == '%')
     6e4:	fb344703          	lbu	a4,-77(s0)
     6e8:	02500793          	li	a5,37
     6ec:	02f71063          	bne	a4,a5,70c <alt_log_private_printf+0x120>
          alt_log_txchar(c,(char*)base);
     6f0:	fb344783          	lbu	a5,-77(s0)
     6f4:	fa842703          	lw	a4,-88(s0)
     6f8:	00070593          	mv	a1,a4
     6fc:	00078513          	mv	a0,a5
     700:	e35ff0ef          	jal	ra,534 <alt_log_txchar>
          state = pfState_chars;
     704:	fa042c23          	sw	zero,-72(s0)
        break;
     708:	3f40006f          	j	afc <alt_log_private_printf+0x510>
          state = pfState_otherFmtChar;
     70c:	00200793          	li	a5,2
     710:	faf42c23          	sw	a5,-72(s0)
          goto otherFmtChar;
     714:	00000013          	nop

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
     718:	fb344703          	lbu	a4,-77(s0)
     71c:	02e00793          	li	a5,46
     720:	00f71663          	bne	a4,a5,72c <alt_log_private_printf+0x140>
        {
          fmtAfterDecimal = 0;
     724:	fc042423          	sw	zero,-56(s0)
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
          }
        break;
     728:	3d00006f          	j	af8 <alt_log_private_printf+0x50c>
        else if('0' <= c && c <= '9')
     72c:	fb344703          	lbu	a4,-77(s0)
     730:	02f00793          	li	a5,47
     734:	08e7f463          	bgeu	a5,a4,7bc <alt_log_private_printf+0x1d0>
     738:	fb344703          	lbu	a4,-77(s0)
     73c:	03900793          	li	a5,57
     740:	06e7ee63          	bltu	a5,a4,7bc <alt_log_private_printf+0x1d0>
          c -= '0';
     744:	fb344783          	lbu	a5,-77(s0)
     748:	fd078793          	addi	a5,a5,-48
     74c:	faf409a3          	sb	a5,-77(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     750:	fc842783          	lw	a5,-56(s0)
     754:	0407d063          	bgez	a5,794 <alt_log_private_printf+0x1a8>
            if(fmtBeforeDecimal < 0)
     758:	fc442783          	lw	a5,-60(s0)
     75c:	0007d663          	bgez	a5,768 <alt_log_private_printf+0x17c>
              fmtBeforeDecimal = 0;
     760:	fc042223          	sw	zero,-60(s0)
     764:	01c0006f          	j	780 <alt_log_private_printf+0x194>
              fmtBeforeDecimal *= 10;
     768:	fc442703          	lw	a4,-60(s0)
     76c:	00070793          	mv	a5,a4
     770:	00279793          	slli	a5,a5,0x2
     774:	00e787b3          	add	a5,a5,a4
     778:	00179793          	slli	a5,a5,0x1
     77c:	fcf42223          	sw	a5,-60(s0)
            fmtBeforeDecimal += c;
     780:	fb344783          	lbu	a5,-77(s0)
     784:	fc442703          	lw	a4,-60(s0)
     788:	00f707b3          	add	a5,a4,a5
     78c:	fcf42223          	sw	a5,-60(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     790:	3680006f          	j	af8 <alt_log_private_printf+0x50c>
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
     794:	fc842703          	lw	a4,-56(s0)
     798:	00070793          	mv	a5,a4
     79c:	00279793          	slli	a5,a5,0x2
     7a0:	00e787b3          	add	a5,a5,a4
     7a4:	00179793          	slli	a5,a5,0x1
     7a8:	00078713          	mv	a4,a5
     7ac:	fb344783          	lbu	a5,-77(s0)
     7b0:	00f707b3          	add	a5,a4,a5
     7b4:	fcf42423          	sw	a5,-56(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     7b8:	3400006f          	j	af8 <alt_log_private_printf+0x50c>
        else if(c == 'l')
     7bc:	fb344703          	lbu	a4,-77(s0)
     7c0:	06c00793          	li	a5,108
     7c4:	00f71863          	bne	a4,a5,7d4 <alt_log_private_printf+0x1e8>
          fmtLong = 1;
     7c8:	00100793          	li	a5,1
     7cc:	fcf42023          	sw	a5,-64(s0)
        break;
     7d0:	3280006f          	j	af8 <alt_log_private_printf+0x50c>
          switch(c)
     7d4:	fb344783          	lbu	a5,-77(s0)
     7d8:	fa878793          	addi	a5,a5,-88
     7dc:	02000713          	li	a4,32
     7e0:	30f76863          	bltu	a4,a5,af0 <alt_log_private_printf+0x504>
     7e4:	00279713          	slli	a4,a5,0x2
     7e8:	000077b7          	lui	a5,0x7
     7ec:	68078793          	addi	a5,a5,1664 # 7680 <__fini_array_end+0x5c>
     7f0:	00f707b3          	add	a5,a4,a5
     7f4:	0007a783          	lw	a5,0(a5)
     7f8:	00078067          	jr	a5
                if(fmtLong)
     7fc:	fc042783          	lw	a5,-64(s0)
     800:	02078e63          	beqz	a5,83c <alt_log_private_printf+0x250>
                  if (fmtSigned)
     804:	fd042783          	lw	a5,-48(s0)
     808:	00078e63          	beqz	a5,824 <alt_log_private_printf+0x238>
                    v = va_arg(args,long);
     80c:	fa442783          	lw	a5,-92(s0)
     810:	00478713          	addi	a4,a5,4
     814:	fae42223          	sw	a4,-92(s0)
     818:	0007a783          	lw	a5,0(a5)
     81c:	fcf42c23          	sw	a5,-40(s0)
     820:	0500006f          	j	870 <alt_log_private_printf+0x284>
                    v = va_arg(args,unsigned long);
     824:	fa442783          	lw	a5,-92(s0)
     828:	00478713          	addi	a4,a5,4
     82c:	fae42223          	sw	a4,-92(s0)
     830:	0007a783          	lw	a5,0(a5)
     834:	fcf42c23          	sw	a5,-40(s0)
     838:	0380006f          	j	870 <alt_log_private_printf+0x284>
                  if (fmtSigned)
     83c:	fd042783          	lw	a5,-48(s0)
     840:	00078e63          	beqz	a5,85c <alt_log_private_printf+0x270>
                    v = va_arg(args,int);
     844:	fa442783          	lw	a5,-92(s0)
     848:	00478713          	addi	a4,a5,4
     84c:	fae42223          	sw	a4,-92(s0)
     850:	0007a783          	lw	a5,0(a5)
     854:	fcf42c23          	sw	a5,-40(s0)
     858:	0180006f          	j	870 <alt_log_private_printf+0x284>
                    v = va_arg(args,unsigned int);
     85c:	fa442783          	lw	a5,-92(s0)
     860:	00478713          	addi	a4,a5,4
     864:	fae42223          	sw	a4,-92(s0)
     868:	0007a783          	lw	a5,0(a5)
     86c:	fcf42c23          	sw	a5,-40(s0)
                sign = 0;
     870:	fe042223          	sw	zero,-28(s0)
                if( fmtSigned && (v & (0x80000000)) )
     874:	fd042783          	lw	a5,-48(s0)
     878:	02078063          	beqz	a5,898 <alt_log_private_printf+0x2ac>
     87c:	fd842783          	lw	a5,-40(s0)
     880:	0007dc63          	bgez	a5,898 <alt_log_private_printf+0x2ac>
                  v = ~v + 1;
     884:	fd842783          	lw	a5,-40(s0)
     888:	40f007b3          	neg	a5,a5
     88c:	fcf42c23          	sw	a5,-40(s0)
                  sign = 1;
     890:	00100793          	li	a5,1
     894:	fef42223          	sw	a5,-28(s0)
                vShrink = v;
     898:	fd842783          	lw	a5,-40(s0)
     89c:	fef42023          	sw	a5,-32(s0)
                p = 1;
     8a0:	00100793          	li	a5,1
     8a4:	fcf42e23          	sw	a5,-36(s0)
                digitCount = 1;
     8a8:	00100793          	li	a5,1
     8ac:	fef42423          	sw	a5,-24(s0)
                while( (vShrink = vShrink / fmtBase) > 0 )
     8b0:	0200006f          	j	8d0 <alt_log_private_printf+0x2e4>
                  digitCount++;
     8b4:	fe842783          	lw	a5,-24(s0)
     8b8:	00178793          	addi	a5,a5,1
     8bc:	fef42423          	sw	a5,-24(s0)
                  p *= fmtBase;
     8c0:	fcc42783          	lw	a5,-52(s0)
     8c4:	fdc42703          	lw	a4,-36(s0)
     8c8:	02f707b3          	mul	a5,a4,a5
     8cc:	fcf42e23          	sw	a5,-36(s0)
                while( (vShrink = vShrink / fmtBase) > 0 )
     8d0:	fcc42783          	lw	a5,-52(s0)
     8d4:	fe042703          	lw	a4,-32(s0)
     8d8:	02f757b3          	divu	a5,a4,a5
     8dc:	fef42023          	sw	a5,-32(s0)
     8e0:	fe042783          	lw	a5,-32(s0)
     8e4:	fc0798e3          	bnez	a5,8b4 <alt_log_private_printf+0x2c8>
                fmtBeforeDecimal -= digitCount;
     8e8:	fc442703          	lw	a4,-60(s0)
     8ec:	fe842783          	lw	a5,-24(s0)
     8f0:	40f707b3          	sub	a5,a4,a5
     8f4:	fcf42223          	sw	a5,-60(s0)
                if(fmtLeadingZero)
     8f8:	fbc42783          	lw	a5,-68(s0)
     8fc:	02078e63          	beqz	a5,938 <alt_log_private_printf+0x34c>
                  if(sign)
     900:	fe442783          	lw	a5,-28(s0)
     904:	02078063          	beqz	a5,924 <alt_log_private_printf+0x338>
                    alt_log_txchar('-',(char*)base);
     908:	fa842783          	lw	a5,-88(s0)
     90c:	00078593          	mv	a1,a5
     910:	02d00513          	li	a0,45
     914:	c21ff0ef          	jal	ra,534 <alt_log_txchar>
                    fmtBeforeDecimal--;
     918:	fc442783          	lw	a5,-60(s0)
     91c:	fff78793          	addi	a5,a5,-1
     920:	fcf42223          	sw	a5,-60(s0)
                  alt_log_repchar('0',fmtBeforeDecimal,base);
     924:	fa842603          	lw	a2,-88(s0)
     928:	fc442583          	lw	a1,-60(s0)
     92c:	03000513          	li	a0,48
     930:	c5dff0ef          	jal	ra,58c <alt_log_repchar>
     934:	0c00006f          	j	9f4 <alt_log_private_printf+0x408>
                    if(sign)
     938:	fe442783          	lw	a5,-28(s0)
     93c:	00078863          	beqz	a5,94c <alt_log_private_printf+0x360>
                      fmtBeforeDecimal--;
     940:	fc442783          	lw	a5,-60(s0)
     944:	fff78793          	addi	a5,a5,-1
     948:	fcf42223          	sw	a5,-60(s0)
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
     94c:	fa842603          	lw	a2,-88(s0)
     950:	fc442583          	lw	a1,-60(s0)
     954:	02000513          	li	a0,32
     958:	c35ff0ef          	jal	ra,58c <alt_log_repchar>
                    if(sign)
     95c:	fe442783          	lw	a5,-28(s0)
     960:	08078a63          	beqz	a5,9f4 <alt_log_private_printf+0x408>
                      alt_log_txchar('-',(char*)base);
     964:	fa842783          	lw	a5,-88(s0)
     968:	00078593          	mv	a1,a5
     96c:	02d00513          	li	a0,45
     970:	bc5ff0ef          	jal	ra,534 <alt_log_txchar>
                while(p)
     974:	0800006f          	j	9f4 <alt_log_private_printf+0x408>
                  d = v / p;
     978:	fd842703          	lw	a4,-40(s0)
     97c:	fdc42783          	lw	a5,-36(s0)
     980:	02f757b3          	divu	a5,a4,a5
     984:	faf40923          	sb	a5,-78(s0)
                  d += '0';
     988:	fb244783          	lbu	a5,-78(s0)
     98c:	03078793          	addi	a5,a5,48
     990:	faf40923          	sb	a5,-78(s0)
                  if(d > '9')
     994:	fb244703          	lbu	a4,-78(s0)
     998:	03900793          	li	a5,57
     99c:	02e7f263          	bgeu	a5,a4,9c0 <alt_log_private_printf+0x3d4>
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
     9a0:	fd442783          	lw	a5,-44(s0)
     9a4:	00078663          	beqz	a5,9b0 <alt_log_private_printf+0x3c4>
     9a8:	00700793          	li	a5,7
     9ac:	0080006f          	j	9b4 <alt_log_private_printf+0x3c8>
     9b0:	02700793          	li	a5,39
     9b4:	fb244703          	lbu	a4,-78(s0)
     9b8:	00e787b3          	add	a5,a5,a4
     9bc:	faf40923          	sb	a5,-78(s0)
                  alt_log_txchar(d,(char*)base);
     9c0:	fb244783          	lbu	a5,-78(s0)
     9c4:	fa842703          	lw	a4,-88(s0)
     9c8:	00070593          	mv	a1,a4
     9cc:	00078513          	mv	a0,a5
     9d0:	b65ff0ef          	jal	ra,534 <alt_log_txchar>
                  v = v % p;
     9d4:	fd842703          	lw	a4,-40(s0)
     9d8:	fdc42783          	lw	a5,-36(s0)
     9dc:	02f777b3          	remu	a5,a4,a5
     9e0:	fcf42c23          	sw	a5,-40(s0)
                  p = p / fmtBase;
     9e4:	fcc42783          	lw	a5,-52(s0)
     9e8:	fdc42703          	lw	a4,-36(s0)
     9ec:	02f757b3          	divu	a5,a4,a5
     9f0:	fcf42e23          	sw	a5,-36(s0)
                while(p)
     9f4:	fdc42783          	lw	a5,-36(s0)
     9f8:	f80790e3          	bnez	a5,978 <alt_log_private_printf+0x38c>
              state = pfState_chars;
     9fc:	fa042c23          	sw	zero,-72(s0)
              break;
     a00:	0f00006f          	j	af0 <alt_log_private_printf+0x504>
              fmtSigned = 0;
     a04:	fc042823          	sw	zero,-48(s0)
              goto doIntegerPrint;
     a08:	df5ff06f          	j	7fc <alt_log_private_printf+0x210>
              fmtSigned = 0;
     a0c:	fc042823          	sw	zero,-48(s0)
              fmtBase = 8;
     a10:	00800793          	li	a5,8
     a14:	fcf42623          	sw	a5,-52(s0)
              goto doIntegerPrint;
     a18:	de5ff06f          	j	7fc <alt_log_private_printf+0x210>
              fmtSigned = 0;
     a1c:	fc042823          	sw	zero,-48(s0)
              fmtBase = 16;
     a20:	01000793          	li	a5,16
     a24:	fcf42623          	sw	a5,-52(s0)
              goto doIntegerPrint;
     a28:	dd5ff06f          	j	7fc <alt_log_private_printf+0x210>
              fmtSigned = 0;
     a2c:	fc042823          	sw	zero,-48(s0)
              fmtBase = 16;
     a30:	01000793          	li	a5,16
     a34:	fcf42623          	sw	a5,-52(s0)
              fmtCase = 1;
     a38:	00100793          	li	a5,1
     a3c:	fcf42a23          	sw	a5,-44(s0)
              goto doIntegerPrint;
     a40:	dbdff06f          	j	7fc <alt_log_private_printf+0x210>
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
     a44:	fc442783          	lw	a5,-60(s0)
     a48:	fff78793          	addi	a5,a5,-1
     a4c:	fa842603          	lw	a2,-88(s0)
     a50:	00078593          	mv	a1,a5
     a54:	02000513          	li	a0,32
     a58:	b35ff0ef          	jal	ra,58c <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
     a5c:	fa442783          	lw	a5,-92(s0)
     a60:	00478713          	addi	a4,a5,4
     a64:	fae42223          	sw	a4,-92(s0)
     a68:	0007a783          	lw	a5,0(a5)
     a6c:	fa842703          	lw	a4,-88(s0)
     a70:	00070593          	mv	a1,a4
     a74:	00078513          	mv	a0,a5
     a78:	abdff0ef          	jal	ra,534 <alt_log_txchar>
              break;
     a7c:	0740006f          	j	af0 <alt_log_private_printf+0x504>
                s = va_arg(args,char *);
     a80:	fa442783          	lw	a5,-92(s0)
     a84:	00478713          	addi	a4,a5,4
     a88:	fae42223          	sw	a4,-92(s0)
     a8c:	0007a783          	lw	a5,0(a5)
     a90:	fef42623          	sw	a5,-20(s0)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
     a94:	fc442483          	lw	s1,-60(s0)
     a98:	fec42503          	lw	a0,-20(s0)
     a9c:	600020ef          	jal	ra,309c <strlen>
     aa0:	00050793          	mv	a5,a0
     aa4:	40f487b3          	sub	a5,s1,a5
     aa8:	fa842603          	lw	a2,-88(s0)
     aac:	00078593          	mv	a1,a5
     ab0:	02000513          	li	a0,32
     ab4:	ad9ff0ef          	jal	ra,58c <alt_log_repchar>
                while(*s)
     ab8:	0280006f          	j	ae0 <alt_log_private_printf+0x4f4>
                  alt_log_txchar(*s++,(char*)base);
     abc:	fec42783          	lw	a5,-20(s0)
     ac0:	00178713          	addi	a4,a5,1
     ac4:	fee42623          	sw	a4,-20(s0)
     ac8:	0007c783          	lbu	a5,0(a5)
     acc:	00078713          	mv	a4,a5
     ad0:	fa842783          	lw	a5,-88(s0)
     ad4:	00078593          	mv	a1,a5
     ad8:	00070513          	mv	a0,a4
     adc:	a59ff0ef          	jal	ra,534 <alt_log_txchar>
                while(*s)
     ae0:	fec42783          	lw	a5,-20(s0)
     ae4:	0007c783          	lbu	a5,0(a5)
     ae8:	fc079ae3          	bnez	a5,abc <alt_log_private_printf+0x4d0>
              break;
     aec:	00000013          	nop
          state=pfState_chars;
     af0:	fa042c23          	sw	zero,-72(s0)
        break;
     af4:	0040006f          	j	af8 <alt_log_private_printf+0x50c>
     af8:	00000013          	nop
  while(0 != (c = *w++))
     afc:	fb442783          	lw	a5,-76(s0)
     b00:	00178713          	addi	a4,a5,1
     b04:	fae42a23          	sw	a4,-76(s0)
     b08:	0007c783          	lbu	a5,0(a5)
     b0c:	faf409a3          	sb	a5,-77(s0)
     b10:	fb344783          	lbu	a5,-77(s0)
     b14:	b20792e3          	bnez	a5,638 <alt_log_private_printf+0x4c>
      } /* switch */
    } /* while chars left */
  } /* printf */
     b18:	00000013          	nop
     b1c:	00000013          	nop
     b20:	05c12083          	lw	ra,92(sp)
     b24:	05812403          	lw	s0,88(sp)
     b28:	05412483          	lw	s1,84(sp)
     b2c:	06010113          	addi	sp,sp,96
     b30:	00008067          	ret

00000b34 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
     b34:	fb010113          	addi	sp,sp,-80
     b38:	02112623          	sw	ra,44(sp)
     b3c:	02812423          	sw	s0,40(sp)
     b40:	03010413          	addi	s0,sp,48
     b44:	fca42e23          	sw	a0,-36(s0)
     b48:	00b42223          	sw	a1,4(s0)
     b4c:	00c42423          	sw	a2,8(s0)
     b50:	00d42623          	sw	a3,12(s0)
     b54:	00e42823          	sw	a4,16(s0)
     b58:	00f42a23          	sw	a5,20(s0)
     b5c:	01042c23          	sw	a6,24(s0)
     b60:	01142e23          	sw	a7,28(s0)
     b64:	0000b7b7          	lui	a5,0xb
     b68:	0bc7a703          	lw	a4,188(a5) # b0bc <__stack_chk_guard>
     b6c:	fee42623          	sw	a4,-20(s0)
     b70:	00000713          	li	a4,0
    va_list args;

    va_start (args, fmt);
     b74:	02040793          	addi	a5,s0,32
     b78:	fcf42c23          	sw	a5,-40(s0)
     b7c:	fd842783          	lw	a5,-40(s0)
     b80:	fe478793          	addi	a5,a5,-28
     b84:	fef42423          	sw	a5,-24(s0)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
     b88:	fe842783          	lw	a5,-24(s0)
     b8c:	00078613          	mv	a2,a5
     b90:	000207b7          	lui	a5,0x20
     b94:	04078593          	addi	a1,a5,64 # 20040 <__alt_data_end+0x10040>
     b98:	fdc42503          	lw	a0,-36(s0)
     b9c:	a51ff0ef          	jal	ra,5ec <alt_log_private_printf>
    va_end (args);
    return (0);
     ba0:	00000793          	li	a5,0
     ba4:	00078713          	mv	a4,a5
}
     ba8:	0000b7b7          	lui	a5,0xb
     bac:	fec42683          	lw	a3,-20(s0)
     bb0:	0bc7a783          	lw	a5,188(a5) # b0bc <__stack_chk_guard>
     bb4:	00f6c7b3          	xor	a5,a3,a5
     bb8:	00000693          	li	a3,0
     bbc:	00078463          	beqz	a5,bc4 <alt_log_printf_proc+0x90>
     bc0:	41c020ef          	jal	ra,2fdc <__stack_chk_fail>
     bc4:	00070513          	mv	a0,a4
     bc8:	02c12083          	lw	ra,44(sp)
     bcc:	02812403          	lw	s0,40(sp)
     bd0:	05010113          	addi	sp,sp,80
     bd4:	00008067          	ret

00000bd8 <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
     bd8:	fd010113          	addi	sp,sp,-48
     bdc:	02112623          	sw	ra,44(sp)
     be0:	02812423          	sw	s0,40(sp)
     be4:	03010413          	addi	s0,sp,48
     be8:	fca42e23          	sw	a0,-36(s0)
    if (alt_log_jtag_uart_alarm_on_flag) {
     bec:	0000b7b7          	lui	a5,0xb
     bf0:	07a7c783          	lbu	a5,122(a5) # b07a <alt_log_jtag_uart_alarm_on_flag>
     bf4:	0ff7f793          	zext.b	a5,a5
     bf8:	04078263          	beqz	a5,c3c <altera_avalon_jtag_uart_report_log+0x64>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
     bfc:	fdc42783          	lw	a5,-36(s0)
     c00:	fef42423          	sw	a5,-24(s0)
        const char* header="JTAG Alarm:";
     c04:	000077b7          	lui	a5,0x7
     c08:	70478793          	addi	a5,a5,1796 # 7704 <__fini_array_end+0xe0>
     c0c:	fef42623          	sw	a5,-20(s0)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
     c10:	fe842783          	lw	a5,-24(s0)
     c14:	0007a783          	lw	a5,0(a5)
     c18:	fec42603          	lw	a2,-20(s0)
     c1c:	00078593          	mv	a1,a5
     c20:	fe842503          	lw	a0,-24(s0)
     c24:	030000ef          	jal	ra,c54 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     c28:	0000b7b7          	lui	a5,0xb
     c2c:	0987a703          	lw	a4,152(a5) # b098 <_alt_tick_rate>
        return ALT_LOG_JTAG_UART_TICKS;
     c30:	00a00793          	li	a5,10
     c34:	02f757b3          	divu	a5,a4,a5
     c38:	0080006f          	j	c40 <altera_avalon_jtag_uart_report_log+0x68>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
     c3c:	00000793          	li	a5,0
    }
}
     c40:	00078513          	mv	a0,a5
     c44:	02c12083          	lw	ra,44(sp)
     c48:	02812403          	lw	s0,40(sp)
     c4c:	03010113          	addi	sp,sp,48
     c50:	00008067          	ret

00000c54 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
     c54:	fb010113          	addi	sp,sp,-80
     c58:	04112623          	sw	ra,76(sp)
     c5c:	04812423          	sw	s0,72(sp)
     c60:	05010413          	addi	s0,sp,80
     c64:	fca42623          	sw	a0,-52(s0)
     c68:	fcb42423          	sw	a1,-56(s0)
     c6c:	fcc42223          	sw	a2,-60(s0)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c70:	fc842783          	lw	a5,-56(s0)
     c74:	00478793          	addi	a5,a5,4
     c78:	0007a783          	lw	a5,0(a5)
     c7c:	fcf42823          	sw	a5,-48(s0)
     c80:	fd042783          	lw	a5,-48(s0)
     c84:	fcf42a23          	sw	a5,-44(s0)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
     c88:	fd442783          	lw	a5,-44(s0)
     c8c:	0107d793          	srli	a5,a5,0x10
     c90:	fcf42c23          	sw	a5,-40(s0)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
     c94:	fd442783          	lw	a5,-44(s0)
     c98:	0017d793          	srli	a5,a5,0x1
     c9c:	0017f793          	andi	a5,a5,1
     ca0:	fcf42e23          	sw	a5,-36(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
     ca4:	fd442783          	lw	a5,-44(s0)
     ca8:	0017f793          	andi	a5,a5,1
     cac:	fef42023          	sw	a5,-32(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
     cb0:	fd442783          	lw	a5,-44(s0)
     cb4:	0087d793          	srli	a5,a5,0x8
     cb8:	0017f793          	andi	a5,a5,1
     cbc:	fef42223          	sw	a5,-28(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
     cc0:	fd442783          	lw	a5,-44(s0)
     cc4:	0097d793          	srli	a5,a5,0x9
     cc8:	0017f793          	andi	a5,a5,1
     ccc:	fef42423          	sw	a5,-24(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
     cd0:	fd442783          	lw	a5,-44(s0)
     cd4:	00a7d793          	srli	a5,a5,0xa
     cd8:	0017f793          	andi	a5,a5,1
     cdc:	fef42623          	sw	a5,-20(s0)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
     ce0:	fcc42783          	lw	a5,-52(s0)
     ce4:	0347a703          	lw	a4,52(a5)
     ce8:	fcc42783          	lw	a5,-52(s0)
     cec:	0307a783          	lw	a5,48(a5)
     cf0:	40f70633          	sub	a2,a4,a5
     cf4:	fe042783          	lw	a5,-32(s0)
     cf8:	00f12023          	sw	a5,0(sp)
     cfc:	fdc42883          	lw	a7,-36(s0)
     d00:	fe442803          	lw	a6,-28(s0)
     d04:	fe842783          	lw	a5,-24(s0)
     d08:	fec42703          	lw	a4,-20(s0)
     d0c:	fd842683          	lw	a3,-40(s0)
     d10:	fc442583          	lw	a1,-60(s0)
     d14:	00007537          	lui	a0,0x7
     d18:	71050513          	addi	a0,a0,1808 # 7710 <__fini_array_end+0xec>
     d1c:	e19ff0ef          	jal	ra,b34 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
     d20:	00000013          	nop

}
     d24:	04c12083          	lw	ra,76(sp)
     d28:	04812403          	lw	s0,72(sp)
     d2c:	05010113          	addi	sp,sp,80
     d30:	00008067          	ret

00000d34 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
     d34:	fd010113          	addi	sp,sp,-48
     d38:	02112623          	sw	ra,44(sp)
     d3c:	02812423          	sw	s0,40(sp)
     d40:	03010413          	addi	s0,sp,48
     d44:	fca42e23          	sw	a0,-36(s0)
     d48:	fcb42c23          	sw	a1,-40(s0)
     const char* header="JTAG Startup Info:";
     d4c:	000077b7          	lui	a5,0x7
     d50:	75878793          	addi	a5,a5,1880 # 7758 <__fini_array_end+0x134>
     d54:	fef42623          	sw	a5,-20(s0)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
     d58:	fec42603          	lw	a2,-20(s0)
     d5c:	fd842583          	lw	a1,-40(s0)
     d60:	fdc42503          	lw	a0,-36(s0)
     d64:	ef1ff0ef          	jal	ra,c54 <alt_log_jtag_uart_print_control_reg>
     return;
     d68:	00000013          	nop
}
     d6c:	02c12083          	lw	ra,44(sp)
     d70:	02812403          	lw	s0,40(sp)
     d74:	03010113          	addi	sp,sp,48
     d78:	00008067          	ret

00000d7c <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
     d7c:	fd010113          	addi	sp,sp,-48
     d80:	02112623          	sw	ra,44(sp)
     d84:	02812423          	sw	s0,40(sp)
     d88:	03010413          	addi	s0,sp,48
     d8c:	fca42e23          	sw	a0,-36(s0)
     d90:	fcb42c23          	sw	a1,-40(s0)
    if (alt_log_jtag_uart_isr_on_flag) {
     d94:	0000b7b7          	lui	a5,0xb
     d98:	07b7c783          	lbu	a5,123(a5) # b07b <alt_log_jtag_uart_isr_on_flag>
     d9c:	0ff7f793          	zext.b	a5,a5
     da0:	02078263          	beqz	a5,dc4 <alt_log_jtag_uart_isr_proc+0x48>
        const char* header="JTAG IRQ:";
     da4:	000077b7          	lui	a5,0x7
     da8:	76c78793          	addi	a5,a5,1900 # 776c <__fini_array_end+0x148>
     dac:	fef42623          	sw	a5,-20(s0)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
     db0:	fec42603          	lw	a2,-20(s0)
     db4:	fdc42583          	lw	a1,-36(s0)
     db8:	fd842503          	lw	a0,-40(s0)
     dbc:	e99ff0ef          	jal	ra,c54 <alt_log_jtag_uart_print_control_reg>
    }
    return;
     dc0:	00000013          	nop
     dc4:	00000013          	nop
}
     dc8:	02c12083          	lw	ra,44(sp)
     dcc:	02812403          	lw	s0,40(sp)
     dd0:	03010113          	addi	sp,sp,48
     dd4:	00008067          	ret

00000dd8 <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
     dd8:	fd010113          	addi	sp,sp,-48
     ddc:	02112623          	sw	ra,44(sp)
     de0:	02812423          	sw	s0,40(sp)
     de4:	03010413          	addi	s0,sp,48
     de8:	fca42e23          	sw	a0,-36(s0)
     dec:	fcb42c23          	sw	a1,-40(s0)
    
    if (alt_log_write_on_flag)
     df0:	0000b7b7          	lui	a5,0xb
     df4:	0787c783          	lbu	a5,120(a5) # b078 <alt_log_write_on_flag>
     df8:	0ff7f793          	zext.b	a5,a5
     dfc:	12078263          	beqz	a5,f20 <alt_log_write+0x148>
    {
        int temp_cnt;
        int i;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
     e00:	fd842783          	lw	a5,-40(s0)
     e04:	00f00713          	li	a4,15
     e08:	00f77463          	bgeu	a4,a5,e10 <alt_log_write+0x38>
     e0c:	00f00793          	li	a5,15
     e10:	fef42623          	sw	a5,-20(s0)

        if (length < 2) return;
     e14:	fec42703          	lw	a4,-20(s0)
     e18:	00100793          	li	a5,1
     e1c:	10e7d063          	bge	a5,a4,f1c <alt_log_write+0x144>
        for (i=0;i<length;i++)
     e20:	fe042423          	sw	zero,-24(s0)
     e24:	0340006f          	j	e58 <alt_log_write+0x80>
        {
            *(unsigned char *)(alt_log_write_buf+i)=*(unsigned char *)(ptr+i);
     e28:	fe842783          	lw	a5,-24(s0)
     e2c:	fdc42703          	lw	a4,-36(s0)
     e30:	00f70733          	add	a4,a4,a5
     e34:	fe842683          	lw	a3,-24(s0)
     e38:	0000b7b7          	lui	a5,0xb
     e3c:	17078793          	addi	a5,a5,368 # b170 <alt_log_write_buf>
     e40:	00f687b3          	add	a5,a3,a5
     e44:	00074703          	lbu	a4,0(a4)
     e48:	00e78023          	sb	a4,0(a5)
        for (i=0;i<length;i++)
     e4c:	fe842783          	lw	a5,-24(s0)
     e50:	00178793          	addi	a5,a5,1
     e54:	fef42423          	sw	a5,-24(s0)
     e58:	fe842703          	lw	a4,-24(s0)
     e5c:	fec42783          	lw	a5,-20(s0)
     e60:	fcf744e3          	blt	a4,a5,e28 <alt_log_write+0x50>
        }
        alt_log_write_buf[length-1]='\n';
     e64:	fec42783          	lw	a5,-20(s0)
     e68:	fff78793          	addi	a5,a5,-1
     e6c:	0000b737          	lui	a4,0xb
     e70:	17070713          	addi	a4,a4,368 # b170 <alt_log_write_buf>
     e74:	00f707b3          	add	a5,a4,a5
     e78:	00a00713          	li	a4,10
     e7c:	00e78023          	sb	a4,0(a5)
        alt_log_write_buf[length]='\r';
     e80:	0000b7b7          	lui	a5,0xb
     e84:	17078713          	addi	a4,a5,368 # b170 <alt_log_write_buf>
     e88:	fec42783          	lw	a5,-20(s0)
     e8c:	00f707b3          	add	a5,a4,a5
     e90:	00d00713          	li	a4,13
     e94:	00e78023          	sb	a4,0(a5)
        alt_log_write_buf[length+1]='\0';
     e98:	fec42783          	lw	a5,-20(s0)
     e9c:	00178793          	addi	a5,a5,1
     ea0:	0000b737          	lui	a4,0xb
     ea4:	17070713          	addi	a4,a4,368 # b170 <alt_log_write_buf>
     ea8:	00f707b3          	add	a5,a4,a5
     eac:	00078023          	sb	zero,0(a5)

        /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++)
     eb0:	fe042223          	sw	zero,-28(s0)
     eb4:	0440006f          	j	ef8 <alt_log_write+0x120>
        {
            if (alt_log_write_buf[temp_cnt]== 0x4)
     eb8:	0000b7b7          	lui	a5,0xb
     ebc:	17078713          	addi	a4,a5,368 # b170 <alt_log_write_buf>
     ec0:	fe442783          	lw	a5,-28(s0)
     ec4:	00f707b3          	add	a5,a4,a5
     ec8:	0007c703          	lbu	a4,0(a5)
     ecc:	00400793          	li	a5,4
     ed0:	00f71e63          	bne	a4,a5,eec <alt_log_write+0x114>
            {
                alt_log_write_buf[temp_cnt]='D';
     ed4:	0000b7b7          	lui	a5,0xb
     ed8:	17078713          	addi	a4,a5,368 # b170 <alt_log_write_buf>
     edc:	fe442783          	lw	a5,-28(s0)
     ee0:	00f707b3          	add	a5,a4,a5
     ee4:	04400713          	li	a4,68
     ee8:	00e78023          	sb	a4,0(a5)
        for (temp_cnt=0;temp_cnt < length; temp_cnt++)
     eec:	fe442783          	lw	a5,-28(s0)
     ef0:	00178793          	addi	a5,a5,1
     ef4:	fef42223          	sw	a5,-28(s0)
     ef8:	fe442703          	lw	a4,-28(s0)
     efc:	fec42783          	lw	a5,-20(s0)
     f00:	faf74ce3          	blt	a4,a5,eb8 <alt_log_write+0xe0>
            }
        }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
     f04:	0000b7b7          	lui	a5,0xb
     f08:	17078593          	addi	a1,a5,368 # b170 <alt_log_write_buf>
     f0c:	000077b7          	lui	a5,0x7
     f10:	77878513          	addi	a0,a5,1912 # 7778 <__fini_array_end+0x154>
     f14:	c21ff0ef          	jal	ra,b34 <alt_log_printf_proc>
     f18:	0080006f          	j	f20 <alt_log_write+0x148>
        if (length < 2) return;
     f1c:	00000013          	nop
    }
}
     f20:	02c12083          	lw	ra,44(sp)
     f24:	02812403          	lw	s0,40(sp)
     f28:	03010113          	addi	sp,sp,48
     f2c:	00008067          	ret

00000f30 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
     f30:	ff010113          	addi	sp,sp,-16
     f34:	00112623          	sw	ra,12(sp)
     f38:	00812423          	sw	s0,8(sp)
     f3c:	01010413          	addi	s0,sp,16
    if (alt_log_sys_clk_on_flag) {
     f40:	0000b7b7          	lui	a5,0xb
     f44:	0797c783          	lbu	a5,121(a5) # b079 <alt_log_sys_clk_on_flag>
     f48:	0ff7f793          	zext.b	a5,a5
     f4c:	04078c63          	beqz	a5,fa4 <alt_log_system_clock+0x74>
    alt_log_sys_clk_count++;
     f50:	0000b7b7          	lui	a5,0xb
     f54:	0807a783          	lw	a5,128(a5) # b080 <alt_log_sys_clk_count>
     f58:	00178713          	addi	a4,a5,1
     f5c:	0000b7b7          	lui	a5,0xb
     f60:	08e7a023          	sw	a4,128(a5) # b080 <alt_log_sys_clk_count>
     f64:	0000b7b7          	lui	a5,0xb
     f68:	0987a783          	lw	a5,152(a5) # b098 <_alt_tick_rate>
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
     f6c:	0000b737          	lui	a4,0xb
     f70:	08072703          	lw	a4,128(a4) # b080 <alt_log_sys_clk_count>
     f74:	02e7f863          	bgeu	a5,a4,fa4 <alt_log_system_clock+0x74>
            alt_log_sys_clk_count = 0;
     f78:	0000b7b7          	lui	a5,0xb
     f7c:	0807a023          	sw	zero,128(a5) # b080 <alt_log_sys_clk_count>
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
     f80:	0000b7b7          	lui	a5,0xb
     f84:	0847a783          	lw	a5,132(a5) # b084 <alt_system_clock_in_sec>
     f88:	00178693          	addi	a3,a5,1
     f8c:	0000b737          	lui	a4,0xb
     f90:	08d72223          	sw	a3,132(a4) # b084 <alt_system_clock_in_sec>
     f94:	00078593          	mv	a1,a5
     f98:	000077b7          	lui	a5,0x7
     f9c:	78878513          	addi	a0,a5,1928 # 7788 <__fini_array_end+0x164>
     fa0:	b95ff0ef          	jal	ra,b34 <alt_log_printf_proc>
        }
    }
}
     fa4:	00000013          	nop
     fa8:	00c12083          	lw	ra,12(sp)
     fac:	00812403          	lw	s0,8(sp)
     fb0:	01010113          	addi	sp,sp,16
     fb4:	00008067          	ret

00000fb8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     fb8:	fe010113          	addi	sp,sp,-32
     fbc:	00112e23          	sw	ra,28(sp)
     fc0:	00812c23          	sw	s0,24(sp)
     fc4:	02010413          	addi	s0,sp,32
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
     fc8:	000097b7          	lui	a5,0x9
     fcc:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
     fd0:	00100793          	li	a5,1
     fd4:	00f71863          	bne	a4,a5,fe4 <alt_main+0x2c>
     fd8:	000077b7          	lui	a5,0x7
     fdc:	7a078513          	addi	a0,a5,1952 # 77a0 <__fini_array_end+0x17c>
     fe0:	b55ff0ef          	jal	ra,b34 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     fe4:	00000513          	li	a0,0
     fe8:	380000ef          	jal	ra,1368 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
     fec:	000097b7          	lui	a5,0x9
     ff0:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
     ff4:	00100793          	li	a5,1
     ff8:	00f71863          	bne	a4,a5,1008 <alt_main+0x50>
     ffc:	000077b7          	lui	a5,0x7
    1000:	7d878513          	addi	a0,a5,2008 # 77d8 <__fini_array_end+0x1b4>
    1004:	b31ff0ef          	jal	ra,b34 <alt_log_printf_proc>
  ALT_OS_INIT();
    1008:	00000013          	nop
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
    100c:	000097b7          	lui	a5,0x9
    1010:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    1014:	00100793          	li	a5,1
    1018:	00f71863          	bne	a4,a5,1028 <alt_main+0x70>
    101c:	000087b7          	lui	a5,0x8
    1020:	81078513          	addi	a0,a5,-2032 # 7810 <__fini_array_end+0x1ec>
    1024:	b11ff0ef          	jal	ra,b34 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
    1028:	000097b7          	lui	a5,0x9
    102c:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    1030:	00100793          	li	a5,1
    1034:	00f71863          	bne	a4,a5,1044 <alt_main+0x8c>
    1038:	000087b7          	lui	a5,0x8
    103c:	84878513          	addi	a0,a5,-1976 # 7848 <__fini_array_end+0x224>
    1040:	af5ff0ef          	jal	ra,b34 <alt_log_printf_proc>
  alt_sys_init();
    1044:	35c000ef          	jal	ra,13a0 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
    1048:	000097b7          	lui	a5,0x9
    104c:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    1050:	00100793          	li	a5,1
    1054:	00f71863          	bne	a4,a5,1064 <alt_main+0xac>
    1058:	000087b7          	lui	a5,0x8
    105c:	87078513          	addi	a0,a5,-1936 # 7870 <__fini_array_end+0x24c>
    1060:	ad5ff0ef          	jal	ra,b34 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    1064:	000097b7          	lui	a5,0x9
    1068:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    106c:	00100793          	li	a5,1
    1070:	00f71863          	bne	a4,a5,1080 <alt_main+0xc8>
    1074:	000087b7          	lui	a5,0x8
    1078:	89478513          	addi	a0,a5,-1900 # 7894 <__fini_array_end+0x270>
    107c:	ab9ff0ef          	jal	ra,b34 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1080:	000087b7          	lui	a5,0x8
    1084:	8b478613          	addi	a2,a5,-1868 # 78b4 <__fini_array_end+0x290>
    1088:	000087b7          	lui	a5,0x8
    108c:	8b478593          	addi	a1,a5,-1868 # 78b4 <__fini_array_end+0x290>
    1090:	000087b7          	lui	a5,0x8
    1094:	8b478513          	addi	a0,a5,-1868 # 78b4 <__fini_array_end+0x290>
    1098:	66c010ef          	jal	ra,2704 <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
    109c:	000097b7          	lui	a5,0x9
    10a0:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    10a4:	00100793          	li	a5,1
    10a8:	00f71863          	bne	a4,a5,10b8 <alt_main+0x100>
    10ac:	000087b7          	lui	a5,0x8
    10b0:	8c478513          	addi	a0,a5,-1852 # 78c4 <__fini_array_end+0x2a0>
    10b4:	a81ff0ef          	jal	ra,b34 <alt_log_printf_proc>
  _do_ctors ();
    10b8:	2c0010ef          	jal	ra,2378 <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
    10bc:	000097b7          	lui	a5,0x9
    10c0:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    10c4:	00100793          	li	a5,1
    10c8:	00f71863          	bne	a4,a5,10d8 <alt_main+0x120>
    10cc:	000087b7          	lui	a5,0x8
    10d0:	8f078513          	addi	a0,a5,-1808 # 78f0 <__fini_array_end+0x2cc>
    10d4:	a61ff0ef          	jal	ra,b34 <alt_log_printf_proc>
  atexit (_do_dtors);
    10d8:	000027b7          	lui	a5,0x2
    10dc:	3d878513          	addi	a0,a5,984 # 23d8 <_do_dtors>
    10e0:	229010ef          	jal	ra,2b08 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
    10e4:	000097b7          	lui	a5,0x9
    10e8:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    10ec:	00100793          	li	a5,1
    10f0:	00f71863          	bne	a4,a5,1100 <alt_main+0x148>
    10f4:	000087b7          	lui	a5,0x8
    10f8:	91078513          	addi	a0,a5,-1776 # 7910 <__fini_array_end+0x2ec>
    10fc:	a39ff0ef          	jal	ra,b34 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1100:	0000b7b7          	lui	a5,0xb
    1104:	0887a703          	lw	a4,136(a5) # b088 <alt_argc>
    1108:	0000b7b7          	lui	a5,0xb
    110c:	08c7a683          	lw	a3,140(a5) # b08c <alt_argv>
    1110:	0000b7b7          	lui	a5,0xb
    1114:	0907a783          	lw	a5,144(a5) # b090 <alt_envp>
    1118:	00078613          	mv	a2,a5
    111c:	00068593          	mv	a1,a3
    1120:	00070513          	mv	a0,a4
    1124:	9acff0ef          	jal	ra,2d0 <main>
    1128:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
    112c:	00100513          	li	a0,1
    1130:	7f9010ef          	jal	ra,3128 <close>
  exit (result);
    1134:	fec42503          	lw	a0,-20(s0)
    1138:	1e5010ef          	jal	ra,2b1c <exit>

0000113c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    113c:	fd010113          	addi	sp,sp,-48
    1140:	02812623          	sw	s0,44(sp)
    1144:	03010413          	addi	s0,sp,48
    1148:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    114c:	00800793          	li	a5,8
    1150:	3007b7f3          	csrrc	a5,mstatus,a5
    1154:	fef42623          	sw	a5,-20(s0)
    return context;
    1158:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    115c:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    1160:	fdc42783          	lw	a5,-36(s0)
    1164:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1168:	fe842783          	lw	a5,-24(s0)
    116c:	0007a783          	lw	a5,0(a5)
    1170:	fe842703          	lw	a4,-24(s0)
    1174:	00472703          	lw	a4,4(a4)
    1178:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    117c:	fe842783          	lw	a5,-24(s0)
    1180:	0047a783          	lw	a5,4(a5)
    1184:	fe842703          	lw	a4,-24(s0)
    1188:	00072703          	lw	a4,0(a4)
    118c:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1190:	fe842783          	lw	a5,-24(s0)
    1194:	fe842703          	lw	a4,-24(s0)
    1198:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    119c:	fe842783          	lw	a5,-24(s0)
    11a0:	fe842703          	lw	a4,-24(s0)
    11a4:	00e7a023          	sw	a4,0(a5)
} 
    11a8:	00000013          	nop
    11ac:	fe042783          	lw	a5,-32(s0)
    11b0:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    11b4:	fe442783          	lw	a5,-28(s0)
    11b8:	0087f793          	andi	a5,a5,8
    11bc:	3007a073          	csrs	mstatus,a5
}
    11c0:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    11c4:	00000013          	nop
    11c8:	02c12403          	lw	s0,44(sp)
    11cc:	03010113          	addi	sp,sp,48
    11d0:	00008067          	ret

000011d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    11d4:	fe010113          	addi	sp,sp,-32
    11d8:	00112e23          	sw	ra,28(sp)
    11dc:	00812c23          	sw	s0,24(sp)
    11e0:	01212a23          	sw	s2,20(sp)
    11e4:	01312823          	sw	s3,16(sp)
    11e8:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    11ec:	000097b7          	lui	a5,0x9
    11f0:	52c78793          	addi	a5,a5,1324 # 952c <alt_alarm_list>
    11f4:	0007a783          	lw	a5,0(a5)
    11f8:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    11fc:	0000b7b7          	lui	a5,0xb
    1200:	0a07a703          	lw	a4,160(a5) # b0a0 <_alt_nticks>
    1204:	0a47a783          	lw	a5,164(a5)
    1208:	00100513          	li	a0,1
    120c:	00000593          	li	a1,0
    1210:	00a70633          	add	a2,a4,a0
    1214:	00060813          	mv	a6,a2
    1218:	00e83833          	sltu	a6,a6,a4
    121c:	00b786b3          	add	a3,a5,a1
    1220:	00d807b3          	add	a5,a6,a3
    1224:	00078693          	mv	a3,a5
    1228:	00060713          	mv	a4,a2
    122c:	00068793          	mv	a5,a3
    1230:	0000b6b7          	lui	a3,0xb
    1234:	0ae6a023          	sw	a4,160(a3) # b0a0 <_alt_nticks>
    1238:	0af6a223          	sw	a5,164(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    123c:	0c80006f          	j	1304 <alt_tick+0x130>
  {
    next = (alt_alarm*) alarm->llist.next;
    1240:	fe442783          	lw	a5,-28(s0)
    1244:	0007a783          	lw	a5,0(a5)
    1248:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    124c:	fe442783          	lw	a5,-28(s0)
    1250:	0087a603          	lw	a2,8(a5)
    1254:	00c7a683          	lw	a3,12(a5)
    1258:	0000b7b7          	lui	a5,0xb
    125c:	0a07a703          	lw	a4,160(a5) # b0a0 <_alt_nticks>
    1260:	0a47a783          	lw	a5,164(a5)
    1264:	00068513          	mv	a0,a3
    1268:	00078593          	mv	a1,a5
    126c:	08a5e863          	bltu	a1,a0,12fc <alt_tick+0x128>
    1270:	00068513          	mv	a0,a3
    1274:	00078593          	mv	a1,a5
    1278:	00b51863          	bne	a0,a1,1288 <alt_tick+0xb4>
    127c:	00060693          	mv	a3,a2
    1280:	00070793          	mv	a5,a4
    1284:	06d7ec63          	bltu	a5,a3,12fc <alt_tick+0x128>
    {
      next_callback = alarm->callback (alarm->context);
    1288:	fe442783          	lw	a5,-28(s0)
    128c:	0107a783          	lw	a5,16(a5)
    1290:	fe442703          	lw	a4,-28(s0)
    1294:	01472703          	lw	a4,20(a4)
    1298:	00070513          	mv	a0,a4
    129c:	000780e7          	jalr	a5
    12a0:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    12a4:	fec42783          	lw	a5,-20(s0)
    12a8:	00079863          	bnez	a5,12b8 <alt_tick+0xe4>
      {
        alt_alarm_stop (alarm);
    12ac:	fe442503          	lw	a0,-28(s0)
    12b0:	e8dff0ef          	jal	ra,113c <alt_alarm_stop>
    12b4:	0480006f          	j	12fc <alt_tick+0x128>
      }
      else
      {
        alarm->time += next_callback;
    12b8:	fe442783          	lw	a5,-28(s0)
    12bc:	0087a703          	lw	a4,8(a5)
    12c0:	00c7a783          	lw	a5,12(a5)
    12c4:	fec42683          	lw	a3,-20(s0)
    12c8:	00068913          	mv	s2,a3
    12cc:	00000993          	li	s3,0
    12d0:	01270633          	add	a2,a4,s2
    12d4:	00060593          	mv	a1,a2
    12d8:	00e5b5b3          	sltu	a1,a1,a4
    12dc:	013786b3          	add	a3,a5,s3
    12e0:	00d587b3          	add	a5,a1,a3
    12e4:	00078693          	mv	a3,a5
    12e8:	00060713          	mv	a4,a2
    12ec:	00068793          	mv	a5,a3
    12f0:	fe442683          	lw	a3,-28(s0)
    12f4:	00e6a423          	sw	a4,8(a3)
    12f8:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    12fc:	fe842783          	lw	a5,-24(s0)
    1300:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    1304:	fe442703          	lw	a4,-28(s0)
    1308:	000097b7          	lui	a5,0x9
    130c:	52c78793          	addi	a5,a5,1324 # 952c <alt_alarm_list>
    1310:	f2f718e3          	bne	a4,a5,1240 <alt_tick+0x6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    1314:	00000013          	nop
}
    1318:	00000013          	nop
    131c:	01c12083          	lw	ra,28(sp)
    1320:	01812403          	lw	s0,24(sp)
    1324:	01412903          	lw	s2,20(sp)
    1328:	01012983          	lw	s3,16(sp)
    132c:	02010113          	addi	sp,sp,32
    1330:	00008067          	ret

00001334 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    1334:	fe010113          	addi	sp,sp,-32
    1338:	00112e23          	sw	ra,28(sp)
    133c:	00812c23          	sw	s0,24(sp)
    1340:	02010413          	addi	s0,sp,32
    1344:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
    1348:	fec42503          	lw	a0,-20(s0)
    134c:	611000ef          	jal	ra,215c <alt_busy_sleep>
    1350:	00050793          	mv	a5,a0
}
    1354:	00078513          	mv	a0,a5
    1358:	01c12083          	lw	ra,28(sp)
    135c:	01812403          	lw	s0,24(sp)
    1360:	02010113          	addi	sp,sp,32
    1364:	00008067          	ret

00001368 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1368:	fe010113          	addi	sp,sp,-32
    136c:	00112e23          	sw	ra,28(sp)
    1370:	00812c23          	sw	s0,24(sp)
    1374:	02010413          	addi	s0,sp,32
    1378:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_G_IRQ_INIT ( NIOSV, niosv);
    137c:	474010ef          	jal	ra,27f0 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
    1380:	00800793          	li	a5,8
    1384:	3007a073          	csrs	mstatus,a5
}
    1388:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
    138c:	00000013          	nop
    1390:	01c12083          	lw	ra,28(sp)
    1394:	01812403          	lw	s0,24(sp)
    1398:	02010113          	addi	sp,sp,32
    139c:	00008067          	ret

000013a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    13a0:	fe010113          	addi	sp,sp,-32
    13a4:	00112e23          	sw	ra,28(sp)
    13a8:	00812c23          	sw	s0,24(sp)
    13ac:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    13b0:	00000613          	li	a2,0
    13b4:	00000593          	li	a1,0
    13b8:	000087b7          	lui	a5,0x8
    13bc:	b1878513          	addi	a0,a5,-1256 # 7b18 <jtag_uart+0x28>
    13c0:	1f0000ef          	jal	ra,15b0 <altera_avalon_jtag_uart_init>
    13c4:	000087b7          	lui	a5,0x8
    13c8:	af078513          	addi	a0,a5,-1296 # 7af0 <jtag_uart>
    13cc:	67d000ef          	jal	ra,2248 <alt_dev_reg>
    13d0:	3e800793          	li	a5,1000
    13d4:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    13d8:	0000b7b7          	lui	a5,0xb
    13dc:	0987a783          	lw	a5,152(a5) # b098 <_alt_tick_rate>
    13e0:	00079a63          	bnez	a5,13f4 <alt_sys_init+0x54>
  {
    _alt_tick_rate = nticks;
    13e4:	0000b7b7          	lui	a5,0xb
    13e8:	fec42703          	lw	a4,-20(s0)
    13ec:	08e7ac23          	sw	a4,152(a5) # b098 <_alt_tick_rate>
    return 0;
    13f0:	0080006f          	j	13f8 <alt_sys_init+0x58>
  }
  else
  {
    return -1;
    13f4:	00000013          	nop
    13f8:	000037b7          	lui	a5,0x3
    13fc:	a1c78793          	addi	a5,a5,-1508 # 2a1c <alt_niosv_timer_sc_isr>
    1400:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
    1404:	0000b7b7          	lui	a5,0xb
    1408:	fe842703          	lw	a4,-24(s0)
    140c:	06e7aa23          	sw	a4,116(a5) # b074 <alt_niosv_timer_interrupt_handler>
}
    1410:	00000013          	nop
    INTEL_NIOSV_G_INIT ( NIOSV, niosv);
    1414:	6b8010ef          	jal	ra,2acc <alt_niosv_mtimecmp_interrupt_init>
    1418:	00000613          	li	a2,0
    141c:	00000593          	li	a1,0
    1420:	00000513          	li	a0,0
    1424:	5f8010ef          	jal	ra,2a1c <alt_niosv_timer_sc_isr>
}
    1428:	00000013          	nop
    142c:	01c12083          	lw	ra,28(sp)
    1430:	01812403          	lw	s0,24(sp)
    1434:	02010113          	addi	sp,sp,32
    1438:	00008067          	ret

0000143c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    143c:	fd010113          	addi	sp,sp,-48
    1440:	02112623          	sw	ra,44(sp)
    1444:	02812423          	sw	s0,40(sp)
    1448:	03010413          	addi	s0,sp,48
    144c:	fca42e23          	sw	a0,-36(s0)
    1450:	fcb42c23          	sw	a1,-40(s0)
    1454:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1458:	fdc42783          	lw	a5,-36(s0)
    145c:	0007a783          	lw	a5,0(a5)
    1460:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1464:	fec42783          	lw	a5,-20(s0)
    1468:	02878713          	addi	a4,a5,40
    146c:	fdc42783          	lw	a5,-36(s0)
    1470:	0087a783          	lw	a5,8(a5)
    1474:	00078693          	mv	a3,a5
    1478:	fd442603          	lw	a2,-44(s0)
    147c:	fd842583          	lw	a1,-40(s0)
    1480:	00070513          	mv	a0,a4
    1484:	6cc000ef          	jal	ra,1b50 <altera_avalon_jtag_uart_read>
    1488:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    148c:	00078513          	mv	a0,a5
    1490:	02c12083          	lw	ra,44(sp)
    1494:	02812403          	lw	s0,40(sp)
    1498:	03010113          	addi	sp,sp,48
    149c:	00008067          	ret

000014a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    14a0:	fd010113          	addi	sp,sp,-48
    14a4:	02112623          	sw	ra,44(sp)
    14a8:	02812423          	sw	s0,40(sp)
    14ac:	03010413          	addi	s0,sp,48
    14b0:	fca42e23          	sw	a0,-36(s0)
    14b4:	fcb42c23          	sw	a1,-40(s0)
    14b8:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    14bc:	fdc42783          	lw	a5,-36(s0)
    14c0:	0007a783          	lw	a5,0(a5)
    14c4:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    14c8:	fec42783          	lw	a5,-20(s0)
    14cc:	02878713          	addi	a4,a5,40
    14d0:	fdc42783          	lw	a5,-36(s0)
    14d4:	0087a783          	lw	a5,8(a5)
    14d8:	00078693          	mv	a3,a5
    14dc:	fd442603          	lw	a2,-44(s0)
    14e0:	fd842583          	lw	a1,-40(s0)
    14e4:	00070513          	mv	a0,a4
    14e8:	095000ef          	jal	ra,1d7c <altera_avalon_jtag_uart_write>
    14ec:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    14f0:	00078513          	mv	a0,a5
    14f4:	02c12083          	lw	ra,44(sp)
    14f8:	02812403          	lw	s0,40(sp)
    14fc:	03010113          	addi	sp,sp,48
    1500:	00008067          	ret

00001504 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    1504:	fd010113          	addi	sp,sp,-48
    1508:	02112623          	sw	ra,44(sp)
    150c:	02812423          	sw	s0,40(sp)
    1510:	03010413          	addi	s0,sp,48
    1514:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1518:	fdc42783          	lw	a5,-36(s0)
    151c:	0007a783          	lw	a5,0(a5)
    1520:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    1524:	fec42783          	lw	a5,-20(s0)
    1528:	02878713          	addi	a4,a5,40
    152c:	fdc42783          	lw	a5,-36(s0)
    1530:	0087a783          	lw	a5,8(a5)
    1534:	00078593          	mv	a1,a5
    1538:	00070513          	mv	a0,a4
    153c:	4a8000ef          	jal	ra,19e4 <altera_avalon_jtag_uart_close>
    1540:	00050793          	mv	a5,a0
}
    1544:	00078513          	mv	a0,a5
    1548:	02c12083          	lw	ra,44(sp)
    154c:	02812403          	lw	s0,40(sp)
    1550:	03010113          	addi	sp,sp,48
    1554:	00008067          	ret

00001558 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    1558:	fd010113          	addi	sp,sp,-48
    155c:	02112623          	sw	ra,44(sp)
    1560:	02812423          	sw	s0,40(sp)
    1564:	03010413          	addi	s0,sp,48
    1568:	fca42e23          	sw	a0,-36(s0)
    156c:	fcb42c23          	sw	a1,-40(s0)
    1570:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1574:	fdc42783          	lw	a5,-36(s0)
    1578:	0007a783          	lw	a5,0(a5)
    157c:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1580:	fec42783          	lw	a5,-20(s0)
    1584:	02878793          	addi	a5,a5,40
    1588:	fd442603          	lw	a2,-44(s0)
    158c:	fd842583          	lw	a1,-40(s0)
    1590:	00078513          	mv	a0,a5
    1594:	4bc000ef          	jal	ra,1a50 <altera_avalon_jtag_uart_ioctl>
    1598:	00050793          	mv	a5,a0
}
    159c:	00078513          	mv	a0,a5
    15a0:	02c12083          	lw	ra,44(sp)
    15a4:	02812403          	lw	s0,40(sp)
    15a8:	03010113          	addi	sp,sp,48
    15ac:	00008067          	ret

000015b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    15b0:	fd010113          	addi	sp,sp,-48
    15b4:	02112623          	sw	ra,44(sp)
    15b8:	02812423          	sw	s0,40(sp)
    15bc:	03010413          	addi	s0,sp,48
    15c0:	fca42e23          	sw	a0,-36(s0)
    15c4:	fcb42c23          	sw	a1,-40(s0)
    15c8:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    15cc:	fdc42783          	lw	a5,-36(s0)
    15d0:	00100713          	li	a4,1
    15d4:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    15d8:	fdc42783          	lw	a5,-36(s0)
    15dc:	0207a783          	lw	a5,32(a5)
    15e0:	fef42623          	sw	a5,-20(s0)
    15e4:	fdc42783          	lw	a5,-36(s0)
    15e8:	0007a783          	lw	a5,0(a5)
    15ec:	00478793          	addi	a5,a5,4
    15f0:	00078713          	mv	a4,a5
    15f4:	fec42783          	lw	a5,-20(s0)
    15f8:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    15fc:	fd842503          	lw	a0,-40(s0)
    1600:	fd442583          	lw	a1,-44(s0)
    1604:	00000713          	li	a4,0
    1608:	fdc42683          	lw	a3,-36(s0)
    160c:	000017b7          	lui	a5,0x1
    1610:	6d878613          	addi	a2,a5,1752 # 16d8 <altera_avalon_jtag_uart_irq>
    1614:	645000ef          	jal	ra,2458 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1618:	fdc42783          	lw	a5,-36(s0)
    161c:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1620:	fdc42783          	lw	a5,-36(s0)
    1624:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
    1628:	0000b7b7          	lui	a5,0xb
    162c:	0987a583          	lw	a1,152(a5) # b098 <_alt_tick_rate>
    1630:	fdc42683          	lw	a3,-36(s0)
    1634:	000027b7          	lui	a5,0x2
    1638:	92878613          	addi	a2,a5,-1752 # 1928 <altera_avalon_jtag_uart_timeout>
    163c:	00070513          	mv	a0,a4
    1640:	1b1000ef          	jal	ra,1ff0 <alt_alarm_start>
    1644:	00050793          	mv	a5,a0
    1648:	0007da63          	bgez	a5,165c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    164c:	fdc42783          	lw	a5,-36(s0)
    1650:	80000737          	lui	a4,0x80000
    1654:	fff74713          	not	a4,a4
    1658:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
    165c:	0000b7b7          	lui	a5,0xb
    1660:	07a7c783          	lbu	a5,122(a5) # b07a <alt_log_jtag_uart_alarm_on_flag>
    1664:	0ff7f713          	zext.b	a4,a5
    1668:	00100793          	li	a5,1
    166c:	02f71863          	bne	a4,a5,169c <altera_avalon_jtag_uart_init+0xec>
    1670:	0000b7b7          	lui	a5,0xb
    1674:	0987a703          	lw	a4,152(a5) # b098 <_alt_tick_rate>
    1678:	00a00793          	li	a5,10
    167c:	02f75733          	divu	a4,a4,a5
    1680:	fdc42683          	lw	a3,-36(s0)
    1684:	000017b7          	lui	a5,0x1
    1688:	bd878613          	addi	a2,a5,-1064 # bd8 <altera_avalon_jtag_uart_report_log>
    168c:	00070593          	mv	a1,a4
    1690:	0000b7b7          	lui	a5,0xb
    1694:	18878513          	addi	a0,a5,392 # b188 <alt_log_jtag_uart_alarm_1>
    1698:	159000ef          	jal	ra,1ff0 <alt_alarm_start>
    169c:	0000b7b7          	lui	a5,0xb
    16a0:	07c7c783          	lbu	a5,124(a5) # b07c <alt_log_jtag_uart_startup_info_on_flag>
    16a4:	0ff7f713          	zext.b	a4,a5
    16a8:	00100793          	li	a5,1
    16ac:	00f71c63          	bne	a4,a5,16c4 <altera_avalon_jtag_uart_init+0x114>
    16b0:	fdc42783          	lw	a5,-36(s0)
    16b4:	0007a783          	lw	a5,0(a5)
    16b8:	00078593          	mv	a1,a5
    16bc:	fdc42503          	lw	a0,-36(s0)
    16c0:	e74ff0ef          	jal	ra,d34 <alt_log_jtag_uart_startup_info>
}
    16c4:	00000013          	nop
    16c8:	02c12083          	lw	ra,44(sp)
    16cc:	02812403          	lw	s0,40(sp)
    16d0:	03010113          	addi	sp,sp,48
    16d4:	00008067          	ret

000016d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    16d8:	fa010113          	addi	sp,sp,-96
    16dc:	04112e23          	sw	ra,92(sp)
    16e0:	04812c23          	sw	s0,88(sp)
    16e4:	06010413          	addi	s0,sp,96
    16e8:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    16ec:	fac42783          	lw	a5,-84(s0)
    16f0:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
    16f4:	fc442783          	lw	a5,-60(s0)
    16f8:	0007a783          	lw	a5,0(a5)
    16fc:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
    1700:	fa042c23          	sw	zero,-72(s0)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
    1704:	fc842783          	lw	a5,-56(s0)
    1708:	fc442583          	lw	a1,-60(s0)
    170c:	00078513          	mv	a0,a5
    1710:	e6cff0ef          	jal	ra,d7c <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1714:	fc842783          	lw	a5,-56(s0)
    1718:	00478793          	addi	a5,a5,4
    171c:	0007a783          	lw	a5,0(a5)
    1720:	fcf42623          	sw	a5,-52(s0)
    1724:	fcc42783          	lw	a5,-52(s0)
    1728:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    172c:	fd042783          	lw	a5,-48(s0)
    1730:	3007f793          	andi	a5,a5,768
    1734:	1c078e63          	beqz	a5,1910 <altera_avalon_jtag_uart_irq+0x238>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    1738:	fd042783          	lw	a5,-48(s0)
    173c:	1007f793          	andi	a5,a5,256
    1740:	0e078663          	beqz	a5,182c <altera_avalon_jtag_uart_irq+0x154>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1744:	000107b7          	lui	a5,0x10
    1748:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    174c:	fc442783          	lw	a5,-60(s0)
    1750:	0287a783          	lw	a5,40(a5) # 10028 <__alt_data_end+0x28>
    1754:	00178793          	addi	a5,a5,1
    1758:	7ff7f793          	andi	a5,a5,2047
    175c:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
    1760:	fc442783          	lw	a5,-60(s0)
    1764:	02c7a783          	lw	a5,44(a5)
    1768:	fd442703          	lw	a4,-44(s0)
    176c:	06f70263          	beq	a4,a5,17d0 <altera_avalon_jtag_uart_irq+0xf8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1770:	fc842783          	lw	a5,-56(s0)
    1774:	0007a783          	lw	a5,0(a5)
    1778:	fcf42c23          	sw	a5,-40(s0)
    177c:	fd842783          	lw	a5,-40(s0)
    1780:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1784:	fbc42703          	lw	a4,-68(s0)
    1788:	000087b7          	lui	a5,0x8
    178c:	00f777b3          	and	a5,a4,a5
    1790:	04078463          	beqz	a5,17d8 <altera_avalon_jtag_uart_irq+0x100>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1794:	fc442783          	lw	a5,-60(s0)
    1798:	0287a783          	lw	a5,40(a5) # 8028 <jtag_uart+0x538>
    179c:	fbc42703          	lw	a4,-68(s0)
    17a0:	0ff77713          	zext.b	a4,a4
    17a4:	fc442683          	lw	a3,-60(s0)
    17a8:	00f687b3          	add	a5,a3,a5
    17ac:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    17b0:	fc442783          	lw	a5,-60(s0)
    17b4:	0287a783          	lw	a5,40(a5)
    17b8:	00178793          	addi	a5,a5,1
    17bc:	7ff7f713          	andi	a4,a5,2047
    17c0:	fc442783          	lw	a5,-60(s0)
    17c4:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    17c8:	00000013          	nop
      {
    17cc:	f81ff06f          	j	174c <altera_avalon_jtag_uart_irq+0x74>
          break;
    17d0:	00000013          	nop
    17d4:	0080006f          	j	17dc <altera_avalon_jtag_uart_irq+0x104>
          break;
    17d8:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    17dc:	fbc42703          	lw	a4,-68(s0)
    17e0:	000107b7          	lui	a5,0x10
    17e4:	04f76463          	bltu	a4,a5,182c <altera_avalon_jtag_uart_irq+0x154>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    17e8:	fc442783          	lw	a5,-60(s0)
    17ec:	0207a783          	lw	a5,32(a5) # 10020 <__alt_data_end+0x20>
    17f0:	ffe7f713          	andi	a4,a5,-2
    17f4:	fc442783          	lw	a5,-60(s0)
    17f8:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    17fc:	fc442783          	lw	a5,-60(s0)
    1800:	0207a783          	lw	a5,32(a5)
    1804:	fcf42e23          	sw	a5,-36(s0)
    1808:	fc842783          	lw	a5,-56(s0)
    180c:	00478793          	addi	a5,a5,4
    1810:	00078713          	mv	a4,a5
    1814:	fdc42783          	lw	a5,-36(s0)
    1818:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7fff0000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    181c:	fc842783          	lw	a5,-56(s0)
    1820:	00478793          	addi	a5,a5,4
    1824:	0007a783          	lw	a5,0(a5)
    1828:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    182c:	fd042783          	lw	a5,-48(s0)
    1830:	2007f793          	andi	a5,a5,512
    1834:	ee0780e3          	beqz	a5,1714 <altera_avalon_jtag_uart_irq+0x3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1838:	fd042783          	lw	a5,-48(s0)
    183c:	0107d793          	srli	a5,a5,0x10
    1840:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1844:	05c0006f          	j	18a0 <altera_avalon_jtag_uart_irq+0x1c8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1848:	fc442783          	lw	a5,-60(s0)
    184c:	0347a783          	lw	a5,52(a5)
    1850:	fc442703          	lw	a4,-60(s0)
    1854:	00f707b3          	add	a5,a4,a5
    1858:	00001737          	lui	a4,0x1
    185c:	00f707b3          	add	a5,a4,a5
    1860:	8387c783          	lbu	a5,-1992(a5)
    1864:	fef42223          	sw	a5,-28(s0)
    1868:	fc842783          	lw	a5,-56(s0)
    186c:	fe442703          	lw	a4,-28(s0)
    1870:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1874:	fc442783          	lw	a5,-60(s0)
    1878:	0347a783          	lw	a5,52(a5)
    187c:	00178793          	addi	a5,a5,1
    1880:	7ff7f713          	andi	a4,a5,2047
    1884:	fc442783          	lw	a5,-60(s0)
    1888:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
    188c:	00100793          	li	a5,1
    1890:	faf42c23          	sw	a5,-72(s0)

        space--;
    1894:	fc042783          	lw	a5,-64(s0)
    1898:	fff78793          	addi	a5,a5,-1
    189c:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
    18a0:	fc042783          	lw	a5,-64(s0)
    18a4:	00078c63          	beqz	a5,18bc <altera_avalon_jtag_uart_irq+0x1e4>
    18a8:	fc442783          	lw	a5,-60(s0)
    18ac:	0347a703          	lw	a4,52(a5)
    18b0:	fc442783          	lw	a5,-60(s0)
    18b4:	0307a783          	lw	a5,48(a5)
    18b8:	f8f718e3          	bne	a4,a5,1848 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
    18bc:	fc042783          	lw	a5,-64(s0)
    18c0:	e4078ae3          	beqz	a5,1714 <altera_avalon_jtag_uart_irq+0x3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    18c4:	fc442783          	lw	a5,-60(s0)
    18c8:	0207a783          	lw	a5,32(a5)
    18cc:	ffd7f713          	andi	a4,a5,-3
    18d0:	fc442783          	lw	a5,-60(s0)
    18d4:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    18d8:	fc442783          	lw	a5,-60(s0)
    18dc:	0207a783          	lw	a5,32(a5)
    18e0:	fef42423          	sw	a5,-24(s0)
    18e4:	fc442783          	lw	a5,-60(s0)
    18e8:	0007a783          	lw	a5,0(a5)
    18ec:	00478793          	addi	a5,a5,4
    18f0:	00078713          	mv	a4,a5
    18f4:	fe842783          	lw	a5,-24(s0)
    18f8:	00f72023          	sw	a5,0(a4) # 1000 <alt_main+0x48>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    18fc:	fc842783          	lw	a5,-56(s0)
    1900:	00478793          	addi	a5,a5,4
    1904:	0007a783          	lw	a5,0(a5)
    1908:	fef42623          	sw	a5,-20(s0)
  {
    190c:	e09ff06f          	j	1714 <altera_avalon_jtag_uart_irq+0x3c>
      break;
    1910:	00000013          	nop
      }
    }
  }
}
    1914:	00000013          	nop
    1918:	05c12083          	lw	ra,92(sp)
    191c:	05812403          	lw	s0,88(sp)
    1920:	06010113          	addi	sp,sp,96
    1924:	00008067          	ret

00001928 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1928:	fd010113          	addi	sp,sp,-48
    192c:	02812623          	sw	s0,44(sp)
    1930:	03010413          	addi	s0,sp,48
    1934:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1938:	fdc42783          	lw	a5,-36(s0)
    193c:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1940:	fe042783          	lw	a5,-32(s0)
    1944:	0007a783          	lw	a5,0(a5)
    1948:	00478793          	addi	a5,a5,4
    194c:	0007a783          	lw	a5,0(a5)
    1950:	fef42223          	sw	a5,-28(s0)
    1954:	fe442783          	lw	a5,-28(s0)
    1958:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    195c:	fe842783          	lw	a5,-24(s0)
    1960:	4007f793          	andi	a5,a5,1024
    1964:	02078c63          	beqz	a5,199c <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1968:	fe042783          	lw	a5,-32(s0)
    196c:	0207a783          	lw	a5,32(a5)
    1970:	4007e793          	ori	a5,a5,1024
    1974:	fef42623          	sw	a5,-20(s0)
    1978:	fe042783          	lw	a5,-32(s0)
    197c:	0007a783          	lw	a5,0(a5)
    1980:	00478793          	addi	a5,a5,4
    1984:	00078713          	mv	a4,a5
    1988:	fec42783          	lw	a5,-20(s0)
    198c:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
    1990:	fe042783          	lw	a5,-32(s0)
    1994:	0207a223          	sw	zero,36(a5)
    1998:	0340006f          	j	19cc <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    199c:	fe042783          	lw	a5,-32(s0)
    19a0:	0247a703          	lw	a4,36(a5)
    19a4:	800007b7          	lui	a5,0x80000
    19a8:	ffc7c793          	xori	a5,a5,-4
    19ac:	02e7e063          	bltu	a5,a4,19cc <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
    19b0:	fe042783          	lw	a5,-32(s0)
    19b4:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
    19b8:	00178713          	addi	a4,a5,1
    19bc:	fe042783          	lw	a5,-32(s0)
    19c0:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
    19c4:	fe042783          	lw	a5,-32(s0)
    19c8:	0247a783          	lw	a5,36(a5)
    19cc:	0000b7b7          	lui	a5,0xb
    19d0:	0987a783          	lw	a5,152(a5) # b098 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    19d4:	00078513          	mv	a0,a5
    19d8:	02c12403          	lw	s0,44(sp)
    19dc:	03010113          	addi	sp,sp,48
    19e0:	00008067          	ret

000019e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    19e4:	fe010113          	addi	sp,sp,-32
    19e8:	00812e23          	sw	s0,28(sp)
    19ec:	02010413          	addi	s0,sp,32
    19f0:	fea42623          	sw	a0,-20(s0)
    19f4:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    19f8:	01c0006f          	j	1a14 <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    19fc:	fe842703          	lw	a4,-24(s0)
    1a00:	000047b7          	lui	a5,0x4
    1a04:	00f777b3          	and	a5,a4,a5
    1a08:	00078663          	beqz	a5,1a14 <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
    1a0c:	ff500793          	li	a5,-11
    1a10:	0300006f          	j	1a40 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1a14:	fec42783          	lw	a5,-20(s0)
    1a18:	0347a703          	lw	a4,52(a5) # 4034 <__sfvwrite_r+0x26c>
    1a1c:	fec42783          	lw	a5,-20(s0)
    1a20:	0307a783          	lw	a5,48(a5)
    1a24:	00f70c63          	beq	a4,a5,1a3c <altera_avalon_jtag_uart_close+0x58>
    1a28:	fec42783          	lw	a5,-20(s0)
    1a2c:	0247a703          	lw	a4,36(a5)
    1a30:	fec42783          	lw	a5,-20(s0)
    1a34:	0047a783          	lw	a5,4(a5)
    1a38:	fcf762e3          	bltu	a4,a5,19fc <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    1a3c:	00000793          	li	a5,0
}
    1a40:	00078513          	mv	a0,a5
    1a44:	01c12403          	lw	s0,28(sp)
    1a48:	02010113          	addi	sp,sp,32
    1a4c:	00008067          	ret

00001a50 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1a50:	fd010113          	addi	sp,sp,-48
    1a54:	02812623          	sw	s0,44(sp)
    1a58:	03010413          	addi	s0,sp,48
    1a5c:	fca42e23          	sw	a0,-36(s0)
    1a60:	fcb42c23          	sw	a1,-40(s0)
    1a64:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
    1a68:	fe700793          	li	a5,-25
    1a6c:	fef42423          	sw	a5,-24(s0)

  switch (req)
    1a70:	fd842703          	lw	a4,-40(s0)
    1a74:	000077b7          	lui	a5,0x7
    1a78:	a0178793          	addi	a5,a5,-1535 # 6a01 <_isatty+0x85>
    1a7c:	00f70c63          	beq	a4,a5,1a94 <altera_avalon_jtag_uart_ioctl+0x44>
    1a80:	fd842703          	lw	a4,-40(s0)
    1a84:	000077b7          	lui	a5,0x7
    1a88:	a0278793          	addi	a5,a5,-1534 # 6a02 <_isatty+0x86>
    1a8c:	06f70263          	beq	a4,a5,1af0 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
    1a90:	0ac0006f          	j	1b3c <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
    1a94:	fdc42783          	lw	a5,-36(s0)
    1a98:	0047a703          	lw	a4,4(a5)
    1a9c:	800007b7          	lui	a5,0x80000
    1aa0:	fff7c793          	not	a5,a5
    1aa4:	08f70663          	beq	a4,a5,1b30 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
    1aa8:	fd442783          	lw	a5,-44(s0)
    1aac:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7fff0000>
    1ab0:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1ab4:	fec42703          	lw	a4,-20(s0)
    1ab8:	00100793          	li	a5,1
    1abc:	00e7de63          	bge	a5,a4,1ad8 <altera_avalon_jtag_uart_ioctl+0x88>
    1ac0:	fec42703          	lw	a4,-20(s0)
    1ac4:	800007b7          	lui	a5,0x80000
    1ac8:	fff7c793          	not	a5,a5
    1acc:	00f70663          	beq	a4,a5,1ad8 <altera_avalon_jtag_uart_ioctl+0x88>
    1ad0:	fec42783          	lw	a5,-20(s0)
    1ad4:	00c0006f          	j	1ae0 <altera_avalon_jtag_uart_ioctl+0x90>
    1ad8:	800007b7          	lui	a5,0x80000
    1adc:	ffe7c793          	xori	a5,a5,-2
    1ae0:	fdc42703          	lw	a4,-36(s0)
    1ae4:	00f72223          	sw	a5,4(a4)
      rc = 0;
    1ae8:	fe042423          	sw	zero,-24(s0)
    break;
    1aec:	0440006f          	j	1b30 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    1af0:	fdc42783          	lw	a5,-36(s0)
    1af4:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7fff0004>
    1af8:	800007b7          	lui	a5,0x80000
    1afc:	fff7c793          	not	a5,a5
    1b00:	02f70c63          	beq	a4,a5,1b38 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1b04:	fdc42783          	lw	a5,-36(s0)
    1b08:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
    1b0c:	fdc42783          	lw	a5,-36(s0)
    1b10:	0047a783          	lw	a5,4(a5)
    1b14:	00f737b3          	sltu	a5,a4,a5
    1b18:	0ff7f793          	zext.b	a5,a5
    1b1c:	00078713          	mv	a4,a5
    1b20:	fd442783          	lw	a5,-44(s0)
    1b24:	00e7a023          	sw	a4,0(a5)
      rc = 0;
    1b28:	fe042423          	sw	zero,-24(s0)
    break;
    1b2c:	00c0006f          	j	1b38 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
    1b30:	00000013          	nop
    1b34:	0080006f          	j	1b3c <altera_avalon_jtag_uart_ioctl+0xec>
    break;
    1b38:	00000013          	nop
  }

  return rc;
    1b3c:	fe842783          	lw	a5,-24(s0)
}
    1b40:	00078513          	mv	a0,a5
    1b44:	02c12403          	lw	s0,44(sp)
    1b48:	03010113          	addi	sp,sp,48
    1b4c:	00008067          	ret

00001b50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1b50:	fc010113          	addi	sp,sp,-64
    1b54:	02112e23          	sw	ra,60(sp)
    1b58:	02812c23          	sw	s0,56(sp)
    1b5c:	04010413          	addi	s0,sp,64
    1b60:	fca42623          	sw	a0,-52(s0)
    1b64:	fcb42423          	sw	a1,-56(s0)
    1b68:	fcc42223          	sw	a2,-60(s0)
    1b6c:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
    1b70:	fc842783          	lw	a5,-56(s0)
    1b74:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1b78:	1280006f          	j	1ca0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1b7c:	fcc42783          	lw	a5,-52(s0)
    1b80:	0287a783          	lw	a5,40(a5)
    1b84:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
    1b88:	fcc42783          	lw	a5,-52(s0)
    1b8c:	02c7a783          	lw	a5,44(a5)
    1b90:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
    1b94:	fd842703          	lw	a4,-40(s0)
    1b98:	fdc42783          	lw	a5,-36(s0)
    1b9c:	00f76c63          	bltu	a4,a5,1bb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1ba0:	fd842703          	lw	a4,-40(s0)
    1ba4:	fdc42783          	lw	a5,-36(s0)
    1ba8:	40f707b3          	sub	a5,a4,a5
    1bac:	fcf42a23          	sw	a5,-44(s0)
    1bb0:	0180006f          	j	1bc8 <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1bb4:	000017b7          	lui	a5,0x1
    1bb8:	80078713          	addi	a4,a5,-2048 # 800 <alt_log_private_printf+0x214>
    1bbc:	fdc42783          	lw	a5,-36(s0)
    1bc0:	40f707b3          	sub	a5,a4,a5
    1bc4:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
    1bc8:	fd442783          	lw	a5,-44(s0)
    1bcc:	06078e63          	beqz	a5,1c48 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
    1bd0:	fc442783          	lw	a5,-60(s0)
    1bd4:	fd442703          	lw	a4,-44(s0)
    1bd8:	00e7f663          	bgeu	a5,a4,1be4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1bdc:	fc442783          	lw	a5,-60(s0)
    1be0:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
    1be4:	fcc42783          	lw	a5,-52(s0)
    1be8:	03878713          	addi	a4,a5,56
    1bec:	fdc42783          	lw	a5,-36(s0)
    1bf0:	00f707b3          	add	a5,a4,a5
    1bf4:	fd442603          	lw	a2,-44(s0)
    1bf8:	00078593          	mv	a1,a5
    1bfc:	fd042503          	lw	a0,-48(s0)
    1c00:	751000ef          	jal	ra,2b50 <memcpy>
      ptr   += n;
    1c04:	fd042703          	lw	a4,-48(s0)
    1c08:	fd442783          	lw	a5,-44(s0)
    1c0c:	00f707b3          	add	a5,a4,a5
    1c10:	fcf42823          	sw	a5,-48(s0)
      space -= n;
    1c14:	fc442703          	lw	a4,-60(s0)
    1c18:	fd442783          	lw	a5,-44(s0)
    1c1c:	40f707b3          	sub	a5,a4,a5
    1c20:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1c24:	fdc42703          	lw	a4,-36(s0)
    1c28:	fd442783          	lw	a5,-44(s0)
    1c2c:	00f707b3          	add	a5,a4,a5
    1c30:	7ff7f713          	andi	a4,a5,2047
    1c34:	fcc42783          	lw	a5,-52(s0)
    1c38:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
    1c3c:	fc442783          	lw	a5,-60(s0)
    1c40:	f2f04ee3          	bgtz	a5,1b7c <altera_avalon_jtag_uart_read+0x2c>
    1c44:	0080006f          	j	1c4c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
    1c48:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    1c4c:	fd042703          	lw	a4,-48(s0)
    1c50:	fc842783          	lw	a5,-56(s0)
    1c54:	04f71c63          	bne	a4,a5,1cac <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1c58:	fc042703          	lw	a4,-64(s0)
    1c5c:	000047b7          	lui	a5,0x4
    1c60:	00f777b3          	and	a5,a4,a5
    1c64:	04079863          	bnez	a5,1cb4 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1c68:	00000013          	nop
    1c6c:	fcc42783          	lw	a5,-52(s0)
    1c70:	0287a783          	lw	a5,40(a5) # 4028 <__sfvwrite_r+0x260>
    1c74:	fd842703          	lw	a4,-40(s0)
    1c78:	00f71c63          	bne	a4,a5,1c90 <altera_avalon_jtag_uart_read+0x140>
    1c7c:	fcc42783          	lw	a5,-52(s0)
    1c80:	0247a703          	lw	a4,36(a5)
    1c84:	fcc42783          	lw	a5,-52(s0)
    1c88:	0047a783          	lw	a5,4(a5)
    1c8c:	fef760e3          	bltu	a4,a5,1c6c <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1c90:	fcc42783          	lw	a5,-52(s0)
    1c94:	0287a783          	lw	a5,40(a5)
    1c98:	fd842703          	lw	a4,-40(s0)
    1c9c:	02f70063          	beq	a4,a5,1cbc <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
    1ca0:	fc442783          	lw	a5,-60(s0)
    1ca4:	ecf04ce3          	bgtz	a5,1b7c <altera_avalon_jtag_uart_read+0x2c>
    1ca8:	0180006f          	j	1cc0 <altera_avalon_jtag_uart_read+0x170>
      break;
    1cac:	00000013          	nop
    1cb0:	0100006f          	j	1cc0 <altera_avalon_jtag_uart_read+0x170>
      break;
    1cb4:	00000013          	nop
    1cb8:	0080006f          	j	1cc0 <altera_avalon_jtag_uart_read+0x170>
      break;
    1cbc:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1cc0:	fd042703          	lw	a4,-48(s0)
    1cc4:	fc842783          	lw	a5,-56(s0)
    1cc8:	06f70463          	beq	a4,a5,1d30 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1ccc:	00800793          	li	a5,8
    1cd0:	3007b7f3          	csrrc	a5,mstatus,a5
    1cd4:	fef42623          	sw	a5,-20(s0)
    return context;
    1cd8:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1cdc:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1ce0:	fcc42783          	lw	a5,-52(s0)
    1ce4:	0207a783          	lw	a5,32(a5)
    1ce8:	0017e713          	ori	a4,a5,1
    1cec:	fcc42783          	lw	a5,-52(s0)
    1cf0:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1cf4:	fcc42783          	lw	a5,-52(s0)
    1cf8:	0207a783          	lw	a5,32(a5)
    1cfc:	fef42223          	sw	a5,-28(s0)
    1d00:	fcc42783          	lw	a5,-52(s0)
    1d04:	0007a783          	lw	a5,0(a5)
    1d08:	00478793          	addi	a5,a5,4
    1d0c:	00078713          	mv	a4,a5
    1d10:	fe442783          	lw	a5,-28(s0)
    1d14:	00f72023          	sw	a5,0(a4)
    1d18:	fe042783          	lw	a5,-32(s0)
    1d1c:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1d20:	fe842783          	lw	a5,-24(s0)
    1d24:	0087f793          	andi	a5,a5,8
    1d28:	3007a073          	csrs	mstatus,a5
}
    1d2c:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1d30:	fd042703          	lw	a4,-48(s0)
    1d34:	fc842783          	lw	a5,-56(s0)
    1d38:	00f70a63          	beq	a4,a5,1d4c <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
    1d3c:	fd042703          	lw	a4,-48(s0)
    1d40:	fc842783          	lw	a5,-56(s0)
    1d44:	40f707b3          	sub	a5,a4,a5
    1d48:	0200006f          	j	1d68 <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
    1d4c:	fc042703          	lw	a4,-64(s0)
    1d50:	000047b7          	lui	a5,0x4
    1d54:	00f777b3          	and	a5,a4,a5
    1d58:	00078663          	beqz	a5,1d64 <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
    1d5c:	ff500793          	li	a5,-11
    1d60:	0080006f          	j	1d68 <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
    1d64:	ffb00793          	li	a5,-5
}
    1d68:	00078513          	mv	a0,a5
    1d6c:	03c12083          	lw	ra,60(sp)
    1d70:	03812403          	lw	s0,56(sp)
    1d74:	04010113          	addi	sp,sp,64
    1d78:	00008067          	ret

00001d7c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1d7c:	fc010113          	addi	sp,sp,-64
    1d80:	02112e23          	sw	ra,60(sp)
    1d84:	02812c23          	sw	s0,56(sp)
    1d88:	04010413          	addi	s0,sp,64
    1d8c:	fca42623          	sw	a0,-52(s0)
    1d90:	fcb42423          	sw	a1,-56(s0)
    1d94:	fcc42223          	sw	a2,-60(s0)
    1d98:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1d9c:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1da0:	fc842783          	lw	a5,-56(s0)
    1da4:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1da8:	0ec0006f          	j	1e94 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1dac:	fcc42783          	lw	a5,-52(s0)
    1db0:	0307a783          	lw	a5,48(a5) # 4030 <__sfvwrite_r+0x268>
    1db4:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
    1db8:	fcc42783          	lw	a5,-52(s0)
    1dbc:	0347a783          	lw	a5,52(a5)
    1dc0:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
    1dc4:	fdc42703          	lw	a4,-36(s0)
    1dc8:	fd042783          	lw	a5,-48(s0)
    1dcc:	00f77e63          	bgeu	a4,a5,1de8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1dd0:	fd042703          	lw	a4,-48(s0)
    1dd4:	fdc42783          	lw	a5,-36(s0)
    1dd8:	40f707b3          	sub	a5,a4,a5
    1ddc:	fff78793          	addi	a5,a5,-1
    1de0:	fcf42a23          	sw	a5,-44(s0)
    1de4:	0340006f          	j	1e18 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    1de8:	fd042783          	lw	a5,-48(s0)
    1dec:	00078e63          	beqz	a5,1e08 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1df0:	000017b7          	lui	a5,0x1
    1df4:	80078713          	addi	a4,a5,-2048 # 800 <alt_log_private_printf+0x214>
    1df8:	fdc42783          	lw	a5,-36(s0)
    1dfc:	40f707b3          	sub	a5,a4,a5
    1e00:	fcf42a23          	sw	a5,-44(s0)
    1e04:	0140006f          	j	1e18 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1e08:	7ff00713          	li	a4,2047
    1e0c:	fdc42783          	lw	a5,-36(s0)
    1e10:	40f707b3          	sub	a5,a4,a5
    1e14:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
    1e18:	fd442783          	lw	a5,-44(s0)
    1e1c:	08078263          	beqz	a5,1ea0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    1e20:	fc442783          	lw	a5,-60(s0)
    1e24:	fd442703          	lw	a4,-44(s0)
    1e28:	00e7f663          	bgeu	a5,a4,1e34 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    1e2c:	fc442783          	lw	a5,-60(s0)
    1e30:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
    1e34:	fcc42703          	lw	a4,-52(s0)
    1e38:	000017b7          	lui	a5,0x1
    1e3c:	83878793          	addi	a5,a5,-1992 # 838 <alt_log_private_printf+0x24c>
    1e40:	00f70733          	add	a4,a4,a5
    1e44:	fdc42783          	lw	a5,-36(s0)
    1e48:	00f707b3          	add	a5,a4,a5
    1e4c:	fd442603          	lw	a2,-44(s0)
    1e50:	fc842583          	lw	a1,-56(s0)
    1e54:	00078513          	mv	a0,a5
    1e58:	4f9000ef          	jal	ra,2b50 <memcpy>
      ptr   += n;
    1e5c:	fc842703          	lw	a4,-56(s0)
    1e60:	fd442783          	lw	a5,-44(s0)
    1e64:	00f707b3          	add	a5,a4,a5
    1e68:	fcf42423          	sw	a5,-56(s0)
      count -= n;
    1e6c:	fc442703          	lw	a4,-60(s0)
    1e70:	fd442783          	lw	a5,-44(s0)
    1e74:	40f707b3          	sub	a5,a4,a5
    1e78:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1e7c:	fdc42703          	lw	a4,-36(s0)
    1e80:	fd442783          	lw	a5,-44(s0)
    1e84:	00f707b3          	add	a5,a4,a5
    1e88:	7ff7f713          	andi	a4,a5,2047
    1e8c:	fcc42783          	lw	a5,-52(s0)
    1e90:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
    1e94:	fc442783          	lw	a5,-60(s0)
    1e98:	f0f04ae3          	bgtz	a5,1dac <altera_avalon_jtag_uart_write+0x30>
    1e9c:	0080006f          	j	1ea4 <altera_avalon_jtag_uart_write+0x128>
        break;
    1ea0:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1ea4:	00800793          	li	a5,8
    1ea8:	3007b7f3          	csrrc	a5,mstatus,a5
    1eac:	fef42623          	sw	a5,-20(s0)
    return context;
    1eb0:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1eb4:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1eb8:	fcc42783          	lw	a5,-52(s0)
    1ebc:	0207a783          	lw	a5,32(a5)
    1ec0:	0027e713          	ori	a4,a5,2
    1ec4:	fcc42783          	lw	a5,-52(s0)
    1ec8:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1ecc:	fcc42783          	lw	a5,-52(s0)
    1ed0:	0207a783          	lw	a5,32(a5)
    1ed4:	fef42223          	sw	a5,-28(s0)
    1ed8:	fcc42783          	lw	a5,-52(s0)
    1edc:	0007a783          	lw	a5,0(a5)
    1ee0:	00478793          	addi	a5,a5,4
    1ee4:	00078713          	mv	a4,a5
    1ee8:	fe442783          	lw	a5,-28(s0)
    1eec:	00f72023          	sw	a5,0(a4)
    1ef0:	fe042783          	lw	a5,-32(s0)
    1ef4:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1ef8:	fe842783          	lw	a5,-24(s0)
    1efc:	0087f793          	andi	a5,a5,8
    1f00:	3007a073          	csrs	mstatus,a5
}
    1f04:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1f08:	fc442783          	lw	a5,-60(s0)
    1f0c:	04f05463          	blez	a5,1f54 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    1f10:	fc042703          	lw	a4,-64(s0)
    1f14:	000047b7          	lui	a5,0x4
    1f18:	00f777b3          	and	a5,a4,a5
    1f1c:	04079263          	bnez	a5,1f60 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1f20:	00000013          	nop
    1f24:	fcc42783          	lw	a5,-52(s0)
    1f28:	0347a783          	lw	a5,52(a5) # 4034 <__sfvwrite_r+0x26c>
    1f2c:	fd042703          	lw	a4,-48(s0)
    1f30:	00f71c63          	bne	a4,a5,1f48 <altera_avalon_jtag_uart_write+0x1cc>
    1f34:	fcc42783          	lw	a5,-52(s0)
    1f38:	0247a703          	lw	a4,36(a5)
    1f3c:	fcc42783          	lw	a5,-52(s0)
    1f40:	0047a783          	lw	a5,4(a5)
    1f44:	fef760e3          	bltu	a4,a5,1f24 <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1f48:	fcc42783          	lw	a5,-52(s0)
    1f4c:	0247a783          	lw	a5,36(a5)
    1f50:	00079c63          	bnez	a5,1f68 <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
    1f54:	fc442783          	lw	a5,-60(s0)
    1f58:	f2f04ee3          	bgtz	a5,1e94 <altera_avalon_jtag_uart_write+0x118>
    1f5c:	0100006f          	j	1f6c <altera_avalon_jtag_uart_write+0x1f0>
        break;
    1f60:	00000013          	nop
    1f64:	0080006f          	j	1f6c <altera_avalon_jtag_uart_write+0x1f0>
         break;
    1f68:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1f6c:	fc842703          	lw	a4,-56(s0)
    1f70:	fd842783          	lw	a5,-40(s0)
    1f74:	00f70a63          	beq	a4,a5,1f88 <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
    1f78:	fc842703          	lw	a4,-56(s0)
    1f7c:	fd842783          	lw	a5,-40(s0)
    1f80:	40f707b3          	sub	a5,a4,a5
    1f84:	0200006f          	j	1fa4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1f88:	fc042703          	lw	a4,-64(s0)
    1f8c:	000047b7          	lui	a5,0x4
    1f90:	00f777b3          	and	a5,a4,a5
    1f94:	00078663          	beqz	a5,1fa0 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
    1f98:	ff500793          	li	a5,-11
    1f9c:	0080006f          	j	1fa4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1fa0:	ffb00793          	li	a5,-5
}
    1fa4:	00078513          	mv	a0,a5
    1fa8:	03c12083          	lw	ra,60(sp)
    1fac:	03812403          	lw	s0,56(sp)
    1fb0:	04010113          	addi	sp,sp,64
    1fb4:	00008067          	ret

00001fb8 <tx_log_str>:
        .global tx_log_str
tx_log_str:
tx_next_char:
    /* if pointer points to null, return .
     * a0 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	lb      t1, (a0)
    1fb8:	00050303          	lb	t1,0(a0)
	beqz    t1, end_tx
    1fbc:	02030863          	beqz	t1,1fec <end_tx>
	/* 
     * Check device transmit ready
     *    UART, ALT_LOG_PRINT_MSK == 0x40
     *    JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000
     */
    li      t2, ALT_LOG_PRINT_MSK
    1fc0:	ffff03b7          	lui	t2,0xffff0

00001fc4 <wait_tx_ready_loop>:

wait_tx_ready_loop:
    /* load base uart / jtag uart address into t0 */
    li      t0, ALT_LOG_PORT_BASE
    1fc4:	000202b7          	lui	t0,0x20
    1fc8:	04028293          	addi	t0,t0,64 # 20040 <__alt_data_end+0x10040>

    lw      t0, ALT_LOG_PRINT_REG_OFFSET(t0)
    1fcc:	0042a283          	lw	t0,4(t0)
    and     t0, t0, t2
    1fd0:	0072f2b3          	and	t0,t0,t2
    beqz    t0, wait_tx_ready_loop	
    1fd4:	fe0288e3          	beqz	t0,1fc4 <wait_tx_ready_loop>

    /* load base uart / jtag uart address into t0 */
    li      t0, ALT_LOG_PORT_BASE
    1fd8:	000202b7          	lui	t0,0x20
    1fdc:	04028293          	addi	t0,t0,64 # 20040 <__alt_data_end+0x10040>

	/* write char */
	sw      t1, ALT_LOG_PRINT_TXDATA_REG_OFFSET(t0)		
    1fe0:	0062a023          	sw	t1,0(t0)

	/* advance string pointer */
	addi    a0, a0, 1
    1fe4:	00150513          	addi	a0,a0,1
	j       tx_next_char
    1fe8:	fd1ff06f          	j	1fb8 <tx_log_str>

00001fec <end_tx>:

end_tx:	
    ret
    1fec:	00008067          	ret

00001ff0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1ff0:	fc010113          	addi	sp,sp,-64
    1ff4:	02812e23          	sw	s0,60(sp)
    1ff8:	04010413          	addi	s0,sp,64
    1ffc:	fca42623          	sw	a0,-52(s0)
    2000:	fcb42423          	sw	a1,-56(s0)
    2004:	fcc42223          	sw	a2,-60(s0)
    2008:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    200c:	00000713          	li	a4,0
    2010:	00000793          	li	a5,0
    2014:	fee42423          	sw	a4,-24(s0)
    2018:	fef42623          	sw	a5,-20(s0)
    201c:	0000b7b7          	lui	a5,0xb
    2020:	0987a783          	lw	a5,152(a5) # b098 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    2024:	12078263          	beqz	a5,2148 <alt_alarm_start+0x158>
  {
    if (alarm)
    2028:	fcc42783          	lw	a5,-52(s0)
    202c:	10078a63          	beqz	a5,2140 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
    2030:	fcc42783          	lw	a5,-52(s0)
    2034:	fc442703          	lw	a4,-60(s0)
    2038:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    203c:	fcc42783          	lw	a5,-52(s0)
    2040:	fc042703          	lw	a4,-64(s0)
    2044:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2048:	00800793          	li	a5,8
    204c:	3007b7f3          	csrrc	a5,mstatus,a5
    2050:	fef42223          	sw	a5,-28(s0)
    return context;
    2054:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    2058:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    205c:	0000b7b7          	lui	a5,0xb
    2060:	0a07a703          	lw	a4,160(a5) # b0a0 <_alt_nticks>
    2064:	0a47a783          	lw	a5,164(a5)
      
      current_nticks = alt_nticks();
    2068:	fee42423          	sw	a4,-24(s0)
    206c:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    2070:	fc842783          	lw	a5,-56(s0)
    2074:	00078813          	mv	a6,a5
    2078:	00000893          	li	a7,0
    207c:	fe842603          	lw	a2,-24(s0)
    2080:	fec42683          	lw	a3,-20(s0)
    2084:	00c80733          	add	a4,a6,a2
    2088:	00070593          	mv	a1,a4
    208c:	0105b5b3          	sltu	a1,a1,a6
    2090:	00d887b3          	add	a5,a7,a3
    2094:	00f586b3          	add	a3,a1,a5
    2098:	00068793          	mv	a5,a3
    209c:	00070613          	mv	a2,a4
    20a0:	00078693          	mv	a3,a5
    20a4:	00100513          	li	a0,1
    20a8:	00000593          	li	a1,0
    20ac:	00a60733          	add	a4,a2,a0
    20b0:	00070813          	mv	a6,a4
    20b4:	00c83833          	sltu	a6,a6,a2
    20b8:	00b687b3          	add	a5,a3,a1
    20bc:	00f806b3          	add	a3,a6,a5
    20c0:	00068793          	mv	a5,a3
    20c4:	fcc42683          	lw	a3,-52(s0)
    20c8:	00e6a423          	sw	a4,8(a3)
    20cc:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    20d0:	fcc42783          	lw	a5,-52(s0)
    20d4:	00009737          	lui	a4,0x9
    20d8:	52c70713          	addi	a4,a4,1324 # 952c <alt_alarm_list>
    20dc:	fce42e23          	sw	a4,-36(s0)
    20e0:	fef42023          	sw	a5,-32(s0)
  entry->previous = list;
    20e4:	fe042783          	lw	a5,-32(s0)
    20e8:	fdc42703          	lw	a4,-36(s0)
    20ec:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    20f0:	fdc42783          	lw	a5,-36(s0)
    20f4:	0007a703          	lw	a4,0(a5)
    20f8:	fe042783          	lw	a5,-32(s0)
    20fc:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    2100:	fdc42783          	lw	a5,-36(s0)
    2104:	0007a783          	lw	a5,0(a5)
    2108:	fe042703          	lw	a4,-32(s0)
    210c:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    2110:	fdc42783          	lw	a5,-36(s0)
    2114:	fe042703          	lw	a4,-32(s0)
    2118:	00e7a023          	sw	a4,0(a5)
}
    211c:	00000013          	nop
    2120:	fd442783          	lw	a5,-44(s0)
    2124:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2128:	fd842783          	lw	a5,-40(s0)
    212c:	0087f793          	andi	a5,a5,8
    2130:	3007a073          	csrs	mstatus,a5
}
    2134:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    2138:	00000793          	li	a5,0
    213c:	0100006f          	j	214c <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
    2140:	fea00793          	li	a5,-22
    2144:	0080006f          	j	214c <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
    2148:	f7a00793          	li	a5,-134
  }
}
    214c:	00078513          	mv	a0,a5
    2150:	03c12403          	lw	s0,60(sp)
    2154:	04010113          	addi	sp,sp,64
    2158:	00008067          	ret

0000215c <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
    215c:	fd010113          	addi	sp,sp,-48
    2160:	02112623          	sw	ra,44(sp)
    2164:	02812423          	sw	s0,40(sp)
    2168:	03010413          	addi	s0,sp,48
    216c:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
    2170:	6a4000ef          	jal	ra,2814 <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
    2174:	fdc42703          	lw	a4,-36(s0)
    2178:	03200793          	li	a5,50
    217c:	02f707b3          	mul	a5,a4,a5
    2180:	fef42423          	sw	a5,-24(s0)
    2184:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
    2188:	00000013          	nop
    218c:	6c8000ef          	jal	ra,2854 <alt_timestamp>
    2190:	00050713          	mv	a4,a0
    2194:	00058793          	mv	a5,a1
    2198:	fec42683          	lw	a3,-20(s0)
    219c:	00078613          	mv	a2,a5
    21a0:	fed666e3          	bltu	a2,a3,218c <alt_busy_sleep+0x30>
    21a4:	fec42683          	lw	a3,-20(s0)
    21a8:	00078613          	mv	a2,a5
    21ac:	00c69863          	bne	a3,a2,21bc <alt_busy_sleep+0x60>
    21b0:	fe842683          	lw	a3,-24(s0)
    21b4:	00070793          	mv	a5,a4
    21b8:	fcd7eae3          	bltu	a5,a3,218c <alt_busy_sleep+0x30>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
    21bc:	00000793          	li	a5,0
}
    21c0:	00078513          	mv	a0,a5
    21c4:	02c12083          	lw	ra,44(sp)
    21c8:	02812403          	lw	s0,40(sp)
    21cc:	03010113          	addi	sp,sp,48
    21d0:	00008067          	ret

000021d4 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
    21d4:	fe010113          	addi	sp,sp,-32
    21d8:	00812e23          	sw	s0,28(sp)
    21dc:	02010413          	addi	s0,sp,32
#if ALT_CPU_DCACHE_SIZE > 0
    char* i;
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    21e0:	fe042623          	sw	zero,-20(s0)
    21e4:	0180006f          	j	21fc <alt_dcache_flush_all+0x28>
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    21e8:	fec42783          	lw	a5,-20(s0)
    21ec:	0817a00f          	.4byte	0x817a00f
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    21f0:	fec42783          	lw	a5,-20(s0)
    21f4:	02078793          	addi	a5,a5,32
    21f8:	fef42623          	sw	a5,-20(s0)
    21fc:	fec42703          	lw	a4,-20(s0)
    2200:	000017b7          	lui	a5,0x1
    2204:	fef762e3          	bltu	a4,a5,21e8 <alt_dcache_flush_all+0x14>
    }
#endif
}
    2208:	00000013          	nop
    220c:	00000013          	nop
    2210:	01c12403          	lw	s0,28(sp)
    2214:	02010113          	addi	sp,sp,32
    2218:	00008067          	ret

0000221c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    221c:	fe010113          	addi	sp,sp,-32
    2220:	00812e23          	sw	s0,28(sp)
    2224:	02010413          	addi	s0,sp,32
    2228:	fea42623          	sw	a0,-20(s0)
    222c:	feb42423          	sw	a1,-24(s0)
    2230:	fec42223          	sw	a2,-28(s0)
  return len;
    2234:	fe442783          	lw	a5,-28(s0)
}
    2238:	00078513          	mv	a0,a5
    223c:	01c12403          	lw	s0,28(sp)
    2240:	02010113          	addi	sp,sp,32
    2244:	00008067          	ret

00002248 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    2248:	fe010113          	addi	sp,sp,-32
    224c:	00112e23          	sw	ra,28(sp)
    2250:	00812c23          	sw	s0,24(sp)
    2254:	02010413          	addi	s0,sp,32
    2258:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    225c:	000097b7          	lui	a5,0x9
    2260:	53c78593          	addi	a1,a5,1340 # 953c <alt_dev_list>
    2264:	fec42503          	lw	a0,-20(s0)
    2268:	068000ef          	jal	ra,22d0 <alt_dev_llist_insert>
    226c:	00050793          	mv	a5,a0
}
    2270:	00078513          	mv	a0,a5
    2274:	01c12083          	lw	ra,28(sp)
    2278:	01812403          	lw	s0,24(sp)
    227c:	02010113          	addi	sp,sp,32
    2280:	00008067          	ret

00002284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2284:	ff010113          	addi	sp,sp,-16
    2288:	00112623          	sw	ra,12(sp)
    228c:	00812423          	sw	s0,8(sp)
    2290:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    2294:	000097b7          	lui	a5,0x9
    2298:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    229c:	00078c63          	beqz	a5,22b4 <alt_get_errno+0x30>
    22a0:	000097b7          	lui	a5,0x9
    22a4:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    22a8:	000780e7          	jalr	a5
    22ac:	00050793          	mv	a5,a0
    22b0:	00c0006f          	j	22bc <alt_get_errno+0x38>
    22b4:	0000b7b7          	lui	a5,0xb
    22b8:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    22bc:	00078513          	mv	a0,a5
    22c0:	00c12083          	lw	ra,12(sp)
    22c4:	00812403          	lw	s0,8(sp)
    22c8:	01010113          	addi	sp,sp,16
    22cc:	00008067          	ret

000022d0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    22d0:	fd010113          	addi	sp,sp,-48
    22d4:	02112623          	sw	ra,44(sp)
    22d8:	02812423          	sw	s0,40(sp)
    22dc:	03010413          	addi	s0,sp,48
    22e0:	fca42e23          	sw	a0,-36(s0)
    22e4:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    22e8:	fdc42783          	lw	a5,-36(s0)
    22ec:	00078863          	beqz	a5,22fc <alt_dev_llist_insert+0x2c>
    22f0:	fdc42783          	lw	a5,-36(s0)
    22f4:	0087a783          	lw	a5,8(a5)
    22f8:	00079e63          	bnez	a5,2314 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    22fc:	f89ff0ef          	jal	ra,2284 <alt_get_errno>
    2300:	00050713          	mv	a4,a0
    2304:	01600793          	li	a5,22
    2308:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    230c:	fea00793          	li	a5,-22
    2310:	0540006f          	j	2364 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2314:	fdc42783          	lw	a5,-36(s0)
    2318:	fd842703          	lw	a4,-40(s0)
    231c:	fee42423          	sw	a4,-24(s0)
    2320:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    2324:	fec42783          	lw	a5,-20(s0)
    2328:	fe842703          	lw	a4,-24(s0)
    232c:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    2330:	fe842783          	lw	a5,-24(s0)
    2334:	0007a703          	lw	a4,0(a5)
    2338:	fec42783          	lw	a5,-20(s0)
    233c:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    2340:	fe842783          	lw	a5,-24(s0)
    2344:	0007a783          	lw	a5,0(a5)
    2348:	fec42703          	lw	a4,-20(s0)
    234c:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    2350:	fe842783          	lw	a5,-24(s0)
    2354:	fec42703          	lw	a4,-20(s0)
    2358:	00e7a023          	sw	a4,0(a5)
}
    235c:	00000013          	nop

  return 0;  
    2360:	00000793          	li	a5,0
}
    2364:	00078513          	mv	a0,a5
    2368:	02c12083          	lw	ra,44(sp)
    236c:	02812403          	lw	s0,40(sp)
    2370:	03010113          	addi	sp,sp,48
    2374:	00008067          	ret

00002378 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2378:	fe010113          	addi	sp,sp,-32
    237c:	00112e23          	sw	ra,28(sp)
    2380:	00812c23          	sw	s0,24(sp)
    2384:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    2388:	000077b7          	lui	a5,0x7
    238c:	62078793          	addi	a5,a5,1568 # 7620 <__init_array_start+0x4>
    2390:	fef42623          	sw	a5,-20(s0)
    2394:	01c0006f          	j	23b0 <_do_ctors+0x38>
        (*ctor) (); 
    2398:	fec42783          	lw	a5,-20(s0)
    239c:	0007a783          	lw	a5,0(a5)
    23a0:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    23a4:	fec42783          	lw	a5,-20(s0)
    23a8:	ffc78793          	addi	a5,a5,-4
    23ac:	fef42623          	sw	a5,-20(s0)
    23b0:	fec42703          	lw	a4,-20(s0)
    23b4:	000077b7          	lui	a5,0x7
    23b8:	61c78793          	addi	a5,a5,1564 # 761c <__init_array_start>
    23bc:	fcf77ee3          	bgeu	a4,a5,2398 <_do_ctors+0x20>
}
    23c0:	00000013          	nop
    23c4:	00000013          	nop
    23c8:	01c12083          	lw	ra,28(sp)
    23cc:	01812403          	lw	s0,24(sp)
    23d0:	02010113          	addi	sp,sp,32
    23d4:	00008067          	ret

000023d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    23d8:	fe010113          	addi	sp,sp,-32
    23dc:	00112e23          	sw	ra,28(sp)
    23e0:	00812c23          	sw	s0,24(sp)
    23e4:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    23e8:	000077b7          	lui	a5,0x7
    23ec:	62078793          	addi	a5,a5,1568 # 7620 <__init_array_start+0x4>
    23f0:	fef42623          	sw	a5,-20(s0)
    23f4:	01c0006f          	j	2410 <_do_dtors+0x38>
        (*dtor) (); 
    23f8:	fec42783          	lw	a5,-20(s0)
    23fc:	0007a783          	lw	a5,0(a5)
    2400:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    2404:	fec42783          	lw	a5,-20(s0)
    2408:	ffc78793          	addi	a5,a5,-4
    240c:	fef42623          	sw	a5,-20(s0)
    2410:	fec42703          	lw	a4,-20(s0)
    2414:	000077b7          	lui	a5,0x7
    2418:	62478793          	addi	a5,a5,1572 # 7624 <__fini_array_end>
    241c:	fcf77ee3          	bgeu	a4,a5,23f8 <_do_dtors+0x20>
}
    2420:	00000013          	nop
    2424:	00000013          	nop
    2428:	01c12083          	lw	ra,28(sp)
    242c:	01812403          	lw	s0,24(sp)
    2430:	02010113          	addi	sp,sp,32
    2434:	00008067          	ret

00002438 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2438:	ff010113          	addi	sp,sp,-16
    243c:	00812623          	sw	s0,12(sp)
    2440:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
    2444:	0000100f          	fence.i
#endif
}
    2448:	00000013          	nop
    244c:	00c12403          	lw	s0,12(sp)
    2450:	01010113          	addi	sp,sp,16
    2454:	00008067          	ret

00002458 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2458:	fd010113          	addi	sp,sp,-48
    245c:	02112623          	sw	ra,44(sp)
    2460:	02812423          	sw	s0,40(sp)
    2464:	03010413          	addi	s0,sp,48
    2468:	fea42623          	sw	a0,-20(s0)
    246c:	feb42423          	sw	a1,-24(s0)
    2470:	fec42223          	sw	a2,-28(s0)
    2474:	fed42023          	sw	a3,-32(s0)
    2478:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    247c:	fdc42703          	lw	a4,-36(s0)
    2480:	fe042683          	lw	a3,-32(s0)
    2484:	fe442603          	lw	a2,-28(s0)
    2488:	fe842583          	lw	a1,-24(s0)
    248c:	fec42503          	lw	a0,-20(s0)
    2490:	01c000ef          	jal	ra,24ac <alt_iic_isr_register>
    2494:	00050793          	mv	a5,a0
}  
    2498:	00078513          	mv	a0,a5
    249c:	02c12083          	lw	ra,44(sp)
    24a0:	02812403          	lw	s0,40(sp)
    24a4:	03010113          	addi	sp,sp,48
    24a8:	00008067          	ret

000024ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    24ac:	fa010113          	addi	sp,sp,-96
    24b0:	04812e23          	sw	s0,92(sp)
    24b4:	06010413          	addi	s0,sp,96
    24b8:	faa42e23          	sw	a0,-68(s0)
    24bc:	fab42c23          	sw	a1,-72(s0)
    24c0:	fac42a23          	sw	a2,-76(s0)
    24c4:	fad42823          	sw	a3,-80(s0)
    24c8:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    24cc:	fea00793          	li	a5,-22
    24d0:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    24d4:	fb842783          	lw	a5,-72(s0)
    24d8:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    24dc:	fc842703          	lw	a4,-56(s0)
    24e0:	00f00793          	li	a5,15
    24e4:	12e7c863          	blt	a5,a4,2614 <alt_iic_isr_register+0x168>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    24e8:	00800793          	li	a5,8
    24ec:	3007b7f3          	csrrc	a5,mstatus,a5
    24f0:	fcf42823          	sw	a5,-48(s0)
    return context;
    24f4:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    24f8:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    24fc:	0000b7b7          	lui	a5,0xb
    2500:	0f078713          	addi	a4,a5,240 # b0f0 <alt_irq>
    2504:	fc842783          	lw	a5,-56(s0)
    2508:	00379793          	slli	a5,a5,0x3
    250c:	00f707b3          	add	a5,a4,a5
    2510:	fb442703          	lw	a4,-76(s0)
    2514:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    2518:	0000b7b7          	lui	a5,0xb
    251c:	0f078713          	addi	a4,a5,240 # b0f0 <alt_irq>
    2520:	fc842783          	lw	a5,-56(s0)
    2524:	00379793          	slli	a5,a5,0x3
    2528:	00f707b3          	add	a5,a4,a5
    252c:	fb042703          	lw	a4,-80(s0)
    2530:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2534:	fb442783          	lw	a5,-76(s0)
    2538:	06078263          	beqz	a5,259c <alt_iic_isr_register+0xf0>
    253c:	fc842783          	lw	a5,-56(s0)
    2540:	fbc42703          	lw	a4,-68(s0)
    2544:	fce42a23          	sw	a4,-44(s0)
    2548:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    254c:	fd842703          	lw	a4,-40(s0)
    2550:	00f00793          	li	a5,15
    2554:	00e7e863          	bltu	a5,a4,2564 <alt_iic_isr_register+0xb8>
    2558:	fd842783          	lw	a5,-40(s0)
    255c:	01078793          	addi	a5,a5,16
    2560:	0080006f          	j	2568 <alt_iic_isr_register+0xbc>
    2564:	fff00793          	li	a5,-1
    2568:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    256c:	fdc42783          	lw	a5,-36(s0)
    2570:	0007d663          	bgez	a5,257c <alt_iic_isr_register+0xd0>
        return rc;
    2574:	fdc42783          	lw	a5,-36(s0)
    2578:	0800006f          	j	25f8 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    257c:	fdc42783          	lw	a5,-36(s0)
    2580:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    2584:	fd842783          	lw	a5,-40(s0)
    2588:	00100713          	li	a4,1
    258c:	00f717b3          	sll	a5,a4,a5
    2590:	3047a073          	csrs	mie,a5
    return 0;
    2594:	00000793          	li	a5,0
    2598:	0600006f          	j	25f8 <alt_iic_isr_register+0x14c>
    259c:	fc842783          	lw	a5,-56(s0)
    25a0:	fbc42703          	lw	a4,-68(s0)
    25a4:	fee42023          	sw	a4,-32(s0)
    25a8:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    25ac:	fe442703          	lw	a4,-28(s0)
    25b0:	00f00793          	li	a5,15
    25b4:	00e7e863          	bltu	a5,a4,25c4 <alt_iic_isr_register+0x118>
    25b8:	fe442783          	lw	a5,-28(s0)
    25bc:	01078793          	addi	a5,a5,16
    25c0:	0080006f          	j	25c8 <alt_iic_isr_register+0x11c>
    25c4:	fff00793          	li	a5,-1
    25c8:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    25cc:	fe842783          	lw	a5,-24(s0)
    25d0:	0007d663          	bgez	a5,25dc <alt_iic_isr_register+0x130>
        return rc;
    25d4:	fe842783          	lw	a5,-24(s0)
    25d8:	0200006f          	j	25f8 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    25dc:	fe842783          	lw	a5,-24(s0)
    25e0:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    25e4:	fe442783          	lw	a5,-28(s0)
    25e8:	00100713          	li	a4,1
    25ec:	00f717b3          	sll	a5,a4,a5
    25f0:	3047b073          	csrc	mie,a5
    return 0;
    25f4:	00000793          	li	a5,0
    25f8:	fcf42223          	sw	a5,-60(s0)
    25fc:	fcc42783          	lw	a5,-52(s0)
    2600:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2604:	fec42783          	lw	a5,-20(s0)
    2608:	0087f793          	andi	a5,a5,8
    260c:	3007a073          	csrs	mstatus,a5
}
    2610:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    2614:	fc442783          	lw	a5,-60(s0)
}
    2618:	00078513          	mv	a0,a5
    261c:	05c12403          	lw	s0,92(sp)
    2620:	06010113          	addi	sp,sp,96
    2624:	00008067          	ret

00002628 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2628:	fd010113          	addi	sp,sp,-48
    262c:	02112623          	sw	ra,44(sp)
    2630:	02812423          	sw	s0,40(sp)
    2634:	03010413          	addi	s0,sp,48
    2638:	fca42e23          	sw	a0,-36(s0)
    263c:	fcb42c23          	sw	a1,-40(s0)
    2640:	fcc42a23          	sw	a2,-44(s0)
    2644:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    2648:	fd042603          	lw	a2,-48(s0)
    264c:	fd442583          	lw	a1,-44(s0)
    2650:	fd842503          	lw	a0,-40(s0)
    2654:	2e1000ef          	jal	ra,3134 <open>
    2658:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    265c:	fec42783          	lw	a5,-20(s0)
    2660:	0807c863          	bltz	a5,26f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    2664:	000097b7          	lui	a5,0x9
    2668:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    266c:	fec42703          	lw	a4,-20(s0)
    2670:	00070793          	mv	a5,a4
    2674:	00179793          	slli	a5,a5,0x1
    2678:	00e787b3          	add	a5,a5,a4
    267c:	00279793          	slli	a5,a5,0x2
    2680:	00f687b3          	add	a5,a3,a5
    2684:	0007a703          	lw	a4,0(a5)
    2688:	fdc42783          	lw	a5,-36(s0)
    268c:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    2690:	000097b7          	lui	a5,0x9
    2694:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    2698:	fec42703          	lw	a4,-20(s0)
    269c:	00070793          	mv	a5,a4
    26a0:	00179793          	slli	a5,a5,0x1
    26a4:	00e787b3          	add	a5,a5,a4
    26a8:	00279793          	slli	a5,a5,0x2
    26ac:	00f687b3          	add	a5,a3,a5
    26b0:	0047a703          	lw	a4,4(a5)
    26b4:	fdc42783          	lw	a5,-36(s0)
    26b8:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    26bc:	000097b7          	lui	a5,0x9
    26c0:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    26c4:	fec42703          	lw	a4,-20(s0)
    26c8:	00070793          	mv	a5,a4
    26cc:	00179793          	slli	a5,a5,0x1
    26d0:	00e787b3          	add	a5,a5,a4
    26d4:	00279793          	slli	a5,a5,0x2
    26d8:	00f687b3          	add	a5,a3,a5
    26dc:	0087a703          	lw	a4,8(a5)
    26e0:	fdc42783          	lw	a5,-36(s0)
    26e4:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    26e8:	fec42503          	lw	a0,-20(s0)
    26ec:	090000ef          	jal	ra,277c <alt_release_fd>
  }
} 
    26f0:	00000013          	nop
    26f4:	02c12083          	lw	ra,44(sp)
    26f8:	02812403          	lw	s0,40(sp)
    26fc:	03010113          	addi	sp,sp,48
    2700:	00008067          	ret

00002704 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2704:	fe010113          	addi	sp,sp,-32
    2708:	00112e23          	sw	ra,28(sp)
    270c:	00812c23          	sw	s0,24(sp)
    2710:	02010413          	addi	s0,sp,32
    2714:	fea42623          	sw	a0,-20(s0)
    2718:	feb42423          	sw	a1,-24(s0)
    271c:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2720:	1ff00693          	li	a3,511
    2724:	00100613          	li	a2,1
    2728:	fec42583          	lw	a1,-20(s0)
    272c:	000097b7          	lui	a5,0x9
    2730:	b8478513          	addi	a0,a5,-1148 # 8b84 <alt_fd_list+0xc>
    2734:	ef5ff0ef          	jal	ra,2628 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2738:	1ff00693          	li	a3,511
    273c:	00000613          	li	a2,0
    2740:	fe842583          	lw	a1,-24(s0)
    2744:	000097b7          	lui	a5,0x9
    2748:	b7878513          	addi	a0,a5,-1160 # 8b78 <alt_fd_list>
    274c:	eddff0ef          	jal	ra,2628 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2750:	1ff00693          	li	a3,511
    2754:	00100613          	li	a2,1
    2758:	fe442583          	lw	a1,-28(s0)
    275c:	000097b7          	lui	a5,0x9
    2760:	b9078513          	addi	a0,a5,-1136 # 8b90 <alt_fd_list+0x18>
    2764:	ec5ff0ef          	jal	ra,2628 <alt_open_fd>
}  
    2768:	00000013          	nop
    276c:	01c12083          	lw	ra,28(sp)
    2770:	01812403          	lw	s0,24(sp)
    2774:	02010113          	addi	sp,sp,32
    2778:	00008067          	ret

0000277c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    277c:	fe010113          	addi	sp,sp,-32
    2780:	00812e23          	sw	s0,28(sp)
    2784:	02010413          	addi	s0,sp,32
    2788:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    278c:	fec42703          	lw	a4,-20(s0)
    2790:	00200793          	li	a5,2
    2794:	04e7d663          	bge	a5,a4,27e0 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    2798:	000097b7          	lui	a5,0x9
    279c:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    27a0:	fec42703          	lw	a4,-20(s0)
    27a4:	00070793          	mv	a5,a4
    27a8:	00179793          	slli	a5,a5,0x1
    27ac:	00e787b3          	add	a5,a5,a4
    27b0:	00279793          	slli	a5,a5,0x2
    27b4:	00f687b3          	add	a5,a3,a5
    27b8:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    27bc:	000097b7          	lui	a5,0x9
    27c0:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    27c4:	fec42703          	lw	a4,-20(s0)
    27c8:	00070793          	mv	a5,a4
    27cc:	00179793          	slli	a5,a5,0x1
    27d0:	00e787b3          	add	a5,a5,a4
    27d4:	00279793          	slli	a5,a5,0x2
    27d8:	00f687b3          	add	a5,a3,a5
    27dc:	0007a023          	sw	zero,0(a5)
  }
}
    27e0:	00000013          	nop
    27e4:	01c12403          	lw	s0,28(sp)
    27e8:	02010113          	addi	sp,sp,32
    27ec:	00008067          	ret

000027f0 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    27f0:	ff010113          	addi	sp,sp,-16
    27f4:	00812623          	sw	s0,12(sp)
    27f8:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    27fc:	fff00793          	li	a5,-1
    2800:	3047b073          	csrc	mie,a5
#endif
}
    2804:	00000013          	nop
    2808:	00c12403          	lw	s0,12(sp)
    280c:	01010113          	addi	sp,sp,16
    2810:	00008067          	ret

00002814 <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    2814:	ff010113          	addi	sp,sp,-16
    2818:	00112623          	sw	ra,12(sp)
    281c:	00812423          	sw	s0,8(sp)
    2820:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    2824:	0ac000ef          	jal	ra,28d0 <alt_niosv_mtime_get>
    2828:	00050713          	mv	a4,a0
    282c:	00058793          	mv	a5,a1
    2830:	0000b6b7          	lui	a3,0xb
    2834:	0ae6a823          	sw	a4,176(a3) # b0b0 <alt_niosv_timestamp_offset>
    2838:	0af6aa23          	sw	a5,180(a3)
    return 0;
    283c:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    2840:	00078513          	mv	a0,a5
    2844:	00c12083          	lw	ra,12(sp)
    2848:	00812403          	lw	s0,8(sp)
    284c:	01010113          	addi	sp,sp,16
    2850:	00008067          	ret

00002854 <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    2854:	ff010113          	addi	sp,sp,-16
    2858:	00112623          	sw	ra,12(sp)
    285c:	00812423          	sw	s0,8(sp)
    2860:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    2864:	06c000ef          	jal	ra,28d0 <alt_niosv_mtime_get>
    2868:	00050613          	mv	a2,a0
    286c:	00058693          	mv	a3,a1
    2870:	0000b7b7          	lui	a5,0xb
    2874:	0b07a503          	lw	a0,176(a5) # b0b0 <alt_niosv_timestamp_offset>
    2878:	0b47a583          	lw	a1,180(a5)
    287c:	40a60733          	sub	a4,a2,a0
    2880:	00070813          	mv	a6,a4
    2884:	01063833          	sltu	a6,a2,a6
    2888:	40b687b3          	sub	a5,a3,a1
    288c:	410786b3          	sub	a3,a5,a6
    2890:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    2894:	00070513          	mv	a0,a4
    2898:	00078593          	mv	a1,a5
    289c:	00c12083          	lw	ra,12(sp)
    28a0:	00812403          	lw	s0,8(sp)
    28a4:	01010113          	addi	sp,sp,16
    28a8:	00008067          	ret

000028ac <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    28ac:	ff010113          	addi	sp,sp,-16
    28b0:	00812623          	sw	s0,12(sp)
    28b4:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    28b8:	02faf7b7          	lui	a5,0x2faf
    28bc:	08078793          	addi	a5,a5,128 # 2faf080 <__alt_data_end+0x2f9f080>
    return alt_niosv_timer_timestamp_freq();
}
    28c0:	00078513          	mv	a0,a5
    28c4:	00c12403          	lw	s0,12(sp)
    28c8:	01010113          	addi	sp,sp,16
    28cc:	00008067          	ret

000028d0 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    28d0:	fe010113          	addi	sp,sp,-32
    28d4:	00812e23          	sw	s0,28(sp)
    28d8:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    28dc:	00020337          	lui	t1,0x20
    28e0:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    28e4:	00032303          	lw	t1,0(t1)
    28e8:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    28ec:	00020337          	lui	t1,0x20
    28f0:	00830313          	addi	t1,t1,8 # 20008 <__alt_data_end+0x10008>
    28f4:	00032303          	lw	t1,0(t1)
    28f8:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    28fc:	00020337          	lui	t1,0x20
    2900:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    2904:	00032303          	lw	t1,0(t1)
    2908:	fe842e03          	lw	t3,-24(s0)
    290c:	fc6e18e3          	bne	t3,t1,28dc <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    2910:	fe842303          	lw	t1,-24(s0)
    2914:	00030813          	mv	a6,t1
    2918:	00000893          	li	a7,0
    291c:	00081793          	slli	a5,a6,0x0
    2920:	00000713          	li	a4,0
    2924:	fec42803          	lw	a6,-20(s0)
    2928:	00080613          	mv	a2,a6
    292c:	00000693          	li	a3,0
    2930:	00c76533          	or	a0,a4,a2
    2934:	00d7e5b3          	or	a1,a5,a3
    2938:	00050713          	mv	a4,a0
    293c:	00058793          	mv	a5,a1
}
    2940:	00070513          	mv	a0,a4
    2944:	00078593          	mv	a1,a5
    2948:	01c12403          	lw	s0,28(sp)
    294c:	02010113          	addi	sp,sp,32
    2950:	00008067          	ret

00002954 <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    2954:	fe010113          	addi	sp,sp,-32
    2958:	00812e23          	sw	s0,28(sp)
    295c:	02010413          	addi	s0,sp,32
    2960:	fea42423          	sw	a0,-24(s0)
    2964:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    2968:	000206b7          	lui	a3,0x20
    296c:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    2970:	fff00613          	li	a2,-1
    2974:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    2978:	000206b7          	lui	a3,0x20
    297c:	fe842603          	lw	a2,-24(s0)
    2980:	00c6a023          	sw	a2,0(a3) # 20000 <__alt_data_end+0x10000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    2984:	fec42683          	lw	a3,-20(s0)
    2988:	0006d713          	srli	a4,a3,0x0
    298c:	00000793          	li	a5,0
    2990:	000206b7          	lui	a3,0x20
    2994:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    2998:	00070793          	mv	a5,a4
    299c:	00f6a023          	sw	a5,0(a3)
}
    29a0:	00000013          	nop
    29a4:	01c12403          	lw	s0,28(sp)
    29a8:	02010113          	addi	sp,sp,32
    29ac:	00008067          	ret

000029b0 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    29b0:	fe010113          	addi	sp,sp,-32
    29b4:	00812e23          	sw	s0,28(sp)
    29b8:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    29bc:	00020337          	lui	t1,0x20
    29c0:	00032303          	lw	t1,0(t1) # 20000 <__alt_data_end+0x10000>
    29c4:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    29c8:	00020337          	lui	t1,0x20
    29cc:	00430313          	addi	t1,t1,4 # 20004 <__alt_data_end+0x10004>
    29d0:	00032303          	lw	t1,0(t1)
    29d4:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    29d8:	fec42303          	lw	t1,-20(s0)
    29dc:	00030813          	mv	a6,t1
    29e0:	00000893          	li	a7,0
    29e4:	00081793          	slli	a5,a6,0x0
    29e8:	00000713          	li	a4,0
    29ec:	fe842803          	lw	a6,-24(s0)
    29f0:	00080613          	mv	a2,a6
    29f4:	00000693          	li	a3,0
    29f8:	00c76533          	or	a0,a4,a2
    29fc:	00d7e5b3          	or	a1,a5,a3
    2a00:	00050713          	mv	a4,a0
    2a04:	00058793          	mv	a5,a1
}
    2a08:	00070513          	mv	a0,a4
    2a0c:	00078593          	mv	a1,a5
    2a10:	01c12403          	lw	s0,28(sp)
    2a14:	02010113          	addi	sp,sp,32
    2a18:	00008067          	ret

00002a1c <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    2a1c:	fc010113          	addi	sp,sp,-64
    2a20:	02112e23          	sw	ra,60(sp)
    2a24:	02812c23          	sw	s0,56(sp)
    2a28:	04010413          	addi	s0,sp,64
    2a2c:	fca42623          	sw	a0,-52(s0)
    2a30:	fcb42423          	sw	a1,-56(s0)
    2a34:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
    2a38:	e99ff0ef          	jal	ra,28d0 <alt_niosv_mtime_get>
    2a3c:	fea42423          	sw	a0,-24(s0)
    2a40:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    2a44:	fe842703          	lw	a4,-24(s0)
    2a48:	fec42783          	lw	a5,-20(s0)
    2a4c:	0000c537          	lui	a0,0xc
    2a50:	35050513          	addi	a0,a0,848 # c350 <__alt_heap_start+0x1188>
    2a54:	00000593          	li	a1,0
    2a58:	00a70633          	add	a2,a4,a0
    2a5c:	00060813          	mv	a6,a2
    2a60:	00e83833          	sltu	a6,a6,a4
    2a64:	00b786b3          	add	a3,a5,a1
    2a68:	00d807b3          	add	a5,a6,a3
    2a6c:	00078693          	mv	a3,a5
    2a70:	00060713          	mv	a4,a2
    2a74:	00068793          	mv	a5,a3
    2a78:	00070513          	mv	a0,a4
    2a7c:	00078593          	mv	a1,a5
    2a80:	ed5ff0ef          	jal	ra,2954 <alt_niosv_mtimecmp_set>

    // ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h
    ALT_LOG_SYS_CLK_HEARTBEAT();
    2a84:	cacfe0ef          	jal	ra,f30 <alt_log_system_clock>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2a88:	00800793          	li	a5,8
    2a8c:	3007b7f3          	csrrc	a5,mstatus,a5
    2a90:	fef42223          	sw	a5,-28(s0)
    return context;
    2a94:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    2a98:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
    2a9c:	f38fe0ef          	jal	ra,11d4 <alt_tick>
    2aa0:	fdc42783          	lw	a5,-36(s0)
    2aa4:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2aa8:	fe042783          	lw	a5,-32(s0)
    2aac:	0087f793          	andi	a5,a5,8
    2ab0:	3007a073          	csrs	mstatus,a5
}
    2ab4:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    2ab8:	00000013          	nop
    2abc:	03c12083          	lw	ra,60(sp)
    2ac0:	03812403          	lw	s0,56(sp)
    2ac4:	04010113          	addi	sp,sp,64
    2ac8:	00008067          	ret

00002acc <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    2acc:	ff010113          	addi	sp,sp,-16
    2ad0:	00112623          	sw	ra,12(sp)
    2ad4:	00812423          	sw	s0,8(sp)
    2ad8:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    2adc:	fff00513          	li	a0,-1
    2ae0:	fff00593          	li	a1,-1
    2ae4:	e71ff0ef          	jal	ra,2954 <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
    2ae8:	08000793          	li	a5,128
    2aec:	3047a073          	csrs	mie,a5
}
    2af0:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    2af4:	00000013          	nop
    2af8:	00c12083          	lw	ra,12(sp)
    2afc:	00812403          	lw	s0,8(sp)
    2b00:	01010113          	addi	sp,sp,16
    2b04:	00008067          	ret

00002b08 <atexit>:
    2b08:	00050593          	mv	a1,a0
    2b0c:	00000693          	li	a3,0
    2b10:	00000613          	li	a2,0
    2b14:	00000513          	li	a0,0
    2b18:	6dc0006f          	j	31f4 <__register_exitproc>

00002b1c <exit>:
    2b1c:	ff010113          	addi	sp,sp,-16
    2b20:	00000593          	li	a1,0
    2b24:	00812423          	sw	s0,8(sp)
    2b28:	00112623          	sw	ra,12(sp)
    2b2c:	00050413          	mv	s0,a0
    2b30:	7ac000ef          	jal	ra,32dc <__call_exitprocs>
    2b34:	00005517          	auipc	a0,0x5
    2b38:	f1852503          	lw	a0,-232(a0) # 7a4c <_global_impure_ptr>
    2b3c:	03c52783          	lw	a5,60(a0)
    2b40:	00078463          	beqz	a5,2b48 <exit+0x2c>
    2b44:	000780e7          	jalr	a5
    2b48:	00040513          	mv	a0,s0
    2b4c:	3e1030ef          	jal	ra,672c <_exit>

00002b50 <memcpy>:
    2b50:	00b547b3          	xor	a5,a0,a1
    2b54:	0037f793          	andi	a5,a5,3
    2b58:	00c508b3          	add	a7,a0,a2
    2b5c:	06079463          	bnez	a5,2bc4 <memcpy+0x74>
    2b60:	00300793          	li	a5,3
    2b64:	06c7f063          	bgeu	a5,a2,2bc4 <memcpy+0x74>
    2b68:	00357793          	andi	a5,a0,3
    2b6c:	00050713          	mv	a4,a0
    2b70:	06079a63          	bnez	a5,2be4 <memcpy+0x94>
    2b74:	ffc8f613          	andi	a2,a7,-4
    2b78:	40e606b3          	sub	a3,a2,a4
    2b7c:	02000793          	li	a5,32
    2b80:	08d7ce63          	blt	a5,a3,2c1c <memcpy+0xcc>
    2b84:	00058693          	mv	a3,a1
    2b88:	00070793          	mv	a5,a4
    2b8c:	02c77863          	bgeu	a4,a2,2bbc <memcpy+0x6c>
    2b90:	0006a803          	lw	a6,0(a3)
    2b94:	00478793          	addi	a5,a5,4
    2b98:	00468693          	addi	a3,a3,4
    2b9c:	ff07ae23          	sw	a6,-4(a5)
    2ba0:	fec7e8e3          	bltu	a5,a2,2b90 <memcpy+0x40>
    2ba4:	fff60793          	addi	a5,a2,-1
    2ba8:	40e787b3          	sub	a5,a5,a4
    2bac:	ffc7f793          	andi	a5,a5,-4
    2bb0:	00478793          	addi	a5,a5,4
    2bb4:	00f70733          	add	a4,a4,a5
    2bb8:	00f585b3          	add	a1,a1,a5
    2bbc:	01176863          	bltu	a4,a7,2bcc <memcpy+0x7c>
    2bc0:	00008067          	ret
    2bc4:	00050713          	mv	a4,a0
    2bc8:	05157863          	bgeu	a0,a7,2c18 <memcpy+0xc8>
    2bcc:	0005c783          	lbu	a5,0(a1)
    2bd0:	00170713          	addi	a4,a4,1
    2bd4:	00158593          	addi	a1,a1,1
    2bd8:	fef70fa3          	sb	a5,-1(a4)
    2bdc:	fee898e3          	bne	a7,a4,2bcc <memcpy+0x7c>
    2be0:	00008067          	ret
    2be4:	0005c683          	lbu	a3,0(a1)
    2be8:	00170713          	addi	a4,a4,1
    2bec:	00377793          	andi	a5,a4,3
    2bf0:	fed70fa3          	sb	a3,-1(a4)
    2bf4:	00158593          	addi	a1,a1,1
    2bf8:	f6078ee3          	beqz	a5,2b74 <memcpy+0x24>
    2bfc:	0005c683          	lbu	a3,0(a1)
    2c00:	00170713          	addi	a4,a4,1
    2c04:	00377793          	andi	a5,a4,3
    2c08:	fed70fa3          	sb	a3,-1(a4)
    2c0c:	00158593          	addi	a1,a1,1
    2c10:	fc079ae3          	bnez	a5,2be4 <memcpy+0x94>
    2c14:	f61ff06f          	j	2b74 <memcpy+0x24>
    2c18:	00008067          	ret
    2c1c:	ff010113          	addi	sp,sp,-16
    2c20:	00812623          	sw	s0,12(sp)
    2c24:	02000413          	li	s0,32
    2c28:	0005a383          	lw	t2,0(a1)
    2c2c:	0045a283          	lw	t0,4(a1)
    2c30:	0085af83          	lw	t6,8(a1)
    2c34:	00c5af03          	lw	t5,12(a1)
    2c38:	0105ae83          	lw	t4,16(a1)
    2c3c:	0145ae03          	lw	t3,20(a1)
    2c40:	0185a303          	lw	t1,24(a1)
    2c44:	01c5a803          	lw	a6,28(a1)
    2c48:	0205a683          	lw	a3,32(a1)
    2c4c:	02470713          	addi	a4,a4,36
    2c50:	40e607b3          	sub	a5,a2,a4
    2c54:	fc772e23          	sw	t2,-36(a4)
    2c58:	fe572023          	sw	t0,-32(a4)
    2c5c:	fff72223          	sw	t6,-28(a4)
    2c60:	ffe72423          	sw	t5,-24(a4)
    2c64:	ffd72623          	sw	t4,-20(a4)
    2c68:	ffc72823          	sw	t3,-16(a4)
    2c6c:	fe672a23          	sw	t1,-12(a4)
    2c70:	ff072c23          	sw	a6,-8(a4)
    2c74:	fed72e23          	sw	a3,-4(a4)
    2c78:	02458593          	addi	a1,a1,36
    2c7c:	faf446e3          	blt	s0,a5,2c28 <memcpy+0xd8>
    2c80:	00058693          	mv	a3,a1
    2c84:	00070793          	mv	a5,a4
    2c88:	02c77863          	bgeu	a4,a2,2cb8 <memcpy+0x168>
    2c8c:	0006a803          	lw	a6,0(a3)
    2c90:	00478793          	addi	a5,a5,4
    2c94:	00468693          	addi	a3,a3,4
    2c98:	ff07ae23          	sw	a6,-4(a5)
    2c9c:	fec7e8e3          	bltu	a5,a2,2c8c <memcpy+0x13c>
    2ca0:	fff60793          	addi	a5,a2,-1
    2ca4:	40e787b3          	sub	a5,a5,a4
    2ca8:	ffc7f793          	andi	a5,a5,-4
    2cac:	00478793          	addi	a5,a5,4
    2cb0:	00f70733          	add	a4,a4,a5
    2cb4:	00f585b3          	add	a1,a1,a5
    2cb8:	01176863          	bltu	a4,a7,2cc8 <memcpy+0x178>
    2cbc:	00c12403          	lw	s0,12(sp)
    2cc0:	01010113          	addi	sp,sp,16
    2cc4:	00008067          	ret
    2cc8:	0005c783          	lbu	a5,0(a1)
    2ccc:	00170713          	addi	a4,a4,1
    2cd0:	00158593          	addi	a1,a1,1
    2cd4:	fef70fa3          	sb	a5,-1(a4)
    2cd8:	fee882e3          	beq	a7,a4,2cbc <memcpy+0x16c>
    2cdc:	0005c783          	lbu	a5,0(a1)
    2ce0:	00170713          	addi	a4,a4,1
    2ce4:	00158593          	addi	a1,a1,1
    2ce8:	fef70fa3          	sb	a5,-1(a4)
    2cec:	fce89ee3          	bne	a7,a4,2cc8 <memcpy+0x178>
    2cf0:	fcdff06f          	j	2cbc <memcpy+0x16c>

00002cf4 <_puts_r>:
    2cf4:	fd010113          	addi	sp,sp,-48
    2cf8:	02812423          	sw	s0,40(sp)
    2cfc:	00050413          	mv	s0,a0
    2d00:	00058513          	mv	a0,a1
    2d04:	02912223          	sw	s1,36(sp)
    2d08:	02112623          	sw	ra,44(sp)
    2d0c:	00058493          	mv	s1,a1
    2d10:	38c000ef          	jal	ra,309c <strlen>
    2d14:	00150713          	addi	a4,a0,1
    2d18:	00005697          	auipc	a3,0x5
    2d1c:	c3468693          	addi	a3,a3,-972 # 794c <__fini_array_end+0x328>
    2d20:	00e12623          	sw	a4,12(sp)
    2d24:	03842783          	lw	a5,56(s0)
    2d28:	01010713          	addi	a4,sp,16
    2d2c:	00d12c23          	sw	a3,24(sp)
    2d30:	00e12223          	sw	a4,4(sp)
    2d34:	00100693          	li	a3,1
    2d38:	00200713          	li	a4,2
    2d3c:	00912823          	sw	s1,16(sp)
    2d40:	00a12a23          	sw	a0,20(sp)
    2d44:	00d12e23          	sw	a3,28(sp)
    2d48:	00e12423          	sw	a4,8(sp)
    2d4c:	00842483          	lw	s1,8(s0)
    2d50:	08078a63          	beqz	a5,2de4 <_puts_r+0xf0>
    2d54:	0644a703          	lw	a4,100(s1)
    2d58:	00c49783          	lh	a5,12(s1)
    2d5c:	00177713          	andi	a4,a4,1
    2d60:	00071663          	bnez	a4,2d6c <_puts_r+0x78>
    2d64:	2007f713          	andi	a4,a5,512
    2d68:	0a070463          	beqz	a4,2e10 <_puts_r+0x11c>
    2d6c:	01279713          	slli	a4,a5,0x12
    2d70:	02074263          	bltz	a4,2d94 <_puts_r+0xa0>
    2d74:	0644a703          	lw	a4,100(s1)
    2d78:	000026b7          	lui	a3,0x2
    2d7c:	00d7e7b3          	or	a5,a5,a3
    2d80:	ffffe6b7          	lui	a3,0xffffe
    2d84:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffedfff>
    2d88:	00d77733          	and	a4,a4,a3
    2d8c:	00f49623          	sh	a5,12(s1)
    2d90:	06e4a223          	sw	a4,100(s1)
    2d94:	00040513          	mv	a0,s0
    2d98:	00410613          	addi	a2,sp,4
    2d9c:	00048593          	mv	a1,s1
    2da0:	028010ef          	jal	ra,3dc8 <__sfvwrite_r>
    2da4:	0644a783          	lw	a5,100(s1)
    2da8:	00153413          	seqz	s0,a0
    2dac:	40800433          	neg	s0,s0
    2db0:	00b47413          	andi	s0,s0,11
    2db4:	0017f793          	andi	a5,a5,1
    2db8:	fff40413          	addi	s0,s0,-1
    2dbc:	00079863          	bnez	a5,2dcc <_puts_r+0xd8>
    2dc0:	00c4d783          	lhu	a5,12(s1)
    2dc4:	2007f793          	andi	a5,a5,512
    2dc8:	02078463          	beqz	a5,2df0 <_puts_r+0xfc>
    2dcc:	02c12083          	lw	ra,44(sp)
    2dd0:	00040513          	mv	a0,s0
    2dd4:	02812403          	lw	s0,40(sp)
    2dd8:	02412483          	lw	s1,36(sp)
    2ddc:	03010113          	addi	sp,sp,48
    2de0:	00008067          	ret
    2de4:	00040513          	mv	a0,s0
    2de8:	7ac000ef          	jal	ra,3594 <__sinit>
    2dec:	f69ff06f          	j	2d54 <_puts_r+0x60>
    2df0:	0584a503          	lw	a0,88(s1)
    2df4:	5f4010ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    2df8:	02c12083          	lw	ra,44(sp)
    2dfc:	00040513          	mv	a0,s0
    2e00:	02812403          	lw	s0,40(sp)
    2e04:	02412483          	lw	s1,36(sp)
    2e08:	03010113          	addi	sp,sp,48
    2e0c:	00008067          	ret
    2e10:	0584a503          	lw	a0,88(s1)
    2e14:	5bc010ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    2e18:	00c49783          	lh	a5,12(s1)
    2e1c:	f51ff06f          	j	2d6c <_puts_r+0x78>

00002e20 <puts>:
    2e20:	00050593          	mv	a1,a0
    2e24:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    2e28:	ecdff06f          	j	2cf4 <_puts_r>

00002e2c <cleanup_glue>:
    2e2c:	fe010113          	addi	sp,sp,-32
    2e30:	01212823          	sw	s2,16(sp)
    2e34:	0005a903          	lw	s2,0(a1)
    2e38:	00812c23          	sw	s0,24(sp)
    2e3c:	00912a23          	sw	s1,20(sp)
    2e40:	00112e23          	sw	ra,28(sp)
    2e44:	01312623          	sw	s3,12(sp)
    2e48:	01412423          	sw	s4,8(sp)
    2e4c:	00058413          	mv	s0,a1
    2e50:	00050493          	mv	s1,a0
    2e54:	04090263          	beqz	s2,2e98 <cleanup_glue+0x6c>
    2e58:	00092983          	lw	s3,0(s2)
    2e5c:	02098863          	beqz	s3,2e8c <cleanup_glue+0x60>
    2e60:	0009aa03          	lw	s4,0(s3)
    2e64:	000a0e63          	beqz	s4,2e80 <cleanup_glue+0x54>
    2e68:	000a2583          	lw	a1,0(s4)
    2e6c:	00058463          	beqz	a1,2e74 <cleanup_glue+0x48>
    2e70:	fbdff0ef          	jal	ra,2e2c <cleanup_glue>
    2e74:	000a0593          	mv	a1,s4
    2e78:	00048513          	mv	a0,s1
    2e7c:	445000ef          	jal	ra,3ac0 <_free_r>
    2e80:	00098593          	mv	a1,s3
    2e84:	00048513          	mv	a0,s1
    2e88:	439000ef          	jal	ra,3ac0 <_free_r>
    2e8c:	00090593          	mv	a1,s2
    2e90:	00048513          	mv	a0,s1
    2e94:	42d000ef          	jal	ra,3ac0 <_free_r>
    2e98:	00040593          	mv	a1,s0
    2e9c:	01812403          	lw	s0,24(sp)
    2ea0:	01c12083          	lw	ra,28(sp)
    2ea4:	01012903          	lw	s2,16(sp)
    2ea8:	00c12983          	lw	s3,12(sp)
    2eac:	00812a03          	lw	s4,8(sp)
    2eb0:	00048513          	mv	a0,s1
    2eb4:	01412483          	lw	s1,20(sp)
    2eb8:	02010113          	addi	sp,sp,32
    2ebc:	4050006f          	j	3ac0 <_free_r>

00002ec0 <_reclaim_reent>:
    2ec0:	8241a783          	lw	a5,-2012(gp) # 954c <_impure_ptr>
    2ec4:	10a78a63          	beq	a5,a0,2fd8 <_reclaim_reent+0x118>
    2ec8:	04c52583          	lw	a1,76(a0)
    2ecc:	fe010113          	addi	sp,sp,-32
    2ed0:	00912a23          	sw	s1,20(sp)
    2ed4:	00112e23          	sw	ra,28(sp)
    2ed8:	00812c23          	sw	s0,24(sp)
    2edc:	01212823          	sw	s2,16(sp)
    2ee0:	01312623          	sw	s3,12(sp)
    2ee4:	00050493          	mv	s1,a0
    2ee8:	04058063          	beqz	a1,2f28 <_reclaim_reent+0x68>
    2eec:	00000913          	li	s2,0
    2ef0:	08000993          	li	s3,128
    2ef4:	012587b3          	add	a5,a1,s2
    2ef8:	0007a403          	lw	s0,0(a5)
    2efc:	00040e63          	beqz	s0,2f18 <_reclaim_reent+0x58>
    2f00:	00040593          	mv	a1,s0
    2f04:	00042403          	lw	s0,0(s0)
    2f08:	00048513          	mv	a0,s1
    2f0c:	3b5000ef          	jal	ra,3ac0 <_free_r>
    2f10:	fe0418e3          	bnez	s0,2f00 <_reclaim_reent+0x40>
    2f14:	04c4a583          	lw	a1,76(s1)
    2f18:	00490913          	addi	s2,s2,4
    2f1c:	fd391ce3          	bne	s2,s3,2ef4 <_reclaim_reent+0x34>
    2f20:	00048513          	mv	a0,s1
    2f24:	39d000ef          	jal	ra,3ac0 <_free_r>
    2f28:	0404a583          	lw	a1,64(s1)
    2f2c:	00058663          	beqz	a1,2f38 <_reclaim_reent+0x78>
    2f30:	00048513          	mv	a0,s1
    2f34:	38d000ef          	jal	ra,3ac0 <_free_r>
    2f38:	1484a403          	lw	s0,328(s1)
    2f3c:	02040063          	beqz	s0,2f5c <_reclaim_reent+0x9c>
    2f40:	14c48913          	addi	s2,s1,332
    2f44:	01240c63          	beq	s0,s2,2f5c <_reclaim_reent+0x9c>
    2f48:	00040593          	mv	a1,s0
    2f4c:	00042403          	lw	s0,0(s0)
    2f50:	00048513          	mv	a0,s1
    2f54:	36d000ef          	jal	ra,3ac0 <_free_r>
    2f58:	fe8918e3          	bne	s2,s0,2f48 <_reclaim_reent+0x88>
    2f5c:	0544a583          	lw	a1,84(s1)
    2f60:	00058663          	beqz	a1,2f6c <_reclaim_reent+0xac>
    2f64:	00048513          	mv	a0,s1
    2f68:	359000ef          	jal	ra,3ac0 <_free_r>
    2f6c:	0384a783          	lw	a5,56(s1)
    2f70:	04078663          	beqz	a5,2fbc <_reclaim_reent+0xfc>
    2f74:	03c4a783          	lw	a5,60(s1)
    2f78:	00048513          	mv	a0,s1
    2f7c:	000780e7          	jalr	a5
    2f80:	2e04a403          	lw	s0,736(s1)
    2f84:	02040c63          	beqz	s0,2fbc <_reclaim_reent+0xfc>
    2f88:	00042583          	lw	a1,0(s0)
    2f8c:	00058663          	beqz	a1,2f98 <_reclaim_reent+0xd8>
    2f90:	00048513          	mv	a0,s1
    2f94:	e99ff0ef          	jal	ra,2e2c <cleanup_glue>
    2f98:	00040593          	mv	a1,s0
    2f9c:	01812403          	lw	s0,24(sp)
    2fa0:	01c12083          	lw	ra,28(sp)
    2fa4:	01012903          	lw	s2,16(sp)
    2fa8:	00c12983          	lw	s3,12(sp)
    2fac:	00048513          	mv	a0,s1
    2fb0:	01412483          	lw	s1,20(sp)
    2fb4:	02010113          	addi	sp,sp,32
    2fb8:	3090006f          	j	3ac0 <_free_r>
    2fbc:	01c12083          	lw	ra,28(sp)
    2fc0:	01812403          	lw	s0,24(sp)
    2fc4:	01412483          	lw	s1,20(sp)
    2fc8:	01012903          	lw	s2,16(sp)
    2fcc:	00c12983          	lw	s3,12(sp)
    2fd0:	02010113          	addi	sp,sp,32
    2fd4:	00008067          	ret
    2fd8:	00008067          	ret

00002fdc <__stack_chk_fail>:
    2fdc:	00005797          	auipc	a5,0x5
    2fe0:	97478793          	addi	a5,a5,-1676 # 7950 <__fini_array_end+0x32c>
    2fe4:	0007af83          	lw	t6,0(a5)
    2fe8:	0047af03          	lw	t5,4(a5)
    2fec:	0087ae83          	lw	t4,8(a5)
    2ff0:	00c7ae03          	lw	t3,12(a5)
    2ff4:	0107a303          	lw	t1,16(a5)
    2ff8:	0147a883          	lw	a7,20(a5)
    2ffc:	0187a803          	lw	a6,24(a5)
    3000:	0247a683          	lw	a3,36(a5)
    3004:	0287a703          	lw	a4,40(a5)
    3008:	01c7a583          	lw	a1,28(a5)
    300c:	0207a603          	lw	a2,32(a5)
    3010:	02c7c783          	lbu	a5,44(a5)
    3014:	fc010113          	addi	sp,sp,-64
    3018:	00010513          	mv	a0,sp
    301c:	02112e23          	sw	ra,60(sp)
    3020:	01f12023          	sw	t6,0(sp)
    3024:	01e12223          	sw	t5,4(sp)
    3028:	01d12423          	sw	t4,8(sp)
    302c:	01c12623          	sw	t3,12(sp)
    3030:	00612823          	sw	t1,16(sp)
    3034:	01112a23          	sw	a7,20(sp)
    3038:	01012c23          	sw	a6,24(sp)
    303c:	02d12223          	sw	a3,36(sp)
    3040:	02e12423          	sw	a4,40(sp)
    3044:	02f10623          	sb	a5,44(sp)
    3048:	00b12e23          	sw	a1,28(sp)
    304c:	02c12023          	sw	a2,32(sp)
    3050:	04c000ef          	jal	ra,309c <strlen>
    3054:	00050613          	mv	a2,a0
    3058:	00010593          	mv	a1,sp
    305c:	00200513          	li	a0,2
    3060:	11c000ef          	jal	ra,317c <write>
    3064:	00600513          	li	a0,6
    3068:	69c020ef          	jal	ra,5704 <raise>
    306c:	07f00513          	li	a0,127
    3070:	6bc030ef          	jal	ra,672c <_exit>

00003074 <__stack_chk_fail_local>:
    3074:	ff010113          	addi	sp,sp,-16
    3078:	00112623          	sw	ra,12(sp)
    307c:	f61ff0ef          	jal	ra,2fdc <__stack_chk_fail>

00003080 <__stack_chk_init>:
    3080:	00008797          	auipc	a5,0x8
    3084:	03c78793          	addi	a5,a5,60 # b0bc <__stack_chk_guard>
    3088:	0007a703          	lw	a4,0(a5)
    308c:	00071663          	bnez	a4,3098 <__stack_chk_init+0x18>
    3090:	ff0a0737          	lui	a4,0xff0a0
    3094:	00e7a023          	sw	a4,0(a5)
    3098:	00008067          	ret

0000309c <strlen>:
    309c:	00357793          	andi	a5,a0,3
    30a0:	00050713          	mv	a4,a0
    30a4:	04079c63          	bnez	a5,30fc <strlen+0x60>
    30a8:	7f7f86b7          	lui	a3,0x7f7f8
    30ac:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7e7f7f>
    30b0:	fff00593          	li	a1,-1
    30b4:	00072603          	lw	a2,0(a4) # ff0a0000 <__alt_data_end+0xff090000>
    30b8:	00470713          	addi	a4,a4,4
    30bc:	00d677b3          	and	a5,a2,a3
    30c0:	00d787b3          	add	a5,a5,a3
    30c4:	00c7e7b3          	or	a5,a5,a2
    30c8:	00d7e7b3          	or	a5,a5,a3
    30cc:	feb784e3          	beq	a5,a1,30b4 <strlen+0x18>
    30d0:	ffc74683          	lbu	a3,-4(a4)
    30d4:	40a707b3          	sub	a5,a4,a0
    30d8:	04068463          	beqz	a3,3120 <strlen+0x84>
    30dc:	ffd74683          	lbu	a3,-3(a4)
    30e0:	02068c63          	beqz	a3,3118 <strlen+0x7c>
    30e4:	ffe74503          	lbu	a0,-2(a4)
    30e8:	00a03533          	snez	a0,a0
    30ec:	00f50533          	add	a0,a0,a5
    30f0:	ffe50513          	addi	a0,a0,-2
    30f4:	00008067          	ret
    30f8:	fa0688e3          	beqz	a3,30a8 <strlen+0xc>
    30fc:	00074783          	lbu	a5,0(a4)
    3100:	00170713          	addi	a4,a4,1
    3104:	00377693          	andi	a3,a4,3
    3108:	fe0798e3          	bnez	a5,30f8 <strlen+0x5c>
    310c:	40a70733          	sub	a4,a4,a0
    3110:	fff70513          	addi	a0,a4,-1
    3114:	00008067          	ret
    3118:	ffd78513          	addi	a0,a5,-3
    311c:	00008067          	ret
    3120:	ffc78513          	addi	a0,a5,-4
    3124:	00008067          	ret

00003128 <close>:
    3128:	00050593          	mv	a1,a0
    312c:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    3130:	3000006f          	j	3430 <_close_r>

00003134 <open>:
    3134:	fc010113          	addi	sp,sp,-64
    3138:	02c12423          	sw	a2,40(sp)
    313c:	02d12623          	sw	a3,44(sp)
    3140:	02f12a23          	sw	a5,52(sp)
    3144:	00060693          	mv	a3,a2
    3148:	02810793          	addi	a5,sp,40
    314c:	00058613          	mv	a2,a1
    3150:	00050593          	mv	a1,a0
    3154:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    3158:	00112e23          	sw	ra,28(sp)
    315c:	02e12823          	sw	a4,48(sp)
    3160:	03012c23          	sw	a6,56(sp)
    3164:	03112e23          	sw	a7,60(sp)
    3168:	00f12623          	sw	a5,12(sp)
    316c:	4f5010ef          	jal	ra,4e60 <_open_r>
    3170:	01c12083          	lw	ra,28(sp)
    3174:	04010113          	addi	sp,sp,64
    3178:	00008067          	ret

0000317c <write>:
    317c:	00060693          	mv	a3,a2
    3180:	00058613          	mv	a2,a1
    3184:	00050593          	mv	a1,a0
    3188:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    318c:	0040006f          	j	3190 <_write_r>

00003190 <_write_r>:
    3190:	ff010113          	addi	sp,sp,-16
    3194:	00058713          	mv	a4,a1
    3198:	00812423          	sw	s0,8(sp)
    319c:	00060593          	mv	a1,a2
    31a0:	00050413          	mv	s0,a0
    31a4:	00068613          	mv	a2,a3
    31a8:	00070513          	mv	a0,a4
    31ac:	00008797          	auipc	a5,0x8
    31b0:	f007a623          	sw	zero,-244(a5) # b0b8 <errno>
    31b4:	00112623          	sw	ra,12(sp)
    31b8:	020040ef          	jal	ra,71d8 <_write>
    31bc:	fff00793          	li	a5,-1
    31c0:	00f50a63          	beq	a0,a5,31d4 <_write_r+0x44>
    31c4:	00c12083          	lw	ra,12(sp)
    31c8:	00812403          	lw	s0,8(sp)
    31cc:	01010113          	addi	sp,sp,16
    31d0:	00008067          	ret
    31d4:	00008797          	auipc	a5,0x8
    31d8:	ee47a783          	lw	a5,-284(a5) # b0b8 <errno>
    31dc:	fe0784e3          	beqz	a5,31c4 <_write_r+0x34>
    31e0:	00c12083          	lw	ra,12(sp)
    31e4:	00f42023          	sw	a5,0(s0)
    31e8:	00812403          	lw	s0,8(sp)
    31ec:	01010113          	addi	sp,sp,16
    31f0:	00008067          	ret

000031f4 <__register_exitproc>:
    31f4:	fe010113          	addi	sp,sp,-32
    31f8:	01212823          	sw	s2,16(sp)
    31fc:	82818913          	addi	s2,gp,-2008 # 9550 <__atexit_recursive_mutex>
    3200:	00812c23          	sw	s0,24(sp)
    3204:	00050413          	mv	s0,a0
    3208:	00092503          	lw	a0,0(s2)
    320c:	00912a23          	sw	s1,20(sp)
    3210:	01312623          	sw	s3,12(sp)
    3214:	01412423          	sw	s4,8(sp)
    3218:	00112e23          	sw	ra,28(sp)
    321c:	00058493          	mv	s1,a1
    3220:	00060a13          	mv	s4,a2
    3224:	00068993          	mv	s3,a3
    3228:	1a8010ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    322c:	00005717          	auipc	a4,0x5
    3230:	82072703          	lw	a4,-2016(a4) # 7a4c <_global_impure_ptr>
    3234:	14872783          	lw	a5,328(a4)
    3238:	08078663          	beqz	a5,32c4 <__register_exitproc+0xd0>
    323c:	0047a703          	lw	a4,4(a5)
    3240:	01f00593          	li	a1,31
    3244:	00092503          	lw	a0,0(s2)
    3248:	08e5c463          	blt	a1,a4,32d0 <__register_exitproc+0xdc>
    324c:	00271593          	slli	a1,a4,0x2
    3250:	02041e63          	bnez	s0,328c <__register_exitproc+0x98>
    3254:	00170713          	addi	a4,a4,1
    3258:	00e7a223          	sw	a4,4(a5)
    325c:	00b787b3          	add	a5,a5,a1
    3260:	0097a423          	sw	s1,8(a5)
    3264:	184010ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    3268:	00000513          	li	a0,0
    326c:	01c12083          	lw	ra,28(sp)
    3270:	01812403          	lw	s0,24(sp)
    3274:	01412483          	lw	s1,20(sp)
    3278:	01012903          	lw	s2,16(sp)
    327c:	00c12983          	lw	s3,12(sp)
    3280:	00812a03          	lw	s4,8(sp)
    3284:	02010113          	addi	sp,sp,32
    3288:	00008067          	ret
    328c:	00b78833          	add	a6,a5,a1
    3290:	09482423          	sw	s4,136(a6)
    3294:	1887a683          	lw	a3,392(a5)
    3298:	00100613          	li	a2,1
    329c:	00e61633          	sll	a2,a2,a4
    32a0:	00c6e6b3          	or	a3,a3,a2
    32a4:	18d7a423          	sw	a3,392(a5)
    32a8:	11382423          	sw	s3,264(a6)
    32ac:	00200693          	li	a3,2
    32b0:	fad412e3          	bne	s0,a3,3254 <__register_exitproc+0x60>
    32b4:	18c7a683          	lw	a3,396(a5)
    32b8:	00c6e6b3          	or	a3,a3,a2
    32bc:	18d7a623          	sw	a3,396(a5)
    32c0:	f95ff06f          	j	3254 <__register_exitproc+0x60>
    32c4:	14c70793          	addi	a5,a4,332
    32c8:	14f72423          	sw	a5,328(a4)
    32cc:	f71ff06f          	j	323c <__register_exitproc+0x48>
    32d0:	118010ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    32d4:	fff00513          	li	a0,-1
    32d8:	f95ff06f          	j	326c <__register_exitproc+0x78>

000032dc <__call_exitprocs>:
    32dc:	fd010113          	addi	sp,sp,-48
    32e0:	01712623          	sw	s7,12(sp)
    32e4:	82818b93          	addi	s7,gp,-2008 # 9550 <__atexit_recursive_mutex>
    32e8:	01612823          	sw	s6,16(sp)
    32ec:	00050b13          	mv	s6,a0
    32f0:	000ba503          	lw	a0,0(s7)
    32f4:	03212023          	sw	s2,32(sp)
    32f8:	01312e23          	sw	s3,28(sp)
    32fc:	01412c23          	sw	s4,24(sp)
    3300:	01512a23          	sw	s5,20(sp)
    3304:	01812423          	sw	s8,8(sp)
    3308:	02112623          	sw	ra,44(sp)
    330c:	02812423          	sw	s0,40(sp)
    3310:	02912223          	sw	s1,36(sp)
    3314:	01912223          	sw	s9,4(sp)
    3318:	00058c13          	mv	s8,a1
    331c:	0b4010ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    3320:	00004a17          	auipc	s4,0x4
    3324:	72ca2a03          	lw	s4,1836(s4) # 7a4c <_global_impure_ptr>
    3328:	148a2903          	lw	s2,328(s4)
    332c:	00100a93          	li	s5,1
    3330:	fff00993          	li	s3,-1
    3334:	02090863          	beqz	s2,3364 <__call_exitprocs+0x88>
    3338:	00492483          	lw	s1,4(s2)
    333c:	fff48413          	addi	s0,s1,-1
    3340:	02044263          	bltz	s0,3364 <__call_exitprocs+0x88>
    3344:	00249493          	slli	s1,s1,0x2
    3348:	009904b3          	add	s1,s2,s1
    334c:	040c0863          	beqz	s8,339c <__call_exitprocs+0xc0>
    3350:	1044a783          	lw	a5,260(s1)
    3354:	05878463          	beq	a5,s8,339c <__call_exitprocs+0xc0>
    3358:	fff40413          	addi	s0,s0,-1
    335c:	ffc48493          	addi	s1,s1,-4
    3360:	ff3416e3          	bne	s0,s3,334c <__call_exitprocs+0x70>
    3364:	02812403          	lw	s0,40(sp)
    3368:	000ba503          	lw	a0,0(s7)
    336c:	02c12083          	lw	ra,44(sp)
    3370:	02412483          	lw	s1,36(sp)
    3374:	02012903          	lw	s2,32(sp)
    3378:	01c12983          	lw	s3,28(sp)
    337c:	01812a03          	lw	s4,24(sp)
    3380:	01412a83          	lw	s5,20(sp)
    3384:	01012b03          	lw	s6,16(sp)
    3388:	00c12b83          	lw	s7,12(sp)
    338c:	00812c03          	lw	s8,8(sp)
    3390:	00412c83          	lw	s9,4(sp)
    3394:	03010113          	addi	sp,sp,48
    3398:	0500106f          	j	43e8 <__retarget_lock_release_recursive>
    339c:	00492783          	lw	a5,4(s2)
    33a0:	0044a683          	lw	a3,4(s1)
    33a4:	fff78793          	addi	a5,a5,-1
    33a8:	04878e63          	beq	a5,s0,3404 <__call_exitprocs+0x128>
    33ac:	0004a223          	sw	zero,4(s1)
    33b0:	fa0684e3          	beqz	a3,3358 <__call_exitprocs+0x7c>
    33b4:	18892783          	lw	a5,392(s2)
    33b8:	008a9733          	sll	a4,s5,s0
    33bc:	00492c83          	lw	s9,4(s2)
    33c0:	00f777b3          	and	a5,a4,a5
    33c4:	02079263          	bnez	a5,33e8 <__call_exitprocs+0x10c>
    33c8:	000680e7          	jalr	a3
    33cc:	00492703          	lw	a4,4(s2)
    33d0:	148a2783          	lw	a5,328(s4)
    33d4:	01971463          	bne	a4,s9,33dc <__call_exitprocs+0x100>
    33d8:	f92780e3          	beq	a5,s2,3358 <__call_exitprocs+0x7c>
    33dc:	f80784e3          	beqz	a5,3364 <__call_exitprocs+0x88>
    33e0:	00078913          	mv	s2,a5
    33e4:	f55ff06f          	j	3338 <__call_exitprocs+0x5c>
    33e8:	18c92783          	lw	a5,396(s2)
    33ec:	0844a583          	lw	a1,132(s1)
    33f0:	00f77733          	and	a4,a4,a5
    33f4:	00071c63          	bnez	a4,340c <__call_exitprocs+0x130>
    33f8:	000b0513          	mv	a0,s6
    33fc:	000680e7          	jalr	a3
    3400:	fcdff06f          	j	33cc <__call_exitprocs+0xf0>
    3404:	00892223          	sw	s0,4(s2)
    3408:	fa9ff06f          	j	33b0 <__call_exitprocs+0xd4>
    340c:	00058513          	mv	a0,a1
    3410:	000680e7          	jalr	a3
    3414:	fb9ff06f          	j	33cc <__call_exitprocs+0xf0>

00003418 <register_fini>:
    3418:	00000793          	li	a5,0
    341c:	00078863          	beqz	a5,342c <register_fini+0x14>
    3420:	00000517          	auipc	a0,0x0
    3424:	50850513          	addi	a0,a0,1288 # 3928 <__libc_fini_array>
    3428:	ee0ff06f          	j	2b08 <atexit>
    342c:	00008067          	ret

00003430 <_close_r>:
    3430:	ff010113          	addi	sp,sp,-16
    3434:	00812423          	sw	s0,8(sp)
    3438:	00050413          	mv	s0,a0
    343c:	00058513          	mv	a0,a1
    3440:	00008797          	auipc	a5,0x8
    3444:	c607ac23          	sw	zero,-904(a5) # b0b8 <errno>
    3448:	00112623          	sw	ra,12(sp)
    344c:	200030ef          	jal	ra,664c <_close>
    3450:	fff00793          	li	a5,-1
    3454:	00f50a63          	beq	a0,a5,3468 <_close_r+0x38>
    3458:	00c12083          	lw	ra,12(sp)
    345c:	00812403          	lw	s0,8(sp)
    3460:	01010113          	addi	sp,sp,16
    3464:	00008067          	ret
    3468:	00008797          	auipc	a5,0x8
    346c:	c507a783          	lw	a5,-944(a5) # b0b8 <errno>
    3470:	fe0784e3          	beqz	a5,3458 <_close_r+0x28>
    3474:	00c12083          	lw	ra,12(sp)
    3478:	00f42023          	sw	a5,0(s0)
    347c:	00812403          	lw	s0,8(sp)
    3480:	01010113          	addi	sp,sp,16
    3484:	00008067          	ret

00003488 <_cleanup_r>:
    3488:	00003597          	auipc	a1,0x3
    348c:	81858593          	addi	a1,a1,-2024 # 5ca0 <_fclose_r>
    3490:	6790006f          	j	4308 <_fwalk_reent>

00003494 <__fp_lock>:
    3494:	06452783          	lw	a5,100(a0)
    3498:	0017f793          	andi	a5,a5,1
    349c:	00079863          	bnez	a5,34ac <__fp_lock+0x18>
    34a0:	00c55783          	lhu	a5,12(a0)
    34a4:	2007f793          	andi	a5,a5,512
    34a8:	00078663          	beqz	a5,34b4 <__fp_lock+0x20>
    34ac:	00000513          	li	a0,0
    34b0:	00008067          	ret
    34b4:	05852503          	lw	a0,88(a0)
    34b8:	ff010113          	addi	sp,sp,-16
    34bc:	00112623          	sw	ra,12(sp)
    34c0:	711000ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    34c4:	00c12083          	lw	ra,12(sp)
    34c8:	00000513          	li	a0,0
    34cc:	01010113          	addi	sp,sp,16
    34d0:	00008067          	ret

000034d4 <__fp_unlock>:
    34d4:	06452783          	lw	a5,100(a0)
    34d8:	0017f793          	andi	a5,a5,1
    34dc:	00079863          	bnez	a5,34ec <__fp_unlock+0x18>
    34e0:	00c55783          	lhu	a5,12(a0)
    34e4:	2007f793          	andi	a5,a5,512
    34e8:	00078663          	beqz	a5,34f4 <__fp_unlock+0x20>
    34ec:	00000513          	li	a0,0
    34f0:	00008067          	ret
    34f4:	05852503          	lw	a0,88(a0)
    34f8:	ff010113          	addi	sp,sp,-16
    34fc:	00112623          	sw	ra,12(sp)
    3500:	6e9000ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    3504:	00c12083          	lw	ra,12(sp)
    3508:	00000513          	li	a0,0
    350c:	01010113          	addi	sp,sp,16
    3510:	00008067          	ret

00003514 <__sfmoreglue>:
    3514:	ff010113          	addi	sp,sp,-16
    3518:	00912223          	sw	s1,4(sp)
    351c:	06800793          	li	a5,104
    3520:	fff58493          	addi	s1,a1,-1
    3524:	02f484b3          	mul	s1,s1,a5
    3528:	01212023          	sw	s2,0(sp)
    352c:	00058913          	mv	s2,a1
    3530:	00812423          	sw	s0,8(sp)
    3534:	00112623          	sw	ra,12(sp)
    3538:	07448593          	addi	a1,s1,116
    353c:	6b1000ef          	jal	ra,43ec <_malloc_r>
    3540:	00050413          	mv	s0,a0
    3544:	02050063          	beqz	a0,3564 <__sfmoreglue+0x50>
    3548:	00c50513          	addi	a0,a0,12
    354c:	00042023          	sw	zero,0(s0)
    3550:	01242223          	sw	s2,4(s0)
    3554:	00a42423          	sw	a0,8(s0)
    3558:	06848613          	addi	a2,s1,104
    355c:	00000593          	li	a1,0
    3560:	00d010ef          	jal	ra,4d6c <memset>
    3564:	00c12083          	lw	ra,12(sp)
    3568:	00040513          	mv	a0,s0
    356c:	00812403          	lw	s0,8(sp)
    3570:	00412483          	lw	s1,4(sp)
    3574:	00012903          	lw	s2,0(sp)
    3578:	01010113          	addi	sp,sp,16
    357c:	00008067          	ret

00003580 <_cleanup>:
    3580:	00002597          	auipc	a1,0x2
    3584:	72058593          	addi	a1,a1,1824 # 5ca0 <_fclose_r>
    3588:	00004517          	auipc	a0,0x4
    358c:	4c452503          	lw	a0,1220(a0) # 7a4c <_global_impure_ptr>
    3590:	5790006f          	j	4308 <_fwalk_reent>

00003594 <__sinit>:
    3594:	fe010113          	addi	sp,sp,-32
    3598:	00912a23          	sw	s1,20(sp)
    359c:	00050493          	mv	s1,a0
    35a0:	00008517          	auipc	a0,0x8
    35a4:	b4050513          	addi	a0,a0,-1216 # b0e0 <__lock___sinit_recursive_mutex>
    35a8:	00112e23          	sw	ra,28(sp)
    35ac:	00812c23          	sw	s0,24(sp)
    35b0:	01212823          	sw	s2,16(sp)
    35b4:	01312623          	sw	s3,12(sp)
    35b8:	01412423          	sw	s4,8(sp)
    35bc:	01512223          	sw	s5,4(sp)
    35c0:	611000ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    35c4:	0384a783          	lw	a5,56(s1)
    35c8:	14079863          	bnez	a5,3718 <__sinit+0x184>
    35cc:	0044a403          	lw	s0,4(s1)
    35d0:	00000717          	auipc	a4,0x0
    35d4:	eb870713          	addi	a4,a4,-328 # 3488 <_cleanup_r>
    35d8:	02e4ae23          	sw	a4,60(s1)
    35dc:	2ec48793          	addi	a5,s1,748
    35e0:	00300713          	li	a4,3
    35e4:	2ee4a223          	sw	a4,740(s1)
    35e8:	2ef4a423          	sw	a5,744(s1)
    35ec:	2e04a023          	sw	zero,736(s1)
    35f0:	00400793          	li	a5,4
    35f4:	00f42623          	sw	a5,12(s0)
    35f8:	00800613          	li	a2,8
    35fc:	00000593          	li	a1,0
    3600:	00042023          	sw	zero,0(s0)
    3604:	00042223          	sw	zero,4(s0)
    3608:	00042423          	sw	zero,8(s0)
    360c:	06042223          	sw	zero,100(s0)
    3610:	00042823          	sw	zero,16(s0)
    3614:	00042a23          	sw	zero,20(s0)
    3618:	00042c23          	sw	zero,24(s0)
    361c:	05c40513          	addi	a0,s0,92
    3620:	74c010ef          	jal	ra,4d6c <memset>
    3624:	00002a97          	auipc	s5,0x2
    3628:	3d0a8a93          	addi	s5,s5,976 # 59f4 <__sread>
    362c:	00002a17          	auipc	s4,0x2
    3630:	42ca0a13          	addi	s4,s4,1068 # 5a58 <__swrite>
    3634:	00002997          	auipc	s3,0x2
    3638:	4ac98993          	addi	s3,s3,1196 # 5ae0 <__sseek>
    363c:	00002917          	auipc	s2,0x2
    3640:	51c90913          	addi	s2,s2,1308 # 5b58 <__sclose>
    3644:	05840513          	addi	a0,s0,88
    3648:	00842e23          	sw	s0,28(s0)
    364c:	03542023          	sw	s5,32(s0)
    3650:	03442223          	sw	s4,36(s0)
    3654:	03342423          	sw	s3,40(s0)
    3658:	03242623          	sw	s2,44(s0)
    365c:	565000ef          	jal	ra,43c0 <__retarget_lock_init_recursive>
    3660:	0084a403          	lw	s0,8(s1)
    3664:	000107b7          	lui	a5,0x10
    3668:	00878793          	addi	a5,a5,8 # 10008 <__alt_data_end+0x8>
    366c:	00f42623          	sw	a5,12(s0)
    3670:	00800613          	li	a2,8
    3674:	00000593          	li	a1,0
    3678:	00042023          	sw	zero,0(s0)
    367c:	00042223          	sw	zero,4(s0)
    3680:	00042423          	sw	zero,8(s0)
    3684:	06042223          	sw	zero,100(s0)
    3688:	00042823          	sw	zero,16(s0)
    368c:	00042a23          	sw	zero,20(s0)
    3690:	00042c23          	sw	zero,24(s0)
    3694:	05c40513          	addi	a0,s0,92
    3698:	6d4010ef          	jal	ra,4d6c <memset>
    369c:	05840513          	addi	a0,s0,88
    36a0:	00842e23          	sw	s0,28(s0)
    36a4:	03542023          	sw	s5,32(s0)
    36a8:	03442223          	sw	s4,36(s0)
    36ac:	03342423          	sw	s3,40(s0)
    36b0:	03242623          	sw	s2,44(s0)
    36b4:	50d000ef          	jal	ra,43c0 <__retarget_lock_init_recursive>
    36b8:	00c4a403          	lw	s0,12(s1)
    36bc:	000207b7          	lui	a5,0x20
    36c0:	01278793          	addi	a5,a5,18 # 20012 <__alt_data_end+0x10012>
    36c4:	00f42623          	sw	a5,12(s0)
    36c8:	00800613          	li	a2,8
    36cc:	00000593          	li	a1,0
    36d0:	00042023          	sw	zero,0(s0)
    36d4:	00042223          	sw	zero,4(s0)
    36d8:	00042423          	sw	zero,8(s0)
    36dc:	06042223          	sw	zero,100(s0)
    36e0:	00042823          	sw	zero,16(s0)
    36e4:	00042a23          	sw	zero,20(s0)
    36e8:	00042c23          	sw	zero,24(s0)
    36ec:	05c40513          	addi	a0,s0,92
    36f0:	67c010ef          	jal	ra,4d6c <memset>
    36f4:	05840513          	addi	a0,s0,88
    36f8:	00842e23          	sw	s0,28(s0)
    36fc:	03542023          	sw	s5,32(s0)
    3700:	03442223          	sw	s4,36(s0)
    3704:	03342423          	sw	s3,40(s0)
    3708:	03242623          	sw	s2,44(s0)
    370c:	4b5000ef          	jal	ra,43c0 <__retarget_lock_init_recursive>
    3710:	00100793          	li	a5,1
    3714:	02f4ac23          	sw	a5,56(s1)
    3718:	01812403          	lw	s0,24(sp)
    371c:	01c12083          	lw	ra,28(sp)
    3720:	01412483          	lw	s1,20(sp)
    3724:	01012903          	lw	s2,16(sp)
    3728:	00c12983          	lw	s3,12(sp)
    372c:	00812a03          	lw	s4,8(sp)
    3730:	00412a83          	lw	s5,4(sp)
    3734:	00008517          	auipc	a0,0x8
    3738:	9ac50513          	addi	a0,a0,-1620 # b0e0 <__lock___sinit_recursive_mutex>
    373c:	02010113          	addi	sp,sp,32
    3740:	4a90006f          	j	43e8 <__retarget_lock_release_recursive>

00003744 <__sfp>:
    3744:	fe010113          	addi	sp,sp,-32
    3748:	01312623          	sw	s3,12(sp)
    374c:	00050993          	mv	s3,a0
    3750:	00008517          	auipc	a0,0x8
    3754:	98c50513          	addi	a0,a0,-1652 # b0dc <__lock___sfp_recursive_mutex>
    3758:	01212823          	sw	s2,16(sp)
    375c:	00112e23          	sw	ra,28(sp)
    3760:	00812c23          	sw	s0,24(sp)
    3764:	00912a23          	sw	s1,20(sp)
    3768:	469000ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    376c:	00004917          	auipc	s2,0x4
    3770:	2e092903          	lw	s2,736(s2) # 7a4c <_global_impure_ptr>
    3774:	03892783          	lw	a5,56(s2)
    3778:	0c078063          	beqz	a5,3838 <__sfp+0xf4>
    377c:	2e090913          	addi	s2,s2,736
    3780:	fff00493          	li	s1,-1
    3784:	00492783          	lw	a5,4(s2)
    3788:	00892403          	lw	s0,8(s2)
    378c:	fff78793          	addi	a5,a5,-1
    3790:	0007d863          	bgez	a5,37a0 <__sfp+0x5c>
    3794:	0940006f          	j	3828 <__sfp+0xe4>
    3798:	06840413          	addi	s0,s0,104
    379c:	08978663          	beq	a5,s1,3828 <__sfp+0xe4>
    37a0:	00c41703          	lh	a4,12(s0)
    37a4:	fff78793          	addi	a5,a5,-1
    37a8:	fe0718e3          	bnez	a4,3798 <__sfp+0x54>
    37ac:	ffff07b7          	lui	a5,0xffff0
    37b0:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfffe0001>
    37b4:	00f42623          	sw	a5,12(s0)
    37b8:	05840513          	addi	a0,s0,88
    37bc:	06042223          	sw	zero,100(s0)
    37c0:	401000ef          	jal	ra,43c0 <__retarget_lock_init_recursive>
    37c4:	00008517          	auipc	a0,0x8
    37c8:	91850513          	addi	a0,a0,-1768 # b0dc <__lock___sfp_recursive_mutex>
    37cc:	41d000ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    37d0:	00800613          	li	a2,8
    37d4:	00042023          	sw	zero,0(s0)
    37d8:	00042423          	sw	zero,8(s0)
    37dc:	00042223          	sw	zero,4(s0)
    37e0:	00042823          	sw	zero,16(s0)
    37e4:	00042a23          	sw	zero,20(s0)
    37e8:	00042c23          	sw	zero,24(s0)
    37ec:	00000593          	li	a1,0
    37f0:	05c40513          	addi	a0,s0,92
    37f4:	578010ef          	jal	ra,4d6c <memset>
    37f8:	02042823          	sw	zero,48(s0)
    37fc:	02042a23          	sw	zero,52(s0)
    3800:	04042223          	sw	zero,68(s0)
    3804:	04042423          	sw	zero,72(s0)
    3808:	01c12083          	lw	ra,28(sp)
    380c:	00040513          	mv	a0,s0
    3810:	01812403          	lw	s0,24(sp)
    3814:	01412483          	lw	s1,20(sp)
    3818:	01012903          	lw	s2,16(sp)
    381c:	00c12983          	lw	s3,12(sp)
    3820:	02010113          	addi	sp,sp,32
    3824:	00008067          	ret
    3828:	00092403          	lw	s0,0(s2)
    382c:	00040c63          	beqz	s0,3844 <__sfp+0x100>
    3830:	00040913          	mv	s2,s0
    3834:	f51ff06f          	j	3784 <__sfp+0x40>
    3838:	00090513          	mv	a0,s2
    383c:	d59ff0ef          	jal	ra,3594 <__sinit>
    3840:	f3dff06f          	j	377c <__sfp+0x38>
    3844:	1ac00593          	li	a1,428
    3848:	00098513          	mv	a0,s3
    384c:	3a1000ef          	jal	ra,43ec <_malloc_r>
    3850:	00050413          	mv	s0,a0
    3854:	02050863          	beqz	a0,3884 <__sfp+0x140>
    3858:	00c50513          	addi	a0,a0,12
    385c:	00400793          	li	a5,4
    3860:	00042023          	sw	zero,0(s0)
    3864:	00f42223          	sw	a5,4(s0)
    3868:	00a42423          	sw	a0,8(s0)
    386c:	1a000613          	li	a2,416
    3870:	00000593          	li	a1,0
    3874:	4f8010ef          	jal	ra,4d6c <memset>
    3878:	00892023          	sw	s0,0(s2)
    387c:	00040913          	mv	s2,s0
    3880:	f05ff06f          	j	3784 <__sfp+0x40>
    3884:	00092023          	sw	zero,0(s2)
    3888:	00008517          	auipc	a0,0x8
    388c:	85450513          	addi	a0,a0,-1964 # b0dc <__lock___sfp_recursive_mutex>
    3890:	359000ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    3894:	00c00793          	li	a5,12
    3898:	00f9a023          	sw	a5,0(s3)
    389c:	f6dff06f          	j	3808 <__sfp+0xc4>

000038a0 <__sfp_lock_acquire>:
    38a0:	00008517          	auipc	a0,0x8
    38a4:	83c50513          	addi	a0,a0,-1988 # b0dc <__lock___sfp_recursive_mutex>
    38a8:	3290006f          	j	43d0 <__retarget_lock_acquire_recursive>

000038ac <__sfp_lock_release>:
    38ac:	00008517          	auipc	a0,0x8
    38b0:	83050513          	addi	a0,a0,-2000 # b0dc <__lock___sfp_recursive_mutex>
    38b4:	3350006f          	j	43e8 <__retarget_lock_release_recursive>

000038b8 <__sinit_lock_acquire>:
    38b8:	00008517          	auipc	a0,0x8
    38bc:	82850513          	addi	a0,a0,-2008 # b0e0 <__lock___sinit_recursive_mutex>
    38c0:	3110006f          	j	43d0 <__retarget_lock_acquire_recursive>

000038c4 <__sinit_lock_release>:
    38c4:	00008517          	auipc	a0,0x8
    38c8:	81c50513          	addi	a0,a0,-2020 # b0e0 <__lock___sinit_recursive_mutex>
    38cc:	31d0006f          	j	43e8 <__retarget_lock_release_recursive>

000038d0 <__fp_lock_all>:
    38d0:	ff010113          	addi	sp,sp,-16
    38d4:	00008517          	auipc	a0,0x8
    38d8:	80850513          	addi	a0,a0,-2040 # b0dc <__lock___sfp_recursive_mutex>
    38dc:	00112623          	sw	ra,12(sp)
    38e0:	2f1000ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    38e4:	00c12083          	lw	ra,12(sp)
    38e8:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    38ec:	00000597          	auipc	a1,0x0
    38f0:	ba858593          	addi	a1,a1,-1112 # 3494 <__fp_lock>
    38f4:	01010113          	addi	sp,sp,16
    38f8:	16d0006f          	j	4264 <_fwalk>

000038fc <__fp_unlock_all>:
    38fc:	ff010113          	addi	sp,sp,-16
    3900:	00000597          	auipc	a1,0x0
    3904:	bd458593          	addi	a1,a1,-1068 # 34d4 <__fp_unlock>
    3908:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    390c:	00112623          	sw	ra,12(sp)
    3910:	155000ef          	jal	ra,4264 <_fwalk>
    3914:	00c12083          	lw	ra,12(sp)
    3918:	00007517          	auipc	a0,0x7
    391c:	7c450513          	addi	a0,a0,1988 # b0dc <__lock___sfp_recursive_mutex>
    3920:	01010113          	addi	sp,sp,16
    3924:	2c50006f          	j	43e8 <__retarget_lock_release_recursive>

00003928 <__libc_fini_array>:
    3928:	ff010113          	addi	sp,sp,-16
    392c:	00812423          	sw	s0,8(sp)
    3930:	00004797          	auipc	a5,0x4
    3934:	cf478793          	addi	a5,a5,-780 # 7624 <__fini_array_end>
    3938:	00004417          	auipc	s0,0x4
    393c:	cec40413          	addi	s0,s0,-788 # 7624 <__fini_array_end>
    3940:	40f40433          	sub	s0,s0,a5
    3944:	00912223          	sw	s1,4(sp)
    3948:	00112623          	sw	ra,12(sp)
    394c:	40245493          	srai	s1,s0,0x2
    3950:	02048063          	beqz	s1,3970 <__libc_fini_array+0x48>
    3954:	ffc40413          	addi	s0,s0,-4
    3958:	00f40433          	add	s0,s0,a5
    395c:	00042783          	lw	a5,0(s0)
    3960:	fff48493          	addi	s1,s1,-1
    3964:	ffc40413          	addi	s0,s0,-4
    3968:	000780e7          	jalr	a5
    396c:	fe0498e3          	bnez	s1,395c <__libc_fini_array+0x34>
    3970:	00c12083          	lw	ra,12(sp)
    3974:	00812403          	lw	s0,8(sp)
    3978:	00412483          	lw	s1,4(sp)
    397c:	01010113          	addi	sp,sp,16
    3980:	00008067          	ret

00003984 <_malloc_trim_r>:
    3984:	fe010113          	addi	sp,sp,-32
    3988:	00812c23          	sw	s0,24(sp)
    398c:	00912a23          	sw	s1,20(sp)
    3990:	01212823          	sw	s2,16(sp)
    3994:	01312623          	sw	s3,12(sp)
    3998:	01412423          	sw	s4,8(sp)
    399c:	00058993          	mv	s3,a1
    39a0:	00112e23          	sw	ra,28(sp)
    39a4:	00005a17          	auipc	s4,0x5
    39a8:	77ca0a13          	addi	s4,s4,1916 # 9120 <__malloc_av_>
    39ac:	00050913          	mv	s2,a0
    39b0:	498010ef          	jal	ra,4e48 <__malloc_lock>
    39b4:	008a2703          	lw	a4,8(s4)
    39b8:	000017b7          	lui	a5,0x1
    39bc:	fef78413          	addi	s0,a5,-17 # fef <alt_main+0x37>
    39c0:	00472483          	lw	s1,4(a4)
    39c4:	ffc4f493          	andi	s1,s1,-4
    39c8:	00848433          	add	s0,s1,s0
    39cc:	41340433          	sub	s0,s0,s3
    39d0:	00c45413          	srli	s0,s0,0xc
    39d4:	fff40413          	addi	s0,s0,-1
    39d8:	00c41413          	slli	s0,s0,0xc
    39dc:	00f44e63          	blt	s0,a5,39f8 <_malloc_trim_r+0x74>
    39e0:	00000593          	li	a1,0
    39e4:	00090513          	mv	a0,s2
    39e8:	235010ef          	jal	ra,541c <_sbrk_r>
    39ec:	008a2783          	lw	a5,8(s4)
    39f0:	009787b3          	add	a5,a5,s1
    39f4:	02f50863          	beq	a0,a5,3a24 <_malloc_trim_r+0xa0>
    39f8:	00090513          	mv	a0,s2
    39fc:	458010ef          	jal	ra,4e54 <__malloc_unlock>
    3a00:	01c12083          	lw	ra,28(sp)
    3a04:	01812403          	lw	s0,24(sp)
    3a08:	01412483          	lw	s1,20(sp)
    3a0c:	01012903          	lw	s2,16(sp)
    3a10:	00c12983          	lw	s3,12(sp)
    3a14:	00812a03          	lw	s4,8(sp)
    3a18:	00000513          	li	a0,0
    3a1c:	02010113          	addi	sp,sp,32
    3a20:	00008067          	ret
    3a24:	408005b3          	neg	a1,s0
    3a28:	00090513          	mv	a0,s2
    3a2c:	1f1010ef          	jal	ra,541c <_sbrk_r>
    3a30:	fff00793          	li	a5,-1
    3a34:	04f50a63          	beq	a0,a5,3a88 <_malloc_trim_r+0x104>
    3a38:	00007717          	auipc	a4,0x7
    3a3c:	76870713          	addi	a4,a4,1896 # b1a0 <__malloc_current_mallinfo>
    3a40:	00072783          	lw	a5,0(a4)
    3a44:	008a2683          	lw	a3,8(s4)
    3a48:	408484b3          	sub	s1,s1,s0
    3a4c:	0014e493          	ori	s1,s1,1
    3a50:	408787b3          	sub	a5,a5,s0
    3a54:	00090513          	mv	a0,s2
    3a58:	0096a223          	sw	s1,4(a3)
    3a5c:	00f72023          	sw	a5,0(a4)
    3a60:	3f4010ef          	jal	ra,4e54 <__malloc_unlock>
    3a64:	01c12083          	lw	ra,28(sp)
    3a68:	01812403          	lw	s0,24(sp)
    3a6c:	01412483          	lw	s1,20(sp)
    3a70:	01012903          	lw	s2,16(sp)
    3a74:	00c12983          	lw	s3,12(sp)
    3a78:	00812a03          	lw	s4,8(sp)
    3a7c:	00100513          	li	a0,1
    3a80:	02010113          	addi	sp,sp,32
    3a84:	00008067          	ret
    3a88:	00000593          	li	a1,0
    3a8c:	00090513          	mv	a0,s2
    3a90:	18d010ef          	jal	ra,541c <_sbrk_r>
    3a94:	008a2703          	lw	a4,8(s4)
    3a98:	00f00693          	li	a3,15
    3a9c:	40e507b3          	sub	a5,a0,a4
    3aa0:	f4f6dce3          	bge	a3,a5,39f8 <_malloc_trim_r+0x74>
    3aa4:	82c1a683          	lw	a3,-2004(gp) # 9554 <__malloc_sbrk_base>
    3aa8:	40d50533          	sub	a0,a0,a3
    3aac:	0017e793          	ori	a5,a5,1
    3ab0:	00007697          	auipc	a3,0x7
    3ab4:	6ea6a823          	sw	a0,1776(a3) # b1a0 <__malloc_current_mallinfo>
    3ab8:	00f72223          	sw	a5,4(a4)
    3abc:	f3dff06f          	j	39f8 <_malloc_trim_r+0x74>

00003ac0 <_free_r>:
    3ac0:	18058263          	beqz	a1,3c44 <_free_r+0x184>
    3ac4:	ff010113          	addi	sp,sp,-16
    3ac8:	00812423          	sw	s0,8(sp)
    3acc:	00912223          	sw	s1,4(sp)
    3ad0:	00058413          	mv	s0,a1
    3ad4:	00050493          	mv	s1,a0
    3ad8:	00112623          	sw	ra,12(sp)
    3adc:	36c010ef          	jal	ra,4e48 <__malloc_lock>
    3ae0:	ffc42583          	lw	a1,-4(s0)
    3ae4:	ff840713          	addi	a4,s0,-8
    3ae8:	00005517          	auipc	a0,0x5
    3aec:	63850513          	addi	a0,a0,1592 # 9120 <__malloc_av_>
    3af0:	ffe5f793          	andi	a5,a1,-2
    3af4:	00f70633          	add	a2,a4,a5
    3af8:	00462683          	lw	a3,4(a2)
    3afc:	00852803          	lw	a6,8(a0)
    3b00:	ffc6f693          	andi	a3,a3,-4
    3b04:	1ac80263          	beq	a6,a2,3ca8 <_free_r+0x1e8>
    3b08:	00d62223          	sw	a3,4(a2)
    3b0c:	0015f593          	andi	a1,a1,1
    3b10:	00d60833          	add	a6,a2,a3
    3b14:	0a059063          	bnez	a1,3bb4 <_free_r+0xf4>
    3b18:	ff842303          	lw	t1,-8(s0)
    3b1c:	00482583          	lw	a1,4(a6)
    3b20:	00005897          	auipc	a7,0x5
    3b24:	60888893          	addi	a7,a7,1544 # 9128 <__malloc_av_+0x8>
    3b28:	40670733          	sub	a4,a4,t1
    3b2c:	00872803          	lw	a6,8(a4)
    3b30:	006787b3          	add	a5,a5,t1
    3b34:	0015f593          	andi	a1,a1,1
    3b38:	15180263          	beq	a6,a7,3c7c <_free_r+0x1bc>
    3b3c:	00c72303          	lw	t1,12(a4)
    3b40:	00682623          	sw	t1,12(a6)
    3b44:	01032423          	sw	a6,8(t1)
    3b48:	1a058863          	beqz	a1,3cf8 <_free_r+0x238>
    3b4c:	0017e693          	ori	a3,a5,1
    3b50:	00d72223          	sw	a3,4(a4)
    3b54:	00f62023          	sw	a5,0(a2)
    3b58:	1ff00693          	li	a3,511
    3b5c:	06f6ec63          	bltu	a3,a5,3bd4 <_free_r+0x114>
    3b60:	ff87f693          	andi	a3,a5,-8
    3b64:	00868693          	addi	a3,a3,8
    3b68:	00452583          	lw	a1,4(a0)
    3b6c:	00d506b3          	add	a3,a0,a3
    3b70:	0006a603          	lw	a2,0(a3)
    3b74:	0057d813          	srli	a6,a5,0x5
    3b78:	00100793          	li	a5,1
    3b7c:	010797b3          	sll	a5,a5,a6
    3b80:	00b7e7b3          	or	a5,a5,a1
    3b84:	ff868593          	addi	a1,a3,-8
    3b88:	00b72623          	sw	a1,12(a4)
    3b8c:	00c72423          	sw	a2,8(a4)
    3b90:	00f52223          	sw	a5,4(a0)
    3b94:	00e6a023          	sw	a4,0(a3)
    3b98:	00e62623          	sw	a4,12(a2)
    3b9c:	00812403          	lw	s0,8(sp)
    3ba0:	00c12083          	lw	ra,12(sp)
    3ba4:	00048513          	mv	a0,s1
    3ba8:	00412483          	lw	s1,4(sp)
    3bac:	01010113          	addi	sp,sp,16
    3bb0:	2a40106f          	j	4e54 <__malloc_unlock>
    3bb4:	00482583          	lw	a1,4(a6)
    3bb8:	0015f593          	andi	a1,a1,1
    3bbc:	08058663          	beqz	a1,3c48 <_free_r+0x188>
    3bc0:	0017e693          	ori	a3,a5,1
    3bc4:	fed42e23          	sw	a3,-4(s0)
    3bc8:	00f62023          	sw	a5,0(a2)
    3bcc:	1ff00693          	li	a3,511
    3bd0:	f8f6f8e3          	bgeu	a3,a5,3b60 <_free_r+0xa0>
    3bd4:	0097d693          	srli	a3,a5,0x9
    3bd8:	00400613          	li	a2,4
    3bdc:	12d66263          	bltu	a2,a3,3d00 <_free_r+0x240>
    3be0:	0067d693          	srli	a3,a5,0x6
    3be4:	03968593          	addi	a1,a3,57
    3be8:	03868613          	addi	a2,a3,56
    3bec:	00359593          	slli	a1,a1,0x3
    3bf0:	00b505b3          	add	a1,a0,a1
    3bf4:	0005a683          	lw	a3,0(a1)
    3bf8:	ff858593          	addi	a1,a1,-8
    3bfc:	00d59863          	bne	a1,a3,3c0c <_free_r+0x14c>
    3c00:	1580006f          	j	3d58 <_free_r+0x298>
    3c04:	0086a683          	lw	a3,8(a3)
    3c08:	00d58863          	beq	a1,a3,3c18 <_free_r+0x158>
    3c0c:	0046a603          	lw	a2,4(a3)
    3c10:	ffc67613          	andi	a2,a2,-4
    3c14:	fec7e8e3          	bltu	a5,a2,3c04 <_free_r+0x144>
    3c18:	00c6a583          	lw	a1,12(a3)
    3c1c:	00b72623          	sw	a1,12(a4)
    3c20:	00d72423          	sw	a3,8(a4)
    3c24:	00812403          	lw	s0,8(sp)
    3c28:	00c12083          	lw	ra,12(sp)
    3c2c:	00e5a423          	sw	a4,8(a1)
    3c30:	00048513          	mv	a0,s1
    3c34:	00412483          	lw	s1,4(sp)
    3c38:	00e6a623          	sw	a4,12(a3)
    3c3c:	01010113          	addi	sp,sp,16
    3c40:	2140106f          	j	4e54 <__malloc_unlock>
    3c44:	00008067          	ret
    3c48:	00d787b3          	add	a5,a5,a3
    3c4c:	00005897          	auipc	a7,0x5
    3c50:	4dc88893          	addi	a7,a7,1244 # 9128 <__malloc_av_+0x8>
    3c54:	00862683          	lw	a3,8(a2)
    3c58:	0d168e63          	beq	a3,a7,3d34 <_free_r+0x274>
    3c5c:	00c62803          	lw	a6,12(a2)
    3c60:	0017e593          	ori	a1,a5,1
    3c64:	00f70633          	add	a2,a4,a5
    3c68:	0106a623          	sw	a6,12(a3)
    3c6c:	00d82423          	sw	a3,8(a6)
    3c70:	00b72223          	sw	a1,4(a4)
    3c74:	00f62023          	sw	a5,0(a2)
    3c78:	ee1ff06f          	j	3b58 <_free_r+0x98>
    3c7c:	12059e63          	bnez	a1,3db8 <_free_r+0x2f8>
    3c80:	00862583          	lw	a1,8(a2)
    3c84:	00c62603          	lw	a2,12(a2)
    3c88:	00f686b3          	add	a3,a3,a5
    3c8c:	0016e793          	ori	a5,a3,1
    3c90:	00c5a623          	sw	a2,12(a1)
    3c94:	00b62423          	sw	a1,8(a2)
    3c98:	00f72223          	sw	a5,4(a4)
    3c9c:	00d70733          	add	a4,a4,a3
    3ca0:	00d72023          	sw	a3,0(a4)
    3ca4:	ef9ff06f          	j	3b9c <_free_r+0xdc>
    3ca8:	0015f593          	andi	a1,a1,1
    3cac:	00d786b3          	add	a3,a5,a3
    3cb0:	02059063          	bnez	a1,3cd0 <_free_r+0x210>
    3cb4:	ff842583          	lw	a1,-8(s0)
    3cb8:	40b70733          	sub	a4,a4,a1
    3cbc:	00c72783          	lw	a5,12(a4)
    3cc0:	00872603          	lw	a2,8(a4)
    3cc4:	00b686b3          	add	a3,a3,a1
    3cc8:	00f62623          	sw	a5,12(a2)
    3ccc:	00c7a423          	sw	a2,8(a5)
    3cd0:	0016e793          	ori	a5,a3,1
    3cd4:	00f72223          	sw	a5,4(a4)
    3cd8:	00e52423          	sw	a4,8(a0)
    3cdc:	8301a783          	lw	a5,-2000(gp) # 9558 <__malloc_trim_threshold>
    3ce0:	eaf6eee3          	bltu	a3,a5,3b9c <_free_r+0xdc>
    3ce4:	00007597          	auipc	a1,0x7
    3ce8:	4085a583          	lw	a1,1032(a1) # b0ec <__malloc_top_pad>
    3cec:	00048513          	mv	a0,s1
    3cf0:	c95ff0ef          	jal	ra,3984 <_malloc_trim_r>
    3cf4:	ea9ff06f          	j	3b9c <_free_r+0xdc>
    3cf8:	00d787b3          	add	a5,a5,a3
    3cfc:	f59ff06f          	j	3c54 <_free_r+0x194>
    3d00:	01400613          	li	a2,20
    3d04:	02d67063          	bgeu	a2,a3,3d24 <_free_r+0x264>
    3d08:	05400613          	li	a2,84
    3d0c:	06d66463          	bltu	a2,a3,3d74 <_free_r+0x2b4>
    3d10:	00c7d693          	srli	a3,a5,0xc
    3d14:	06f68593          	addi	a1,a3,111
    3d18:	06e68613          	addi	a2,a3,110
    3d1c:	00359593          	slli	a1,a1,0x3
    3d20:	ed1ff06f          	j	3bf0 <_free_r+0x130>
    3d24:	05c68593          	addi	a1,a3,92
    3d28:	05b68613          	addi	a2,a3,91
    3d2c:	00359593          	slli	a1,a1,0x3
    3d30:	ec1ff06f          	j	3bf0 <_free_r+0x130>
    3d34:	00e52a23          	sw	a4,20(a0)
    3d38:	00e52823          	sw	a4,16(a0)
    3d3c:	0017e693          	ori	a3,a5,1
    3d40:	01172623          	sw	a7,12(a4)
    3d44:	01172423          	sw	a7,8(a4)
    3d48:	00d72223          	sw	a3,4(a4)
    3d4c:	00f70733          	add	a4,a4,a5
    3d50:	00f72023          	sw	a5,0(a4)
    3d54:	e49ff06f          	j	3b9c <_free_r+0xdc>
    3d58:	00452803          	lw	a6,4(a0)
    3d5c:	40265613          	srai	a2,a2,0x2
    3d60:	00100793          	li	a5,1
    3d64:	00c797b3          	sll	a5,a5,a2
    3d68:	0107e7b3          	or	a5,a5,a6
    3d6c:	00f52223          	sw	a5,4(a0)
    3d70:	eadff06f          	j	3c1c <_free_r+0x15c>
    3d74:	15400613          	li	a2,340
    3d78:	00d66c63          	bltu	a2,a3,3d90 <_free_r+0x2d0>
    3d7c:	00f7d693          	srli	a3,a5,0xf
    3d80:	07868593          	addi	a1,a3,120
    3d84:	07768613          	addi	a2,a3,119
    3d88:	00359593          	slli	a1,a1,0x3
    3d8c:	e65ff06f          	j	3bf0 <_free_r+0x130>
    3d90:	55400613          	li	a2,1364
    3d94:	00d66c63          	bltu	a2,a3,3dac <_free_r+0x2ec>
    3d98:	0127d693          	srli	a3,a5,0x12
    3d9c:	07d68593          	addi	a1,a3,125
    3da0:	07c68613          	addi	a2,a3,124
    3da4:	00359593          	slli	a1,a1,0x3
    3da8:	e49ff06f          	j	3bf0 <_free_r+0x130>
    3dac:	3f800593          	li	a1,1016
    3db0:	07e00613          	li	a2,126
    3db4:	e3dff06f          	j	3bf0 <_free_r+0x130>
    3db8:	0017e693          	ori	a3,a5,1
    3dbc:	00d72223          	sw	a3,4(a4)
    3dc0:	00f62023          	sw	a5,0(a2)
    3dc4:	dd9ff06f          	j	3b9c <_free_r+0xdc>

00003dc8 <__sfvwrite_r>:
    3dc8:	00862783          	lw	a5,8(a2)
    3dcc:	30078a63          	beqz	a5,40e0 <__sfvwrite_r+0x318>
    3dd0:	00c59683          	lh	a3,12(a1)
    3dd4:	fd010113          	addi	sp,sp,-48
    3dd8:	02812423          	sw	s0,40(sp)
    3ddc:	01412c23          	sw	s4,24(sp)
    3de0:	01612823          	sw	s6,16(sp)
    3de4:	02112623          	sw	ra,44(sp)
    3de8:	02912223          	sw	s1,36(sp)
    3dec:	03212023          	sw	s2,32(sp)
    3df0:	01312e23          	sw	s3,28(sp)
    3df4:	01512a23          	sw	s5,20(sp)
    3df8:	01712623          	sw	s7,12(sp)
    3dfc:	01812423          	sw	s8,8(sp)
    3e00:	01912223          	sw	s9,4(sp)
    3e04:	0086f793          	andi	a5,a3,8
    3e08:	00060b13          	mv	s6,a2
    3e0c:	00050a13          	mv	s4,a0
    3e10:	00058413          	mv	s0,a1
    3e14:	08078663          	beqz	a5,3ea0 <__sfvwrite_r+0xd8>
    3e18:	0105a783          	lw	a5,16(a1)
    3e1c:	08078263          	beqz	a5,3ea0 <__sfvwrite_r+0xd8>
    3e20:	0026f793          	andi	a5,a3,2
    3e24:	000b2483          	lw	s1,0(s6)
    3e28:	08078c63          	beqz	a5,3ec0 <__sfvwrite_r+0xf8>
    3e2c:	02442783          	lw	a5,36(s0)
    3e30:	01c42583          	lw	a1,28(s0)
    3e34:	80000ab7          	lui	s5,0x80000
    3e38:	00000993          	li	s3,0
    3e3c:	00000913          	li	s2,0
    3e40:	c00aca93          	xori	s5,s5,-1024
    3e44:	00098613          	mv	a2,s3
    3e48:	000a0513          	mv	a0,s4
    3e4c:	04090263          	beqz	s2,3e90 <__sfvwrite_r+0xc8>
    3e50:	00090693          	mv	a3,s2
    3e54:	012af463          	bgeu	s5,s2,3e5c <__sfvwrite_r+0x94>
    3e58:	000a8693          	mv	a3,s5
    3e5c:	000780e7          	jalr	a5
    3e60:	26a05663          	blez	a0,40cc <__sfvwrite_r+0x304>
    3e64:	008b2783          	lw	a5,8(s6)
    3e68:	00a989b3          	add	s3,s3,a0
    3e6c:	40a90933          	sub	s2,s2,a0
    3e70:	40a787b3          	sub	a5,a5,a0
    3e74:	00fb2423          	sw	a5,8(s6)
    3e78:	20078663          	beqz	a5,4084 <__sfvwrite_r+0x2bc>
    3e7c:	02442783          	lw	a5,36(s0)
    3e80:	01c42583          	lw	a1,28(s0)
    3e84:	00098613          	mv	a2,s3
    3e88:	000a0513          	mv	a0,s4
    3e8c:	fc0912e3          	bnez	s2,3e50 <__sfvwrite_r+0x88>
    3e90:	0004a983          	lw	s3,0(s1)
    3e94:	0044a903          	lw	s2,4(s1)
    3e98:	00848493          	addi	s1,s1,8
    3e9c:	fa9ff06f          	j	3e44 <__sfvwrite_r+0x7c>
    3ea0:	00040593          	mv	a1,s0
    3ea4:	000a0513          	mv	a0,s4
    3ea8:	4b9010ef          	jal	ra,5b60 <__swsetup_r>
    3eac:	22051663          	bnez	a0,40d8 <__sfvwrite_r+0x310>
    3eb0:	00c41683          	lh	a3,12(s0)
    3eb4:	000b2483          	lw	s1,0(s6)
    3eb8:	0026f793          	andi	a5,a3,2
    3ebc:	f60798e3          	bnez	a5,3e2c <__sfvwrite_r+0x64>
    3ec0:	0016f793          	andi	a5,a3,1
    3ec4:	12079c63          	bnez	a5,3ffc <__sfvwrite_r+0x234>
    3ec8:	00042783          	lw	a5,0(s0)
    3ecc:	00842703          	lw	a4,8(s0)
    3ed0:	80000ab7          	lui	s5,0x80000
    3ed4:	00000b93          	li	s7,0
    3ed8:	00000993          	li	s3,0
    3edc:	fffaca93          	not	s5,s5
    3ee0:	00078513          	mv	a0,a5
    3ee4:	00070c13          	mv	s8,a4
    3ee8:	10098263          	beqz	s3,3fec <__sfvwrite_r+0x224>
    3eec:	2006f613          	andi	a2,a3,512
    3ef0:	24060c63          	beqz	a2,4148 <__sfvwrite_r+0x380>
    3ef4:	00070c93          	mv	s9,a4
    3ef8:	2ee9e463          	bltu	s3,a4,41e0 <__sfvwrite_r+0x418>
    3efc:	4806f713          	andi	a4,a3,1152
    3f00:	08070a63          	beqz	a4,3f94 <__sfvwrite_r+0x1cc>
    3f04:	01442603          	lw	a2,20(s0)
    3f08:	01042583          	lw	a1,16(s0)
    3f0c:	00161713          	slli	a4,a2,0x1
    3f10:	00c70733          	add	a4,a4,a2
    3f14:	40b78933          	sub	s2,a5,a1
    3f18:	01f75c13          	srli	s8,a4,0x1f
    3f1c:	00ec0c33          	add	s8,s8,a4
    3f20:	00190793          	addi	a5,s2,1
    3f24:	401c5c13          	srai	s8,s8,0x1
    3f28:	013787b3          	add	a5,a5,s3
    3f2c:	000c0613          	mv	a2,s8
    3f30:	00fc7663          	bgeu	s8,a5,3f3c <__sfvwrite_r+0x174>
    3f34:	00078c13          	mv	s8,a5
    3f38:	00078613          	mv	a2,a5
    3f3c:	4006f693          	andi	a3,a3,1024
    3f40:	2c068c63          	beqz	a3,4218 <__sfvwrite_r+0x450>
    3f44:	00060593          	mv	a1,a2
    3f48:	000a0513          	mv	a0,s4
    3f4c:	4a0000ef          	jal	ra,43ec <_malloc_r>
    3f50:	00050c93          	mv	s9,a0
    3f54:	30050063          	beqz	a0,4254 <__sfvwrite_r+0x48c>
    3f58:	01042583          	lw	a1,16(s0)
    3f5c:	00090613          	mv	a2,s2
    3f60:	bf1fe0ef          	jal	ra,2b50 <memcpy>
    3f64:	00c45783          	lhu	a5,12(s0)
    3f68:	b7f7f793          	andi	a5,a5,-1153
    3f6c:	0807e793          	ori	a5,a5,128
    3f70:	00f41623          	sh	a5,12(s0)
    3f74:	012c8533          	add	a0,s9,s2
    3f78:	412c07b3          	sub	a5,s8,s2
    3f7c:	01942823          	sw	s9,16(s0)
    3f80:	01842a23          	sw	s8,20(s0)
    3f84:	00a42023          	sw	a0,0(s0)
    3f88:	00098c13          	mv	s8,s3
    3f8c:	00f42423          	sw	a5,8(s0)
    3f90:	00098c93          	mv	s9,s3
    3f94:	000c8613          	mv	a2,s9
    3f98:	000b8593          	mv	a1,s7
    3f9c:	4b5000ef          	jal	ra,4c50 <memmove>
    3fa0:	00842703          	lw	a4,8(s0)
    3fa4:	00042783          	lw	a5,0(s0)
    3fa8:	00098913          	mv	s2,s3
    3fac:	41870733          	sub	a4,a4,s8
    3fb0:	019787b3          	add	a5,a5,s9
    3fb4:	00e42423          	sw	a4,8(s0)
    3fb8:	00f42023          	sw	a5,0(s0)
    3fbc:	00000993          	li	s3,0
    3fc0:	008b2783          	lw	a5,8(s6)
    3fc4:	012b8bb3          	add	s7,s7,s2
    3fc8:	412787b3          	sub	a5,a5,s2
    3fcc:	00fb2423          	sw	a5,8(s6)
    3fd0:	0a078a63          	beqz	a5,4084 <__sfvwrite_r+0x2bc>
    3fd4:	00042783          	lw	a5,0(s0)
    3fd8:	00842703          	lw	a4,8(s0)
    3fdc:	00c41683          	lh	a3,12(s0)
    3fe0:	00078513          	mv	a0,a5
    3fe4:	00070c13          	mv	s8,a4
    3fe8:	f00992e3          	bnez	s3,3eec <__sfvwrite_r+0x124>
    3fec:	0004ab83          	lw	s7,0(s1)
    3ff0:	0044a983          	lw	s3,4(s1)
    3ff4:	00848493          	addi	s1,s1,8
    3ff8:	ee9ff06f          	j	3ee0 <__sfvwrite_r+0x118>
    3ffc:	00000a93          	li	s5,0
    4000:	00000513          	li	a0,0
    4004:	00000c13          	li	s8,0
    4008:	00000993          	li	s3,0
    400c:	0c098e63          	beqz	s3,40e8 <__sfvwrite_r+0x320>
    4010:	0e050663          	beqz	a0,40fc <__sfvwrite_r+0x334>
    4014:	000a8793          	mv	a5,s5
    4018:	00098b93          	mv	s7,s3
    401c:	0137f463          	bgeu	a5,s3,4024 <__sfvwrite_r+0x25c>
    4020:	00078b93          	mv	s7,a5
    4024:	00042503          	lw	a0,0(s0)
    4028:	01042783          	lw	a5,16(s0)
    402c:	00842903          	lw	s2,8(s0)
    4030:	01442683          	lw	a3,20(s0)
    4034:	00a7f663          	bgeu	a5,a0,4040 <__sfvwrite_r+0x278>
    4038:	00d90933          	add	s2,s2,a3
    403c:	0f794063          	blt	s2,s7,411c <__sfvwrite_r+0x354>
    4040:	1adbc663          	blt	s7,a3,41ec <__sfvwrite_r+0x424>
    4044:	02442783          	lw	a5,36(s0)
    4048:	01c42583          	lw	a1,28(s0)
    404c:	000c0613          	mv	a2,s8
    4050:	000a0513          	mv	a0,s4
    4054:	000780e7          	jalr	a5
    4058:	00050913          	mv	s2,a0
    405c:	06a05863          	blez	a0,40cc <__sfvwrite_r+0x304>
    4060:	412a8ab3          	sub	s5,s5,s2
    4064:	00100513          	li	a0,1
    4068:	040a8a63          	beqz	s5,40bc <__sfvwrite_r+0x2f4>
    406c:	008b2783          	lw	a5,8(s6)
    4070:	012c0c33          	add	s8,s8,s2
    4074:	412989b3          	sub	s3,s3,s2
    4078:	412787b3          	sub	a5,a5,s2
    407c:	00fb2423          	sw	a5,8(s6)
    4080:	f80796e3          	bnez	a5,400c <__sfvwrite_r+0x244>
    4084:	00000513          	li	a0,0
    4088:	02c12083          	lw	ra,44(sp)
    408c:	02812403          	lw	s0,40(sp)
    4090:	02412483          	lw	s1,36(sp)
    4094:	02012903          	lw	s2,32(sp)
    4098:	01c12983          	lw	s3,28(sp)
    409c:	01812a03          	lw	s4,24(sp)
    40a0:	01412a83          	lw	s5,20(sp)
    40a4:	01012b03          	lw	s6,16(sp)
    40a8:	00c12b83          	lw	s7,12(sp)
    40ac:	00812c03          	lw	s8,8(sp)
    40b0:	00412c83          	lw	s9,4(sp)
    40b4:	03010113          	addi	sp,sp,48
    40b8:	00008067          	ret
    40bc:	00040593          	mv	a1,s0
    40c0:	000a0513          	mv	a0,s4
    40c4:	7ad010ef          	jal	ra,6070 <_fflush_r>
    40c8:	fa0502e3          	beqz	a0,406c <__sfvwrite_r+0x2a4>
    40cc:	00c41783          	lh	a5,12(s0)
    40d0:	0407e793          	ori	a5,a5,64
    40d4:	00f41623          	sh	a5,12(s0)
    40d8:	fff00513          	li	a0,-1
    40dc:	fadff06f          	j	4088 <__sfvwrite_r+0x2c0>
    40e0:	00000513          	li	a0,0
    40e4:	00008067          	ret
    40e8:	0044a983          	lw	s3,4(s1)
    40ec:	00048793          	mv	a5,s1
    40f0:	00848493          	addi	s1,s1,8
    40f4:	fe098ae3          	beqz	s3,40e8 <__sfvwrite_r+0x320>
    40f8:	0007ac03          	lw	s8,0(a5)
    40fc:	00098613          	mv	a2,s3
    4100:	00a00593          	li	a1,10
    4104:	000c0513          	mv	a0,s8
    4108:	285000ef          	jal	ra,4b8c <memchr>
    410c:	12050e63          	beqz	a0,4248 <__sfvwrite_r+0x480>
    4110:	00150513          	addi	a0,a0,1
    4114:	41850ab3          	sub	s5,a0,s8
    4118:	efdff06f          	j	4014 <__sfvwrite_r+0x24c>
    411c:	000c0593          	mv	a1,s8
    4120:	00090613          	mv	a2,s2
    4124:	32d000ef          	jal	ra,4c50 <memmove>
    4128:	00042783          	lw	a5,0(s0)
    412c:	00040593          	mv	a1,s0
    4130:	000a0513          	mv	a0,s4
    4134:	012787b3          	add	a5,a5,s2
    4138:	00f42023          	sw	a5,0(s0)
    413c:	735010ef          	jal	ra,6070 <_fflush_r>
    4140:	f20500e3          	beqz	a0,4060 <__sfvwrite_r+0x298>
    4144:	f89ff06f          	j	40cc <__sfvwrite_r+0x304>
    4148:	01042683          	lw	a3,16(s0)
    414c:	04f6e263          	bltu	a3,a5,4190 <__sfvwrite_r+0x3c8>
    4150:	01442603          	lw	a2,20(s0)
    4154:	02c9ee63          	bltu	s3,a2,4190 <__sfvwrite_r+0x3c8>
    4158:	00098793          	mv	a5,s3
    415c:	013af463          	bgeu	s5,s3,4164 <__sfvwrite_r+0x39c>
    4160:	000a8793          	mv	a5,s5
    4164:	02c7e6b3          	rem	a3,a5,a2
    4168:	02442703          	lw	a4,36(s0)
    416c:	01c42583          	lw	a1,28(s0)
    4170:	000b8613          	mv	a2,s7
    4174:	000a0513          	mv	a0,s4
    4178:	40d786b3          	sub	a3,a5,a3
    417c:	000700e7          	jalr	a4
    4180:	00050913          	mv	s2,a0
    4184:	f4a054e3          	blez	a0,40cc <__sfvwrite_r+0x304>
    4188:	412989b3          	sub	s3,s3,s2
    418c:	e35ff06f          	j	3fc0 <__sfvwrite_r+0x1f8>
    4190:	00070913          	mv	s2,a4
    4194:	00e9f463          	bgeu	s3,a4,419c <__sfvwrite_r+0x3d4>
    4198:	00098913          	mv	s2,s3
    419c:	00078513          	mv	a0,a5
    41a0:	00090613          	mv	a2,s2
    41a4:	000b8593          	mv	a1,s7
    41a8:	2a9000ef          	jal	ra,4c50 <memmove>
    41ac:	00842703          	lw	a4,8(s0)
    41b0:	00042783          	lw	a5,0(s0)
    41b4:	41270733          	sub	a4,a4,s2
    41b8:	012787b3          	add	a5,a5,s2
    41bc:	00e42423          	sw	a4,8(s0)
    41c0:	00f42023          	sw	a5,0(s0)
    41c4:	fc0712e3          	bnez	a4,4188 <__sfvwrite_r+0x3c0>
    41c8:	00040593          	mv	a1,s0
    41cc:	000a0513          	mv	a0,s4
    41d0:	6a1010ef          	jal	ra,6070 <_fflush_r>
    41d4:	ee051ce3          	bnez	a0,40cc <__sfvwrite_r+0x304>
    41d8:	412989b3          	sub	s3,s3,s2
    41dc:	de5ff06f          	j	3fc0 <__sfvwrite_r+0x1f8>
    41e0:	00098c13          	mv	s8,s3
    41e4:	00098c93          	mv	s9,s3
    41e8:	dadff06f          	j	3f94 <__sfvwrite_r+0x1cc>
    41ec:	000b8613          	mv	a2,s7
    41f0:	000c0593          	mv	a1,s8
    41f4:	25d000ef          	jal	ra,4c50 <memmove>
    41f8:	00842703          	lw	a4,8(s0)
    41fc:	00042783          	lw	a5,0(s0)
    4200:	000b8913          	mv	s2,s7
    4204:	41770733          	sub	a4,a4,s7
    4208:	017787b3          	add	a5,a5,s7
    420c:	00e42423          	sw	a4,8(s0)
    4210:	00f42023          	sw	a5,0(s0)
    4214:	e4dff06f          	j	4060 <__sfvwrite_r+0x298>
    4218:	000a0513          	mv	a0,s4
    421c:	4a9000ef          	jal	ra,4ec4 <_realloc_r>
    4220:	00050c93          	mv	s9,a0
    4224:	d40518e3          	bnez	a0,3f74 <__sfvwrite_r+0x1ac>
    4228:	01042583          	lw	a1,16(s0)
    422c:	000a0513          	mv	a0,s4
    4230:	891ff0ef          	jal	ra,3ac0 <_free_r>
    4234:	00c41783          	lh	a5,12(s0)
    4238:	00c00713          	li	a4,12
    423c:	00ea2023          	sw	a4,0(s4)
    4240:	f7f7f793          	andi	a5,a5,-129
    4244:	e8dff06f          	j	40d0 <__sfvwrite_r+0x308>
    4248:	00198793          	addi	a5,s3,1
    424c:	00078a93          	mv	s5,a5
    4250:	dc9ff06f          	j	4018 <__sfvwrite_r+0x250>
    4254:	00c00713          	li	a4,12
    4258:	00c41783          	lh	a5,12(s0)
    425c:	00ea2023          	sw	a4,0(s4)
    4260:	e71ff06f          	j	40d0 <__sfvwrite_r+0x308>

00004264 <_fwalk>:
    4264:	fe010113          	addi	sp,sp,-32
    4268:	01212823          	sw	s2,16(sp)
    426c:	01312623          	sw	s3,12(sp)
    4270:	01412423          	sw	s4,8(sp)
    4274:	01512223          	sw	s5,4(sp)
    4278:	01612023          	sw	s6,0(sp)
    427c:	00112e23          	sw	ra,28(sp)
    4280:	00812c23          	sw	s0,24(sp)
    4284:	00912a23          	sw	s1,20(sp)
    4288:	00058b13          	mv	s6,a1
    428c:	2e050a93          	addi	s5,a0,736
    4290:	00000a13          	li	s4,0
    4294:	00100993          	li	s3,1
    4298:	fff00913          	li	s2,-1
    429c:	004aa483          	lw	s1,4(s5) # 80000004 <__alt_data_end+0x7fff0004>
    42a0:	008aa403          	lw	s0,8(s5)
    42a4:	fff48493          	addi	s1,s1,-1
    42a8:	0204c663          	bltz	s1,42d4 <_fwalk+0x70>
    42ac:	00c45783          	lhu	a5,12(s0)
    42b0:	fff48493          	addi	s1,s1,-1
    42b4:	00f9fc63          	bgeu	s3,a5,42cc <_fwalk+0x68>
    42b8:	00e41783          	lh	a5,14(s0)
    42bc:	00040513          	mv	a0,s0
    42c0:	01278663          	beq	a5,s2,42cc <_fwalk+0x68>
    42c4:	000b00e7          	jalr	s6
    42c8:	00aa6a33          	or	s4,s4,a0
    42cc:	06840413          	addi	s0,s0,104
    42d0:	fd249ee3          	bne	s1,s2,42ac <_fwalk+0x48>
    42d4:	000aaa83          	lw	s5,0(s5)
    42d8:	fc0a92e3          	bnez	s5,429c <_fwalk+0x38>
    42dc:	01c12083          	lw	ra,28(sp)
    42e0:	01812403          	lw	s0,24(sp)
    42e4:	01412483          	lw	s1,20(sp)
    42e8:	01012903          	lw	s2,16(sp)
    42ec:	00c12983          	lw	s3,12(sp)
    42f0:	00412a83          	lw	s5,4(sp)
    42f4:	00012b03          	lw	s6,0(sp)
    42f8:	000a0513          	mv	a0,s4
    42fc:	00812a03          	lw	s4,8(sp)
    4300:	02010113          	addi	sp,sp,32
    4304:	00008067          	ret

00004308 <_fwalk_reent>:
    4308:	fd010113          	addi	sp,sp,-48
    430c:	03212023          	sw	s2,32(sp)
    4310:	01312e23          	sw	s3,28(sp)
    4314:	01412c23          	sw	s4,24(sp)
    4318:	01512a23          	sw	s5,20(sp)
    431c:	01612823          	sw	s6,16(sp)
    4320:	01712623          	sw	s7,12(sp)
    4324:	02112623          	sw	ra,44(sp)
    4328:	02812423          	sw	s0,40(sp)
    432c:	02912223          	sw	s1,36(sp)
    4330:	00050a93          	mv	s5,a0
    4334:	00058b93          	mv	s7,a1
    4338:	2e050b13          	addi	s6,a0,736
    433c:	00000a13          	li	s4,0
    4340:	00100993          	li	s3,1
    4344:	fff00913          	li	s2,-1
    4348:	004b2483          	lw	s1,4(s6)
    434c:	008b2403          	lw	s0,8(s6)
    4350:	fff48493          	addi	s1,s1,-1
    4354:	0204c863          	bltz	s1,4384 <_fwalk_reent+0x7c>
    4358:	00c45783          	lhu	a5,12(s0)
    435c:	fff48493          	addi	s1,s1,-1
    4360:	00f9fe63          	bgeu	s3,a5,437c <_fwalk_reent+0x74>
    4364:	00e41783          	lh	a5,14(s0)
    4368:	00040593          	mv	a1,s0
    436c:	000a8513          	mv	a0,s5
    4370:	01278663          	beq	a5,s2,437c <_fwalk_reent+0x74>
    4374:	000b80e7          	jalr	s7
    4378:	00aa6a33          	or	s4,s4,a0
    437c:	06840413          	addi	s0,s0,104
    4380:	fd249ce3          	bne	s1,s2,4358 <_fwalk_reent+0x50>
    4384:	000b2b03          	lw	s6,0(s6)
    4388:	fc0b10e3          	bnez	s6,4348 <_fwalk_reent+0x40>
    438c:	02c12083          	lw	ra,44(sp)
    4390:	02812403          	lw	s0,40(sp)
    4394:	02412483          	lw	s1,36(sp)
    4398:	02012903          	lw	s2,32(sp)
    439c:	01c12983          	lw	s3,28(sp)
    43a0:	01412a83          	lw	s5,20(sp)
    43a4:	01012b03          	lw	s6,16(sp)
    43a8:	00c12b83          	lw	s7,12(sp)
    43ac:	000a0513          	mv	a0,s4
    43b0:	01812a03          	lw	s4,24(sp)
    43b4:	03010113          	addi	sp,sp,48
    43b8:	00008067          	ret

000043bc <__retarget_lock_init>:
    43bc:	00008067          	ret

000043c0 <__retarget_lock_init_recursive>:
    43c0:	00008067          	ret

000043c4 <__retarget_lock_close>:
    43c4:	00008067          	ret

000043c8 <__retarget_lock_close_recursive>:
    43c8:	00008067          	ret

000043cc <__retarget_lock_acquire>:
    43cc:	00008067          	ret

000043d0 <__retarget_lock_acquire_recursive>:
    43d0:	00008067          	ret

000043d4 <__retarget_lock_try_acquire>:
    43d4:	00100513          	li	a0,1
    43d8:	00008067          	ret

000043dc <__retarget_lock_try_acquire_recursive>:
    43dc:	00100513          	li	a0,1
    43e0:	00008067          	ret

000043e4 <__retarget_lock_release>:
    43e4:	00008067          	ret

000043e8 <__retarget_lock_release_recursive>:
    43e8:	00008067          	ret

000043ec <_malloc_r>:
    43ec:	fd010113          	addi	sp,sp,-48
    43f0:	03212023          	sw	s2,32(sp)
    43f4:	02112623          	sw	ra,44(sp)
    43f8:	02812423          	sw	s0,40(sp)
    43fc:	02912223          	sw	s1,36(sp)
    4400:	01312e23          	sw	s3,28(sp)
    4404:	01412c23          	sw	s4,24(sp)
    4408:	01512a23          	sw	s5,20(sp)
    440c:	01612823          	sw	s6,16(sp)
    4410:	01712623          	sw	s7,12(sp)
    4414:	01812423          	sw	s8,8(sp)
    4418:	01912223          	sw	s9,4(sp)
    441c:	00b58793          	addi	a5,a1,11
    4420:	01600713          	li	a4,22
    4424:	00050913          	mv	s2,a0
    4428:	08f76e63          	bltu	a4,a5,44c4 <_malloc_r+0xd8>
    442c:	01000793          	li	a5,16
    4430:	22b7e063          	bltu	a5,a1,4650 <_malloc_r+0x264>
    4434:	215000ef          	jal	ra,4e48 <__malloc_lock>
    4438:	01000493          	li	s1,16
    443c:	01800793          	li	a5,24
    4440:	00200593          	li	a1,2
    4444:	00005997          	auipc	s3,0x5
    4448:	cdc98993          	addi	s3,s3,-804 # 9120 <__malloc_av_>
    444c:	00f987b3          	add	a5,s3,a5
    4450:	0047a403          	lw	s0,4(a5)
    4454:	ff878713          	addi	a4,a5,-8
    4458:	32e40263          	beq	s0,a4,477c <_malloc_r+0x390>
    445c:	00442783          	lw	a5,4(s0)
    4460:	00c42683          	lw	a3,12(s0)
    4464:	00842603          	lw	a2,8(s0)
    4468:	ffc7f793          	andi	a5,a5,-4
    446c:	00f407b3          	add	a5,s0,a5
    4470:	0047a703          	lw	a4,4(a5)
    4474:	00d62623          	sw	a3,12(a2)
    4478:	00c6a423          	sw	a2,8(a3)
    447c:	00176713          	ori	a4,a4,1
    4480:	00090513          	mv	a0,s2
    4484:	00e7a223          	sw	a4,4(a5)
    4488:	1cd000ef          	jal	ra,4e54 <__malloc_unlock>
    448c:	00840513          	addi	a0,s0,8
    4490:	02c12083          	lw	ra,44(sp)
    4494:	02812403          	lw	s0,40(sp)
    4498:	02412483          	lw	s1,36(sp)
    449c:	02012903          	lw	s2,32(sp)
    44a0:	01c12983          	lw	s3,28(sp)
    44a4:	01812a03          	lw	s4,24(sp)
    44a8:	01412a83          	lw	s5,20(sp)
    44ac:	01012b03          	lw	s6,16(sp)
    44b0:	00c12b83          	lw	s7,12(sp)
    44b4:	00812c03          	lw	s8,8(sp)
    44b8:	00412c83          	lw	s9,4(sp)
    44bc:	03010113          	addi	sp,sp,48
    44c0:	00008067          	ret
    44c4:	ff87f493          	andi	s1,a5,-8
    44c8:	1807c463          	bltz	a5,4650 <_malloc_r+0x264>
    44cc:	18b4e263          	bltu	s1,a1,4650 <_malloc_r+0x264>
    44d0:	179000ef          	jal	ra,4e48 <__malloc_lock>
    44d4:	1f700793          	li	a5,503
    44d8:	3a97fc63          	bgeu	a5,s1,4890 <_malloc_r+0x4a4>
    44dc:	0094d793          	srli	a5,s1,0x9
    44e0:	18078063          	beqz	a5,4660 <_malloc_r+0x274>
    44e4:	00400713          	li	a4,4
    44e8:	30f76263          	bltu	a4,a5,47ec <_malloc_r+0x400>
    44ec:	0064d793          	srli	a5,s1,0x6
    44f0:	03978593          	addi	a1,a5,57
    44f4:	03878513          	addi	a0,a5,56
    44f8:	00359693          	slli	a3,a1,0x3
    44fc:	00005997          	auipc	s3,0x5
    4500:	c2498993          	addi	s3,s3,-988 # 9120 <__malloc_av_>
    4504:	00d986b3          	add	a3,s3,a3
    4508:	0046a403          	lw	s0,4(a3)
    450c:	ff868693          	addi	a3,a3,-8
    4510:	02868663          	beq	a3,s0,453c <_malloc_r+0x150>
    4514:	00f00613          	li	a2,15
    4518:	0100006f          	j	4528 <_malloc_r+0x13c>
    451c:	24075a63          	bgez	a4,4770 <_malloc_r+0x384>
    4520:	00c42403          	lw	s0,12(s0)
    4524:	00868c63          	beq	a3,s0,453c <_malloc_r+0x150>
    4528:	00442783          	lw	a5,4(s0)
    452c:	ffc7f793          	andi	a5,a5,-4
    4530:	40978733          	sub	a4,a5,s1
    4534:	fee654e3          	bge	a2,a4,451c <_malloc_r+0x130>
    4538:	00050593          	mv	a1,a0
    453c:	0109a403          	lw	s0,16(s3)
    4540:	00005897          	auipc	a7,0x5
    4544:	be888893          	addi	a7,a7,-1048 # 9128 <__malloc_av_+0x8>
    4548:	1f140c63          	beq	s0,a7,4740 <_malloc_r+0x354>
    454c:	00442783          	lw	a5,4(s0)
    4550:	00f00693          	li	a3,15
    4554:	ffc7f793          	andi	a5,a5,-4
    4558:	40978733          	sub	a4,a5,s1
    455c:	34e6c063          	blt	a3,a4,489c <_malloc_r+0x4b0>
    4560:	0119aa23          	sw	a7,20(s3)
    4564:	0119a823          	sw	a7,16(s3)
    4568:	30075463          	bgez	a4,4870 <_malloc_r+0x484>
    456c:	1ff00713          	li	a4,511
    4570:	0049a503          	lw	a0,4(s3)
    4574:	20f76c63          	bltu	a4,a5,478c <_malloc_r+0x3a0>
    4578:	ff87f713          	andi	a4,a5,-8
    457c:	00870713          	addi	a4,a4,8
    4580:	00e98733          	add	a4,s3,a4
    4584:	00072683          	lw	a3,0(a4)
    4588:	0057d613          	srli	a2,a5,0x5
    458c:	00100793          	li	a5,1
    4590:	00c797b3          	sll	a5,a5,a2
    4594:	00f56533          	or	a0,a0,a5
    4598:	ff870793          	addi	a5,a4,-8
    459c:	00f42623          	sw	a5,12(s0)
    45a0:	00d42423          	sw	a3,8(s0)
    45a4:	00a9a223          	sw	a0,4(s3)
    45a8:	00872023          	sw	s0,0(a4)
    45ac:	0086a623          	sw	s0,12(a3)
    45b0:	4025d793          	srai	a5,a1,0x2
    45b4:	00100613          	li	a2,1
    45b8:	00f61633          	sll	a2,a2,a5
    45bc:	0ac56a63          	bltu	a0,a2,4670 <_malloc_r+0x284>
    45c0:	00a677b3          	and	a5,a2,a0
    45c4:	02079463          	bnez	a5,45ec <_malloc_r+0x200>
    45c8:	00161613          	slli	a2,a2,0x1
    45cc:	ffc5f593          	andi	a1,a1,-4
    45d0:	00a677b3          	and	a5,a2,a0
    45d4:	00458593          	addi	a1,a1,4
    45d8:	00079a63          	bnez	a5,45ec <_malloc_r+0x200>
    45dc:	00161613          	slli	a2,a2,0x1
    45e0:	00a677b3          	and	a5,a2,a0
    45e4:	00458593          	addi	a1,a1,4
    45e8:	fe078ae3          	beqz	a5,45dc <_malloc_r+0x1f0>
    45ec:	00f00813          	li	a6,15
    45f0:	00359313          	slli	t1,a1,0x3
    45f4:	00698333          	add	t1,s3,t1
    45f8:	00030513          	mv	a0,t1
    45fc:	00c52783          	lw	a5,12(a0)
    4600:	00058e13          	mv	t3,a1
    4604:	20f50663          	beq	a0,a5,4810 <_malloc_r+0x424>
    4608:	0047a703          	lw	a4,4(a5)
    460c:	00078413          	mv	s0,a5
    4610:	00c7a783          	lw	a5,12(a5)
    4614:	ffc77713          	andi	a4,a4,-4
    4618:	409706b3          	sub	a3,a4,s1
    461c:	20d84663          	blt	a6,a3,4828 <_malloc_r+0x43c>
    4620:	fe06c2e3          	bltz	a3,4604 <_malloc_r+0x218>
    4624:	00e40733          	add	a4,s0,a4
    4628:	00472683          	lw	a3,4(a4)
    462c:	00842603          	lw	a2,8(s0)
    4630:	00090513          	mv	a0,s2
    4634:	0016e693          	ori	a3,a3,1
    4638:	00d72223          	sw	a3,4(a4)
    463c:	00f62623          	sw	a5,12(a2)
    4640:	00c7a423          	sw	a2,8(a5)
    4644:	011000ef          	jal	ra,4e54 <__malloc_unlock>
    4648:	00840513          	addi	a0,s0,8
    464c:	e45ff06f          	j	4490 <_malloc_r+0xa4>
    4650:	00c00793          	li	a5,12
    4654:	00f92023          	sw	a5,0(s2)
    4658:	00000513          	li	a0,0
    465c:	e35ff06f          	j	4490 <_malloc_r+0xa4>
    4660:	20000693          	li	a3,512
    4664:	04000593          	li	a1,64
    4668:	03f00513          	li	a0,63
    466c:	e91ff06f          	j	44fc <_malloc_r+0x110>
    4670:	0089a403          	lw	s0,8(s3)
    4674:	00442783          	lw	a5,4(s0)
    4678:	ffc7fb13          	andi	s6,a5,-4
    467c:	009b6863          	bltu	s6,s1,468c <_malloc_r+0x2a0>
    4680:	409b0733          	sub	a4,s6,s1
    4684:	00f00793          	li	a5,15
    4688:	0ce7c063          	blt	a5,a4,4748 <_malloc_r+0x35c>
    468c:	82c18c93          	addi	s9,gp,-2004 # 9554 <__malloc_sbrk_base>
    4690:	000ca703          	lw	a4,0(s9)
    4694:	00007a97          	auipc	s5,0x7
    4698:	a58aaa83          	lw	s5,-1448(s5) # b0ec <__malloc_top_pad>
    469c:	fff00793          	li	a5,-1
    46a0:	01640a33          	add	s4,s0,s6
    46a4:	01548ab3          	add	s5,s1,s5
    46a8:	3cf70063          	beq	a4,a5,4a68 <_malloc_r+0x67c>
    46ac:	000017b7          	lui	a5,0x1
    46b0:	00f78793          	addi	a5,a5,15 # 100f <alt_main+0x57>
    46b4:	00fa8ab3          	add	s5,s5,a5
    46b8:	fffff7b7          	lui	a5,0xfffff
    46bc:	00fafab3          	and	s5,s5,a5
    46c0:	000a8593          	mv	a1,s5
    46c4:	00090513          	mv	a0,s2
    46c8:	555000ef          	jal	ra,541c <_sbrk_r>
    46cc:	fff00793          	li	a5,-1
    46d0:	00050b93          	mv	s7,a0
    46d4:	20f50e63          	beq	a0,a5,48f0 <_malloc_r+0x504>
    46d8:	21456a63          	bltu	a0,s4,48ec <_malloc_r+0x500>
    46dc:	00007c17          	auipc	s8,0x7
    46e0:	ac4c0c13          	addi	s8,s8,-1340 # b1a0 <__malloc_current_mallinfo>
    46e4:	000c2583          	lw	a1,0(s8)
    46e8:	00ba85b3          	add	a1,s5,a1
    46ec:	00bc2023          	sw	a1,0(s8)
    46f0:	00058713          	mv	a4,a1
    46f4:	2aaa1063          	bne	s4,a0,4994 <_malloc_r+0x5a8>
    46f8:	01451793          	slli	a5,a0,0x14
    46fc:	28079c63          	bnez	a5,4994 <_malloc_r+0x5a8>
    4700:	0089ab83          	lw	s7,8(s3)
    4704:	015b07b3          	add	a5,s6,s5
    4708:	0017e793          	ori	a5,a5,1
    470c:	00fba223          	sw	a5,4(s7)
    4710:	00007717          	auipc	a4,0x7
    4714:	9d870713          	addi	a4,a4,-1576 # b0e8 <__malloc_max_sbrked_mem>
    4718:	00072683          	lw	a3,0(a4)
    471c:	00b6f463          	bgeu	a3,a1,4724 <_malloc_r+0x338>
    4720:	00b72023          	sw	a1,0(a4)
    4724:	00007717          	auipc	a4,0x7
    4728:	9c070713          	addi	a4,a4,-1600 # b0e4 <__malloc_max_total_mem>
    472c:	00072683          	lw	a3,0(a4)
    4730:	00b6f463          	bgeu	a3,a1,4738 <_malloc_r+0x34c>
    4734:	00b72023          	sw	a1,0(a4)
    4738:	000b8413          	mv	s0,s7
    473c:	1bc0006f          	j	48f8 <_malloc_r+0x50c>
    4740:	0049a503          	lw	a0,4(s3)
    4744:	e6dff06f          	j	45b0 <_malloc_r+0x1c4>
    4748:	0014e793          	ori	a5,s1,1
    474c:	00f42223          	sw	a5,4(s0)
    4750:	009404b3          	add	s1,s0,s1
    4754:	0099a423          	sw	s1,8(s3)
    4758:	00176713          	ori	a4,a4,1
    475c:	00090513          	mv	a0,s2
    4760:	00e4a223          	sw	a4,4(s1)
    4764:	6f0000ef          	jal	ra,4e54 <__malloc_unlock>
    4768:	00840513          	addi	a0,s0,8
    476c:	d25ff06f          	j	4490 <_malloc_r+0xa4>
    4770:	00c42683          	lw	a3,12(s0)
    4774:	00842603          	lw	a2,8(s0)
    4778:	cf5ff06f          	j	446c <_malloc_r+0x80>
    477c:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfffef00c>
    4780:	00258593          	addi	a1,a1,2
    4784:	da878ce3          	beq	a5,s0,453c <_malloc_r+0x150>
    4788:	cd5ff06f          	j	445c <_malloc_r+0x70>
    478c:	0097d713          	srli	a4,a5,0x9
    4790:	00400693          	li	a3,4
    4794:	14e6f263          	bgeu	a3,a4,48d8 <_malloc_r+0x4ec>
    4798:	01400693          	li	a3,20
    479c:	30e6ec63          	bltu	a3,a4,4ab4 <_malloc_r+0x6c8>
    47a0:	05c70613          	addi	a2,a4,92
    47a4:	05b70693          	addi	a3,a4,91
    47a8:	00361613          	slli	a2,a2,0x3
    47ac:	00c98633          	add	a2,s3,a2
    47b0:	00062703          	lw	a4,0(a2)
    47b4:	ff860613          	addi	a2,a2,-8
    47b8:	00e61863          	bne	a2,a4,47c8 <_malloc_r+0x3dc>
    47bc:	2b40006f          	j	4a70 <_malloc_r+0x684>
    47c0:	00872703          	lw	a4,8(a4)
    47c4:	00e60863          	beq	a2,a4,47d4 <_malloc_r+0x3e8>
    47c8:	00472683          	lw	a3,4(a4)
    47cc:	ffc6f693          	andi	a3,a3,-4
    47d0:	fed7e8e3          	bltu	a5,a3,47c0 <_malloc_r+0x3d4>
    47d4:	00c72603          	lw	a2,12(a4)
    47d8:	00c42623          	sw	a2,12(s0)
    47dc:	00e42423          	sw	a4,8(s0)
    47e0:	00862423          	sw	s0,8(a2)
    47e4:	00872623          	sw	s0,12(a4)
    47e8:	dc9ff06f          	j	45b0 <_malloc_r+0x1c4>
    47ec:	01400713          	li	a4,20
    47f0:	12f77663          	bgeu	a4,a5,491c <_malloc_r+0x530>
    47f4:	05400713          	li	a4,84
    47f8:	2cf76c63          	bltu	a4,a5,4ad0 <_malloc_r+0x6e4>
    47fc:	00c4d793          	srli	a5,s1,0xc
    4800:	06f78593          	addi	a1,a5,111
    4804:	06e78513          	addi	a0,a5,110
    4808:	00359693          	slli	a3,a1,0x3
    480c:	cf1ff06f          	j	44fc <_malloc_r+0x110>
    4810:	001e0e13          	addi	t3,t3,1
    4814:	003e7793          	andi	a5,t3,3
    4818:	00850513          	addi	a0,a0,8
    481c:	10078e63          	beqz	a5,4938 <_malloc_r+0x54c>
    4820:	00c52783          	lw	a5,12(a0)
    4824:	de1ff06f          	j	4604 <_malloc_r+0x218>
    4828:	00842603          	lw	a2,8(s0)
    482c:	0014e593          	ori	a1,s1,1
    4830:	00b42223          	sw	a1,4(s0)
    4834:	00f62623          	sw	a5,12(a2)
    4838:	00c7a423          	sw	a2,8(a5)
    483c:	009404b3          	add	s1,s0,s1
    4840:	0099aa23          	sw	s1,20(s3)
    4844:	0099a823          	sw	s1,16(s3)
    4848:	0016e793          	ori	a5,a3,1
    484c:	0114a623          	sw	a7,12(s1)
    4850:	0114a423          	sw	a7,8(s1)
    4854:	00f4a223          	sw	a5,4(s1)
    4858:	00e40733          	add	a4,s0,a4
    485c:	00090513          	mv	a0,s2
    4860:	00d72023          	sw	a3,0(a4)
    4864:	5f0000ef          	jal	ra,4e54 <__malloc_unlock>
    4868:	00840513          	addi	a0,s0,8
    486c:	c25ff06f          	j	4490 <_malloc_r+0xa4>
    4870:	00f407b3          	add	a5,s0,a5
    4874:	0047a703          	lw	a4,4(a5)
    4878:	00090513          	mv	a0,s2
    487c:	00176713          	ori	a4,a4,1
    4880:	00e7a223          	sw	a4,4(a5)
    4884:	5d0000ef          	jal	ra,4e54 <__malloc_unlock>
    4888:	00840513          	addi	a0,s0,8
    488c:	c05ff06f          	j	4490 <_malloc_r+0xa4>
    4890:	0034d593          	srli	a1,s1,0x3
    4894:	00848793          	addi	a5,s1,8
    4898:	badff06f          	j	4444 <_malloc_r+0x58>
    489c:	0014e693          	ori	a3,s1,1
    48a0:	00d42223          	sw	a3,4(s0)
    48a4:	009404b3          	add	s1,s0,s1
    48a8:	0099aa23          	sw	s1,20(s3)
    48ac:	0099a823          	sw	s1,16(s3)
    48b0:	00176693          	ori	a3,a4,1
    48b4:	0114a623          	sw	a7,12(s1)
    48b8:	0114a423          	sw	a7,8(s1)
    48bc:	00d4a223          	sw	a3,4(s1)
    48c0:	00f407b3          	add	a5,s0,a5
    48c4:	00090513          	mv	a0,s2
    48c8:	00e7a023          	sw	a4,0(a5)
    48cc:	588000ef          	jal	ra,4e54 <__malloc_unlock>
    48d0:	00840513          	addi	a0,s0,8
    48d4:	bbdff06f          	j	4490 <_malloc_r+0xa4>
    48d8:	0067d713          	srli	a4,a5,0x6
    48dc:	03970613          	addi	a2,a4,57
    48e0:	03870693          	addi	a3,a4,56
    48e4:	00361613          	slli	a2,a2,0x3
    48e8:	ec5ff06f          	j	47ac <_malloc_r+0x3c0>
    48ec:	09340a63          	beq	s0,s3,4980 <_malloc_r+0x594>
    48f0:	0089a403          	lw	s0,8(s3)
    48f4:	00442783          	lw	a5,4(s0)
    48f8:	ffc7f793          	andi	a5,a5,-4
    48fc:	40978733          	sub	a4,a5,s1
    4900:	0097e663          	bltu	a5,s1,490c <_malloc_r+0x520>
    4904:	00f00793          	li	a5,15
    4908:	e4e7c0e3          	blt	a5,a4,4748 <_malloc_r+0x35c>
    490c:	00090513          	mv	a0,s2
    4910:	544000ef          	jal	ra,4e54 <__malloc_unlock>
    4914:	00000513          	li	a0,0
    4918:	b79ff06f          	j	4490 <_malloc_r+0xa4>
    491c:	05c78593          	addi	a1,a5,92
    4920:	05b78513          	addi	a0,a5,91
    4924:	00359693          	slli	a3,a1,0x3
    4928:	bd5ff06f          	j	44fc <_malloc_r+0x110>
    492c:	00832783          	lw	a5,8(t1)
    4930:	fff58593          	addi	a1,a1,-1
    4934:	24679863          	bne	a5,t1,4b84 <_malloc_r+0x798>
    4938:	0035f793          	andi	a5,a1,3
    493c:	ff830313          	addi	t1,t1,-8
    4940:	fe0796e3          	bnez	a5,492c <_malloc_r+0x540>
    4944:	0049a703          	lw	a4,4(s3)
    4948:	fff64793          	not	a5,a2
    494c:	00e7f7b3          	and	a5,a5,a4
    4950:	00f9a223          	sw	a5,4(s3)
    4954:	00161613          	slli	a2,a2,0x1
    4958:	d0c7ece3          	bltu	a5,a2,4670 <_malloc_r+0x284>
    495c:	d0060ae3          	beqz	a2,4670 <_malloc_r+0x284>
    4960:	00f67733          	and	a4,a2,a5
    4964:	00071a63          	bnez	a4,4978 <_malloc_r+0x58c>
    4968:	00161613          	slli	a2,a2,0x1
    496c:	00f67733          	and	a4,a2,a5
    4970:	004e0e13          	addi	t3,t3,4
    4974:	fe070ae3          	beqz	a4,4968 <_malloc_r+0x57c>
    4978:	000e0593          	mv	a1,t3
    497c:	c75ff06f          	j	45f0 <_malloc_r+0x204>
    4980:	00007c17          	auipc	s8,0x7
    4984:	820c0c13          	addi	s8,s8,-2016 # b1a0 <__malloc_current_mallinfo>
    4988:	000c2703          	lw	a4,0(s8)
    498c:	00ea8733          	add	a4,s5,a4
    4990:	00ec2023          	sw	a4,0(s8)
    4994:	000ca683          	lw	a3,0(s9)
    4998:	fff00793          	li	a5,-1
    499c:	14f68863          	beq	a3,a5,4aec <_malloc_r+0x700>
    49a0:	414b87b3          	sub	a5,s7,s4
    49a4:	00e787b3          	add	a5,a5,a4
    49a8:	00fc2023          	sw	a5,0(s8)
    49ac:	007bfc93          	andi	s9,s7,7
    49b0:	0c0c8c63          	beqz	s9,4a88 <_malloc_r+0x69c>
    49b4:	00001737          	lui	a4,0x1
    49b8:	419b8bb3          	sub	s7,s7,s9
    49bc:	00870593          	addi	a1,a4,8 # 1008 <alt_main+0x50>
    49c0:	008b8b93          	addi	s7,s7,8
    49c4:	419585b3          	sub	a1,a1,s9
    49c8:	015b8ab3          	add	s5,s7,s5
    49cc:	415585b3          	sub	a1,a1,s5
    49d0:	fff70713          	addi	a4,a4,-1
    49d4:	00e5fa33          	and	s4,a1,a4
    49d8:	000a0593          	mv	a1,s4
    49dc:	00090513          	mv	a0,s2
    49e0:	23d000ef          	jal	ra,541c <_sbrk_r>
    49e4:	fff00793          	li	a5,-1
    49e8:	14f50863          	beq	a0,a5,4b38 <_malloc_r+0x74c>
    49ec:	41750533          	sub	a0,a0,s7
    49f0:	01450ab3          	add	s5,a0,s4
    49f4:	000c2703          	lw	a4,0(s8)
    49f8:	0179a423          	sw	s7,8(s3)
    49fc:	001ae793          	ori	a5,s5,1
    4a00:	00ea05b3          	add	a1,s4,a4
    4a04:	00bc2023          	sw	a1,0(s8)
    4a08:	00fba223          	sw	a5,4(s7)
    4a0c:	d13402e3          	beq	s0,s3,4710 <_malloc_r+0x324>
    4a10:	00f00693          	li	a3,15
    4a14:	0f66f063          	bgeu	a3,s6,4af4 <_malloc_r+0x708>
    4a18:	00442703          	lw	a4,4(s0)
    4a1c:	ff4b0793          	addi	a5,s6,-12
    4a20:	ff87f793          	andi	a5,a5,-8
    4a24:	00177713          	andi	a4,a4,1
    4a28:	00f76733          	or	a4,a4,a5
    4a2c:	00e42223          	sw	a4,4(s0)
    4a30:	00500613          	li	a2,5
    4a34:	00f40733          	add	a4,s0,a5
    4a38:	00c72223          	sw	a2,4(a4)
    4a3c:	00c72423          	sw	a2,8(a4)
    4a40:	00f6e663          	bltu	a3,a5,4a4c <_malloc_r+0x660>
    4a44:	004ba783          	lw	a5,4(s7)
    4a48:	cc9ff06f          	j	4710 <_malloc_r+0x324>
    4a4c:	00840593          	addi	a1,s0,8
    4a50:	00090513          	mv	a0,s2
    4a54:	86cff0ef          	jal	ra,3ac0 <_free_r>
    4a58:	0089ab83          	lw	s7,8(s3)
    4a5c:	000c2583          	lw	a1,0(s8)
    4a60:	004ba783          	lw	a5,4(s7)
    4a64:	cadff06f          	j	4710 <_malloc_r+0x324>
    4a68:	010a8a93          	addi	s5,s5,16
    4a6c:	c55ff06f          	j	46c0 <_malloc_r+0x2d4>
    4a70:	4026d693          	srai	a3,a3,0x2
    4a74:	00100793          	li	a5,1
    4a78:	00d797b3          	sll	a5,a5,a3
    4a7c:	00f56533          	or	a0,a0,a5
    4a80:	00a9a223          	sw	a0,4(s3)
    4a84:	d55ff06f          	j	47d8 <_malloc_r+0x3ec>
    4a88:	015b85b3          	add	a1,s7,s5
    4a8c:	40b005b3          	neg	a1,a1
    4a90:	01459593          	slli	a1,a1,0x14
    4a94:	0145da13          	srli	s4,a1,0x14
    4a98:	000a0593          	mv	a1,s4
    4a9c:	00090513          	mv	a0,s2
    4aa0:	17d000ef          	jal	ra,541c <_sbrk_r>
    4aa4:	fff00793          	li	a5,-1
    4aa8:	f4f512e3          	bne	a0,a5,49ec <_malloc_r+0x600>
    4aac:	00000a13          	li	s4,0
    4ab0:	f45ff06f          	j	49f4 <_malloc_r+0x608>
    4ab4:	05400693          	li	a3,84
    4ab8:	04e6e463          	bltu	a3,a4,4b00 <_malloc_r+0x714>
    4abc:	00c7d713          	srli	a4,a5,0xc
    4ac0:	06f70613          	addi	a2,a4,111
    4ac4:	06e70693          	addi	a3,a4,110
    4ac8:	00361613          	slli	a2,a2,0x3
    4acc:	ce1ff06f          	j	47ac <_malloc_r+0x3c0>
    4ad0:	15400713          	li	a4,340
    4ad4:	04f76463          	bltu	a4,a5,4b1c <_malloc_r+0x730>
    4ad8:	00f4d793          	srli	a5,s1,0xf
    4adc:	07878593          	addi	a1,a5,120
    4ae0:	07778513          	addi	a0,a5,119
    4ae4:	00359693          	slli	a3,a1,0x3
    4ae8:	a15ff06f          	j	44fc <_malloc_r+0x110>
    4aec:	017ca023          	sw	s7,0(s9)
    4af0:	ebdff06f          	j	49ac <_malloc_r+0x5c0>
    4af4:	00100793          	li	a5,1
    4af8:	00fba223          	sw	a5,4(s7)
    4afc:	e11ff06f          	j	490c <_malloc_r+0x520>
    4b00:	15400693          	li	a3,340
    4b04:	04e6e463          	bltu	a3,a4,4b4c <_malloc_r+0x760>
    4b08:	00f7d713          	srli	a4,a5,0xf
    4b0c:	07870613          	addi	a2,a4,120
    4b10:	07770693          	addi	a3,a4,119
    4b14:	00361613          	slli	a2,a2,0x3
    4b18:	c95ff06f          	j	47ac <_malloc_r+0x3c0>
    4b1c:	55400713          	li	a4,1364
    4b20:	04f76463          	bltu	a4,a5,4b68 <_malloc_r+0x77c>
    4b24:	0124d793          	srli	a5,s1,0x12
    4b28:	07d78593          	addi	a1,a5,125
    4b2c:	07c78513          	addi	a0,a5,124
    4b30:	00359693          	slli	a3,a1,0x3
    4b34:	9c9ff06f          	j	44fc <_malloc_r+0x110>
    4b38:	ff8c8c93          	addi	s9,s9,-8
    4b3c:	019a8ab3          	add	s5,s5,s9
    4b40:	417a8ab3          	sub	s5,s5,s7
    4b44:	00000a13          	li	s4,0
    4b48:	eadff06f          	j	49f4 <_malloc_r+0x608>
    4b4c:	55400693          	li	a3,1364
    4b50:	02e6e463          	bltu	a3,a4,4b78 <_malloc_r+0x78c>
    4b54:	0127d713          	srli	a4,a5,0x12
    4b58:	07d70613          	addi	a2,a4,125
    4b5c:	07c70693          	addi	a3,a4,124
    4b60:	00361613          	slli	a2,a2,0x3
    4b64:	c49ff06f          	j	47ac <_malloc_r+0x3c0>
    4b68:	3f800693          	li	a3,1016
    4b6c:	07f00593          	li	a1,127
    4b70:	07e00513          	li	a0,126
    4b74:	989ff06f          	j	44fc <_malloc_r+0x110>
    4b78:	3f800613          	li	a2,1016
    4b7c:	07e00693          	li	a3,126
    4b80:	c2dff06f          	j	47ac <_malloc_r+0x3c0>
    4b84:	0049a783          	lw	a5,4(s3)
    4b88:	dcdff06f          	j	4954 <_malloc_r+0x568>

00004b8c <memchr>:
    4b8c:	00357793          	andi	a5,a0,3
    4b90:	0ff5f693          	zext.b	a3,a1
    4b94:	02078e63          	beqz	a5,4bd0 <memchr+0x44>
    4b98:	fff60793          	addi	a5,a2,-1
    4b9c:	02060663          	beqz	a2,4bc8 <memchr+0x3c>
    4ba0:	fff00613          	li	a2,-1
    4ba4:	0180006f          	j	4bbc <memchr+0x30>
    4ba8:	00150513          	addi	a0,a0,1
    4bac:	00357713          	andi	a4,a0,3
    4bb0:	02070263          	beqz	a4,4bd4 <memchr+0x48>
    4bb4:	fff78793          	addi	a5,a5,-1
    4bb8:	00c78863          	beq	a5,a2,4bc8 <memchr+0x3c>
    4bbc:	00054703          	lbu	a4,0(a0)
    4bc0:	fed714e3          	bne	a4,a3,4ba8 <memchr+0x1c>
    4bc4:	00008067          	ret
    4bc8:	00000513          	li	a0,0
    4bcc:	00008067          	ret
    4bd0:	00060793          	mv	a5,a2
    4bd4:	00300713          	li	a4,3
    4bd8:	04f77c63          	bgeu	a4,a5,4c30 <memchr+0xa4>
    4bdc:	0ff5f593          	zext.b	a1,a1
    4be0:	00859713          	slli	a4,a1,0x8
    4be4:	00b705b3          	add	a1,a4,a1
    4be8:	01059713          	slli	a4,a1,0x10
    4bec:	feff08b7          	lui	a7,0xfeff0
    4bf0:	80808837          	lui	a6,0x80808
    4bf4:	00e585b3          	add	a1,a1,a4
    4bf8:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfefdfeff>
    4bfc:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x807f8080>
    4c00:	00300313          	li	t1,3
    4c04:	0100006f          	j	4c14 <memchr+0x88>
    4c08:	ffc78793          	addi	a5,a5,-4
    4c0c:	00450513          	addi	a0,a0,4
    4c10:	02f37063          	bgeu	t1,a5,4c30 <memchr+0xa4>
    4c14:	00052703          	lw	a4,0(a0)
    4c18:	00e5c733          	xor	a4,a1,a4
    4c1c:	01170633          	add	a2,a4,a7
    4c20:	fff74713          	not	a4,a4
    4c24:	00e67733          	and	a4,a2,a4
    4c28:	01077733          	and	a4,a4,a6
    4c2c:	fc070ee3          	beqz	a4,4c08 <memchr+0x7c>
    4c30:	00f50733          	add	a4,a0,a5
    4c34:	00079863          	bnez	a5,4c44 <memchr+0xb8>
    4c38:	f91ff06f          	j	4bc8 <memchr+0x3c>
    4c3c:	00150513          	addi	a0,a0,1
    4c40:	f8a704e3          	beq	a4,a0,4bc8 <memchr+0x3c>
    4c44:	00054783          	lbu	a5,0(a0)
    4c48:	fed79ae3          	bne	a5,a3,4c3c <memchr+0xb0>
    4c4c:	00008067          	ret

00004c50 <memmove>:
    4c50:	02a5f663          	bgeu	a1,a0,4c7c <memmove+0x2c>
    4c54:	00c58733          	add	a4,a1,a2
    4c58:	02e57263          	bgeu	a0,a4,4c7c <memmove+0x2c>
    4c5c:	00c507b3          	add	a5,a0,a2
    4c60:	04060663          	beqz	a2,4cac <memmove+0x5c>
    4c64:	fff74683          	lbu	a3,-1(a4)
    4c68:	fff78793          	addi	a5,a5,-1
    4c6c:	fff70713          	addi	a4,a4,-1
    4c70:	00d78023          	sb	a3,0(a5)
    4c74:	fef518e3          	bne	a0,a5,4c64 <memmove+0x14>
    4c78:	00008067          	ret
    4c7c:	00f00793          	li	a5,15
    4c80:	02c7e863          	bltu	a5,a2,4cb0 <memmove+0x60>
    4c84:	00050793          	mv	a5,a0
    4c88:	fff60693          	addi	a3,a2,-1
    4c8c:	0c060a63          	beqz	a2,4d60 <memmove+0x110>
    4c90:	00168693          	addi	a3,a3,1
    4c94:	00d786b3          	add	a3,a5,a3
    4c98:	0005c703          	lbu	a4,0(a1)
    4c9c:	00178793          	addi	a5,a5,1
    4ca0:	00158593          	addi	a1,a1,1
    4ca4:	fee78fa3          	sb	a4,-1(a5)
    4ca8:	fed798e3          	bne	a5,a3,4c98 <memmove+0x48>
    4cac:	00008067          	ret
    4cb0:	00b567b3          	or	a5,a0,a1
    4cb4:	0037f793          	andi	a5,a5,3
    4cb8:	08079e63          	bnez	a5,4d54 <memmove+0x104>
    4cbc:	ff060893          	addi	a7,a2,-16
    4cc0:	ff08f893          	andi	a7,a7,-16
    4cc4:	01088893          	addi	a7,a7,16
    4cc8:	011507b3          	add	a5,a0,a7
    4ccc:	00058693          	mv	a3,a1
    4cd0:	00050713          	mv	a4,a0
    4cd4:	0006a803          	lw	a6,0(a3)
    4cd8:	01068693          	addi	a3,a3,16
    4cdc:	01070713          	addi	a4,a4,16
    4ce0:	ff072823          	sw	a6,-16(a4)
    4ce4:	ff46a803          	lw	a6,-12(a3)
    4ce8:	ff072a23          	sw	a6,-12(a4)
    4cec:	ff86a803          	lw	a6,-8(a3)
    4cf0:	ff072c23          	sw	a6,-8(a4)
    4cf4:	ffc6a803          	lw	a6,-4(a3)
    4cf8:	ff072e23          	sw	a6,-4(a4)
    4cfc:	fcf71ce3          	bne	a4,a5,4cd4 <memmove+0x84>
    4d00:	00c67713          	andi	a4,a2,12
    4d04:	011585b3          	add	a1,a1,a7
    4d08:	00f67813          	andi	a6,a2,15
    4d0c:	04070c63          	beqz	a4,4d64 <memmove+0x114>
    4d10:	00058693          	mv	a3,a1
    4d14:	00078713          	mv	a4,a5
    4d18:	01078eb3          	add	t4,a5,a6
    4d1c:	00300e13          	li	t3,3
    4d20:	0006a303          	lw	t1,0(a3)
    4d24:	00470713          	addi	a4,a4,4
    4d28:	40ee88b3          	sub	a7,t4,a4
    4d2c:	fe672e23          	sw	t1,-4(a4)
    4d30:	00468693          	addi	a3,a3,4
    4d34:	ff1e66e3          	bltu	t3,a7,4d20 <memmove+0xd0>
    4d38:	ffc80713          	addi	a4,a6,-4
    4d3c:	ffc77713          	andi	a4,a4,-4
    4d40:	00470713          	addi	a4,a4,4
    4d44:	00367613          	andi	a2,a2,3
    4d48:	00e787b3          	add	a5,a5,a4
    4d4c:	00e585b3          	add	a1,a1,a4
    4d50:	f39ff06f          	j	4c88 <memmove+0x38>
    4d54:	fff60693          	addi	a3,a2,-1
    4d58:	00050793          	mv	a5,a0
    4d5c:	f35ff06f          	j	4c90 <memmove+0x40>
    4d60:	00008067          	ret
    4d64:	00080613          	mv	a2,a6
    4d68:	f21ff06f          	j	4c88 <memmove+0x38>

00004d6c <memset>:
    4d6c:	00f00313          	li	t1,15
    4d70:	00050713          	mv	a4,a0
    4d74:	02c37e63          	bgeu	t1,a2,4db0 <memset+0x44>
    4d78:	00f77793          	andi	a5,a4,15
    4d7c:	0a079063          	bnez	a5,4e1c <memset+0xb0>
    4d80:	08059263          	bnez	a1,4e04 <memset+0x98>
    4d84:	ff067693          	andi	a3,a2,-16
    4d88:	00f67613          	andi	a2,a2,15
    4d8c:	00e686b3          	add	a3,a3,a4
    4d90:	00b72023          	sw	a1,0(a4)
    4d94:	00b72223          	sw	a1,4(a4)
    4d98:	00b72423          	sw	a1,8(a4)
    4d9c:	00b72623          	sw	a1,12(a4)
    4da0:	01070713          	addi	a4,a4,16
    4da4:	fed766e3          	bltu	a4,a3,4d90 <memset+0x24>
    4da8:	00061463          	bnez	a2,4db0 <memset+0x44>
    4dac:	00008067          	ret
    4db0:	40c306b3          	sub	a3,t1,a2
    4db4:	00269693          	slli	a3,a3,0x2
    4db8:	00000297          	auipc	t0,0x0
    4dbc:	005686b3          	add	a3,a3,t0
    4dc0:	00c68067          	jr	12(a3)
    4dc4:	00b70723          	sb	a1,14(a4)
    4dc8:	00b706a3          	sb	a1,13(a4)
    4dcc:	00b70623          	sb	a1,12(a4)
    4dd0:	00b705a3          	sb	a1,11(a4)
    4dd4:	00b70523          	sb	a1,10(a4)
    4dd8:	00b704a3          	sb	a1,9(a4)
    4ddc:	00b70423          	sb	a1,8(a4)
    4de0:	00b703a3          	sb	a1,7(a4)
    4de4:	00b70323          	sb	a1,6(a4)
    4de8:	00b702a3          	sb	a1,5(a4)
    4dec:	00b70223          	sb	a1,4(a4)
    4df0:	00b701a3          	sb	a1,3(a4)
    4df4:	00b70123          	sb	a1,2(a4)
    4df8:	00b700a3          	sb	a1,1(a4)
    4dfc:	00b70023          	sb	a1,0(a4)
    4e00:	00008067          	ret
    4e04:	0ff5f593          	zext.b	a1,a1
    4e08:	00859693          	slli	a3,a1,0x8
    4e0c:	00d5e5b3          	or	a1,a1,a3
    4e10:	01059693          	slli	a3,a1,0x10
    4e14:	00d5e5b3          	or	a1,a1,a3
    4e18:	f6dff06f          	j	4d84 <memset+0x18>
    4e1c:	00279693          	slli	a3,a5,0x2
    4e20:	00000297          	auipc	t0,0x0
    4e24:	005686b3          	add	a3,a3,t0
    4e28:	00008293          	mv	t0,ra
    4e2c:	fa0680e7          	jalr	-96(a3)
    4e30:	00028093          	mv	ra,t0
    4e34:	ff078793          	addi	a5,a5,-16
    4e38:	40f70733          	sub	a4,a4,a5
    4e3c:	00f60633          	add	a2,a2,a5
    4e40:	f6c378e3          	bgeu	t1,a2,4db0 <memset+0x44>
    4e44:	f3dff06f          	j	4d80 <memset+0x14>

00004e48 <__malloc_lock>:
    4e48:	00006517          	auipc	a0,0x6
    4e4c:	28850513          	addi	a0,a0,648 # b0d0 <__lock___malloc_recursive_mutex>
    4e50:	d80ff06f          	j	43d0 <__retarget_lock_acquire_recursive>

00004e54 <__malloc_unlock>:
    4e54:	00006517          	auipc	a0,0x6
    4e58:	27c50513          	addi	a0,a0,636 # b0d0 <__lock___malloc_recursive_mutex>
    4e5c:	d8cff06f          	j	43e8 <__retarget_lock_release_recursive>

00004e60 <_open_r>:
    4e60:	ff010113          	addi	sp,sp,-16
    4e64:	00058713          	mv	a4,a1
    4e68:	00812423          	sw	s0,8(sp)
    4e6c:	00060593          	mv	a1,a2
    4e70:	00050413          	mv	s0,a0
    4e74:	00068613          	mv	a2,a3
    4e78:	00070513          	mv	a0,a4
    4e7c:	00006797          	auipc	a5,0x6
    4e80:	2207ae23          	sw	zero,572(a5) # b0b8 <errno>
    4e84:	00112623          	sw	ra,12(sp)
    4e88:	795010ef          	jal	ra,6e1c <_open>
    4e8c:	fff00793          	li	a5,-1
    4e90:	00f50a63          	beq	a0,a5,4ea4 <_open_r+0x44>
    4e94:	00c12083          	lw	ra,12(sp)
    4e98:	00812403          	lw	s0,8(sp)
    4e9c:	01010113          	addi	sp,sp,16
    4ea0:	00008067          	ret
    4ea4:	00006797          	auipc	a5,0x6
    4ea8:	2147a783          	lw	a5,532(a5) # b0b8 <errno>
    4eac:	fe0784e3          	beqz	a5,4e94 <_open_r+0x34>
    4eb0:	00c12083          	lw	ra,12(sp)
    4eb4:	00f42023          	sw	a5,0(s0)
    4eb8:	00812403          	lw	s0,8(sp)
    4ebc:	01010113          	addi	sp,sp,16
    4ec0:	00008067          	ret

00004ec4 <_realloc_r>:
    4ec4:	fd010113          	addi	sp,sp,-48
    4ec8:	02912223          	sw	s1,36(sp)
    4ecc:	02112623          	sw	ra,44(sp)
    4ed0:	02812423          	sw	s0,40(sp)
    4ed4:	03212023          	sw	s2,32(sp)
    4ed8:	01312e23          	sw	s3,28(sp)
    4edc:	01412c23          	sw	s4,24(sp)
    4ee0:	01512a23          	sw	s5,20(sp)
    4ee4:	01612823          	sw	s6,16(sp)
    4ee8:	01712623          	sw	s7,12(sp)
    4eec:	01812423          	sw	s8,8(sp)
    4ef0:	00060493          	mv	s1,a2
    4ef4:	1c058263          	beqz	a1,50b8 <_realloc_r+0x1f4>
    4ef8:	00058413          	mv	s0,a1
    4efc:	00050913          	mv	s2,a0
    4f00:	f49ff0ef          	jal	ra,4e48 <__malloc_lock>
    4f04:	ffc42703          	lw	a4,-4(s0)
    4f08:	00b48793          	addi	a5,s1,11
    4f0c:	01600693          	li	a3,22
    4f10:	ff840a93          	addi	s5,s0,-8
    4f14:	ffc77993          	andi	s3,a4,-4
    4f18:	0ef6f663          	bgeu	a3,a5,5004 <_realloc_r+0x140>
    4f1c:	ff87fa13          	andi	s4,a5,-8
    4f20:	0e07c663          	bltz	a5,500c <_realloc_r+0x148>
    4f24:	0e9a6463          	bltu	s4,s1,500c <_realloc_r+0x148>
    4f28:	1149d463          	bge	s3,s4,5030 <_realloc_r+0x16c>
    4f2c:	00004c17          	auipc	s8,0x4
    4f30:	1f4c0c13          	addi	s8,s8,500 # 9120 <__malloc_av_>
    4f34:	008c2603          	lw	a2,8(s8)
    4f38:	013a86b3          	add	a3,s5,s3
    4f3c:	0046a783          	lw	a5,4(a3)
    4f40:	1cd60e63          	beq	a2,a3,511c <_realloc_r+0x258>
    4f44:	ffe7f613          	andi	a2,a5,-2
    4f48:	00c68633          	add	a2,a3,a2
    4f4c:	00462603          	lw	a2,4(a2)
    4f50:	00167613          	andi	a2,a2,1
    4f54:	14061463          	bnez	a2,509c <_realloc_r+0x1d8>
    4f58:	ffc7f793          	andi	a5,a5,-4
    4f5c:	00f98633          	add	a2,s3,a5
    4f60:	0b465e63          	bge	a2,s4,501c <_realloc_r+0x158>
    4f64:	00177713          	andi	a4,a4,1
    4f68:	02071463          	bnez	a4,4f90 <_realloc_r+0xcc>
    4f6c:	ff842b83          	lw	s7,-8(s0)
    4f70:	417a8bb3          	sub	s7,s5,s7
    4f74:	004ba703          	lw	a4,4(s7)
    4f78:	ffc77713          	andi	a4,a4,-4
    4f7c:	00e787b3          	add	a5,a5,a4
    4f80:	01378b33          	add	s6,a5,s3
    4f84:	334b5463          	bge	s6,s4,52ac <_realloc_r+0x3e8>
    4f88:	00e98b33          	add	s6,s3,a4
    4f8c:	294b5663          	bge	s6,s4,5218 <_realloc_r+0x354>
    4f90:	00048593          	mv	a1,s1
    4f94:	00090513          	mv	a0,s2
    4f98:	c54ff0ef          	jal	ra,43ec <_malloc_r>
    4f9c:	00050493          	mv	s1,a0
    4fa0:	40050263          	beqz	a0,53a4 <_realloc_r+0x4e0>
    4fa4:	ffc42783          	lw	a5,-4(s0)
    4fa8:	ff850713          	addi	a4,a0,-8
    4fac:	ffe7f793          	andi	a5,a5,-2
    4fb0:	00fa87b3          	add	a5,s5,a5
    4fb4:	24e78a63          	beq	a5,a4,5208 <_realloc_r+0x344>
    4fb8:	ffc98613          	addi	a2,s3,-4
    4fbc:	02400793          	li	a5,36
    4fc0:	2ec7e063          	bltu	a5,a2,52a0 <_realloc_r+0x3dc>
    4fc4:	01300713          	li	a4,19
    4fc8:	20c76e63          	bltu	a4,a2,51e4 <_realloc_r+0x320>
    4fcc:	00050793          	mv	a5,a0
    4fd0:	00040713          	mv	a4,s0
    4fd4:	00072683          	lw	a3,0(a4)
    4fd8:	00d7a023          	sw	a3,0(a5)
    4fdc:	00472683          	lw	a3,4(a4)
    4fe0:	00d7a223          	sw	a3,4(a5)
    4fe4:	00872703          	lw	a4,8(a4)
    4fe8:	00e7a423          	sw	a4,8(a5)
    4fec:	00090513          	mv	a0,s2
    4ff0:	00040593          	mv	a1,s0
    4ff4:	acdfe0ef          	jal	ra,3ac0 <_free_r>
    4ff8:	00090513          	mv	a0,s2
    4ffc:	e59ff0ef          	jal	ra,4e54 <__malloc_unlock>
    5000:	0680006f          	j	5068 <_realloc_r+0x1a4>
    5004:	01000a13          	li	s4,16
    5008:	f29a70e3          	bgeu	s4,s1,4f28 <_realloc_r+0x64>
    500c:	00c00793          	li	a5,12
    5010:	00f92023          	sw	a5,0(s2)
    5014:	00000493          	li	s1,0
    5018:	0500006f          	j	5068 <_realloc_r+0x1a4>
    501c:	00c6a783          	lw	a5,12(a3)
    5020:	0086a703          	lw	a4,8(a3)
    5024:	00060993          	mv	s3,a2
    5028:	00f72623          	sw	a5,12(a4)
    502c:	00e7a423          	sw	a4,8(a5)
    5030:	004aa783          	lw	a5,4(s5)
    5034:	414986b3          	sub	a3,s3,s4
    5038:	00f00613          	li	a2,15
    503c:	0017f793          	andi	a5,a5,1
    5040:	013a8733          	add	a4,s5,s3
    5044:	0ad66463          	bltu	a2,a3,50ec <_realloc_r+0x228>
    5048:	0137e7b3          	or	a5,a5,s3
    504c:	00faa223          	sw	a5,4(s5)
    5050:	00472783          	lw	a5,4(a4)
    5054:	0017e793          	ori	a5,a5,1
    5058:	00f72223          	sw	a5,4(a4)
    505c:	00090513          	mv	a0,s2
    5060:	df5ff0ef          	jal	ra,4e54 <__malloc_unlock>
    5064:	00040493          	mv	s1,s0
    5068:	02c12083          	lw	ra,44(sp)
    506c:	02812403          	lw	s0,40(sp)
    5070:	02012903          	lw	s2,32(sp)
    5074:	01c12983          	lw	s3,28(sp)
    5078:	01812a03          	lw	s4,24(sp)
    507c:	01412a83          	lw	s5,20(sp)
    5080:	01012b03          	lw	s6,16(sp)
    5084:	00c12b83          	lw	s7,12(sp)
    5088:	00812c03          	lw	s8,8(sp)
    508c:	00048513          	mv	a0,s1
    5090:	02412483          	lw	s1,36(sp)
    5094:	03010113          	addi	sp,sp,48
    5098:	00008067          	ret
    509c:	00177713          	andi	a4,a4,1
    50a0:	ee0718e3          	bnez	a4,4f90 <_realloc_r+0xcc>
    50a4:	ff842b83          	lw	s7,-8(s0)
    50a8:	417a8bb3          	sub	s7,s5,s7
    50ac:	004ba703          	lw	a4,4(s7)
    50b0:	ffc77713          	andi	a4,a4,-4
    50b4:	ed5ff06f          	j	4f88 <_realloc_r+0xc4>
    50b8:	02812403          	lw	s0,40(sp)
    50bc:	02c12083          	lw	ra,44(sp)
    50c0:	02412483          	lw	s1,36(sp)
    50c4:	02012903          	lw	s2,32(sp)
    50c8:	01c12983          	lw	s3,28(sp)
    50cc:	01812a03          	lw	s4,24(sp)
    50d0:	01412a83          	lw	s5,20(sp)
    50d4:	01012b03          	lw	s6,16(sp)
    50d8:	00c12b83          	lw	s7,12(sp)
    50dc:	00812c03          	lw	s8,8(sp)
    50e0:	00060593          	mv	a1,a2
    50e4:	03010113          	addi	sp,sp,48
    50e8:	b04ff06f          	j	43ec <_malloc_r>
    50ec:	0147e7b3          	or	a5,a5,s4
    50f0:	00faa223          	sw	a5,4(s5)
    50f4:	014a85b3          	add	a1,s5,s4
    50f8:	0016e693          	ori	a3,a3,1
    50fc:	00d5a223          	sw	a3,4(a1)
    5100:	00472783          	lw	a5,4(a4)
    5104:	00858593          	addi	a1,a1,8
    5108:	00090513          	mv	a0,s2
    510c:	0017e793          	ori	a5,a5,1
    5110:	00f72223          	sw	a5,4(a4)
    5114:	9adfe0ef          	jal	ra,3ac0 <_free_r>
    5118:	f45ff06f          	j	505c <_realloc_r+0x198>
    511c:	ffc7f793          	andi	a5,a5,-4
    5120:	013786b3          	add	a3,a5,s3
    5124:	010a0613          	addi	a2,s4,16
    5128:	22c6de63          	bge	a3,a2,5364 <_realloc_r+0x4a0>
    512c:	00177713          	andi	a4,a4,1
    5130:	e60710e3          	bnez	a4,4f90 <_realloc_r+0xcc>
    5134:	ff842b83          	lw	s7,-8(s0)
    5138:	417a8bb3          	sub	s7,s5,s7
    513c:	004ba703          	lw	a4,4(s7)
    5140:	ffc77713          	andi	a4,a4,-4
    5144:	00e787b3          	add	a5,a5,a4
    5148:	01378b33          	add	s6,a5,s3
    514c:	e2cb4ee3          	blt	s6,a2,4f88 <_realloc_r+0xc4>
    5150:	00cba783          	lw	a5,12(s7)
    5154:	008ba703          	lw	a4,8(s7)
    5158:	ffc98613          	addi	a2,s3,-4
    515c:	02400693          	li	a3,36
    5160:	00f72623          	sw	a5,12(a4)
    5164:	00e7a423          	sw	a4,8(a5)
    5168:	008b8493          	addi	s1,s7,8
    516c:	26c6e263          	bltu	a3,a2,53d0 <_realloc_r+0x50c>
    5170:	01300713          	li	a4,19
    5174:	00048793          	mv	a5,s1
    5178:	02c77263          	bgeu	a4,a2,519c <_realloc_r+0x2d8>
    517c:	00042703          	lw	a4,0(s0)
    5180:	01b00793          	li	a5,27
    5184:	00eba423          	sw	a4,8(s7)
    5188:	00442703          	lw	a4,4(s0)
    518c:	00eba623          	sw	a4,12(s7)
    5190:	24c7e863          	bltu	a5,a2,53e0 <_realloc_r+0x51c>
    5194:	00840413          	addi	s0,s0,8
    5198:	010b8793          	addi	a5,s7,16
    519c:	00042703          	lw	a4,0(s0)
    51a0:	00e7a023          	sw	a4,0(a5)
    51a4:	00442703          	lw	a4,4(s0)
    51a8:	00e7a223          	sw	a4,4(a5)
    51ac:	00842703          	lw	a4,8(s0)
    51b0:	00e7a423          	sw	a4,8(a5)
    51b4:	014b8733          	add	a4,s7,s4
    51b8:	414b07b3          	sub	a5,s6,s4
    51bc:	00ec2423          	sw	a4,8(s8)
    51c0:	0017e793          	ori	a5,a5,1
    51c4:	00f72223          	sw	a5,4(a4)
    51c8:	004ba783          	lw	a5,4(s7)
    51cc:	00090513          	mv	a0,s2
    51d0:	0017f793          	andi	a5,a5,1
    51d4:	0147e7b3          	or	a5,a5,s4
    51d8:	00fba223          	sw	a5,4(s7)
    51dc:	c79ff0ef          	jal	ra,4e54 <__malloc_unlock>
    51e0:	e89ff06f          	j	5068 <_realloc_r+0x1a4>
    51e4:	00042683          	lw	a3,0(s0)
    51e8:	01b00713          	li	a4,27
    51ec:	00d52023          	sw	a3,0(a0)
    51f0:	00442683          	lw	a3,4(s0)
    51f4:	00d52223          	sw	a3,4(a0)
    51f8:	14c76663          	bltu	a4,a2,5344 <_realloc_r+0x480>
    51fc:	00840713          	addi	a4,s0,8
    5200:	00850793          	addi	a5,a0,8
    5204:	dd1ff06f          	j	4fd4 <_realloc_r+0x110>
    5208:	ffc52783          	lw	a5,-4(a0)
    520c:	ffc7f793          	andi	a5,a5,-4
    5210:	00f989b3          	add	s3,s3,a5
    5214:	e1dff06f          	j	5030 <_realloc_r+0x16c>
    5218:	00cba783          	lw	a5,12(s7)
    521c:	008ba703          	lw	a4,8(s7)
    5220:	ffc98613          	addi	a2,s3,-4
    5224:	02400693          	li	a3,36
    5228:	00f72623          	sw	a5,12(a4)
    522c:	00e7a423          	sw	a4,8(a5)
    5230:	008b8493          	addi	s1,s7,8
    5234:	10c6e063          	bltu	a3,a2,5334 <_realloc_r+0x470>
    5238:	01300713          	li	a4,19
    523c:	00048793          	mv	a5,s1
    5240:	02c77c63          	bgeu	a4,a2,5278 <_realloc_r+0x3b4>
    5244:	00042703          	lw	a4,0(s0)
    5248:	01b00793          	li	a5,27
    524c:	00eba423          	sw	a4,8(s7)
    5250:	00442703          	lw	a4,4(s0)
    5254:	00eba623          	sw	a4,12(s7)
    5258:	14c7f063          	bgeu	a5,a2,5398 <_realloc_r+0x4d4>
    525c:	00842783          	lw	a5,8(s0)
    5260:	00fba823          	sw	a5,16(s7)
    5264:	00c42783          	lw	a5,12(s0)
    5268:	00fbaa23          	sw	a5,20(s7)
    526c:	0ad60663          	beq	a2,a3,5318 <_realloc_r+0x454>
    5270:	01040413          	addi	s0,s0,16
    5274:	018b8793          	addi	a5,s7,24
    5278:	00042703          	lw	a4,0(s0)
    527c:	00e7a023          	sw	a4,0(a5)
    5280:	00442703          	lw	a4,4(s0)
    5284:	00e7a223          	sw	a4,4(a5)
    5288:	00842703          	lw	a4,8(s0)
    528c:	00e7a423          	sw	a4,8(a5)
    5290:	00048413          	mv	s0,s1
    5294:	000b0993          	mv	s3,s6
    5298:	000b8a93          	mv	s5,s7
    529c:	d95ff06f          	j	5030 <_realloc_r+0x16c>
    52a0:	00040593          	mv	a1,s0
    52a4:	9adff0ef          	jal	ra,4c50 <memmove>
    52a8:	d45ff06f          	j	4fec <_realloc_r+0x128>
    52ac:	00c6a783          	lw	a5,12(a3)
    52b0:	0086a703          	lw	a4,8(a3)
    52b4:	ffc98613          	addi	a2,s3,-4
    52b8:	02400693          	li	a3,36
    52bc:	00f72623          	sw	a5,12(a4)
    52c0:	00e7a423          	sw	a4,8(a5)
    52c4:	008ba703          	lw	a4,8(s7)
    52c8:	00cba783          	lw	a5,12(s7)
    52cc:	008b8493          	addi	s1,s7,8
    52d0:	00f72623          	sw	a5,12(a4)
    52d4:	00e7a423          	sw	a4,8(a5)
    52d8:	04c6ee63          	bltu	a3,a2,5334 <_realloc_r+0x470>
    52dc:	01300713          	li	a4,19
    52e0:	00048793          	mv	a5,s1
    52e4:	f8c77ae3          	bgeu	a4,a2,5278 <_realloc_r+0x3b4>
    52e8:	00042703          	lw	a4,0(s0)
    52ec:	01b00793          	li	a5,27
    52f0:	00eba423          	sw	a4,8(s7)
    52f4:	00442703          	lw	a4,4(s0)
    52f8:	00eba623          	sw	a4,12(s7)
    52fc:	08c7fe63          	bgeu	a5,a2,5398 <_realloc_r+0x4d4>
    5300:	00842703          	lw	a4,8(s0)
    5304:	02400793          	li	a5,36
    5308:	00eba823          	sw	a4,16(s7)
    530c:	00c42703          	lw	a4,12(s0)
    5310:	00ebaa23          	sw	a4,20(s7)
    5314:	f4f61ee3          	bne	a2,a5,5270 <_realloc_r+0x3ac>
    5318:	01042703          	lw	a4,16(s0)
    531c:	020b8793          	addi	a5,s7,32
    5320:	01840413          	addi	s0,s0,24
    5324:	00ebac23          	sw	a4,24(s7)
    5328:	ffc42703          	lw	a4,-4(s0)
    532c:	00ebae23          	sw	a4,28(s7)
    5330:	f49ff06f          	j	5278 <_realloc_r+0x3b4>
    5334:	00040593          	mv	a1,s0
    5338:	00048513          	mv	a0,s1
    533c:	915ff0ef          	jal	ra,4c50 <memmove>
    5340:	f51ff06f          	j	5290 <_realloc_r+0x3cc>
    5344:	00842703          	lw	a4,8(s0)
    5348:	00e52423          	sw	a4,8(a0)
    534c:	00c42703          	lw	a4,12(s0)
    5350:	00e52623          	sw	a4,12(a0)
    5354:	06f60063          	beq	a2,a5,53b4 <_realloc_r+0x4f0>
    5358:	01040713          	addi	a4,s0,16
    535c:	01050793          	addi	a5,a0,16
    5360:	c75ff06f          	j	4fd4 <_realloc_r+0x110>
    5364:	014a8ab3          	add	s5,s5,s4
    5368:	414687b3          	sub	a5,a3,s4
    536c:	015c2423          	sw	s5,8(s8)
    5370:	0017e793          	ori	a5,a5,1
    5374:	00faa223          	sw	a5,4(s5)
    5378:	ffc42783          	lw	a5,-4(s0)
    537c:	00090513          	mv	a0,s2
    5380:	00040493          	mv	s1,s0
    5384:	0017f793          	andi	a5,a5,1
    5388:	0147e7b3          	or	a5,a5,s4
    538c:	fef42e23          	sw	a5,-4(s0)
    5390:	ac5ff0ef          	jal	ra,4e54 <__malloc_unlock>
    5394:	cd5ff06f          	j	5068 <_realloc_r+0x1a4>
    5398:	00840413          	addi	s0,s0,8
    539c:	010b8793          	addi	a5,s7,16
    53a0:	ed9ff06f          	j	5278 <_realloc_r+0x3b4>
    53a4:	00090513          	mv	a0,s2
    53a8:	aadff0ef          	jal	ra,4e54 <__malloc_unlock>
    53ac:	00000493          	li	s1,0
    53b0:	cb9ff06f          	j	5068 <_realloc_r+0x1a4>
    53b4:	01042683          	lw	a3,16(s0)
    53b8:	01840713          	addi	a4,s0,24
    53bc:	01850793          	addi	a5,a0,24
    53c0:	00d52823          	sw	a3,16(a0)
    53c4:	01442683          	lw	a3,20(s0)
    53c8:	00d52a23          	sw	a3,20(a0)
    53cc:	c09ff06f          	j	4fd4 <_realloc_r+0x110>
    53d0:	00040593          	mv	a1,s0
    53d4:	00048513          	mv	a0,s1
    53d8:	879ff0ef          	jal	ra,4c50 <memmove>
    53dc:	dd9ff06f          	j	51b4 <_realloc_r+0x2f0>
    53e0:	00842783          	lw	a5,8(s0)
    53e4:	00fba823          	sw	a5,16(s7)
    53e8:	00c42783          	lw	a5,12(s0)
    53ec:	00fbaa23          	sw	a5,20(s7)
    53f0:	00d60863          	beq	a2,a3,5400 <_realloc_r+0x53c>
    53f4:	01040413          	addi	s0,s0,16
    53f8:	018b8793          	addi	a5,s7,24
    53fc:	da1ff06f          	j	519c <_realloc_r+0x2d8>
    5400:	01042703          	lw	a4,16(s0)
    5404:	020b8793          	addi	a5,s7,32
    5408:	01840413          	addi	s0,s0,24
    540c:	00ebac23          	sw	a4,24(s7)
    5410:	ffc42703          	lw	a4,-4(s0)
    5414:	00ebae23          	sw	a4,28(s7)
    5418:	d85ff06f          	j	519c <_realloc_r+0x2d8>

0000541c <_sbrk_r>:
    541c:	ff010113          	addi	sp,sp,-16
    5420:	00812423          	sw	s0,8(sp)
    5424:	00050413          	mv	s0,a0
    5428:	00058513          	mv	a0,a1
    542c:	00006797          	auipc	a5,0x6
    5430:	c807a623          	sw	zero,-884(a5) # b0b8 <errno>
    5434:	00112623          	sw	ra,12(sp)
    5438:	4a1010ef          	jal	ra,70d8 <_sbrk>
    543c:	fff00793          	li	a5,-1
    5440:	00f50a63          	beq	a0,a5,5454 <_sbrk_r+0x38>
    5444:	00c12083          	lw	ra,12(sp)
    5448:	00812403          	lw	s0,8(sp)
    544c:	01010113          	addi	sp,sp,16
    5450:	00008067          	ret
    5454:	00006797          	auipc	a5,0x6
    5458:	c647a783          	lw	a5,-924(a5) # b0b8 <errno>
    545c:	fe0784e3          	beqz	a5,5444 <_sbrk_r+0x28>
    5460:	00c12083          	lw	ra,12(sp)
    5464:	00f42023          	sw	a5,0(s0)
    5468:	00812403          	lw	s0,8(sp)
    546c:	01010113          	addi	sp,sp,16
    5470:	00008067          	ret

00005474 <_init_signal_r>:
    5474:	2dc52783          	lw	a5,732(a0)
    5478:	00078663          	beqz	a5,5484 <_init_signal_r+0x10>
    547c:	00000513          	li	a0,0
    5480:	00008067          	ret
    5484:	ff010113          	addi	sp,sp,-16
    5488:	08000593          	li	a1,128
    548c:	00812423          	sw	s0,8(sp)
    5490:	00112623          	sw	ra,12(sp)
    5494:	00050413          	mv	s0,a0
    5498:	f55fe0ef          	jal	ra,43ec <_malloc_r>
    549c:	2ca42e23          	sw	a0,732(s0)
    54a0:	02050463          	beqz	a0,54c8 <_init_signal_r+0x54>
    54a4:	08050793          	addi	a5,a0,128
    54a8:	00052023          	sw	zero,0(a0)
    54ac:	00450513          	addi	a0,a0,4
    54b0:	fef51ce3          	bne	a0,a5,54a8 <_init_signal_r+0x34>
    54b4:	00000513          	li	a0,0
    54b8:	00c12083          	lw	ra,12(sp)
    54bc:	00812403          	lw	s0,8(sp)
    54c0:	01010113          	addi	sp,sp,16
    54c4:	00008067          	ret
    54c8:	fff00513          	li	a0,-1
    54cc:	fedff06f          	j	54b8 <_init_signal_r+0x44>

000054d0 <_signal_r>:
    54d0:	fe010113          	addi	sp,sp,-32
    54d4:	00912a23          	sw	s1,20(sp)
    54d8:	00112e23          	sw	ra,28(sp)
    54dc:	00812c23          	sw	s0,24(sp)
    54e0:	01f00793          	li	a5,31
    54e4:	00050493          	mv	s1,a0
    54e8:	02b7ea63          	bltu	a5,a1,551c <_signal_r+0x4c>
    54ec:	2dc52783          	lw	a5,732(a0)
    54f0:	00058413          	mv	s0,a1
    54f4:	02078c63          	beqz	a5,552c <_signal_r+0x5c>
    54f8:	00241413          	slli	s0,s0,0x2
    54fc:	008787b3          	add	a5,a5,s0
    5500:	0007a503          	lw	a0,0(a5)
    5504:	00c7a023          	sw	a2,0(a5)
    5508:	01c12083          	lw	ra,28(sp)
    550c:	01812403          	lw	s0,24(sp)
    5510:	01412483          	lw	s1,20(sp)
    5514:	02010113          	addi	sp,sp,32
    5518:	00008067          	ret
    551c:	01600793          	li	a5,22
    5520:	00f52023          	sw	a5,0(a0)
    5524:	fff00513          	li	a0,-1
    5528:	fe1ff06f          	j	5508 <_signal_r+0x38>
    552c:	08000593          	li	a1,128
    5530:	00c12623          	sw	a2,12(sp)
    5534:	eb9fe0ef          	jal	ra,43ec <_malloc_r>
    5538:	2ca4ae23          	sw	a0,732(s1)
    553c:	00c12603          	lw	a2,12(sp)
    5540:	00050793          	mv	a5,a0
    5544:	00050713          	mv	a4,a0
    5548:	08050693          	addi	a3,a0,128
    554c:	fc050ce3          	beqz	a0,5524 <_signal_r+0x54>
    5550:	00072023          	sw	zero,0(a4)
    5554:	00470713          	addi	a4,a4,4
    5558:	fed71ce3          	bne	a4,a3,5550 <_signal_r+0x80>
    555c:	f9dff06f          	j	54f8 <_signal_r+0x28>

00005560 <_raise_r>:
    5560:	ff010113          	addi	sp,sp,-16
    5564:	00912223          	sw	s1,4(sp)
    5568:	00112623          	sw	ra,12(sp)
    556c:	00812423          	sw	s0,8(sp)
    5570:	01f00793          	li	a5,31
    5574:	00050493          	mv	s1,a0
    5578:	08b7ee63          	bltu	a5,a1,5614 <_raise_r+0xb4>
    557c:	2dc52783          	lw	a5,732(a0)
    5580:	00058413          	mv	s0,a1
    5584:	04078463          	beqz	a5,55cc <_raise_r+0x6c>
    5588:	00259713          	slli	a4,a1,0x2
    558c:	00e787b3          	add	a5,a5,a4
    5590:	0007a703          	lw	a4,0(a5)
    5594:	02070c63          	beqz	a4,55cc <_raise_r+0x6c>
    5598:	00100693          	li	a3,1
    559c:	00d70c63          	beq	a4,a3,55b4 <_raise_r+0x54>
    55a0:	fff00693          	li	a3,-1
    55a4:	04d70863          	beq	a4,a3,55f4 <_raise_r+0x94>
    55a8:	0007a023          	sw	zero,0(a5)
    55ac:	00058513          	mv	a0,a1
    55b0:	000700e7          	jalr	a4
    55b4:	00000513          	li	a0,0
    55b8:	00c12083          	lw	ra,12(sp)
    55bc:	00812403          	lw	s0,8(sp)
    55c0:	00412483          	lw	s1,4(sp)
    55c4:	01010113          	addi	sp,sp,16
    55c8:	00008067          	ret
    55cc:	00048513          	mv	a0,s1
    55d0:	420000ef          	jal	ra,59f0 <_getpid_r>
    55d4:	00040613          	mv	a2,s0
    55d8:	00812403          	lw	s0,8(sp)
    55dc:	00c12083          	lw	ra,12(sp)
    55e0:	00050593          	mv	a1,a0
    55e4:	00048513          	mv	a0,s1
    55e8:	00412483          	lw	s1,4(sp)
    55ec:	01010113          	addi	sp,sp,16
    55f0:	3a00006f          	j	5990 <_kill_r>
    55f4:	00c12083          	lw	ra,12(sp)
    55f8:	00812403          	lw	s0,8(sp)
    55fc:	01600793          	li	a5,22
    5600:	00f52023          	sw	a5,0(a0)
    5604:	00412483          	lw	s1,4(sp)
    5608:	00100513          	li	a0,1
    560c:	01010113          	addi	sp,sp,16
    5610:	00008067          	ret
    5614:	01600793          	li	a5,22
    5618:	00f52023          	sw	a5,0(a0)
    561c:	fff00513          	li	a0,-1
    5620:	f99ff06f          	j	55b8 <_raise_r+0x58>

00005624 <__sigtramp_r>:
    5624:	01f00793          	li	a5,31
    5628:	0cb7ea63          	bltu	a5,a1,56fc <__sigtramp_r+0xd8>
    562c:	2dc52783          	lw	a5,732(a0)
    5630:	ff010113          	addi	sp,sp,-16
    5634:	00812423          	sw	s0,8(sp)
    5638:	00912223          	sw	s1,4(sp)
    563c:	00112623          	sw	ra,12(sp)
    5640:	00058413          	mv	s0,a1
    5644:	00050493          	mv	s1,a0
    5648:	08078063          	beqz	a5,56c8 <__sigtramp_r+0xa4>
    564c:	00241713          	slli	a4,s0,0x2
    5650:	00e787b3          	add	a5,a5,a4
    5654:	0007a703          	lw	a4,0(a5)
    5658:	02070c63          	beqz	a4,5690 <__sigtramp_r+0x6c>
    565c:	fff00693          	li	a3,-1
    5660:	06d70063          	beq	a4,a3,56c0 <__sigtramp_r+0x9c>
    5664:	00100693          	li	a3,1
    5668:	04d70063          	beq	a4,a3,56a8 <__sigtramp_r+0x84>
    566c:	00040513          	mv	a0,s0
    5670:	0007a023          	sw	zero,0(a5)
    5674:	000700e7          	jalr	a4
    5678:	00000513          	li	a0,0
    567c:	00c12083          	lw	ra,12(sp)
    5680:	00812403          	lw	s0,8(sp)
    5684:	00412483          	lw	s1,4(sp)
    5688:	01010113          	addi	sp,sp,16
    568c:	00008067          	ret
    5690:	00c12083          	lw	ra,12(sp)
    5694:	00812403          	lw	s0,8(sp)
    5698:	00412483          	lw	s1,4(sp)
    569c:	00100513          	li	a0,1
    56a0:	01010113          	addi	sp,sp,16
    56a4:	00008067          	ret
    56a8:	00c12083          	lw	ra,12(sp)
    56ac:	00812403          	lw	s0,8(sp)
    56b0:	00412483          	lw	s1,4(sp)
    56b4:	00300513          	li	a0,3
    56b8:	01010113          	addi	sp,sp,16
    56bc:	00008067          	ret
    56c0:	00200513          	li	a0,2
    56c4:	fb9ff06f          	j	567c <__sigtramp_r+0x58>
    56c8:	08000593          	li	a1,128
    56cc:	d21fe0ef          	jal	ra,43ec <_malloc_r>
    56d0:	2ca4ae23          	sw	a0,732(s1)
    56d4:	00050793          	mv	a5,a0
    56d8:	00050e63          	beqz	a0,56f4 <__sigtramp_r+0xd0>
    56dc:	00050713          	mv	a4,a0
    56e0:	08050693          	addi	a3,a0,128
    56e4:	00072023          	sw	zero,0(a4)
    56e8:	00470713          	addi	a4,a4,4
    56ec:	fee69ce3          	bne	a3,a4,56e4 <__sigtramp_r+0xc0>
    56f0:	f5dff06f          	j	564c <__sigtramp_r+0x28>
    56f4:	fff00513          	li	a0,-1
    56f8:	f85ff06f          	j	567c <__sigtramp_r+0x58>
    56fc:	fff00513          	li	a0,-1
    5700:	00008067          	ret

00005704 <raise>:
    5704:	ff010113          	addi	sp,sp,-16
    5708:	00912223          	sw	s1,4(sp)
    570c:	00112623          	sw	ra,12(sp)
    5710:	00812423          	sw	s0,8(sp)
    5714:	01f00793          	li	a5,31
    5718:	8241a483          	lw	s1,-2012(gp) # 954c <_impure_ptr>
    571c:	08a7ec63          	bltu	a5,a0,57b4 <raise+0xb0>
    5720:	2dc4a783          	lw	a5,732(s1)
    5724:	00050413          	mv	s0,a0
    5728:	04078263          	beqz	a5,576c <raise+0x68>
    572c:	00251713          	slli	a4,a0,0x2
    5730:	00e787b3          	add	a5,a5,a4
    5734:	0007a703          	lw	a4,0(a5)
    5738:	02070a63          	beqz	a4,576c <raise+0x68>
    573c:	00100693          	li	a3,1
    5740:	00d70a63          	beq	a4,a3,5754 <raise+0x50>
    5744:	fff00693          	li	a3,-1
    5748:	04d70663          	beq	a4,a3,5794 <raise+0x90>
    574c:	0007a023          	sw	zero,0(a5)
    5750:	000700e7          	jalr	a4
    5754:	00000513          	li	a0,0
    5758:	00c12083          	lw	ra,12(sp)
    575c:	00812403          	lw	s0,8(sp)
    5760:	00412483          	lw	s1,4(sp)
    5764:	01010113          	addi	sp,sp,16
    5768:	00008067          	ret
    576c:	00048513          	mv	a0,s1
    5770:	280000ef          	jal	ra,59f0 <_getpid_r>
    5774:	00040613          	mv	a2,s0
    5778:	00812403          	lw	s0,8(sp)
    577c:	00c12083          	lw	ra,12(sp)
    5780:	00050593          	mv	a1,a0
    5784:	00048513          	mv	a0,s1
    5788:	00412483          	lw	s1,4(sp)
    578c:	01010113          	addi	sp,sp,16
    5790:	2000006f          	j	5990 <_kill_r>
    5794:	00c12083          	lw	ra,12(sp)
    5798:	00812403          	lw	s0,8(sp)
    579c:	01600793          	li	a5,22
    57a0:	00f4a023          	sw	a5,0(s1)
    57a4:	00100513          	li	a0,1
    57a8:	00412483          	lw	s1,4(sp)
    57ac:	01010113          	addi	sp,sp,16
    57b0:	00008067          	ret
    57b4:	01600793          	li	a5,22
    57b8:	00f4a023          	sw	a5,0(s1)
    57bc:	fff00513          	li	a0,-1
    57c0:	f99ff06f          	j	5758 <raise+0x54>

000057c4 <signal>:
    57c4:	ff010113          	addi	sp,sp,-16
    57c8:	01212023          	sw	s2,0(sp)
    57cc:	00112623          	sw	ra,12(sp)
    57d0:	00812423          	sw	s0,8(sp)
    57d4:	00912223          	sw	s1,4(sp)
    57d8:	01f00793          	li	a5,31
    57dc:	8241a903          	lw	s2,-2012(gp) # 954c <_impure_ptr>
    57e0:	02a7ee63          	bltu	a5,a0,581c <signal+0x58>
    57e4:	00050413          	mv	s0,a0
    57e8:	2dc92503          	lw	a0,732(s2)
    57ec:	00058493          	mv	s1,a1
    57f0:	02050e63          	beqz	a0,582c <signal+0x68>
    57f4:	00241413          	slli	s0,s0,0x2
    57f8:	008507b3          	add	a5,a0,s0
    57fc:	0007a503          	lw	a0,0(a5)
    5800:	0097a023          	sw	s1,0(a5)
    5804:	00c12083          	lw	ra,12(sp)
    5808:	00812403          	lw	s0,8(sp)
    580c:	00412483          	lw	s1,4(sp)
    5810:	00012903          	lw	s2,0(sp)
    5814:	01010113          	addi	sp,sp,16
    5818:	00008067          	ret
    581c:	01600793          	li	a5,22
    5820:	00f92023          	sw	a5,0(s2)
    5824:	fff00513          	li	a0,-1
    5828:	fddff06f          	j	5804 <signal+0x40>
    582c:	08000593          	li	a1,128
    5830:	00090513          	mv	a0,s2
    5834:	bb9fe0ef          	jal	ra,43ec <_malloc_r>
    5838:	2ca92e23          	sw	a0,732(s2)
    583c:	00050793          	mv	a5,a0
    5840:	08050713          	addi	a4,a0,128
    5844:	fe0500e3          	beqz	a0,5824 <signal+0x60>
    5848:	0007a023          	sw	zero,0(a5)
    584c:	00478793          	addi	a5,a5,4
    5850:	fee79ce3          	bne	a5,a4,5848 <signal+0x84>
    5854:	fa1ff06f          	j	57f4 <signal+0x30>

00005858 <_init_signal>:
    5858:	ff010113          	addi	sp,sp,-16
    585c:	00812423          	sw	s0,8(sp)
    5860:	8241a403          	lw	s0,-2012(gp) # 954c <_impure_ptr>
    5864:	2dc42783          	lw	a5,732(s0)
    5868:	00112623          	sw	ra,12(sp)
    586c:	00078c63          	beqz	a5,5884 <_init_signal+0x2c>
    5870:	00000513          	li	a0,0
    5874:	00c12083          	lw	ra,12(sp)
    5878:	00812403          	lw	s0,8(sp)
    587c:	01010113          	addi	sp,sp,16
    5880:	00008067          	ret
    5884:	08000593          	li	a1,128
    5888:	00040513          	mv	a0,s0
    588c:	b61fe0ef          	jal	ra,43ec <_malloc_r>
    5890:	2ca42e23          	sw	a0,732(s0)
    5894:	00050c63          	beqz	a0,58ac <_init_signal+0x54>
    5898:	08050793          	addi	a5,a0,128
    589c:	00052023          	sw	zero,0(a0)
    58a0:	00450513          	addi	a0,a0,4
    58a4:	fef51ce3          	bne	a0,a5,589c <_init_signal+0x44>
    58a8:	fc9ff06f          	j	5870 <_init_signal+0x18>
    58ac:	fff00513          	li	a0,-1
    58b0:	fc5ff06f          	j	5874 <_init_signal+0x1c>

000058b4 <__sigtramp>:
    58b4:	ff010113          	addi	sp,sp,-16
    58b8:	00912223          	sw	s1,4(sp)
    58bc:	00112623          	sw	ra,12(sp)
    58c0:	00812423          	sw	s0,8(sp)
    58c4:	01f00793          	li	a5,31
    58c8:	8241a483          	lw	s1,-2012(gp) # 954c <_impure_ptr>
    58cc:	0aa7ee63          	bltu	a5,a0,5988 <__sigtramp+0xd4>
    58d0:	2dc4a783          	lw	a5,732(s1)
    58d4:	00050413          	mv	s0,a0
    58d8:	08078063          	beqz	a5,5958 <__sigtramp+0xa4>
    58dc:	00241713          	slli	a4,s0,0x2
    58e0:	00e787b3          	add	a5,a5,a4
    58e4:	0007a703          	lw	a4,0(a5)
    58e8:	02070c63          	beqz	a4,5920 <__sigtramp+0x6c>
    58ec:	fff00693          	li	a3,-1
    58f0:	06d70063          	beq	a4,a3,5950 <__sigtramp+0x9c>
    58f4:	00100693          	li	a3,1
    58f8:	04d70063          	beq	a4,a3,5938 <__sigtramp+0x84>
    58fc:	00040513          	mv	a0,s0
    5900:	0007a023          	sw	zero,0(a5)
    5904:	000700e7          	jalr	a4
    5908:	00000513          	li	a0,0
    590c:	00c12083          	lw	ra,12(sp)
    5910:	00812403          	lw	s0,8(sp)
    5914:	00412483          	lw	s1,4(sp)
    5918:	01010113          	addi	sp,sp,16
    591c:	00008067          	ret
    5920:	00c12083          	lw	ra,12(sp)
    5924:	00812403          	lw	s0,8(sp)
    5928:	00412483          	lw	s1,4(sp)
    592c:	00100513          	li	a0,1
    5930:	01010113          	addi	sp,sp,16
    5934:	00008067          	ret
    5938:	00c12083          	lw	ra,12(sp)
    593c:	00812403          	lw	s0,8(sp)
    5940:	00412483          	lw	s1,4(sp)
    5944:	00300513          	li	a0,3
    5948:	01010113          	addi	sp,sp,16
    594c:	00008067          	ret
    5950:	00200513          	li	a0,2
    5954:	fb9ff06f          	j	590c <__sigtramp+0x58>
    5958:	08000593          	li	a1,128
    595c:	00048513          	mv	a0,s1
    5960:	a8dfe0ef          	jal	ra,43ec <_malloc_r>
    5964:	2ca4ae23          	sw	a0,732(s1)
    5968:	00050793          	mv	a5,a0
    596c:	00050e63          	beqz	a0,5988 <__sigtramp+0xd4>
    5970:	00050713          	mv	a4,a0
    5974:	08050693          	addi	a3,a0,128
    5978:	00072023          	sw	zero,0(a4)
    597c:	00470713          	addi	a4,a4,4
    5980:	fee69ce3          	bne	a3,a4,5978 <__sigtramp+0xc4>
    5984:	f59ff06f          	j	58dc <__sigtramp+0x28>
    5988:	fff00513          	li	a0,-1
    598c:	f81ff06f          	j	590c <__sigtramp+0x58>

00005990 <_kill_r>:
    5990:	ff010113          	addi	sp,sp,-16
    5994:	00058713          	mv	a4,a1
    5998:	00812423          	sw	s0,8(sp)
    599c:	00060593          	mv	a1,a2
    59a0:	00050413          	mv	s0,a0
    59a4:	00070513          	mv	a0,a4
    59a8:	00005797          	auipc	a5,0x5
    59ac:	7007a823          	sw	zero,1808(a5) # b0b8 <errno>
    59b0:	00112623          	sw	ra,12(sp)
    59b4:	110010ef          	jal	ra,6ac4 <_kill>
    59b8:	fff00793          	li	a5,-1
    59bc:	00f50a63          	beq	a0,a5,59d0 <_kill_r+0x40>
    59c0:	00c12083          	lw	ra,12(sp)
    59c4:	00812403          	lw	s0,8(sp)
    59c8:	01010113          	addi	sp,sp,16
    59cc:	00008067          	ret
    59d0:	00005797          	auipc	a5,0x5
    59d4:	6e87a783          	lw	a5,1768(a5) # b0b8 <errno>
    59d8:	fe0784e3          	beqz	a5,59c0 <_kill_r+0x30>
    59dc:	00c12083          	lw	ra,12(sp)
    59e0:	00f42023          	sw	a5,0(s0)
    59e4:	00812403          	lw	s0,8(sp)
    59e8:	01010113          	addi	sp,sp,16
    59ec:	00008067          	ret

000059f0 <_getpid_r>:
    59f0:	7210006f          	j	6910 <_getpid>

000059f4 <__sread>:
    59f4:	ff010113          	addi	sp,sp,-16
    59f8:	00812423          	sw	s0,8(sp)
    59fc:	00058413          	mv	s0,a1
    5a00:	00e59583          	lh	a1,14(a1)
    5a04:	00112623          	sw	ra,12(sp)
    5a08:	2dd000ef          	jal	ra,64e4 <_read_r>
    5a0c:	02054063          	bltz	a0,5a2c <__sread+0x38>
    5a10:	05042783          	lw	a5,80(s0)
    5a14:	00c12083          	lw	ra,12(sp)
    5a18:	00a787b3          	add	a5,a5,a0
    5a1c:	04f42823          	sw	a5,80(s0)
    5a20:	00812403          	lw	s0,8(sp)
    5a24:	01010113          	addi	sp,sp,16
    5a28:	00008067          	ret
    5a2c:	00c45783          	lhu	a5,12(s0)
    5a30:	fffff737          	lui	a4,0xfffff
    5a34:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5a38:	00e7f7b3          	and	a5,a5,a4
    5a3c:	00c12083          	lw	ra,12(sp)
    5a40:	00f41623          	sh	a5,12(s0)
    5a44:	00812403          	lw	s0,8(sp)
    5a48:	01010113          	addi	sp,sp,16
    5a4c:	00008067          	ret

00005a50 <__seofread>:
    5a50:	00000513          	li	a0,0
    5a54:	00008067          	ret

00005a58 <__swrite>:
    5a58:	00c59783          	lh	a5,12(a1)
    5a5c:	fe010113          	addi	sp,sp,-32
    5a60:	00812c23          	sw	s0,24(sp)
    5a64:	00912a23          	sw	s1,20(sp)
    5a68:	01212823          	sw	s2,16(sp)
    5a6c:	01312623          	sw	s3,12(sp)
    5a70:	00112e23          	sw	ra,28(sp)
    5a74:	1007f713          	andi	a4,a5,256
    5a78:	00058413          	mv	s0,a1
    5a7c:	00050493          	mv	s1,a0
    5a80:	00060913          	mv	s2,a2
    5a84:	00068993          	mv	s3,a3
    5a88:	04071063          	bnez	a4,5ac8 <__swrite+0x70>
    5a8c:	fffff737          	lui	a4,0xfffff
    5a90:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5a94:	00e7f7b3          	and	a5,a5,a4
    5a98:	00e41583          	lh	a1,14(s0)
    5a9c:	00f41623          	sh	a5,12(s0)
    5aa0:	01812403          	lw	s0,24(sp)
    5aa4:	01c12083          	lw	ra,28(sp)
    5aa8:	00098693          	mv	a3,s3
    5aac:	00090613          	mv	a2,s2
    5ab0:	00c12983          	lw	s3,12(sp)
    5ab4:	01012903          	lw	s2,16(sp)
    5ab8:	00048513          	mv	a0,s1
    5abc:	01412483          	lw	s1,20(sp)
    5ac0:	02010113          	addi	sp,sp,32
    5ac4:	eccfd06f          	j	3190 <_write_r>
    5ac8:	00e59583          	lh	a1,14(a1)
    5acc:	00200693          	li	a3,2
    5ad0:	00000613          	li	a2,0
    5ad4:	744000ef          	jal	ra,6218 <_lseek_r>
    5ad8:	00c41783          	lh	a5,12(s0)
    5adc:	fb1ff06f          	j	5a8c <__swrite+0x34>

00005ae0 <__sseek>:
    5ae0:	ff010113          	addi	sp,sp,-16
    5ae4:	00812423          	sw	s0,8(sp)
    5ae8:	00058413          	mv	s0,a1
    5aec:	00e59583          	lh	a1,14(a1)
    5af0:	00112623          	sw	ra,12(sp)
    5af4:	724000ef          	jal	ra,6218 <_lseek_r>
    5af8:	fff00793          	li	a5,-1
    5afc:	02f50863          	beq	a0,a5,5b2c <__sseek+0x4c>
    5b00:	00c45783          	lhu	a5,12(s0)
    5b04:	00001737          	lui	a4,0x1
    5b08:	00c12083          	lw	ra,12(sp)
    5b0c:	00e7e7b3          	or	a5,a5,a4
    5b10:	01079793          	slli	a5,a5,0x10
    5b14:	4107d793          	srai	a5,a5,0x10
    5b18:	04a42823          	sw	a0,80(s0)
    5b1c:	00f41623          	sh	a5,12(s0)
    5b20:	00812403          	lw	s0,8(sp)
    5b24:	01010113          	addi	sp,sp,16
    5b28:	00008067          	ret
    5b2c:	00c45783          	lhu	a5,12(s0)
    5b30:	fffff737          	lui	a4,0xfffff
    5b34:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5b38:	00e7f7b3          	and	a5,a5,a4
    5b3c:	01079793          	slli	a5,a5,0x10
    5b40:	4107d793          	srai	a5,a5,0x10
    5b44:	00c12083          	lw	ra,12(sp)
    5b48:	00f41623          	sh	a5,12(s0)
    5b4c:	00812403          	lw	s0,8(sp)
    5b50:	01010113          	addi	sp,sp,16
    5b54:	00008067          	ret

00005b58 <__sclose>:
    5b58:	00e59583          	lh	a1,14(a1)
    5b5c:	8d5fd06f          	j	3430 <_close_r>

00005b60 <__swsetup_r>:
    5b60:	ff010113          	addi	sp,sp,-16
    5b64:	00812423          	sw	s0,8(sp)
    5b68:	00912223          	sw	s1,4(sp)
    5b6c:	00112623          	sw	ra,12(sp)
    5b70:	8241a783          	lw	a5,-2012(gp) # 954c <_impure_ptr>
    5b74:	00050493          	mv	s1,a0
    5b78:	00058413          	mv	s0,a1
    5b7c:	00078663          	beqz	a5,5b88 <__swsetup_r+0x28>
    5b80:	0387a703          	lw	a4,56(a5)
    5b84:	08070063          	beqz	a4,5c04 <__swsetup_r+0xa4>
    5b88:	00c41783          	lh	a5,12(s0)
    5b8c:	0087f713          	andi	a4,a5,8
    5b90:	08070463          	beqz	a4,5c18 <__swsetup_r+0xb8>
    5b94:	01042703          	lw	a4,16(s0)
    5b98:	0a070063          	beqz	a4,5c38 <__swsetup_r+0xd8>
    5b9c:	0017f693          	andi	a3,a5,1
    5ba0:	02068863          	beqz	a3,5bd0 <__swsetup_r+0x70>
    5ba4:	01442683          	lw	a3,20(s0)
    5ba8:	00042423          	sw	zero,8(s0)
    5bac:	00000513          	li	a0,0
    5bb0:	40d006b3          	neg	a3,a3
    5bb4:	00d42c23          	sw	a3,24(s0)
    5bb8:	02070a63          	beqz	a4,5bec <__swsetup_r+0x8c>
    5bbc:	00c12083          	lw	ra,12(sp)
    5bc0:	00812403          	lw	s0,8(sp)
    5bc4:	00412483          	lw	s1,4(sp)
    5bc8:	01010113          	addi	sp,sp,16
    5bcc:	00008067          	ret
    5bd0:	0027f693          	andi	a3,a5,2
    5bd4:	00000613          	li	a2,0
    5bd8:	00069463          	bnez	a3,5be0 <__swsetup_r+0x80>
    5bdc:	01442603          	lw	a2,20(s0)
    5be0:	00c42423          	sw	a2,8(s0)
    5be4:	00000513          	li	a0,0
    5be8:	fc071ae3          	bnez	a4,5bbc <__swsetup_r+0x5c>
    5bec:	0807f713          	andi	a4,a5,128
    5bf0:	fc0706e3          	beqz	a4,5bbc <__swsetup_r+0x5c>
    5bf4:	0407e793          	ori	a5,a5,64
    5bf8:	00f41623          	sh	a5,12(s0)
    5bfc:	fff00513          	li	a0,-1
    5c00:	fbdff06f          	j	5bbc <__swsetup_r+0x5c>
    5c04:	00078513          	mv	a0,a5
    5c08:	98dfd0ef          	jal	ra,3594 <__sinit>
    5c0c:	00c41783          	lh	a5,12(s0)
    5c10:	0087f713          	andi	a4,a5,8
    5c14:	f80710e3          	bnez	a4,5b94 <__swsetup_r+0x34>
    5c18:	0107f713          	andi	a4,a5,16
    5c1c:	06070a63          	beqz	a4,5c90 <__swsetup_r+0x130>
    5c20:	0047f713          	andi	a4,a5,4
    5c24:	02071c63          	bnez	a4,5c5c <__swsetup_r+0xfc>
    5c28:	01042703          	lw	a4,16(s0)
    5c2c:	0087e793          	ori	a5,a5,8
    5c30:	00f41623          	sh	a5,12(s0)
    5c34:	f60714e3          	bnez	a4,5b9c <__swsetup_r+0x3c>
    5c38:	2807f693          	andi	a3,a5,640
    5c3c:	20000613          	li	a2,512
    5c40:	f4c68ee3          	beq	a3,a2,5b9c <__swsetup_r+0x3c>
    5c44:	00040593          	mv	a1,s0
    5c48:	00048513          	mv	a0,s1
    5c4c:	630000ef          	jal	ra,627c <__smakebuf_r>
    5c50:	00c41783          	lh	a5,12(s0)
    5c54:	01042703          	lw	a4,16(s0)
    5c58:	f45ff06f          	j	5b9c <__swsetup_r+0x3c>
    5c5c:	03042583          	lw	a1,48(s0)
    5c60:	00058e63          	beqz	a1,5c7c <__swsetup_r+0x11c>
    5c64:	04040713          	addi	a4,s0,64
    5c68:	00e58863          	beq	a1,a4,5c78 <__swsetup_r+0x118>
    5c6c:	00048513          	mv	a0,s1
    5c70:	e51fd0ef          	jal	ra,3ac0 <_free_r>
    5c74:	00c41783          	lh	a5,12(s0)
    5c78:	02042823          	sw	zero,48(s0)
    5c7c:	01042703          	lw	a4,16(s0)
    5c80:	fdb7f793          	andi	a5,a5,-37
    5c84:	00042223          	sw	zero,4(s0)
    5c88:	00e42023          	sw	a4,0(s0)
    5c8c:	fa1ff06f          	j	5c2c <__swsetup_r+0xcc>
    5c90:	00900713          	li	a4,9
    5c94:	00e4a023          	sw	a4,0(s1)
    5c98:	0407e793          	ori	a5,a5,64
    5c9c:	f5dff06f          	j	5bf8 <__swsetup_r+0x98>

00005ca0 <_fclose_r>:
    5ca0:	ff010113          	addi	sp,sp,-16
    5ca4:	00112623          	sw	ra,12(sp)
    5ca8:	00812423          	sw	s0,8(sp)
    5cac:	00912223          	sw	s1,4(sp)
    5cb0:	01212023          	sw	s2,0(sp)
    5cb4:	0c058a63          	beqz	a1,5d88 <_fclose_r+0xe8>
    5cb8:	00058413          	mv	s0,a1
    5cbc:	00050493          	mv	s1,a0
    5cc0:	00050663          	beqz	a0,5ccc <_fclose_r+0x2c>
    5cc4:	03852783          	lw	a5,56(a0)
    5cc8:	0e078063          	beqz	a5,5da8 <_fclose_r+0x108>
    5ccc:	06442783          	lw	a5,100(s0)
    5cd0:	00c41703          	lh	a4,12(s0)
    5cd4:	0017f793          	andi	a5,a5,1
    5cd8:	0a079663          	bnez	a5,5d84 <_fclose_r+0xe4>
    5cdc:	20077713          	andi	a4,a4,512
    5ce0:	10070063          	beqz	a4,5de0 <_fclose_r+0x140>
    5ce4:	00040593          	mv	a1,s0
    5ce8:	00048513          	mv	a0,s1
    5cec:	138000ef          	jal	ra,5e24 <__sflush_r>
    5cf0:	02c42783          	lw	a5,44(s0)
    5cf4:	00050913          	mv	s2,a0
    5cf8:	00078a63          	beqz	a5,5d0c <_fclose_r+0x6c>
    5cfc:	01c42583          	lw	a1,28(s0)
    5d00:	00048513          	mv	a0,s1
    5d04:	000780e7          	jalr	a5
    5d08:	0a054c63          	bltz	a0,5dc0 <_fclose_r+0x120>
    5d0c:	00c45783          	lhu	a5,12(s0)
    5d10:	0807f793          	andi	a5,a5,128
    5d14:	0a079e63          	bnez	a5,5dd0 <_fclose_r+0x130>
    5d18:	03042583          	lw	a1,48(s0)
    5d1c:	00058c63          	beqz	a1,5d34 <_fclose_r+0x94>
    5d20:	04040793          	addi	a5,s0,64
    5d24:	00f58663          	beq	a1,a5,5d30 <_fclose_r+0x90>
    5d28:	00048513          	mv	a0,s1
    5d2c:	d95fd0ef          	jal	ra,3ac0 <_free_r>
    5d30:	02042823          	sw	zero,48(s0)
    5d34:	04442583          	lw	a1,68(s0)
    5d38:	00058863          	beqz	a1,5d48 <_fclose_r+0xa8>
    5d3c:	00048513          	mv	a0,s1
    5d40:	d81fd0ef          	jal	ra,3ac0 <_free_r>
    5d44:	04042223          	sw	zero,68(s0)
    5d48:	b59fd0ef          	jal	ra,38a0 <__sfp_lock_acquire>
    5d4c:	06442783          	lw	a5,100(s0)
    5d50:	00041623          	sh	zero,12(s0)
    5d54:	0017f793          	andi	a5,a5,1
    5d58:	0a078a63          	beqz	a5,5e0c <_fclose_r+0x16c>
    5d5c:	05842503          	lw	a0,88(s0)
    5d60:	e68fe0ef          	jal	ra,43c8 <__retarget_lock_close_recursive>
    5d64:	b49fd0ef          	jal	ra,38ac <__sfp_lock_release>
    5d68:	00c12083          	lw	ra,12(sp)
    5d6c:	00812403          	lw	s0,8(sp)
    5d70:	00412483          	lw	s1,4(sp)
    5d74:	00090513          	mv	a0,s2
    5d78:	00012903          	lw	s2,0(sp)
    5d7c:	01010113          	addi	sp,sp,16
    5d80:	00008067          	ret
    5d84:	f60710e3          	bnez	a4,5ce4 <_fclose_r+0x44>
    5d88:	00000913          	li	s2,0
    5d8c:	00c12083          	lw	ra,12(sp)
    5d90:	00812403          	lw	s0,8(sp)
    5d94:	00412483          	lw	s1,4(sp)
    5d98:	00090513          	mv	a0,s2
    5d9c:	00012903          	lw	s2,0(sp)
    5da0:	01010113          	addi	sp,sp,16
    5da4:	00008067          	ret
    5da8:	fecfd0ef          	jal	ra,3594 <__sinit>
    5dac:	06442783          	lw	a5,100(s0)
    5db0:	00c41703          	lh	a4,12(s0)
    5db4:	0017f793          	andi	a5,a5,1
    5db8:	fc0796e3          	bnez	a5,5d84 <_fclose_r+0xe4>
    5dbc:	f21ff06f          	j	5cdc <_fclose_r+0x3c>
    5dc0:	00c45783          	lhu	a5,12(s0)
    5dc4:	fff00913          	li	s2,-1
    5dc8:	0807f793          	andi	a5,a5,128
    5dcc:	f40786e3          	beqz	a5,5d18 <_fclose_r+0x78>
    5dd0:	01042583          	lw	a1,16(s0)
    5dd4:	00048513          	mv	a0,s1
    5dd8:	ce9fd0ef          	jal	ra,3ac0 <_free_r>
    5ddc:	f3dff06f          	j	5d18 <_fclose_r+0x78>
    5de0:	05842503          	lw	a0,88(s0)
    5de4:	decfe0ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    5de8:	00c41783          	lh	a5,12(s0)
    5dec:	ee079ce3          	bnez	a5,5ce4 <_fclose_r+0x44>
    5df0:	06442783          	lw	a5,100(s0)
    5df4:	0017f793          	andi	a5,a5,1
    5df8:	f80798e3          	bnez	a5,5d88 <_fclose_r+0xe8>
    5dfc:	05842503          	lw	a0,88(s0)
    5e00:	00000913          	li	s2,0
    5e04:	de4fe0ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    5e08:	f85ff06f          	j	5d8c <_fclose_r+0xec>
    5e0c:	05842503          	lw	a0,88(s0)
    5e10:	dd8fe0ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    5e14:	f49ff06f          	j	5d5c <_fclose_r+0xbc>

00005e18 <fclose>:
    5e18:	00050593          	mv	a1,a0
    5e1c:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    5e20:	e81ff06f          	j	5ca0 <_fclose_r>

00005e24 <__sflush_r>:
    5e24:	00c59783          	lh	a5,12(a1)
    5e28:	fe010113          	addi	sp,sp,-32
    5e2c:	00812c23          	sw	s0,24(sp)
    5e30:	01312623          	sw	s3,12(sp)
    5e34:	00112e23          	sw	ra,28(sp)
    5e38:	00912a23          	sw	s1,20(sp)
    5e3c:	01212823          	sw	s2,16(sp)
    5e40:	0087f713          	andi	a4,a5,8
    5e44:	00058413          	mv	s0,a1
    5e48:	00050993          	mv	s3,a0
    5e4c:	12071263          	bnez	a4,5f70 <__sflush_r+0x14c>
    5e50:	00001737          	lui	a4,0x1
    5e54:	80070713          	addi	a4,a4,-2048 # 800 <alt_log_private_printf+0x214>
    5e58:	0045a683          	lw	a3,4(a1)
    5e5c:	00e7e733          	or	a4,a5,a4
    5e60:	00e59623          	sh	a4,12(a1)
    5e64:	18d05863          	blez	a3,5ff4 <__sflush_r+0x1d0>
    5e68:	02842803          	lw	a6,40(s0)
    5e6c:	0e080263          	beqz	a6,5f50 <__sflush_r+0x12c>
    5e70:	00c7d793          	srli	a5,a5,0xc
    5e74:	0009a483          	lw	s1,0(s3)
    5e78:	0017f793          	andi	a5,a5,1
    5e7c:	0009a023          	sw	zero,0(s3)
    5e80:	01c42583          	lw	a1,28(s0)
    5e84:	18079063          	bnez	a5,6004 <__sflush_r+0x1e0>
    5e88:	00000613          	li	a2,0
    5e8c:	00100693          	li	a3,1
    5e90:	00098513          	mv	a0,s3
    5e94:	000800e7          	jalr	a6
    5e98:	fff00793          	li	a5,-1
    5e9c:	00050613          	mv	a2,a0
    5ea0:	1af50063          	beq	a0,a5,6040 <__sflush_r+0x21c>
    5ea4:	00c41703          	lh	a4,12(s0)
    5ea8:	02842803          	lw	a6,40(s0)
    5eac:	01c42583          	lw	a1,28(s0)
    5eb0:	00477713          	andi	a4,a4,4
    5eb4:	00070e63          	beqz	a4,5ed0 <__sflush_r+0xac>
    5eb8:	00442703          	lw	a4,4(s0)
    5ebc:	03042783          	lw	a5,48(s0)
    5ec0:	40e60633          	sub	a2,a2,a4
    5ec4:	00078663          	beqz	a5,5ed0 <__sflush_r+0xac>
    5ec8:	03c42783          	lw	a5,60(s0)
    5ecc:	40f60633          	sub	a2,a2,a5
    5ed0:	00000693          	li	a3,0
    5ed4:	00098513          	mv	a0,s3
    5ed8:	000800e7          	jalr	a6
    5edc:	fff00793          	li	a5,-1
    5ee0:	12f51663          	bne	a0,a5,600c <__sflush_r+0x1e8>
    5ee4:	0009a683          	lw	a3,0(s3)
    5ee8:	01d00793          	li	a5,29
    5eec:	0cd7ee63          	bltu	a5,a3,5fc8 <__sflush_r+0x1a4>
    5ef0:	dfc00737          	lui	a4,0xdfc00
    5ef4:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xdfbefffe>
    5ef8:	40d75733          	sra	a4,a4,a3
    5efc:	00177713          	andi	a4,a4,1
    5f00:	00c41783          	lh	a5,12(s0)
    5f04:	0c071463          	bnez	a4,5fcc <__sflush_r+0x1a8>
    5f08:	01042603          	lw	a2,16(s0)
    5f0c:	fffff737          	lui	a4,0xfffff
    5f10:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    5f14:	00e7f733          	and	a4,a5,a4
    5f18:	00c7d793          	srli	a5,a5,0xc
    5f1c:	00e41623          	sh	a4,12(s0)
    5f20:	00042223          	sw	zero,4(s0)
    5f24:	00c42023          	sw	a2,0(s0)
    5f28:	0017f793          	andi	a5,a5,1
    5f2c:	12079c63          	bnez	a5,6064 <__sflush_r+0x240>
    5f30:	03042583          	lw	a1,48(s0)
    5f34:	0099a023          	sw	s1,0(s3)
    5f38:	00058c63          	beqz	a1,5f50 <__sflush_r+0x12c>
    5f3c:	04040793          	addi	a5,s0,64
    5f40:	00f58663          	beq	a1,a5,5f4c <__sflush_r+0x128>
    5f44:	00098513          	mv	a0,s3
    5f48:	b79fd0ef          	jal	ra,3ac0 <_free_r>
    5f4c:	02042823          	sw	zero,48(s0)
    5f50:	00000513          	li	a0,0
    5f54:	01c12083          	lw	ra,28(sp)
    5f58:	01812403          	lw	s0,24(sp)
    5f5c:	01412483          	lw	s1,20(sp)
    5f60:	01012903          	lw	s2,16(sp)
    5f64:	00c12983          	lw	s3,12(sp)
    5f68:	02010113          	addi	sp,sp,32
    5f6c:	00008067          	ret
    5f70:	0105a903          	lw	s2,16(a1)
    5f74:	fc090ee3          	beqz	s2,5f50 <__sflush_r+0x12c>
    5f78:	0005a483          	lw	s1,0(a1)
    5f7c:	0037f793          	andi	a5,a5,3
    5f80:	0125a023          	sw	s2,0(a1)
    5f84:	412484b3          	sub	s1,s1,s2
    5f88:	00000713          	li	a4,0
    5f8c:	00079463          	bnez	a5,5f94 <__sflush_r+0x170>
    5f90:	0145a703          	lw	a4,20(a1)
    5f94:	00e42423          	sw	a4,8(s0)
    5f98:	00904863          	bgtz	s1,5fa8 <__sflush_r+0x184>
    5f9c:	fb5ff06f          	j	5f50 <__sflush_r+0x12c>
    5fa0:	00a90933          	add	s2,s2,a0
    5fa4:	fa9056e3          	blez	s1,5f50 <__sflush_r+0x12c>
    5fa8:	02442783          	lw	a5,36(s0)
    5fac:	01c42583          	lw	a1,28(s0)
    5fb0:	00048693          	mv	a3,s1
    5fb4:	00090613          	mv	a2,s2
    5fb8:	00098513          	mv	a0,s3
    5fbc:	000780e7          	jalr	a5
    5fc0:	40a484b3          	sub	s1,s1,a0
    5fc4:	fca04ee3          	bgtz	a0,5fa0 <__sflush_r+0x17c>
    5fc8:	00c41783          	lh	a5,12(s0)
    5fcc:	0407e793          	ori	a5,a5,64
    5fd0:	01c12083          	lw	ra,28(sp)
    5fd4:	00f41623          	sh	a5,12(s0)
    5fd8:	01812403          	lw	s0,24(sp)
    5fdc:	01412483          	lw	s1,20(sp)
    5fe0:	01012903          	lw	s2,16(sp)
    5fe4:	00c12983          	lw	s3,12(sp)
    5fe8:	fff00513          	li	a0,-1
    5fec:	02010113          	addi	sp,sp,32
    5ff0:	00008067          	ret
    5ff4:	03c5a683          	lw	a3,60(a1)
    5ff8:	e6d048e3          	bgtz	a3,5e68 <__sflush_r+0x44>
    5ffc:	00000513          	li	a0,0
    6000:	f55ff06f          	j	5f54 <__sflush_r+0x130>
    6004:	05042603          	lw	a2,80(s0)
    6008:	ea9ff06f          	j	5eb0 <__sflush_r+0x8c>
    600c:	00c41783          	lh	a5,12(s0)
    6010:	01042683          	lw	a3,16(s0)
    6014:	fffff737          	lui	a4,0xfffff
    6018:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    601c:	00e7f733          	and	a4,a5,a4
    6020:	00c7d793          	srli	a5,a5,0xc
    6024:	00e41623          	sh	a4,12(s0)
    6028:	00042223          	sw	zero,4(s0)
    602c:	00d42023          	sw	a3,0(s0)
    6030:	0017f793          	andi	a5,a5,1
    6034:	ee078ee3          	beqz	a5,5f30 <__sflush_r+0x10c>
    6038:	04a42823          	sw	a0,80(s0)
    603c:	ef5ff06f          	j	5f30 <__sflush_r+0x10c>
    6040:	0009a783          	lw	a5,0(s3)
    6044:	e60780e3          	beqz	a5,5ea4 <__sflush_r+0x80>
    6048:	01d00713          	li	a4,29
    604c:	00e78663          	beq	a5,a4,6058 <__sflush_r+0x234>
    6050:	01600713          	li	a4,22
    6054:	f6e79ae3          	bne	a5,a4,5fc8 <__sflush_r+0x1a4>
    6058:	0099a023          	sw	s1,0(s3)
    605c:	00000513          	li	a0,0
    6060:	ef5ff06f          	j	5f54 <__sflush_r+0x130>
    6064:	ec0696e3          	bnez	a3,5f30 <__sflush_r+0x10c>
    6068:	04a42823          	sw	a0,80(s0)
    606c:	ec5ff06f          	j	5f30 <__sflush_r+0x10c>

00006070 <_fflush_r>:
    6070:	ff010113          	addi	sp,sp,-16
    6074:	00812423          	sw	s0,8(sp)
    6078:	00912223          	sw	s1,4(sp)
    607c:	00112623          	sw	ra,12(sp)
    6080:	01212023          	sw	s2,0(sp)
    6084:	00050493          	mv	s1,a0
    6088:	00058413          	mv	s0,a1
    608c:	00050663          	beqz	a0,6098 <_fflush_r+0x28>
    6090:	03852783          	lw	a5,56(a0)
    6094:	06078463          	beqz	a5,60fc <_fflush_r+0x8c>
    6098:	00c41783          	lh	a5,12(s0)
    609c:	00000913          	li	s2,0
    60a0:	04078063          	beqz	a5,60e0 <_fflush_r+0x70>
    60a4:	06442703          	lw	a4,100(s0)
    60a8:	00177713          	andi	a4,a4,1
    60ac:	00071663          	bnez	a4,60b8 <_fflush_r+0x48>
    60b0:	2007f793          	andi	a5,a5,512
    60b4:	04078863          	beqz	a5,6104 <_fflush_r+0x94>
    60b8:	00040593          	mv	a1,s0
    60bc:	00048513          	mv	a0,s1
    60c0:	d65ff0ef          	jal	ra,5e24 <__sflush_r>
    60c4:	06442783          	lw	a5,100(s0)
    60c8:	00050913          	mv	s2,a0
    60cc:	0017f793          	andi	a5,a5,1
    60d0:	00079863          	bnez	a5,60e0 <_fflush_r+0x70>
    60d4:	00c45783          	lhu	a5,12(s0)
    60d8:	2007f793          	andi	a5,a5,512
    60dc:	04078863          	beqz	a5,612c <_fflush_r+0xbc>
    60e0:	00c12083          	lw	ra,12(sp)
    60e4:	00812403          	lw	s0,8(sp)
    60e8:	00412483          	lw	s1,4(sp)
    60ec:	00090513          	mv	a0,s2
    60f0:	00012903          	lw	s2,0(sp)
    60f4:	01010113          	addi	sp,sp,16
    60f8:	00008067          	ret
    60fc:	c98fd0ef          	jal	ra,3594 <__sinit>
    6100:	f99ff06f          	j	6098 <_fflush_r+0x28>
    6104:	05842503          	lw	a0,88(s0)
    6108:	ac8fe0ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    610c:	00040593          	mv	a1,s0
    6110:	00048513          	mv	a0,s1
    6114:	d11ff0ef          	jal	ra,5e24 <__sflush_r>
    6118:	06442783          	lw	a5,100(s0)
    611c:	00050913          	mv	s2,a0
    6120:	0017f793          	andi	a5,a5,1
    6124:	fa079ee3          	bnez	a5,60e0 <_fflush_r+0x70>
    6128:	fadff06f          	j	60d4 <_fflush_r+0x64>
    612c:	05842503          	lw	a0,88(s0)
    6130:	ab8fe0ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    6134:	00c12083          	lw	ra,12(sp)
    6138:	00812403          	lw	s0,8(sp)
    613c:	00412483          	lw	s1,4(sp)
    6140:	00090513          	mv	a0,s2
    6144:	00012903          	lw	s2,0(sp)
    6148:	01010113          	addi	sp,sp,16
    614c:	00008067          	ret

00006150 <fflush>:
    6150:	0a050a63          	beqz	a0,6204 <fflush+0xb4>
    6154:	ff010113          	addi	sp,sp,-16
    6158:	00812423          	sw	s0,8(sp)
    615c:	01212023          	sw	s2,0(sp)
    6160:	00112623          	sw	ra,12(sp)
    6164:	00912223          	sw	s1,4(sp)
    6168:	8241a903          	lw	s2,-2012(gp) # 954c <_impure_ptr>
    616c:	00050413          	mv	s0,a0
    6170:	00090663          	beqz	s2,617c <fflush+0x2c>
    6174:	03892783          	lw	a5,56(s2)
    6178:	06078463          	beqz	a5,61e0 <fflush+0x90>
    617c:	00c41783          	lh	a5,12(s0)
    6180:	00000493          	li	s1,0
    6184:	04078063          	beqz	a5,61c4 <fflush+0x74>
    6188:	06442703          	lw	a4,100(s0)
    618c:	00177713          	andi	a4,a4,1
    6190:	00071663          	bnez	a4,619c <fflush+0x4c>
    6194:	2007f793          	andi	a5,a5,512
    6198:	04078a63          	beqz	a5,61ec <fflush+0x9c>
    619c:	00040593          	mv	a1,s0
    61a0:	00090513          	mv	a0,s2
    61a4:	c81ff0ef          	jal	ra,5e24 <__sflush_r>
    61a8:	06442783          	lw	a5,100(s0)
    61ac:	00050493          	mv	s1,a0
    61b0:	0017f793          	andi	a5,a5,1
    61b4:	00079863          	bnez	a5,61c4 <fflush+0x74>
    61b8:	00c45783          	lhu	a5,12(s0)
    61bc:	2007f793          	andi	a5,a5,512
    61c0:	02078c63          	beqz	a5,61f8 <fflush+0xa8>
    61c4:	00c12083          	lw	ra,12(sp)
    61c8:	00812403          	lw	s0,8(sp)
    61cc:	00012903          	lw	s2,0(sp)
    61d0:	00048513          	mv	a0,s1
    61d4:	00412483          	lw	s1,4(sp)
    61d8:	01010113          	addi	sp,sp,16
    61dc:	00008067          	ret
    61e0:	00090513          	mv	a0,s2
    61e4:	bb0fd0ef          	jal	ra,3594 <__sinit>
    61e8:	f95ff06f          	j	617c <fflush+0x2c>
    61ec:	05842503          	lw	a0,88(s0)
    61f0:	9e0fe0ef          	jal	ra,43d0 <__retarget_lock_acquire_recursive>
    61f4:	fa9ff06f          	j	619c <fflush+0x4c>
    61f8:	05842503          	lw	a0,88(s0)
    61fc:	9ecfe0ef          	jal	ra,43e8 <__retarget_lock_release_recursive>
    6200:	fc5ff06f          	j	61c4 <fflush+0x74>
    6204:	00000597          	auipc	a1,0x0
    6208:	e6c58593          	addi	a1,a1,-404 # 6070 <_fflush_r>
    620c:	00002517          	auipc	a0,0x2
    6210:	84052503          	lw	a0,-1984(a0) # 7a4c <_global_impure_ptr>
    6214:	8f4fe06f          	j	4308 <_fwalk_reent>

00006218 <_lseek_r>:
    6218:	ff010113          	addi	sp,sp,-16
    621c:	00058713          	mv	a4,a1
    6220:	00812423          	sw	s0,8(sp)
    6224:	00060593          	mv	a1,a2
    6228:	00050413          	mv	s0,a0
    622c:	00068613          	mv	a2,a3
    6230:	00070513          	mv	a0,a4
    6234:	00005797          	auipc	a5,0x5
    6238:	e807a223          	sw	zero,-380(a5) # b0b8 <errno>
    623c:	00112623          	sw	ra,12(sp)
    6240:	1c5000ef          	jal	ra,6c04 <_lseek>
    6244:	fff00793          	li	a5,-1
    6248:	00f50a63          	beq	a0,a5,625c <_lseek_r+0x44>
    624c:	00c12083          	lw	ra,12(sp)
    6250:	00812403          	lw	s0,8(sp)
    6254:	01010113          	addi	sp,sp,16
    6258:	00008067          	ret
    625c:	00005797          	auipc	a5,0x5
    6260:	e5c7a783          	lw	a5,-420(a5) # b0b8 <errno>
    6264:	fe0784e3          	beqz	a5,624c <_lseek_r+0x34>
    6268:	00c12083          	lw	ra,12(sp)
    626c:	00f42023          	sw	a5,0(s0)
    6270:	00812403          	lw	s0,8(sp)
    6274:	01010113          	addi	sp,sp,16
    6278:	00008067          	ret

0000627c <__smakebuf_r>:
    627c:	00c59783          	lh	a5,12(a1)
    6280:	f8010113          	addi	sp,sp,-128
    6284:	06812c23          	sw	s0,120(sp)
    6288:	06112e23          	sw	ra,124(sp)
    628c:	06912a23          	sw	s1,116(sp)
    6290:	07212823          	sw	s2,112(sp)
    6294:	07312623          	sw	s3,108(sp)
    6298:	07412423          	sw	s4,104(sp)
    629c:	0027f713          	andi	a4,a5,2
    62a0:	00058413          	mv	s0,a1
    62a4:	02070c63          	beqz	a4,62dc <__smakebuf_r+0x60>
    62a8:	04358793          	addi	a5,a1,67
    62ac:	00f5a023          	sw	a5,0(a1)
    62b0:	00f5a823          	sw	a5,16(a1)
    62b4:	00100793          	li	a5,1
    62b8:	00f5aa23          	sw	a5,20(a1)
    62bc:	07c12083          	lw	ra,124(sp)
    62c0:	07812403          	lw	s0,120(sp)
    62c4:	07412483          	lw	s1,116(sp)
    62c8:	07012903          	lw	s2,112(sp)
    62cc:	06c12983          	lw	s3,108(sp)
    62d0:	06812a03          	lw	s4,104(sp)
    62d4:	08010113          	addi	sp,sp,128
    62d8:	00008067          	ret
    62dc:	00e59583          	lh	a1,14(a1)
    62e0:	00050493          	mv	s1,a0
    62e4:	0805cc63          	bltz	a1,637c <__smakebuf_r+0x100>
    62e8:	00810613          	addi	a2,sp,8
    62ec:	25c000ef          	jal	ra,6548 <_fstat_r>
    62f0:	08054463          	bltz	a0,6378 <__smakebuf_r+0xfc>
    62f4:	00c12783          	lw	a5,12(sp)
    62f8:	0000f937          	lui	s2,0xf
    62fc:	00001a37          	lui	s4,0x1
    6300:	00f97933          	and	s2,s2,a5
    6304:	ffffe7b7          	lui	a5,0xffffe
    6308:	00f90933          	add	s2,s2,a5
    630c:	00193913          	seqz	s2,s2
    6310:	40000993          	li	s3,1024
    6314:	800a0a13          	addi	s4,s4,-2048 # 800 <alt_log_private_printf+0x214>
    6318:	00098593          	mv	a1,s3
    631c:	00048513          	mv	a0,s1
    6320:	8ccfe0ef          	jal	ra,43ec <_malloc_r>
    6324:	00c41783          	lh	a5,12(s0)
    6328:	06050e63          	beqz	a0,63a4 <__smakebuf_r+0x128>
    632c:	ffffd717          	auipc	a4,0xffffd
    6330:	15c70713          	addi	a4,a4,348 # 3488 <_cleanup_r>
    6334:	02e4ae23          	sw	a4,60(s1)
    6338:	0807e793          	ori	a5,a5,128
    633c:	00f41623          	sh	a5,12(s0)
    6340:	00a42023          	sw	a0,0(s0)
    6344:	00a42823          	sw	a0,16(s0)
    6348:	01342a23          	sw	s3,20(s0)
    634c:	08091863          	bnez	s2,63dc <__smakebuf_r+0x160>
    6350:	0147e7b3          	or	a5,a5,s4
    6354:	07c12083          	lw	ra,124(sp)
    6358:	00f41623          	sh	a5,12(s0)
    635c:	07812403          	lw	s0,120(sp)
    6360:	07412483          	lw	s1,116(sp)
    6364:	07012903          	lw	s2,112(sp)
    6368:	06c12983          	lw	s3,108(sp)
    636c:	06812a03          	lw	s4,104(sp)
    6370:	08010113          	addi	sp,sp,128
    6374:	00008067          	ret
    6378:	00c41783          	lh	a5,12(s0)
    637c:	0807f793          	andi	a5,a5,128
    6380:	00000913          	li	s2,0
    6384:	04078663          	beqz	a5,63d0 <__smakebuf_r+0x154>
    6388:	04000993          	li	s3,64
    638c:	00098593          	mv	a1,s3
    6390:	00048513          	mv	a0,s1
    6394:	858fe0ef          	jal	ra,43ec <_malloc_r>
    6398:	00c41783          	lh	a5,12(s0)
    639c:	00000a13          	li	s4,0
    63a0:	f80516e3          	bnez	a0,632c <__smakebuf_r+0xb0>
    63a4:	2007f713          	andi	a4,a5,512
    63a8:	f0071ae3          	bnez	a4,62bc <__smakebuf_r+0x40>
    63ac:	ffc7f793          	andi	a5,a5,-4
    63b0:	0027e793          	ori	a5,a5,2
    63b4:	04340713          	addi	a4,s0,67
    63b8:	00f41623          	sh	a5,12(s0)
    63bc:	00100793          	li	a5,1
    63c0:	00e42023          	sw	a4,0(s0)
    63c4:	00e42823          	sw	a4,16(s0)
    63c8:	00f42a23          	sw	a5,20(s0)
    63cc:	ef1ff06f          	j	62bc <__smakebuf_r+0x40>
    63d0:	40000993          	li	s3,1024
    63d4:	00000a13          	li	s4,0
    63d8:	f41ff06f          	j	6318 <__smakebuf_r+0x9c>
    63dc:	00e41583          	lh	a1,14(s0)
    63e0:	00048513          	mv	a0,s1
    63e4:	1c4000ef          	jal	ra,65a8 <_isatty_r>
    63e8:	00051663          	bnez	a0,63f4 <__smakebuf_r+0x178>
    63ec:	00c41783          	lh	a5,12(s0)
    63f0:	f61ff06f          	j	6350 <__smakebuf_r+0xd4>
    63f4:	00c45783          	lhu	a5,12(s0)
    63f8:	ffc7f793          	andi	a5,a5,-4
    63fc:	0017e793          	ori	a5,a5,1
    6400:	01079793          	slli	a5,a5,0x10
    6404:	4107d793          	srai	a5,a5,0x10
    6408:	f49ff06f          	j	6350 <__smakebuf_r+0xd4>

0000640c <__swhatbuf_r>:
    640c:	f9010113          	addi	sp,sp,-112
    6410:	06812423          	sw	s0,104(sp)
    6414:	00058413          	mv	s0,a1
    6418:	00e59583          	lh	a1,14(a1)
    641c:	06912223          	sw	s1,100(sp)
    6420:	07212023          	sw	s2,96(sp)
    6424:	06112623          	sw	ra,108(sp)
    6428:	00060493          	mv	s1,a2
    642c:	00068913          	mv	s2,a3
    6430:	0405ca63          	bltz	a1,6484 <__swhatbuf_r+0x78>
    6434:	00810613          	addi	a2,sp,8
    6438:	110000ef          	jal	ra,6548 <_fstat_r>
    643c:	04054463          	bltz	a0,6484 <__swhatbuf_r+0x78>
    6440:	00c12703          	lw	a4,12(sp)
    6444:	0000f7b7          	lui	a5,0xf
    6448:	06c12083          	lw	ra,108(sp)
    644c:	00e7f7b3          	and	a5,a5,a4
    6450:	ffffe737          	lui	a4,0xffffe
    6454:	00e787b3          	add	a5,a5,a4
    6458:	06812403          	lw	s0,104(sp)
    645c:	0017b793          	seqz	a5,a5
    6460:	00f92023          	sw	a5,0(s2) # f000 <__alt_heap_start+0x3e38>
    6464:	40000713          	li	a4,1024
    6468:	00e4a023          	sw	a4,0(s1)
    646c:	00001537          	lui	a0,0x1
    6470:	06412483          	lw	s1,100(sp)
    6474:	06012903          	lw	s2,96(sp)
    6478:	80050513          	addi	a0,a0,-2048 # 800 <alt_log_private_printf+0x214>
    647c:	07010113          	addi	sp,sp,112
    6480:	00008067          	ret
    6484:	00c45783          	lhu	a5,12(s0)
    6488:	0807f793          	andi	a5,a5,128
    648c:	02078863          	beqz	a5,64bc <__swhatbuf_r+0xb0>
    6490:	06c12083          	lw	ra,108(sp)
    6494:	06812403          	lw	s0,104(sp)
    6498:	00000793          	li	a5,0
    649c:	00f92023          	sw	a5,0(s2)
    64a0:	04000713          	li	a4,64
    64a4:	00e4a023          	sw	a4,0(s1)
    64a8:	06012903          	lw	s2,96(sp)
    64ac:	06412483          	lw	s1,100(sp)
    64b0:	00000513          	li	a0,0
    64b4:	07010113          	addi	sp,sp,112
    64b8:	00008067          	ret
    64bc:	06c12083          	lw	ra,108(sp)
    64c0:	06812403          	lw	s0,104(sp)
    64c4:	00f92023          	sw	a5,0(s2)
    64c8:	40000713          	li	a4,1024
    64cc:	00e4a023          	sw	a4,0(s1)
    64d0:	06012903          	lw	s2,96(sp)
    64d4:	06412483          	lw	s1,100(sp)
    64d8:	00000513          	li	a0,0
    64dc:	07010113          	addi	sp,sp,112
    64e0:	00008067          	ret

000064e4 <_read_r>:
    64e4:	ff010113          	addi	sp,sp,-16
    64e8:	00058713          	mv	a4,a1
    64ec:	00812423          	sw	s0,8(sp)
    64f0:	00060593          	mv	a1,a2
    64f4:	00050413          	mv	s0,a0
    64f8:	00068613          	mv	a2,a3
    64fc:	00070513          	mv	a0,a4
    6500:	00005797          	auipc	a5,0x5
    6504:	ba07ac23          	sw	zero,-1096(a5) # b0b8 <errno>
    6508:	00112623          	sw	ra,12(sp)
    650c:	2c5000ef          	jal	ra,6fd0 <_read>
    6510:	fff00793          	li	a5,-1
    6514:	00f50a63          	beq	a0,a5,6528 <_read_r+0x44>
    6518:	00c12083          	lw	ra,12(sp)
    651c:	00812403          	lw	s0,8(sp)
    6520:	01010113          	addi	sp,sp,16
    6524:	00008067          	ret
    6528:	00005797          	auipc	a5,0x5
    652c:	b907a783          	lw	a5,-1136(a5) # b0b8 <errno>
    6530:	fe0784e3          	beqz	a5,6518 <_read_r+0x34>
    6534:	00c12083          	lw	ra,12(sp)
    6538:	00f42023          	sw	a5,0(s0)
    653c:	00812403          	lw	s0,8(sp)
    6540:	01010113          	addi	sp,sp,16
    6544:	00008067          	ret

00006548 <_fstat_r>:
    6548:	ff010113          	addi	sp,sp,-16
    654c:	00058713          	mv	a4,a1
    6550:	00812423          	sw	s0,8(sp)
    6554:	00060593          	mv	a1,a2
    6558:	00050413          	mv	s0,a0
    655c:	00070513          	mv	a0,a4
    6560:	00005797          	auipc	a5,0x5
    6564:	b407ac23          	sw	zero,-1192(a5) # b0b8 <errno>
    6568:	00112623          	sw	ra,12(sp)
    656c:	2e4000ef          	jal	ra,6850 <_fstat>
    6570:	fff00793          	li	a5,-1
    6574:	00f50a63          	beq	a0,a5,6588 <_fstat_r+0x40>
    6578:	00c12083          	lw	ra,12(sp)
    657c:	00812403          	lw	s0,8(sp)
    6580:	01010113          	addi	sp,sp,16
    6584:	00008067          	ret
    6588:	00005797          	auipc	a5,0x5
    658c:	b307a783          	lw	a5,-1232(a5) # b0b8 <errno>
    6590:	fe0784e3          	beqz	a5,6578 <_fstat_r+0x30>
    6594:	00c12083          	lw	ra,12(sp)
    6598:	00f42023          	sw	a5,0(s0)
    659c:	00812403          	lw	s0,8(sp)
    65a0:	01010113          	addi	sp,sp,16
    65a4:	00008067          	ret

000065a8 <_isatty_r>:
    65a8:	ff010113          	addi	sp,sp,-16
    65ac:	00812423          	sw	s0,8(sp)
    65b0:	00050413          	mv	s0,a0
    65b4:	00058513          	mv	a0,a1
    65b8:	00005797          	auipc	a5,0x5
    65bc:	b007a023          	sw	zero,-1280(a5) # b0b8 <errno>
    65c0:	00112623          	sw	ra,12(sp)
    65c4:	3b8000ef          	jal	ra,697c <_isatty>
    65c8:	fff00793          	li	a5,-1
    65cc:	00f50a63          	beq	a0,a5,65e0 <_isatty_r+0x38>
    65d0:	00c12083          	lw	ra,12(sp)
    65d4:	00812403          	lw	s0,8(sp)
    65d8:	01010113          	addi	sp,sp,16
    65dc:	00008067          	ret
    65e0:	00005797          	auipc	a5,0x5
    65e4:	ad87a783          	lw	a5,-1320(a5) # b0b8 <errno>
    65e8:	fe0784e3          	beqz	a5,65d0 <_isatty_r+0x28>
    65ec:	00c12083          	lw	ra,12(sp)
    65f0:	00f42023          	sw	a5,0(s0)
    65f4:	00812403          	lw	s0,8(sp)
    65f8:	01010113          	addi	sp,sp,16
    65fc:	00008067          	ret

00006600 <alt_get_errno>:
{
    6600:	ff010113          	addi	sp,sp,-16
    6604:	00112623          	sw	ra,12(sp)
    6608:	00812423          	sw	s0,8(sp)
    660c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6610:	000097b7          	lui	a5,0x9
    6614:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6618:	00078c63          	beqz	a5,6630 <alt_get_errno+0x30>
    661c:	000097b7          	lui	a5,0x9
    6620:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6624:	000780e7          	jalr	a5
    6628:	00050793          	mv	a5,a0
    662c:	00c0006f          	j	6638 <alt_get_errno+0x38>
    6630:	0000b7b7          	lui	a5,0xb
    6634:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    6638:	00078513          	mv	a0,a5
    663c:	00c12083          	lw	ra,12(sp)
    6640:	00812403          	lw	s0,8(sp)
    6644:	01010113          	addi	sp,sp,16
    6648:	00008067          	ret

0000664c <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    664c:	fd010113          	addi	sp,sp,-48
    6650:	02112623          	sw	ra,44(sp)
    6654:	02812423          	sw	s0,40(sp)
    6658:	03010413          	addi	s0,sp,48
    665c:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    6660:	fdc42783          	lw	a5,-36(s0)
    6664:	0207c463          	bltz	a5,668c <_close+0x40>
    6668:	fdc42703          	lw	a4,-36(s0)
    666c:	00070793          	mv	a5,a4
    6670:	00179793          	slli	a5,a5,0x1
    6674:	00e787b3          	add	a5,a5,a4
    6678:	00279793          	slli	a5,a5,0x2
    667c:	00009737          	lui	a4,0x9
    6680:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    6684:	00e787b3          	add	a5,a5,a4
    6688:	0080006f          	j	6690 <_close+0x44>
    668c:	00000793          	li	a5,0
    6690:	fef42423          	sw	a5,-24(s0)

  if (fd)
    6694:	fe842783          	lw	a5,-24(s0)
    6698:	06078663          	beqz	a5,6704 <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    669c:	fe842783          	lw	a5,-24(s0)
    66a0:	0007a783          	lw	a5,0(a5)
    66a4:	0107a783          	lw	a5,16(a5)
    66a8:	02078063          	beqz	a5,66c8 <_close+0x7c>
    66ac:	fe842783          	lw	a5,-24(s0)
    66b0:	0007a783          	lw	a5,0(a5)
    66b4:	0107a783          	lw	a5,16(a5)
    66b8:	fe842503          	lw	a0,-24(s0)
    66bc:	000780e7          	jalr	a5
    66c0:	00050793          	mv	a5,a0
    66c4:	0080006f          	j	66cc <_close+0x80>
    66c8:	00000793          	li	a5,0
    66cc:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    66d0:	fdc42503          	lw	a0,-36(s0)
    66d4:	8a8fc0ef          	jal	ra,277c <alt_release_fd>
    if (rval < 0)
    66d8:	fec42783          	lw	a5,-20(s0)
    66dc:	0207d063          	bgez	a5,66fc <_close+0xb0>
    {
      ALT_ERRNO = -rval;
    66e0:	f21ff0ef          	jal	ra,6600 <alt_get_errno>
    66e4:	00050713          	mv	a4,a0
    66e8:	fec42783          	lw	a5,-20(s0)
    66ec:	40f007b3          	neg	a5,a5
    66f0:	00f72023          	sw	a5,0(a4)
      return -1;
    66f4:	fff00793          	li	a5,-1
    66f8:	0200006f          	j	6718 <_close+0xcc>
    }
    return 0;
    66fc:	00000793          	li	a5,0
    6700:	0180006f          	j	6718 <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6704:	efdff0ef          	jal	ra,6600 <alt_get_errno>
    6708:	00050713          	mv	a4,a0
    670c:	05100793          	li	a5,81
    6710:	00f72023          	sw	a5,0(a4)
    return -1;
    6714:	fff00793          	li	a5,-1
  }
}
    6718:	00078513          	mv	a0,a5
    671c:	02c12083          	lw	ra,44(sp)
    6720:	02812403          	lw	s0,40(sp)
    6724:	03010113          	addi	sp,sp,48
    6728:	00008067          	ret

0000672c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    672c:	fd010113          	addi	sp,sp,-48
    6730:	02112623          	sw	ra,44(sp)
    6734:	02812423          	sw	s0,40(sp)
    6738:	03010413          	addi	s0,sp,48
    673c:	fca42e23          	sw	a0,-36(s0)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
    6740:	000097b7          	lui	a5,0x9
    6744:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    6748:	00100793          	li	a5,1
    674c:	00f71863          	bne	a4,a5,675c <_exit+0x30>
    6750:	000087b7          	lui	a5,0x8
    6754:	98078513          	addi	a0,a5,-1664 # 7980 <__fini_array_end+0x35c>
    6758:	bdcfa0ef          	jal	ra,b34 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
    675c:	000097b7          	lui	a5,0x9
    6760:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    6764:	00100793          	li	a5,1
    6768:	00f71a63          	bne	a4,a5,677c <_exit+0x50>
    676c:	fdc42583          	lw	a1,-36(s0)
    6770:	000087b7          	lui	a5,0x8
    6774:	9ac78513          	addi	a0,a5,-1620 # 79ac <__fini_array_end+0x388>
    6778:	bbcfa0ef          	jal	ra,b34 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
    677c:	000097b7          	lui	a5,0x9
    6780:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    6784:	00100793          	li	a5,1
    6788:	00f71863          	bne	a4,a5,6798 <_exit+0x6c>
    678c:	000087b7          	lui	a5,0x8
    6790:	9d878513          	addi	a0,a5,-1576 # 79d8 <__fini_array_end+0x3b4>
    6794:	ba0fa0ef          	jal	ra,b34 <alt_log_printf_proc>
  ALT_OS_STOP();
    6798:	00000013          	nop

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
    679c:	000097b7          	lui	a5,0x9
    67a0:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    67a4:	00100793          	li	a5,1
    67a8:	00f71863          	bne	a4,a5,67b8 <_exit+0x8c>
    67ac:	000087b7          	lui	a5,0x8
    67b0:	a0078513          	addi	a0,a5,-1536 # 7a00 <__fini_array_end+0x3dc>
    67b4:	b80fa0ef          	jal	ra,b34 <alt_log_printf_proc>
    67b8:	fdc42783          	lw	a5,-36(s0)
    67bc:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
    67c0:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
    67c4:	00050793          	mv	a5,a0
    67c8:	00078663          	beqz	a5,67d4 <_exit+0xa8>
    ALT_SIM_FAIL();
    67cc:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    67d0:	0080006f          	j	67d8 <_exit+0xac>
    ALT_SIM_PASS();
    67d4:	7c203013          	sltiu	zero,zero,1986
}
    67d8:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
    67dc:	000097b7          	lui	a5,0x9
    67e0:	5287a703          	lw	a4,1320(a5) # 9528 <alt_log_boot_on_flag>
    67e4:	00100793          	li	a5,1
    67e8:	00f71a63          	bne	a4,a5,67fc <_exit+0xd0>
    67ec:	000087b7          	lui	a5,0x8
    67f0:	a2878513          	addi	a0,a5,-1496 # 7a28 <__fini_array_end+0x404>
    67f4:	b40fa0ef          	jal	ra,b34 <alt_log_printf_proc>
  while (1);
    67f8:	00000013          	nop
    67fc:	00000013          	nop
    6800:	ffdff06f          	j	67fc <_exit+0xd0>

00006804 <alt_get_errno>:
{
    6804:	ff010113          	addi	sp,sp,-16
    6808:	00112623          	sw	ra,12(sp)
    680c:	00812423          	sw	s0,8(sp)
    6810:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6814:	000097b7          	lui	a5,0x9
    6818:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    681c:	00078c63          	beqz	a5,6834 <alt_get_errno+0x30>
    6820:	000097b7          	lui	a5,0x9
    6824:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6828:	000780e7          	jalr	a5
    682c:	00050793          	mv	a5,a0
    6830:	00c0006f          	j	683c <alt_get_errno+0x38>
    6834:	0000b7b7          	lui	a5,0xb
    6838:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    683c:	00078513          	mv	a0,a5
    6840:	00c12083          	lw	ra,12(sp)
    6844:	00812403          	lw	s0,8(sp)
    6848:	01010113          	addi	sp,sp,16
    684c:	00008067          	ret

00006850 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    6850:	fd010113          	addi	sp,sp,-48
    6854:	02112623          	sw	ra,44(sp)
    6858:	02812423          	sw	s0,40(sp)
    685c:	03010413          	addi	s0,sp,48
    6860:	fca42e23          	sw	a0,-36(s0)
    6864:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6868:	fdc42783          	lw	a5,-36(s0)
    686c:	0207c463          	bltz	a5,6894 <_fstat+0x44>
    6870:	fdc42703          	lw	a4,-36(s0)
    6874:	00070793          	mv	a5,a4
    6878:	00179793          	slli	a5,a5,0x1
    687c:	00e787b3          	add	a5,a5,a4
    6880:	00279793          	slli	a5,a5,0x2
    6884:	00009737          	lui	a4,0x9
    6888:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    688c:	00e787b3          	add	a5,a5,a4
    6890:	0080006f          	j	6898 <_fstat+0x48>
    6894:	00000793          	li	a5,0
    6898:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
    689c:	fec42783          	lw	a5,-20(s0)
    68a0:	04078463          	beqz	a5,68e8 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    68a4:	fec42783          	lw	a5,-20(s0)
    68a8:	0007a783          	lw	a5,0(a5)
    68ac:	0207a783          	lw	a5,32(a5)
    68b0:	02078263          	beqz	a5,68d4 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
    68b4:	fec42783          	lw	a5,-20(s0)
    68b8:	0007a783          	lw	a5,0(a5)
    68bc:	0207a783          	lw	a5,32(a5)
    68c0:	fd842583          	lw	a1,-40(s0)
    68c4:	fec42503          	lw	a0,-20(s0)
    68c8:	000780e7          	jalr	a5
    68cc:	00050793          	mv	a5,a0
    68d0:	02c0006f          	j	68fc <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    68d4:	fd842783          	lw	a5,-40(s0)
    68d8:	00002737          	lui	a4,0x2
    68dc:	00e7a223          	sw	a4,4(a5)
      return 0;
    68e0:	00000793          	li	a5,0
    68e4:	0180006f          	j	68fc <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    68e8:	f1dff0ef          	jal	ra,6804 <alt_get_errno>
    68ec:	00050713          	mv	a4,a0
    68f0:	05100793          	li	a5,81
    68f4:	00f72023          	sw	a5,0(a4) # 2000 <alt_alarm_start+0x10>
    return -1;
    68f8:	fff00793          	li	a5,-1
  }
}
    68fc:	00078513          	mv	a0,a5
    6900:	02c12083          	lw	ra,44(sp)
    6904:	02812403          	lw	s0,40(sp)
    6908:	03010113          	addi	sp,sp,48
    690c:	00008067          	ret

00006910 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    6910:	ff010113          	addi	sp,sp,-16
    6914:	00812623          	sw	s0,12(sp)
    6918:	01010413          	addi	s0,sp,16
  return 0;
    691c:	00000793          	li	a5,0
}
    6920:	00078513          	mv	a0,a5
    6924:	00c12403          	lw	s0,12(sp)
    6928:	01010113          	addi	sp,sp,16
    692c:	00008067          	ret

00006930 <alt_get_errno>:
{
    6930:	ff010113          	addi	sp,sp,-16
    6934:	00112623          	sw	ra,12(sp)
    6938:	00812423          	sw	s0,8(sp)
    693c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6940:	000097b7          	lui	a5,0x9
    6944:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6948:	00078c63          	beqz	a5,6960 <alt_get_errno+0x30>
    694c:	000097b7          	lui	a5,0x9
    6950:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6954:	000780e7          	jalr	a5
    6958:	00050793          	mv	a5,a0
    695c:	00c0006f          	j	6968 <alt_get_errno+0x38>
    6960:	0000b7b7          	lui	a5,0xb
    6964:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    6968:	00078513          	mv	a0,a5
    696c:	00c12083          	lw	ra,12(sp)
    6970:	00812403          	lw	s0,8(sp)
    6974:	01010113          	addi	sp,sp,16
    6978:	00008067          	ret

0000697c <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    697c:	f7010113          	addi	sp,sp,-144
    6980:	08112623          	sw	ra,140(sp)
    6984:	08812423          	sw	s0,136(sp)
    6988:	09010413          	addi	s0,sp,144
    698c:	f6a42e23          	sw	a0,-132(s0)
    6990:	0000b7b7          	lui	a5,0xb
    6994:	0bc7a703          	lw	a4,188(a5) # b0bc <__stack_chk_guard>
    6998:	fee42623          	sw	a4,-20(s0)
    699c:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
    69a0:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    69a4:	f7c42783          	lw	a5,-132(s0)
    69a8:	0207c463          	bltz	a5,69d0 <_isatty+0x54>
    69ac:	f7c42703          	lw	a4,-132(s0)
    69b0:	00070793          	mv	a5,a4
    69b4:	00179793          	slli	a5,a5,0x1
    69b8:	00e787b3          	add	a5,a5,a4
    69bc:	00279793          	slli	a5,a5,0x2
    69c0:	00009737          	lui	a4,0x9
    69c4:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    69c8:	00e787b3          	add	a5,a5,a4
    69cc:	0080006f          	j	69d4 <_isatty+0x58>
    69d0:	00000793          	li	a5,0
    69d4:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
    69d8:	f8c42783          	lw	a5,-116(s0)
    69dc:	04078a63          	beqz	a5,6a30 <_isatty+0xb4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    69e0:	f8c42783          	lw	a5,-116(s0)
    69e4:	0007a783          	lw	a5,0(a5)
    69e8:	0207a783          	lw	a5,32(a5)
    69ec:	00079663          	bnez	a5,69f8 <_isatty+0x7c>
    {
      return 1;
    69f0:	00100793          	li	a5,1
    69f4:	0500006f          	j	6a44 <_isatty+0xc8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
    69f8:	f9040793          	addi	a5,s0,-112
    69fc:	00078593          	mv	a1,a5
    6a00:	f7c42503          	lw	a0,-132(s0)
    6a04:	409000ef          	jal	ra,760c <fstat>
    6a08:	00050793          	mv	a5,a0
    6a0c:	0007d663          	bgez	a5,6a18 <_isatty+0x9c>
        return 0;  // fstat will set ERRNO
    6a10:	00000793          	li	a5,0
    6a14:	0300006f          	j	6a44 <_isatty+0xc8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
    6a18:	f9442703          	lw	a4,-108(s0)
    6a1c:	ffffe7b7          	lui	a5,0xffffe
    6a20:	00f707b3          	add	a5,a4,a5
    6a24:	0017b793          	seqz	a5,a5
    6a28:	0ff7f793          	zext.b	a5,a5
    6a2c:	0180006f          	j	6a44 <_isatty+0xc8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6a30:	f01ff0ef          	jal	ra,6930 <alt_get_errno>
    6a34:	00050713          	mv	a4,a0
    6a38:	05100793          	li	a5,81
    6a3c:	00f72023          	sw	a5,0(a4)
    return 0;
    6a40:	00000793          	li	a5,0
  }
}
    6a44:	00078713          	mv	a4,a5
    6a48:	0000b7b7          	lui	a5,0xb
    6a4c:	fec42683          	lw	a3,-20(s0)
    6a50:	0bc7a783          	lw	a5,188(a5) # b0bc <__stack_chk_guard>
    6a54:	00f6c7b3          	xor	a5,a3,a5
    6a58:	00000693          	li	a3,0
    6a5c:	00078463          	beqz	a5,6a64 <_isatty+0xe8>
    6a60:	d7cfc0ef          	jal	ra,2fdc <__stack_chk_fail>
    6a64:	00070513          	mv	a0,a4
    6a68:	08c12083          	lw	ra,140(sp)
    6a6c:	08812403          	lw	s0,136(sp)
    6a70:	09010113          	addi	sp,sp,144
    6a74:	00008067          	ret

00006a78 <alt_get_errno>:
{
    6a78:	ff010113          	addi	sp,sp,-16
    6a7c:	00112623          	sw	ra,12(sp)
    6a80:	00812423          	sw	s0,8(sp)
    6a84:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6a88:	000097b7          	lui	a5,0x9
    6a8c:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6a90:	00078c63          	beqz	a5,6aa8 <alt_get_errno+0x30>
    6a94:	000097b7          	lui	a5,0x9
    6a98:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6a9c:	000780e7          	jalr	a5
    6aa0:	00050793          	mv	a5,a0
    6aa4:	00c0006f          	j	6ab0 <alt_get_errno+0x38>
    6aa8:	0000b7b7          	lui	a5,0xb
    6aac:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    6ab0:	00078513          	mv	a0,a5
    6ab4:	00c12083          	lw	ra,12(sp)
    6ab8:	00812403          	lw	s0,8(sp)
    6abc:	01010113          	addi	sp,sp,16
    6ac0:	00008067          	ret

00006ac4 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    6ac4:	fd010113          	addi	sp,sp,-48
    6ac8:	02112623          	sw	ra,44(sp)
    6acc:	02812423          	sw	s0,40(sp)
    6ad0:	03010413          	addi	s0,sp,48
    6ad4:	fca42e23          	sw	a0,-36(s0)
    6ad8:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
    6adc:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
    6ae0:	fdc42783          	lw	a5,-36(s0)
    6ae4:	06f04e63          	bgtz	a5,6b60 <_kill+0x9c>
  {
    switch (sig)
    6ae8:	fd842783          	lw	a5,-40(s0)
    6aec:	08078463          	beqz	a5,6b74 <_kill+0xb0>
    6af0:	fd842783          	lw	a5,-40(s0)
    6af4:	0607c063          	bltz	a5,6b54 <_kill+0x90>
    6af8:	fd842703          	lw	a4,-40(s0)
    6afc:	01f00793          	li	a5,31
    6b00:	04e7ca63          	blt	a5,a4,6b54 <_kill+0x90>
    6b04:	fd842703          	lw	a4,-40(s0)
    6b08:	00300793          	li	a5,3
    6b0c:	04f74463          	blt	a4,a5,6b54 <_kill+0x90>
    6b10:	fd842783          	lw	a5,-40(s0)
    6b14:	00100713          	li	a4,1
    6b18:	00f717b3          	sll	a5,a4,a5
    6b1c:	cf810737          	lui	a4,0xcf810
    6b20:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcf7fff78>
    6b24:	00e7f733          	and	a4,a5,a4
    6b28:	00e03733          	snez	a4,a4
    6b2c:	0ff77713          	zext.b	a4,a4
    6b30:	00071e63          	bnez	a4,6b4c <_kill+0x88>
    6b34:	00110737          	lui	a4,0x110
    6b38:	00e7f7b3          	and	a5,a5,a4
    6b3c:	00f037b3          	snez	a5,a5
    6b40:	0ff7f793          	zext.b	a5,a5
    6b44:	02079c63          	bnez	a5,6b7c <_kill+0xb8>
    6b48:	00c0006f          	j	6b54 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    6b4c:	00000513          	li	a0,0
    6b50:	bddff0ef          	jal	ra,672c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    6b54:	01600793          	li	a5,22
    6b58:	fef42623          	sw	a5,-20(s0)
    6b5c:	0240006f          	j	6b80 <_kill+0xbc>
    }
  }

  else if (pid > 0)
    6b60:	fdc42783          	lw	a5,-36(s0)
    6b64:	00f05e63          	blez	a5,6b80 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    6b68:	00300793          	li	a5,3
    6b6c:	fef42623          	sw	a5,-20(s0)
    6b70:	0100006f          	j	6b80 <_kill+0xbc>
      break;
    6b74:	00000013          	nop
    6b78:	0080006f          	j	6b80 <_kill+0xbc>
      break;
    6b7c:	00000013          	nop
  }

  if (status)
    6b80:	fec42783          	lw	a5,-20(s0)
    6b84:	00078e63          	beqz	a5,6ba0 <_kill+0xdc>
  {
    ALT_ERRNO = status;
    6b88:	ef1ff0ef          	jal	ra,6a78 <alt_get_errno>
    6b8c:	00050713          	mv	a4,a0
    6b90:	fec42783          	lw	a5,-20(s0)
    6b94:	00f72023          	sw	a5,0(a4) # 110000 <__alt_data_end+0x100000>
    return -1;
    6b98:	fff00793          	li	a5,-1
    6b9c:	0080006f          	j	6ba4 <_kill+0xe0>
  }

  return 0;
    6ba0:	00000793          	li	a5,0
}
    6ba4:	00078513          	mv	a0,a5
    6ba8:	02c12083          	lw	ra,44(sp)
    6bac:	02812403          	lw	s0,40(sp)
    6bb0:	03010113          	addi	sp,sp,48
    6bb4:	00008067          	ret

00006bb8 <alt_get_errno>:
{
    6bb8:	ff010113          	addi	sp,sp,-16
    6bbc:	00112623          	sw	ra,12(sp)
    6bc0:	00812423          	sw	s0,8(sp)
    6bc4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6bc8:	000097b7          	lui	a5,0x9
    6bcc:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6bd0:	00078c63          	beqz	a5,6be8 <alt_get_errno+0x30>
    6bd4:	000097b7          	lui	a5,0x9
    6bd8:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6bdc:	000780e7          	jalr	a5
    6be0:	00050793          	mv	a5,a0
    6be4:	00c0006f          	j	6bf0 <alt_get_errno+0x38>
    6be8:	0000b7b7          	lui	a5,0xb
    6bec:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    6bf0:	00078513          	mv	a0,a5
    6bf4:	00c12083          	lw	ra,12(sp)
    6bf8:	00812403          	lw	s0,8(sp)
    6bfc:	01010113          	addi	sp,sp,16
    6c00:	00008067          	ret

00006c04 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    6c04:	fd010113          	addi	sp,sp,-48
    6c08:	02112623          	sw	ra,44(sp)
    6c0c:	02812423          	sw	s0,40(sp)
    6c10:	03010413          	addi	s0,sp,48
    6c14:	fca42e23          	sw	a0,-36(s0)
    6c18:	fcb42c23          	sw	a1,-40(s0)
    6c1c:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
    6c20:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6c24:	fdc42783          	lw	a5,-36(s0)
    6c28:	0207c463          	bltz	a5,6c50 <_lseek+0x4c>
    6c2c:	fdc42703          	lw	a4,-36(s0)
    6c30:	00070793          	mv	a5,a4
    6c34:	00179793          	slli	a5,a5,0x1
    6c38:	00e787b3          	add	a5,a5,a4
    6c3c:	00279793          	slli	a5,a5,0x2
    6c40:	00009737          	lui	a4,0x9
    6c44:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    6c48:	00e787b3          	add	a5,a5,a4
    6c4c:	0080006f          	j	6c54 <_lseek+0x50>
    6c50:	00000793          	li	a5,0
    6c54:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
    6c58:	fec42783          	lw	a5,-20(s0)
    6c5c:	04078263          	beqz	a5,6ca0 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    6c60:	fec42783          	lw	a5,-20(s0)
    6c64:	0007a783          	lw	a5,0(a5)
    6c68:	01c7a783          	lw	a5,28(a5)
    6c6c:	02078463          	beqz	a5,6c94 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    6c70:	fec42783          	lw	a5,-20(s0)
    6c74:	0007a783          	lw	a5,0(a5)
    6c78:	01c7a783          	lw	a5,28(a5)
    6c7c:	fd442603          	lw	a2,-44(s0)
    6c80:	fd842583          	lw	a1,-40(s0)
    6c84:	fec42503          	lw	a0,-20(s0)
    6c88:	000780e7          	jalr	a5
    6c8c:	fea42423          	sw	a0,-24(s0)
    6c90:	0180006f          	j	6ca8 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    6c94:	f7a00793          	li	a5,-134
    6c98:	fef42423          	sw	a5,-24(s0)
    6c9c:	00c0006f          	j	6ca8 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    6ca0:	faf00793          	li	a5,-81
    6ca4:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
    6ca8:	fe842783          	lw	a5,-24(s0)
    6cac:	0207d063          	bgez	a5,6ccc <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    6cb0:	f09ff0ef          	jal	ra,6bb8 <alt_get_errno>
    6cb4:	00050713          	mv	a4,a0
    6cb8:	fe842783          	lw	a5,-24(s0)
    6cbc:	40f007b3          	neg	a5,a5
    6cc0:	00f72023          	sw	a5,0(a4)
    rc = -1;
    6cc4:	fff00793          	li	a5,-1
    6cc8:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
    6ccc:	fe842783          	lw	a5,-24(s0)
}
    6cd0:	00078513          	mv	a0,a5
    6cd4:	02c12083          	lw	ra,44(sp)
    6cd8:	02812403          	lw	s0,40(sp)
    6cdc:	03010113          	addi	sp,sp,48
    6ce0:	00008067          	ret

00006ce4 <alt_get_errno>:
{
    6ce4:	ff010113          	addi	sp,sp,-16
    6ce8:	00112623          	sw	ra,12(sp)
    6cec:	00812423          	sw	s0,8(sp)
    6cf0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6cf4:	000097b7          	lui	a5,0x9
    6cf8:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6cfc:	00078c63          	beqz	a5,6d14 <alt_get_errno+0x30>
    6d00:	000097b7          	lui	a5,0x9
    6d04:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6d08:	000780e7          	jalr	a5
    6d0c:	00050793          	mv	a5,a0
    6d10:	00c0006f          	j	6d1c <alt_get_errno+0x38>
    6d14:	0000b7b7          	lui	a5,0xb
    6d18:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    6d1c:	00078513          	mv	a0,a5
    6d20:	00c12083          	lw	ra,12(sp)
    6d24:	00812403          	lw	s0,8(sp)
    6d28:	01010113          	addi	sp,sp,16
    6d2c:	00008067          	ret

00006d30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6d30:	fd010113          	addi	sp,sp,-48
    6d34:	02812623          	sw	s0,44(sp)
    6d38:	03010413          	addi	s0,sp,48
    6d3c:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6d40:	fdc42783          	lw	a5,-36(s0)
    6d44:	0087a703          	lw	a4,8(a5)
    6d48:	400007b7          	lui	a5,0x40000
    6d4c:	00f76733          	or	a4,a4,a5
    6d50:	fdc42783          	lw	a5,-36(s0)
    6d54:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3fff0008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6d58:	fe042623          	sw	zero,-20(s0)
    6d5c:	0980006f          	j	6df4 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6d60:	000097b7          	lui	a5,0x9
    6d64:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    6d68:	fec42703          	lw	a4,-20(s0)
    6d6c:	00070793          	mv	a5,a4
    6d70:	00179793          	slli	a5,a5,0x1
    6d74:	00e787b3          	add	a5,a5,a4
    6d78:	00279793          	slli	a5,a5,0x2
    6d7c:	00f687b3          	add	a5,a3,a5
    6d80:	0007a703          	lw	a4,0(a5)
    6d84:	fdc42783          	lw	a5,-36(s0)
    6d88:	0007a783          	lw	a5,0(a5)
    6d8c:	04f71e63          	bne	a4,a5,6de8 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6d90:	000097b7          	lui	a5,0x9
    6d94:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    6d98:	fec42703          	lw	a4,-20(s0)
    6d9c:	00070793          	mv	a5,a4
    6da0:	00179793          	slli	a5,a5,0x1
    6da4:	00e787b3          	add	a5,a5,a4
    6da8:	00279793          	slli	a5,a5,0x2
    6dac:	00f687b3          	add	a5,a3,a5
    6db0:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
    6db4:	0207da63          	bgez	a5,6de8 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
    6db8:	fec42703          	lw	a4,-20(s0)
    6dbc:	00070793          	mv	a5,a4
    6dc0:	00179793          	slli	a5,a5,0x1
    6dc4:	00e787b3          	add	a5,a5,a4
    6dc8:	00279793          	slli	a5,a5,0x2
    6dcc:	00009737          	lui	a4,0x9
    6dd0:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    6dd4:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6dd8:	fdc42703          	lw	a4,-36(s0)
    6ddc:	00f70663          	beq	a4,a5,6de8 <alt_file_locked+0xb8>
    {
      return -EACCES;
    6de0:	ff300793          	li	a5,-13
    6de4:	0280006f          	j	6e0c <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
    6de8:	fec42783          	lw	a5,-20(s0)
    6dec:	00178793          	addi	a5,a5,1
    6df0:	fef42623          	sw	a5,-20(s0)
    6df4:	000097b7          	lui	a5,0x9
    6df8:	5447a783          	lw	a5,1348(a5) # 9544 <alt_max_fd>
    6dfc:	00078713          	mv	a4,a5
    6e00:	fec42783          	lw	a5,-20(s0)
    6e04:	f4f77ee3          	bgeu	a4,a5,6d60 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6e08:	00000793          	li	a5,0
}
    6e0c:	00078513          	mv	a0,a5
    6e10:	02c12403          	lw	s0,44(sp)
    6e14:	03010113          	addi	sp,sp,48
    6e18:	00008067          	ret

00006e1c <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6e1c:	fc010113          	addi	sp,sp,-64
    6e20:	02112e23          	sw	ra,60(sp)
    6e24:	02812c23          	sw	s0,56(sp)
    6e28:	04010413          	addi	s0,sp,64
    6e2c:	fca42623          	sw	a0,-52(s0)
    6e30:	fcb42423          	sw	a1,-56(s0)
    6e34:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6e38:	fff00793          	li	a5,-1
    6e3c:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
    6e40:	fed00793          	li	a5,-19
    6e44:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
    6e48:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6e4c:	000097b7          	lui	a5,0x9
    6e50:	53c78593          	addi	a1,a5,1340 # 953c <alt_dev_list>
    6e54:	fcc42503          	lw	a0,-52(s0)
    6e58:	490000ef          	jal	ra,72e8 <alt_find_dev>
    6e5c:	fca42e23          	sw	a0,-36(s0)
    6e60:	fdc42783          	lw	a5,-36(s0)
    6e64:	00079c63          	bnez	a5,6e7c <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6e68:	fcc42503          	lw	a0,-52(s0)
    6e6c:	59c000ef          	jal	ra,7408 <alt_find_file>
    6e70:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
    6e74:	00100793          	li	a5,1
    6e78:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6e7c:	fdc42783          	lw	a5,-36(s0)
    6e80:	0a078c63          	beqz	a5,6f38 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6e84:	fdc42503          	lw	a0,-36(s0)
    6e88:	6bc000ef          	jal	ra,7544 <alt_get_fd>
    6e8c:	fea42023          	sw	a0,-32(s0)
    6e90:	fe042783          	lw	a5,-32(s0)
    6e94:	0007d863          	bgez	a5,6ea4 <_open+0x88>
    {
      status = index;
    6e98:	fe042783          	lw	a5,-32(s0)
    6e9c:	fef42223          	sw	a5,-28(s0)
    6ea0:	0a00006f          	j	6f40 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
    6ea4:	fe042703          	lw	a4,-32(s0)
    6ea8:	00070793          	mv	a5,a4
    6eac:	00179793          	slli	a5,a5,0x1
    6eb0:	00e787b3          	add	a5,a5,a4
    6eb4:	00279793          	slli	a5,a5,0x2
    6eb8:	00009737          	lui	a4,0x9
    6ebc:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    6ec0:	00e787b3          	add	a5,a5,a4
    6ec4:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6ec8:	fc842703          	lw	a4,-56(s0)
    6ecc:	400007b7          	lui	a5,0x40000
    6ed0:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffeffff>
    6ed4:	00f77733          	and	a4,a4,a5
    6ed8:	fec42783          	lw	a5,-20(s0)
    6edc:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6ee0:	fe842783          	lw	a5,-24(s0)
    6ee4:	00079c63          	bnez	a5,6efc <_open+0xe0>
    6ee8:	fec42503          	lw	a0,-20(s0)
    6eec:	e45ff0ef          	jal	ra,6d30 <alt_file_locked>
    6ef0:	fea42223          	sw	a0,-28(s0)
    6ef4:	fe442783          	lw	a5,-28(s0)
    6ef8:	0407c463          	bltz	a5,6f40 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6efc:	fdc42783          	lw	a5,-36(s0)
    6f00:	00c7a783          	lw	a5,12(a5)
    6f04:	02078463          	beqz	a5,6f2c <_open+0x110>
    6f08:	fdc42783          	lw	a5,-36(s0)
    6f0c:	00c7a783          	lw	a5,12(a5)
    6f10:	fc442683          	lw	a3,-60(s0)
    6f14:	fc842603          	lw	a2,-56(s0)
    6f18:	fcc42583          	lw	a1,-52(s0)
    6f1c:	fec42503          	lw	a0,-20(s0)
    6f20:	000780e7          	jalr	a5
    6f24:	00050793          	mv	a5,a0
    6f28:	0080006f          	j	6f30 <_open+0x114>
    6f2c:	00000793          	li	a5,0
    6f30:	fef42223          	sw	a5,-28(s0)
    6f34:	00c0006f          	j	6f40 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6f38:	fed00793          	li	a5,-19
    6f3c:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6f40:	fe442783          	lw	a5,-28(s0)
    6f44:	0207d463          	bgez	a5,6f6c <_open+0x150>
  {
    alt_release_fd (index);  
    6f48:	fe042503          	lw	a0,-32(s0)
    6f4c:	831fb0ef          	jal	ra,277c <alt_release_fd>
    ALT_ERRNO = -status;
    6f50:	d95ff0ef          	jal	ra,6ce4 <alt_get_errno>
    6f54:	00050713          	mv	a4,a0
    6f58:	fe442783          	lw	a5,-28(s0)
    6f5c:	40f007b3          	neg	a5,a5
    6f60:	00f72023          	sw	a5,0(a4)
    return -1;
    6f64:	fff00793          	li	a5,-1
    6f68:	0080006f          	j	6f70 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
    6f6c:	fe042783          	lw	a5,-32(s0)
}
    6f70:	00078513          	mv	a0,a5
    6f74:	03c12083          	lw	ra,60(sp)
    6f78:	03812403          	lw	s0,56(sp)
    6f7c:	04010113          	addi	sp,sp,64
    6f80:	00008067          	ret

00006f84 <alt_get_errno>:
{
    6f84:	ff010113          	addi	sp,sp,-16
    6f88:	00112623          	sw	ra,12(sp)
    6f8c:	00812423          	sw	s0,8(sp)
    6f90:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6f94:	000097b7          	lui	a5,0x9
    6f98:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6f9c:	00078c63          	beqz	a5,6fb4 <alt_get_errno+0x30>
    6fa0:	000097b7          	lui	a5,0x9
    6fa4:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    6fa8:	000780e7          	jalr	a5
    6fac:	00050793          	mv	a5,a0
    6fb0:	00c0006f          	j	6fbc <alt_get_errno+0x38>
    6fb4:	0000b7b7          	lui	a5,0xb
    6fb8:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    6fbc:	00078513          	mv	a0,a5
    6fc0:	00c12083          	lw	ra,12(sp)
    6fc4:	00812403          	lw	s0,8(sp)
    6fc8:	01010113          	addi	sp,sp,16
    6fcc:	00008067          	ret

00006fd0 <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    6fd0:	fd010113          	addi	sp,sp,-48
    6fd4:	02112623          	sw	ra,44(sp)
    6fd8:	02812423          	sw	s0,40(sp)
    6fdc:	03010413          	addi	s0,sp,48
    6fe0:	fca42e23          	sw	a0,-36(s0)
    6fe4:	fcb42c23          	sw	a1,-40(s0)
    6fe8:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6fec:	fdc42783          	lw	a5,-36(s0)
    6ff0:	0207c463          	bltz	a5,7018 <_read+0x48>
    6ff4:	fdc42703          	lw	a4,-36(s0)
    6ff8:	00070793          	mv	a5,a4
    6ffc:	00179793          	slli	a5,a5,0x1
    7000:	00e787b3          	add	a5,a5,a4
    7004:	00279793          	slli	a5,a5,0x2
    7008:	00009737          	lui	a4,0x9
    700c:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    7010:	00e787b3          	add	a5,a5,a4
    7014:	0080006f          	j	701c <_read+0x4c>
    7018:	00000793          	li	a5,0
    701c:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    7020:	fe842783          	lw	a5,-24(s0)
    7024:	08078663          	beqz	a5,70b0 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    7028:	fe842783          	lw	a5,-24(s0)
    702c:	0087a783          	lw	a5,8(a5)
    7030:	0037f713          	andi	a4,a5,3
    7034:	00100793          	li	a5,1
    7038:	06f70263          	beq	a4,a5,709c <_read+0xcc>
        (fd->dev->read))
    703c:	fe842783          	lw	a5,-24(s0)
    7040:	0007a783          	lw	a5,0(a5)
    7044:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    7048:	04078a63          	beqz	a5,709c <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    704c:	fe842783          	lw	a5,-24(s0)
    7050:	0007a783          	lw	a5,0(a5)
    7054:	0147a783          	lw	a5,20(a5)
    7058:	fd442703          	lw	a4,-44(s0)
    705c:	00070613          	mv	a2,a4
    7060:	fd842583          	lw	a1,-40(s0)
    7064:	fe842503          	lw	a0,-24(s0)
    7068:	000780e7          	jalr	a5
    706c:	fea42623          	sw	a0,-20(s0)
    7070:	fec42783          	lw	a5,-20(s0)
    7074:	0207d063          	bgez	a5,7094 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
    7078:	f0dff0ef          	jal	ra,6f84 <alt_get_errno>
    707c:	00050713          	mv	a4,a0
    7080:	fec42783          	lw	a5,-20(s0)
    7084:	40f007b3          	neg	a5,a5
    7088:	00f72023          	sw	a5,0(a4)
          return -1;
    708c:	fff00793          	li	a5,-1
    7090:	0340006f          	j	70c4 <_read+0xf4>
        }
        return rval;
    7094:	fec42783          	lw	a5,-20(s0)
    7098:	02c0006f          	j	70c4 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    709c:	ee9ff0ef          	jal	ra,6f84 <alt_get_errno>
    70a0:	00050713          	mv	a4,a0
    70a4:	00d00793          	li	a5,13
    70a8:	00f72023          	sw	a5,0(a4)
    70ac:	0140006f          	j	70c0 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    70b0:	ed5ff0ef          	jal	ra,6f84 <alt_get_errno>
    70b4:	00050713          	mv	a4,a0
    70b8:	05100793          	li	a5,81
    70bc:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    70c0:	fff00793          	li	a5,-1
}
    70c4:	00078513          	mv	a0,a5
    70c8:	02c12083          	lw	ra,44(sp)
    70cc:	02812403          	lw	s0,40(sp)
    70d0:	03010113          	addi	sp,sp,48
    70d4:	00008067          	ret

000070d8 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    70d8:	fc010113          	addi	sp,sp,-64
    70dc:	02812e23          	sw	s0,60(sp)
    70e0:	04010413          	addi	s0,sp,64
    70e4:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    70e8:	00800793          	li	a5,8
    70ec:	3007b7f3          	csrrc	a5,mstatus,a5
    70f0:	fef42223          	sw	a5,-28(s0)
    return context;
    70f4:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    70f8:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    70fc:	8341a783          	lw	a5,-1996(gp) # 955c <heap_end>
    7100:	00378793          	addi	a5,a5,3
    7104:	ffc7f793          	andi	a5,a5,-4
    7108:	00078713          	mv	a4,a5
    710c:	82e1aa23          	sw	a4,-1996(gp) # 955c <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    7110:	8341a703          	lw	a4,-1996(gp) # 955c <heap_end>
    7114:	fcc42783          	lw	a5,-52(s0)
    7118:	00f70733          	add	a4,a4,a5
    711c:	000107b7          	lui	a5,0x10
    7120:	00078793          	mv	a5,a5
    7124:	02e7f263          	bgeu	a5,a4,7148 <_sbrk+0x70>
    7128:	fdc42783          	lw	a5,-36(s0)
    712c:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    7130:	fe842783          	lw	a5,-24(s0)
    7134:	0087f793          	andi	a5,a5,8
    7138:	3007a073          	csrs	mstatus,a5
}
    713c:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    7140:	fff00793          	li	a5,-1
    7144:	0380006f          	j	717c <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
    7148:	8341a783          	lw	a5,-1996(gp) # 955c <heap_end>
    714c:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
    7150:	8341a703          	lw	a4,-1996(gp) # 955c <heap_end>
    7154:	fcc42783          	lw	a5,-52(s0)
    7158:	00f70733          	add	a4,a4,a5
    715c:	82e1aa23          	sw	a4,-1996(gp) # 955c <heap_end>
    7160:	fdc42783          	lw	a5,-36(s0)
    7164:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    7168:	fec42783          	lw	a5,-20(s0)
    716c:	0087f793          	andi	a5,a5,8
    7170:	3007a073          	csrs	mstatus,a5
}
    7174:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    7178:	fe042783          	lw	a5,-32(s0)
}
    717c:	00078513          	mv	a0,a5
    7180:	03c12403          	lw	s0,60(sp)
    7184:	04010113          	addi	sp,sp,64
    7188:	00008067          	ret

0000718c <alt_get_errno>:
{
    718c:	ff010113          	addi	sp,sp,-16
    7190:	00112623          	sw	ra,12(sp)
    7194:	00812423          	sw	s0,8(sp)
    7198:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    719c:	000097b7          	lui	a5,0x9
    71a0:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    71a4:	00078c63          	beqz	a5,71bc <alt_get_errno+0x30>
    71a8:	000097b7          	lui	a5,0x9
    71ac:	5487a783          	lw	a5,1352(a5) # 9548 <alt_errno>
    71b0:	000780e7          	jalr	a5
    71b4:	00050793          	mv	a5,a0
    71b8:	00c0006f          	j	71c4 <alt_get_errno+0x38>
    71bc:	0000b7b7          	lui	a5,0xb
    71c0:	0b878793          	addi	a5,a5,184 # b0b8 <errno>
}
    71c4:	00078513          	mv	a0,a5
    71c8:	00c12083          	lw	ra,12(sp)
    71cc:	00812403          	lw	s0,8(sp)
    71d0:	01010113          	addi	sp,sp,16
    71d4:	00008067          	ret

000071d8 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    71d8:	fd010113          	addi	sp,sp,-48
    71dc:	02112623          	sw	ra,44(sp)
    71e0:	02812423          	sw	s0,40(sp)
    71e4:	03010413          	addi	s0,sp,48
    71e8:	fca42e23          	sw	a0,-36(s0)
    71ec:	fcb42c23          	sw	a1,-40(s0)
    71f0:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    71f4:	fdc42783          	lw	a5,-36(s0)
    71f8:	0207c463          	bltz	a5,7220 <_write+0x48>
    71fc:	fdc42703          	lw	a4,-36(s0)
    7200:	00070793          	mv	a5,a4
    7204:	00179793          	slli	a5,a5,0x1
    7208:	00e787b3          	add	a5,a5,a4
    720c:	00279793          	slli	a5,a5,0x2
    7210:	00009737          	lui	a4,0x9
    7214:	b7870713          	addi	a4,a4,-1160 # 8b78 <alt_fd_list>
    7218:	00e787b3          	add	a5,a5,a4
    721c:	0080006f          	j	7224 <_write+0x4c>
    7220:	00000793          	li	a5,0
    7224:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    7228:	fe842783          	lw	a5,-24(s0)
    722c:	08078a63          	beqz	a5,72c0 <_write+0xe8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    7230:	fe842783          	lw	a5,-24(s0)
    7234:	0087a783          	lw	a5,8(a5)
    7238:	0037f793          	andi	a5,a5,3
    723c:	06078863          	beqz	a5,72ac <_write+0xd4>
    7240:	fe842783          	lw	a5,-24(s0)
    7244:	0007a783          	lw	a5,0(a5)
    7248:	0187a783          	lw	a5,24(a5)
    724c:	06078063          	beqz	a5,72ac <_write+0xd4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
    7250:	fd442583          	lw	a1,-44(s0)
    7254:	fd842503          	lw	a0,-40(s0)
    7258:	b81f90ef          	jal	ra,dd8 <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    725c:	fe842783          	lw	a5,-24(s0)
    7260:	0007a783          	lw	a5,0(a5)
    7264:	0187a783          	lw	a5,24(a5)
    7268:	fd442703          	lw	a4,-44(s0)
    726c:	00070613          	mv	a2,a4
    7270:	fd842583          	lw	a1,-40(s0)
    7274:	fe842503          	lw	a0,-24(s0)
    7278:	000780e7          	jalr	a5
    727c:	fea42623          	sw	a0,-20(s0)
    7280:	fec42783          	lw	a5,-20(s0)
    7284:	0207d063          	bgez	a5,72a4 <_write+0xcc>
      {
        ALT_ERRNO = -rval;
    7288:	f05ff0ef          	jal	ra,718c <alt_get_errno>
    728c:	00050713          	mv	a4,a0
    7290:	fec42783          	lw	a5,-20(s0)
    7294:	40f007b3          	neg	a5,a5
    7298:	00f72023          	sw	a5,0(a4)
        return -1;
    729c:	fff00793          	li	a5,-1
    72a0:	0340006f          	j	72d4 <_write+0xfc>
      }
      return rval;
    72a4:	fec42783          	lw	a5,-20(s0)
    72a8:	02c0006f          	j	72d4 <_write+0xfc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    72ac:	ee1ff0ef          	jal	ra,718c <alt_get_errno>
    72b0:	00050713          	mv	a4,a0
    72b4:	00d00793          	li	a5,13
    72b8:	00f72023          	sw	a5,0(a4)
    72bc:	0140006f          	j	72d0 <_write+0xf8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    72c0:	ecdff0ef          	jal	ra,718c <alt_get_errno>
    72c4:	00050713          	mv	a4,a0
    72c8:	05100793          	li	a5,81
    72cc:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    72d0:	fff00793          	li	a5,-1
}
    72d4:	00078513          	mv	a0,a5
    72d8:	02c12083          	lw	ra,44(sp)
    72dc:	02812403          	lw	s0,40(sp)
    72e0:	03010113          	addi	sp,sp,48
    72e4:	00008067          	ret

000072e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    72e8:	fd010113          	addi	sp,sp,-48
    72ec:	02812623          	sw	s0,44(sp)
    72f0:	03010413          	addi	s0,sp,48
    72f4:	fca42e23          	sw	a0,-36(s0)
    72f8:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
    72fc:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
    7300:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    7304:	3e800793          	li	a5,1000
    7308:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
    730c:	fd842783          	lw	a5,-40(s0)
    7310:	00079663          	bnez	a5,731c <alt_find_dev+0x34>
    7314:	00000793          	li	a5,0
    7318:	0e00006f          	j	73f8 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
    731c:	fd842783          	lw	a5,-40(s0)
    7320:	0007a783          	lw	a5,0(a5)
    7324:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    7328:	0c00006f          	j	73e8 <alt_find_dev+0x100>
    {
        len=0;
    732c:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    7330:	0380006f          	j	7368 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
    7334:	fe442783          	lw	a5,-28(s0)
    7338:	0087a703          	lw	a4,8(a5)
    733c:	fe842783          	lw	a5,-24(s0)
    7340:	00f707b3          	add	a5,a4,a5
    7344:	0007c703          	lbu	a4,0(a5)
    7348:	fe842783          	lw	a5,-24(s0)
    734c:	fdc42683          	lw	a3,-36(s0)
    7350:	00f687b3          	add	a5,a3,a5
    7354:	0007c783          	lbu	a5,0(a5)
    7358:	04f71663          	bne	a4,a5,73a4 <alt_find_dev+0xbc>
            len++;
    735c:	fe842783          	lw	a5,-24(s0)
    7360:	00178793          	addi	a5,a5,1
    7364:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    7368:	fe842783          	lw	a5,-24(s0)
    736c:	fdc42703          	lw	a4,-36(s0)
    7370:	00f707b3          	add	a5,a4,a5
    7374:	0007c783          	lbu	a5,0(a5)
    7378:	02078863          	beqz	a5,73a8 <alt_find_dev+0xc0>
    737c:	fe442783          	lw	a5,-28(s0)
    7380:	0087a703          	lw	a4,8(a5)
    7384:	fe842783          	lw	a5,-24(s0)
    7388:	00f707b3          	add	a5,a4,a5
    738c:	0007c783          	lbu	a5,0(a5)
    7390:	00078c63          	beqz	a5,73a8 <alt_find_dev+0xc0>
    7394:	fe842703          	lw	a4,-24(s0)
    7398:	fec42783          	lw	a5,-20(s0)
    739c:	f8f74ce3          	blt	a4,a5,7334 <alt_find_dev+0x4c>
    73a0:	0080006f          	j	73a8 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
    73a4:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
    73a8:	fe842783          	lw	a5,-24(s0)
    73ac:	fdc42703          	lw	a4,-36(s0)
    73b0:	00f707b3          	add	a5,a4,a5
    73b4:	0007c783          	lbu	a5,0(a5)
    73b8:	02079263          	bnez	a5,73dc <alt_find_dev+0xf4>
    73bc:	fe442783          	lw	a5,-28(s0)
    73c0:	0087a703          	lw	a4,8(a5)
    73c4:	fe842783          	lw	a5,-24(s0)
    73c8:	00f707b3          	add	a5,a4,a5
    73cc:	0007c783          	lbu	a5,0(a5)
    73d0:	00079663          	bnez	a5,73dc <alt_find_dev+0xf4>
    73d4:	fe442783          	lw	a5,-28(s0)
    73d8:	0200006f          	j	73f8 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
    73dc:	fe442783          	lw	a5,-28(s0)
    73e0:	0007a783          	lw	a5,0(a5)
    73e4:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
    73e8:	fe442703          	lw	a4,-28(s0)
    73ec:	fd842783          	lw	a5,-40(s0)
    73f0:	f2f71ee3          	bne	a4,a5,732c <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
    73f4:	00000793          	li	a5,0
}
    73f8:	00078513          	mv	a0,a5
    73fc:	02c12403          	lw	s0,44(sp)
    7400:	03010113          	addi	sp,sp,48
    7404:	00008067          	ret

00007408 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    7408:	fd010113          	addi	sp,sp,-48
    740c:	02812623          	sw	s0,44(sp)
    7410:	03010413          	addi	s0,sp,48
    7414:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
    7418:	000097b7          	lui	a5,0x9
    741c:	53478793          	addi	a5,a5,1332 # 9534 <alt_fs_list>
    7420:	0007a783          	lw	a5,0(a5)
    7424:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
    7428:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    742c:	3e800793          	li	a5,1000
    7430:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
    7434:	0ec0006f          	j	7520 <alt_find_file+0x118>
    {
        len=0;
    7438:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    743c:	0bc0006f          	j	74f8 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
    7440:	fe442783          	lw	a5,-28(s0)
    7444:	0087a703          	lw	a4,8(a5)
    7448:	fe842783          	lw	a5,-24(s0)
    744c:	00f707b3          	add	a5,a4,a5
    7450:	0007c703          	lbu	a4,0(a5)
    7454:	02f00793          	li	a5,47
    7458:	02f71063          	bne	a4,a5,7478 <alt_find_file+0x70>
    745c:	fe442783          	lw	a5,-28(s0)
    7460:	0087a703          	lw	a4,8(a5)
    7464:	fe842783          	lw	a5,-24(s0)
    7468:	00178793          	addi	a5,a5,1
    746c:	00f707b3          	add	a5,a4,a5
    7470:	0007c783          	lbu	a5,0(a5)
    7474:	00078e63          	beqz	a5,7490 <alt_find_file+0x88>
    7478:	fe442783          	lw	a5,-28(s0)
    747c:	0087a703          	lw	a4,8(a5)
    7480:	fe842783          	lw	a5,-24(s0)
    7484:	00f707b3          	add	a5,a4,a5
    7488:	0007c783          	lbu	a5,0(a5)
    748c:	02079c63          	bnez	a5,74c4 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
    7490:	fe842783          	lw	a5,-24(s0)
    7494:	fdc42703          	lw	a4,-36(s0)
    7498:	00f707b3          	add	a5,a4,a5
    749c:	0007c703          	lbu	a4,0(a5)
    74a0:	02f00793          	li	a5,47
    74a4:	00f70c63          	beq	a4,a5,74bc <alt_find_file+0xb4>
    74a8:	fe842783          	lw	a5,-24(s0)
    74ac:	fdc42703          	lw	a4,-36(s0)
    74b0:	00f707b3          	add	a5,a4,a5
    74b4:	0007c783          	lbu	a5,0(a5)
    74b8:	04079863          	bnez	a5,7508 <alt_find_file+0x100>
                {
                    return next;
    74bc:	fe442783          	lw	a5,-28(s0)
    74c0:	0740006f          	j	7534 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
    74c4:	fe442783          	lw	a5,-28(s0)
    74c8:	0087a703          	lw	a4,8(a5)
    74cc:	fe842783          	lw	a5,-24(s0)
    74d0:	00f707b3          	add	a5,a4,a5
    74d4:	0007c703          	lbu	a4,0(a5)
    74d8:	fe842783          	lw	a5,-24(s0)
    74dc:	fdc42683          	lw	a3,-36(s0)
    74e0:	00f687b3          	add	a5,a3,a5
    74e4:	0007c783          	lbu	a5,0(a5)
    74e8:	02f71463          	bne	a4,a5,7510 <alt_find_file+0x108>
            len++;
    74ec:	fe842783          	lw	a5,-24(s0)
    74f0:	00178793          	addi	a5,a5,1
    74f4:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    74f8:	fe842703          	lw	a4,-24(s0)
    74fc:	fec42783          	lw	a5,-20(s0)
    7500:	f4f740e3          	blt	a4,a5,7440 <alt_find_file+0x38>
    7504:	0100006f          	j	7514 <alt_find_file+0x10c>
                break;
    7508:	00000013          	nop
    750c:	0080006f          	j	7514 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
    7510:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
    7514:	fe442783          	lw	a5,-28(s0)
    7518:	0007a783          	lw	a5,0(a5)
    751c:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
    7520:	fe442703          	lw	a4,-28(s0)
    7524:	000097b7          	lui	a5,0x9
    7528:	53478793          	addi	a5,a5,1332 # 9534 <alt_fs_list>
    752c:	f0f716e3          	bne	a4,a5,7438 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
    7530:	00000793          	li	a5,0
}
    7534:	00078513          	mv	a0,a5
    7538:	02c12403          	lw	s0,44(sp)
    753c:	03010113          	addi	sp,sp,48
    7540:	00008067          	ret

00007544 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    7544:	fd010113          	addi	sp,sp,-48
    7548:	02812623          	sw	s0,44(sp)
    754c:	03010413          	addi	s0,sp,48
    7550:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
    7554:	fe800793          	li	a5,-24
    7558:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    755c:	fe042423          	sw	zero,-24(s0)
    7560:	0880006f          	j	75e8 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    7564:	000097b7          	lui	a5,0x9
    7568:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    756c:	fe842703          	lw	a4,-24(s0)
    7570:	00070793          	mv	a5,a4
    7574:	00179793          	slli	a5,a5,0x1
    7578:	00e787b3          	add	a5,a5,a4
    757c:	00279793          	slli	a5,a5,0x2
    7580:	00f687b3          	add	a5,a3,a5
    7584:	0007a783          	lw	a5,0(a5)
    7588:	04079a63          	bnez	a5,75dc <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    758c:	000097b7          	lui	a5,0x9
    7590:	b7878693          	addi	a3,a5,-1160 # 8b78 <alt_fd_list>
    7594:	fe842703          	lw	a4,-24(s0)
    7598:	00070793          	mv	a5,a4
    759c:	00179793          	slli	a5,a5,0x1
    75a0:	00e787b3          	add	a5,a5,a4
    75a4:	00279793          	slli	a5,a5,0x2
    75a8:	00f687b3          	add	a5,a3,a5
    75ac:	fdc42703          	lw	a4,-36(s0)
    75b0:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
    75b4:	000097b7          	lui	a5,0x9
    75b8:	5447a783          	lw	a5,1348(a5) # 9544 <alt_max_fd>
    75bc:	fe842703          	lw	a4,-24(s0)
    75c0:	00e7d863          	bge	a5,a4,75d0 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    75c4:	000097b7          	lui	a5,0x9
    75c8:	fe842703          	lw	a4,-24(s0)
    75cc:	54e7a223          	sw	a4,1348(a5) # 9544 <alt_max_fd>
      }
      rc = i;
    75d0:	fe842783          	lw	a5,-24(s0)
    75d4:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
    75d8:	0200006f          	j	75f8 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    75dc:	fe842783          	lw	a5,-24(s0)
    75e0:	00178793          	addi	a5,a5,1
    75e4:	fef42423          	sw	a5,-24(s0)
    75e8:	fe842703          	lw	a4,-24(s0)
    75ec:	01f00793          	li	a5,31
    75f0:	f6e7dae3          	bge	a5,a4,7564 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    75f4:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    75f8:	fec42783          	lw	a5,-20(s0)
}
    75fc:	00078513          	mv	a0,a5
    7600:	02c12403          	lw	s0,44(sp)
    7604:	03010113          	addi	sp,sp,48
    7608:	00008067          	ret

0000760c <fstat>:
    760c:	00058613          	mv	a2,a1
    7610:	00050593          	mv	a1,a0
    7614:	8241a503          	lw	a0,-2012(gp) # 954c <_impure_ptr>
    7618:	f31fe06f          	j	6548 <_fstat_r>
    761c:	3418                	.2byte	0x3418
    761e:	0000                	.2byte	0x0
    7620:	3080                	.2byte	0x3080
	...
