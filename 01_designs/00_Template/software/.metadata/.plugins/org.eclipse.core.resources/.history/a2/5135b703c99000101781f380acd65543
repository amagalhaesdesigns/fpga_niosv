
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000328

Program Header:
0x70000003 off    0x0000ab7a vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000034 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00008038 memsz 0x00008038 flags r-x
    LOAD off    0x00009058 vaddr 0x00008058 paddr 0x00009b68 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x00000678 vaddr 0x0000b678 paddr 0x0000b678 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007960  000002d0  000002d0  000012d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000428  00007c30  00007c30  00008c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  00008058  00009b68  00009058  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000158  0000b678  0000b678  0000b678  2**3
                  ALLOC
  6 .onchip_memory2 00000000  0000b7d0  0000b7d0  0000ab68  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  0000ab68  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000034  00000000  00000000  0000ab7a  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005e8  00000000  00000000  0000abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000782b  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000325d  00000000  00000000  000129c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00004090  00000000  00000000  00015c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000ee8  00000000  00000000  00019cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00001136  00000000  00000000  0001ab98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00001444  00000000  00000000  0001bcce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  0001d118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000070  00000000  00000000  0001d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000002d0 l    d  .text	00000000 .text
00007c30 l    d  .rodata	00000000 .rodata
00008058 l    d  .rwdata	00000000 .rwdata
0000b678 l    d  .bss	00000000 .bss
0000b7d0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
00000434 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000438 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000080f8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00001940 l     F .text	00000250 altera_avalon_jtag_uart_irq
00001b90 l     F .text	000000bc altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_log_macro.S.obj
00002220 l       .text	00000000 tx_next_char
00002254 l       .text	00000000 end_tx
0000222c l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002484 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000024ec l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002890 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00009300 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-putchar.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
0000369c l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
00003718 l     F .text	00000040 __fp_lock
00003758 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-putc.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-wbuf.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 alt_close.c
00006c0c l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00006e10 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00006f3c l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00007084 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000071c4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
000072f0 l     F .text	0000004c alt_get_errno
0000733c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00007590 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00009b64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00007798 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
000032f8 g     F .text	0000000c .hidden __stack_chk_fail_local
00002f64 g     F .text	00000014 putchar
00006bb4 g     F .text	00000058 _isatty_r
00000f8c g     F .text	00000184 alt_main
000030b0 g     F .text	00000094 cleanup_glue
00006f1c g     F .text	00000020 _getpid
00002f78 g     F .text	0000012c _puts_r
0000b6f8 g     O .bss	00000080 alt_irq
00006824 g     F .text	00000064 _lseek_r
00009b68 g       *ABS*	00000000 __flash_rwdata_start
0000b7d0 g       *ABS*	00000000 __alt_heap_start
00005e18 g     F .text	00000060 _kill_r
0000a330 g       *ABS*	00000000 __global_pointer$
0000b6e0 g     O .bss	00000001 __lock___atexit_recursive_mutex
00005958 g     F .text	00000090 _signal_r
00005f68 g     F .text	00000078 __sseek
00003818 g     F .text	000001b0 __sinit
00005fe8 g     F .text	00000174 __swbuf_r
00003798 g     F .text	0000006c __sfmoreglue
00008058 g       *ABS*	00000000 __tls_base
000050d8 g     F .text	0000000c __malloc_unlock
00000d50 g     F .text	0000005c alt_log_jtag_uart_isr_proc
0000b6c8 g     O .bss	00000001 __lock___arc4random_mutex
00004ed4 g     F .text	0000011c memmove
00003804 g     F .text	00000014 _cleanup
0000b6c4 g     O .bss	00000004 __stack_chk_guard
0000b680 g     O .bss	00000001 alt_log_write_on_flag
00009b58 g     O .rwdata	00000004 __atexit_recursive_mutex
00004648 g     F .text	00000004 __retarget_lock_close
0000b683 g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
00000000 g     F .entry	00000004 __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00006b54 g     F .text	00000060 _fstat_r
0000b6c0 g     O .bss	00000004 errno
00005ed8 g     F .text	00000008 __seofread
0000b778 g     O .bss	00000011 alt_log_write_buf
0000b694 g     O .bss	00000004 alt_argv
0000159c g     F .text	00000034 usleep
00009180 g     O .rwdata	00000180 alt_fd_list
00008074 g     O .rwdata	0000001d alt_log_msg_alt_main
00002f5c g     F .text	00000008 _putchar_r
0000b682 g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
000078f4 g     F .text	00000120 alt_find_dev
00002db8 g     F .text	000001a4 memcpy
0000370c g     F .text	0000000c _cleanup_r
00002c84 g     F .text	000000b0 alt_niosv_timer_sc_isr
0000296c g     F .text	00000078 alt_io_redirect
000030a4 g     F .text	0000000c puts
00007c30 g       *ABS*	00000000 __fini_array_end
00001db8 g     F .text	0000022c altera_avalon_jtag_uart_read
000059e8 g     F .text	000000c4 _raise_r
00006e5c g     F .text	000000c0 _fstat
000001b4 g     F .exceptions	0000011c handle_trap
00000f04 g     F .text	00000088 alt_log_system_clock
0000b6f4 g     O .bss	00000004 __malloc_top_pad
00005e78 g     F .text	00000004 _getpid_r
0000b6b0 g     O .bss	00000004 __dso_handle
0000404c g     F .text	0000049c __sfvwrite_r
00005aac g     F .text	000000e0 __sigtramp_r
00000b08 g     F .text	000000a4 alt_log_printf_proc
000058a4 g     F .text	00000058 _sbrk_r
0000b684 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
00006af0 g     F .text	00000064 _read_r
00009b4c g     O .rwdata	00000004 alt_max_fd
000062ac g     F .text	00000178 _fclose_r
0000675c g     F .text	000000c8 fflush
0000b6f0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b790 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
00003304 g     F .text	0000001c __stack_chk_init
0000b6d4 g     O .bss	00000001 __lock___env_recursive_mutex
00006f88 g     F .text	000000fc _isatty
0000b6e8 g     O .bss	00000001 __lock___sinit_recursive_mutex
00008054 g     O .rodata	00000004 _global_impure_ptr
0000534c g     F .text	00000558 _realloc_r
0000b7d0 g       *ABS*	00000000 __bss_end
00002714 g     F .text	0000017c alt_iic_isr_register
0000143c g     F .text	00000160 alt_tick
00007428 g     F .text	00000168 _open
0000b68c g     O .bss	00000004 alt_system_clock_in_sec
000076e4 g     F .text	000000b4 _sbrk
00000d08 g     F .text	00000048 alt_log_jtag_uart_startup_info
00003260 g     F .text	00000098 __stack_chk_fail
00008058 g       *ABS*	00000000 __tbss_start
00002d34 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
00003b54 g     F .text	0000002c __fp_lock_all
000013a4 g     F .text	00000098 alt_alarm_stop
0000b681 g     O .bss	00000001 alt_log_sys_clk_on_flag
000000c0 g     F .exceptions	000000f4 alt_irq_handler
000005c0 g     F .text	00000548 alt_log_private_printf
00009158 g     O .rwdata	00000028 alt_dev_null
00003bac g     F .text	0000005c __libc_fini_array
00008058 g     O .rwdata	00000019 alt_log_msg_bss
00002b38 g     F .text	00000084 alt_niosv_mtime_get
00003144 g     F .text	0000011c _reclaim_reent
0000243c g     F .text	00000048 alt_dcache_flush_all
0000b6d8 g     O .bss	00000001 __lock___malloc_recursive_mutex
00009b68 g       *ABS*	00000000 __ram_rwdata_end
00009b44 g     O .rwdata	00000008 alt_dev_list
00003400 g     F .text	00000014 write
00005148 g     F .text	00000100 _putc_r
00002b14 g     F .text	00000024 alt_timestamp_freq
00008058 g       *ABS*	00000000 __ram_rodata_end
00007c18 g     F .text	00000010 fstat
0000b7d0 g       *ABS*	00000000 end
000024b0 g     F .text	0000003c alt_dev_reg
0000466c g     F .text	00000004 __retarget_lock_release_recursive
00000508 g     F .text	00000058 alt_log_txchar
00004660 g     F .text	00000008 __retarget_lock_try_acquire_recursive
00001818 g     F .text	00000128 altera_avalon_jtag_uart_init
00010000 g       *ABS*	00000000 __alt_stack_pointer
00001fe4 g     F .text	0000023c altera_avalon_jtag_uart_write
00003b24 g     F .text	0000000c __sfp_lock_acquire
00004e10 g     F .text	000000c4 memchr
00003d44 g     F .text	00000308 _free_r
00001110 g     F .text	00000260 alt_printf
00003560 g     F .text	0000013c __call_exitprocs
00009b5c g     O .rwdata	00000004 __malloc_sbrk_base
00000328 g     F .text	00000110 _start
0000b6a0 g     O .bss	00000004 _alt_tick_rate
00004658 g     F .text	00000008 __retarget_lock_try_acquire
00007210 g     F .text	000000e0 _lseek
0000b6a8 g     O .bss	00000008 _alt_nticks
00005c4c g     F .text	00000094 signal
00002c18 g     F .text	0000006c alt_niosv_mtimecmp_get
00001608 g     F .text	0000009c alt_sys_init
000050e4 g     F .text	00000064 _open_r
00008058 g       *ABS*	00000000 __tdata_source
00003478 g     F .text	000000e8 __register_exitproc
00002220 g       .text	00000000 tx_log_str
00001c4c g     F .text	0000006c altera_avalon_jtag_uart_close
00008058 g       *ABS*	00000000 __ram_rwdata_start
00007c30 g       *ABS*	00000000 __ram_rodata_start
0000b7a8 g     O .bss	00000028 __malloc_current_mallinfo
0000b6b8 g     O .bss	00000008 alt_niosv_timestamp_offset
00009b30 g     O .rwdata	00000004 alt_log_boot_on_flag
0000b67c g     O .bss	00000004 alt_niosv_timer_interrupt_handler
000016a4 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00007b50 g     F .text	000000c8 alt_get_fd
000023c4 g     F .text	00000078 alt_busy_sleep
000036b4 g     F .text	00000058 _close_r
00000c28 g     F .text	000000e0 alt_log_jtag_uart_print_control_reg
0000176c g     F .text	00000054 altera_avalon_jtag_uart_close_fd
0000b7d0 g       *ABS*	00000000 __alt_stack_base
000017c0 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
0000464c g     F .text	00000004 __retarget_lock_close_recursive
0000616c g     F .text	00000140 __swsetup_r
000039c8 g     F .text	0000015c __sfp
00009728 g     O .rwdata	00000408 __malloc_av_
00003b48 g     F .text	0000000c __sinit_lock_release
00005e7c g     F .text	0000005c __sread
00007a14 g     F .text	0000013c alt_find_file
00002538 g     F .text	000000a8 alt_dev_llist_insert
000050cc g     F .text	0000000c __malloc_lock
00007c30 g       *ABS*	00000000 __fini_array_start
0000667c g     F .text	000000e0 _fflush_r
00004654 g     F .text	00000004 __retarget_lock_acquire_recursive
0000b678 g       *ABS*	00000000 __bss_start
00008058 g       *ABS*	00000000 __tdata_start
00008058 g       *ABS*	00000000 __tdata_end
00004ff0 g     F .text	000000dc memset
000002d0 g     F .text	00000058 main
0000b698 g     O .bss	00000004 alt_envp
0000b6ec g     O .bss	00000004 __malloc_max_total_mem
00001708 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00004644 g     F .text	00000004 __retarget_lock_init_recursive
0000615c g     F .text	00000010 __swbuf
00005fe0 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
00006424 g     F .text	0000000c fclose
00002a7c g     F .text	00000040 alt_timestamp_start
00007c30 g       *ABS*	00000000 __init_array_end
00004670 g     F .text	000007a0 _malloc_r
00009b50 g     O .rwdata	00000004 alt_errno
00000bac g     F .text	0000007c altera_avalon_jtag_uart_report_log
00005ce0 g     F .text	0000005c _init_signal
000044e8 g     F .text	000000a4 _fwalk
00005248 g     F .text	00000104 putc
000080c8 g     O .rwdata	0000002a alt_log_msg_cache
00003c08 g     F .text	0000013c _malloc_trim_r
00007c30 g       *ABS*	00000000 __flash_rodata_start
00004640 g     F .text	00000004 __retarget_lock_init
000015d0 g     F .text	00000038 alt_irq_init
000029e4 g     F .text	00000074 alt_release_fd
00008094 g     O .rwdata	00000031 alt_log_msg_stackpointer
00002d70 g     F .text	00000014 atexit
00003414 g     F .text	00000064 _write_r
00009b54 g     O .rwdata	00000004 _impure_ptr
0000b690 g     O .bss	00000004 alt_argc
00006430 g     F .text	0000024c __sflush_r
00002640 g     F .text	00000060 _do_dtors
00003b80 g     F .text	0000002c __fp_unlock_all
00009b3c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002abc g     F .text	00000058 alt_timestamp
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00006a18 g     F .text	000000d8 __swhatbuf_r
0000b688 g     O .bss	00000004 alt_log_sys_clk_count
00000dac g     F .text	00000158 alt_log_write
000026c0 g     F .text	00000054 alt_ic_isr_register
00000020 g       .exceptions	00000000 trap_vector
000077e4 g     F .text	00000110 _write
00009b68 g       *ABS*	00000000 _edata
0000b7d0 g       *ABS*	00000000 _end
000002d0 g       *ABS*	00000000 __ram_exceptions_end
0000b6dc g     O .bss	00000001 __lock___at_quick_exit_mutex
00001cb8 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
00002a58 g     F .text	00000024 intel_niosv_irq_init
00005ee0 g     F .text	00000088 __swrite
00009b60 g     O .rwdata	00000004 __malloc_trim_threshold
00002d84 g     F .text	00000034 exit
0000458c g     F .text	000000b4 _fwalk_reent
000070d0 g     F .text	000000f4 _kill
00010000 g       *ABS*	00000000 __alt_data_end
00008058 g       *ABS*	00000000 __tbss_end
00003b30 g     F .text	0000000c __sfp_lock_release
000075dc g     F .text	00000108 _read
00007c28 g       *ABS*	00000000 __init_array_start
00004650 g     F .text	00000004 __retarget_lock_acquire
00004668 g     F .text	00000004 __retarget_lock_release
00006d38 g     F .text	000000d8 _exit
00002258 g     F .text	0000016c alt_alarm_start
0000b6cc g     O .bss	00000001 __lock___dd_hash_mutex
00006888 g     F .text	00000190 __smakebuf_r
0000b6d0 g     O .bss	00000001 __lock___tz_mutex
00003320 g     F .text	0000008c strlen
000058fc g     F .text	0000005c _init_signal_r
000033b8 g     F .text	00000048 open
00001370 g     F .text	00000034 alt_putchar
000026a0 g     F .text	00000020 alt_icache_flush_all
00002bbc g     F .text	0000005c alt_niosv_mtimecmp_set
00009b34 g     O .rwdata	00000008 alt_alarm_list
000025e0 g     F .text	00000060 _do_ctors
00005d3c g     F .text	000000dc __sigtramp
000033ac g     F .text	0000000c close
00000560 g     F .text	00000060 alt_log_repchar
0000049c g     F .text	0000006c alt_load
0000b678 g     O .bss	00000004 alt_niosv_software_interrupt_handler
0000b6e4 g     O .bss	00000001 __lock___sfp_recursive_mutex
00006c58 g     F .text	000000e0 _close
00005b8c g     F .text	000000c0 raise
00003b3c g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	3280006f          	j	328 <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
  20:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
  24:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  28:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  2c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  30:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  34:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  38:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  3c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  40:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  44:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  48:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  4c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  50:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  54:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  58:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  5c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  60:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	ra,1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  b8:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	addi	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fe442783          	lw	a5,-28(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  f8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fd442703          	lw	a4,-44(s0)
 108:	fd842783          	lw	a5,-40(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	0000b7b7          	lui	a5,0xb
 118:	6f878713          	addi	a4,a5,1784 # b6f8 <alt_irq>
 11c:	fdc42783          	lw	a5,-36(s0)
 120:	00379793          	slli	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	0000b7b7          	lui	a5,0xb
 130:	6f878693          	addi	a3,a5,1784 # b6f8 <alt_irq>
 134:	fdc42783          	lw	a5,-36(s0)
 138:	00379793          	slli	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 160:	fe842703          	lw	a4,-24(s0)
 164:	fec42783          	lw	a5,-20(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srli	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fd842783          	lw	a5,-40(s0)
 178:	00179793          	slli	a5,a5,0x1
 17c:	fcf42c23          	sw	a5,-40(s0)
            i++;
 180:	fdc42783          	lw	a5,-36(s0)
 184:	00178793          	addi	a5,a5,1
 188:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 194:	fd442783          	lw	a5,-44(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	00000013          	nop
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	addi	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff7c793          	not	a5,a5
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1f4:	fe842783          	lw	a5,-24(s0)
 1f8:	0a078663          	beqz	a5,2a4 <handle_trap+0xf0>
        switch (exception_code) {
 1fc:	fec42703          	lw	a4,-20(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fec42703          	lw	a4,-20(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	0000b7b7          	lui	a5,0xb
 218:	67c7a783          	lw	a5,1660(a5) # b67c <alt_niosv_timer_interrupt_handler>
 21c:	08078863          	beqz	a5,2ac <handle_trap+0xf8>
                    ALT_OS_INT_ENTER();
 220:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	0000b7b7          	lui	a5,0xb
 228:	67c7a783          	lw	a5,1660(a5) # b67c <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	00000013          	nop
                break;
 240:	06c0006f          	j	2ac <handle_trap+0xf8>
                if (alt_niosv_software_interrupt_handler) {
 244:	0000b7b7          	lui	a5,0xb
 248:	6787a783          	lw	a5,1656(a5) # b678 <alt_niosv_software_interrupt_handler>
 24c:	06078463          	beqz	a5,2b4 <handle_trap+0x100>
                    ALT_OS_INT_ENTER();
 250:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	0000b7b7          	lui	a5,0xb
 258:	6787a783          	lw	a5,1656(a5) # b678 <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	00000013          	nop
                break;
 270:	0440006f          	j	2b4 <handle_trap+0x100>
                if (exception_code >= 16) {
 274:	fec42703          	lw	a4,-20(s0)
 278:	00f00793          	li	a5,15
 27c:	00e7f663          	bgeu	a5,a4,288 <handle_trap+0xd4>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	ra,c0 <alt_irq_handler>
                break;
 284:	0340006f          	j	2b8 <handle_trap+0x104>
                    ALT_LOG_PRINTF("invalid exception code: %d, epc = %d, tval = %d\n", exception_code, epc, tval);
 288:	fd442683          	lw	a3,-44(s0)
 28c:	fd842603          	lw	a2,-40(s0)
 290:	fec42583          	lw	a1,-20(s0)
 294:	000087b7          	lui	a5,0x8
 298:	c5478513          	addi	a0,a5,-940 # 7c54 <__fini_array_end+0x24>
 29c:	06d000ef          	jal	ra,b08 <alt_log_printf_proc>
                break;
 2a0:	0180006f          	j	2b8 <handle_trap+0x104>
            NIOSV_EBREAK();
 2a4:	00100073          	ebreak
 2a8:	0100006f          	j	2b8 <handle_trap+0x104>
                break;
 2ac:	00000013          	nop
 2b0:	0080006f          	j	2b8 <handle_trap+0x104>
                break;
 2b4:	00000013          	nop
    return epc;
 2b8:	fd842783          	lw	a5,-40(s0)
}
 2bc:	00078513          	mv	a0,a5
 2c0:	02c12083          	lw	ra,44(sp)
 2c4:	02812403          	lw	s0,40(sp)
 2c8:	03010113          	addi	sp,sp,48
 2cc:	00008067          	ret

Disassembly of section .text:

000002d0 <main>:
#include <unistd.h>
#include "system.h"
#include "io.h"

int main (void)
{
     2d0:	fe010113          	addi	sp,sp,-32
     2d4:	00112e23          	sw	ra,28(sp)
     2d8:	00812c23          	sw	s0,24(sp)
     2dc:	02010413          	addi	s0,sp,32
	printf("Starting NIOS V ... \r\n");
     2e0:	000087b7          	lui	a5,0x8
     2e4:	c3078513          	addi	a0,a5,-976 # 7c30 <__fini_array_end>
     2e8:	5bd020ef          	jal	ra,30a4 <puts>

	while(1)
	{
		uint32_t key = IORD_32DIRECT(KEY_BASE, 0);
     2ec:	000207b7          	lui	a5,0x20
     2f0:	02078793          	addi	a5,a5,32 # 20020 <__alt_data_end+0x10020>
     2f4:	0007a783          	lw	a5,0(a5)
     2f8:	fef42423          	sw	a5,-24(s0)
     2fc:	fe842783          	lw	a5,-24(s0)
     300:	fef42623          	sw	a5,-20(s0)
		alt_printf("Key = %i \r\n", key);
     304:	fec42583          	lw	a1,-20(s0)
     308:	000087b7          	lui	a5,0x8
     30c:	c4878513          	addi	a0,a5,-952 # 7c48 <__fini_array_end+0x18>
     310:	601000ef          	jal	ra,1110 <alt_printf>
//		} else {
//			printf("LED L \r\n");
//			IOWR_32DIRECT(LED_BASE, 0, 1);
//		}

		usleep(500000);
     314:	0007a7b7          	lui	a5,0x7a
     318:	12078513          	addi	a0,a5,288 # 7a120 <__alt_data_end+0x6a120>
     31c:	280010ef          	jal	ra,159c <usleep>
	{
     320:	00000013          	nop
     324:	fc9ff06f          	j	2ec <main+0x1c>

00000328 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     328:	00000297          	auipc	t0,0x0
     32c:	cf828293          	addi	t0,t0,-776 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     330:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     334:	08800293          	li	t0,136
    csrc mstatus, t0
     338:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     33c:	30401073          	csrw	mie,zero
    csrw mip, zero
     340:	34401073          	csrw	mip,zero
 * RTL simulations can ensure the data cache tag RAM is already
 * initialized so skipping this speeds up RTL simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
#if ALT_CPU_DCACHE_SIZE > 0
    li t0, ALT_CPU_DCACHE_SIZE
     344:	000012b7          	lui	t0,0x1
0:
    /* cbo.inval.ix */
    .insn i 0x0F, 0x2, zero, t0, 0x080
     348:	0802a00f          	.4byte	0x802a00f
    addi t0, t0, -ALT_CPU_DCACHE_LINE_SIZE
     34c:	fe028293          	addi	t0,t0,-32 # fe0 <alt_main+0x54>
    bnez t0, 0b
     350:	fe029ce3          	bnez	t0,348 <_start+0x20>
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     354:	0000a197          	auipc	gp,0xa
     358:	fdc18193          	addi	gp,gp,-36 # a330 <__global_pointer$>
    .option pop

    /* Log that the stack pointer is about to be setup. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
     35c:	00009597          	auipc	a1,0x9
     360:	7d458593          	addi	a1,a1,2004 # 9b30 <alt_log_boot_on_flag>
     364:	0005a503          	lw	a0,0(a1)
     368:	00050863          	beqz	a0,378 <_start+0x50>
     36c:	00008517          	auipc	a0,0x8
     370:	d2850513          	addi	a0,a0,-728 # 8094 <alt_log_msg_stackpointer>
     374:	6ad010ef          	jal	ra,2220 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     378:	00010117          	auipc	sp,0x10
     37c:	c8810113          	addi	sp,sp,-888 # 10000 <__alt_data_end>
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
     380:	00009597          	auipc	a1,0x9
     384:	7b058593          	addi	a1,a1,1968 # 9b30 <alt_log_boot_on_flag>
     388:	0005a503          	lw	a0,0(a1)
     38c:	00050863          	beqz	a0,39c <_start+0x74>
     390:	00008517          	auipc	a0,0x8
     394:	cc850513          	addi	a0,a0,-824 # 8058 <alt_log_msg_bss>
     398:	689010ef          	jal	ra,2220 <tx_log_str>
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     39c:	0000b317          	auipc	t1,0xb
     3a0:	2dc30313          	addi	t1,t1,732 # b678 <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
     3a4:	0000b397          	auipc	t2,0xb
     3a8:	42c38393          	addi	t2,t2,1068 # b7d0 <__alt_heap_start>
0:
    sw zero, (t1)
     3ac:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3b0:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3b4:	fe736ce3          	bltu	t1,t2,3ac <_start+0x84>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     3b8:	0e4000ef          	jal	ra,49c <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     3bc:	00008317          	auipc	t1,0x8
     3c0:	c9c30313          	addi	t1,t1,-868 # 8058 <alt_log_msg_bss>
    la t2, __tbss_end
     3c4:	00008397          	auipc	t2,0x8
     3c8:	c9438393          	addi	t2,t2,-876 # 8058 <alt_log_msg_bss>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     3cc:	00737863          	bgeu	t1,t2,3dc <_start+0xb4>
0:
    sw zero, (t1)
     3d0:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3d4:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3d8:	fe736ce3          	bltu	t1,t2,3d0 <_start+0xa8>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     3dc:	00008297          	auipc	t0,0x8
     3e0:	c7c28293          	addi	t0,t0,-900 # 8058 <alt_log_msg_bss>
    la t1, __tdata_end
     3e4:	00008317          	auipc	t1,0x8
     3e8:	c7430313          	addi	t1,t1,-908 # 8058 <alt_log_msg_bss>
    la t2, __tdata_source
     3ec:	00008397          	auipc	t2,0x8
     3f0:	c6c38393          	addi	t2,t2,-916 # 8058 <alt_log_msg_bss>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     3f4:	0062fc63          	bgeu	t0,t1,40c <_start+0xe4>
0:
    lw s1, (t0)
     3f8:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     3fc:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     400:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     404:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     408:	fe62e8e3          	bltu	t0,t1,3f8 <_start+0xd0>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     40c:	00008217          	auipc	tp,0x8
     410:	c4c20213          	addi	tp,tp,-948 # 8058 <alt_log_msg_bss>

    /* Log that alt_main is about to be called. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
     414:	00009597          	auipc	a1,0x9
     418:	71c58593          	addi	a1,a1,1820 # 9b30 <alt_log_boot_on_flag>
     41c:	0005a503          	lw	a0,0(a1)
     420:	00050863          	beqz	a0,430 <_start+0x108>
     424:	00008517          	auipc	a0,0x8
     428:	c5050513          	addi	a0,a0,-944 # 8074 <alt_log_msg_alt_main>
     42c:	5f5010ef          	jal	ra,2220 <tx_log_str>
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     430:	35d000ef          	jal	ra,f8c <alt_main>

00000434 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     434:	0000006f          	j	434 <alt_after_alt_main>

00000438 <alt_load_section>:
     438:	fe010113          	addi	sp,sp,-32
     43c:	00812e23          	sw	s0,28(sp)
     440:	02010413          	addi	s0,sp,32
     444:	fea42623          	sw	a0,-20(s0)
     448:	feb42423          	sw	a1,-24(s0)
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     44c:	fec42223          	sw	a2,-28(s0)
  if (to != from)
     450:	fe842703          	lw	a4,-24(s0)
     454:	fec42783          	lw	a5,-20(s0)
     458:	02f70a63          	beq	a4,a5,48c <alt_load_section+0x54>
  {
    while( to != end )
     45c:	0240006f          	j	480 <alt_load_section+0x48>
    {
      *to++ = *from++;
     460:	fec42703          	lw	a4,-20(s0)
     464:	00470793          	addi	a5,a4,4
     468:	fef42623          	sw	a5,-20(s0)
     46c:	fe842783          	lw	a5,-24(s0)
     470:	00478693          	addi	a3,a5,4
     474:	fed42423          	sw	a3,-24(s0)
     478:	00072703          	lw	a4,0(a4)
     47c:	00e7a023          	sw	a4,0(a5)
    while( to != end )
     480:	fe842703          	lw	a4,-24(s0)
     484:	fe442783          	lw	a5,-28(s0)
     488:	fcf71ce3          	bne	a4,a5,460 <alt_load_section+0x28>
    }
  }
}
     48c:	00000013          	nop
     490:	01c12403          	lw	s0,28(sp)
     494:	02010113          	addi	sp,sp,32
     498:	00008067          	ret

0000049c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     49c:	ff010113          	addi	sp,sp,-16
     4a0:	00112623          	sw	ra,12(sp)
     4a4:	00812423          	sw	s0,8(sp)
     4a8:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     4ac:	83818613          	addi	a2,gp,-1992 # 9b68 <__flash_rwdata_start>
     4b0:	000087b7          	lui	a5,0x8
     4b4:	05878593          	addi	a1,a5,88 # 8058 <alt_log_msg_bss>
     4b8:	83818513          	addi	a0,gp,-1992 # 9b68 <__flash_rwdata_start>
     4bc:	f7dff0ef          	jal	ra,438 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     4c0:	2d000613          	li	a2,720
     4c4:	02000593          	li	a1,32
     4c8:	02000513          	li	a0,32
     4cc:	f6dff0ef          	jal	ra,438 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     4d0:	000087b7          	lui	a5,0x8
     4d4:	05878613          	addi	a2,a5,88 # 8058 <alt_log_msg_bss>
     4d8:	000087b7          	lui	a5,0x8
     4dc:	c3078593          	addi	a1,a5,-976 # 7c30 <__fini_array_end>
     4e0:	000087b7          	lui	a5,0x8
     4e4:	c3078513          	addi	a0,a5,-976 # 7c30 <__fini_array_end>
     4e8:	f51ff0ef          	jal	ra,438 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     4ec:	751010ef          	jal	ra,243c <alt_dcache_flush_all>
  alt_icache_flush_all();
     4f0:	1b0020ef          	jal	ra,26a0 <alt_icache_flush_all>
}
     4f4:	00000013          	nop
     4f8:	00c12083          	lw	ra,12(sp)
     4fc:	00812403          	lw	s0,8(sp)
     500:	01010113          	addi	sp,sp,16
     504:	00008067          	ret

00000508 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
     508:	fd010113          	addi	sp,sp,-48
     50c:	02812623          	sw	s0,44(sp)
     510:	03010413          	addi	s0,sp,48
     514:	fca42e23          	sw	a0,-36(s0)
     518:	fcb42c23          	sw	a1,-40(s0)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
     51c:	00000013          	nop
     520:	fd842783          	lw	a5,-40(s0)
     524:	00478793          	addi	a5,a5,4
     528:	0007a783          	lw	a5,0(a5)
     52c:	fef42423          	sw	a5,-24(s0)
     530:	fe842703          	lw	a4,-24(s0)
     534:	000107b7          	lui	a5,0x10
     538:	fef764e3          	bltu	a4,a5,520 <alt_log_txchar+0x18>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
     53c:	fdc42783          	lw	a5,-36(s0)
     540:	fef42623          	sw	a5,-20(s0)
     544:	fd842783          	lw	a5,-40(s0)
     548:	fec42703          	lw	a4,-20(s0)
     54c:	00e7a023          	sw	a4,0(a5) # 10000 <__alt_data_end>
}
     550:	00000013          	nop
     554:	02c12403          	lw	s0,44(sp)
     558:	03010113          	addi	sp,sp,48
     55c:	00008067          	ret

00000560 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
     560:	fe010113          	addi	sp,sp,-32
     564:	00112e23          	sw	ra,28(sp)
     568:	00812c23          	sw	s0,24(sp)
     56c:	02010413          	addi	s0,sp,32
     570:	00050793          	mv	a5,a0
     574:	feb42423          	sw	a1,-24(s0)
     578:	fec42223          	sw	a2,-28(s0)
     57c:	fef407a3          	sb	a5,-17(s0)
  while(r-- > 0)
     580:	0180006f          	j	598 <alt_log_repchar+0x38>
    alt_log_txchar(c,(char*) base);
     584:	fef44783          	lbu	a5,-17(s0)
     588:	fe442703          	lw	a4,-28(s0)
     58c:	00070593          	mv	a1,a4
     590:	00078513          	mv	a0,a5
     594:	f75ff0ef          	jal	ra,508 <alt_log_txchar>
  while(r-- > 0)
     598:	fe842783          	lw	a5,-24(s0)
     59c:	fff78713          	addi	a4,a5,-1
     5a0:	fee42423          	sw	a4,-24(s0)
     5a4:	fef040e3          	bgtz	a5,584 <alt_log_repchar+0x24>
}
     5a8:	00000013          	nop
     5ac:	00000013          	nop
     5b0:	01c12083          	lw	ra,28(sp)
     5b4:	01812403          	lw	s0,24(sp)
     5b8:	02010113          	addi	sp,sp,32
     5bc:	00008067          	ret

000005c0 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
     5c0:	fa010113          	addi	sp,sp,-96
     5c4:	04112e23          	sw	ra,92(sp)
     5c8:	04812c23          	sw	s0,88(sp)
     5cc:	04912a23          	sw	s1,84(sp)
     5d0:	06010413          	addi	s0,sp,96
     5d4:	faa42623          	sw	a0,-84(s0)
     5d8:	fab42423          	sw	a1,-88(s0)
     5dc:	fac42223          	sw	a2,-92(s0)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
     5e0:	fa042e23          	sw	zero,-68(s0)
  int fmtLong = 0;
     5e4:	fc042023          	sw	zero,-64(s0)
  int fmtBeforeDecimal = 0;
     5e8:	fc042223          	sw	zero,-60(s0)
  int fmtAfterDecimal = 0;
     5ec:	fc042423          	sw	zero,-56(s0)
  int fmtBase = 0;
     5f0:	fc042623          	sw	zero,-52(s0)
  int fmtSigned = 0;
     5f4:	fc042823          	sw	zero,-48(s0)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
     5f8:	fc042a23          	sw	zero,-44(s0)

  w = fmt;
     5fc:	fac42783          	lw	a5,-84(s0)
     600:	faf42a23          	sw	a5,-76(s0)
  state = pfState_chars;
     604:	fa042c23          	sw	zero,-72(s0)

  while(0 != (c = *w++))
     608:	4c80006f          	j	ad0 <alt_log_private_printf+0x510>
    {
    switch(state)
     60c:	fb842703          	lw	a4,-72(s0)
     610:	00200793          	li	a5,2
     614:	0cf70c63          	beq	a4,a5,6ec <alt_log_private_printf+0x12c>
     618:	fb842703          	lw	a4,-72(s0)
     61c:	00200793          	li	a5,2
     620:	4ae7c863          	blt	a5,a4,ad0 <alt_log_private_printf+0x510>
     624:	fb842783          	lw	a5,-72(s0)
     628:	00078a63          	beqz	a5,63c <alt_log_private_printf+0x7c>
     62c:	fb842703          	lw	a4,-72(s0)
     630:	00100793          	li	a5,1
     634:	06f70263          	beq	a4,a5,698 <alt_log_private_printf+0xd8>
     638:	4980006f          	j	ad0 <alt_log_private_printf+0x510>
      {
      case pfState_chars:
        if(c == '%')
     63c:	fb344703          	lbu	a4,-77(s0)
     640:	02500793          	li	a5,37
     644:	02f71e63          	bne	a4,a5,680 <alt_log_private_printf+0xc0>
        {
          fmtLeadingZero = 0;
     648:	fa042e23          	sw	zero,-68(s0)
          fmtLong = 0;
     64c:	fc042023          	sw	zero,-64(s0)
          fmtBase = 10;
     650:	00a00793          	li	a5,10
     654:	fcf42623          	sw	a5,-52(s0)
          fmtSigned = 1;
     658:	00100793          	li	a5,1
     65c:	fcf42823          	sw	a5,-48(s0)
          fmtCase = 0; /* Only %X sets this. */
     660:	fc042a23          	sw	zero,-44(s0)
          fmtBeforeDecimal = -1;
     664:	fff00793          	li	a5,-1
     668:	fcf42223          	sw	a5,-60(s0)
          fmtAfterDecimal = -1;
     66c:	fff00793          	li	a5,-1
     670:	fcf42423          	sw	a5,-56(s0)
          state = pfState_firstFmtChar;
     674:	00100793          	li	a5,1
     678:	faf42c23          	sw	a5,-72(s0)
        }
        else
        {
          alt_log_txchar(c,(char*)base);
        }
        break;
     67c:	4540006f          	j	ad0 <alt_log_private_printf+0x510>
          alt_log_txchar(c,(char*)base);
     680:	fb344783          	lbu	a5,-77(s0)
     684:	fa842703          	lw	a4,-88(s0)
     688:	00070593          	mv	a1,a4
     68c:	00078513          	mv	a0,a5
     690:	e79ff0ef          	jal	ra,508 <alt_log_txchar>
        break;
     694:	43c0006f          	j	ad0 <alt_log_private_printf+0x510>

      case pfState_firstFmtChar:
        if(c == '0')
     698:	fb344703          	lbu	a4,-77(s0)
     69c:	03000793          	li	a5,48
     6a0:	00f71c63          	bne	a4,a5,6b8 <alt_log_private_printf+0xf8>
        {
          fmtLeadingZero = 1;
     6a4:	00100793          	li	a5,1
     6a8:	faf42e23          	sw	a5,-68(s0)
          state = pfState_otherFmtChar;
     6ac:	00200793          	li	a5,2
     6b0:	faf42c23          	sw	a5,-72(s0)
        else
        {
          state = pfState_otherFmtChar;
          goto otherFmtChar;
        }
        break;
     6b4:	41c0006f          	j	ad0 <alt_log_private_printf+0x510>
        else if(c == '%')
     6b8:	fb344703          	lbu	a4,-77(s0)
     6bc:	02500793          	li	a5,37
     6c0:	02f71063          	bne	a4,a5,6e0 <alt_log_private_printf+0x120>
          alt_log_txchar(c,(char*)base);
     6c4:	fb344783          	lbu	a5,-77(s0)
     6c8:	fa842703          	lw	a4,-88(s0)
     6cc:	00070593          	mv	a1,a4
     6d0:	00078513          	mv	a0,a5
     6d4:	e35ff0ef          	jal	ra,508 <alt_log_txchar>
          state = pfState_chars;
     6d8:	fa042c23          	sw	zero,-72(s0)
        break;
     6dc:	3f40006f          	j	ad0 <alt_log_private_printf+0x510>
          state = pfState_otherFmtChar;
     6e0:	00200793          	li	a5,2
     6e4:	faf42c23          	sw	a5,-72(s0)
          goto otherFmtChar;
     6e8:	00000013          	nop

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
     6ec:	fb344703          	lbu	a4,-77(s0)
     6f0:	02e00793          	li	a5,46
     6f4:	00f71663          	bne	a4,a5,700 <alt_log_private_printf+0x140>
        {
          fmtAfterDecimal = 0;
     6f8:	fc042423          	sw	zero,-56(s0)
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
          }
        break;
     6fc:	3d00006f          	j	acc <alt_log_private_printf+0x50c>
        else if('0' <= c && c <= '9')
     700:	fb344703          	lbu	a4,-77(s0)
     704:	02f00793          	li	a5,47
     708:	08e7f463          	bgeu	a5,a4,790 <alt_log_private_printf+0x1d0>
     70c:	fb344703          	lbu	a4,-77(s0)
     710:	03900793          	li	a5,57
     714:	06e7ee63          	bltu	a5,a4,790 <alt_log_private_printf+0x1d0>
          c -= '0';
     718:	fb344783          	lbu	a5,-77(s0)
     71c:	fd078793          	addi	a5,a5,-48
     720:	faf409a3          	sb	a5,-77(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     724:	fc842783          	lw	a5,-56(s0)
     728:	0407d063          	bgez	a5,768 <alt_log_private_printf+0x1a8>
            if(fmtBeforeDecimal < 0)
     72c:	fc442783          	lw	a5,-60(s0)
     730:	0007d663          	bgez	a5,73c <alt_log_private_printf+0x17c>
              fmtBeforeDecimal = 0;
     734:	fc042223          	sw	zero,-60(s0)
     738:	01c0006f          	j	754 <alt_log_private_printf+0x194>
              fmtBeforeDecimal *= 10;
     73c:	fc442703          	lw	a4,-60(s0)
     740:	00070793          	mv	a5,a4
     744:	00279793          	slli	a5,a5,0x2
     748:	00e787b3          	add	a5,a5,a4
     74c:	00179793          	slli	a5,a5,0x1
     750:	fcf42223          	sw	a5,-60(s0)
            fmtBeforeDecimal += c;
     754:	fb344783          	lbu	a5,-77(s0)
     758:	fc442703          	lw	a4,-60(s0)
     75c:	00f707b3          	add	a5,a4,a5
     760:	fcf42223          	sw	a5,-60(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     764:	3680006f          	j	acc <alt_log_private_printf+0x50c>
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
     768:	fc842703          	lw	a4,-56(s0)
     76c:	00070793          	mv	a5,a4
     770:	00279793          	slli	a5,a5,0x2
     774:	00e787b3          	add	a5,a5,a4
     778:	00179793          	slli	a5,a5,0x1
     77c:	00078713          	mv	a4,a5
     780:	fb344783          	lbu	a5,-77(s0)
     784:	00f707b3          	add	a5,a4,a5
     788:	fcf42423          	sw	a5,-56(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     78c:	3400006f          	j	acc <alt_log_private_printf+0x50c>
        else if(c == 'l')
     790:	fb344703          	lbu	a4,-77(s0)
     794:	06c00793          	li	a5,108
     798:	00f71863          	bne	a4,a5,7a8 <alt_log_private_printf+0x1e8>
          fmtLong = 1;
     79c:	00100793          	li	a5,1
     7a0:	fcf42023          	sw	a5,-64(s0)
        break;
     7a4:	3280006f          	j	acc <alt_log_private_printf+0x50c>
          switch(c)
     7a8:	fb344783          	lbu	a5,-77(s0)
     7ac:	fa878793          	addi	a5,a5,-88
     7b0:	02000713          	li	a4,32
     7b4:	30f76863          	bltu	a4,a5,ac4 <alt_log_private_printf+0x504>
     7b8:	00279713          	slli	a4,a5,0x2
     7bc:	000087b7          	lui	a5,0x8
     7c0:	c8878793          	addi	a5,a5,-888 # 7c88 <__fini_array_end+0x58>
     7c4:	00f707b3          	add	a5,a4,a5
     7c8:	0007a783          	lw	a5,0(a5)
     7cc:	00078067          	jr	a5
                if(fmtLong)
     7d0:	fc042783          	lw	a5,-64(s0)
     7d4:	02078e63          	beqz	a5,810 <alt_log_private_printf+0x250>
                  if (fmtSigned)
     7d8:	fd042783          	lw	a5,-48(s0)
     7dc:	00078e63          	beqz	a5,7f8 <alt_log_private_printf+0x238>
                    v = va_arg(args,long);
     7e0:	fa442783          	lw	a5,-92(s0)
     7e4:	00478713          	addi	a4,a5,4
     7e8:	fae42223          	sw	a4,-92(s0)
     7ec:	0007a783          	lw	a5,0(a5)
     7f0:	fcf42c23          	sw	a5,-40(s0)
     7f4:	0500006f          	j	844 <alt_log_private_printf+0x284>
                    v = va_arg(args,unsigned long);
     7f8:	fa442783          	lw	a5,-92(s0)
     7fc:	00478713          	addi	a4,a5,4
     800:	fae42223          	sw	a4,-92(s0)
     804:	0007a783          	lw	a5,0(a5)
     808:	fcf42c23          	sw	a5,-40(s0)
     80c:	0380006f          	j	844 <alt_log_private_printf+0x284>
                  if (fmtSigned)
     810:	fd042783          	lw	a5,-48(s0)
     814:	00078e63          	beqz	a5,830 <alt_log_private_printf+0x270>
                    v = va_arg(args,int);
     818:	fa442783          	lw	a5,-92(s0)
     81c:	00478713          	addi	a4,a5,4
     820:	fae42223          	sw	a4,-92(s0)
     824:	0007a783          	lw	a5,0(a5)
     828:	fcf42c23          	sw	a5,-40(s0)
     82c:	0180006f          	j	844 <alt_log_private_printf+0x284>
                    v = va_arg(args,unsigned int);
     830:	fa442783          	lw	a5,-92(s0)
     834:	00478713          	addi	a4,a5,4
     838:	fae42223          	sw	a4,-92(s0)
     83c:	0007a783          	lw	a5,0(a5)
     840:	fcf42c23          	sw	a5,-40(s0)
                sign = 0;
     844:	fe042223          	sw	zero,-28(s0)
                if( fmtSigned && (v & (0x80000000)) )
     848:	fd042783          	lw	a5,-48(s0)
     84c:	02078063          	beqz	a5,86c <alt_log_private_printf+0x2ac>
     850:	fd842783          	lw	a5,-40(s0)
     854:	0007dc63          	bgez	a5,86c <alt_log_private_printf+0x2ac>
                  v = ~v + 1;
     858:	fd842783          	lw	a5,-40(s0)
     85c:	40f007b3          	neg	a5,a5
     860:	fcf42c23          	sw	a5,-40(s0)
                  sign = 1;
     864:	00100793          	li	a5,1
     868:	fef42223          	sw	a5,-28(s0)
                vShrink = v;
     86c:	fd842783          	lw	a5,-40(s0)
     870:	fef42023          	sw	a5,-32(s0)
                p = 1;
     874:	00100793          	li	a5,1
     878:	fcf42e23          	sw	a5,-36(s0)
                digitCount = 1;
     87c:	00100793          	li	a5,1
     880:	fef42423          	sw	a5,-24(s0)
                while( (vShrink = vShrink / fmtBase) > 0 )
     884:	0200006f          	j	8a4 <alt_log_private_printf+0x2e4>
                  digitCount++;
     888:	fe842783          	lw	a5,-24(s0)
     88c:	00178793          	addi	a5,a5,1
     890:	fef42423          	sw	a5,-24(s0)
                  p *= fmtBase;
     894:	fcc42783          	lw	a5,-52(s0)
     898:	fdc42703          	lw	a4,-36(s0)
     89c:	02f707b3          	mul	a5,a4,a5
     8a0:	fcf42e23          	sw	a5,-36(s0)
                while( (vShrink = vShrink / fmtBase) > 0 )
     8a4:	fcc42783          	lw	a5,-52(s0)
     8a8:	fe042703          	lw	a4,-32(s0)
     8ac:	02f757b3          	divu	a5,a4,a5
     8b0:	fef42023          	sw	a5,-32(s0)
     8b4:	fe042783          	lw	a5,-32(s0)
     8b8:	fc0798e3          	bnez	a5,888 <alt_log_private_printf+0x2c8>
                fmtBeforeDecimal -= digitCount;
     8bc:	fc442703          	lw	a4,-60(s0)
     8c0:	fe842783          	lw	a5,-24(s0)
     8c4:	40f707b3          	sub	a5,a4,a5
     8c8:	fcf42223          	sw	a5,-60(s0)
                if(fmtLeadingZero)
     8cc:	fbc42783          	lw	a5,-68(s0)
     8d0:	02078e63          	beqz	a5,90c <alt_log_private_printf+0x34c>
                  if(sign)
     8d4:	fe442783          	lw	a5,-28(s0)
     8d8:	02078063          	beqz	a5,8f8 <alt_log_private_printf+0x338>
                    alt_log_txchar('-',(char*)base);
     8dc:	fa842783          	lw	a5,-88(s0)
     8e0:	00078593          	mv	a1,a5
     8e4:	02d00513          	li	a0,45
     8e8:	c21ff0ef          	jal	ra,508 <alt_log_txchar>
                    fmtBeforeDecimal--;
     8ec:	fc442783          	lw	a5,-60(s0)
     8f0:	fff78793          	addi	a5,a5,-1
     8f4:	fcf42223          	sw	a5,-60(s0)
                  alt_log_repchar('0',fmtBeforeDecimal,base);
     8f8:	fa842603          	lw	a2,-88(s0)
     8fc:	fc442583          	lw	a1,-60(s0)
     900:	03000513          	li	a0,48
     904:	c5dff0ef          	jal	ra,560 <alt_log_repchar>
     908:	0c00006f          	j	9c8 <alt_log_private_printf+0x408>
                    if(sign)
     90c:	fe442783          	lw	a5,-28(s0)
     910:	00078863          	beqz	a5,920 <alt_log_private_printf+0x360>
                      fmtBeforeDecimal--;
     914:	fc442783          	lw	a5,-60(s0)
     918:	fff78793          	addi	a5,a5,-1
     91c:	fcf42223          	sw	a5,-60(s0)
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
     920:	fa842603          	lw	a2,-88(s0)
     924:	fc442583          	lw	a1,-60(s0)
     928:	02000513          	li	a0,32
     92c:	c35ff0ef          	jal	ra,560 <alt_log_repchar>
                    if(sign)
     930:	fe442783          	lw	a5,-28(s0)
     934:	08078a63          	beqz	a5,9c8 <alt_log_private_printf+0x408>
                      alt_log_txchar('-',(char*)base);
     938:	fa842783          	lw	a5,-88(s0)
     93c:	00078593          	mv	a1,a5
     940:	02d00513          	li	a0,45
     944:	bc5ff0ef          	jal	ra,508 <alt_log_txchar>
                while(p)
     948:	0800006f          	j	9c8 <alt_log_private_printf+0x408>
                  d = v / p;
     94c:	fd842703          	lw	a4,-40(s0)
     950:	fdc42783          	lw	a5,-36(s0)
     954:	02f757b3          	divu	a5,a4,a5
     958:	faf40923          	sb	a5,-78(s0)
                  d += '0';
     95c:	fb244783          	lbu	a5,-78(s0)
     960:	03078793          	addi	a5,a5,48
     964:	faf40923          	sb	a5,-78(s0)
                  if(d > '9')
     968:	fb244703          	lbu	a4,-78(s0)
     96c:	03900793          	li	a5,57
     970:	02e7f263          	bgeu	a5,a4,994 <alt_log_private_printf+0x3d4>
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
     974:	fd442783          	lw	a5,-44(s0)
     978:	00078663          	beqz	a5,984 <alt_log_private_printf+0x3c4>
     97c:	00700793          	li	a5,7
     980:	0080006f          	j	988 <alt_log_private_printf+0x3c8>
     984:	02700793          	li	a5,39
     988:	fb244703          	lbu	a4,-78(s0)
     98c:	00e787b3          	add	a5,a5,a4
     990:	faf40923          	sb	a5,-78(s0)
                  alt_log_txchar(d,(char*)base);
     994:	fb244783          	lbu	a5,-78(s0)
     998:	fa842703          	lw	a4,-88(s0)
     99c:	00070593          	mv	a1,a4
     9a0:	00078513          	mv	a0,a5
     9a4:	b65ff0ef          	jal	ra,508 <alt_log_txchar>
                  v = v % p;
     9a8:	fd842703          	lw	a4,-40(s0)
     9ac:	fdc42783          	lw	a5,-36(s0)
     9b0:	02f777b3          	remu	a5,a4,a5
     9b4:	fcf42c23          	sw	a5,-40(s0)
                  p = p / fmtBase;
     9b8:	fcc42783          	lw	a5,-52(s0)
     9bc:	fdc42703          	lw	a4,-36(s0)
     9c0:	02f757b3          	divu	a5,a4,a5
     9c4:	fcf42e23          	sw	a5,-36(s0)
                while(p)
     9c8:	fdc42783          	lw	a5,-36(s0)
     9cc:	f80790e3          	bnez	a5,94c <alt_log_private_printf+0x38c>
              state = pfState_chars;
     9d0:	fa042c23          	sw	zero,-72(s0)
              break;
     9d4:	0f00006f          	j	ac4 <alt_log_private_printf+0x504>
              fmtSigned = 0;
     9d8:	fc042823          	sw	zero,-48(s0)
              goto doIntegerPrint;
     9dc:	df5ff06f          	j	7d0 <alt_log_private_printf+0x210>
              fmtSigned = 0;
     9e0:	fc042823          	sw	zero,-48(s0)
              fmtBase = 8;
     9e4:	00800793          	li	a5,8
     9e8:	fcf42623          	sw	a5,-52(s0)
              goto doIntegerPrint;
     9ec:	de5ff06f          	j	7d0 <alt_log_private_printf+0x210>
              fmtSigned = 0;
     9f0:	fc042823          	sw	zero,-48(s0)
              fmtBase = 16;
     9f4:	01000793          	li	a5,16
     9f8:	fcf42623          	sw	a5,-52(s0)
              goto doIntegerPrint;
     9fc:	dd5ff06f          	j	7d0 <alt_log_private_printf+0x210>
              fmtSigned = 0;
     a00:	fc042823          	sw	zero,-48(s0)
              fmtBase = 16;
     a04:	01000793          	li	a5,16
     a08:	fcf42623          	sw	a5,-52(s0)
              fmtCase = 1;
     a0c:	00100793          	li	a5,1
     a10:	fcf42a23          	sw	a5,-44(s0)
              goto doIntegerPrint;
     a14:	dbdff06f          	j	7d0 <alt_log_private_printf+0x210>
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
     a18:	fc442783          	lw	a5,-60(s0)
     a1c:	fff78793          	addi	a5,a5,-1
     a20:	fa842603          	lw	a2,-88(s0)
     a24:	00078593          	mv	a1,a5
     a28:	02000513          	li	a0,32
     a2c:	b35ff0ef          	jal	ra,560 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
     a30:	fa442783          	lw	a5,-92(s0)
     a34:	00478713          	addi	a4,a5,4
     a38:	fae42223          	sw	a4,-92(s0)
     a3c:	0007a783          	lw	a5,0(a5)
     a40:	fa842703          	lw	a4,-88(s0)
     a44:	00070593          	mv	a1,a4
     a48:	00078513          	mv	a0,a5
     a4c:	abdff0ef          	jal	ra,508 <alt_log_txchar>
              break;
     a50:	0740006f          	j	ac4 <alt_log_private_printf+0x504>
                s = va_arg(args,char *);
     a54:	fa442783          	lw	a5,-92(s0)
     a58:	00478713          	addi	a4,a5,4
     a5c:	fae42223          	sw	a4,-92(s0)
     a60:	0007a783          	lw	a5,0(a5)
     a64:	fef42623          	sw	a5,-20(s0)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
     a68:	fc442483          	lw	s1,-60(s0)
     a6c:	fec42503          	lw	a0,-20(s0)
     a70:	0b1020ef          	jal	ra,3320 <strlen>
     a74:	00050793          	mv	a5,a0
     a78:	40f487b3          	sub	a5,s1,a5
     a7c:	fa842603          	lw	a2,-88(s0)
     a80:	00078593          	mv	a1,a5
     a84:	02000513          	li	a0,32
     a88:	ad9ff0ef          	jal	ra,560 <alt_log_repchar>
                while(*s)
     a8c:	0280006f          	j	ab4 <alt_log_private_printf+0x4f4>
                  alt_log_txchar(*s++,(char*)base);
     a90:	fec42783          	lw	a5,-20(s0)
     a94:	00178713          	addi	a4,a5,1
     a98:	fee42623          	sw	a4,-20(s0)
     a9c:	0007c783          	lbu	a5,0(a5)
     aa0:	00078713          	mv	a4,a5
     aa4:	fa842783          	lw	a5,-88(s0)
     aa8:	00078593          	mv	a1,a5
     aac:	00070513          	mv	a0,a4
     ab0:	a59ff0ef          	jal	ra,508 <alt_log_txchar>
                while(*s)
     ab4:	fec42783          	lw	a5,-20(s0)
     ab8:	0007c783          	lbu	a5,0(a5)
     abc:	fc079ae3          	bnez	a5,a90 <alt_log_private_printf+0x4d0>
              break;
     ac0:	00000013          	nop
          state=pfState_chars;
     ac4:	fa042c23          	sw	zero,-72(s0)
        break;
     ac8:	0040006f          	j	acc <alt_log_private_printf+0x50c>
     acc:	00000013          	nop
  while(0 != (c = *w++))
     ad0:	fb442783          	lw	a5,-76(s0)
     ad4:	00178713          	addi	a4,a5,1
     ad8:	fae42a23          	sw	a4,-76(s0)
     adc:	0007c783          	lbu	a5,0(a5)
     ae0:	faf409a3          	sb	a5,-77(s0)
     ae4:	fb344783          	lbu	a5,-77(s0)
     ae8:	b20792e3          	bnez	a5,60c <alt_log_private_printf+0x4c>
      } /* switch */
    } /* while chars left */
  } /* printf */
     aec:	00000013          	nop
     af0:	00000013          	nop
     af4:	05c12083          	lw	ra,92(sp)
     af8:	05812403          	lw	s0,88(sp)
     afc:	05412483          	lw	s1,84(sp)
     b00:	06010113          	addi	sp,sp,96
     b04:	00008067          	ret

00000b08 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
     b08:	fb010113          	addi	sp,sp,-80
     b0c:	02112623          	sw	ra,44(sp)
     b10:	02812423          	sw	s0,40(sp)
     b14:	03010413          	addi	s0,sp,48
     b18:	fca42e23          	sw	a0,-36(s0)
     b1c:	00b42223          	sw	a1,4(s0)
     b20:	00c42423          	sw	a2,8(s0)
     b24:	00d42623          	sw	a3,12(s0)
     b28:	00e42823          	sw	a4,16(s0)
     b2c:	00f42a23          	sw	a5,20(s0)
     b30:	01042c23          	sw	a6,24(s0)
     b34:	01142e23          	sw	a7,28(s0)
     b38:	0000b7b7          	lui	a5,0xb
     b3c:	6c47a703          	lw	a4,1732(a5) # b6c4 <__stack_chk_guard>
     b40:	fee42623          	sw	a4,-20(s0)
     b44:	00000713          	li	a4,0
    va_list args;

    va_start (args, fmt);
     b48:	02040793          	addi	a5,s0,32
     b4c:	fcf42c23          	sw	a5,-40(s0)
     b50:	fd842783          	lw	a5,-40(s0)
     b54:	fe478793          	addi	a5,a5,-28
     b58:	fef42423          	sw	a5,-24(s0)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
     b5c:	fe842783          	lw	a5,-24(s0)
     b60:	00078613          	mv	a2,a5
     b64:	000207b7          	lui	a5,0x20
     b68:	04078593          	addi	a1,a5,64 # 20040 <__alt_data_end+0x10040>
     b6c:	fdc42503          	lw	a0,-36(s0)
     b70:	a51ff0ef          	jal	ra,5c0 <alt_log_private_printf>
    va_end (args);
    return (0);
     b74:	00000793          	li	a5,0
     b78:	00078713          	mv	a4,a5
}
     b7c:	0000b7b7          	lui	a5,0xb
     b80:	fec42683          	lw	a3,-20(s0)
     b84:	6c47a783          	lw	a5,1732(a5) # b6c4 <__stack_chk_guard>
     b88:	00f6c7b3          	xor	a5,a3,a5
     b8c:	00000693          	li	a3,0
     b90:	00078463          	beqz	a5,b98 <alt_log_printf_proc+0x90>
     b94:	6cc020ef          	jal	ra,3260 <__stack_chk_fail>
     b98:	00070513          	mv	a0,a4
     b9c:	02c12083          	lw	ra,44(sp)
     ba0:	02812403          	lw	s0,40(sp)
     ba4:	05010113          	addi	sp,sp,80
     ba8:	00008067          	ret

00000bac <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
     bac:	fd010113          	addi	sp,sp,-48
     bb0:	02112623          	sw	ra,44(sp)
     bb4:	02812423          	sw	s0,40(sp)
     bb8:	03010413          	addi	s0,sp,48
     bbc:	fca42e23          	sw	a0,-36(s0)
    if (alt_log_jtag_uart_alarm_on_flag) {
     bc0:	0000b7b7          	lui	a5,0xb
     bc4:	6827c783          	lbu	a5,1666(a5) # b682 <alt_log_jtag_uart_alarm_on_flag>
     bc8:	0ff7f793          	zext.b	a5,a5
     bcc:	04078263          	beqz	a5,c10 <altera_avalon_jtag_uart_report_log+0x64>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
     bd0:	fdc42783          	lw	a5,-36(s0)
     bd4:	fef42423          	sw	a5,-24(s0)
        const char* header="JTAG Alarm:";
     bd8:	000087b7          	lui	a5,0x8
     bdc:	d0c78793          	addi	a5,a5,-756 # 7d0c <__fini_array_end+0xdc>
     be0:	fef42623          	sw	a5,-20(s0)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
     be4:	fe842783          	lw	a5,-24(s0)
     be8:	0007a783          	lw	a5,0(a5)
     bec:	fec42603          	lw	a2,-20(s0)
     bf0:	00078593          	mv	a1,a5
     bf4:	fe842503          	lw	a0,-24(s0)
     bf8:	030000ef          	jal	ra,c28 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     bfc:	0000b7b7          	lui	a5,0xb
     c00:	6a07a703          	lw	a4,1696(a5) # b6a0 <_alt_tick_rate>
        return ALT_LOG_JTAG_UART_TICKS;
     c04:	00a00793          	li	a5,10
     c08:	02f757b3          	divu	a5,a4,a5
     c0c:	0080006f          	j	c14 <altera_avalon_jtag_uart_report_log+0x68>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
     c10:	00000793          	li	a5,0
    }
}
     c14:	00078513          	mv	a0,a5
     c18:	02c12083          	lw	ra,44(sp)
     c1c:	02812403          	lw	s0,40(sp)
     c20:	03010113          	addi	sp,sp,48
     c24:	00008067          	ret

00000c28 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
     c28:	fb010113          	addi	sp,sp,-80
     c2c:	04112623          	sw	ra,76(sp)
     c30:	04812423          	sw	s0,72(sp)
     c34:	05010413          	addi	s0,sp,80
     c38:	fca42623          	sw	a0,-52(s0)
     c3c:	fcb42423          	sw	a1,-56(s0)
     c40:	fcc42223          	sw	a2,-60(s0)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c44:	fc842783          	lw	a5,-56(s0)
     c48:	00478793          	addi	a5,a5,4
     c4c:	0007a783          	lw	a5,0(a5)
     c50:	fcf42823          	sw	a5,-48(s0)
     c54:	fd042783          	lw	a5,-48(s0)
     c58:	fcf42a23          	sw	a5,-44(s0)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
     c5c:	fd442783          	lw	a5,-44(s0)
     c60:	0107d793          	srli	a5,a5,0x10
     c64:	fcf42c23          	sw	a5,-40(s0)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
     c68:	fd442783          	lw	a5,-44(s0)
     c6c:	0017d793          	srli	a5,a5,0x1
     c70:	0017f793          	andi	a5,a5,1
     c74:	fcf42e23          	sw	a5,-36(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
     c78:	fd442783          	lw	a5,-44(s0)
     c7c:	0017f793          	andi	a5,a5,1
     c80:	fef42023          	sw	a5,-32(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
     c84:	fd442783          	lw	a5,-44(s0)
     c88:	0087d793          	srli	a5,a5,0x8
     c8c:	0017f793          	andi	a5,a5,1
     c90:	fef42223          	sw	a5,-28(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
     c94:	fd442783          	lw	a5,-44(s0)
     c98:	0097d793          	srli	a5,a5,0x9
     c9c:	0017f793          	andi	a5,a5,1
     ca0:	fef42423          	sw	a5,-24(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
     ca4:	fd442783          	lw	a5,-44(s0)
     ca8:	00a7d793          	srli	a5,a5,0xa
     cac:	0017f793          	andi	a5,a5,1
     cb0:	fef42623          	sw	a5,-20(s0)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
     cb4:	fcc42783          	lw	a5,-52(s0)
     cb8:	0347a703          	lw	a4,52(a5)
     cbc:	fcc42783          	lw	a5,-52(s0)
     cc0:	0307a783          	lw	a5,48(a5)
     cc4:	40f70633          	sub	a2,a4,a5
     cc8:	fe042783          	lw	a5,-32(s0)
     ccc:	00f12023          	sw	a5,0(sp)
     cd0:	fdc42883          	lw	a7,-36(s0)
     cd4:	fe442803          	lw	a6,-28(s0)
     cd8:	fe842783          	lw	a5,-24(s0)
     cdc:	fec42703          	lw	a4,-20(s0)
     ce0:	fd842683          	lw	a3,-40(s0)
     ce4:	fc442583          	lw	a1,-60(s0)
     ce8:	00008537          	lui	a0,0x8
     cec:	d1850513          	addi	a0,a0,-744 # 7d18 <__fini_array_end+0xe8>
     cf0:	e19ff0ef          	jal	ra,b08 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
     cf4:	00000013          	nop

}
     cf8:	04c12083          	lw	ra,76(sp)
     cfc:	04812403          	lw	s0,72(sp)
     d00:	05010113          	addi	sp,sp,80
     d04:	00008067          	ret

00000d08 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
     d08:	fd010113          	addi	sp,sp,-48
     d0c:	02112623          	sw	ra,44(sp)
     d10:	02812423          	sw	s0,40(sp)
     d14:	03010413          	addi	s0,sp,48
     d18:	fca42e23          	sw	a0,-36(s0)
     d1c:	fcb42c23          	sw	a1,-40(s0)
     const char* header="JTAG Startup Info:";
     d20:	000087b7          	lui	a5,0x8
     d24:	d6078793          	addi	a5,a5,-672 # 7d60 <__fini_array_end+0x130>
     d28:	fef42623          	sw	a5,-20(s0)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
     d2c:	fec42603          	lw	a2,-20(s0)
     d30:	fd842583          	lw	a1,-40(s0)
     d34:	fdc42503          	lw	a0,-36(s0)
     d38:	ef1ff0ef          	jal	ra,c28 <alt_log_jtag_uart_print_control_reg>
     return;
     d3c:	00000013          	nop
}
     d40:	02c12083          	lw	ra,44(sp)
     d44:	02812403          	lw	s0,40(sp)
     d48:	03010113          	addi	sp,sp,48
     d4c:	00008067          	ret

00000d50 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
     d50:	fd010113          	addi	sp,sp,-48
     d54:	02112623          	sw	ra,44(sp)
     d58:	02812423          	sw	s0,40(sp)
     d5c:	03010413          	addi	s0,sp,48
     d60:	fca42e23          	sw	a0,-36(s0)
     d64:	fcb42c23          	sw	a1,-40(s0)
    if (alt_log_jtag_uart_isr_on_flag) {
     d68:	0000b7b7          	lui	a5,0xb
     d6c:	6837c783          	lbu	a5,1667(a5) # b683 <alt_log_jtag_uart_isr_on_flag>
     d70:	0ff7f793          	zext.b	a5,a5
     d74:	02078263          	beqz	a5,d98 <alt_log_jtag_uart_isr_proc+0x48>
        const char* header="JTAG IRQ:";
     d78:	000087b7          	lui	a5,0x8
     d7c:	d7478793          	addi	a5,a5,-652 # 7d74 <__fini_array_end+0x144>
     d80:	fef42623          	sw	a5,-20(s0)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
     d84:	fec42603          	lw	a2,-20(s0)
     d88:	fdc42583          	lw	a1,-36(s0)
     d8c:	fd842503          	lw	a0,-40(s0)
     d90:	e99ff0ef          	jal	ra,c28 <alt_log_jtag_uart_print_control_reg>
    }
    return;
     d94:	00000013          	nop
     d98:	00000013          	nop
}
     d9c:	02c12083          	lw	ra,44(sp)
     da0:	02812403          	lw	s0,40(sp)
     da4:	03010113          	addi	sp,sp,48
     da8:	00008067          	ret

00000dac <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
     dac:	fd010113          	addi	sp,sp,-48
     db0:	02112623          	sw	ra,44(sp)
     db4:	02812423          	sw	s0,40(sp)
     db8:	03010413          	addi	s0,sp,48
     dbc:	fca42e23          	sw	a0,-36(s0)
     dc0:	fcb42c23          	sw	a1,-40(s0)
    
    if (alt_log_write_on_flag)
     dc4:	0000b7b7          	lui	a5,0xb
     dc8:	6807c783          	lbu	a5,1664(a5) # b680 <alt_log_write_on_flag>
     dcc:	0ff7f793          	zext.b	a5,a5
     dd0:	12078263          	beqz	a5,ef4 <alt_log_write+0x148>
    {
        int temp_cnt;
        int i;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
     dd4:	fd842783          	lw	a5,-40(s0)
     dd8:	00f00713          	li	a4,15
     ddc:	00f77463          	bgeu	a4,a5,de4 <alt_log_write+0x38>
     de0:	00f00793          	li	a5,15
     de4:	fef42623          	sw	a5,-20(s0)

        if (length < 2) return;
     de8:	fec42703          	lw	a4,-20(s0)
     dec:	00100793          	li	a5,1
     df0:	10e7d063          	bge	a5,a4,ef0 <alt_log_write+0x144>
        for (i=0;i<length;i++)
     df4:	fe042423          	sw	zero,-24(s0)
     df8:	0340006f          	j	e2c <alt_log_write+0x80>
        {
            *(unsigned char *)(alt_log_write_buf+i)=*(unsigned char *)(ptr+i);
     dfc:	fe842783          	lw	a5,-24(s0)
     e00:	fdc42703          	lw	a4,-36(s0)
     e04:	00f70733          	add	a4,a4,a5
     e08:	fe842683          	lw	a3,-24(s0)
     e0c:	0000b7b7          	lui	a5,0xb
     e10:	77878793          	addi	a5,a5,1912 # b778 <alt_log_write_buf>
     e14:	00f687b3          	add	a5,a3,a5
     e18:	00074703          	lbu	a4,0(a4)
     e1c:	00e78023          	sb	a4,0(a5)
        for (i=0;i<length;i++)
     e20:	fe842783          	lw	a5,-24(s0)
     e24:	00178793          	addi	a5,a5,1
     e28:	fef42423          	sw	a5,-24(s0)
     e2c:	fe842703          	lw	a4,-24(s0)
     e30:	fec42783          	lw	a5,-20(s0)
     e34:	fcf744e3          	blt	a4,a5,dfc <alt_log_write+0x50>
        }
        alt_log_write_buf[length-1]='\n';
     e38:	fec42783          	lw	a5,-20(s0)
     e3c:	fff78793          	addi	a5,a5,-1
     e40:	0000b737          	lui	a4,0xb
     e44:	77870713          	addi	a4,a4,1912 # b778 <alt_log_write_buf>
     e48:	00f707b3          	add	a5,a4,a5
     e4c:	00a00713          	li	a4,10
     e50:	00e78023          	sb	a4,0(a5)
        alt_log_write_buf[length]='\r';
     e54:	0000b7b7          	lui	a5,0xb
     e58:	77878713          	addi	a4,a5,1912 # b778 <alt_log_write_buf>
     e5c:	fec42783          	lw	a5,-20(s0)
     e60:	00f707b3          	add	a5,a4,a5
     e64:	00d00713          	li	a4,13
     e68:	00e78023          	sb	a4,0(a5)
        alt_log_write_buf[length+1]='\0';
     e6c:	fec42783          	lw	a5,-20(s0)
     e70:	00178793          	addi	a5,a5,1
     e74:	0000b737          	lui	a4,0xb
     e78:	77870713          	addi	a4,a4,1912 # b778 <alt_log_write_buf>
     e7c:	00f707b3          	add	a5,a4,a5
     e80:	00078023          	sb	zero,0(a5)

        /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++)
     e84:	fe042223          	sw	zero,-28(s0)
     e88:	0440006f          	j	ecc <alt_log_write+0x120>
        {
            if (alt_log_write_buf[temp_cnt]== 0x4)
     e8c:	0000b7b7          	lui	a5,0xb
     e90:	77878713          	addi	a4,a5,1912 # b778 <alt_log_write_buf>
     e94:	fe442783          	lw	a5,-28(s0)
     e98:	00f707b3          	add	a5,a4,a5
     e9c:	0007c703          	lbu	a4,0(a5)
     ea0:	00400793          	li	a5,4
     ea4:	00f71e63          	bne	a4,a5,ec0 <alt_log_write+0x114>
            {
                alt_log_write_buf[temp_cnt]='D';
     ea8:	0000b7b7          	lui	a5,0xb
     eac:	77878713          	addi	a4,a5,1912 # b778 <alt_log_write_buf>
     eb0:	fe442783          	lw	a5,-28(s0)
     eb4:	00f707b3          	add	a5,a4,a5
     eb8:	04400713          	li	a4,68
     ebc:	00e78023          	sb	a4,0(a5)
        for (temp_cnt=0;temp_cnt < length; temp_cnt++)
     ec0:	fe442783          	lw	a5,-28(s0)
     ec4:	00178793          	addi	a5,a5,1
     ec8:	fef42223          	sw	a5,-28(s0)
     ecc:	fe442703          	lw	a4,-28(s0)
     ed0:	fec42783          	lw	a5,-20(s0)
     ed4:	faf74ce3          	blt	a4,a5,e8c <alt_log_write+0xe0>
            }
        }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
     ed8:	0000b7b7          	lui	a5,0xb
     edc:	77878593          	addi	a1,a5,1912 # b778 <alt_log_write_buf>
     ee0:	000087b7          	lui	a5,0x8
     ee4:	d8078513          	addi	a0,a5,-640 # 7d80 <__fini_array_end+0x150>
     ee8:	c21ff0ef          	jal	ra,b08 <alt_log_printf_proc>
     eec:	0080006f          	j	ef4 <alt_log_write+0x148>
        if (length < 2) return;
     ef0:	00000013          	nop
    }
}
     ef4:	02c12083          	lw	ra,44(sp)
     ef8:	02812403          	lw	s0,40(sp)
     efc:	03010113          	addi	sp,sp,48
     f00:	00008067          	ret

00000f04 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
     f04:	ff010113          	addi	sp,sp,-16
     f08:	00112623          	sw	ra,12(sp)
     f0c:	00812423          	sw	s0,8(sp)
     f10:	01010413          	addi	s0,sp,16
    if (alt_log_sys_clk_on_flag) {
     f14:	0000b7b7          	lui	a5,0xb
     f18:	6817c783          	lbu	a5,1665(a5) # b681 <alt_log_sys_clk_on_flag>
     f1c:	0ff7f793          	zext.b	a5,a5
     f20:	04078c63          	beqz	a5,f78 <alt_log_system_clock+0x74>
    alt_log_sys_clk_count++;
     f24:	0000b7b7          	lui	a5,0xb
     f28:	6887a783          	lw	a5,1672(a5) # b688 <alt_log_sys_clk_count>
     f2c:	00178713          	addi	a4,a5,1
     f30:	0000b7b7          	lui	a5,0xb
     f34:	68e7a423          	sw	a4,1672(a5) # b688 <alt_log_sys_clk_count>
     f38:	0000b7b7          	lui	a5,0xb
     f3c:	6a07a783          	lw	a5,1696(a5) # b6a0 <_alt_tick_rate>
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
     f40:	0000b737          	lui	a4,0xb
     f44:	68872703          	lw	a4,1672(a4) # b688 <alt_log_sys_clk_count>
     f48:	02e7f863          	bgeu	a5,a4,f78 <alt_log_system_clock+0x74>
            alt_log_sys_clk_count = 0;
     f4c:	0000b7b7          	lui	a5,0xb
     f50:	6807a423          	sw	zero,1672(a5) # b688 <alt_log_sys_clk_count>
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
     f54:	0000b7b7          	lui	a5,0xb
     f58:	68c7a783          	lw	a5,1676(a5) # b68c <alt_system_clock_in_sec>
     f5c:	00178693          	addi	a3,a5,1
     f60:	0000b737          	lui	a4,0xb
     f64:	68d72623          	sw	a3,1676(a4) # b68c <alt_system_clock_in_sec>
     f68:	00078593          	mv	a1,a5
     f6c:	000087b7          	lui	a5,0x8
     f70:	d9078513          	addi	a0,a5,-624 # 7d90 <__fini_array_end+0x160>
     f74:	b95ff0ef          	jal	ra,b08 <alt_log_printf_proc>
        }
    }
}
     f78:	00000013          	nop
     f7c:	00c12083          	lw	ra,12(sp)
     f80:	00812403          	lw	s0,8(sp)
     f84:	01010113          	addi	sp,sp,16
     f88:	00008067          	ret

00000f8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     f8c:	fe010113          	addi	sp,sp,-32
     f90:	00112e23          	sw	ra,28(sp)
     f94:	00812c23          	sw	s0,24(sp)
     f98:	02010413          	addi	s0,sp,32
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
     f9c:	0000a7b7          	lui	a5,0xa
     fa0:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
     fa4:	00100793          	li	a5,1
     fa8:	00f71863          	bne	a4,a5,fb8 <alt_main+0x2c>
     fac:	000087b7          	lui	a5,0x8
     fb0:	da878513          	addi	a0,a5,-600 # 7da8 <__fini_array_end+0x178>
     fb4:	b55ff0ef          	jal	ra,b08 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     fb8:	00000513          	li	a0,0
     fbc:	614000ef          	jal	ra,15d0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
     fc0:	0000a7b7          	lui	a5,0xa
     fc4:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
     fc8:	00100793          	li	a5,1
     fcc:	00f71863          	bne	a4,a5,fdc <alt_main+0x50>
     fd0:	000087b7          	lui	a5,0x8
     fd4:	de078513          	addi	a0,a5,-544 # 7de0 <__fini_array_end+0x1b0>
     fd8:	b31ff0ef          	jal	ra,b08 <alt_log_printf_proc>
  ALT_OS_INIT();
     fdc:	00000013          	nop
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
     fe0:	0000a7b7          	lui	a5,0xa
     fe4:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
     fe8:	00100793          	li	a5,1
     fec:	00f71863          	bne	a4,a5,ffc <alt_main+0x70>
     ff0:	000087b7          	lui	a5,0x8
     ff4:	e1878513          	addi	a0,a5,-488 # 7e18 <__fini_array_end+0x1e8>
     ff8:	b11ff0ef          	jal	ra,b08 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
     ffc:	0000a7b7          	lui	a5,0xa
    1000:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    1004:	00100793          	li	a5,1
    1008:	00f71863          	bne	a4,a5,1018 <alt_main+0x8c>
    100c:	000087b7          	lui	a5,0x8
    1010:	e5078513          	addi	a0,a5,-432 # 7e50 <__fini_array_end+0x220>
    1014:	af5ff0ef          	jal	ra,b08 <alt_log_printf_proc>
  alt_sys_init();
    1018:	5f0000ef          	jal	ra,1608 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
    101c:	0000a7b7          	lui	a5,0xa
    1020:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    1024:	00100793          	li	a5,1
    1028:	00f71863          	bne	a4,a5,1038 <alt_main+0xac>
    102c:	000087b7          	lui	a5,0x8
    1030:	e7878513          	addi	a0,a5,-392 # 7e78 <__fini_array_end+0x248>
    1034:	ad5ff0ef          	jal	ra,b08 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    1038:	0000a7b7          	lui	a5,0xa
    103c:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    1040:	00100793          	li	a5,1
    1044:	00f71863          	bne	a4,a5,1054 <alt_main+0xc8>
    1048:	000087b7          	lui	a5,0x8
    104c:	e9c78513          	addi	a0,a5,-356 # 7e9c <__fini_array_end+0x26c>
    1050:	ab9ff0ef          	jal	ra,b08 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1054:	000087b7          	lui	a5,0x8
    1058:	ebc78613          	addi	a2,a5,-324 # 7ebc <__fini_array_end+0x28c>
    105c:	000087b7          	lui	a5,0x8
    1060:	ebc78593          	addi	a1,a5,-324 # 7ebc <__fini_array_end+0x28c>
    1064:	000087b7          	lui	a5,0x8
    1068:	ebc78513          	addi	a0,a5,-324 # 7ebc <__fini_array_end+0x28c>
    106c:	101010ef          	jal	ra,296c <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
    1070:	0000a7b7          	lui	a5,0xa
    1074:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    1078:	00100793          	li	a5,1
    107c:	00f71863          	bne	a4,a5,108c <alt_main+0x100>
    1080:	000087b7          	lui	a5,0x8
    1084:	ecc78513          	addi	a0,a5,-308 # 7ecc <__fini_array_end+0x29c>
    1088:	a81ff0ef          	jal	ra,b08 <alt_log_printf_proc>
  _do_ctors ();
    108c:	554010ef          	jal	ra,25e0 <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
    1090:	0000a7b7          	lui	a5,0xa
    1094:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    1098:	00100793          	li	a5,1
    109c:	00f71863          	bne	a4,a5,10ac <alt_main+0x120>
    10a0:	000087b7          	lui	a5,0x8
    10a4:	ef878513          	addi	a0,a5,-264 # 7ef8 <__fini_array_end+0x2c8>
    10a8:	a61ff0ef          	jal	ra,b08 <alt_log_printf_proc>
  atexit (_do_dtors);
    10ac:	000027b7          	lui	a5,0x2
    10b0:	64078513          	addi	a0,a5,1600 # 2640 <_do_dtors>
    10b4:	4bd010ef          	jal	ra,2d70 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
    10b8:	0000a7b7          	lui	a5,0xa
    10bc:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    10c0:	00100793          	li	a5,1
    10c4:	00f71863          	bne	a4,a5,10d4 <alt_main+0x148>
    10c8:	000087b7          	lui	a5,0x8
    10cc:	f1878513          	addi	a0,a5,-232 # 7f18 <__fini_array_end+0x2e8>
    10d0:	a39ff0ef          	jal	ra,b08 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    10d4:	0000b7b7          	lui	a5,0xb
    10d8:	6907a703          	lw	a4,1680(a5) # b690 <alt_argc>
    10dc:	0000b7b7          	lui	a5,0xb
    10e0:	6947a683          	lw	a3,1684(a5) # b694 <alt_argv>
    10e4:	0000b7b7          	lui	a5,0xb
    10e8:	6987a783          	lw	a5,1688(a5) # b698 <alt_envp>
    10ec:	00078613          	mv	a2,a5
    10f0:	00068593          	mv	a1,a3
    10f4:	00070513          	mv	a0,a4
    10f8:	9d8ff0ef          	jal	ra,2d0 <main>
    10fc:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
    1100:	00100513          	li	a0,1
    1104:	2a8020ef          	jal	ra,33ac <close>
  exit (result);
    1108:	fec42503          	lw	a0,-20(s0)
    110c:	479010ef          	jal	ra,2d84 <exit>

00001110 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1110:	f9010113          	addi	sp,sp,-112
    1114:	04112623          	sw	ra,76(sp)
    1118:	04812423          	sw	s0,72(sp)
    111c:	05010413          	addi	s0,sp,80
    1120:	faa42e23          	sw	a0,-68(s0)
    1124:	00b42223          	sw	a1,4(s0)
    1128:	00c42423          	sw	a2,8(s0)
    112c:	00d42623          	sw	a3,12(s0)
    1130:	00e42823          	sw	a4,16(s0)
    1134:	00f42a23          	sw	a5,20(s0)
    1138:	01042c23          	sw	a6,24(s0)
    113c:	01142e23          	sw	a7,28(s0)
    1140:	0000b7b7          	lui	a5,0xb
    1144:	6c47a703          	lw	a4,1732(a5) # b6c4 <__stack_chk_guard>
    1148:	fee42623          	sw	a4,-20(s0)
    114c:	00000713          	li	a4,0
	va_list args;
	va_start(args, fmt);
    1150:	02040793          	addi	a5,s0,32
    1154:	faf42c23          	sw	a5,-72(s0)
    1158:	fb842783          	lw	a5,-72(s0)
    115c:	fe478793          	addi	a5,a5,-28
    1160:	fcf42823          	sw	a5,-48(s0)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    1164:	fbc42783          	lw	a5,-68(s0)
    1168:	fcf42a23          	sw	a5,-44(s0)
    while ((c = *w++) != 0)
    116c:	1b00006f          	j	131c <alt_printf+0x20c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1170:	fcf44703          	lbu	a4,-49(s0)
    1174:	02500793          	li	a5,37
    1178:	00f70a63          	beq	a4,a5,118c <alt_printf+0x7c>
        {
            alt_putchar(c);
    117c:	fcf44783          	lbu	a5,-49(s0)
    1180:	00078513          	mv	a0,a5
    1184:	1ec000ef          	jal	ra,1370 <alt_putchar>
    1188:	1940006f          	j	131c <alt_printf+0x20c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    118c:	fd442783          	lw	a5,-44(s0)
    1190:	00178713          	addi	a4,a5,1
    1194:	fce42a23          	sw	a4,-44(s0)
    1198:	0007c783          	lbu	a5,0(a5)
    119c:	fcf407a3          	sb	a5,-49(s0)
    11a0:	fcf44783          	lbu	a5,-49(s0)
    11a4:	18078c63          	beqz	a5,133c <alt_printf+0x22c>
            {
                if (c == '%')
    11a8:	fcf44703          	lbu	a4,-49(s0)
    11ac:	02500793          	li	a5,37
    11b0:	00f71a63          	bne	a4,a5,11c4 <alt_printf+0xb4>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    11b4:	fcf44783          	lbu	a5,-49(s0)
    11b8:	00078513          	mv	a0,a5
    11bc:	1b4000ef          	jal	ra,1370 <alt_putchar>
    11c0:	15c0006f          	j	131c <alt_printf+0x20c>
                } 
                else if (c == 'c')
    11c4:	fcf44703          	lbu	a4,-49(s0)
    11c8:	06300793          	li	a5,99
    11cc:	02f71263          	bne	a4,a5,11f0 <alt_printf+0xe0>
                {
                    int v = va_arg(args, int);
    11d0:	fd042783          	lw	a5,-48(s0)
    11d4:	00478713          	addi	a4,a5,4
    11d8:	fce42823          	sw	a4,-48(s0)
    11dc:	0007a783          	lw	a5,0(a5)
    11e0:	fef42423          	sw	a5,-24(s0)
                    alt_putchar(v);
    11e4:	fe842503          	lw	a0,-24(s0)
    11e8:	188000ef          	jal	ra,1370 <alt_putchar>
    11ec:	1300006f          	j	131c <alt_printf+0x20c>
                }
                else if (c == 'x')
    11f0:	fcf44703          	lbu	a4,-49(s0)
    11f4:	07800793          	li	a5,120
    11f8:	0cf71e63          	bne	a4,a5,12d4 <alt_printf+0x1c4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    11fc:	fd042783          	lw	a5,-48(s0)
    1200:	00478713          	addi	a4,a5,4
    1204:	fce42823          	sw	a4,-48(s0)
    1208:	0007a783          	lw	a5,0(a5)
    120c:	fef42023          	sw	a5,-32(s0)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    1210:	fe042783          	lw	a5,-32(s0)
    1214:	00079863          	bnez	a5,1224 <alt_printf+0x114>
                    {
                        alt_putchar('0');
    1218:	03000513          	li	a0,48
    121c:	154000ef          	jal	ra,1370 <alt_putchar>
                        continue;
    1220:	0fc0006f          	j	131c <alt_printf+0x20c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    1224:	01c00793          	li	a5,28
    1228:	fcf42c23          	sw	a5,-40(s0)
                    while (!(v & (0xF << digit_shift)))
    122c:	0100006f          	j	123c <alt_printf+0x12c>
                        digit_shift -= 4;
    1230:	fd842783          	lw	a5,-40(s0)
    1234:	ffc78793          	addi	a5,a5,-4
    1238:	fcf42c23          	sw	a5,-40(s0)
                    while (!(v & (0xF << digit_shift)))
    123c:	fd842783          	lw	a5,-40(s0)
    1240:	00f00713          	li	a4,15
    1244:	00f717b3          	sll	a5,a4,a5
    1248:	00078713          	mv	a4,a5
    124c:	fe042783          	lw	a5,-32(s0)
    1250:	00f777b3          	and	a5,a4,a5
    1254:	fc078ee3          	beqz	a5,1230 <alt_printf+0x120>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1258:	0700006f          	j	12c8 <alt_printf+0x1b8>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    125c:	fd842783          	lw	a5,-40(s0)
    1260:	00f00713          	li	a4,15
    1264:	00f717b3          	sll	a5,a4,a5
    1268:	00078713          	mv	a4,a5
    126c:	fe042783          	lw	a5,-32(s0)
    1270:	00f77733          	and	a4,a4,a5
    1274:	fd842783          	lw	a5,-40(s0)
    1278:	00f757b3          	srl	a5,a4,a5
    127c:	fef42223          	sw	a5,-28(s0)
                        if (digit <= 9)
    1280:	fe442703          	lw	a4,-28(s0)
    1284:	00900793          	li	a5,9
    1288:	00e7ec63          	bltu	a5,a4,12a0 <alt_printf+0x190>
                            c = '0' + digit;
    128c:	fe442783          	lw	a5,-28(s0)
    1290:	0ff7f793          	zext.b	a5,a5
    1294:	03078793          	addi	a5,a5,48
    1298:	fcf407a3          	sb	a5,-49(s0)
    129c:	0140006f          	j	12b0 <alt_printf+0x1a0>
                        else
                            c = 'a' + digit - 10;
    12a0:	fe442783          	lw	a5,-28(s0)
    12a4:	0ff7f793          	zext.b	a5,a5
    12a8:	05778793          	addi	a5,a5,87
    12ac:	fcf407a3          	sb	a5,-49(s0)
                        alt_putchar(c);
    12b0:	fcf44783          	lbu	a5,-49(s0)
    12b4:	00078513          	mv	a0,a5
    12b8:	0b8000ef          	jal	ra,1370 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
    12bc:	fd842783          	lw	a5,-40(s0)
    12c0:	ffc78793          	addi	a5,a5,-4
    12c4:	fcf42c23          	sw	a5,-40(s0)
    12c8:	fd842783          	lw	a5,-40(s0)
    12cc:	f807d8e3          	bgez	a5,125c <alt_printf+0x14c>
    12d0:	04c0006f          	j	131c <alt_printf+0x20c>
                    }
                }
                else if (c == 's')
    12d4:	fcf44703          	lbu	a4,-49(s0)
    12d8:	07300793          	li	a5,115
    12dc:	04f71063          	bne	a4,a5,131c <alt_printf+0x20c>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    12e0:	fd042783          	lw	a5,-48(s0)
    12e4:	00478713          	addi	a4,a5,4
    12e8:	fce42823          	sw	a4,-48(s0)
    12ec:	0007a783          	lw	a5,0(a5)
    12f0:	fcf42e23          	sw	a5,-36(s0)

                    while(*s)
    12f4:	01c0006f          	j	1310 <alt_printf+0x200>
                      alt_putchar(*s++);
    12f8:	fdc42783          	lw	a5,-36(s0)
    12fc:	00178713          	addi	a4,a5,1
    1300:	fce42e23          	sw	a4,-36(s0)
    1304:	0007c783          	lbu	a5,0(a5)
    1308:	00078513          	mv	a0,a5
    130c:	064000ef          	jal	ra,1370 <alt_putchar>
                    while(*s)
    1310:	fdc42783          	lw	a5,-36(s0)
    1314:	0007c783          	lbu	a5,0(a5)
    1318:	fe0790e3          	bnez	a5,12f8 <alt_printf+0x1e8>
    while ((c = *w++) != 0)
    131c:	fd442783          	lw	a5,-44(s0)
    1320:	00178713          	addi	a4,a5,1
    1324:	fce42a23          	sw	a4,-44(s0)
    1328:	0007c783          	lbu	a5,0(a5)
    132c:	fcf407a3          	sb	a5,-49(s0)
    1330:	fcf44783          	lbu	a5,-49(s0)
    1334:	e2079ee3          	bnez	a5,1170 <alt_printf+0x60>
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
    va_end(args);
}
    1338:	0080006f          	j	1340 <alt_printf+0x230>
                break;
    133c:	00000013          	nop
}
    1340:	00000013          	nop
    1344:	0000b7b7          	lui	a5,0xb
    1348:	fec42703          	lw	a4,-20(s0)
    134c:	6c47a783          	lw	a5,1732(a5) # b6c4 <__stack_chk_guard>
    1350:	00f747b3          	xor	a5,a4,a5
    1354:	00000713          	li	a4,0
    1358:	00078463          	beqz	a5,1360 <alt_printf+0x250>
    135c:	705010ef          	jal	ra,3260 <__stack_chk_fail>
    1360:	04c12083          	lw	ra,76(sp)
    1364:	04812403          	lw	s0,72(sp)
    1368:	07010113          	addi	sp,sp,112
    136c:	00008067          	ret

00001370 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1370:	fe010113          	addi	sp,sp,-32
    1374:	00112e23          	sw	ra,28(sp)
    1378:	00812c23          	sw	s0,24(sp)
    137c:	02010413          	addi	s0,sp,32
    1380:	fea42623          	sw	a0,-20(s0)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    1384:	fec42503          	lw	a0,-20(s0)
    1388:	3dd010ef          	jal	ra,2f64 <putchar>
    138c:	00050793          	mv	a5,a0
#endif
#endif
}
    1390:	00078513          	mv	a0,a5
    1394:	01c12083          	lw	ra,28(sp)
    1398:	01812403          	lw	s0,24(sp)
    139c:	02010113          	addi	sp,sp,32
    13a0:	00008067          	ret

000013a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    13a4:	fd010113          	addi	sp,sp,-48
    13a8:	02812623          	sw	s0,44(sp)
    13ac:	03010413          	addi	s0,sp,48
    13b0:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    13b4:	00800793          	li	a5,8
    13b8:	3007b7f3          	csrrc	a5,mstatus,a5
    13bc:	fef42623          	sw	a5,-20(s0)
    return context;
    13c0:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    13c4:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    13c8:	fdc42783          	lw	a5,-36(s0)
    13cc:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    13d0:	fe842783          	lw	a5,-24(s0)
    13d4:	0007a783          	lw	a5,0(a5)
    13d8:	fe842703          	lw	a4,-24(s0)
    13dc:	00472703          	lw	a4,4(a4)
    13e0:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    13e4:	fe842783          	lw	a5,-24(s0)
    13e8:	0047a783          	lw	a5,4(a5)
    13ec:	fe842703          	lw	a4,-24(s0)
    13f0:	00072703          	lw	a4,0(a4)
    13f4:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    13f8:	fe842783          	lw	a5,-24(s0)
    13fc:	fe842703          	lw	a4,-24(s0)
    1400:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    1404:	fe842783          	lw	a5,-24(s0)
    1408:	fe842703          	lw	a4,-24(s0)
    140c:	00e7a023          	sw	a4,0(a5)
} 
    1410:	00000013          	nop
    1414:	fe042783          	lw	a5,-32(s0)
    1418:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    141c:	fe442783          	lw	a5,-28(s0)
    1420:	0087f793          	andi	a5,a5,8
    1424:	3007a073          	csrs	mstatus,a5
}
    1428:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    142c:	00000013          	nop
    1430:	02c12403          	lw	s0,44(sp)
    1434:	03010113          	addi	sp,sp,48
    1438:	00008067          	ret

0000143c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    143c:	fe010113          	addi	sp,sp,-32
    1440:	00112e23          	sw	ra,28(sp)
    1444:	00812c23          	sw	s0,24(sp)
    1448:	01212a23          	sw	s2,20(sp)
    144c:	01312823          	sw	s3,16(sp)
    1450:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1454:	0000a7b7          	lui	a5,0xa
    1458:	b3478793          	addi	a5,a5,-1228 # 9b34 <alt_alarm_list>
    145c:	0007a783          	lw	a5,0(a5)
    1460:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1464:	0000b7b7          	lui	a5,0xb
    1468:	6a87a703          	lw	a4,1704(a5) # b6a8 <_alt_nticks>
    146c:	6ac7a783          	lw	a5,1708(a5)
    1470:	00100513          	li	a0,1
    1474:	00000593          	li	a1,0
    1478:	00a70633          	add	a2,a4,a0
    147c:	00060813          	mv	a6,a2
    1480:	00e83833          	sltu	a6,a6,a4
    1484:	00b786b3          	add	a3,a5,a1
    1488:	00d807b3          	add	a5,a6,a3
    148c:	00078693          	mv	a3,a5
    1490:	00060713          	mv	a4,a2
    1494:	00068793          	mv	a5,a3
    1498:	0000b6b7          	lui	a3,0xb
    149c:	6ae6a423          	sw	a4,1704(a3) # b6a8 <_alt_nticks>
    14a0:	6af6a623          	sw	a5,1708(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    14a4:	0c80006f          	j	156c <alt_tick+0x130>
  {
    next = (alt_alarm*) alarm->llist.next;
    14a8:	fe442783          	lw	a5,-28(s0)
    14ac:	0007a783          	lw	a5,0(a5)
    14b0:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    14b4:	fe442783          	lw	a5,-28(s0)
    14b8:	0087a603          	lw	a2,8(a5)
    14bc:	00c7a683          	lw	a3,12(a5)
    14c0:	0000b7b7          	lui	a5,0xb
    14c4:	6a87a703          	lw	a4,1704(a5) # b6a8 <_alt_nticks>
    14c8:	6ac7a783          	lw	a5,1708(a5)
    14cc:	00068513          	mv	a0,a3
    14d0:	00078593          	mv	a1,a5
    14d4:	08a5e863          	bltu	a1,a0,1564 <alt_tick+0x128>
    14d8:	00068513          	mv	a0,a3
    14dc:	00078593          	mv	a1,a5
    14e0:	00b51863          	bne	a0,a1,14f0 <alt_tick+0xb4>
    14e4:	00060693          	mv	a3,a2
    14e8:	00070793          	mv	a5,a4
    14ec:	06d7ec63          	bltu	a5,a3,1564 <alt_tick+0x128>
    {
      next_callback = alarm->callback (alarm->context);
    14f0:	fe442783          	lw	a5,-28(s0)
    14f4:	0107a783          	lw	a5,16(a5)
    14f8:	fe442703          	lw	a4,-28(s0)
    14fc:	01472703          	lw	a4,20(a4)
    1500:	00070513          	mv	a0,a4
    1504:	000780e7          	jalr	a5
    1508:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    150c:	fec42783          	lw	a5,-20(s0)
    1510:	00079863          	bnez	a5,1520 <alt_tick+0xe4>
      {
        alt_alarm_stop (alarm);
    1514:	fe442503          	lw	a0,-28(s0)
    1518:	e8dff0ef          	jal	ra,13a4 <alt_alarm_stop>
    151c:	0480006f          	j	1564 <alt_tick+0x128>
      }
      else
      {
        alarm->time += next_callback;
    1520:	fe442783          	lw	a5,-28(s0)
    1524:	0087a703          	lw	a4,8(a5)
    1528:	00c7a783          	lw	a5,12(a5)
    152c:	fec42683          	lw	a3,-20(s0)
    1530:	00068913          	mv	s2,a3
    1534:	00000993          	li	s3,0
    1538:	01270633          	add	a2,a4,s2
    153c:	00060593          	mv	a1,a2
    1540:	00e5b5b3          	sltu	a1,a1,a4
    1544:	013786b3          	add	a3,a5,s3
    1548:	00d587b3          	add	a5,a1,a3
    154c:	00078693          	mv	a3,a5
    1550:	00060713          	mv	a4,a2
    1554:	00068793          	mv	a5,a3
    1558:	fe442683          	lw	a3,-28(s0)
    155c:	00e6a423          	sw	a4,8(a3)
    1560:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    1564:	fe842783          	lw	a5,-24(s0)
    1568:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    156c:	fe442703          	lw	a4,-28(s0)
    1570:	0000a7b7          	lui	a5,0xa
    1574:	b3478793          	addi	a5,a5,-1228 # 9b34 <alt_alarm_list>
    1578:	f2f718e3          	bne	a4,a5,14a8 <alt_tick+0x6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    157c:	00000013          	nop
}
    1580:	00000013          	nop
    1584:	01c12083          	lw	ra,28(sp)
    1588:	01812403          	lw	s0,24(sp)
    158c:	01412903          	lw	s2,20(sp)
    1590:	01012983          	lw	s3,16(sp)
    1594:	02010113          	addi	sp,sp,32
    1598:	00008067          	ret

0000159c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    159c:	fe010113          	addi	sp,sp,-32
    15a0:	00112e23          	sw	ra,28(sp)
    15a4:	00812c23          	sw	s0,24(sp)
    15a8:	02010413          	addi	s0,sp,32
    15ac:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
    15b0:	fec42503          	lw	a0,-20(s0)
    15b4:	611000ef          	jal	ra,23c4 <alt_busy_sleep>
    15b8:	00050793          	mv	a5,a0
}
    15bc:	00078513          	mv	a0,a5
    15c0:	01c12083          	lw	ra,28(sp)
    15c4:	01812403          	lw	s0,24(sp)
    15c8:	02010113          	addi	sp,sp,32
    15cc:	00008067          	ret

000015d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    15d0:	fe010113          	addi	sp,sp,-32
    15d4:	00112e23          	sw	ra,28(sp)
    15d8:	00812c23          	sw	s0,24(sp)
    15dc:	02010413          	addi	s0,sp,32
    15e0:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_G_IRQ_INIT ( NIOSV, niosv);
    15e4:	474010ef          	jal	ra,2a58 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
    15e8:	00800793          	li	a5,8
    15ec:	3007a073          	csrs	mstatus,a5
}
    15f0:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
    15f4:	00000013          	nop
    15f8:	01c12083          	lw	ra,28(sp)
    15fc:	01812403          	lw	s0,24(sp)
    1600:	02010113          	addi	sp,sp,32
    1604:	00008067          	ret

00001608 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1608:	fe010113          	addi	sp,sp,-32
    160c:	00112e23          	sw	ra,28(sp)
    1610:	00812c23          	sw	s0,24(sp)
    1614:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    1618:	00000613          	li	a2,0
    161c:	00000593          	li	a1,0
    1620:	000087b7          	lui	a5,0x8
    1624:	12078513          	addi	a0,a5,288 # 8120 <jtag_uart+0x28>
    1628:	1f0000ef          	jal	ra,1818 <altera_avalon_jtag_uart_init>
    162c:	000087b7          	lui	a5,0x8
    1630:	0f878513          	addi	a0,a5,248 # 80f8 <jtag_uart>
    1634:	67d000ef          	jal	ra,24b0 <alt_dev_reg>
    1638:	3e800793          	li	a5,1000
    163c:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1640:	0000b7b7          	lui	a5,0xb
    1644:	6a07a783          	lw	a5,1696(a5) # b6a0 <_alt_tick_rate>
    1648:	00079a63          	bnez	a5,165c <alt_sys_init+0x54>
  {
    _alt_tick_rate = nticks;
    164c:	0000b7b7          	lui	a5,0xb
    1650:	fec42703          	lw	a4,-20(s0)
    1654:	6ae7a023          	sw	a4,1696(a5) # b6a0 <_alt_tick_rate>
    return 0;
    1658:	0080006f          	j	1660 <alt_sys_init+0x58>
  }
  else
  {
    return -1;
    165c:	00000013          	nop
    1660:	000037b7          	lui	a5,0x3
    1664:	c8478793          	addi	a5,a5,-892 # 2c84 <alt_niosv_timer_sc_isr>
    1668:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
    166c:	0000b7b7          	lui	a5,0xb
    1670:	fe842703          	lw	a4,-24(s0)
    1674:	66e7ae23          	sw	a4,1660(a5) # b67c <alt_niosv_timer_interrupt_handler>
}
    1678:	00000013          	nop
    INTEL_NIOSV_G_INIT ( NIOSV, niosv);
    167c:	6b8010ef          	jal	ra,2d34 <alt_niosv_mtimecmp_interrupt_init>
    1680:	00000613          	li	a2,0
    1684:	00000593          	li	a1,0
    1688:	00000513          	li	a0,0
    168c:	5f8010ef          	jal	ra,2c84 <alt_niosv_timer_sc_isr>
}
    1690:	00000013          	nop
    1694:	01c12083          	lw	ra,28(sp)
    1698:	01812403          	lw	s0,24(sp)
    169c:	02010113          	addi	sp,sp,32
    16a0:	00008067          	ret

000016a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    16a4:	fd010113          	addi	sp,sp,-48
    16a8:	02112623          	sw	ra,44(sp)
    16ac:	02812423          	sw	s0,40(sp)
    16b0:	03010413          	addi	s0,sp,48
    16b4:	fca42e23          	sw	a0,-36(s0)
    16b8:	fcb42c23          	sw	a1,-40(s0)
    16bc:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    16c0:	fdc42783          	lw	a5,-36(s0)
    16c4:	0007a783          	lw	a5,0(a5)
    16c8:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    16cc:	fec42783          	lw	a5,-20(s0)
    16d0:	02878713          	addi	a4,a5,40
    16d4:	fdc42783          	lw	a5,-36(s0)
    16d8:	0087a783          	lw	a5,8(a5)
    16dc:	00078693          	mv	a3,a5
    16e0:	fd442603          	lw	a2,-44(s0)
    16e4:	fd842583          	lw	a1,-40(s0)
    16e8:	00070513          	mv	a0,a4
    16ec:	6cc000ef          	jal	ra,1db8 <altera_avalon_jtag_uart_read>
    16f0:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    16f4:	00078513          	mv	a0,a5
    16f8:	02c12083          	lw	ra,44(sp)
    16fc:	02812403          	lw	s0,40(sp)
    1700:	03010113          	addi	sp,sp,48
    1704:	00008067          	ret

00001708 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1708:	fd010113          	addi	sp,sp,-48
    170c:	02112623          	sw	ra,44(sp)
    1710:	02812423          	sw	s0,40(sp)
    1714:	03010413          	addi	s0,sp,48
    1718:	fca42e23          	sw	a0,-36(s0)
    171c:	fcb42c23          	sw	a1,-40(s0)
    1720:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1724:	fdc42783          	lw	a5,-36(s0)
    1728:	0007a783          	lw	a5,0(a5)
    172c:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1730:	fec42783          	lw	a5,-20(s0)
    1734:	02878713          	addi	a4,a5,40
    1738:	fdc42783          	lw	a5,-36(s0)
    173c:	0087a783          	lw	a5,8(a5)
    1740:	00078693          	mv	a3,a5
    1744:	fd442603          	lw	a2,-44(s0)
    1748:	fd842583          	lw	a1,-40(s0)
    174c:	00070513          	mv	a0,a4
    1750:	095000ef          	jal	ra,1fe4 <altera_avalon_jtag_uart_write>
    1754:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    1758:	00078513          	mv	a0,a5
    175c:	02c12083          	lw	ra,44(sp)
    1760:	02812403          	lw	s0,40(sp)
    1764:	03010113          	addi	sp,sp,48
    1768:	00008067          	ret

0000176c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    176c:	fd010113          	addi	sp,sp,-48
    1770:	02112623          	sw	ra,44(sp)
    1774:	02812423          	sw	s0,40(sp)
    1778:	03010413          	addi	s0,sp,48
    177c:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1780:	fdc42783          	lw	a5,-36(s0)
    1784:	0007a783          	lw	a5,0(a5)
    1788:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    178c:	fec42783          	lw	a5,-20(s0)
    1790:	02878713          	addi	a4,a5,40
    1794:	fdc42783          	lw	a5,-36(s0)
    1798:	0087a783          	lw	a5,8(a5)
    179c:	00078593          	mv	a1,a5
    17a0:	00070513          	mv	a0,a4
    17a4:	4a8000ef          	jal	ra,1c4c <altera_avalon_jtag_uart_close>
    17a8:	00050793          	mv	a5,a0
}
    17ac:	00078513          	mv	a0,a5
    17b0:	02c12083          	lw	ra,44(sp)
    17b4:	02812403          	lw	s0,40(sp)
    17b8:	03010113          	addi	sp,sp,48
    17bc:	00008067          	ret

000017c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    17c0:	fd010113          	addi	sp,sp,-48
    17c4:	02112623          	sw	ra,44(sp)
    17c8:	02812423          	sw	s0,40(sp)
    17cc:	03010413          	addi	s0,sp,48
    17d0:	fca42e23          	sw	a0,-36(s0)
    17d4:	fcb42c23          	sw	a1,-40(s0)
    17d8:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    17dc:	fdc42783          	lw	a5,-36(s0)
    17e0:	0007a783          	lw	a5,0(a5)
    17e4:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    17e8:	fec42783          	lw	a5,-20(s0)
    17ec:	02878793          	addi	a5,a5,40
    17f0:	fd442603          	lw	a2,-44(s0)
    17f4:	fd842583          	lw	a1,-40(s0)
    17f8:	00078513          	mv	a0,a5
    17fc:	4bc000ef          	jal	ra,1cb8 <altera_avalon_jtag_uart_ioctl>
    1800:	00050793          	mv	a5,a0
}
    1804:	00078513          	mv	a0,a5
    1808:	02c12083          	lw	ra,44(sp)
    180c:	02812403          	lw	s0,40(sp)
    1810:	03010113          	addi	sp,sp,48
    1814:	00008067          	ret

00001818 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1818:	fd010113          	addi	sp,sp,-48
    181c:	02112623          	sw	ra,44(sp)
    1820:	02812423          	sw	s0,40(sp)
    1824:	03010413          	addi	s0,sp,48
    1828:	fca42e23          	sw	a0,-36(s0)
    182c:	fcb42c23          	sw	a1,-40(s0)
    1830:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1834:	fdc42783          	lw	a5,-36(s0)
    1838:	00100713          	li	a4,1
    183c:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1840:	fdc42783          	lw	a5,-36(s0)
    1844:	0207a783          	lw	a5,32(a5)
    1848:	fef42623          	sw	a5,-20(s0)
    184c:	fdc42783          	lw	a5,-36(s0)
    1850:	0007a783          	lw	a5,0(a5)
    1854:	00478793          	addi	a5,a5,4
    1858:	00078713          	mv	a4,a5
    185c:	fec42783          	lw	a5,-20(s0)
    1860:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    1864:	fd842503          	lw	a0,-40(s0)
    1868:	fd442583          	lw	a1,-44(s0)
    186c:	00000713          	li	a4,0
    1870:	fdc42683          	lw	a3,-36(s0)
    1874:	000027b7          	lui	a5,0x2
    1878:	94078613          	addi	a2,a5,-1728 # 1940 <altera_avalon_jtag_uart_irq>
    187c:	645000ef          	jal	ra,26c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1880:	fdc42783          	lw	a5,-36(s0)
    1884:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    1888:	fdc42783          	lw	a5,-36(s0)
    188c:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
    1890:	0000b7b7          	lui	a5,0xb
    1894:	6a07a583          	lw	a1,1696(a5) # b6a0 <_alt_tick_rate>
    1898:	fdc42683          	lw	a3,-36(s0)
    189c:	000027b7          	lui	a5,0x2
    18a0:	b9078613          	addi	a2,a5,-1136 # 1b90 <altera_avalon_jtag_uart_timeout>
    18a4:	00070513          	mv	a0,a4
    18a8:	1b1000ef          	jal	ra,2258 <alt_alarm_start>
    18ac:	00050793          	mv	a5,a0
    18b0:	0007da63          	bgez	a5,18c4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    18b4:	fdc42783          	lw	a5,-36(s0)
    18b8:	80000737          	lui	a4,0x80000
    18bc:	fff74713          	not	a4,a4
    18c0:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
    18c4:	0000b7b7          	lui	a5,0xb
    18c8:	6827c783          	lbu	a5,1666(a5) # b682 <alt_log_jtag_uart_alarm_on_flag>
    18cc:	0ff7f713          	zext.b	a4,a5
    18d0:	00100793          	li	a5,1
    18d4:	02f71863          	bne	a4,a5,1904 <altera_avalon_jtag_uart_init+0xec>
    18d8:	0000b7b7          	lui	a5,0xb
    18dc:	6a07a703          	lw	a4,1696(a5) # b6a0 <_alt_tick_rate>
    18e0:	00a00793          	li	a5,10
    18e4:	02f75733          	divu	a4,a4,a5
    18e8:	fdc42683          	lw	a3,-36(s0)
    18ec:	000017b7          	lui	a5,0x1
    18f0:	bac78613          	addi	a2,a5,-1108 # bac <altera_avalon_jtag_uart_report_log>
    18f4:	00070593          	mv	a1,a4
    18f8:	0000b7b7          	lui	a5,0xb
    18fc:	79078513          	addi	a0,a5,1936 # b790 <alt_log_jtag_uart_alarm_1>
    1900:	159000ef          	jal	ra,2258 <alt_alarm_start>
    1904:	0000b7b7          	lui	a5,0xb
    1908:	6847c783          	lbu	a5,1668(a5) # b684 <alt_log_jtag_uart_startup_info_on_flag>
    190c:	0ff7f713          	zext.b	a4,a5
    1910:	00100793          	li	a5,1
    1914:	00f71c63          	bne	a4,a5,192c <altera_avalon_jtag_uart_init+0x114>
    1918:	fdc42783          	lw	a5,-36(s0)
    191c:	0007a783          	lw	a5,0(a5)
    1920:	00078593          	mv	a1,a5
    1924:	fdc42503          	lw	a0,-36(s0)
    1928:	be0ff0ef          	jal	ra,d08 <alt_log_jtag_uart_startup_info>
}
    192c:	00000013          	nop
    1930:	02c12083          	lw	ra,44(sp)
    1934:	02812403          	lw	s0,40(sp)
    1938:	03010113          	addi	sp,sp,48
    193c:	00008067          	ret

00001940 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    1940:	fa010113          	addi	sp,sp,-96
    1944:	04112e23          	sw	ra,92(sp)
    1948:	04812c23          	sw	s0,88(sp)
    194c:	06010413          	addi	s0,sp,96
    1950:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    1954:	fac42783          	lw	a5,-84(s0)
    1958:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
    195c:	fc442783          	lw	a5,-60(s0)
    1960:	0007a783          	lw	a5,0(a5)
    1964:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
    1968:	fa042c23          	sw	zero,-72(s0)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
    196c:	fc842783          	lw	a5,-56(s0)
    1970:	fc442583          	lw	a1,-60(s0)
    1974:	00078513          	mv	a0,a5
    1978:	bd8ff0ef          	jal	ra,d50 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    197c:	fc842783          	lw	a5,-56(s0)
    1980:	00478793          	addi	a5,a5,4
    1984:	0007a783          	lw	a5,0(a5)
    1988:	fcf42623          	sw	a5,-52(s0)
    198c:	fcc42783          	lw	a5,-52(s0)
    1990:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1994:	fd042783          	lw	a5,-48(s0)
    1998:	3007f793          	andi	a5,a5,768
    199c:	1c078e63          	beqz	a5,1b78 <altera_avalon_jtag_uart_irq+0x238>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    19a0:	fd042783          	lw	a5,-48(s0)
    19a4:	1007f793          	andi	a5,a5,256
    19a8:	0e078663          	beqz	a5,1a94 <altera_avalon_jtag_uart_irq+0x154>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    19ac:	000107b7          	lui	a5,0x10
    19b0:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    19b4:	fc442783          	lw	a5,-60(s0)
    19b8:	0287a783          	lw	a5,40(a5) # 10028 <__alt_data_end+0x28>
    19bc:	00178793          	addi	a5,a5,1
    19c0:	7ff7f793          	andi	a5,a5,2047
    19c4:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
    19c8:	fc442783          	lw	a5,-60(s0)
    19cc:	02c7a783          	lw	a5,44(a5)
    19d0:	fd442703          	lw	a4,-44(s0)
    19d4:	06f70263          	beq	a4,a5,1a38 <altera_avalon_jtag_uart_irq+0xf8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    19d8:	fc842783          	lw	a5,-56(s0)
    19dc:	0007a783          	lw	a5,0(a5)
    19e0:	fcf42c23          	sw	a5,-40(s0)
    19e4:	fd842783          	lw	a5,-40(s0)
    19e8:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    19ec:	fbc42703          	lw	a4,-68(s0)
    19f0:	000087b7          	lui	a5,0x8
    19f4:	00f777b3          	and	a5,a4,a5
    19f8:	04078463          	beqz	a5,1a40 <altera_avalon_jtag_uart_irq+0x100>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    19fc:	fc442783          	lw	a5,-60(s0)
    1a00:	0287a783          	lw	a5,40(a5) # 8028 <__fini_array_end+0x3f8>
    1a04:	fbc42703          	lw	a4,-68(s0)
    1a08:	0ff77713          	zext.b	a4,a4
    1a0c:	fc442683          	lw	a3,-60(s0)
    1a10:	00f687b3          	add	a5,a3,a5
    1a14:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1a18:	fc442783          	lw	a5,-60(s0)
    1a1c:	0287a783          	lw	a5,40(a5)
    1a20:	00178793          	addi	a5,a5,1
    1a24:	7ff7f713          	andi	a4,a5,2047
    1a28:	fc442783          	lw	a5,-60(s0)
    1a2c:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    1a30:	00000013          	nop
      {
    1a34:	f81ff06f          	j	19b4 <altera_avalon_jtag_uart_irq+0x74>
          break;
    1a38:	00000013          	nop
    1a3c:	0080006f          	j	1a44 <altera_avalon_jtag_uart_irq+0x104>
          break;
    1a40:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1a44:	fbc42703          	lw	a4,-68(s0)
    1a48:	000107b7          	lui	a5,0x10
    1a4c:	04f76463          	bltu	a4,a5,1a94 <altera_avalon_jtag_uart_irq+0x154>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1a50:	fc442783          	lw	a5,-60(s0)
    1a54:	0207a783          	lw	a5,32(a5) # 10020 <__alt_data_end+0x20>
    1a58:	ffe7f713          	andi	a4,a5,-2
    1a5c:	fc442783          	lw	a5,-60(s0)
    1a60:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1a64:	fc442783          	lw	a5,-60(s0)
    1a68:	0207a783          	lw	a5,32(a5)
    1a6c:	fcf42e23          	sw	a5,-36(s0)
    1a70:	fc842783          	lw	a5,-56(s0)
    1a74:	00478793          	addi	a5,a5,4
    1a78:	00078713          	mv	a4,a5
    1a7c:	fdc42783          	lw	a5,-36(s0)
    1a80:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7fff0000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1a84:	fc842783          	lw	a5,-56(s0)
    1a88:	00478793          	addi	a5,a5,4
    1a8c:	0007a783          	lw	a5,0(a5)
    1a90:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1a94:	fd042783          	lw	a5,-48(s0)
    1a98:	2007f793          	andi	a5,a5,512
    1a9c:	ee0780e3          	beqz	a5,197c <altera_avalon_jtag_uart_irq+0x3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1aa0:	fd042783          	lw	a5,-48(s0)
    1aa4:	0107d793          	srli	a5,a5,0x10
    1aa8:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1aac:	05c0006f          	j	1b08 <altera_avalon_jtag_uart_irq+0x1c8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1ab0:	fc442783          	lw	a5,-60(s0)
    1ab4:	0347a783          	lw	a5,52(a5)
    1ab8:	fc442703          	lw	a4,-60(s0)
    1abc:	00f707b3          	add	a5,a4,a5
    1ac0:	00001737          	lui	a4,0x1
    1ac4:	00f707b3          	add	a5,a4,a5
    1ac8:	8387c783          	lbu	a5,-1992(a5)
    1acc:	fef42223          	sw	a5,-28(s0)
    1ad0:	fc842783          	lw	a5,-56(s0)
    1ad4:	fe442703          	lw	a4,-28(s0)
    1ad8:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1adc:	fc442783          	lw	a5,-60(s0)
    1ae0:	0347a783          	lw	a5,52(a5)
    1ae4:	00178793          	addi	a5,a5,1
    1ae8:	7ff7f713          	andi	a4,a5,2047
    1aec:	fc442783          	lw	a5,-60(s0)
    1af0:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
    1af4:	00100793          	li	a5,1
    1af8:	faf42c23          	sw	a5,-72(s0)

        space--;
    1afc:	fc042783          	lw	a5,-64(s0)
    1b00:	fff78793          	addi	a5,a5,-1
    1b04:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
    1b08:	fc042783          	lw	a5,-64(s0)
    1b0c:	00078c63          	beqz	a5,1b24 <altera_avalon_jtag_uart_irq+0x1e4>
    1b10:	fc442783          	lw	a5,-60(s0)
    1b14:	0347a703          	lw	a4,52(a5)
    1b18:	fc442783          	lw	a5,-60(s0)
    1b1c:	0307a783          	lw	a5,48(a5)
    1b20:	f8f718e3          	bne	a4,a5,1ab0 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
    1b24:	fc042783          	lw	a5,-64(s0)
    1b28:	e4078ae3          	beqz	a5,197c <altera_avalon_jtag_uart_irq+0x3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1b2c:	fc442783          	lw	a5,-60(s0)
    1b30:	0207a783          	lw	a5,32(a5)
    1b34:	ffd7f713          	andi	a4,a5,-3
    1b38:	fc442783          	lw	a5,-60(s0)
    1b3c:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1b40:	fc442783          	lw	a5,-60(s0)
    1b44:	0207a783          	lw	a5,32(a5)
    1b48:	fef42423          	sw	a5,-24(s0)
    1b4c:	fc442783          	lw	a5,-60(s0)
    1b50:	0007a783          	lw	a5,0(a5)
    1b54:	00478793          	addi	a5,a5,4
    1b58:	00078713          	mv	a4,a5
    1b5c:	fe842783          	lw	a5,-24(s0)
    1b60:	00f72023          	sw	a5,0(a4) # 1000 <alt_main+0x74>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1b64:	fc842783          	lw	a5,-56(s0)
    1b68:	00478793          	addi	a5,a5,4
    1b6c:	0007a783          	lw	a5,0(a5)
    1b70:	fef42623          	sw	a5,-20(s0)
  {
    1b74:	e09ff06f          	j	197c <altera_avalon_jtag_uart_irq+0x3c>
      break;
    1b78:	00000013          	nop
      }
    }
  }
}
    1b7c:	00000013          	nop
    1b80:	05c12083          	lw	ra,92(sp)
    1b84:	05812403          	lw	s0,88(sp)
    1b88:	06010113          	addi	sp,sp,96
    1b8c:	00008067          	ret

00001b90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1b90:	fd010113          	addi	sp,sp,-48
    1b94:	02812623          	sw	s0,44(sp)
    1b98:	03010413          	addi	s0,sp,48
    1b9c:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1ba0:	fdc42783          	lw	a5,-36(s0)
    1ba4:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1ba8:	fe042783          	lw	a5,-32(s0)
    1bac:	0007a783          	lw	a5,0(a5)
    1bb0:	00478793          	addi	a5,a5,4
    1bb4:	0007a783          	lw	a5,0(a5)
    1bb8:	fef42223          	sw	a5,-28(s0)
    1bbc:	fe442783          	lw	a5,-28(s0)
    1bc0:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1bc4:	fe842783          	lw	a5,-24(s0)
    1bc8:	4007f793          	andi	a5,a5,1024
    1bcc:	02078c63          	beqz	a5,1c04 <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1bd0:	fe042783          	lw	a5,-32(s0)
    1bd4:	0207a783          	lw	a5,32(a5)
    1bd8:	4007e793          	ori	a5,a5,1024
    1bdc:	fef42623          	sw	a5,-20(s0)
    1be0:	fe042783          	lw	a5,-32(s0)
    1be4:	0007a783          	lw	a5,0(a5)
    1be8:	00478793          	addi	a5,a5,4
    1bec:	00078713          	mv	a4,a5
    1bf0:	fec42783          	lw	a5,-20(s0)
    1bf4:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
    1bf8:	fe042783          	lw	a5,-32(s0)
    1bfc:	0207a223          	sw	zero,36(a5)
    1c00:	0340006f          	j	1c34 <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1c04:	fe042783          	lw	a5,-32(s0)
    1c08:	0247a703          	lw	a4,36(a5)
    1c0c:	800007b7          	lui	a5,0x80000
    1c10:	ffc7c793          	xori	a5,a5,-4
    1c14:	02e7e063          	bltu	a5,a4,1c34 <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
    1c18:	fe042783          	lw	a5,-32(s0)
    1c1c:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
    1c20:	00178713          	addi	a4,a5,1
    1c24:	fe042783          	lw	a5,-32(s0)
    1c28:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
    1c2c:	fe042783          	lw	a5,-32(s0)
    1c30:	0247a783          	lw	a5,36(a5)
    1c34:	0000b7b7          	lui	a5,0xb
    1c38:	6a07a783          	lw	a5,1696(a5) # b6a0 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1c3c:	00078513          	mv	a0,a5
    1c40:	02c12403          	lw	s0,44(sp)
    1c44:	03010113          	addi	sp,sp,48
    1c48:	00008067          	ret

00001c4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    1c4c:	fe010113          	addi	sp,sp,-32
    1c50:	00812e23          	sw	s0,28(sp)
    1c54:	02010413          	addi	s0,sp,32
    1c58:	fea42623          	sw	a0,-20(s0)
    1c5c:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1c60:	01c0006f          	j	1c7c <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    1c64:	fe842703          	lw	a4,-24(s0)
    1c68:	000047b7          	lui	a5,0x4
    1c6c:	00f777b3          	and	a5,a4,a5
    1c70:	00078663          	beqz	a5,1c7c <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
    1c74:	ff500793          	li	a5,-11
    1c78:	0300006f          	j	1ca8 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1c7c:	fec42783          	lw	a5,-20(s0)
    1c80:	0347a703          	lw	a4,52(a5) # 4034 <_free_r+0x2f0>
    1c84:	fec42783          	lw	a5,-20(s0)
    1c88:	0307a783          	lw	a5,48(a5)
    1c8c:	00f70c63          	beq	a4,a5,1ca4 <altera_avalon_jtag_uart_close+0x58>
    1c90:	fec42783          	lw	a5,-20(s0)
    1c94:	0247a703          	lw	a4,36(a5)
    1c98:	fec42783          	lw	a5,-20(s0)
    1c9c:	0047a783          	lw	a5,4(a5)
    1ca0:	fcf762e3          	bltu	a4,a5,1c64 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    1ca4:	00000793          	li	a5,0
}
    1ca8:	00078513          	mv	a0,a5
    1cac:	01c12403          	lw	s0,28(sp)
    1cb0:	02010113          	addi	sp,sp,32
    1cb4:	00008067          	ret

00001cb8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1cb8:	fd010113          	addi	sp,sp,-48
    1cbc:	02812623          	sw	s0,44(sp)
    1cc0:	03010413          	addi	s0,sp,48
    1cc4:	fca42e23          	sw	a0,-36(s0)
    1cc8:	fcb42c23          	sw	a1,-40(s0)
    1ccc:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
    1cd0:	fe700793          	li	a5,-25
    1cd4:	fef42423          	sw	a5,-24(s0)

  switch (req)
    1cd8:	fd842703          	lw	a4,-40(s0)
    1cdc:	000077b7          	lui	a5,0x7
    1ce0:	a0178793          	addi	a5,a5,-1535 # 6a01 <__smakebuf_r+0x179>
    1ce4:	00f70c63          	beq	a4,a5,1cfc <altera_avalon_jtag_uart_ioctl+0x44>
    1ce8:	fd842703          	lw	a4,-40(s0)
    1cec:	000077b7          	lui	a5,0x7
    1cf0:	a0278793          	addi	a5,a5,-1534 # 6a02 <__smakebuf_r+0x17a>
    1cf4:	06f70263          	beq	a4,a5,1d58 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
    1cf8:	0ac0006f          	j	1da4 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
    1cfc:	fdc42783          	lw	a5,-36(s0)
    1d00:	0047a703          	lw	a4,4(a5)
    1d04:	800007b7          	lui	a5,0x80000
    1d08:	fff7c793          	not	a5,a5
    1d0c:	08f70663          	beq	a4,a5,1d98 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
    1d10:	fd442783          	lw	a5,-44(s0)
    1d14:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7fff0000>
    1d18:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1d1c:	fec42703          	lw	a4,-20(s0)
    1d20:	00100793          	li	a5,1
    1d24:	00e7de63          	bge	a5,a4,1d40 <altera_avalon_jtag_uart_ioctl+0x88>
    1d28:	fec42703          	lw	a4,-20(s0)
    1d2c:	800007b7          	lui	a5,0x80000
    1d30:	fff7c793          	not	a5,a5
    1d34:	00f70663          	beq	a4,a5,1d40 <altera_avalon_jtag_uart_ioctl+0x88>
    1d38:	fec42783          	lw	a5,-20(s0)
    1d3c:	00c0006f          	j	1d48 <altera_avalon_jtag_uart_ioctl+0x90>
    1d40:	800007b7          	lui	a5,0x80000
    1d44:	ffe7c793          	xori	a5,a5,-2
    1d48:	fdc42703          	lw	a4,-36(s0)
    1d4c:	00f72223          	sw	a5,4(a4)
      rc = 0;
    1d50:	fe042423          	sw	zero,-24(s0)
    break;
    1d54:	0440006f          	j	1d98 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    1d58:	fdc42783          	lw	a5,-36(s0)
    1d5c:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7fff0004>
    1d60:	800007b7          	lui	a5,0x80000
    1d64:	fff7c793          	not	a5,a5
    1d68:	02f70c63          	beq	a4,a5,1da0 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1d6c:	fdc42783          	lw	a5,-36(s0)
    1d70:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
    1d74:	fdc42783          	lw	a5,-36(s0)
    1d78:	0047a783          	lw	a5,4(a5)
    1d7c:	00f737b3          	sltu	a5,a4,a5
    1d80:	0ff7f793          	zext.b	a5,a5
    1d84:	00078713          	mv	a4,a5
    1d88:	fd442783          	lw	a5,-44(s0)
    1d8c:	00e7a023          	sw	a4,0(a5)
      rc = 0;
    1d90:	fe042423          	sw	zero,-24(s0)
    break;
    1d94:	00c0006f          	j	1da0 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
    1d98:	00000013          	nop
    1d9c:	0080006f          	j	1da4 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
    1da0:	00000013          	nop
  }

  return rc;
    1da4:	fe842783          	lw	a5,-24(s0)
}
    1da8:	00078513          	mv	a0,a5
    1dac:	02c12403          	lw	s0,44(sp)
    1db0:	03010113          	addi	sp,sp,48
    1db4:	00008067          	ret

00001db8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1db8:	fc010113          	addi	sp,sp,-64
    1dbc:	02112e23          	sw	ra,60(sp)
    1dc0:	02812c23          	sw	s0,56(sp)
    1dc4:	04010413          	addi	s0,sp,64
    1dc8:	fca42623          	sw	a0,-52(s0)
    1dcc:	fcb42423          	sw	a1,-56(s0)
    1dd0:	fcc42223          	sw	a2,-60(s0)
    1dd4:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
    1dd8:	fc842783          	lw	a5,-56(s0)
    1ddc:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1de0:	1280006f          	j	1f08 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1de4:	fcc42783          	lw	a5,-52(s0)
    1de8:	0287a783          	lw	a5,40(a5)
    1dec:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
    1df0:	fcc42783          	lw	a5,-52(s0)
    1df4:	02c7a783          	lw	a5,44(a5)
    1df8:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
    1dfc:	fd842703          	lw	a4,-40(s0)
    1e00:	fdc42783          	lw	a5,-36(s0)
    1e04:	00f76c63          	bltu	a4,a5,1e1c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1e08:	fd842703          	lw	a4,-40(s0)
    1e0c:	fdc42783          	lw	a5,-36(s0)
    1e10:	40f707b3          	sub	a5,a4,a5
    1e14:	fcf42a23          	sw	a5,-44(s0)
    1e18:	0180006f          	j	1e30 <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1e1c:	000017b7          	lui	a5,0x1
    1e20:	80078713          	addi	a4,a5,-2048 # 800 <alt_log_private_printf+0x240>
    1e24:	fdc42783          	lw	a5,-36(s0)
    1e28:	40f707b3          	sub	a5,a4,a5
    1e2c:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
    1e30:	fd442783          	lw	a5,-44(s0)
    1e34:	06078e63          	beqz	a5,1eb0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
    1e38:	fc442783          	lw	a5,-60(s0)
    1e3c:	fd442703          	lw	a4,-44(s0)
    1e40:	00e7f663          	bgeu	a5,a4,1e4c <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1e44:	fc442783          	lw	a5,-60(s0)
    1e48:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
    1e4c:	fcc42783          	lw	a5,-52(s0)
    1e50:	03878713          	addi	a4,a5,56
    1e54:	fdc42783          	lw	a5,-36(s0)
    1e58:	00f707b3          	add	a5,a4,a5
    1e5c:	fd442603          	lw	a2,-44(s0)
    1e60:	00078593          	mv	a1,a5
    1e64:	fd042503          	lw	a0,-48(s0)
    1e68:	751000ef          	jal	ra,2db8 <memcpy>
      ptr   += n;
    1e6c:	fd042703          	lw	a4,-48(s0)
    1e70:	fd442783          	lw	a5,-44(s0)
    1e74:	00f707b3          	add	a5,a4,a5
    1e78:	fcf42823          	sw	a5,-48(s0)
      space -= n;
    1e7c:	fc442703          	lw	a4,-60(s0)
    1e80:	fd442783          	lw	a5,-44(s0)
    1e84:	40f707b3          	sub	a5,a4,a5
    1e88:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1e8c:	fdc42703          	lw	a4,-36(s0)
    1e90:	fd442783          	lw	a5,-44(s0)
    1e94:	00f707b3          	add	a5,a4,a5
    1e98:	7ff7f713          	andi	a4,a5,2047
    1e9c:	fcc42783          	lw	a5,-52(s0)
    1ea0:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
    1ea4:	fc442783          	lw	a5,-60(s0)
    1ea8:	f2f04ee3          	bgtz	a5,1de4 <altera_avalon_jtag_uart_read+0x2c>
    1eac:	0080006f          	j	1eb4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
    1eb0:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    1eb4:	fd042703          	lw	a4,-48(s0)
    1eb8:	fc842783          	lw	a5,-56(s0)
    1ebc:	04f71c63          	bne	a4,a5,1f14 <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1ec0:	fc042703          	lw	a4,-64(s0)
    1ec4:	000047b7          	lui	a5,0x4
    1ec8:	00f777b3          	and	a5,a4,a5
    1ecc:	04079863          	bnez	a5,1f1c <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1ed0:	00000013          	nop
    1ed4:	fcc42783          	lw	a5,-52(s0)
    1ed8:	0287a783          	lw	a5,40(a5) # 4028 <_free_r+0x2e4>
    1edc:	fd842703          	lw	a4,-40(s0)
    1ee0:	00f71c63          	bne	a4,a5,1ef8 <altera_avalon_jtag_uart_read+0x140>
    1ee4:	fcc42783          	lw	a5,-52(s0)
    1ee8:	0247a703          	lw	a4,36(a5)
    1eec:	fcc42783          	lw	a5,-52(s0)
    1ef0:	0047a783          	lw	a5,4(a5)
    1ef4:	fef760e3          	bltu	a4,a5,1ed4 <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1ef8:	fcc42783          	lw	a5,-52(s0)
    1efc:	0287a783          	lw	a5,40(a5)
    1f00:	fd842703          	lw	a4,-40(s0)
    1f04:	02f70063          	beq	a4,a5,1f24 <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
    1f08:	fc442783          	lw	a5,-60(s0)
    1f0c:	ecf04ce3          	bgtz	a5,1de4 <altera_avalon_jtag_uart_read+0x2c>
    1f10:	0180006f          	j	1f28 <altera_avalon_jtag_uart_read+0x170>
      break;
    1f14:	00000013          	nop
    1f18:	0100006f          	j	1f28 <altera_avalon_jtag_uart_read+0x170>
      break;
    1f1c:	00000013          	nop
    1f20:	0080006f          	j	1f28 <altera_avalon_jtag_uart_read+0x170>
      break;
    1f24:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1f28:	fd042703          	lw	a4,-48(s0)
    1f2c:	fc842783          	lw	a5,-56(s0)
    1f30:	06f70463          	beq	a4,a5,1f98 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1f34:	00800793          	li	a5,8
    1f38:	3007b7f3          	csrrc	a5,mstatus,a5
    1f3c:	fef42623          	sw	a5,-20(s0)
    return context;
    1f40:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1f44:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1f48:	fcc42783          	lw	a5,-52(s0)
    1f4c:	0207a783          	lw	a5,32(a5)
    1f50:	0017e713          	ori	a4,a5,1
    1f54:	fcc42783          	lw	a5,-52(s0)
    1f58:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1f5c:	fcc42783          	lw	a5,-52(s0)
    1f60:	0207a783          	lw	a5,32(a5)
    1f64:	fef42223          	sw	a5,-28(s0)
    1f68:	fcc42783          	lw	a5,-52(s0)
    1f6c:	0007a783          	lw	a5,0(a5)
    1f70:	00478793          	addi	a5,a5,4
    1f74:	00078713          	mv	a4,a5
    1f78:	fe442783          	lw	a5,-28(s0)
    1f7c:	00f72023          	sw	a5,0(a4)
    1f80:	fe042783          	lw	a5,-32(s0)
    1f84:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1f88:	fe842783          	lw	a5,-24(s0)
    1f8c:	0087f793          	andi	a5,a5,8
    1f90:	3007a073          	csrs	mstatus,a5
}
    1f94:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1f98:	fd042703          	lw	a4,-48(s0)
    1f9c:	fc842783          	lw	a5,-56(s0)
    1fa0:	00f70a63          	beq	a4,a5,1fb4 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
    1fa4:	fd042703          	lw	a4,-48(s0)
    1fa8:	fc842783          	lw	a5,-56(s0)
    1fac:	40f707b3          	sub	a5,a4,a5
    1fb0:	0200006f          	j	1fd0 <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
    1fb4:	fc042703          	lw	a4,-64(s0)
    1fb8:	000047b7          	lui	a5,0x4
    1fbc:	00f777b3          	and	a5,a4,a5
    1fc0:	00078663          	beqz	a5,1fcc <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
    1fc4:	ff500793          	li	a5,-11
    1fc8:	0080006f          	j	1fd0 <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
    1fcc:	ffb00793          	li	a5,-5
}
    1fd0:	00078513          	mv	a0,a5
    1fd4:	03c12083          	lw	ra,60(sp)
    1fd8:	03812403          	lw	s0,56(sp)
    1fdc:	04010113          	addi	sp,sp,64
    1fe0:	00008067          	ret

00001fe4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1fe4:	fc010113          	addi	sp,sp,-64
    1fe8:	02112e23          	sw	ra,60(sp)
    1fec:	02812c23          	sw	s0,56(sp)
    1ff0:	04010413          	addi	s0,sp,64
    1ff4:	fca42623          	sw	a0,-52(s0)
    1ff8:	fcb42423          	sw	a1,-56(s0)
    1ffc:	fcc42223          	sw	a2,-60(s0)
    2000:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    2004:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    2008:	fc842783          	lw	a5,-56(s0)
    200c:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    2010:	0ec0006f          	j	20fc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    2014:	fcc42783          	lw	a5,-52(s0)
    2018:	0307a783          	lw	a5,48(a5) # 4030 <_free_r+0x2ec>
    201c:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
    2020:	fcc42783          	lw	a5,-52(s0)
    2024:	0347a783          	lw	a5,52(a5)
    2028:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
    202c:	fdc42703          	lw	a4,-36(s0)
    2030:	fd042783          	lw	a5,-48(s0)
    2034:	00f77e63          	bgeu	a4,a5,2050 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    2038:	fd042703          	lw	a4,-48(s0)
    203c:	fdc42783          	lw	a5,-36(s0)
    2040:	40f707b3          	sub	a5,a4,a5
    2044:	fff78793          	addi	a5,a5,-1
    2048:	fcf42a23          	sw	a5,-44(s0)
    204c:	0340006f          	j	2080 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    2050:	fd042783          	lw	a5,-48(s0)
    2054:	00078e63          	beqz	a5,2070 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    2058:	000017b7          	lui	a5,0x1
    205c:	80078713          	addi	a4,a5,-2048 # 800 <alt_log_private_printf+0x240>
    2060:	fdc42783          	lw	a5,-36(s0)
    2064:	40f707b3          	sub	a5,a4,a5
    2068:	fcf42a23          	sw	a5,-44(s0)
    206c:	0140006f          	j	2080 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    2070:	7ff00713          	li	a4,2047
    2074:	fdc42783          	lw	a5,-36(s0)
    2078:	40f707b3          	sub	a5,a4,a5
    207c:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
    2080:	fd442783          	lw	a5,-44(s0)
    2084:	08078263          	beqz	a5,2108 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    2088:	fc442783          	lw	a5,-60(s0)
    208c:	fd442703          	lw	a4,-44(s0)
    2090:	00e7f663          	bgeu	a5,a4,209c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    2094:	fc442783          	lw	a5,-60(s0)
    2098:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
    209c:	fcc42703          	lw	a4,-52(s0)
    20a0:	000017b7          	lui	a5,0x1
    20a4:	83878793          	addi	a5,a5,-1992 # 838 <alt_log_private_printf+0x278>
    20a8:	00f70733          	add	a4,a4,a5
    20ac:	fdc42783          	lw	a5,-36(s0)
    20b0:	00f707b3          	add	a5,a4,a5
    20b4:	fd442603          	lw	a2,-44(s0)
    20b8:	fc842583          	lw	a1,-56(s0)
    20bc:	00078513          	mv	a0,a5
    20c0:	4f9000ef          	jal	ra,2db8 <memcpy>
      ptr   += n;
    20c4:	fc842703          	lw	a4,-56(s0)
    20c8:	fd442783          	lw	a5,-44(s0)
    20cc:	00f707b3          	add	a5,a4,a5
    20d0:	fcf42423          	sw	a5,-56(s0)
      count -= n;
    20d4:	fc442703          	lw	a4,-60(s0)
    20d8:	fd442783          	lw	a5,-44(s0)
    20dc:	40f707b3          	sub	a5,a4,a5
    20e0:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    20e4:	fdc42703          	lw	a4,-36(s0)
    20e8:	fd442783          	lw	a5,-44(s0)
    20ec:	00f707b3          	add	a5,a4,a5
    20f0:	7ff7f713          	andi	a4,a5,2047
    20f4:	fcc42783          	lw	a5,-52(s0)
    20f8:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
    20fc:	fc442783          	lw	a5,-60(s0)
    2100:	f0f04ae3          	bgtz	a5,2014 <altera_avalon_jtag_uart_write+0x30>
    2104:	0080006f          	j	210c <altera_avalon_jtag_uart_write+0x128>
        break;
    2108:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    210c:	00800793          	li	a5,8
    2110:	3007b7f3          	csrrc	a5,mstatus,a5
    2114:	fef42623          	sw	a5,-20(s0)
    return context;
    2118:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    211c:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2120:	fcc42783          	lw	a5,-52(s0)
    2124:	0207a783          	lw	a5,32(a5)
    2128:	0027e713          	ori	a4,a5,2
    212c:	fcc42783          	lw	a5,-52(s0)
    2130:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2134:	fcc42783          	lw	a5,-52(s0)
    2138:	0207a783          	lw	a5,32(a5)
    213c:	fef42223          	sw	a5,-28(s0)
    2140:	fcc42783          	lw	a5,-52(s0)
    2144:	0007a783          	lw	a5,0(a5)
    2148:	00478793          	addi	a5,a5,4
    214c:	00078713          	mv	a4,a5
    2150:	fe442783          	lw	a5,-28(s0)
    2154:	00f72023          	sw	a5,0(a4)
    2158:	fe042783          	lw	a5,-32(s0)
    215c:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2160:	fe842783          	lw	a5,-24(s0)
    2164:	0087f793          	andi	a5,a5,8
    2168:	3007a073          	csrs	mstatus,a5
}
    216c:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    2170:	fc442783          	lw	a5,-60(s0)
    2174:	04f05463          	blez	a5,21bc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    2178:	fc042703          	lw	a4,-64(s0)
    217c:	000047b7          	lui	a5,0x4
    2180:	00f777b3          	and	a5,a4,a5
    2184:	04079263          	bnez	a5,21c8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    2188:	00000013          	nop
    218c:	fcc42783          	lw	a5,-52(s0)
    2190:	0347a783          	lw	a5,52(a5) # 4034 <_free_r+0x2f0>
    2194:	fd042703          	lw	a4,-48(s0)
    2198:	00f71c63          	bne	a4,a5,21b0 <altera_avalon_jtag_uart_write+0x1cc>
    219c:	fcc42783          	lw	a5,-52(s0)
    21a0:	0247a703          	lw	a4,36(a5)
    21a4:	fcc42783          	lw	a5,-52(s0)
    21a8:	0047a783          	lw	a5,4(a5)
    21ac:	fef760e3          	bltu	a4,a5,218c <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    21b0:	fcc42783          	lw	a5,-52(s0)
    21b4:	0247a783          	lw	a5,36(a5)
    21b8:	00079c63          	bnez	a5,21d0 <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
    21bc:	fc442783          	lw	a5,-60(s0)
    21c0:	f2f04ee3          	bgtz	a5,20fc <altera_avalon_jtag_uart_write+0x118>
    21c4:	0100006f          	j	21d4 <altera_avalon_jtag_uart_write+0x1f0>
        break;
    21c8:	00000013          	nop
    21cc:	0080006f          	j	21d4 <altera_avalon_jtag_uart_write+0x1f0>
         break;
    21d0:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    21d4:	fc842703          	lw	a4,-56(s0)
    21d8:	fd842783          	lw	a5,-40(s0)
    21dc:	00f70a63          	beq	a4,a5,21f0 <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
    21e0:	fc842703          	lw	a4,-56(s0)
    21e4:	fd842783          	lw	a5,-40(s0)
    21e8:	40f707b3          	sub	a5,a4,a5
    21ec:	0200006f          	j	220c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    21f0:	fc042703          	lw	a4,-64(s0)
    21f4:	000047b7          	lui	a5,0x4
    21f8:	00f777b3          	and	a5,a4,a5
    21fc:	00078663          	beqz	a5,2208 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
    2200:	ff500793          	li	a5,-11
    2204:	0080006f          	j	220c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    2208:	ffb00793          	li	a5,-5
}
    220c:	00078513          	mv	a0,a5
    2210:	03c12083          	lw	ra,60(sp)
    2214:	03812403          	lw	s0,56(sp)
    2218:	04010113          	addi	sp,sp,64
    221c:	00008067          	ret

00002220 <tx_log_str>:
        .global tx_log_str
tx_log_str:
tx_next_char:
    /* if pointer points to null, return .
     * a0 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	lb      t1, (a0)
    2220:	00050303          	lb	t1,0(a0)
	beqz    t1, end_tx
    2224:	02030863          	beqz	t1,2254 <end_tx>
	/* 
     * Check device transmit ready
     *    UART, ALT_LOG_PRINT_MSK == 0x40
     *    JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000
     */
    li      t2, ALT_LOG_PRINT_MSK
    2228:	ffff03b7          	lui	t2,0xffff0

0000222c <wait_tx_ready_loop>:

wait_tx_ready_loop:
    /* load base uart / jtag uart address into t0 */
    li      t0, ALT_LOG_PORT_BASE
    222c:	000202b7          	lui	t0,0x20
    2230:	04028293          	addi	t0,t0,64 # 20040 <__alt_data_end+0x10040>

    lw      t0, ALT_LOG_PRINT_REG_OFFSET(t0)
    2234:	0042a283          	lw	t0,4(t0)
    and     t0, t0, t2
    2238:	0072f2b3          	and	t0,t0,t2
    beqz    t0, wait_tx_ready_loop	
    223c:	fe0288e3          	beqz	t0,222c <wait_tx_ready_loop>

    /* load base uart / jtag uart address into t0 */
    li      t0, ALT_LOG_PORT_BASE
    2240:	000202b7          	lui	t0,0x20
    2244:	04028293          	addi	t0,t0,64 # 20040 <__alt_data_end+0x10040>

	/* write char */
	sw      t1, ALT_LOG_PRINT_TXDATA_REG_OFFSET(t0)		
    2248:	0062a023          	sw	t1,0(t0)

	/* advance string pointer */
	addi    a0, a0, 1
    224c:	00150513          	addi	a0,a0,1
	j       tx_next_char
    2250:	fd1ff06f          	j	2220 <tx_log_str>

00002254 <end_tx>:

end_tx:	
    ret
    2254:	00008067          	ret

00002258 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    2258:	fc010113          	addi	sp,sp,-64
    225c:	02812e23          	sw	s0,60(sp)
    2260:	04010413          	addi	s0,sp,64
    2264:	fca42623          	sw	a0,-52(s0)
    2268:	fcb42423          	sw	a1,-56(s0)
    226c:	fcc42223          	sw	a2,-60(s0)
    2270:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    2274:	00000713          	li	a4,0
    2278:	00000793          	li	a5,0
    227c:	fee42423          	sw	a4,-24(s0)
    2280:	fef42623          	sw	a5,-20(s0)
    2284:	0000b7b7          	lui	a5,0xb
    2288:	6a07a783          	lw	a5,1696(a5) # b6a0 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    228c:	12078263          	beqz	a5,23b0 <alt_alarm_start+0x158>
  {
    if (alarm)
    2290:	fcc42783          	lw	a5,-52(s0)
    2294:	10078a63          	beqz	a5,23a8 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
    2298:	fcc42783          	lw	a5,-52(s0)
    229c:	fc442703          	lw	a4,-60(s0)
    22a0:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    22a4:	fcc42783          	lw	a5,-52(s0)
    22a8:	fc042703          	lw	a4,-64(s0)
    22ac:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    22b0:	00800793          	li	a5,8
    22b4:	3007b7f3          	csrrc	a5,mstatus,a5
    22b8:	fef42223          	sw	a5,-28(s0)
    return context;
    22bc:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    22c0:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    22c4:	0000b7b7          	lui	a5,0xb
    22c8:	6a87a703          	lw	a4,1704(a5) # b6a8 <_alt_nticks>
    22cc:	6ac7a783          	lw	a5,1708(a5)
      
      current_nticks = alt_nticks();
    22d0:	fee42423          	sw	a4,-24(s0)
    22d4:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    22d8:	fc842783          	lw	a5,-56(s0)
    22dc:	00078813          	mv	a6,a5
    22e0:	00000893          	li	a7,0
    22e4:	fe842603          	lw	a2,-24(s0)
    22e8:	fec42683          	lw	a3,-20(s0)
    22ec:	00c80733          	add	a4,a6,a2
    22f0:	00070593          	mv	a1,a4
    22f4:	0105b5b3          	sltu	a1,a1,a6
    22f8:	00d887b3          	add	a5,a7,a3
    22fc:	00f586b3          	add	a3,a1,a5
    2300:	00068793          	mv	a5,a3
    2304:	00070613          	mv	a2,a4
    2308:	00078693          	mv	a3,a5
    230c:	00100513          	li	a0,1
    2310:	00000593          	li	a1,0
    2314:	00a60733          	add	a4,a2,a0
    2318:	00070813          	mv	a6,a4
    231c:	00c83833          	sltu	a6,a6,a2
    2320:	00b687b3          	add	a5,a3,a1
    2324:	00f806b3          	add	a3,a6,a5
    2328:	00068793          	mv	a5,a3
    232c:	fcc42683          	lw	a3,-52(s0)
    2330:	00e6a423          	sw	a4,8(a3)
    2334:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2338:	fcc42783          	lw	a5,-52(s0)
    233c:	0000a737          	lui	a4,0xa
    2340:	b3470713          	addi	a4,a4,-1228 # 9b34 <alt_alarm_list>
    2344:	fce42e23          	sw	a4,-36(s0)
    2348:	fef42023          	sw	a5,-32(s0)
  entry->previous = list;
    234c:	fe042783          	lw	a5,-32(s0)
    2350:	fdc42703          	lw	a4,-36(s0)
    2354:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    2358:	fdc42783          	lw	a5,-36(s0)
    235c:	0007a703          	lw	a4,0(a5)
    2360:	fe042783          	lw	a5,-32(s0)
    2364:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    2368:	fdc42783          	lw	a5,-36(s0)
    236c:	0007a783          	lw	a5,0(a5)
    2370:	fe042703          	lw	a4,-32(s0)
    2374:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    2378:	fdc42783          	lw	a5,-36(s0)
    237c:	fe042703          	lw	a4,-32(s0)
    2380:	00e7a023          	sw	a4,0(a5)
}
    2384:	00000013          	nop
    2388:	fd442783          	lw	a5,-44(s0)
    238c:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2390:	fd842783          	lw	a5,-40(s0)
    2394:	0087f793          	andi	a5,a5,8
    2398:	3007a073          	csrs	mstatus,a5
}
    239c:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    23a0:	00000793          	li	a5,0
    23a4:	0100006f          	j	23b4 <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
    23a8:	fea00793          	li	a5,-22
    23ac:	0080006f          	j	23b4 <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
    23b0:	f7a00793          	li	a5,-134
  }
}
    23b4:	00078513          	mv	a0,a5
    23b8:	03c12403          	lw	s0,60(sp)
    23bc:	04010113          	addi	sp,sp,64
    23c0:	00008067          	ret

000023c4 <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
    23c4:	fd010113          	addi	sp,sp,-48
    23c8:	02112623          	sw	ra,44(sp)
    23cc:	02812423          	sw	s0,40(sp)
    23d0:	03010413          	addi	s0,sp,48
    23d4:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
    23d8:	6a4000ef          	jal	ra,2a7c <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
    23dc:	fdc42703          	lw	a4,-36(s0)
    23e0:	03200793          	li	a5,50
    23e4:	02f707b3          	mul	a5,a4,a5
    23e8:	fef42423          	sw	a5,-24(s0)
    23ec:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
    23f0:	00000013          	nop
    23f4:	6c8000ef          	jal	ra,2abc <alt_timestamp>
    23f8:	00050713          	mv	a4,a0
    23fc:	00058793          	mv	a5,a1
    2400:	fec42683          	lw	a3,-20(s0)
    2404:	00078613          	mv	a2,a5
    2408:	fed666e3          	bltu	a2,a3,23f4 <alt_busy_sleep+0x30>
    240c:	fec42683          	lw	a3,-20(s0)
    2410:	00078613          	mv	a2,a5
    2414:	00c69863          	bne	a3,a2,2424 <alt_busy_sleep+0x60>
    2418:	fe842683          	lw	a3,-24(s0)
    241c:	00070793          	mv	a5,a4
    2420:	fcd7eae3          	bltu	a5,a3,23f4 <alt_busy_sleep+0x30>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
    2424:	00000793          	li	a5,0
}
    2428:	00078513          	mv	a0,a5
    242c:	02c12083          	lw	ra,44(sp)
    2430:	02812403          	lw	s0,40(sp)
    2434:	03010113          	addi	sp,sp,48
    2438:	00008067          	ret

0000243c <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
    243c:	fe010113          	addi	sp,sp,-32
    2440:	00812e23          	sw	s0,28(sp)
    2444:	02010413          	addi	s0,sp,32
#if ALT_CPU_DCACHE_SIZE > 0
    char* i;
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    2448:	fe042623          	sw	zero,-20(s0)
    244c:	0180006f          	j	2464 <alt_dcache_flush_all+0x28>
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    2450:	fec42783          	lw	a5,-20(s0)
    2454:	0817a00f          	.4byte	0x817a00f
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    2458:	fec42783          	lw	a5,-20(s0)
    245c:	02078793          	addi	a5,a5,32
    2460:	fef42623          	sw	a5,-20(s0)
    2464:	fec42703          	lw	a4,-20(s0)
    2468:	000017b7          	lui	a5,0x1
    246c:	fef762e3          	bltu	a4,a5,2450 <alt_dcache_flush_all+0x14>
    }
#endif
}
    2470:	00000013          	nop
    2474:	00000013          	nop
    2478:	01c12403          	lw	s0,28(sp)
    247c:	02010113          	addi	sp,sp,32
    2480:	00008067          	ret

00002484 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2484:	fe010113          	addi	sp,sp,-32
    2488:	00812e23          	sw	s0,28(sp)
    248c:	02010413          	addi	s0,sp,32
    2490:	fea42623          	sw	a0,-20(s0)
    2494:	feb42423          	sw	a1,-24(s0)
    2498:	fec42223          	sw	a2,-28(s0)
  return len;
    249c:	fe442783          	lw	a5,-28(s0)
}
    24a0:	00078513          	mv	a0,a5
    24a4:	01c12403          	lw	s0,28(sp)
    24a8:	02010113          	addi	sp,sp,32
    24ac:	00008067          	ret

000024b0 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    24b0:	fe010113          	addi	sp,sp,-32
    24b4:	00112e23          	sw	ra,28(sp)
    24b8:	00812c23          	sw	s0,24(sp)
    24bc:	02010413          	addi	s0,sp,32
    24c0:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    24c4:	0000a7b7          	lui	a5,0xa
    24c8:	b4478593          	addi	a1,a5,-1212 # 9b44 <alt_dev_list>
    24cc:	fec42503          	lw	a0,-20(s0)
    24d0:	068000ef          	jal	ra,2538 <alt_dev_llist_insert>
    24d4:	00050793          	mv	a5,a0
}
    24d8:	00078513          	mv	a0,a5
    24dc:	01c12083          	lw	ra,28(sp)
    24e0:	01812403          	lw	s0,24(sp)
    24e4:	02010113          	addi	sp,sp,32
    24e8:	00008067          	ret

000024ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    24ec:	ff010113          	addi	sp,sp,-16
    24f0:	00112623          	sw	ra,12(sp)
    24f4:	00812423          	sw	s0,8(sp)
    24f8:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    24fc:	0000a7b7          	lui	a5,0xa
    2500:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    2504:	00078c63          	beqz	a5,251c <alt_get_errno+0x30>
    2508:	0000a7b7          	lui	a5,0xa
    250c:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    2510:	000780e7          	jalr	a5
    2514:	00050793          	mv	a5,a0
    2518:	00c0006f          	j	2524 <alt_get_errno+0x38>
    251c:	0000b7b7          	lui	a5,0xb
    2520:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    2524:	00078513          	mv	a0,a5
    2528:	00c12083          	lw	ra,12(sp)
    252c:	00812403          	lw	s0,8(sp)
    2530:	01010113          	addi	sp,sp,16
    2534:	00008067          	ret

00002538 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2538:	fd010113          	addi	sp,sp,-48
    253c:	02112623          	sw	ra,44(sp)
    2540:	02812423          	sw	s0,40(sp)
    2544:	03010413          	addi	s0,sp,48
    2548:	fca42e23          	sw	a0,-36(s0)
    254c:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2550:	fdc42783          	lw	a5,-36(s0)
    2554:	00078863          	beqz	a5,2564 <alt_dev_llist_insert+0x2c>
    2558:	fdc42783          	lw	a5,-36(s0)
    255c:	0087a783          	lw	a5,8(a5)
    2560:	00079e63          	bnez	a5,257c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    2564:	f89ff0ef          	jal	ra,24ec <alt_get_errno>
    2568:	00050713          	mv	a4,a0
    256c:	01600793          	li	a5,22
    2570:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    2574:	fea00793          	li	a5,-22
    2578:	0540006f          	j	25cc <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    257c:	fdc42783          	lw	a5,-36(s0)
    2580:	fd842703          	lw	a4,-40(s0)
    2584:	fee42423          	sw	a4,-24(s0)
    2588:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    258c:	fec42783          	lw	a5,-20(s0)
    2590:	fe842703          	lw	a4,-24(s0)
    2594:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    2598:	fe842783          	lw	a5,-24(s0)
    259c:	0007a703          	lw	a4,0(a5)
    25a0:	fec42783          	lw	a5,-20(s0)
    25a4:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    25a8:	fe842783          	lw	a5,-24(s0)
    25ac:	0007a783          	lw	a5,0(a5)
    25b0:	fec42703          	lw	a4,-20(s0)
    25b4:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    25b8:	fe842783          	lw	a5,-24(s0)
    25bc:	fec42703          	lw	a4,-20(s0)
    25c0:	00e7a023          	sw	a4,0(a5)
}
    25c4:	00000013          	nop

  return 0;  
    25c8:	00000793          	li	a5,0
}
    25cc:	00078513          	mv	a0,a5
    25d0:	02c12083          	lw	ra,44(sp)
    25d4:	02812403          	lw	s0,40(sp)
    25d8:	03010113          	addi	sp,sp,48
    25dc:	00008067          	ret

000025e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    25e0:	fe010113          	addi	sp,sp,-32
    25e4:	00112e23          	sw	ra,28(sp)
    25e8:	00812c23          	sw	s0,24(sp)
    25ec:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    25f0:	000087b7          	lui	a5,0x8
    25f4:	c2c78793          	addi	a5,a5,-980 # 7c2c <__init_array_start+0x4>
    25f8:	fef42623          	sw	a5,-20(s0)
    25fc:	01c0006f          	j	2618 <_do_ctors+0x38>
        (*ctor) (); 
    2600:	fec42783          	lw	a5,-20(s0)
    2604:	0007a783          	lw	a5,0(a5)
    2608:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    260c:	fec42783          	lw	a5,-20(s0)
    2610:	ffc78793          	addi	a5,a5,-4
    2614:	fef42623          	sw	a5,-20(s0)
    2618:	fec42703          	lw	a4,-20(s0)
    261c:	000087b7          	lui	a5,0x8
    2620:	c2878793          	addi	a5,a5,-984 # 7c28 <__init_array_start>
    2624:	fcf77ee3          	bgeu	a4,a5,2600 <_do_ctors+0x20>
}
    2628:	00000013          	nop
    262c:	00000013          	nop
    2630:	01c12083          	lw	ra,28(sp)
    2634:	01812403          	lw	s0,24(sp)
    2638:	02010113          	addi	sp,sp,32
    263c:	00008067          	ret

00002640 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2640:	fe010113          	addi	sp,sp,-32
    2644:	00112e23          	sw	ra,28(sp)
    2648:	00812c23          	sw	s0,24(sp)
    264c:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    2650:	000087b7          	lui	a5,0x8
    2654:	c2c78793          	addi	a5,a5,-980 # 7c2c <__init_array_start+0x4>
    2658:	fef42623          	sw	a5,-20(s0)
    265c:	01c0006f          	j	2678 <_do_dtors+0x38>
        (*dtor) (); 
    2660:	fec42783          	lw	a5,-20(s0)
    2664:	0007a783          	lw	a5,0(a5)
    2668:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    266c:	fec42783          	lw	a5,-20(s0)
    2670:	ffc78793          	addi	a5,a5,-4
    2674:	fef42623          	sw	a5,-20(s0)
    2678:	fec42703          	lw	a4,-20(s0)
    267c:	000087b7          	lui	a5,0x8
    2680:	c3078793          	addi	a5,a5,-976 # 7c30 <__fini_array_end>
    2684:	fcf77ee3          	bgeu	a4,a5,2660 <_do_dtors+0x20>
}
    2688:	00000013          	nop
    268c:	00000013          	nop
    2690:	01c12083          	lw	ra,28(sp)
    2694:	01812403          	lw	s0,24(sp)
    2698:	02010113          	addi	sp,sp,32
    269c:	00008067          	ret

000026a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    26a0:	ff010113          	addi	sp,sp,-16
    26a4:	00812623          	sw	s0,12(sp)
    26a8:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
    26ac:	0000100f          	fence.i
#endif
}
    26b0:	00000013          	nop
    26b4:	00c12403          	lw	s0,12(sp)
    26b8:	01010113          	addi	sp,sp,16
    26bc:	00008067          	ret

000026c0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    26c0:	fd010113          	addi	sp,sp,-48
    26c4:	02112623          	sw	ra,44(sp)
    26c8:	02812423          	sw	s0,40(sp)
    26cc:	03010413          	addi	s0,sp,48
    26d0:	fea42623          	sw	a0,-20(s0)
    26d4:	feb42423          	sw	a1,-24(s0)
    26d8:	fec42223          	sw	a2,-28(s0)
    26dc:	fed42023          	sw	a3,-32(s0)
    26e0:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    26e4:	fdc42703          	lw	a4,-36(s0)
    26e8:	fe042683          	lw	a3,-32(s0)
    26ec:	fe442603          	lw	a2,-28(s0)
    26f0:	fe842583          	lw	a1,-24(s0)
    26f4:	fec42503          	lw	a0,-20(s0)
    26f8:	01c000ef          	jal	ra,2714 <alt_iic_isr_register>
    26fc:	00050793          	mv	a5,a0
}  
    2700:	00078513          	mv	a0,a5
    2704:	02c12083          	lw	ra,44(sp)
    2708:	02812403          	lw	s0,40(sp)
    270c:	03010113          	addi	sp,sp,48
    2710:	00008067          	ret

00002714 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2714:	fa010113          	addi	sp,sp,-96
    2718:	04812e23          	sw	s0,92(sp)
    271c:	06010413          	addi	s0,sp,96
    2720:	faa42e23          	sw	a0,-68(s0)
    2724:	fab42c23          	sw	a1,-72(s0)
    2728:	fac42a23          	sw	a2,-76(s0)
    272c:	fad42823          	sw	a3,-80(s0)
    2730:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    2734:	fea00793          	li	a5,-22
    2738:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    273c:	fb842783          	lw	a5,-72(s0)
    2740:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2744:	fc842703          	lw	a4,-56(s0)
    2748:	00f00793          	li	a5,15
    274c:	12e7c863          	blt	a5,a4,287c <alt_iic_isr_register+0x168>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2750:	00800793          	li	a5,8
    2754:	3007b7f3          	csrrc	a5,mstatus,a5
    2758:	fcf42823          	sw	a5,-48(s0)
    return context;
    275c:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    2760:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    2764:	0000b7b7          	lui	a5,0xb
    2768:	6f878713          	addi	a4,a5,1784 # b6f8 <alt_irq>
    276c:	fc842783          	lw	a5,-56(s0)
    2770:	00379793          	slli	a5,a5,0x3
    2774:	00f707b3          	add	a5,a4,a5
    2778:	fb442703          	lw	a4,-76(s0)
    277c:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    2780:	0000b7b7          	lui	a5,0xb
    2784:	6f878713          	addi	a4,a5,1784 # b6f8 <alt_irq>
    2788:	fc842783          	lw	a5,-56(s0)
    278c:	00379793          	slli	a5,a5,0x3
    2790:	00f707b3          	add	a5,a4,a5
    2794:	fb042703          	lw	a4,-80(s0)
    2798:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    279c:	fb442783          	lw	a5,-76(s0)
    27a0:	06078263          	beqz	a5,2804 <alt_iic_isr_register+0xf0>
    27a4:	fc842783          	lw	a5,-56(s0)
    27a8:	fbc42703          	lw	a4,-68(s0)
    27ac:	fce42a23          	sw	a4,-44(s0)
    27b0:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    27b4:	fd842703          	lw	a4,-40(s0)
    27b8:	00f00793          	li	a5,15
    27bc:	00e7e863          	bltu	a5,a4,27cc <alt_iic_isr_register+0xb8>
    27c0:	fd842783          	lw	a5,-40(s0)
    27c4:	01078793          	addi	a5,a5,16
    27c8:	0080006f          	j	27d0 <alt_iic_isr_register+0xbc>
    27cc:	fff00793          	li	a5,-1
    27d0:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    27d4:	fdc42783          	lw	a5,-36(s0)
    27d8:	0007d663          	bgez	a5,27e4 <alt_iic_isr_register+0xd0>
        return rc;
    27dc:	fdc42783          	lw	a5,-36(s0)
    27e0:	0800006f          	j	2860 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    27e4:	fdc42783          	lw	a5,-36(s0)
    27e8:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    27ec:	fd842783          	lw	a5,-40(s0)
    27f0:	00100713          	li	a4,1
    27f4:	00f717b3          	sll	a5,a4,a5
    27f8:	3047a073          	csrs	mie,a5
    return 0;
    27fc:	00000793          	li	a5,0
    2800:	0600006f          	j	2860 <alt_iic_isr_register+0x14c>
    2804:	fc842783          	lw	a5,-56(s0)
    2808:	fbc42703          	lw	a4,-68(s0)
    280c:	fee42023          	sw	a4,-32(s0)
    2810:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    2814:	fe442703          	lw	a4,-28(s0)
    2818:	00f00793          	li	a5,15
    281c:	00e7e863          	bltu	a5,a4,282c <alt_iic_isr_register+0x118>
    2820:	fe442783          	lw	a5,-28(s0)
    2824:	01078793          	addi	a5,a5,16
    2828:	0080006f          	j	2830 <alt_iic_isr_register+0x11c>
    282c:	fff00793          	li	a5,-1
    2830:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    2834:	fe842783          	lw	a5,-24(s0)
    2838:	0007d663          	bgez	a5,2844 <alt_iic_isr_register+0x130>
        return rc;
    283c:	fe842783          	lw	a5,-24(s0)
    2840:	0200006f          	j	2860 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    2844:	fe842783          	lw	a5,-24(s0)
    2848:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    284c:	fe442783          	lw	a5,-28(s0)
    2850:	00100713          	li	a4,1
    2854:	00f717b3          	sll	a5,a4,a5
    2858:	3047b073          	csrc	mie,a5
    return 0;
    285c:	00000793          	li	a5,0
    2860:	fcf42223          	sw	a5,-60(s0)
    2864:	fcc42783          	lw	a5,-52(s0)
    2868:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    286c:	fec42783          	lw	a5,-20(s0)
    2870:	0087f793          	andi	a5,a5,8
    2874:	3007a073          	csrs	mstatus,a5
}
    2878:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    287c:	fc442783          	lw	a5,-60(s0)
}
    2880:	00078513          	mv	a0,a5
    2884:	05c12403          	lw	s0,92(sp)
    2888:	06010113          	addi	sp,sp,96
    288c:	00008067          	ret

00002890 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2890:	fd010113          	addi	sp,sp,-48
    2894:	02112623          	sw	ra,44(sp)
    2898:	02812423          	sw	s0,40(sp)
    289c:	03010413          	addi	s0,sp,48
    28a0:	fca42e23          	sw	a0,-36(s0)
    28a4:	fcb42c23          	sw	a1,-40(s0)
    28a8:	fcc42a23          	sw	a2,-44(s0)
    28ac:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    28b0:	fd042603          	lw	a2,-48(s0)
    28b4:	fd442583          	lw	a1,-44(s0)
    28b8:	fd842503          	lw	a0,-40(s0)
    28bc:	2fd000ef          	jal	ra,33b8 <open>
    28c0:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    28c4:	fec42783          	lw	a5,-20(s0)
    28c8:	0807c863          	bltz	a5,2958 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    28cc:	000097b7          	lui	a5,0x9
    28d0:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    28d4:	fec42703          	lw	a4,-20(s0)
    28d8:	00070793          	mv	a5,a4
    28dc:	00179793          	slli	a5,a5,0x1
    28e0:	00e787b3          	add	a5,a5,a4
    28e4:	00279793          	slli	a5,a5,0x2
    28e8:	00f687b3          	add	a5,a3,a5
    28ec:	0007a703          	lw	a4,0(a5)
    28f0:	fdc42783          	lw	a5,-36(s0)
    28f4:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    28f8:	000097b7          	lui	a5,0x9
    28fc:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    2900:	fec42703          	lw	a4,-20(s0)
    2904:	00070793          	mv	a5,a4
    2908:	00179793          	slli	a5,a5,0x1
    290c:	00e787b3          	add	a5,a5,a4
    2910:	00279793          	slli	a5,a5,0x2
    2914:	00f687b3          	add	a5,a3,a5
    2918:	0047a703          	lw	a4,4(a5)
    291c:	fdc42783          	lw	a5,-36(s0)
    2920:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2924:	000097b7          	lui	a5,0x9
    2928:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    292c:	fec42703          	lw	a4,-20(s0)
    2930:	00070793          	mv	a5,a4
    2934:	00179793          	slli	a5,a5,0x1
    2938:	00e787b3          	add	a5,a5,a4
    293c:	00279793          	slli	a5,a5,0x2
    2940:	00f687b3          	add	a5,a3,a5
    2944:	0087a703          	lw	a4,8(a5)
    2948:	fdc42783          	lw	a5,-36(s0)
    294c:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    2950:	fec42503          	lw	a0,-20(s0)
    2954:	090000ef          	jal	ra,29e4 <alt_release_fd>
  }
} 
    2958:	00000013          	nop
    295c:	02c12083          	lw	ra,44(sp)
    2960:	02812403          	lw	s0,40(sp)
    2964:	03010113          	addi	sp,sp,48
    2968:	00008067          	ret

0000296c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    296c:	fe010113          	addi	sp,sp,-32
    2970:	00112e23          	sw	ra,28(sp)
    2974:	00812c23          	sw	s0,24(sp)
    2978:	02010413          	addi	s0,sp,32
    297c:	fea42623          	sw	a0,-20(s0)
    2980:	feb42423          	sw	a1,-24(s0)
    2984:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2988:	1ff00693          	li	a3,511
    298c:	00100613          	li	a2,1
    2990:	fec42583          	lw	a1,-20(s0)
    2994:	000097b7          	lui	a5,0x9
    2998:	18c78513          	addi	a0,a5,396 # 918c <alt_fd_list+0xc>
    299c:	ef5ff0ef          	jal	ra,2890 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    29a0:	1ff00693          	li	a3,511
    29a4:	00000613          	li	a2,0
    29a8:	fe842583          	lw	a1,-24(s0)
    29ac:	000097b7          	lui	a5,0x9
    29b0:	18078513          	addi	a0,a5,384 # 9180 <alt_fd_list>
    29b4:	eddff0ef          	jal	ra,2890 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    29b8:	1ff00693          	li	a3,511
    29bc:	00100613          	li	a2,1
    29c0:	fe442583          	lw	a1,-28(s0)
    29c4:	000097b7          	lui	a5,0x9
    29c8:	19878513          	addi	a0,a5,408 # 9198 <alt_fd_list+0x18>
    29cc:	ec5ff0ef          	jal	ra,2890 <alt_open_fd>
}  
    29d0:	00000013          	nop
    29d4:	01c12083          	lw	ra,28(sp)
    29d8:	01812403          	lw	s0,24(sp)
    29dc:	02010113          	addi	sp,sp,32
    29e0:	00008067          	ret

000029e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    29e4:	fe010113          	addi	sp,sp,-32
    29e8:	00812e23          	sw	s0,28(sp)
    29ec:	02010413          	addi	s0,sp,32
    29f0:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    29f4:	fec42703          	lw	a4,-20(s0)
    29f8:	00200793          	li	a5,2
    29fc:	04e7d663          	bge	a5,a4,2a48 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    2a00:	000097b7          	lui	a5,0x9
    2a04:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    2a08:	fec42703          	lw	a4,-20(s0)
    2a0c:	00070793          	mv	a5,a4
    2a10:	00179793          	slli	a5,a5,0x1
    2a14:	00e787b3          	add	a5,a5,a4
    2a18:	00279793          	slli	a5,a5,0x2
    2a1c:	00f687b3          	add	a5,a3,a5
    2a20:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    2a24:	000097b7          	lui	a5,0x9
    2a28:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    2a2c:	fec42703          	lw	a4,-20(s0)
    2a30:	00070793          	mv	a5,a4
    2a34:	00179793          	slli	a5,a5,0x1
    2a38:	00e787b3          	add	a5,a5,a4
    2a3c:	00279793          	slli	a5,a5,0x2
    2a40:	00f687b3          	add	a5,a3,a5
    2a44:	0007a023          	sw	zero,0(a5)
  }
}
    2a48:	00000013          	nop
    2a4c:	01c12403          	lw	s0,28(sp)
    2a50:	02010113          	addi	sp,sp,32
    2a54:	00008067          	ret

00002a58 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    2a58:	ff010113          	addi	sp,sp,-16
    2a5c:	00812623          	sw	s0,12(sp)
    2a60:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    2a64:	fff00793          	li	a5,-1
    2a68:	3047b073          	csrc	mie,a5
#endif
}
    2a6c:	00000013          	nop
    2a70:	00c12403          	lw	s0,12(sp)
    2a74:	01010113          	addi	sp,sp,16
    2a78:	00008067          	ret

00002a7c <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    2a7c:	ff010113          	addi	sp,sp,-16
    2a80:	00112623          	sw	ra,12(sp)
    2a84:	00812423          	sw	s0,8(sp)
    2a88:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    2a8c:	0ac000ef          	jal	ra,2b38 <alt_niosv_mtime_get>
    2a90:	00050713          	mv	a4,a0
    2a94:	00058793          	mv	a5,a1
    2a98:	0000b6b7          	lui	a3,0xb
    2a9c:	6ae6ac23          	sw	a4,1720(a3) # b6b8 <alt_niosv_timestamp_offset>
    2aa0:	6af6ae23          	sw	a5,1724(a3)
    return 0;
    2aa4:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    2aa8:	00078513          	mv	a0,a5
    2aac:	00c12083          	lw	ra,12(sp)
    2ab0:	00812403          	lw	s0,8(sp)
    2ab4:	01010113          	addi	sp,sp,16
    2ab8:	00008067          	ret

00002abc <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    2abc:	ff010113          	addi	sp,sp,-16
    2ac0:	00112623          	sw	ra,12(sp)
    2ac4:	00812423          	sw	s0,8(sp)
    2ac8:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    2acc:	06c000ef          	jal	ra,2b38 <alt_niosv_mtime_get>
    2ad0:	00050613          	mv	a2,a0
    2ad4:	00058693          	mv	a3,a1
    2ad8:	0000b7b7          	lui	a5,0xb
    2adc:	6b87a503          	lw	a0,1720(a5) # b6b8 <alt_niosv_timestamp_offset>
    2ae0:	6bc7a583          	lw	a1,1724(a5)
    2ae4:	40a60733          	sub	a4,a2,a0
    2ae8:	00070813          	mv	a6,a4
    2aec:	01063833          	sltu	a6,a2,a6
    2af0:	40b687b3          	sub	a5,a3,a1
    2af4:	410786b3          	sub	a3,a5,a6
    2af8:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    2afc:	00070513          	mv	a0,a4
    2b00:	00078593          	mv	a1,a5
    2b04:	00c12083          	lw	ra,12(sp)
    2b08:	00812403          	lw	s0,8(sp)
    2b0c:	01010113          	addi	sp,sp,16
    2b10:	00008067          	ret

00002b14 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    2b14:	ff010113          	addi	sp,sp,-16
    2b18:	00812623          	sw	s0,12(sp)
    2b1c:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    2b20:	02faf7b7          	lui	a5,0x2faf
    2b24:	08078793          	addi	a5,a5,128 # 2faf080 <__alt_data_end+0x2f9f080>
    return alt_niosv_timer_timestamp_freq();
}
    2b28:	00078513          	mv	a0,a5
    2b2c:	00c12403          	lw	s0,12(sp)
    2b30:	01010113          	addi	sp,sp,16
    2b34:	00008067          	ret

00002b38 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    2b38:	fe010113          	addi	sp,sp,-32
    2b3c:	00812e23          	sw	s0,28(sp)
    2b40:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    2b44:	00020337          	lui	t1,0x20
    2b48:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    2b4c:	00032303          	lw	t1,0(t1)
    2b50:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    2b54:	00020337          	lui	t1,0x20
    2b58:	00830313          	addi	t1,t1,8 # 20008 <__alt_data_end+0x10008>
    2b5c:	00032303          	lw	t1,0(t1)
    2b60:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    2b64:	00020337          	lui	t1,0x20
    2b68:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    2b6c:	00032303          	lw	t1,0(t1)
    2b70:	fe842e03          	lw	t3,-24(s0)
    2b74:	fc6e18e3          	bne	t3,t1,2b44 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    2b78:	fe842303          	lw	t1,-24(s0)
    2b7c:	00030813          	mv	a6,t1
    2b80:	00000893          	li	a7,0
    2b84:	00081793          	slli	a5,a6,0x0
    2b88:	00000713          	li	a4,0
    2b8c:	fec42803          	lw	a6,-20(s0)
    2b90:	00080613          	mv	a2,a6
    2b94:	00000693          	li	a3,0
    2b98:	00c76533          	or	a0,a4,a2
    2b9c:	00d7e5b3          	or	a1,a5,a3
    2ba0:	00050713          	mv	a4,a0
    2ba4:	00058793          	mv	a5,a1
}
    2ba8:	00070513          	mv	a0,a4
    2bac:	00078593          	mv	a1,a5
    2bb0:	01c12403          	lw	s0,28(sp)
    2bb4:	02010113          	addi	sp,sp,32
    2bb8:	00008067          	ret

00002bbc <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    2bbc:	fe010113          	addi	sp,sp,-32
    2bc0:	00812e23          	sw	s0,28(sp)
    2bc4:	02010413          	addi	s0,sp,32
    2bc8:	fea42423          	sw	a0,-24(s0)
    2bcc:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    2bd0:	000206b7          	lui	a3,0x20
    2bd4:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    2bd8:	fff00613          	li	a2,-1
    2bdc:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    2be0:	000206b7          	lui	a3,0x20
    2be4:	fe842603          	lw	a2,-24(s0)
    2be8:	00c6a023          	sw	a2,0(a3) # 20000 <__alt_data_end+0x10000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    2bec:	fec42683          	lw	a3,-20(s0)
    2bf0:	0006d713          	srli	a4,a3,0x0
    2bf4:	00000793          	li	a5,0
    2bf8:	000206b7          	lui	a3,0x20
    2bfc:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    2c00:	00070793          	mv	a5,a4
    2c04:	00f6a023          	sw	a5,0(a3)
}
    2c08:	00000013          	nop
    2c0c:	01c12403          	lw	s0,28(sp)
    2c10:	02010113          	addi	sp,sp,32
    2c14:	00008067          	ret

00002c18 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    2c18:	fe010113          	addi	sp,sp,-32
    2c1c:	00812e23          	sw	s0,28(sp)
    2c20:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    2c24:	00020337          	lui	t1,0x20
    2c28:	00032303          	lw	t1,0(t1) # 20000 <__alt_data_end+0x10000>
    2c2c:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    2c30:	00020337          	lui	t1,0x20
    2c34:	00430313          	addi	t1,t1,4 # 20004 <__alt_data_end+0x10004>
    2c38:	00032303          	lw	t1,0(t1)
    2c3c:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    2c40:	fec42303          	lw	t1,-20(s0)
    2c44:	00030813          	mv	a6,t1
    2c48:	00000893          	li	a7,0
    2c4c:	00081793          	slli	a5,a6,0x0
    2c50:	00000713          	li	a4,0
    2c54:	fe842803          	lw	a6,-24(s0)
    2c58:	00080613          	mv	a2,a6
    2c5c:	00000693          	li	a3,0
    2c60:	00c76533          	or	a0,a4,a2
    2c64:	00d7e5b3          	or	a1,a5,a3
    2c68:	00050713          	mv	a4,a0
    2c6c:	00058793          	mv	a5,a1
}
    2c70:	00070513          	mv	a0,a4
    2c74:	00078593          	mv	a1,a5
    2c78:	01c12403          	lw	s0,28(sp)
    2c7c:	02010113          	addi	sp,sp,32
    2c80:	00008067          	ret

00002c84 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    2c84:	fc010113          	addi	sp,sp,-64
    2c88:	02112e23          	sw	ra,60(sp)
    2c8c:	02812c23          	sw	s0,56(sp)
    2c90:	04010413          	addi	s0,sp,64
    2c94:	fca42623          	sw	a0,-52(s0)
    2c98:	fcb42423          	sw	a1,-56(s0)
    2c9c:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
    2ca0:	e99ff0ef          	jal	ra,2b38 <alt_niosv_mtime_get>
    2ca4:	fea42423          	sw	a0,-24(s0)
    2ca8:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    2cac:	fe842703          	lw	a4,-24(s0)
    2cb0:	fec42783          	lw	a5,-20(s0)
    2cb4:	0000c537          	lui	a0,0xc
    2cb8:	35050513          	addi	a0,a0,848 # c350 <__alt_heap_start+0xb80>
    2cbc:	00000593          	li	a1,0
    2cc0:	00a70633          	add	a2,a4,a0
    2cc4:	00060813          	mv	a6,a2
    2cc8:	00e83833          	sltu	a6,a6,a4
    2ccc:	00b786b3          	add	a3,a5,a1
    2cd0:	00d807b3          	add	a5,a6,a3
    2cd4:	00078693          	mv	a3,a5
    2cd8:	00060713          	mv	a4,a2
    2cdc:	00068793          	mv	a5,a3
    2ce0:	00070513          	mv	a0,a4
    2ce4:	00078593          	mv	a1,a5
    2ce8:	ed5ff0ef          	jal	ra,2bbc <alt_niosv_mtimecmp_set>

    // ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h
    ALT_LOG_SYS_CLK_HEARTBEAT();
    2cec:	a18fe0ef          	jal	ra,f04 <alt_log_system_clock>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2cf0:	00800793          	li	a5,8
    2cf4:	3007b7f3          	csrrc	a5,mstatus,a5
    2cf8:	fef42223          	sw	a5,-28(s0)
    return context;
    2cfc:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    2d00:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
    2d04:	f38fe0ef          	jal	ra,143c <alt_tick>
    2d08:	fdc42783          	lw	a5,-36(s0)
    2d0c:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2d10:	fe042783          	lw	a5,-32(s0)
    2d14:	0087f793          	andi	a5,a5,8
    2d18:	3007a073          	csrs	mstatus,a5
}
    2d1c:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    2d20:	00000013          	nop
    2d24:	03c12083          	lw	ra,60(sp)
    2d28:	03812403          	lw	s0,56(sp)
    2d2c:	04010113          	addi	sp,sp,64
    2d30:	00008067          	ret

00002d34 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    2d34:	ff010113          	addi	sp,sp,-16
    2d38:	00112623          	sw	ra,12(sp)
    2d3c:	00812423          	sw	s0,8(sp)
    2d40:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    2d44:	fff00513          	li	a0,-1
    2d48:	fff00593          	li	a1,-1
    2d4c:	e71ff0ef          	jal	ra,2bbc <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
    2d50:	08000793          	li	a5,128
    2d54:	3047a073          	csrs	mie,a5
}
    2d58:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    2d5c:	00000013          	nop
    2d60:	00c12083          	lw	ra,12(sp)
    2d64:	00812403          	lw	s0,8(sp)
    2d68:	01010113          	addi	sp,sp,16
    2d6c:	00008067          	ret

00002d70 <atexit>:
    2d70:	00050593          	mv	a1,a0
    2d74:	00000693          	li	a3,0
    2d78:	00000613          	li	a2,0
    2d7c:	00000513          	li	a0,0
    2d80:	6f80006f          	j	3478 <__register_exitproc>

00002d84 <exit>:
    2d84:	ff010113          	addi	sp,sp,-16
    2d88:	00000593          	li	a1,0
    2d8c:	00812423          	sw	s0,8(sp)
    2d90:	00112623          	sw	ra,12(sp)
    2d94:	00050413          	mv	s0,a0
    2d98:	7c8000ef          	jal	ra,3560 <__call_exitprocs>
    2d9c:	00005517          	auipc	a0,0x5
    2da0:	2b852503          	lw	a0,696(a0) # 8054 <_global_impure_ptr>
    2da4:	03c52783          	lw	a5,60(a0)
    2da8:	00078463          	beqz	a5,2db0 <exit+0x2c>
    2dac:	000780e7          	jalr	a5
    2db0:	00040513          	mv	a0,s0
    2db4:	785030ef          	jal	ra,6d38 <_exit>

00002db8 <memcpy>:
    2db8:	00b547b3          	xor	a5,a0,a1
    2dbc:	0037f793          	andi	a5,a5,3
    2dc0:	00c508b3          	add	a7,a0,a2
    2dc4:	06079463          	bnez	a5,2e2c <memcpy+0x74>
    2dc8:	00300793          	li	a5,3
    2dcc:	06c7f063          	bgeu	a5,a2,2e2c <memcpy+0x74>
    2dd0:	00357793          	andi	a5,a0,3
    2dd4:	00050713          	mv	a4,a0
    2dd8:	06079a63          	bnez	a5,2e4c <memcpy+0x94>
    2ddc:	ffc8f613          	andi	a2,a7,-4
    2de0:	40e606b3          	sub	a3,a2,a4
    2de4:	02000793          	li	a5,32
    2de8:	08d7ce63          	blt	a5,a3,2e84 <memcpy+0xcc>
    2dec:	00058693          	mv	a3,a1
    2df0:	00070793          	mv	a5,a4
    2df4:	02c77863          	bgeu	a4,a2,2e24 <memcpy+0x6c>
    2df8:	0006a803          	lw	a6,0(a3)
    2dfc:	00478793          	addi	a5,a5,4
    2e00:	00468693          	addi	a3,a3,4
    2e04:	ff07ae23          	sw	a6,-4(a5)
    2e08:	fec7e8e3          	bltu	a5,a2,2df8 <memcpy+0x40>
    2e0c:	fff60793          	addi	a5,a2,-1
    2e10:	40e787b3          	sub	a5,a5,a4
    2e14:	ffc7f793          	andi	a5,a5,-4
    2e18:	00478793          	addi	a5,a5,4
    2e1c:	00f70733          	add	a4,a4,a5
    2e20:	00f585b3          	add	a1,a1,a5
    2e24:	01176863          	bltu	a4,a7,2e34 <memcpy+0x7c>
    2e28:	00008067          	ret
    2e2c:	00050713          	mv	a4,a0
    2e30:	05157863          	bgeu	a0,a7,2e80 <memcpy+0xc8>
    2e34:	0005c783          	lbu	a5,0(a1)
    2e38:	00170713          	addi	a4,a4,1
    2e3c:	00158593          	addi	a1,a1,1
    2e40:	fef70fa3          	sb	a5,-1(a4)
    2e44:	fee898e3          	bne	a7,a4,2e34 <memcpy+0x7c>
    2e48:	00008067          	ret
    2e4c:	0005c683          	lbu	a3,0(a1)
    2e50:	00170713          	addi	a4,a4,1
    2e54:	00377793          	andi	a5,a4,3
    2e58:	fed70fa3          	sb	a3,-1(a4)
    2e5c:	00158593          	addi	a1,a1,1
    2e60:	f6078ee3          	beqz	a5,2ddc <memcpy+0x24>
    2e64:	0005c683          	lbu	a3,0(a1)
    2e68:	00170713          	addi	a4,a4,1
    2e6c:	00377793          	andi	a5,a4,3
    2e70:	fed70fa3          	sb	a3,-1(a4)
    2e74:	00158593          	addi	a1,a1,1
    2e78:	fc079ae3          	bnez	a5,2e4c <memcpy+0x94>
    2e7c:	f61ff06f          	j	2ddc <memcpy+0x24>
    2e80:	00008067          	ret
    2e84:	ff010113          	addi	sp,sp,-16
    2e88:	00812623          	sw	s0,12(sp)
    2e8c:	02000413          	li	s0,32
    2e90:	0005a383          	lw	t2,0(a1)
    2e94:	0045a283          	lw	t0,4(a1)
    2e98:	0085af83          	lw	t6,8(a1)
    2e9c:	00c5af03          	lw	t5,12(a1)
    2ea0:	0105ae83          	lw	t4,16(a1)
    2ea4:	0145ae03          	lw	t3,20(a1)
    2ea8:	0185a303          	lw	t1,24(a1)
    2eac:	01c5a803          	lw	a6,28(a1)
    2eb0:	0205a683          	lw	a3,32(a1)
    2eb4:	02470713          	addi	a4,a4,36
    2eb8:	40e607b3          	sub	a5,a2,a4
    2ebc:	fc772e23          	sw	t2,-36(a4)
    2ec0:	fe572023          	sw	t0,-32(a4)
    2ec4:	fff72223          	sw	t6,-28(a4)
    2ec8:	ffe72423          	sw	t5,-24(a4)
    2ecc:	ffd72623          	sw	t4,-20(a4)
    2ed0:	ffc72823          	sw	t3,-16(a4)
    2ed4:	fe672a23          	sw	t1,-12(a4)
    2ed8:	ff072c23          	sw	a6,-8(a4)
    2edc:	fed72e23          	sw	a3,-4(a4)
    2ee0:	02458593          	addi	a1,a1,36
    2ee4:	faf446e3          	blt	s0,a5,2e90 <memcpy+0xd8>
    2ee8:	00058693          	mv	a3,a1
    2eec:	00070793          	mv	a5,a4
    2ef0:	02c77863          	bgeu	a4,a2,2f20 <memcpy+0x168>
    2ef4:	0006a803          	lw	a6,0(a3)
    2ef8:	00478793          	addi	a5,a5,4
    2efc:	00468693          	addi	a3,a3,4
    2f00:	ff07ae23          	sw	a6,-4(a5)
    2f04:	fec7e8e3          	bltu	a5,a2,2ef4 <memcpy+0x13c>
    2f08:	fff60793          	addi	a5,a2,-1
    2f0c:	40e787b3          	sub	a5,a5,a4
    2f10:	ffc7f793          	andi	a5,a5,-4
    2f14:	00478793          	addi	a5,a5,4
    2f18:	00f70733          	add	a4,a4,a5
    2f1c:	00f585b3          	add	a1,a1,a5
    2f20:	01176863          	bltu	a4,a7,2f30 <memcpy+0x178>
    2f24:	00c12403          	lw	s0,12(sp)
    2f28:	01010113          	addi	sp,sp,16
    2f2c:	00008067          	ret
    2f30:	0005c783          	lbu	a5,0(a1)
    2f34:	00170713          	addi	a4,a4,1
    2f38:	00158593          	addi	a1,a1,1
    2f3c:	fef70fa3          	sb	a5,-1(a4)
    2f40:	fee882e3          	beq	a7,a4,2f24 <memcpy+0x16c>
    2f44:	0005c783          	lbu	a5,0(a1)
    2f48:	00170713          	addi	a4,a4,1
    2f4c:	00158593          	addi	a1,a1,1
    2f50:	fef70fa3          	sb	a5,-1(a4)
    2f54:	fce89ee3          	bne	a7,a4,2f30 <memcpy+0x178>
    2f58:	fcdff06f          	j	2f24 <memcpy+0x16c>

00002f5c <_putchar_r>:
    2f5c:	00852603          	lw	a2,8(a0)
    2f60:	1e80206f          	j	5148 <_putc_r>

00002f64 <putchar>:
    2f64:	8241a783          	lw	a5,-2012(gp) # 9b54 <_impure_ptr>
    2f68:	0087a603          	lw	a2,8(a5)
    2f6c:	00050593          	mv	a1,a0
    2f70:	00078513          	mv	a0,a5
    2f74:	1d40206f          	j	5148 <_putc_r>

00002f78 <_puts_r>:
    2f78:	fd010113          	addi	sp,sp,-48
    2f7c:	02812423          	sw	s0,40(sp)
    2f80:	00050413          	mv	s0,a0
    2f84:	00058513          	mv	a0,a1
    2f88:	02912223          	sw	s1,36(sp)
    2f8c:	02112623          	sw	ra,44(sp)
    2f90:	00058493          	mv	s1,a1
    2f94:	38c000ef          	jal	ra,3320 <strlen>
    2f98:	00150713          	addi	a4,a0,1
    2f9c:	00005697          	auipc	a3,0x5
    2fa0:	fb868693          	addi	a3,a3,-72 # 7f54 <__fini_array_end+0x324>
    2fa4:	00e12623          	sw	a4,12(sp)
    2fa8:	03842783          	lw	a5,56(s0)
    2fac:	01010713          	addi	a4,sp,16
    2fb0:	00d12c23          	sw	a3,24(sp)
    2fb4:	00e12223          	sw	a4,4(sp)
    2fb8:	00100693          	li	a3,1
    2fbc:	00200713          	li	a4,2
    2fc0:	00912823          	sw	s1,16(sp)
    2fc4:	00a12a23          	sw	a0,20(sp)
    2fc8:	00d12e23          	sw	a3,28(sp)
    2fcc:	00e12423          	sw	a4,8(sp)
    2fd0:	00842483          	lw	s1,8(s0)
    2fd4:	08078a63          	beqz	a5,3068 <_puts_r+0xf0>
    2fd8:	0644a703          	lw	a4,100(s1)
    2fdc:	00c49783          	lh	a5,12(s1)
    2fe0:	00177713          	andi	a4,a4,1
    2fe4:	00071663          	bnez	a4,2ff0 <_puts_r+0x78>
    2fe8:	2007f713          	andi	a4,a5,512
    2fec:	0a070463          	beqz	a4,3094 <_puts_r+0x11c>
    2ff0:	01279713          	slli	a4,a5,0x12
    2ff4:	02074263          	bltz	a4,3018 <_puts_r+0xa0>
    2ff8:	0644a703          	lw	a4,100(s1)
    2ffc:	000026b7          	lui	a3,0x2
    3000:	00d7e7b3          	or	a5,a5,a3
    3004:	ffffe6b7          	lui	a3,0xffffe
    3008:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffedfff>
    300c:	00d77733          	and	a4,a4,a3
    3010:	00f49623          	sh	a5,12(s1)
    3014:	06e4a223          	sw	a4,100(s1)
    3018:	00040513          	mv	a0,s0
    301c:	00410613          	addi	a2,sp,4
    3020:	00048593          	mv	a1,s1
    3024:	028010ef          	jal	ra,404c <__sfvwrite_r>
    3028:	0644a783          	lw	a5,100(s1)
    302c:	00153413          	seqz	s0,a0
    3030:	40800433          	neg	s0,s0
    3034:	00b47413          	andi	s0,s0,11
    3038:	0017f793          	andi	a5,a5,1
    303c:	fff40413          	addi	s0,s0,-1
    3040:	00079863          	bnez	a5,3050 <_puts_r+0xd8>
    3044:	00c4d783          	lhu	a5,12(s1)
    3048:	2007f793          	andi	a5,a5,512
    304c:	02078463          	beqz	a5,3074 <_puts_r+0xfc>
    3050:	02c12083          	lw	ra,44(sp)
    3054:	00040513          	mv	a0,s0
    3058:	02812403          	lw	s0,40(sp)
    305c:	02412483          	lw	s1,36(sp)
    3060:	03010113          	addi	sp,sp,48
    3064:	00008067          	ret
    3068:	00040513          	mv	a0,s0
    306c:	7ac000ef          	jal	ra,3818 <__sinit>
    3070:	f69ff06f          	j	2fd8 <_puts_r+0x60>
    3074:	0584a503          	lw	a0,88(s1)
    3078:	5f4010ef          	jal	ra,466c <__retarget_lock_release_recursive>
    307c:	02c12083          	lw	ra,44(sp)
    3080:	00040513          	mv	a0,s0
    3084:	02812403          	lw	s0,40(sp)
    3088:	02412483          	lw	s1,36(sp)
    308c:	03010113          	addi	sp,sp,48
    3090:	00008067          	ret
    3094:	0584a503          	lw	a0,88(s1)
    3098:	5bc010ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    309c:	00c49783          	lh	a5,12(s1)
    30a0:	f51ff06f          	j	2ff0 <_puts_r+0x78>

000030a4 <puts>:
    30a4:	00050593          	mv	a1,a0
    30a8:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    30ac:	ecdff06f          	j	2f78 <_puts_r>

000030b0 <cleanup_glue>:
    30b0:	fe010113          	addi	sp,sp,-32
    30b4:	01212823          	sw	s2,16(sp)
    30b8:	0005a903          	lw	s2,0(a1)
    30bc:	00812c23          	sw	s0,24(sp)
    30c0:	00912a23          	sw	s1,20(sp)
    30c4:	00112e23          	sw	ra,28(sp)
    30c8:	01312623          	sw	s3,12(sp)
    30cc:	01412423          	sw	s4,8(sp)
    30d0:	00058413          	mv	s0,a1
    30d4:	00050493          	mv	s1,a0
    30d8:	04090263          	beqz	s2,311c <cleanup_glue+0x6c>
    30dc:	00092983          	lw	s3,0(s2)
    30e0:	02098863          	beqz	s3,3110 <cleanup_glue+0x60>
    30e4:	0009aa03          	lw	s4,0(s3)
    30e8:	000a0e63          	beqz	s4,3104 <cleanup_glue+0x54>
    30ec:	000a2583          	lw	a1,0(s4)
    30f0:	00058463          	beqz	a1,30f8 <cleanup_glue+0x48>
    30f4:	fbdff0ef          	jal	ra,30b0 <cleanup_glue>
    30f8:	000a0593          	mv	a1,s4
    30fc:	00048513          	mv	a0,s1
    3100:	445000ef          	jal	ra,3d44 <_free_r>
    3104:	00098593          	mv	a1,s3
    3108:	00048513          	mv	a0,s1
    310c:	439000ef          	jal	ra,3d44 <_free_r>
    3110:	00090593          	mv	a1,s2
    3114:	00048513          	mv	a0,s1
    3118:	42d000ef          	jal	ra,3d44 <_free_r>
    311c:	00040593          	mv	a1,s0
    3120:	01812403          	lw	s0,24(sp)
    3124:	01c12083          	lw	ra,28(sp)
    3128:	01012903          	lw	s2,16(sp)
    312c:	00c12983          	lw	s3,12(sp)
    3130:	00812a03          	lw	s4,8(sp)
    3134:	00048513          	mv	a0,s1
    3138:	01412483          	lw	s1,20(sp)
    313c:	02010113          	addi	sp,sp,32
    3140:	4050006f          	j	3d44 <_free_r>

00003144 <_reclaim_reent>:
    3144:	8241a783          	lw	a5,-2012(gp) # 9b54 <_impure_ptr>
    3148:	10a78a63          	beq	a5,a0,325c <_reclaim_reent+0x118>
    314c:	04c52583          	lw	a1,76(a0)
    3150:	fe010113          	addi	sp,sp,-32
    3154:	00912a23          	sw	s1,20(sp)
    3158:	00112e23          	sw	ra,28(sp)
    315c:	00812c23          	sw	s0,24(sp)
    3160:	01212823          	sw	s2,16(sp)
    3164:	01312623          	sw	s3,12(sp)
    3168:	00050493          	mv	s1,a0
    316c:	04058063          	beqz	a1,31ac <_reclaim_reent+0x68>
    3170:	00000913          	li	s2,0
    3174:	08000993          	li	s3,128
    3178:	012587b3          	add	a5,a1,s2
    317c:	0007a403          	lw	s0,0(a5)
    3180:	00040e63          	beqz	s0,319c <_reclaim_reent+0x58>
    3184:	00040593          	mv	a1,s0
    3188:	00042403          	lw	s0,0(s0)
    318c:	00048513          	mv	a0,s1
    3190:	3b5000ef          	jal	ra,3d44 <_free_r>
    3194:	fe0418e3          	bnez	s0,3184 <_reclaim_reent+0x40>
    3198:	04c4a583          	lw	a1,76(s1)
    319c:	00490913          	addi	s2,s2,4
    31a0:	fd391ce3          	bne	s2,s3,3178 <_reclaim_reent+0x34>
    31a4:	00048513          	mv	a0,s1
    31a8:	39d000ef          	jal	ra,3d44 <_free_r>
    31ac:	0404a583          	lw	a1,64(s1)
    31b0:	00058663          	beqz	a1,31bc <_reclaim_reent+0x78>
    31b4:	00048513          	mv	a0,s1
    31b8:	38d000ef          	jal	ra,3d44 <_free_r>
    31bc:	1484a403          	lw	s0,328(s1)
    31c0:	02040063          	beqz	s0,31e0 <_reclaim_reent+0x9c>
    31c4:	14c48913          	addi	s2,s1,332
    31c8:	01240c63          	beq	s0,s2,31e0 <_reclaim_reent+0x9c>
    31cc:	00040593          	mv	a1,s0
    31d0:	00042403          	lw	s0,0(s0)
    31d4:	00048513          	mv	a0,s1
    31d8:	36d000ef          	jal	ra,3d44 <_free_r>
    31dc:	fe8918e3          	bne	s2,s0,31cc <_reclaim_reent+0x88>
    31e0:	0544a583          	lw	a1,84(s1)
    31e4:	00058663          	beqz	a1,31f0 <_reclaim_reent+0xac>
    31e8:	00048513          	mv	a0,s1
    31ec:	359000ef          	jal	ra,3d44 <_free_r>
    31f0:	0384a783          	lw	a5,56(s1)
    31f4:	04078663          	beqz	a5,3240 <_reclaim_reent+0xfc>
    31f8:	03c4a783          	lw	a5,60(s1)
    31fc:	00048513          	mv	a0,s1
    3200:	000780e7          	jalr	a5
    3204:	2e04a403          	lw	s0,736(s1)
    3208:	02040c63          	beqz	s0,3240 <_reclaim_reent+0xfc>
    320c:	00042583          	lw	a1,0(s0)
    3210:	00058663          	beqz	a1,321c <_reclaim_reent+0xd8>
    3214:	00048513          	mv	a0,s1
    3218:	e99ff0ef          	jal	ra,30b0 <cleanup_glue>
    321c:	00040593          	mv	a1,s0
    3220:	01812403          	lw	s0,24(sp)
    3224:	01c12083          	lw	ra,28(sp)
    3228:	01012903          	lw	s2,16(sp)
    322c:	00c12983          	lw	s3,12(sp)
    3230:	00048513          	mv	a0,s1
    3234:	01412483          	lw	s1,20(sp)
    3238:	02010113          	addi	sp,sp,32
    323c:	3090006f          	j	3d44 <_free_r>
    3240:	01c12083          	lw	ra,28(sp)
    3244:	01812403          	lw	s0,24(sp)
    3248:	01412483          	lw	s1,20(sp)
    324c:	01012903          	lw	s2,16(sp)
    3250:	00c12983          	lw	s3,12(sp)
    3254:	02010113          	addi	sp,sp,32
    3258:	00008067          	ret
    325c:	00008067          	ret

00003260 <__stack_chk_fail>:
    3260:	00005797          	auipc	a5,0x5
    3264:	cf878793          	addi	a5,a5,-776 # 7f58 <__fini_array_end+0x328>
    3268:	0007af83          	lw	t6,0(a5)
    326c:	0047af03          	lw	t5,4(a5)
    3270:	0087ae83          	lw	t4,8(a5)
    3274:	00c7ae03          	lw	t3,12(a5)
    3278:	0107a303          	lw	t1,16(a5)
    327c:	0147a883          	lw	a7,20(a5)
    3280:	0187a803          	lw	a6,24(a5)
    3284:	0247a683          	lw	a3,36(a5)
    3288:	0287a703          	lw	a4,40(a5)
    328c:	01c7a583          	lw	a1,28(a5)
    3290:	0207a603          	lw	a2,32(a5)
    3294:	02c7c783          	lbu	a5,44(a5)
    3298:	fc010113          	addi	sp,sp,-64
    329c:	00010513          	mv	a0,sp
    32a0:	02112e23          	sw	ra,60(sp)
    32a4:	01f12023          	sw	t6,0(sp)
    32a8:	01e12223          	sw	t5,4(sp)
    32ac:	01d12423          	sw	t4,8(sp)
    32b0:	01c12623          	sw	t3,12(sp)
    32b4:	00612823          	sw	t1,16(sp)
    32b8:	01112a23          	sw	a7,20(sp)
    32bc:	01012c23          	sw	a6,24(sp)
    32c0:	02d12223          	sw	a3,36(sp)
    32c4:	02e12423          	sw	a4,40(sp)
    32c8:	02f10623          	sb	a5,44(sp)
    32cc:	00b12e23          	sw	a1,28(sp)
    32d0:	02c12023          	sw	a2,32(sp)
    32d4:	04c000ef          	jal	ra,3320 <strlen>
    32d8:	00050613          	mv	a2,a0
    32dc:	00010593          	mv	a1,sp
    32e0:	00200513          	li	a0,2
    32e4:	11c000ef          	jal	ra,3400 <write>
    32e8:	00600513          	li	a0,6
    32ec:	0a1020ef          	jal	ra,5b8c <raise>
    32f0:	07f00513          	li	a0,127
    32f4:	245030ef          	jal	ra,6d38 <_exit>

000032f8 <__stack_chk_fail_local>:
    32f8:	ff010113          	addi	sp,sp,-16
    32fc:	00112623          	sw	ra,12(sp)
    3300:	f61ff0ef          	jal	ra,3260 <__stack_chk_fail>

00003304 <__stack_chk_init>:
    3304:	00008797          	auipc	a5,0x8
    3308:	3c078793          	addi	a5,a5,960 # b6c4 <__stack_chk_guard>
    330c:	0007a703          	lw	a4,0(a5)
    3310:	00071663          	bnez	a4,331c <__stack_chk_init+0x18>
    3314:	ff0a0737          	lui	a4,0xff0a0
    3318:	00e7a023          	sw	a4,0(a5)
    331c:	00008067          	ret

00003320 <strlen>:
    3320:	00357793          	andi	a5,a0,3
    3324:	00050713          	mv	a4,a0
    3328:	04079c63          	bnez	a5,3380 <strlen+0x60>
    332c:	7f7f86b7          	lui	a3,0x7f7f8
    3330:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7e7f7f>
    3334:	fff00593          	li	a1,-1
    3338:	00072603          	lw	a2,0(a4) # ff0a0000 <__alt_data_end+0xff090000>
    333c:	00470713          	addi	a4,a4,4
    3340:	00d677b3          	and	a5,a2,a3
    3344:	00d787b3          	add	a5,a5,a3
    3348:	00c7e7b3          	or	a5,a5,a2
    334c:	00d7e7b3          	or	a5,a5,a3
    3350:	feb784e3          	beq	a5,a1,3338 <strlen+0x18>
    3354:	ffc74683          	lbu	a3,-4(a4)
    3358:	40a707b3          	sub	a5,a4,a0
    335c:	04068463          	beqz	a3,33a4 <strlen+0x84>
    3360:	ffd74683          	lbu	a3,-3(a4)
    3364:	02068c63          	beqz	a3,339c <strlen+0x7c>
    3368:	ffe74503          	lbu	a0,-2(a4)
    336c:	00a03533          	snez	a0,a0
    3370:	00f50533          	add	a0,a0,a5
    3374:	ffe50513          	addi	a0,a0,-2
    3378:	00008067          	ret
    337c:	fa0688e3          	beqz	a3,332c <strlen+0xc>
    3380:	00074783          	lbu	a5,0(a4)
    3384:	00170713          	addi	a4,a4,1
    3388:	00377693          	andi	a3,a4,3
    338c:	fe0798e3          	bnez	a5,337c <strlen+0x5c>
    3390:	40a70733          	sub	a4,a4,a0
    3394:	fff70513          	addi	a0,a4,-1
    3398:	00008067          	ret
    339c:	ffd78513          	addi	a0,a5,-3
    33a0:	00008067          	ret
    33a4:	ffc78513          	addi	a0,a5,-4
    33a8:	00008067          	ret

000033ac <close>:
    33ac:	00050593          	mv	a1,a0
    33b0:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    33b4:	3000006f          	j	36b4 <_close_r>

000033b8 <open>:
    33b8:	fc010113          	addi	sp,sp,-64
    33bc:	02c12423          	sw	a2,40(sp)
    33c0:	02d12623          	sw	a3,44(sp)
    33c4:	02f12a23          	sw	a5,52(sp)
    33c8:	00060693          	mv	a3,a2
    33cc:	02810793          	addi	a5,sp,40
    33d0:	00058613          	mv	a2,a1
    33d4:	00050593          	mv	a1,a0
    33d8:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    33dc:	00112e23          	sw	ra,28(sp)
    33e0:	02e12823          	sw	a4,48(sp)
    33e4:	03012c23          	sw	a6,56(sp)
    33e8:	03112e23          	sw	a7,60(sp)
    33ec:	00f12623          	sw	a5,12(sp)
    33f0:	4f5010ef          	jal	ra,50e4 <_open_r>
    33f4:	01c12083          	lw	ra,28(sp)
    33f8:	04010113          	addi	sp,sp,64
    33fc:	00008067          	ret

00003400 <write>:
    3400:	00060693          	mv	a3,a2
    3404:	00058613          	mv	a2,a1
    3408:	00050593          	mv	a1,a0
    340c:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    3410:	0040006f          	j	3414 <_write_r>

00003414 <_write_r>:
    3414:	ff010113          	addi	sp,sp,-16
    3418:	00058713          	mv	a4,a1
    341c:	00812423          	sw	s0,8(sp)
    3420:	00060593          	mv	a1,a2
    3424:	00050413          	mv	s0,a0
    3428:	00068613          	mv	a2,a3
    342c:	00070513          	mv	a0,a4
    3430:	00008797          	auipc	a5,0x8
    3434:	2807a823          	sw	zero,656(a5) # b6c0 <errno>
    3438:	00112623          	sw	ra,12(sp)
    343c:	3a8040ef          	jal	ra,77e4 <_write>
    3440:	fff00793          	li	a5,-1
    3444:	00f50a63          	beq	a0,a5,3458 <_write_r+0x44>
    3448:	00c12083          	lw	ra,12(sp)
    344c:	00812403          	lw	s0,8(sp)
    3450:	01010113          	addi	sp,sp,16
    3454:	00008067          	ret
    3458:	00008797          	auipc	a5,0x8
    345c:	2687a783          	lw	a5,616(a5) # b6c0 <errno>
    3460:	fe0784e3          	beqz	a5,3448 <_write_r+0x34>
    3464:	00c12083          	lw	ra,12(sp)
    3468:	00f42023          	sw	a5,0(s0)
    346c:	00812403          	lw	s0,8(sp)
    3470:	01010113          	addi	sp,sp,16
    3474:	00008067          	ret

00003478 <__register_exitproc>:
    3478:	fe010113          	addi	sp,sp,-32
    347c:	01212823          	sw	s2,16(sp)
    3480:	82818913          	addi	s2,gp,-2008 # 9b58 <__atexit_recursive_mutex>
    3484:	00812c23          	sw	s0,24(sp)
    3488:	00050413          	mv	s0,a0
    348c:	00092503          	lw	a0,0(s2)
    3490:	00912a23          	sw	s1,20(sp)
    3494:	01312623          	sw	s3,12(sp)
    3498:	01412423          	sw	s4,8(sp)
    349c:	00112e23          	sw	ra,28(sp)
    34a0:	00058493          	mv	s1,a1
    34a4:	00060a13          	mv	s4,a2
    34a8:	00068993          	mv	s3,a3
    34ac:	1a8010ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    34b0:	00005717          	auipc	a4,0x5
    34b4:	ba472703          	lw	a4,-1116(a4) # 8054 <_global_impure_ptr>
    34b8:	14872783          	lw	a5,328(a4)
    34bc:	08078663          	beqz	a5,3548 <__register_exitproc+0xd0>
    34c0:	0047a703          	lw	a4,4(a5)
    34c4:	01f00593          	li	a1,31
    34c8:	00092503          	lw	a0,0(s2)
    34cc:	08e5c463          	blt	a1,a4,3554 <__register_exitproc+0xdc>
    34d0:	00271593          	slli	a1,a4,0x2
    34d4:	02041e63          	bnez	s0,3510 <__register_exitproc+0x98>
    34d8:	00170713          	addi	a4,a4,1
    34dc:	00e7a223          	sw	a4,4(a5)
    34e0:	00b787b3          	add	a5,a5,a1
    34e4:	0097a423          	sw	s1,8(a5)
    34e8:	184010ef          	jal	ra,466c <__retarget_lock_release_recursive>
    34ec:	00000513          	li	a0,0
    34f0:	01c12083          	lw	ra,28(sp)
    34f4:	01812403          	lw	s0,24(sp)
    34f8:	01412483          	lw	s1,20(sp)
    34fc:	01012903          	lw	s2,16(sp)
    3500:	00c12983          	lw	s3,12(sp)
    3504:	00812a03          	lw	s4,8(sp)
    3508:	02010113          	addi	sp,sp,32
    350c:	00008067          	ret
    3510:	00b78833          	add	a6,a5,a1
    3514:	09482423          	sw	s4,136(a6)
    3518:	1887a683          	lw	a3,392(a5)
    351c:	00100613          	li	a2,1
    3520:	00e61633          	sll	a2,a2,a4
    3524:	00c6e6b3          	or	a3,a3,a2
    3528:	18d7a423          	sw	a3,392(a5)
    352c:	11382423          	sw	s3,264(a6)
    3530:	00200693          	li	a3,2
    3534:	fad412e3          	bne	s0,a3,34d8 <__register_exitproc+0x60>
    3538:	18c7a683          	lw	a3,396(a5)
    353c:	00c6e6b3          	or	a3,a3,a2
    3540:	18d7a623          	sw	a3,396(a5)
    3544:	f95ff06f          	j	34d8 <__register_exitproc+0x60>
    3548:	14c70793          	addi	a5,a4,332
    354c:	14f72423          	sw	a5,328(a4)
    3550:	f71ff06f          	j	34c0 <__register_exitproc+0x48>
    3554:	118010ef          	jal	ra,466c <__retarget_lock_release_recursive>
    3558:	fff00513          	li	a0,-1
    355c:	f95ff06f          	j	34f0 <__register_exitproc+0x78>

00003560 <__call_exitprocs>:
    3560:	fd010113          	addi	sp,sp,-48
    3564:	01712623          	sw	s7,12(sp)
    3568:	82818b93          	addi	s7,gp,-2008 # 9b58 <__atexit_recursive_mutex>
    356c:	01612823          	sw	s6,16(sp)
    3570:	00050b13          	mv	s6,a0
    3574:	000ba503          	lw	a0,0(s7)
    3578:	03212023          	sw	s2,32(sp)
    357c:	01312e23          	sw	s3,28(sp)
    3580:	01412c23          	sw	s4,24(sp)
    3584:	01512a23          	sw	s5,20(sp)
    3588:	01812423          	sw	s8,8(sp)
    358c:	02112623          	sw	ra,44(sp)
    3590:	02812423          	sw	s0,40(sp)
    3594:	02912223          	sw	s1,36(sp)
    3598:	01912223          	sw	s9,4(sp)
    359c:	00058c13          	mv	s8,a1
    35a0:	0b4010ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    35a4:	00005a17          	auipc	s4,0x5
    35a8:	ab0a2a03          	lw	s4,-1360(s4) # 8054 <_global_impure_ptr>
    35ac:	148a2903          	lw	s2,328(s4)
    35b0:	00100a93          	li	s5,1
    35b4:	fff00993          	li	s3,-1
    35b8:	02090863          	beqz	s2,35e8 <__call_exitprocs+0x88>
    35bc:	00492483          	lw	s1,4(s2)
    35c0:	fff48413          	addi	s0,s1,-1
    35c4:	02044263          	bltz	s0,35e8 <__call_exitprocs+0x88>
    35c8:	00249493          	slli	s1,s1,0x2
    35cc:	009904b3          	add	s1,s2,s1
    35d0:	040c0863          	beqz	s8,3620 <__call_exitprocs+0xc0>
    35d4:	1044a783          	lw	a5,260(s1)
    35d8:	05878463          	beq	a5,s8,3620 <__call_exitprocs+0xc0>
    35dc:	fff40413          	addi	s0,s0,-1
    35e0:	ffc48493          	addi	s1,s1,-4
    35e4:	ff3416e3          	bne	s0,s3,35d0 <__call_exitprocs+0x70>
    35e8:	02812403          	lw	s0,40(sp)
    35ec:	000ba503          	lw	a0,0(s7)
    35f0:	02c12083          	lw	ra,44(sp)
    35f4:	02412483          	lw	s1,36(sp)
    35f8:	02012903          	lw	s2,32(sp)
    35fc:	01c12983          	lw	s3,28(sp)
    3600:	01812a03          	lw	s4,24(sp)
    3604:	01412a83          	lw	s5,20(sp)
    3608:	01012b03          	lw	s6,16(sp)
    360c:	00c12b83          	lw	s7,12(sp)
    3610:	00812c03          	lw	s8,8(sp)
    3614:	00412c83          	lw	s9,4(sp)
    3618:	03010113          	addi	sp,sp,48
    361c:	0500106f          	j	466c <__retarget_lock_release_recursive>
    3620:	00492783          	lw	a5,4(s2)
    3624:	0044a683          	lw	a3,4(s1)
    3628:	fff78793          	addi	a5,a5,-1
    362c:	04878e63          	beq	a5,s0,3688 <__call_exitprocs+0x128>
    3630:	0004a223          	sw	zero,4(s1)
    3634:	fa0684e3          	beqz	a3,35dc <__call_exitprocs+0x7c>
    3638:	18892783          	lw	a5,392(s2)
    363c:	008a9733          	sll	a4,s5,s0
    3640:	00492c83          	lw	s9,4(s2)
    3644:	00f777b3          	and	a5,a4,a5
    3648:	02079263          	bnez	a5,366c <__call_exitprocs+0x10c>
    364c:	000680e7          	jalr	a3
    3650:	00492703          	lw	a4,4(s2)
    3654:	148a2783          	lw	a5,328(s4)
    3658:	01971463          	bne	a4,s9,3660 <__call_exitprocs+0x100>
    365c:	f92780e3          	beq	a5,s2,35dc <__call_exitprocs+0x7c>
    3660:	f80784e3          	beqz	a5,35e8 <__call_exitprocs+0x88>
    3664:	00078913          	mv	s2,a5
    3668:	f55ff06f          	j	35bc <__call_exitprocs+0x5c>
    366c:	18c92783          	lw	a5,396(s2)
    3670:	0844a583          	lw	a1,132(s1)
    3674:	00f77733          	and	a4,a4,a5
    3678:	00071c63          	bnez	a4,3690 <__call_exitprocs+0x130>
    367c:	000b0513          	mv	a0,s6
    3680:	000680e7          	jalr	a3
    3684:	fcdff06f          	j	3650 <__call_exitprocs+0xf0>
    3688:	00892223          	sw	s0,4(s2)
    368c:	fa9ff06f          	j	3634 <__call_exitprocs+0xd4>
    3690:	00058513          	mv	a0,a1
    3694:	000680e7          	jalr	a3
    3698:	fb9ff06f          	j	3650 <__call_exitprocs+0xf0>

0000369c <register_fini>:
    369c:	00000793          	li	a5,0
    36a0:	00078863          	beqz	a5,36b0 <register_fini+0x14>
    36a4:	00000517          	auipc	a0,0x0
    36a8:	50850513          	addi	a0,a0,1288 # 3bac <__libc_fini_array>
    36ac:	ec4ff06f          	j	2d70 <atexit>
    36b0:	00008067          	ret

000036b4 <_close_r>:
    36b4:	ff010113          	addi	sp,sp,-16
    36b8:	00812423          	sw	s0,8(sp)
    36bc:	00050413          	mv	s0,a0
    36c0:	00058513          	mv	a0,a1
    36c4:	00008797          	auipc	a5,0x8
    36c8:	fe07ae23          	sw	zero,-4(a5) # b6c0 <errno>
    36cc:	00112623          	sw	ra,12(sp)
    36d0:	588030ef          	jal	ra,6c58 <_close>
    36d4:	fff00793          	li	a5,-1
    36d8:	00f50a63          	beq	a0,a5,36ec <_close_r+0x38>
    36dc:	00c12083          	lw	ra,12(sp)
    36e0:	00812403          	lw	s0,8(sp)
    36e4:	01010113          	addi	sp,sp,16
    36e8:	00008067          	ret
    36ec:	00008797          	auipc	a5,0x8
    36f0:	fd47a783          	lw	a5,-44(a5) # b6c0 <errno>
    36f4:	fe0784e3          	beqz	a5,36dc <_close_r+0x28>
    36f8:	00c12083          	lw	ra,12(sp)
    36fc:	00f42023          	sw	a5,0(s0)
    3700:	00812403          	lw	s0,8(sp)
    3704:	01010113          	addi	sp,sp,16
    3708:	00008067          	ret

0000370c <_cleanup_r>:
    370c:	00003597          	auipc	a1,0x3
    3710:	ba058593          	addi	a1,a1,-1120 # 62ac <_fclose_r>
    3714:	6790006f          	j	458c <_fwalk_reent>

00003718 <__fp_lock>:
    3718:	06452783          	lw	a5,100(a0)
    371c:	0017f793          	andi	a5,a5,1
    3720:	00079863          	bnez	a5,3730 <__fp_lock+0x18>
    3724:	00c55783          	lhu	a5,12(a0)
    3728:	2007f793          	andi	a5,a5,512
    372c:	00078663          	beqz	a5,3738 <__fp_lock+0x20>
    3730:	00000513          	li	a0,0
    3734:	00008067          	ret
    3738:	05852503          	lw	a0,88(a0)
    373c:	ff010113          	addi	sp,sp,-16
    3740:	00112623          	sw	ra,12(sp)
    3744:	711000ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    3748:	00c12083          	lw	ra,12(sp)
    374c:	00000513          	li	a0,0
    3750:	01010113          	addi	sp,sp,16
    3754:	00008067          	ret

00003758 <__fp_unlock>:
    3758:	06452783          	lw	a5,100(a0)
    375c:	0017f793          	andi	a5,a5,1
    3760:	00079863          	bnez	a5,3770 <__fp_unlock+0x18>
    3764:	00c55783          	lhu	a5,12(a0)
    3768:	2007f793          	andi	a5,a5,512
    376c:	00078663          	beqz	a5,3778 <__fp_unlock+0x20>
    3770:	00000513          	li	a0,0
    3774:	00008067          	ret
    3778:	05852503          	lw	a0,88(a0)
    377c:	ff010113          	addi	sp,sp,-16
    3780:	00112623          	sw	ra,12(sp)
    3784:	6e9000ef          	jal	ra,466c <__retarget_lock_release_recursive>
    3788:	00c12083          	lw	ra,12(sp)
    378c:	00000513          	li	a0,0
    3790:	01010113          	addi	sp,sp,16
    3794:	00008067          	ret

00003798 <__sfmoreglue>:
    3798:	ff010113          	addi	sp,sp,-16
    379c:	00912223          	sw	s1,4(sp)
    37a0:	06800793          	li	a5,104
    37a4:	fff58493          	addi	s1,a1,-1
    37a8:	02f484b3          	mul	s1,s1,a5
    37ac:	01212023          	sw	s2,0(sp)
    37b0:	00058913          	mv	s2,a1
    37b4:	00812423          	sw	s0,8(sp)
    37b8:	00112623          	sw	ra,12(sp)
    37bc:	07448593          	addi	a1,s1,116
    37c0:	6b1000ef          	jal	ra,4670 <_malloc_r>
    37c4:	00050413          	mv	s0,a0
    37c8:	02050063          	beqz	a0,37e8 <__sfmoreglue+0x50>
    37cc:	00c50513          	addi	a0,a0,12
    37d0:	00042023          	sw	zero,0(s0)
    37d4:	01242223          	sw	s2,4(s0)
    37d8:	00a42423          	sw	a0,8(s0)
    37dc:	06848613          	addi	a2,s1,104
    37e0:	00000593          	li	a1,0
    37e4:	00d010ef          	jal	ra,4ff0 <memset>
    37e8:	00c12083          	lw	ra,12(sp)
    37ec:	00040513          	mv	a0,s0
    37f0:	00812403          	lw	s0,8(sp)
    37f4:	00412483          	lw	s1,4(sp)
    37f8:	00012903          	lw	s2,0(sp)
    37fc:	01010113          	addi	sp,sp,16
    3800:	00008067          	ret

00003804 <_cleanup>:
    3804:	00003597          	auipc	a1,0x3
    3808:	aa858593          	addi	a1,a1,-1368 # 62ac <_fclose_r>
    380c:	00005517          	auipc	a0,0x5
    3810:	84852503          	lw	a0,-1976(a0) # 8054 <_global_impure_ptr>
    3814:	5790006f          	j	458c <_fwalk_reent>

00003818 <__sinit>:
    3818:	fe010113          	addi	sp,sp,-32
    381c:	00912a23          	sw	s1,20(sp)
    3820:	00050493          	mv	s1,a0
    3824:	00008517          	auipc	a0,0x8
    3828:	ec450513          	addi	a0,a0,-316 # b6e8 <__lock___sinit_recursive_mutex>
    382c:	00112e23          	sw	ra,28(sp)
    3830:	00812c23          	sw	s0,24(sp)
    3834:	01212823          	sw	s2,16(sp)
    3838:	01312623          	sw	s3,12(sp)
    383c:	01412423          	sw	s4,8(sp)
    3840:	01512223          	sw	s5,4(sp)
    3844:	611000ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    3848:	0384a783          	lw	a5,56(s1)
    384c:	14079863          	bnez	a5,399c <__sinit+0x184>
    3850:	0044a403          	lw	s0,4(s1)
    3854:	00000717          	auipc	a4,0x0
    3858:	eb870713          	addi	a4,a4,-328 # 370c <_cleanup_r>
    385c:	02e4ae23          	sw	a4,60(s1)
    3860:	2ec48793          	addi	a5,s1,748
    3864:	00300713          	li	a4,3
    3868:	2ee4a223          	sw	a4,740(s1)
    386c:	2ef4a423          	sw	a5,744(s1)
    3870:	2e04a023          	sw	zero,736(s1)
    3874:	00400793          	li	a5,4
    3878:	00f42623          	sw	a5,12(s0)
    387c:	00800613          	li	a2,8
    3880:	00000593          	li	a1,0
    3884:	00042023          	sw	zero,0(s0)
    3888:	00042223          	sw	zero,4(s0)
    388c:	00042423          	sw	zero,8(s0)
    3890:	06042223          	sw	zero,100(s0)
    3894:	00042823          	sw	zero,16(s0)
    3898:	00042a23          	sw	zero,20(s0)
    389c:	00042c23          	sw	zero,24(s0)
    38a0:	05c40513          	addi	a0,s0,92
    38a4:	74c010ef          	jal	ra,4ff0 <memset>
    38a8:	00002a97          	auipc	s5,0x2
    38ac:	5d4a8a93          	addi	s5,s5,1492 # 5e7c <__sread>
    38b0:	00002a17          	auipc	s4,0x2
    38b4:	630a0a13          	addi	s4,s4,1584 # 5ee0 <__swrite>
    38b8:	00002997          	auipc	s3,0x2
    38bc:	6b098993          	addi	s3,s3,1712 # 5f68 <__sseek>
    38c0:	00002917          	auipc	s2,0x2
    38c4:	72090913          	addi	s2,s2,1824 # 5fe0 <__sclose>
    38c8:	05840513          	addi	a0,s0,88
    38cc:	00842e23          	sw	s0,28(s0)
    38d0:	03542023          	sw	s5,32(s0)
    38d4:	03442223          	sw	s4,36(s0)
    38d8:	03342423          	sw	s3,40(s0)
    38dc:	03242623          	sw	s2,44(s0)
    38e0:	565000ef          	jal	ra,4644 <__retarget_lock_init_recursive>
    38e4:	0084a403          	lw	s0,8(s1)
    38e8:	000107b7          	lui	a5,0x10
    38ec:	00878793          	addi	a5,a5,8 # 10008 <__alt_data_end+0x8>
    38f0:	00f42623          	sw	a5,12(s0)
    38f4:	00800613          	li	a2,8
    38f8:	00000593          	li	a1,0
    38fc:	00042023          	sw	zero,0(s0)
    3900:	00042223          	sw	zero,4(s0)
    3904:	00042423          	sw	zero,8(s0)
    3908:	06042223          	sw	zero,100(s0)
    390c:	00042823          	sw	zero,16(s0)
    3910:	00042a23          	sw	zero,20(s0)
    3914:	00042c23          	sw	zero,24(s0)
    3918:	05c40513          	addi	a0,s0,92
    391c:	6d4010ef          	jal	ra,4ff0 <memset>
    3920:	05840513          	addi	a0,s0,88
    3924:	00842e23          	sw	s0,28(s0)
    3928:	03542023          	sw	s5,32(s0)
    392c:	03442223          	sw	s4,36(s0)
    3930:	03342423          	sw	s3,40(s0)
    3934:	03242623          	sw	s2,44(s0)
    3938:	50d000ef          	jal	ra,4644 <__retarget_lock_init_recursive>
    393c:	00c4a403          	lw	s0,12(s1)
    3940:	000207b7          	lui	a5,0x20
    3944:	01278793          	addi	a5,a5,18 # 20012 <__alt_data_end+0x10012>
    3948:	00f42623          	sw	a5,12(s0)
    394c:	00800613          	li	a2,8
    3950:	00000593          	li	a1,0
    3954:	00042023          	sw	zero,0(s0)
    3958:	00042223          	sw	zero,4(s0)
    395c:	00042423          	sw	zero,8(s0)
    3960:	06042223          	sw	zero,100(s0)
    3964:	00042823          	sw	zero,16(s0)
    3968:	00042a23          	sw	zero,20(s0)
    396c:	00042c23          	sw	zero,24(s0)
    3970:	05c40513          	addi	a0,s0,92
    3974:	67c010ef          	jal	ra,4ff0 <memset>
    3978:	05840513          	addi	a0,s0,88
    397c:	00842e23          	sw	s0,28(s0)
    3980:	03542023          	sw	s5,32(s0)
    3984:	03442223          	sw	s4,36(s0)
    3988:	03342423          	sw	s3,40(s0)
    398c:	03242623          	sw	s2,44(s0)
    3990:	4b5000ef          	jal	ra,4644 <__retarget_lock_init_recursive>
    3994:	00100793          	li	a5,1
    3998:	02f4ac23          	sw	a5,56(s1)
    399c:	01812403          	lw	s0,24(sp)
    39a0:	01c12083          	lw	ra,28(sp)
    39a4:	01412483          	lw	s1,20(sp)
    39a8:	01012903          	lw	s2,16(sp)
    39ac:	00c12983          	lw	s3,12(sp)
    39b0:	00812a03          	lw	s4,8(sp)
    39b4:	00412a83          	lw	s5,4(sp)
    39b8:	00008517          	auipc	a0,0x8
    39bc:	d3050513          	addi	a0,a0,-720 # b6e8 <__lock___sinit_recursive_mutex>
    39c0:	02010113          	addi	sp,sp,32
    39c4:	4a90006f          	j	466c <__retarget_lock_release_recursive>

000039c8 <__sfp>:
    39c8:	fe010113          	addi	sp,sp,-32
    39cc:	01312623          	sw	s3,12(sp)
    39d0:	00050993          	mv	s3,a0
    39d4:	00008517          	auipc	a0,0x8
    39d8:	d1050513          	addi	a0,a0,-752 # b6e4 <__lock___sfp_recursive_mutex>
    39dc:	01212823          	sw	s2,16(sp)
    39e0:	00112e23          	sw	ra,28(sp)
    39e4:	00812c23          	sw	s0,24(sp)
    39e8:	00912a23          	sw	s1,20(sp)
    39ec:	469000ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    39f0:	00004917          	auipc	s2,0x4
    39f4:	66492903          	lw	s2,1636(s2) # 8054 <_global_impure_ptr>
    39f8:	03892783          	lw	a5,56(s2)
    39fc:	0c078063          	beqz	a5,3abc <__sfp+0xf4>
    3a00:	2e090913          	addi	s2,s2,736
    3a04:	fff00493          	li	s1,-1
    3a08:	00492783          	lw	a5,4(s2)
    3a0c:	00892403          	lw	s0,8(s2)
    3a10:	fff78793          	addi	a5,a5,-1
    3a14:	0007d863          	bgez	a5,3a24 <__sfp+0x5c>
    3a18:	0940006f          	j	3aac <__sfp+0xe4>
    3a1c:	06840413          	addi	s0,s0,104
    3a20:	08978663          	beq	a5,s1,3aac <__sfp+0xe4>
    3a24:	00c41703          	lh	a4,12(s0)
    3a28:	fff78793          	addi	a5,a5,-1
    3a2c:	fe0718e3          	bnez	a4,3a1c <__sfp+0x54>
    3a30:	ffff07b7          	lui	a5,0xffff0
    3a34:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfffe0001>
    3a38:	00f42623          	sw	a5,12(s0)
    3a3c:	05840513          	addi	a0,s0,88
    3a40:	06042223          	sw	zero,100(s0)
    3a44:	401000ef          	jal	ra,4644 <__retarget_lock_init_recursive>
    3a48:	00008517          	auipc	a0,0x8
    3a4c:	c9c50513          	addi	a0,a0,-868 # b6e4 <__lock___sfp_recursive_mutex>
    3a50:	41d000ef          	jal	ra,466c <__retarget_lock_release_recursive>
    3a54:	00800613          	li	a2,8
    3a58:	00042023          	sw	zero,0(s0)
    3a5c:	00042423          	sw	zero,8(s0)
    3a60:	00042223          	sw	zero,4(s0)
    3a64:	00042823          	sw	zero,16(s0)
    3a68:	00042a23          	sw	zero,20(s0)
    3a6c:	00042c23          	sw	zero,24(s0)
    3a70:	00000593          	li	a1,0
    3a74:	05c40513          	addi	a0,s0,92
    3a78:	578010ef          	jal	ra,4ff0 <memset>
    3a7c:	02042823          	sw	zero,48(s0)
    3a80:	02042a23          	sw	zero,52(s0)
    3a84:	04042223          	sw	zero,68(s0)
    3a88:	04042423          	sw	zero,72(s0)
    3a8c:	01c12083          	lw	ra,28(sp)
    3a90:	00040513          	mv	a0,s0
    3a94:	01812403          	lw	s0,24(sp)
    3a98:	01412483          	lw	s1,20(sp)
    3a9c:	01012903          	lw	s2,16(sp)
    3aa0:	00c12983          	lw	s3,12(sp)
    3aa4:	02010113          	addi	sp,sp,32
    3aa8:	00008067          	ret
    3aac:	00092403          	lw	s0,0(s2)
    3ab0:	00040c63          	beqz	s0,3ac8 <__sfp+0x100>
    3ab4:	00040913          	mv	s2,s0
    3ab8:	f51ff06f          	j	3a08 <__sfp+0x40>
    3abc:	00090513          	mv	a0,s2
    3ac0:	d59ff0ef          	jal	ra,3818 <__sinit>
    3ac4:	f3dff06f          	j	3a00 <__sfp+0x38>
    3ac8:	1ac00593          	li	a1,428
    3acc:	00098513          	mv	a0,s3
    3ad0:	3a1000ef          	jal	ra,4670 <_malloc_r>
    3ad4:	00050413          	mv	s0,a0
    3ad8:	02050863          	beqz	a0,3b08 <__sfp+0x140>
    3adc:	00c50513          	addi	a0,a0,12
    3ae0:	00400793          	li	a5,4
    3ae4:	00042023          	sw	zero,0(s0)
    3ae8:	00f42223          	sw	a5,4(s0)
    3aec:	00a42423          	sw	a0,8(s0)
    3af0:	1a000613          	li	a2,416
    3af4:	00000593          	li	a1,0
    3af8:	4f8010ef          	jal	ra,4ff0 <memset>
    3afc:	00892023          	sw	s0,0(s2)
    3b00:	00040913          	mv	s2,s0
    3b04:	f05ff06f          	j	3a08 <__sfp+0x40>
    3b08:	00092023          	sw	zero,0(s2)
    3b0c:	00008517          	auipc	a0,0x8
    3b10:	bd850513          	addi	a0,a0,-1064 # b6e4 <__lock___sfp_recursive_mutex>
    3b14:	359000ef          	jal	ra,466c <__retarget_lock_release_recursive>
    3b18:	00c00793          	li	a5,12
    3b1c:	00f9a023          	sw	a5,0(s3)
    3b20:	f6dff06f          	j	3a8c <__sfp+0xc4>

00003b24 <__sfp_lock_acquire>:
    3b24:	00008517          	auipc	a0,0x8
    3b28:	bc050513          	addi	a0,a0,-1088 # b6e4 <__lock___sfp_recursive_mutex>
    3b2c:	3290006f          	j	4654 <__retarget_lock_acquire_recursive>

00003b30 <__sfp_lock_release>:
    3b30:	00008517          	auipc	a0,0x8
    3b34:	bb450513          	addi	a0,a0,-1100 # b6e4 <__lock___sfp_recursive_mutex>
    3b38:	3350006f          	j	466c <__retarget_lock_release_recursive>

00003b3c <__sinit_lock_acquire>:
    3b3c:	00008517          	auipc	a0,0x8
    3b40:	bac50513          	addi	a0,a0,-1108 # b6e8 <__lock___sinit_recursive_mutex>
    3b44:	3110006f          	j	4654 <__retarget_lock_acquire_recursive>

00003b48 <__sinit_lock_release>:
    3b48:	00008517          	auipc	a0,0x8
    3b4c:	ba050513          	addi	a0,a0,-1120 # b6e8 <__lock___sinit_recursive_mutex>
    3b50:	31d0006f          	j	466c <__retarget_lock_release_recursive>

00003b54 <__fp_lock_all>:
    3b54:	ff010113          	addi	sp,sp,-16
    3b58:	00008517          	auipc	a0,0x8
    3b5c:	b8c50513          	addi	a0,a0,-1140 # b6e4 <__lock___sfp_recursive_mutex>
    3b60:	00112623          	sw	ra,12(sp)
    3b64:	2f1000ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    3b68:	00c12083          	lw	ra,12(sp)
    3b6c:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    3b70:	00000597          	auipc	a1,0x0
    3b74:	ba858593          	addi	a1,a1,-1112 # 3718 <__fp_lock>
    3b78:	01010113          	addi	sp,sp,16
    3b7c:	16d0006f          	j	44e8 <_fwalk>

00003b80 <__fp_unlock_all>:
    3b80:	ff010113          	addi	sp,sp,-16
    3b84:	00000597          	auipc	a1,0x0
    3b88:	bd458593          	addi	a1,a1,-1068 # 3758 <__fp_unlock>
    3b8c:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    3b90:	00112623          	sw	ra,12(sp)
    3b94:	155000ef          	jal	ra,44e8 <_fwalk>
    3b98:	00c12083          	lw	ra,12(sp)
    3b9c:	00008517          	auipc	a0,0x8
    3ba0:	b4850513          	addi	a0,a0,-1208 # b6e4 <__lock___sfp_recursive_mutex>
    3ba4:	01010113          	addi	sp,sp,16
    3ba8:	2c50006f          	j	466c <__retarget_lock_release_recursive>

00003bac <__libc_fini_array>:
    3bac:	ff010113          	addi	sp,sp,-16
    3bb0:	00812423          	sw	s0,8(sp)
    3bb4:	00004797          	auipc	a5,0x4
    3bb8:	07c78793          	addi	a5,a5,124 # 7c30 <__fini_array_end>
    3bbc:	00004417          	auipc	s0,0x4
    3bc0:	07440413          	addi	s0,s0,116 # 7c30 <__fini_array_end>
    3bc4:	40f40433          	sub	s0,s0,a5
    3bc8:	00912223          	sw	s1,4(sp)
    3bcc:	00112623          	sw	ra,12(sp)
    3bd0:	40245493          	srai	s1,s0,0x2
    3bd4:	02048063          	beqz	s1,3bf4 <__libc_fini_array+0x48>
    3bd8:	ffc40413          	addi	s0,s0,-4
    3bdc:	00f40433          	add	s0,s0,a5
    3be0:	00042783          	lw	a5,0(s0)
    3be4:	fff48493          	addi	s1,s1,-1
    3be8:	ffc40413          	addi	s0,s0,-4
    3bec:	000780e7          	jalr	a5
    3bf0:	fe0498e3          	bnez	s1,3be0 <__libc_fini_array+0x34>
    3bf4:	00c12083          	lw	ra,12(sp)
    3bf8:	00812403          	lw	s0,8(sp)
    3bfc:	00412483          	lw	s1,4(sp)
    3c00:	01010113          	addi	sp,sp,16
    3c04:	00008067          	ret

00003c08 <_malloc_trim_r>:
    3c08:	fe010113          	addi	sp,sp,-32
    3c0c:	00812c23          	sw	s0,24(sp)
    3c10:	00912a23          	sw	s1,20(sp)
    3c14:	01212823          	sw	s2,16(sp)
    3c18:	01312623          	sw	s3,12(sp)
    3c1c:	01412423          	sw	s4,8(sp)
    3c20:	00058993          	mv	s3,a1
    3c24:	00112e23          	sw	ra,28(sp)
    3c28:	00006a17          	auipc	s4,0x6
    3c2c:	b00a0a13          	addi	s4,s4,-1280 # 9728 <__malloc_av_>
    3c30:	00050913          	mv	s2,a0
    3c34:	498010ef          	jal	ra,50cc <__malloc_lock>
    3c38:	008a2703          	lw	a4,8(s4)
    3c3c:	000017b7          	lui	a5,0x1
    3c40:	fef78413          	addi	s0,a5,-17 # fef <alt_main+0x63>
    3c44:	00472483          	lw	s1,4(a4)
    3c48:	ffc4f493          	andi	s1,s1,-4
    3c4c:	00848433          	add	s0,s1,s0
    3c50:	41340433          	sub	s0,s0,s3
    3c54:	00c45413          	srli	s0,s0,0xc
    3c58:	fff40413          	addi	s0,s0,-1
    3c5c:	00c41413          	slli	s0,s0,0xc
    3c60:	00f44e63          	blt	s0,a5,3c7c <_malloc_trim_r+0x74>
    3c64:	00000593          	li	a1,0
    3c68:	00090513          	mv	a0,s2
    3c6c:	439010ef          	jal	ra,58a4 <_sbrk_r>
    3c70:	008a2783          	lw	a5,8(s4)
    3c74:	009787b3          	add	a5,a5,s1
    3c78:	02f50863          	beq	a0,a5,3ca8 <_malloc_trim_r+0xa0>
    3c7c:	00090513          	mv	a0,s2
    3c80:	458010ef          	jal	ra,50d8 <__malloc_unlock>
    3c84:	01c12083          	lw	ra,28(sp)
    3c88:	01812403          	lw	s0,24(sp)
    3c8c:	01412483          	lw	s1,20(sp)
    3c90:	01012903          	lw	s2,16(sp)
    3c94:	00c12983          	lw	s3,12(sp)
    3c98:	00812a03          	lw	s4,8(sp)
    3c9c:	00000513          	li	a0,0
    3ca0:	02010113          	addi	sp,sp,32
    3ca4:	00008067          	ret
    3ca8:	408005b3          	neg	a1,s0
    3cac:	00090513          	mv	a0,s2
    3cb0:	3f5010ef          	jal	ra,58a4 <_sbrk_r>
    3cb4:	fff00793          	li	a5,-1
    3cb8:	04f50a63          	beq	a0,a5,3d0c <_malloc_trim_r+0x104>
    3cbc:	00008717          	auipc	a4,0x8
    3cc0:	aec70713          	addi	a4,a4,-1300 # b7a8 <__malloc_current_mallinfo>
    3cc4:	00072783          	lw	a5,0(a4)
    3cc8:	008a2683          	lw	a3,8(s4)
    3ccc:	408484b3          	sub	s1,s1,s0
    3cd0:	0014e493          	ori	s1,s1,1
    3cd4:	408787b3          	sub	a5,a5,s0
    3cd8:	00090513          	mv	a0,s2
    3cdc:	0096a223          	sw	s1,4(a3)
    3ce0:	00f72023          	sw	a5,0(a4)
    3ce4:	3f4010ef          	jal	ra,50d8 <__malloc_unlock>
    3ce8:	01c12083          	lw	ra,28(sp)
    3cec:	01812403          	lw	s0,24(sp)
    3cf0:	01412483          	lw	s1,20(sp)
    3cf4:	01012903          	lw	s2,16(sp)
    3cf8:	00c12983          	lw	s3,12(sp)
    3cfc:	00812a03          	lw	s4,8(sp)
    3d00:	00100513          	li	a0,1
    3d04:	02010113          	addi	sp,sp,32
    3d08:	00008067          	ret
    3d0c:	00000593          	li	a1,0
    3d10:	00090513          	mv	a0,s2
    3d14:	391010ef          	jal	ra,58a4 <_sbrk_r>
    3d18:	008a2703          	lw	a4,8(s4)
    3d1c:	00f00693          	li	a3,15
    3d20:	40e507b3          	sub	a5,a0,a4
    3d24:	f4f6dce3          	bge	a3,a5,3c7c <_malloc_trim_r+0x74>
    3d28:	82c1a683          	lw	a3,-2004(gp) # 9b5c <__malloc_sbrk_base>
    3d2c:	40d50533          	sub	a0,a0,a3
    3d30:	0017e793          	ori	a5,a5,1
    3d34:	00008697          	auipc	a3,0x8
    3d38:	a6a6aa23          	sw	a0,-1420(a3) # b7a8 <__malloc_current_mallinfo>
    3d3c:	00f72223          	sw	a5,4(a4)
    3d40:	f3dff06f          	j	3c7c <_malloc_trim_r+0x74>

00003d44 <_free_r>:
    3d44:	18058263          	beqz	a1,3ec8 <_free_r+0x184>
    3d48:	ff010113          	addi	sp,sp,-16
    3d4c:	00812423          	sw	s0,8(sp)
    3d50:	00912223          	sw	s1,4(sp)
    3d54:	00058413          	mv	s0,a1
    3d58:	00050493          	mv	s1,a0
    3d5c:	00112623          	sw	ra,12(sp)
    3d60:	36c010ef          	jal	ra,50cc <__malloc_lock>
    3d64:	ffc42583          	lw	a1,-4(s0)
    3d68:	ff840713          	addi	a4,s0,-8
    3d6c:	00006517          	auipc	a0,0x6
    3d70:	9bc50513          	addi	a0,a0,-1604 # 9728 <__malloc_av_>
    3d74:	ffe5f793          	andi	a5,a1,-2
    3d78:	00f70633          	add	a2,a4,a5
    3d7c:	00462683          	lw	a3,4(a2)
    3d80:	00852803          	lw	a6,8(a0)
    3d84:	ffc6f693          	andi	a3,a3,-4
    3d88:	1ac80263          	beq	a6,a2,3f2c <_free_r+0x1e8>
    3d8c:	00d62223          	sw	a3,4(a2)
    3d90:	0015f593          	andi	a1,a1,1
    3d94:	00d60833          	add	a6,a2,a3
    3d98:	0a059063          	bnez	a1,3e38 <_free_r+0xf4>
    3d9c:	ff842303          	lw	t1,-8(s0)
    3da0:	00482583          	lw	a1,4(a6)
    3da4:	00006897          	auipc	a7,0x6
    3da8:	98c88893          	addi	a7,a7,-1652 # 9730 <__malloc_av_+0x8>
    3dac:	40670733          	sub	a4,a4,t1
    3db0:	00872803          	lw	a6,8(a4)
    3db4:	006787b3          	add	a5,a5,t1
    3db8:	0015f593          	andi	a1,a1,1
    3dbc:	15180263          	beq	a6,a7,3f00 <_free_r+0x1bc>
    3dc0:	00c72303          	lw	t1,12(a4)
    3dc4:	00682623          	sw	t1,12(a6)
    3dc8:	01032423          	sw	a6,8(t1)
    3dcc:	1a058863          	beqz	a1,3f7c <_free_r+0x238>
    3dd0:	0017e693          	ori	a3,a5,1
    3dd4:	00d72223          	sw	a3,4(a4)
    3dd8:	00f62023          	sw	a5,0(a2)
    3ddc:	1ff00693          	li	a3,511
    3de0:	06f6ec63          	bltu	a3,a5,3e58 <_free_r+0x114>
    3de4:	ff87f693          	andi	a3,a5,-8
    3de8:	00868693          	addi	a3,a3,8
    3dec:	00452583          	lw	a1,4(a0)
    3df0:	00d506b3          	add	a3,a0,a3
    3df4:	0006a603          	lw	a2,0(a3)
    3df8:	0057d813          	srli	a6,a5,0x5
    3dfc:	00100793          	li	a5,1
    3e00:	010797b3          	sll	a5,a5,a6
    3e04:	00b7e7b3          	or	a5,a5,a1
    3e08:	ff868593          	addi	a1,a3,-8
    3e0c:	00b72623          	sw	a1,12(a4)
    3e10:	00c72423          	sw	a2,8(a4)
    3e14:	00f52223          	sw	a5,4(a0)
    3e18:	00e6a023          	sw	a4,0(a3)
    3e1c:	00e62623          	sw	a4,12(a2)
    3e20:	00812403          	lw	s0,8(sp)
    3e24:	00c12083          	lw	ra,12(sp)
    3e28:	00048513          	mv	a0,s1
    3e2c:	00412483          	lw	s1,4(sp)
    3e30:	01010113          	addi	sp,sp,16
    3e34:	2a40106f          	j	50d8 <__malloc_unlock>
    3e38:	00482583          	lw	a1,4(a6)
    3e3c:	0015f593          	andi	a1,a1,1
    3e40:	08058663          	beqz	a1,3ecc <_free_r+0x188>
    3e44:	0017e693          	ori	a3,a5,1
    3e48:	fed42e23          	sw	a3,-4(s0)
    3e4c:	00f62023          	sw	a5,0(a2)
    3e50:	1ff00693          	li	a3,511
    3e54:	f8f6f8e3          	bgeu	a3,a5,3de4 <_free_r+0xa0>
    3e58:	0097d693          	srli	a3,a5,0x9
    3e5c:	00400613          	li	a2,4
    3e60:	12d66263          	bltu	a2,a3,3f84 <_free_r+0x240>
    3e64:	0067d693          	srli	a3,a5,0x6
    3e68:	03968593          	addi	a1,a3,57
    3e6c:	03868613          	addi	a2,a3,56
    3e70:	00359593          	slli	a1,a1,0x3
    3e74:	00b505b3          	add	a1,a0,a1
    3e78:	0005a683          	lw	a3,0(a1)
    3e7c:	ff858593          	addi	a1,a1,-8
    3e80:	00d59863          	bne	a1,a3,3e90 <_free_r+0x14c>
    3e84:	1580006f          	j	3fdc <_free_r+0x298>
    3e88:	0086a683          	lw	a3,8(a3)
    3e8c:	00d58863          	beq	a1,a3,3e9c <_free_r+0x158>
    3e90:	0046a603          	lw	a2,4(a3)
    3e94:	ffc67613          	andi	a2,a2,-4
    3e98:	fec7e8e3          	bltu	a5,a2,3e88 <_free_r+0x144>
    3e9c:	00c6a583          	lw	a1,12(a3)
    3ea0:	00b72623          	sw	a1,12(a4)
    3ea4:	00d72423          	sw	a3,8(a4)
    3ea8:	00812403          	lw	s0,8(sp)
    3eac:	00c12083          	lw	ra,12(sp)
    3eb0:	00e5a423          	sw	a4,8(a1)
    3eb4:	00048513          	mv	a0,s1
    3eb8:	00412483          	lw	s1,4(sp)
    3ebc:	00e6a623          	sw	a4,12(a3)
    3ec0:	01010113          	addi	sp,sp,16
    3ec4:	2140106f          	j	50d8 <__malloc_unlock>
    3ec8:	00008067          	ret
    3ecc:	00d787b3          	add	a5,a5,a3
    3ed0:	00006897          	auipc	a7,0x6
    3ed4:	86088893          	addi	a7,a7,-1952 # 9730 <__malloc_av_+0x8>
    3ed8:	00862683          	lw	a3,8(a2)
    3edc:	0d168e63          	beq	a3,a7,3fb8 <_free_r+0x274>
    3ee0:	00c62803          	lw	a6,12(a2)
    3ee4:	0017e593          	ori	a1,a5,1
    3ee8:	00f70633          	add	a2,a4,a5
    3eec:	0106a623          	sw	a6,12(a3)
    3ef0:	00d82423          	sw	a3,8(a6)
    3ef4:	00b72223          	sw	a1,4(a4)
    3ef8:	00f62023          	sw	a5,0(a2)
    3efc:	ee1ff06f          	j	3ddc <_free_r+0x98>
    3f00:	12059e63          	bnez	a1,403c <_free_r+0x2f8>
    3f04:	00862583          	lw	a1,8(a2)
    3f08:	00c62603          	lw	a2,12(a2)
    3f0c:	00f686b3          	add	a3,a3,a5
    3f10:	0016e793          	ori	a5,a3,1
    3f14:	00c5a623          	sw	a2,12(a1)
    3f18:	00b62423          	sw	a1,8(a2)
    3f1c:	00f72223          	sw	a5,4(a4)
    3f20:	00d70733          	add	a4,a4,a3
    3f24:	00d72023          	sw	a3,0(a4)
    3f28:	ef9ff06f          	j	3e20 <_free_r+0xdc>
    3f2c:	0015f593          	andi	a1,a1,1
    3f30:	00d786b3          	add	a3,a5,a3
    3f34:	02059063          	bnez	a1,3f54 <_free_r+0x210>
    3f38:	ff842583          	lw	a1,-8(s0)
    3f3c:	40b70733          	sub	a4,a4,a1
    3f40:	00c72783          	lw	a5,12(a4)
    3f44:	00872603          	lw	a2,8(a4)
    3f48:	00b686b3          	add	a3,a3,a1
    3f4c:	00f62623          	sw	a5,12(a2)
    3f50:	00c7a423          	sw	a2,8(a5)
    3f54:	0016e793          	ori	a5,a3,1
    3f58:	00f72223          	sw	a5,4(a4)
    3f5c:	00e52423          	sw	a4,8(a0)
    3f60:	8301a783          	lw	a5,-2000(gp) # 9b60 <__malloc_trim_threshold>
    3f64:	eaf6eee3          	bltu	a3,a5,3e20 <_free_r+0xdc>
    3f68:	00007597          	auipc	a1,0x7
    3f6c:	78c5a583          	lw	a1,1932(a1) # b6f4 <__malloc_top_pad>
    3f70:	00048513          	mv	a0,s1
    3f74:	c95ff0ef          	jal	ra,3c08 <_malloc_trim_r>
    3f78:	ea9ff06f          	j	3e20 <_free_r+0xdc>
    3f7c:	00d787b3          	add	a5,a5,a3
    3f80:	f59ff06f          	j	3ed8 <_free_r+0x194>
    3f84:	01400613          	li	a2,20
    3f88:	02d67063          	bgeu	a2,a3,3fa8 <_free_r+0x264>
    3f8c:	05400613          	li	a2,84
    3f90:	06d66463          	bltu	a2,a3,3ff8 <_free_r+0x2b4>
    3f94:	00c7d693          	srli	a3,a5,0xc
    3f98:	06f68593          	addi	a1,a3,111
    3f9c:	06e68613          	addi	a2,a3,110
    3fa0:	00359593          	slli	a1,a1,0x3
    3fa4:	ed1ff06f          	j	3e74 <_free_r+0x130>
    3fa8:	05c68593          	addi	a1,a3,92
    3fac:	05b68613          	addi	a2,a3,91
    3fb0:	00359593          	slli	a1,a1,0x3
    3fb4:	ec1ff06f          	j	3e74 <_free_r+0x130>
    3fb8:	00e52a23          	sw	a4,20(a0)
    3fbc:	00e52823          	sw	a4,16(a0)
    3fc0:	0017e693          	ori	a3,a5,1
    3fc4:	01172623          	sw	a7,12(a4)
    3fc8:	01172423          	sw	a7,8(a4)
    3fcc:	00d72223          	sw	a3,4(a4)
    3fd0:	00f70733          	add	a4,a4,a5
    3fd4:	00f72023          	sw	a5,0(a4)
    3fd8:	e49ff06f          	j	3e20 <_free_r+0xdc>
    3fdc:	00452803          	lw	a6,4(a0)
    3fe0:	40265613          	srai	a2,a2,0x2
    3fe4:	00100793          	li	a5,1
    3fe8:	00c797b3          	sll	a5,a5,a2
    3fec:	0107e7b3          	or	a5,a5,a6
    3ff0:	00f52223          	sw	a5,4(a0)
    3ff4:	eadff06f          	j	3ea0 <_free_r+0x15c>
    3ff8:	15400613          	li	a2,340
    3ffc:	00d66c63          	bltu	a2,a3,4014 <_free_r+0x2d0>
    4000:	00f7d693          	srli	a3,a5,0xf
    4004:	07868593          	addi	a1,a3,120
    4008:	07768613          	addi	a2,a3,119
    400c:	00359593          	slli	a1,a1,0x3
    4010:	e65ff06f          	j	3e74 <_free_r+0x130>
    4014:	55400613          	li	a2,1364
    4018:	00d66c63          	bltu	a2,a3,4030 <_free_r+0x2ec>
    401c:	0127d693          	srli	a3,a5,0x12
    4020:	07d68593          	addi	a1,a3,125
    4024:	07c68613          	addi	a2,a3,124
    4028:	00359593          	slli	a1,a1,0x3
    402c:	e49ff06f          	j	3e74 <_free_r+0x130>
    4030:	3f800593          	li	a1,1016
    4034:	07e00613          	li	a2,126
    4038:	e3dff06f          	j	3e74 <_free_r+0x130>
    403c:	0017e693          	ori	a3,a5,1
    4040:	00d72223          	sw	a3,4(a4)
    4044:	00f62023          	sw	a5,0(a2)
    4048:	dd9ff06f          	j	3e20 <_free_r+0xdc>

0000404c <__sfvwrite_r>:
    404c:	00862783          	lw	a5,8(a2)
    4050:	30078a63          	beqz	a5,4364 <__sfvwrite_r+0x318>
    4054:	00c59683          	lh	a3,12(a1)
    4058:	fd010113          	addi	sp,sp,-48
    405c:	02812423          	sw	s0,40(sp)
    4060:	01412c23          	sw	s4,24(sp)
    4064:	01612823          	sw	s6,16(sp)
    4068:	02112623          	sw	ra,44(sp)
    406c:	02912223          	sw	s1,36(sp)
    4070:	03212023          	sw	s2,32(sp)
    4074:	01312e23          	sw	s3,28(sp)
    4078:	01512a23          	sw	s5,20(sp)
    407c:	01712623          	sw	s7,12(sp)
    4080:	01812423          	sw	s8,8(sp)
    4084:	01912223          	sw	s9,4(sp)
    4088:	0086f793          	andi	a5,a3,8
    408c:	00060b13          	mv	s6,a2
    4090:	00050a13          	mv	s4,a0
    4094:	00058413          	mv	s0,a1
    4098:	08078663          	beqz	a5,4124 <__sfvwrite_r+0xd8>
    409c:	0105a783          	lw	a5,16(a1)
    40a0:	08078263          	beqz	a5,4124 <__sfvwrite_r+0xd8>
    40a4:	0026f793          	andi	a5,a3,2
    40a8:	000b2483          	lw	s1,0(s6)
    40ac:	08078c63          	beqz	a5,4144 <__sfvwrite_r+0xf8>
    40b0:	02442783          	lw	a5,36(s0)
    40b4:	01c42583          	lw	a1,28(s0)
    40b8:	80000ab7          	lui	s5,0x80000
    40bc:	00000993          	li	s3,0
    40c0:	00000913          	li	s2,0
    40c4:	c00aca93          	xori	s5,s5,-1024
    40c8:	00098613          	mv	a2,s3
    40cc:	000a0513          	mv	a0,s4
    40d0:	04090263          	beqz	s2,4114 <__sfvwrite_r+0xc8>
    40d4:	00090693          	mv	a3,s2
    40d8:	012af463          	bgeu	s5,s2,40e0 <__sfvwrite_r+0x94>
    40dc:	000a8693          	mv	a3,s5
    40e0:	000780e7          	jalr	a5
    40e4:	26a05663          	blez	a0,4350 <__sfvwrite_r+0x304>
    40e8:	008b2783          	lw	a5,8(s6)
    40ec:	00a989b3          	add	s3,s3,a0
    40f0:	40a90933          	sub	s2,s2,a0
    40f4:	40a787b3          	sub	a5,a5,a0
    40f8:	00fb2423          	sw	a5,8(s6)
    40fc:	20078663          	beqz	a5,4308 <__sfvwrite_r+0x2bc>
    4100:	02442783          	lw	a5,36(s0)
    4104:	01c42583          	lw	a1,28(s0)
    4108:	00098613          	mv	a2,s3
    410c:	000a0513          	mv	a0,s4
    4110:	fc0912e3          	bnez	s2,40d4 <__sfvwrite_r+0x88>
    4114:	0004a983          	lw	s3,0(s1)
    4118:	0044a903          	lw	s2,4(s1)
    411c:	00848493          	addi	s1,s1,8
    4120:	fa9ff06f          	j	40c8 <__sfvwrite_r+0x7c>
    4124:	00040593          	mv	a1,s0
    4128:	000a0513          	mv	a0,s4
    412c:	040020ef          	jal	ra,616c <__swsetup_r>
    4130:	22051663          	bnez	a0,435c <__sfvwrite_r+0x310>
    4134:	00c41683          	lh	a3,12(s0)
    4138:	000b2483          	lw	s1,0(s6)
    413c:	0026f793          	andi	a5,a3,2
    4140:	f60798e3          	bnez	a5,40b0 <__sfvwrite_r+0x64>
    4144:	0016f793          	andi	a5,a3,1
    4148:	12079c63          	bnez	a5,4280 <__sfvwrite_r+0x234>
    414c:	00042783          	lw	a5,0(s0)
    4150:	00842703          	lw	a4,8(s0)
    4154:	80000ab7          	lui	s5,0x80000
    4158:	00000b93          	li	s7,0
    415c:	00000993          	li	s3,0
    4160:	fffaca93          	not	s5,s5
    4164:	00078513          	mv	a0,a5
    4168:	00070c13          	mv	s8,a4
    416c:	10098263          	beqz	s3,4270 <__sfvwrite_r+0x224>
    4170:	2006f613          	andi	a2,a3,512
    4174:	24060c63          	beqz	a2,43cc <__sfvwrite_r+0x380>
    4178:	00070c93          	mv	s9,a4
    417c:	2ee9e463          	bltu	s3,a4,4464 <__sfvwrite_r+0x418>
    4180:	4806f713          	andi	a4,a3,1152
    4184:	08070a63          	beqz	a4,4218 <__sfvwrite_r+0x1cc>
    4188:	01442603          	lw	a2,20(s0)
    418c:	01042583          	lw	a1,16(s0)
    4190:	00161713          	slli	a4,a2,0x1
    4194:	00c70733          	add	a4,a4,a2
    4198:	40b78933          	sub	s2,a5,a1
    419c:	01f75c13          	srli	s8,a4,0x1f
    41a0:	00ec0c33          	add	s8,s8,a4
    41a4:	00190793          	addi	a5,s2,1
    41a8:	401c5c13          	srai	s8,s8,0x1
    41ac:	013787b3          	add	a5,a5,s3
    41b0:	000c0613          	mv	a2,s8
    41b4:	00fc7663          	bgeu	s8,a5,41c0 <__sfvwrite_r+0x174>
    41b8:	00078c13          	mv	s8,a5
    41bc:	00078613          	mv	a2,a5
    41c0:	4006f693          	andi	a3,a3,1024
    41c4:	2c068c63          	beqz	a3,449c <__sfvwrite_r+0x450>
    41c8:	00060593          	mv	a1,a2
    41cc:	000a0513          	mv	a0,s4
    41d0:	4a0000ef          	jal	ra,4670 <_malloc_r>
    41d4:	00050c93          	mv	s9,a0
    41d8:	30050063          	beqz	a0,44d8 <__sfvwrite_r+0x48c>
    41dc:	01042583          	lw	a1,16(s0)
    41e0:	00090613          	mv	a2,s2
    41e4:	bd5fe0ef          	jal	ra,2db8 <memcpy>
    41e8:	00c45783          	lhu	a5,12(s0)
    41ec:	b7f7f793          	andi	a5,a5,-1153
    41f0:	0807e793          	ori	a5,a5,128
    41f4:	00f41623          	sh	a5,12(s0)
    41f8:	012c8533          	add	a0,s9,s2
    41fc:	412c07b3          	sub	a5,s8,s2
    4200:	01942823          	sw	s9,16(s0)
    4204:	01842a23          	sw	s8,20(s0)
    4208:	00a42023          	sw	a0,0(s0)
    420c:	00098c13          	mv	s8,s3
    4210:	00f42423          	sw	a5,8(s0)
    4214:	00098c93          	mv	s9,s3
    4218:	000c8613          	mv	a2,s9
    421c:	000b8593          	mv	a1,s7
    4220:	4b5000ef          	jal	ra,4ed4 <memmove>
    4224:	00842703          	lw	a4,8(s0)
    4228:	00042783          	lw	a5,0(s0)
    422c:	00098913          	mv	s2,s3
    4230:	41870733          	sub	a4,a4,s8
    4234:	019787b3          	add	a5,a5,s9
    4238:	00e42423          	sw	a4,8(s0)
    423c:	00f42023          	sw	a5,0(s0)
    4240:	00000993          	li	s3,0
    4244:	008b2783          	lw	a5,8(s6)
    4248:	012b8bb3          	add	s7,s7,s2
    424c:	412787b3          	sub	a5,a5,s2
    4250:	00fb2423          	sw	a5,8(s6)
    4254:	0a078a63          	beqz	a5,4308 <__sfvwrite_r+0x2bc>
    4258:	00042783          	lw	a5,0(s0)
    425c:	00842703          	lw	a4,8(s0)
    4260:	00c41683          	lh	a3,12(s0)
    4264:	00078513          	mv	a0,a5
    4268:	00070c13          	mv	s8,a4
    426c:	f00992e3          	bnez	s3,4170 <__sfvwrite_r+0x124>
    4270:	0004ab83          	lw	s7,0(s1)
    4274:	0044a983          	lw	s3,4(s1)
    4278:	00848493          	addi	s1,s1,8
    427c:	ee9ff06f          	j	4164 <__sfvwrite_r+0x118>
    4280:	00000a93          	li	s5,0
    4284:	00000513          	li	a0,0
    4288:	00000c13          	li	s8,0
    428c:	00000993          	li	s3,0
    4290:	0c098e63          	beqz	s3,436c <__sfvwrite_r+0x320>
    4294:	0e050663          	beqz	a0,4380 <__sfvwrite_r+0x334>
    4298:	000a8793          	mv	a5,s5
    429c:	00098b93          	mv	s7,s3
    42a0:	0137f463          	bgeu	a5,s3,42a8 <__sfvwrite_r+0x25c>
    42a4:	00078b93          	mv	s7,a5
    42a8:	00042503          	lw	a0,0(s0)
    42ac:	01042783          	lw	a5,16(s0)
    42b0:	00842903          	lw	s2,8(s0)
    42b4:	01442683          	lw	a3,20(s0)
    42b8:	00a7f663          	bgeu	a5,a0,42c4 <__sfvwrite_r+0x278>
    42bc:	00d90933          	add	s2,s2,a3
    42c0:	0f794063          	blt	s2,s7,43a0 <__sfvwrite_r+0x354>
    42c4:	1adbc663          	blt	s7,a3,4470 <__sfvwrite_r+0x424>
    42c8:	02442783          	lw	a5,36(s0)
    42cc:	01c42583          	lw	a1,28(s0)
    42d0:	000c0613          	mv	a2,s8
    42d4:	000a0513          	mv	a0,s4
    42d8:	000780e7          	jalr	a5
    42dc:	00050913          	mv	s2,a0
    42e0:	06a05863          	blez	a0,4350 <__sfvwrite_r+0x304>
    42e4:	412a8ab3          	sub	s5,s5,s2
    42e8:	00100513          	li	a0,1
    42ec:	040a8a63          	beqz	s5,4340 <__sfvwrite_r+0x2f4>
    42f0:	008b2783          	lw	a5,8(s6)
    42f4:	012c0c33          	add	s8,s8,s2
    42f8:	412989b3          	sub	s3,s3,s2
    42fc:	412787b3          	sub	a5,a5,s2
    4300:	00fb2423          	sw	a5,8(s6)
    4304:	f80796e3          	bnez	a5,4290 <__sfvwrite_r+0x244>
    4308:	00000513          	li	a0,0
    430c:	02c12083          	lw	ra,44(sp)
    4310:	02812403          	lw	s0,40(sp)
    4314:	02412483          	lw	s1,36(sp)
    4318:	02012903          	lw	s2,32(sp)
    431c:	01c12983          	lw	s3,28(sp)
    4320:	01812a03          	lw	s4,24(sp)
    4324:	01412a83          	lw	s5,20(sp)
    4328:	01012b03          	lw	s6,16(sp)
    432c:	00c12b83          	lw	s7,12(sp)
    4330:	00812c03          	lw	s8,8(sp)
    4334:	00412c83          	lw	s9,4(sp)
    4338:	03010113          	addi	sp,sp,48
    433c:	00008067          	ret
    4340:	00040593          	mv	a1,s0
    4344:	000a0513          	mv	a0,s4
    4348:	334020ef          	jal	ra,667c <_fflush_r>
    434c:	fa0502e3          	beqz	a0,42f0 <__sfvwrite_r+0x2a4>
    4350:	00c41783          	lh	a5,12(s0)
    4354:	0407e793          	ori	a5,a5,64
    4358:	00f41623          	sh	a5,12(s0)
    435c:	fff00513          	li	a0,-1
    4360:	fadff06f          	j	430c <__sfvwrite_r+0x2c0>
    4364:	00000513          	li	a0,0
    4368:	00008067          	ret
    436c:	0044a983          	lw	s3,4(s1)
    4370:	00048793          	mv	a5,s1
    4374:	00848493          	addi	s1,s1,8
    4378:	fe098ae3          	beqz	s3,436c <__sfvwrite_r+0x320>
    437c:	0007ac03          	lw	s8,0(a5)
    4380:	00098613          	mv	a2,s3
    4384:	00a00593          	li	a1,10
    4388:	000c0513          	mv	a0,s8
    438c:	285000ef          	jal	ra,4e10 <memchr>
    4390:	12050e63          	beqz	a0,44cc <__sfvwrite_r+0x480>
    4394:	00150513          	addi	a0,a0,1
    4398:	41850ab3          	sub	s5,a0,s8
    439c:	efdff06f          	j	4298 <__sfvwrite_r+0x24c>
    43a0:	000c0593          	mv	a1,s8
    43a4:	00090613          	mv	a2,s2
    43a8:	32d000ef          	jal	ra,4ed4 <memmove>
    43ac:	00042783          	lw	a5,0(s0)
    43b0:	00040593          	mv	a1,s0
    43b4:	000a0513          	mv	a0,s4
    43b8:	012787b3          	add	a5,a5,s2
    43bc:	00f42023          	sw	a5,0(s0)
    43c0:	2bc020ef          	jal	ra,667c <_fflush_r>
    43c4:	f20500e3          	beqz	a0,42e4 <__sfvwrite_r+0x298>
    43c8:	f89ff06f          	j	4350 <__sfvwrite_r+0x304>
    43cc:	01042683          	lw	a3,16(s0)
    43d0:	04f6e263          	bltu	a3,a5,4414 <__sfvwrite_r+0x3c8>
    43d4:	01442603          	lw	a2,20(s0)
    43d8:	02c9ee63          	bltu	s3,a2,4414 <__sfvwrite_r+0x3c8>
    43dc:	00098793          	mv	a5,s3
    43e0:	013af463          	bgeu	s5,s3,43e8 <__sfvwrite_r+0x39c>
    43e4:	000a8793          	mv	a5,s5
    43e8:	02c7e6b3          	rem	a3,a5,a2
    43ec:	02442703          	lw	a4,36(s0)
    43f0:	01c42583          	lw	a1,28(s0)
    43f4:	000b8613          	mv	a2,s7
    43f8:	000a0513          	mv	a0,s4
    43fc:	40d786b3          	sub	a3,a5,a3
    4400:	000700e7          	jalr	a4
    4404:	00050913          	mv	s2,a0
    4408:	f4a054e3          	blez	a0,4350 <__sfvwrite_r+0x304>
    440c:	412989b3          	sub	s3,s3,s2
    4410:	e35ff06f          	j	4244 <__sfvwrite_r+0x1f8>
    4414:	00070913          	mv	s2,a4
    4418:	00e9f463          	bgeu	s3,a4,4420 <__sfvwrite_r+0x3d4>
    441c:	00098913          	mv	s2,s3
    4420:	00078513          	mv	a0,a5
    4424:	00090613          	mv	a2,s2
    4428:	000b8593          	mv	a1,s7
    442c:	2a9000ef          	jal	ra,4ed4 <memmove>
    4430:	00842703          	lw	a4,8(s0)
    4434:	00042783          	lw	a5,0(s0)
    4438:	41270733          	sub	a4,a4,s2
    443c:	012787b3          	add	a5,a5,s2
    4440:	00e42423          	sw	a4,8(s0)
    4444:	00f42023          	sw	a5,0(s0)
    4448:	fc0712e3          	bnez	a4,440c <__sfvwrite_r+0x3c0>
    444c:	00040593          	mv	a1,s0
    4450:	000a0513          	mv	a0,s4
    4454:	228020ef          	jal	ra,667c <_fflush_r>
    4458:	ee051ce3          	bnez	a0,4350 <__sfvwrite_r+0x304>
    445c:	412989b3          	sub	s3,s3,s2
    4460:	de5ff06f          	j	4244 <__sfvwrite_r+0x1f8>
    4464:	00098c13          	mv	s8,s3
    4468:	00098c93          	mv	s9,s3
    446c:	dadff06f          	j	4218 <__sfvwrite_r+0x1cc>
    4470:	000b8613          	mv	a2,s7
    4474:	000c0593          	mv	a1,s8
    4478:	25d000ef          	jal	ra,4ed4 <memmove>
    447c:	00842703          	lw	a4,8(s0)
    4480:	00042783          	lw	a5,0(s0)
    4484:	000b8913          	mv	s2,s7
    4488:	41770733          	sub	a4,a4,s7
    448c:	017787b3          	add	a5,a5,s7
    4490:	00e42423          	sw	a4,8(s0)
    4494:	00f42023          	sw	a5,0(s0)
    4498:	e4dff06f          	j	42e4 <__sfvwrite_r+0x298>
    449c:	000a0513          	mv	a0,s4
    44a0:	6ad000ef          	jal	ra,534c <_realloc_r>
    44a4:	00050c93          	mv	s9,a0
    44a8:	d40518e3          	bnez	a0,41f8 <__sfvwrite_r+0x1ac>
    44ac:	01042583          	lw	a1,16(s0)
    44b0:	000a0513          	mv	a0,s4
    44b4:	891ff0ef          	jal	ra,3d44 <_free_r>
    44b8:	00c41783          	lh	a5,12(s0)
    44bc:	00c00713          	li	a4,12
    44c0:	00ea2023          	sw	a4,0(s4)
    44c4:	f7f7f793          	andi	a5,a5,-129
    44c8:	e8dff06f          	j	4354 <__sfvwrite_r+0x308>
    44cc:	00198793          	addi	a5,s3,1
    44d0:	00078a93          	mv	s5,a5
    44d4:	dc9ff06f          	j	429c <__sfvwrite_r+0x250>
    44d8:	00c00713          	li	a4,12
    44dc:	00c41783          	lh	a5,12(s0)
    44e0:	00ea2023          	sw	a4,0(s4)
    44e4:	e71ff06f          	j	4354 <__sfvwrite_r+0x308>

000044e8 <_fwalk>:
    44e8:	fe010113          	addi	sp,sp,-32
    44ec:	01212823          	sw	s2,16(sp)
    44f0:	01312623          	sw	s3,12(sp)
    44f4:	01412423          	sw	s4,8(sp)
    44f8:	01512223          	sw	s5,4(sp)
    44fc:	01612023          	sw	s6,0(sp)
    4500:	00112e23          	sw	ra,28(sp)
    4504:	00812c23          	sw	s0,24(sp)
    4508:	00912a23          	sw	s1,20(sp)
    450c:	00058b13          	mv	s6,a1
    4510:	2e050a93          	addi	s5,a0,736
    4514:	00000a13          	li	s4,0
    4518:	00100993          	li	s3,1
    451c:	fff00913          	li	s2,-1
    4520:	004aa483          	lw	s1,4(s5) # 80000004 <__alt_data_end+0x7fff0004>
    4524:	008aa403          	lw	s0,8(s5)
    4528:	fff48493          	addi	s1,s1,-1
    452c:	0204c663          	bltz	s1,4558 <_fwalk+0x70>
    4530:	00c45783          	lhu	a5,12(s0)
    4534:	fff48493          	addi	s1,s1,-1
    4538:	00f9fc63          	bgeu	s3,a5,4550 <_fwalk+0x68>
    453c:	00e41783          	lh	a5,14(s0)
    4540:	00040513          	mv	a0,s0
    4544:	01278663          	beq	a5,s2,4550 <_fwalk+0x68>
    4548:	000b00e7          	jalr	s6
    454c:	00aa6a33          	or	s4,s4,a0
    4550:	06840413          	addi	s0,s0,104
    4554:	fd249ee3          	bne	s1,s2,4530 <_fwalk+0x48>
    4558:	000aaa83          	lw	s5,0(s5)
    455c:	fc0a92e3          	bnez	s5,4520 <_fwalk+0x38>
    4560:	01c12083          	lw	ra,28(sp)
    4564:	01812403          	lw	s0,24(sp)
    4568:	01412483          	lw	s1,20(sp)
    456c:	01012903          	lw	s2,16(sp)
    4570:	00c12983          	lw	s3,12(sp)
    4574:	00412a83          	lw	s5,4(sp)
    4578:	00012b03          	lw	s6,0(sp)
    457c:	000a0513          	mv	a0,s4
    4580:	00812a03          	lw	s4,8(sp)
    4584:	02010113          	addi	sp,sp,32
    4588:	00008067          	ret

0000458c <_fwalk_reent>:
    458c:	fd010113          	addi	sp,sp,-48
    4590:	03212023          	sw	s2,32(sp)
    4594:	01312e23          	sw	s3,28(sp)
    4598:	01412c23          	sw	s4,24(sp)
    459c:	01512a23          	sw	s5,20(sp)
    45a0:	01612823          	sw	s6,16(sp)
    45a4:	01712623          	sw	s7,12(sp)
    45a8:	02112623          	sw	ra,44(sp)
    45ac:	02812423          	sw	s0,40(sp)
    45b0:	02912223          	sw	s1,36(sp)
    45b4:	00050a93          	mv	s5,a0
    45b8:	00058b93          	mv	s7,a1
    45bc:	2e050b13          	addi	s6,a0,736
    45c0:	00000a13          	li	s4,0
    45c4:	00100993          	li	s3,1
    45c8:	fff00913          	li	s2,-1
    45cc:	004b2483          	lw	s1,4(s6)
    45d0:	008b2403          	lw	s0,8(s6)
    45d4:	fff48493          	addi	s1,s1,-1
    45d8:	0204c863          	bltz	s1,4608 <_fwalk_reent+0x7c>
    45dc:	00c45783          	lhu	a5,12(s0)
    45e0:	fff48493          	addi	s1,s1,-1
    45e4:	00f9fe63          	bgeu	s3,a5,4600 <_fwalk_reent+0x74>
    45e8:	00e41783          	lh	a5,14(s0)
    45ec:	00040593          	mv	a1,s0
    45f0:	000a8513          	mv	a0,s5
    45f4:	01278663          	beq	a5,s2,4600 <_fwalk_reent+0x74>
    45f8:	000b80e7          	jalr	s7
    45fc:	00aa6a33          	or	s4,s4,a0
    4600:	06840413          	addi	s0,s0,104
    4604:	fd249ce3          	bne	s1,s2,45dc <_fwalk_reent+0x50>
    4608:	000b2b03          	lw	s6,0(s6)
    460c:	fc0b10e3          	bnez	s6,45cc <_fwalk_reent+0x40>
    4610:	02c12083          	lw	ra,44(sp)
    4614:	02812403          	lw	s0,40(sp)
    4618:	02412483          	lw	s1,36(sp)
    461c:	02012903          	lw	s2,32(sp)
    4620:	01c12983          	lw	s3,28(sp)
    4624:	01412a83          	lw	s5,20(sp)
    4628:	01012b03          	lw	s6,16(sp)
    462c:	00c12b83          	lw	s7,12(sp)
    4630:	000a0513          	mv	a0,s4
    4634:	01812a03          	lw	s4,24(sp)
    4638:	03010113          	addi	sp,sp,48
    463c:	00008067          	ret

00004640 <__retarget_lock_init>:
    4640:	00008067          	ret

00004644 <__retarget_lock_init_recursive>:
    4644:	00008067          	ret

00004648 <__retarget_lock_close>:
    4648:	00008067          	ret

0000464c <__retarget_lock_close_recursive>:
    464c:	00008067          	ret

00004650 <__retarget_lock_acquire>:
    4650:	00008067          	ret

00004654 <__retarget_lock_acquire_recursive>:
    4654:	00008067          	ret

00004658 <__retarget_lock_try_acquire>:
    4658:	00100513          	li	a0,1
    465c:	00008067          	ret

00004660 <__retarget_lock_try_acquire_recursive>:
    4660:	00100513          	li	a0,1
    4664:	00008067          	ret

00004668 <__retarget_lock_release>:
    4668:	00008067          	ret

0000466c <__retarget_lock_release_recursive>:
    466c:	00008067          	ret

00004670 <_malloc_r>:
    4670:	fd010113          	addi	sp,sp,-48
    4674:	03212023          	sw	s2,32(sp)
    4678:	02112623          	sw	ra,44(sp)
    467c:	02812423          	sw	s0,40(sp)
    4680:	02912223          	sw	s1,36(sp)
    4684:	01312e23          	sw	s3,28(sp)
    4688:	01412c23          	sw	s4,24(sp)
    468c:	01512a23          	sw	s5,20(sp)
    4690:	01612823          	sw	s6,16(sp)
    4694:	01712623          	sw	s7,12(sp)
    4698:	01812423          	sw	s8,8(sp)
    469c:	01912223          	sw	s9,4(sp)
    46a0:	00b58793          	addi	a5,a1,11
    46a4:	01600713          	li	a4,22
    46a8:	00050913          	mv	s2,a0
    46ac:	08f76e63          	bltu	a4,a5,4748 <_malloc_r+0xd8>
    46b0:	01000793          	li	a5,16
    46b4:	22b7e063          	bltu	a5,a1,48d4 <_malloc_r+0x264>
    46b8:	215000ef          	jal	ra,50cc <__malloc_lock>
    46bc:	01000493          	li	s1,16
    46c0:	01800793          	li	a5,24
    46c4:	00200593          	li	a1,2
    46c8:	00005997          	auipc	s3,0x5
    46cc:	06098993          	addi	s3,s3,96 # 9728 <__malloc_av_>
    46d0:	00f987b3          	add	a5,s3,a5
    46d4:	0047a403          	lw	s0,4(a5)
    46d8:	ff878713          	addi	a4,a5,-8
    46dc:	32e40263          	beq	s0,a4,4a00 <_malloc_r+0x390>
    46e0:	00442783          	lw	a5,4(s0)
    46e4:	00c42683          	lw	a3,12(s0)
    46e8:	00842603          	lw	a2,8(s0)
    46ec:	ffc7f793          	andi	a5,a5,-4
    46f0:	00f407b3          	add	a5,s0,a5
    46f4:	0047a703          	lw	a4,4(a5)
    46f8:	00d62623          	sw	a3,12(a2)
    46fc:	00c6a423          	sw	a2,8(a3)
    4700:	00176713          	ori	a4,a4,1
    4704:	00090513          	mv	a0,s2
    4708:	00e7a223          	sw	a4,4(a5)
    470c:	1cd000ef          	jal	ra,50d8 <__malloc_unlock>
    4710:	00840513          	addi	a0,s0,8
    4714:	02c12083          	lw	ra,44(sp)
    4718:	02812403          	lw	s0,40(sp)
    471c:	02412483          	lw	s1,36(sp)
    4720:	02012903          	lw	s2,32(sp)
    4724:	01c12983          	lw	s3,28(sp)
    4728:	01812a03          	lw	s4,24(sp)
    472c:	01412a83          	lw	s5,20(sp)
    4730:	01012b03          	lw	s6,16(sp)
    4734:	00c12b83          	lw	s7,12(sp)
    4738:	00812c03          	lw	s8,8(sp)
    473c:	00412c83          	lw	s9,4(sp)
    4740:	03010113          	addi	sp,sp,48
    4744:	00008067          	ret
    4748:	ff87f493          	andi	s1,a5,-8
    474c:	1807c463          	bltz	a5,48d4 <_malloc_r+0x264>
    4750:	18b4e263          	bltu	s1,a1,48d4 <_malloc_r+0x264>
    4754:	179000ef          	jal	ra,50cc <__malloc_lock>
    4758:	1f700793          	li	a5,503
    475c:	3a97fc63          	bgeu	a5,s1,4b14 <_malloc_r+0x4a4>
    4760:	0094d793          	srli	a5,s1,0x9
    4764:	18078063          	beqz	a5,48e4 <_malloc_r+0x274>
    4768:	00400713          	li	a4,4
    476c:	30f76263          	bltu	a4,a5,4a70 <_malloc_r+0x400>
    4770:	0064d793          	srli	a5,s1,0x6
    4774:	03978593          	addi	a1,a5,57
    4778:	03878513          	addi	a0,a5,56
    477c:	00359693          	slli	a3,a1,0x3
    4780:	00005997          	auipc	s3,0x5
    4784:	fa898993          	addi	s3,s3,-88 # 9728 <__malloc_av_>
    4788:	00d986b3          	add	a3,s3,a3
    478c:	0046a403          	lw	s0,4(a3)
    4790:	ff868693          	addi	a3,a3,-8
    4794:	02868663          	beq	a3,s0,47c0 <_malloc_r+0x150>
    4798:	00f00613          	li	a2,15
    479c:	0100006f          	j	47ac <_malloc_r+0x13c>
    47a0:	24075a63          	bgez	a4,49f4 <_malloc_r+0x384>
    47a4:	00c42403          	lw	s0,12(s0)
    47a8:	00868c63          	beq	a3,s0,47c0 <_malloc_r+0x150>
    47ac:	00442783          	lw	a5,4(s0)
    47b0:	ffc7f793          	andi	a5,a5,-4
    47b4:	40978733          	sub	a4,a5,s1
    47b8:	fee654e3          	bge	a2,a4,47a0 <_malloc_r+0x130>
    47bc:	00050593          	mv	a1,a0
    47c0:	0109a403          	lw	s0,16(s3)
    47c4:	00005897          	auipc	a7,0x5
    47c8:	f6c88893          	addi	a7,a7,-148 # 9730 <__malloc_av_+0x8>
    47cc:	1f140c63          	beq	s0,a7,49c4 <_malloc_r+0x354>
    47d0:	00442783          	lw	a5,4(s0)
    47d4:	00f00693          	li	a3,15
    47d8:	ffc7f793          	andi	a5,a5,-4
    47dc:	40978733          	sub	a4,a5,s1
    47e0:	34e6c063          	blt	a3,a4,4b20 <_malloc_r+0x4b0>
    47e4:	0119aa23          	sw	a7,20(s3)
    47e8:	0119a823          	sw	a7,16(s3)
    47ec:	30075463          	bgez	a4,4af4 <_malloc_r+0x484>
    47f0:	1ff00713          	li	a4,511
    47f4:	0049a503          	lw	a0,4(s3)
    47f8:	20f76c63          	bltu	a4,a5,4a10 <_malloc_r+0x3a0>
    47fc:	ff87f713          	andi	a4,a5,-8
    4800:	00870713          	addi	a4,a4,8
    4804:	00e98733          	add	a4,s3,a4
    4808:	00072683          	lw	a3,0(a4)
    480c:	0057d613          	srli	a2,a5,0x5
    4810:	00100793          	li	a5,1
    4814:	00c797b3          	sll	a5,a5,a2
    4818:	00f56533          	or	a0,a0,a5
    481c:	ff870793          	addi	a5,a4,-8
    4820:	00f42623          	sw	a5,12(s0)
    4824:	00d42423          	sw	a3,8(s0)
    4828:	00a9a223          	sw	a0,4(s3)
    482c:	00872023          	sw	s0,0(a4)
    4830:	0086a623          	sw	s0,12(a3)
    4834:	4025d793          	srai	a5,a1,0x2
    4838:	00100613          	li	a2,1
    483c:	00f61633          	sll	a2,a2,a5
    4840:	0ac56a63          	bltu	a0,a2,48f4 <_malloc_r+0x284>
    4844:	00a677b3          	and	a5,a2,a0
    4848:	02079463          	bnez	a5,4870 <_malloc_r+0x200>
    484c:	00161613          	slli	a2,a2,0x1
    4850:	ffc5f593          	andi	a1,a1,-4
    4854:	00a677b3          	and	a5,a2,a0
    4858:	00458593          	addi	a1,a1,4
    485c:	00079a63          	bnez	a5,4870 <_malloc_r+0x200>
    4860:	00161613          	slli	a2,a2,0x1
    4864:	00a677b3          	and	a5,a2,a0
    4868:	00458593          	addi	a1,a1,4
    486c:	fe078ae3          	beqz	a5,4860 <_malloc_r+0x1f0>
    4870:	00f00813          	li	a6,15
    4874:	00359313          	slli	t1,a1,0x3
    4878:	00698333          	add	t1,s3,t1
    487c:	00030513          	mv	a0,t1
    4880:	00c52783          	lw	a5,12(a0)
    4884:	00058e13          	mv	t3,a1
    4888:	20f50663          	beq	a0,a5,4a94 <_malloc_r+0x424>
    488c:	0047a703          	lw	a4,4(a5)
    4890:	00078413          	mv	s0,a5
    4894:	00c7a783          	lw	a5,12(a5)
    4898:	ffc77713          	andi	a4,a4,-4
    489c:	409706b3          	sub	a3,a4,s1
    48a0:	20d84663          	blt	a6,a3,4aac <_malloc_r+0x43c>
    48a4:	fe06c2e3          	bltz	a3,4888 <_malloc_r+0x218>
    48a8:	00e40733          	add	a4,s0,a4
    48ac:	00472683          	lw	a3,4(a4)
    48b0:	00842603          	lw	a2,8(s0)
    48b4:	00090513          	mv	a0,s2
    48b8:	0016e693          	ori	a3,a3,1
    48bc:	00d72223          	sw	a3,4(a4)
    48c0:	00f62623          	sw	a5,12(a2)
    48c4:	00c7a423          	sw	a2,8(a5)
    48c8:	011000ef          	jal	ra,50d8 <__malloc_unlock>
    48cc:	00840513          	addi	a0,s0,8
    48d0:	e45ff06f          	j	4714 <_malloc_r+0xa4>
    48d4:	00c00793          	li	a5,12
    48d8:	00f92023          	sw	a5,0(s2)
    48dc:	00000513          	li	a0,0
    48e0:	e35ff06f          	j	4714 <_malloc_r+0xa4>
    48e4:	20000693          	li	a3,512
    48e8:	04000593          	li	a1,64
    48ec:	03f00513          	li	a0,63
    48f0:	e91ff06f          	j	4780 <_malloc_r+0x110>
    48f4:	0089a403          	lw	s0,8(s3)
    48f8:	00442783          	lw	a5,4(s0)
    48fc:	ffc7fb13          	andi	s6,a5,-4
    4900:	009b6863          	bltu	s6,s1,4910 <_malloc_r+0x2a0>
    4904:	409b0733          	sub	a4,s6,s1
    4908:	00f00793          	li	a5,15
    490c:	0ce7c063          	blt	a5,a4,49cc <_malloc_r+0x35c>
    4910:	82c18c93          	addi	s9,gp,-2004 # 9b5c <__malloc_sbrk_base>
    4914:	000ca703          	lw	a4,0(s9)
    4918:	00007a97          	auipc	s5,0x7
    491c:	ddcaaa83          	lw	s5,-548(s5) # b6f4 <__malloc_top_pad>
    4920:	fff00793          	li	a5,-1
    4924:	01640a33          	add	s4,s0,s6
    4928:	01548ab3          	add	s5,s1,s5
    492c:	3cf70063          	beq	a4,a5,4cec <_malloc_r+0x67c>
    4930:	000017b7          	lui	a5,0x1
    4934:	00f78793          	addi	a5,a5,15 # 100f <alt_main+0x83>
    4938:	00fa8ab3          	add	s5,s5,a5
    493c:	fffff7b7          	lui	a5,0xfffff
    4940:	00fafab3          	and	s5,s5,a5
    4944:	000a8593          	mv	a1,s5
    4948:	00090513          	mv	a0,s2
    494c:	759000ef          	jal	ra,58a4 <_sbrk_r>
    4950:	fff00793          	li	a5,-1
    4954:	00050b93          	mv	s7,a0
    4958:	20f50e63          	beq	a0,a5,4b74 <_malloc_r+0x504>
    495c:	21456a63          	bltu	a0,s4,4b70 <_malloc_r+0x500>
    4960:	00007c17          	auipc	s8,0x7
    4964:	e48c0c13          	addi	s8,s8,-440 # b7a8 <__malloc_current_mallinfo>
    4968:	000c2583          	lw	a1,0(s8)
    496c:	00ba85b3          	add	a1,s5,a1
    4970:	00bc2023          	sw	a1,0(s8)
    4974:	00058713          	mv	a4,a1
    4978:	2aaa1063          	bne	s4,a0,4c18 <_malloc_r+0x5a8>
    497c:	01451793          	slli	a5,a0,0x14
    4980:	28079c63          	bnez	a5,4c18 <_malloc_r+0x5a8>
    4984:	0089ab83          	lw	s7,8(s3)
    4988:	015b07b3          	add	a5,s6,s5
    498c:	0017e793          	ori	a5,a5,1
    4990:	00fba223          	sw	a5,4(s7)
    4994:	00007717          	auipc	a4,0x7
    4998:	d5c70713          	addi	a4,a4,-676 # b6f0 <__malloc_max_sbrked_mem>
    499c:	00072683          	lw	a3,0(a4)
    49a0:	00b6f463          	bgeu	a3,a1,49a8 <_malloc_r+0x338>
    49a4:	00b72023          	sw	a1,0(a4)
    49a8:	00007717          	auipc	a4,0x7
    49ac:	d4470713          	addi	a4,a4,-700 # b6ec <__malloc_max_total_mem>
    49b0:	00072683          	lw	a3,0(a4)
    49b4:	00b6f463          	bgeu	a3,a1,49bc <_malloc_r+0x34c>
    49b8:	00b72023          	sw	a1,0(a4)
    49bc:	000b8413          	mv	s0,s7
    49c0:	1bc0006f          	j	4b7c <_malloc_r+0x50c>
    49c4:	0049a503          	lw	a0,4(s3)
    49c8:	e6dff06f          	j	4834 <_malloc_r+0x1c4>
    49cc:	0014e793          	ori	a5,s1,1
    49d0:	00f42223          	sw	a5,4(s0)
    49d4:	009404b3          	add	s1,s0,s1
    49d8:	0099a423          	sw	s1,8(s3)
    49dc:	00176713          	ori	a4,a4,1
    49e0:	00090513          	mv	a0,s2
    49e4:	00e4a223          	sw	a4,4(s1)
    49e8:	6f0000ef          	jal	ra,50d8 <__malloc_unlock>
    49ec:	00840513          	addi	a0,s0,8
    49f0:	d25ff06f          	j	4714 <_malloc_r+0xa4>
    49f4:	00c42683          	lw	a3,12(s0)
    49f8:	00842603          	lw	a2,8(s0)
    49fc:	cf5ff06f          	j	46f0 <_malloc_r+0x80>
    4a00:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfffef00c>
    4a04:	00258593          	addi	a1,a1,2
    4a08:	da878ce3          	beq	a5,s0,47c0 <_malloc_r+0x150>
    4a0c:	cd5ff06f          	j	46e0 <_malloc_r+0x70>
    4a10:	0097d713          	srli	a4,a5,0x9
    4a14:	00400693          	li	a3,4
    4a18:	14e6f263          	bgeu	a3,a4,4b5c <_malloc_r+0x4ec>
    4a1c:	01400693          	li	a3,20
    4a20:	30e6ec63          	bltu	a3,a4,4d38 <_malloc_r+0x6c8>
    4a24:	05c70613          	addi	a2,a4,92
    4a28:	05b70693          	addi	a3,a4,91
    4a2c:	00361613          	slli	a2,a2,0x3
    4a30:	00c98633          	add	a2,s3,a2
    4a34:	00062703          	lw	a4,0(a2)
    4a38:	ff860613          	addi	a2,a2,-8
    4a3c:	00e61863          	bne	a2,a4,4a4c <_malloc_r+0x3dc>
    4a40:	2b40006f          	j	4cf4 <_malloc_r+0x684>
    4a44:	00872703          	lw	a4,8(a4)
    4a48:	00e60863          	beq	a2,a4,4a58 <_malloc_r+0x3e8>
    4a4c:	00472683          	lw	a3,4(a4)
    4a50:	ffc6f693          	andi	a3,a3,-4
    4a54:	fed7e8e3          	bltu	a5,a3,4a44 <_malloc_r+0x3d4>
    4a58:	00c72603          	lw	a2,12(a4)
    4a5c:	00c42623          	sw	a2,12(s0)
    4a60:	00e42423          	sw	a4,8(s0)
    4a64:	00862423          	sw	s0,8(a2)
    4a68:	00872623          	sw	s0,12(a4)
    4a6c:	dc9ff06f          	j	4834 <_malloc_r+0x1c4>
    4a70:	01400713          	li	a4,20
    4a74:	12f77663          	bgeu	a4,a5,4ba0 <_malloc_r+0x530>
    4a78:	05400713          	li	a4,84
    4a7c:	2cf76c63          	bltu	a4,a5,4d54 <_malloc_r+0x6e4>
    4a80:	00c4d793          	srli	a5,s1,0xc
    4a84:	06f78593          	addi	a1,a5,111
    4a88:	06e78513          	addi	a0,a5,110
    4a8c:	00359693          	slli	a3,a1,0x3
    4a90:	cf1ff06f          	j	4780 <_malloc_r+0x110>
    4a94:	001e0e13          	addi	t3,t3,1
    4a98:	003e7793          	andi	a5,t3,3
    4a9c:	00850513          	addi	a0,a0,8
    4aa0:	10078e63          	beqz	a5,4bbc <_malloc_r+0x54c>
    4aa4:	00c52783          	lw	a5,12(a0)
    4aa8:	de1ff06f          	j	4888 <_malloc_r+0x218>
    4aac:	00842603          	lw	a2,8(s0)
    4ab0:	0014e593          	ori	a1,s1,1
    4ab4:	00b42223          	sw	a1,4(s0)
    4ab8:	00f62623          	sw	a5,12(a2)
    4abc:	00c7a423          	sw	a2,8(a5)
    4ac0:	009404b3          	add	s1,s0,s1
    4ac4:	0099aa23          	sw	s1,20(s3)
    4ac8:	0099a823          	sw	s1,16(s3)
    4acc:	0016e793          	ori	a5,a3,1
    4ad0:	0114a623          	sw	a7,12(s1)
    4ad4:	0114a423          	sw	a7,8(s1)
    4ad8:	00f4a223          	sw	a5,4(s1)
    4adc:	00e40733          	add	a4,s0,a4
    4ae0:	00090513          	mv	a0,s2
    4ae4:	00d72023          	sw	a3,0(a4)
    4ae8:	5f0000ef          	jal	ra,50d8 <__malloc_unlock>
    4aec:	00840513          	addi	a0,s0,8
    4af0:	c25ff06f          	j	4714 <_malloc_r+0xa4>
    4af4:	00f407b3          	add	a5,s0,a5
    4af8:	0047a703          	lw	a4,4(a5)
    4afc:	00090513          	mv	a0,s2
    4b00:	00176713          	ori	a4,a4,1
    4b04:	00e7a223          	sw	a4,4(a5)
    4b08:	5d0000ef          	jal	ra,50d8 <__malloc_unlock>
    4b0c:	00840513          	addi	a0,s0,8
    4b10:	c05ff06f          	j	4714 <_malloc_r+0xa4>
    4b14:	0034d593          	srli	a1,s1,0x3
    4b18:	00848793          	addi	a5,s1,8
    4b1c:	badff06f          	j	46c8 <_malloc_r+0x58>
    4b20:	0014e693          	ori	a3,s1,1
    4b24:	00d42223          	sw	a3,4(s0)
    4b28:	009404b3          	add	s1,s0,s1
    4b2c:	0099aa23          	sw	s1,20(s3)
    4b30:	0099a823          	sw	s1,16(s3)
    4b34:	00176693          	ori	a3,a4,1
    4b38:	0114a623          	sw	a7,12(s1)
    4b3c:	0114a423          	sw	a7,8(s1)
    4b40:	00d4a223          	sw	a3,4(s1)
    4b44:	00f407b3          	add	a5,s0,a5
    4b48:	00090513          	mv	a0,s2
    4b4c:	00e7a023          	sw	a4,0(a5)
    4b50:	588000ef          	jal	ra,50d8 <__malloc_unlock>
    4b54:	00840513          	addi	a0,s0,8
    4b58:	bbdff06f          	j	4714 <_malloc_r+0xa4>
    4b5c:	0067d713          	srli	a4,a5,0x6
    4b60:	03970613          	addi	a2,a4,57
    4b64:	03870693          	addi	a3,a4,56
    4b68:	00361613          	slli	a2,a2,0x3
    4b6c:	ec5ff06f          	j	4a30 <_malloc_r+0x3c0>
    4b70:	09340a63          	beq	s0,s3,4c04 <_malloc_r+0x594>
    4b74:	0089a403          	lw	s0,8(s3)
    4b78:	00442783          	lw	a5,4(s0)
    4b7c:	ffc7f793          	andi	a5,a5,-4
    4b80:	40978733          	sub	a4,a5,s1
    4b84:	0097e663          	bltu	a5,s1,4b90 <_malloc_r+0x520>
    4b88:	00f00793          	li	a5,15
    4b8c:	e4e7c0e3          	blt	a5,a4,49cc <_malloc_r+0x35c>
    4b90:	00090513          	mv	a0,s2
    4b94:	544000ef          	jal	ra,50d8 <__malloc_unlock>
    4b98:	00000513          	li	a0,0
    4b9c:	b79ff06f          	j	4714 <_malloc_r+0xa4>
    4ba0:	05c78593          	addi	a1,a5,92
    4ba4:	05b78513          	addi	a0,a5,91
    4ba8:	00359693          	slli	a3,a1,0x3
    4bac:	bd5ff06f          	j	4780 <_malloc_r+0x110>
    4bb0:	00832783          	lw	a5,8(t1)
    4bb4:	fff58593          	addi	a1,a1,-1
    4bb8:	24679863          	bne	a5,t1,4e08 <_malloc_r+0x798>
    4bbc:	0035f793          	andi	a5,a1,3
    4bc0:	ff830313          	addi	t1,t1,-8
    4bc4:	fe0796e3          	bnez	a5,4bb0 <_malloc_r+0x540>
    4bc8:	0049a703          	lw	a4,4(s3)
    4bcc:	fff64793          	not	a5,a2
    4bd0:	00e7f7b3          	and	a5,a5,a4
    4bd4:	00f9a223          	sw	a5,4(s3)
    4bd8:	00161613          	slli	a2,a2,0x1
    4bdc:	d0c7ece3          	bltu	a5,a2,48f4 <_malloc_r+0x284>
    4be0:	d0060ae3          	beqz	a2,48f4 <_malloc_r+0x284>
    4be4:	00f67733          	and	a4,a2,a5
    4be8:	00071a63          	bnez	a4,4bfc <_malloc_r+0x58c>
    4bec:	00161613          	slli	a2,a2,0x1
    4bf0:	00f67733          	and	a4,a2,a5
    4bf4:	004e0e13          	addi	t3,t3,4
    4bf8:	fe070ae3          	beqz	a4,4bec <_malloc_r+0x57c>
    4bfc:	000e0593          	mv	a1,t3
    4c00:	c75ff06f          	j	4874 <_malloc_r+0x204>
    4c04:	00007c17          	auipc	s8,0x7
    4c08:	ba4c0c13          	addi	s8,s8,-1116 # b7a8 <__malloc_current_mallinfo>
    4c0c:	000c2703          	lw	a4,0(s8)
    4c10:	00ea8733          	add	a4,s5,a4
    4c14:	00ec2023          	sw	a4,0(s8)
    4c18:	000ca683          	lw	a3,0(s9)
    4c1c:	fff00793          	li	a5,-1
    4c20:	14f68863          	beq	a3,a5,4d70 <_malloc_r+0x700>
    4c24:	414b87b3          	sub	a5,s7,s4
    4c28:	00e787b3          	add	a5,a5,a4
    4c2c:	00fc2023          	sw	a5,0(s8)
    4c30:	007bfc93          	andi	s9,s7,7
    4c34:	0c0c8c63          	beqz	s9,4d0c <_malloc_r+0x69c>
    4c38:	00001737          	lui	a4,0x1
    4c3c:	419b8bb3          	sub	s7,s7,s9
    4c40:	00870593          	addi	a1,a4,8 # 1008 <alt_main+0x7c>
    4c44:	008b8b93          	addi	s7,s7,8
    4c48:	419585b3          	sub	a1,a1,s9
    4c4c:	015b8ab3          	add	s5,s7,s5
    4c50:	415585b3          	sub	a1,a1,s5
    4c54:	fff70713          	addi	a4,a4,-1
    4c58:	00e5fa33          	and	s4,a1,a4
    4c5c:	000a0593          	mv	a1,s4
    4c60:	00090513          	mv	a0,s2
    4c64:	441000ef          	jal	ra,58a4 <_sbrk_r>
    4c68:	fff00793          	li	a5,-1
    4c6c:	14f50863          	beq	a0,a5,4dbc <_malloc_r+0x74c>
    4c70:	41750533          	sub	a0,a0,s7
    4c74:	01450ab3          	add	s5,a0,s4
    4c78:	000c2703          	lw	a4,0(s8)
    4c7c:	0179a423          	sw	s7,8(s3)
    4c80:	001ae793          	ori	a5,s5,1
    4c84:	00ea05b3          	add	a1,s4,a4
    4c88:	00bc2023          	sw	a1,0(s8)
    4c8c:	00fba223          	sw	a5,4(s7)
    4c90:	d13402e3          	beq	s0,s3,4994 <_malloc_r+0x324>
    4c94:	00f00693          	li	a3,15
    4c98:	0f66f063          	bgeu	a3,s6,4d78 <_malloc_r+0x708>
    4c9c:	00442703          	lw	a4,4(s0)
    4ca0:	ff4b0793          	addi	a5,s6,-12
    4ca4:	ff87f793          	andi	a5,a5,-8
    4ca8:	00177713          	andi	a4,a4,1
    4cac:	00f76733          	or	a4,a4,a5
    4cb0:	00e42223          	sw	a4,4(s0)
    4cb4:	00500613          	li	a2,5
    4cb8:	00f40733          	add	a4,s0,a5
    4cbc:	00c72223          	sw	a2,4(a4)
    4cc0:	00c72423          	sw	a2,8(a4)
    4cc4:	00f6e663          	bltu	a3,a5,4cd0 <_malloc_r+0x660>
    4cc8:	004ba783          	lw	a5,4(s7)
    4ccc:	cc9ff06f          	j	4994 <_malloc_r+0x324>
    4cd0:	00840593          	addi	a1,s0,8
    4cd4:	00090513          	mv	a0,s2
    4cd8:	86cff0ef          	jal	ra,3d44 <_free_r>
    4cdc:	0089ab83          	lw	s7,8(s3)
    4ce0:	000c2583          	lw	a1,0(s8)
    4ce4:	004ba783          	lw	a5,4(s7)
    4ce8:	cadff06f          	j	4994 <_malloc_r+0x324>
    4cec:	010a8a93          	addi	s5,s5,16
    4cf0:	c55ff06f          	j	4944 <_malloc_r+0x2d4>
    4cf4:	4026d693          	srai	a3,a3,0x2
    4cf8:	00100793          	li	a5,1
    4cfc:	00d797b3          	sll	a5,a5,a3
    4d00:	00f56533          	or	a0,a0,a5
    4d04:	00a9a223          	sw	a0,4(s3)
    4d08:	d55ff06f          	j	4a5c <_malloc_r+0x3ec>
    4d0c:	015b85b3          	add	a1,s7,s5
    4d10:	40b005b3          	neg	a1,a1
    4d14:	01459593          	slli	a1,a1,0x14
    4d18:	0145da13          	srli	s4,a1,0x14
    4d1c:	000a0593          	mv	a1,s4
    4d20:	00090513          	mv	a0,s2
    4d24:	381000ef          	jal	ra,58a4 <_sbrk_r>
    4d28:	fff00793          	li	a5,-1
    4d2c:	f4f512e3          	bne	a0,a5,4c70 <_malloc_r+0x600>
    4d30:	00000a13          	li	s4,0
    4d34:	f45ff06f          	j	4c78 <_malloc_r+0x608>
    4d38:	05400693          	li	a3,84
    4d3c:	04e6e463          	bltu	a3,a4,4d84 <_malloc_r+0x714>
    4d40:	00c7d713          	srli	a4,a5,0xc
    4d44:	06f70613          	addi	a2,a4,111
    4d48:	06e70693          	addi	a3,a4,110
    4d4c:	00361613          	slli	a2,a2,0x3
    4d50:	ce1ff06f          	j	4a30 <_malloc_r+0x3c0>
    4d54:	15400713          	li	a4,340
    4d58:	04f76463          	bltu	a4,a5,4da0 <_malloc_r+0x730>
    4d5c:	00f4d793          	srli	a5,s1,0xf
    4d60:	07878593          	addi	a1,a5,120
    4d64:	07778513          	addi	a0,a5,119
    4d68:	00359693          	slli	a3,a1,0x3
    4d6c:	a15ff06f          	j	4780 <_malloc_r+0x110>
    4d70:	017ca023          	sw	s7,0(s9)
    4d74:	ebdff06f          	j	4c30 <_malloc_r+0x5c0>
    4d78:	00100793          	li	a5,1
    4d7c:	00fba223          	sw	a5,4(s7)
    4d80:	e11ff06f          	j	4b90 <_malloc_r+0x520>
    4d84:	15400693          	li	a3,340
    4d88:	04e6e463          	bltu	a3,a4,4dd0 <_malloc_r+0x760>
    4d8c:	00f7d713          	srli	a4,a5,0xf
    4d90:	07870613          	addi	a2,a4,120
    4d94:	07770693          	addi	a3,a4,119
    4d98:	00361613          	slli	a2,a2,0x3
    4d9c:	c95ff06f          	j	4a30 <_malloc_r+0x3c0>
    4da0:	55400713          	li	a4,1364
    4da4:	04f76463          	bltu	a4,a5,4dec <_malloc_r+0x77c>
    4da8:	0124d793          	srli	a5,s1,0x12
    4dac:	07d78593          	addi	a1,a5,125
    4db0:	07c78513          	addi	a0,a5,124
    4db4:	00359693          	slli	a3,a1,0x3
    4db8:	9c9ff06f          	j	4780 <_malloc_r+0x110>
    4dbc:	ff8c8c93          	addi	s9,s9,-8
    4dc0:	019a8ab3          	add	s5,s5,s9
    4dc4:	417a8ab3          	sub	s5,s5,s7
    4dc8:	00000a13          	li	s4,0
    4dcc:	eadff06f          	j	4c78 <_malloc_r+0x608>
    4dd0:	55400693          	li	a3,1364
    4dd4:	02e6e463          	bltu	a3,a4,4dfc <_malloc_r+0x78c>
    4dd8:	0127d713          	srli	a4,a5,0x12
    4ddc:	07d70613          	addi	a2,a4,125
    4de0:	07c70693          	addi	a3,a4,124
    4de4:	00361613          	slli	a2,a2,0x3
    4de8:	c49ff06f          	j	4a30 <_malloc_r+0x3c0>
    4dec:	3f800693          	li	a3,1016
    4df0:	07f00593          	li	a1,127
    4df4:	07e00513          	li	a0,126
    4df8:	989ff06f          	j	4780 <_malloc_r+0x110>
    4dfc:	3f800613          	li	a2,1016
    4e00:	07e00693          	li	a3,126
    4e04:	c2dff06f          	j	4a30 <_malloc_r+0x3c0>
    4e08:	0049a783          	lw	a5,4(s3)
    4e0c:	dcdff06f          	j	4bd8 <_malloc_r+0x568>

00004e10 <memchr>:
    4e10:	00357793          	andi	a5,a0,3
    4e14:	0ff5f693          	zext.b	a3,a1
    4e18:	02078e63          	beqz	a5,4e54 <memchr+0x44>
    4e1c:	fff60793          	addi	a5,a2,-1
    4e20:	02060663          	beqz	a2,4e4c <memchr+0x3c>
    4e24:	fff00613          	li	a2,-1
    4e28:	0180006f          	j	4e40 <memchr+0x30>
    4e2c:	00150513          	addi	a0,a0,1
    4e30:	00357713          	andi	a4,a0,3
    4e34:	02070263          	beqz	a4,4e58 <memchr+0x48>
    4e38:	fff78793          	addi	a5,a5,-1
    4e3c:	00c78863          	beq	a5,a2,4e4c <memchr+0x3c>
    4e40:	00054703          	lbu	a4,0(a0)
    4e44:	fed714e3          	bne	a4,a3,4e2c <memchr+0x1c>
    4e48:	00008067          	ret
    4e4c:	00000513          	li	a0,0
    4e50:	00008067          	ret
    4e54:	00060793          	mv	a5,a2
    4e58:	00300713          	li	a4,3
    4e5c:	04f77c63          	bgeu	a4,a5,4eb4 <memchr+0xa4>
    4e60:	0ff5f593          	zext.b	a1,a1
    4e64:	00859713          	slli	a4,a1,0x8
    4e68:	00b705b3          	add	a1,a4,a1
    4e6c:	01059713          	slli	a4,a1,0x10
    4e70:	feff08b7          	lui	a7,0xfeff0
    4e74:	80808837          	lui	a6,0x80808
    4e78:	00e585b3          	add	a1,a1,a4
    4e7c:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfefdfeff>
    4e80:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x807f8080>
    4e84:	00300313          	li	t1,3
    4e88:	0100006f          	j	4e98 <memchr+0x88>
    4e8c:	ffc78793          	addi	a5,a5,-4
    4e90:	00450513          	addi	a0,a0,4
    4e94:	02f37063          	bgeu	t1,a5,4eb4 <memchr+0xa4>
    4e98:	00052703          	lw	a4,0(a0)
    4e9c:	00e5c733          	xor	a4,a1,a4
    4ea0:	01170633          	add	a2,a4,a7
    4ea4:	fff74713          	not	a4,a4
    4ea8:	00e67733          	and	a4,a2,a4
    4eac:	01077733          	and	a4,a4,a6
    4eb0:	fc070ee3          	beqz	a4,4e8c <memchr+0x7c>
    4eb4:	00f50733          	add	a4,a0,a5
    4eb8:	00079863          	bnez	a5,4ec8 <memchr+0xb8>
    4ebc:	f91ff06f          	j	4e4c <memchr+0x3c>
    4ec0:	00150513          	addi	a0,a0,1
    4ec4:	f8a704e3          	beq	a4,a0,4e4c <memchr+0x3c>
    4ec8:	00054783          	lbu	a5,0(a0)
    4ecc:	fed79ae3          	bne	a5,a3,4ec0 <memchr+0xb0>
    4ed0:	00008067          	ret

00004ed4 <memmove>:
    4ed4:	02a5f663          	bgeu	a1,a0,4f00 <memmove+0x2c>
    4ed8:	00c58733          	add	a4,a1,a2
    4edc:	02e57263          	bgeu	a0,a4,4f00 <memmove+0x2c>
    4ee0:	00c507b3          	add	a5,a0,a2
    4ee4:	04060663          	beqz	a2,4f30 <memmove+0x5c>
    4ee8:	fff74683          	lbu	a3,-1(a4)
    4eec:	fff78793          	addi	a5,a5,-1
    4ef0:	fff70713          	addi	a4,a4,-1
    4ef4:	00d78023          	sb	a3,0(a5)
    4ef8:	fef518e3          	bne	a0,a5,4ee8 <memmove+0x14>
    4efc:	00008067          	ret
    4f00:	00f00793          	li	a5,15
    4f04:	02c7e863          	bltu	a5,a2,4f34 <memmove+0x60>
    4f08:	00050793          	mv	a5,a0
    4f0c:	fff60693          	addi	a3,a2,-1
    4f10:	0c060a63          	beqz	a2,4fe4 <memmove+0x110>
    4f14:	00168693          	addi	a3,a3,1
    4f18:	00d786b3          	add	a3,a5,a3
    4f1c:	0005c703          	lbu	a4,0(a1)
    4f20:	00178793          	addi	a5,a5,1
    4f24:	00158593          	addi	a1,a1,1
    4f28:	fee78fa3          	sb	a4,-1(a5)
    4f2c:	fed798e3          	bne	a5,a3,4f1c <memmove+0x48>
    4f30:	00008067          	ret
    4f34:	00b567b3          	or	a5,a0,a1
    4f38:	0037f793          	andi	a5,a5,3
    4f3c:	08079e63          	bnez	a5,4fd8 <memmove+0x104>
    4f40:	ff060893          	addi	a7,a2,-16
    4f44:	ff08f893          	andi	a7,a7,-16
    4f48:	01088893          	addi	a7,a7,16
    4f4c:	011507b3          	add	a5,a0,a7
    4f50:	00058693          	mv	a3,a1
    4f54:	00050713          	mv	a4,a0
    4f58:	0006a803          	lw	a6,0(a3)
    4f5c:	01068693          	addi	a3,a3,16
    4f60:	01070713          	addi	a4,a4,16
    4f64:	ff072823          	sw	a6,-16(a4)
    4f68:	ff46a803          	lw	a6,-12(a3)
    4f6c:	ff072a23          	sw	a6,-12(a4)
    4f70:	ff86a803          	lw	a6,-8(a3)
    4f74:	ff072c23          	sw	a6,-8(a4)
    4f78:	ffc6a803          	lw	a6,-4(a3)
    4f7c:	ff072e23          	sw	a6,-4(a4)
    4f80:	fcf71ce3          	bne	a4,a5,4f58 <memmove+0x84>
    4f84:	00c67713          	andi	a4,a2,12
    4f88:	011585b3          	add	a1,a1,a7
    4f8c:	00f67813          	andi	a6,a2,15
    4f90:	04070c63          	beqz	a4,4fe8 <memmove+0x114>
    4f94:	00058693          	mv	a3,a1
    4f98:	00078713          	mv	a4,a5
    4f9c:	01078eb3          	add	t4,a5,a6
    4fa0:	00300e13          	li	t3,3
    4fa4:	0006a303          	lw	t1,0(a3)
    4fa8:	00470713          	addi	a4,a4,4
    4fac:	40ee88b3          	sub	a7,t4,a4
    4fb0:	fe672e23          	sw	t1,-4(a4)
    4fb4:	00468693          	addi	a3,a3,4
    4fb8:	ff1e66e3          	bltu	t3,a7,4fa4 <memmove+0xd0>
    4fbc:	ffc80713          	addi	a4,a6,-4
    4fc0:	ffc77713          	andi	a4,a4,-4
    4fc4:	00470713          	addi	a4,a4,4
    4fc8:	00367613          	andi	a2,a2,3
    4fcc:	00e787b3          	add	a5,a5,a4
    4fd0:	00e585b3          	add	a1,a1,a4
    4fd4:	f39ff06f          	j	4f0c <memmove+0x38>
    4fd8:	fff60693          	addi	a3,a2,-1
    4fdc:	00050793          	mv	a5,a0
    4fe0:	f35ff06f          	j	4f14 <memmove+0x40>
    4fe4:	00008067          	ret
    4fe8:	00080613          	mv	a2,a6
    4fec:	f21ff06f          	j	4f0c <memmove+0x38>

00004ff0 <memset>:
    4ff0:	00f00313          	li	t1,15
    4ff4:	00050713          	mv	a4,a0
    4ff8:	02c37e63          	bgeu	t1,a2,5034 <memset+0x44>
    4ffc:	00f77793          	andi	a5,a4,15
    5000:	0a079063          	bnez	a5,50a0 <memset+0xb0>
    5004:	08059263          	bnez	a1,5088 <memset+0x98>
    5008:	ff067693          	andi	a3,a2,-16
    500c:	00f67613          	andi	a2,a2,15
    5010:	00e686b3          	add	a3,a3,a4
    5014:	00b72023          	sw	a1,0(a4)
    5018:	00b72223          	sw	a1,4(a4)
    501c:	00b72423          	sw	a1,8(a4)
    5020:	00b72623          	sw	a1,12(a4)
    5024:	01070713          	addi	a4,a4,16
    5028:	fed766e3          	bltu	a4,a3,5014 <memset+0x24>
    502c:	00061463          	bnez	a2,5034 <memset+0x44>
    5030:	00008067          	ret
    5034:	40c306b3          	sub	a3,t1,a2
    5038:	00269693          	slli	a3,a3,0x2
    503c:	00000297          	auipc	t0,0x0
    5040:	005686b3          	add	a3,a3,t0
    5044:	00c68067          	jr	12(a3)
    5048:	00b70723          	sb	a1,14(a4)
    504c:	00b706a3          	sb	a1,13(a4)
    5050:	00b70623          	sb	a1,12(a4)
    5054:	00b705a3          	sb	a1,11(a4)
    5058:	00b70523          	sb	a1,10(a4)
    505c:	00b704a3          	sb	a1,9(a4)
    5060:	00b70423          	sb	a1,8(a4)
    5064:	00b703a3          	sb	a1,7(a4)
    5068:	00b70323          	sb	a1,6(a4)
    506c:	00b702a3          	sb	a1,5(a4)
    5070:	00b70223          	sb	a1,4(a4)
    5074:	00b701a3          	sb	a1,3(a4)
    5078:	00b70123          	sb	a1,2(a4)
    507c:	00b700a3          	sb	a1,1(a4)
    5080:	00b70023          	sb	a1,0(a4)
    5084:	00008067          	ret
    5088:	0ff5f593          	zext.b	a1,a1
    508c:	00859693          	slli	a3,a1,0x8
    5090:	00d5e5b3          	or	a1,a1,a3
    5094:	01059693          	slli	a3,a1,0x10
    5098:	00d5e5b3          	or	a1,a1,a3
    509c:	f6dff06f          	j	5008 <memset+0x18>
    50a0:	00279693          	slli	a3,a5,0x2
    50a4:	00000297          	auipc	t0,0x0
    50a8:	005686b3          	add	a3,a3,t0
    50ac:	00008293          	mv	t0,ra
    50b0:	fa0680e7          	jalr	-96(a3)
    50b4:	00028093          	mv	ra,t0
    50b8:	ff078793          	addi	a5,a5,-16
    50bc:	40f70733          	sub	a4,a4,a5
    50c0:	00f60633          	add	a2,a2,a5
    50c4:	f6c378e3          	bgeu	t1,a2,5034 <memset+0x44>
    50c8:	f3dff06f          	j	5004 <memset+0x14>

000050cc <__malloc_lock>:
    50cc:	00006517          	auipc	a0,0x6
    50d0:	60c50513          	addi	a0,a0,1548 # b6d8 <__lock___malloc_recursive_mutex>
    50d4:	d80ff06f          	j	4654 <__retarget_lock_acquire_recursive>

000050d8 <__malloc_unlock>:
    50d8:	00006517          	auipc	a0,0x6
    50dc:	60050513          	addi	a0,a0,1536 # b6d8 <__lock___malloc_recursive_mutex>
    50e0:	d8cff06f          	j	466c <__retarget_lock_release_recursive>

000050e4 <_open_r>:
    50e4:	ff010113          	addi	sp,sp,-16
    50e8:	00058713          	mv	a4,a1
    50ec:	00812423          	sw	s0,8(sp)
    50f0:	00060593          	mv	a1,a2
    50f4:	00050413          	mv	s0,a0
    50f8:	00068613          	mv	a2,a3
    50fc:	00070513          	mv	a0,a4
    5100:	00006797          	auipc	a5,0x6
    5104:	5c07a023          	sw	zero,1472(a5) # b6c0 <errno>
    5108:	00112623          	sw	ra,12(sp)
    510c:	31c020ef          	jal	ra,7428 <_open>
    5110:	fff00793          	li	a5,-1
    5114:	00f50a63          	beq	a0,a5,5128 <_open_r+0x44>
    5118:	00c12083          	lw	ra,12(sp)
    511c:	00812403          	lw	s0,8(sp)
    5120:	01010113          	addi	sp,sp,16
    5124:	00008067          	ret
    5128:	00006797          	auipc	a5,0x6
    512c:	5987a783          	lw	a5,1432(a5) # b6c0 <errno>
    5130:	fe0784e3          	beqz	a5,5118 <_open_r+0x34>
    5134:	00c12083          	lw	ra,12(sp)
    5138:	00f42023          	sw	a5,0(s0)
    513c:	00812403          	lw	s0,8(sp)
    5140:	01010113          	addi	sp,sp,16
    5144:	00008067          	ret

00005148 <_putc_r>:
    5148:	ff010113          	addi	sp,sp,-16
    514c:	00812423          	sw	s0,8(sp)
    5150:	00912223          	sw	s1,4(sp)
    5154:	01212023          	sw	s2,0(sp)
    5158:	00112623          	sw	ra,12(sp)
    515c:	00050913          	mv	s2,a0
    5160:	00058493          	mv	s1,a1
    5164:	00060413          	mv	s0,a2
    5168:	00050663          	beqz	a0,5174 <_putc_r+0x2c>
    516c:	03852783          	lw	a5,56(a0)
    5170:	08078463          	beqz	a5,51f8 <_putc_r+0xb0>
    5174:	06442783          	lw	a5,100(s0)
    5178:	0017f793          	andi	a5,a5,1
    517c:	00079863          	bnez	a5,518c <_putc_r+0x44>
    5180:	00c45783          	lhu	a5,12(s0)
    5184:	2007f793          	andi	a5,a5,512
    5188:	08078863          	beqz	a5,5218 <_putc_r+0xd0>
    518c:	00842783          	lw	a5,8(s0)
    5190:	fff78793          	addi	a5,a5,-1
    5194:	00f42423          	sw	a5,8(s0)
    5198:	0007dc63          	bgez	a5,51b0 <_putc_r+0x68>
    519c:	01842703          	lw	a4,24(s0)
    51a0:	06e7c063          	blt	a5,a4,5200 <_putc_r+0xb8>
    51a4:	0ff4f793          	zext.b	a5,s1
    51a8:	00a00713          	li	a4,10
    51ac:	04e78a63          	beq	a5,a4,5200 <_putc_r+0xb8>
    51b0:	00042783          	lw	a5,0(s0)
    51b4:	0ff4f913          	zext.b	s2,s1
    51b8:	00178713          	addi	a4,a5,1
    51bc:	00e42023          	sw	a4,0(s0)
    51c0:	00978023          	sb	s1,0(a5)
    51c4:	06442783          	lw	a5,100(s0)
    51c8:	0017f793          	andi	a5,a5,1
    51cc:	00079863          	bnez	a5,51dc <_putc_r+0x94>
    51d0:	00c45783          	lhu	a5,12(s0)
    51d4:	2007f793          	andi	a5,a5,512
    51d8:	04078663          	beqz	a5,5224 <_putc_r+0xdc>
    51dc:	00c12083          	lw	ra,12(sp)
    51e0:	00812403          	lw	s0,8(sp)
    51e4:	00412483          	lw	s1,4(sp)
    51e8:	00090513          	mv	a0,s2
    51ec:	00012903          	lw	s2,0(sp)
    51f0:	01010113          	addi	sp,sp,16
    51f4:	00008067          	ret
    51f8:	e20fe0ef          	jal	ra,3818 <__sinit>
    51fc:	f79ff06f          	j	5174 <_putc_r+0x2c>
    5200:	00090513          	mv	a0,s2
    5204:	00040613          	mv	a2,s0
    5208:	00048593          	mv	a1,s1
    520c:	5dd000ef          	jal	ra,5fe8 <__swbuf_r>
    5210:	00050913          	mv	s2,a0
    5214:	fb1ff06f          	j	51c4 <_putc_r+0x7c>
    5218:	05842503          	lw	a0,88(s0)
    521c:	c38ff0ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    5220:	f6dff06f          	j	518c <_putc_r+0x44>
    5224:	05842503          	lw	a0,88(s0)
    5228:	c44ff0ef          	jal	ra,466c <__retarget_lock_release_recursive>
    522c:	00c12083          	lw	ra,12(sp)
    5230:	00812403          	lw	s0,8(sp)
    5234:	00412483          	lw	s1,4(sp)
    5238:	00090513          	mv	a0,s2
    523c:	00012903          	lw	s2,0(sp)
    5240:	01010113          	addi	sp,sp,16
    5244:	00008067          	ret

00005248 <putc>:
    5248:	ff010113          	addi	sp,sp,-16
    524c:	00812423          	sw	s0,8(sp)
    5250:	00912223          	sw	s1,4(sp)
    5254:	01212023          	sw	s2,0(sp)
    5258:	00112623          	sw	ra,12(sp)
    525c:	8241a903          	lw	s2,-2012(gp) # 9b54 <_impure_ptr>
    5260:	00050493          	mv	s1,a0
    5264:	00058413          	mv	s0,a1
    5268:	00090663          	beqz	s2,5274 <putc+0x2c>
    526c:	03892783          	lw	a5,56(s2)
    5270:	08078463          	beqz	a5,52f8 <putc+0xb0>
    5274:	06442783          	lw	a5,100(s0)
    5278:	0017f793          	andi	a5,a5,1
    527c:	00079863          	bnez	a5,528c <putc+0x44>
    5280:	00c45783          	lhu	a5,12(s0)
    5284:	2007f793          	andi	a5,a5,512
    5288:	08078a63          	beqz	a5,531c <putc+0xd4>
    528c:	00842783          	lw	a5,8(s0)
    5290:	fff78793          	addi	a5,a5,-1
    5294:	00f42423          	sw	a5,8(s0)
    5298:	0007dc63          	bgez	a5,52b0 <putc+0x68>
    529c:	01842703          	lw	a4,24(s0)
    52a0:	06e7c263          	blt	a5,a4,5304 <putc+0xbc>
    52a4:	0ff4f793          	zext.b	a5,s1
    52a8:	00a00713          	li	a4,10
    52ac:	04e78c63          	beq	a5,a4,5304 <putc+0xbc>
    52b0:	00042783          	lw	a5,0(s0)
    52b4:	0ff4f913          	zext.b	s2,s1
    52b8:	00178713          	addi	a4,a5,1
    52bc:	00e42023          	sw	a4,0(s0)
    52c0:	00978023          	sb	s1,0(a5)
    52c4:	06442783          	lw	a5,100(s0)
    52c8:	0017f793          	andi	a5,a5,1
    52cc:	00079863          	bnez	a5,52dc <putc+0x94>
    52d0:	00c45783          	lhu	a5,12(s0)
    52d4:	2007f793          	andi	a5,a5,512
    52d8:	04078863          	beqz	a5,5328 <putc+0xe0>
    52dc:	00c12083          	lw	ra,12(sp)
    52e0:	00812403          	lw	s0,8(sp)
    52e4:	00412483          	lw	s1,4(sp)
    52e8:	00090513          	mv	a0,s2
    52ec:	00012903          	lw	s2,0(sp)
    52f0:	01010113          	addi	sp,sp,16
    52f4:	00008067          	ret
    52f8:	00090513          	mv	a0,s2
    52fc:	d1cfe0ef          	jal	ra,3818 <__sinit>
    5300:	f75ff06f          	j	5274 <putc+0x2c>
    5304:	00090513          	mv	a0,s2
    5308:	00040613          	mv	a2,s0
    530c:	00048593          	mv	a1,s1
    5310:	4d9000ef          	jal	ra,5fe8 <__swbuf_r>
    5314:	00050913          	mv	s2,a0
    5318:	fadff06f          	j	52c4 <putc+0x7c>
    531c:	05842503          	lw	a0,88(s0)
    5320:	b34ff0ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    5324:	f69ff06f          	j	528c <putc+0x44>
    5328:	05842503          	lw	a0,88(s0)
    532c:	b40ff0ef          	jal	ra,466c <__retarget_lock_release_recursive>
    5330:	00c12083          	lw	ra,12(sp)
    5334:	00812403          	lw	s0,8(sp)
    5338:	00412483          	lw	s1,4(sp)
    533c:	00090513          	mv	a0,s2
    5340:	00012903          	lw	s2,0(sp)
    5344:	01010113          	addi	sp,sp,16
    5348:	00008067          	ret

0000534c <_realloc_r>:
    534c:	fd010113          	addi	sp,sp,-48
    5350:	02912223          	sw	s1,36(sp)
    5354:	02112623          	sw	ra,44(sp)
    5358:	02812423          	sw	s0,40(sp)
    535c:	03212023          	sw	s2,32(sp)
    5360:	01312e23          	sw	s3,28(sp)
    5364:	01412c23          	sw	s4,24(sp)
    5368:	01512a23          	sw	s5,20(sp)
    536c:	01612823          	sw	s6,16(sp)
    5370:	01712623          	sw	s7,12(sp)
    5374:	01812423          	sw	s8,8(sp)
    5378:	00060493          	mv	s1,a2
    537c:	1c058263          	beqz	a1,5540 <_realloc_r+0x1f4>
    5380:	00058413          	mv	s0,a1
    5384:	00050913          	mv	s2,a0
    5388:	d45ff0ef          	jal	ra,50cc <__malloc_lock>
    538c:	ffc42703          	lw	a4,-4(s0)
    5390:	00b48793          	addi	a5,s1,11
    5394:	01600693          	li	a3,22
    5398:	ff840a93          	addi	s5,s0,-8
    539c:	ffc77993          	andi	s3,a4,-4
    53a0:	0ef6f663          	bgeu	a3,a5,548c <_realloc_r+0x140>
    53a4:	ff87fa13          	andi	s4,a5,-8
    53a8:	0e07c663          	bltz	a5,5494 <_realloc_r+0x148>
    53ac:	0e9a6463          	bltu	s4,s1,5494 <_realloc_r+0x148>
    53b0:	1149d463          	bge	s3,s4,54b8 <_realloc_r+0x16c>
    53b4:	00004c17          	auipc	s8,0x4
    53b8:	374c0c13          	addi	s8,s8,884 # 9728 <__malloc_av_>
    53bc:	008c2603          	lw	a2,8(s8)
    53c0:	013a86b3          	add	a3,s5,s3
    53c4:	0046a783          	lw	a5,4(a3)
    53c8:	1cd60e63          	beq	a2,a3,55a4 <_realloc_r+0x258>
    53cc:	ffe7f613          	andi	a2,a5,-2
    53d0:	00c68633          	add	a2,a3,a2
    53d4:	00462603          	lw	a2,4(a2)
    53d8:	00167613          	andi	a2,a2,1
    53dc:	14061463          	bnez	a2,5524 <_realloc_r+0x1d8>
    53e0:	ffc7f793          	andi	a5,a5,-4
    53e4:	00f98633          	add	a2,s3,a5
    53e8:	0b465e63          	bge	a2,s4,54a4 <_realloc_r+0x158>
    53ec:	00177713          	andi	a4,a4,1
    53f0:	02071463          	bnez	a4,5418 <_realloc_r+0xcc>
    53f4:	ff842b83          	lw	s7,-8(s0)
    53f8:	417a8bb3          	sub	s7,s5,s7
    53fc:	004ba703          	lw	a4,4(s7)
    5400:	ffc77713          	andi	a4,a4,-4
    5404:	00e787b3          	add	a5,a5,a4
    5408:	01378b33          	add	s6,a5,s3
    540c:	334b5463          	bge	s6,s4,5734 <_realloc_r+0x3e8>
    5410:	00e98b33          	add	s6,s3,a4
    5414:	294b5663          	bge	s6,s4,56a0 <_realloc_r+0x354>
    5418:	00048593          	mv	a1,s1
    541c:	00090513          	mv	a0,s2
    5420:	a50ff0ef          	jal	ra,4670 <_malloc_r>
    5424:	00050493          	mv	s1,a0
    5428:	40050263          	beqz	a0,582c <_realloc_r+0x4e0>
    542c:	ffc42783          	lw	a5,-4(s0)
    5430:	ff850713          	addi	a4,a0,-8
    5434:	ffe7f793          	andi	a5,a5,-2
    5438:	00fa87b3          	add	a5,s5,a5
    543c:	24e78a63          	beq	a5,a4,5690 <_realloc_r+0x344>
    5440:	ffc98613          	addi	a2,s3,-4
    5444:	02400793          	li	a5,36
    5448:	2ec7e063          	bltu	a5,a2,5728 <_realloc_r+0x3dc>
    544c:	01300713          	li	a4,19
    5450:	20c76e63          	bltu	a4,a2,566c <_realloc_r+0x320>
    5454:	00050793          	mv	a5,a0
    5458:	00040713          	mv	a4,s0
    545c:	00072683          	lw	a3,0(a4)
    5460:	00d7a023          	sw	a3,0(a5)
    5464:	00472683          	lw	a3,4(a4)
    5468:	00d7a223          	sw	a3,4(a5)
    546c:	00872703          	lw	a4,8(a4)
    5470:	00e7a423          	sw	a4,8(a5)
    5474:	00090513          	mv	a0,s2
    5478:	00040593          	mv	a1,s0
    547c:	8c9fe0ef          	jal	ra,3d44 <_free_r>
    5480:	00090513          	mv	a0,s2
    5484:	c55ff0ef          	jal	ra,50d8 <__malloc_unlock>
    5488:	0680006f          	j	54f0 <_realloc_r+0x1a4>
    548c:	01000a13          	li	s4,16
    5490:	f29a70e3          	bgeu	s4,s1,53b0 <_realloc_r+0x64>
    5494:	00c00793          	li	a5,12
    5498:	00f92023          	sw	a5,0(s2)
    549c:	00000493          	li	s1,0
    54a0:	0500006f          	j	54f0 <_realloc_r+0x1a4>
    54a4:	00c6a783          	lw	a5,12(a3)
    54a8:	0086a703          	lw	a4,8(a3)
    54ac:	00060993          	mv	s3,a2
    54b0:	00f72623          	sw	a5,12(a4)
    54b4:	00e7a423          	sw	a4,8(a5)
    54b8:	004aa783          	lw	a5,4(s5)
    54bc:	414986b3          	sub	a3,s3,s4
    54c0:	00f00613          	li	a2,15
    54c4:	0017f793          	andi	a5,a5,1
    54c8:	013a8733          	add	a4,s5,s3
    54cc:	0ad66463          	bltu	a2,a3,5574 <_realloc_r+0x228>
    54d0:	0137e7b3          	or	a5,a5,s3
    54d4:	00faa223          	sw	a5,4(s5)
    54d8:	00472783          	lw	a5,4(a4)
    54dc:	0017e793          	ori	a5,a5,1
    54e0:	00f72223          	sw	a5,4(a4)
    54e4:	00090513          	mv	a0,s2
    54e8:	bf1ff0ef          	jal	ra,50d8 <__malloc_unlock>
    54ec:	00040493          	mv	s1,s0
    54f0:	02c12083          	lw	ra,44(sp)
    54f4:	02812403          	lw	s0,40(sp)
    54f8:	02012903          	lw	s2,32(sp)
    54fc:	01c12983          	lw	s3,28(sp)
    5500:	01812a03          	lw	s4,24(sp)
    5504:	01412a83          	lw	s5,20(sp)
    5508:	01012b03          	lw	s6,16(sp)
    550c:	00c12b83          	lw	s7,12(sp)
    5510:	00812c03          	lw	s8,8(sp)
    5514:	00048513          	mv	a0,s1
    5518:	02412483          	lw	s1,36(sp)
    551c:	03010113          	addi	sp,sp,48
    5520:	00008067          	ret
    5524:	00177713          	andi	a4,a4,1
    5528:	ee0718e3          	bnez	a4,5418 <_realloc_r+0xcc>
    552c:	ff842b83          	lw	s7,-8(s0)
    5530:	417a8bb3          	sub	s7,s5,s7
    5534:	004ba703          	lw	a4,4(s7)
    5538:	ffc77713          	andi	a4,a4,-4
    553c:	ed5ff06f          	j	5410 <_realloc_r+0xc4>
    5540:	02812403          	lw	s0,40(sp)
    5544:	02c12083          	lw	ra,44(sp)
    5548:	02412483          	lw	s1,36(sp)
    554c:	02012903          	lw	s2,32(sp)
    5550:	01c12983          	lw	s3,28(sp)
    5554:	01812a03          	lw	s4,24(sp)
    5558:	01412a83          	lw	s5,20(sp)
    555c:	01012b03          	lw	s6,16(sp)
    5560:	00c12b83          	lw	s7,12(sp)
    5564:	00812c03          	lw	s8,8(sp)
    5568:	00060593          	mv	a1,a2
    556c:	03010113          	addi	sp,sp,48
    5570:	900ff06f          	j	4670 <_malloc_r>
    5574:	0147e7b3          	or	a5,a5,s4
    5578:	00faa223          	sw	a5,4(s5)
    557c:	014a85b3          	add	a1,s5,s4
    5580:	0016e693          	ori	a3,a3,1
    5584:	00d5a223          	sw	a3,4(a1)
    5588:	00472783          	lw	a5,4(a4)
    558c:	00858593          	addi	a1,a1,8
    5590:	00090513          	mv	a0,s2
    5594:	0017e793          	ori	a5,a5,1
    5598:	00f72223          	sw	a5,4(a4)
    559c:	fa8fe0ef          	jal	ra,3d44 <_free_r>
    55a0:	f45ff06f          	j	54e4 <_realloc_r+0x198>
    55a4:	ffc7f793          	andi	a5,a5,-4
    55a8:	013786b3          	add	a3,a5,s3
    55ac:	010a0613          	addi	a2,s4,16
    55b0:	22c6de63          	bge	a3,a2,57ec <_realloc_r+0x4a0>
    55b4:	00177713          	andi	a4,a4,1
    55b8:	e60710e3          	bnez	a4,5418 <_realloc_r+0xcc>
    55bc:	ff842b83          	lw	s7,-8(s0)
    55c0:	417a8bb3          	sub	s7,s5,s7
    55c4:	004ba703          	lw	a4,4(s7)
    55c8:	ffc77713          	andi	a4,a4,-4
    55cc:	00e787b3          	add	a5,a5,a4
    55d0:	01378b33          	add	s6,a5,s3
    55d4:	e2cb4ee3          	blt	s6,a2,5410 <_realloc_r+0xc4>
    55d8:	00cba783          	lw	a5,12(s7)
    55dc:	008ba703          	lw	a4,8(s7)
    55e0:	ffc98613          	addi	a2,s3,-4
    55e4:	02400693          	li	a3,36
    55e8:	00f72623          	sw	a5,12(a4)
    55ec:	00e7a423          	sw	a4,8(a5)
    55f0:	008b8493          	addi	s1,s7,8
    55f4:	26c6e263          	bltu	a3,a2,5858 <_realloc_r+0x50c>
    55f8:	01300713          	li	a4,19
    55fc:	00048793          	mv	a5,s1
    5600:	02c77263          	bgeu	a4,a2,5624 <_realloc_r+0x2d8>
    5604:	00042703          	lw	a4,0(s0)
    5608:	01b00793          	li	a5,27
    560c:	00eba423          	sw	a4,8(s7)
    5610:	00442703          	lw	a4,4(s0)
    5614:	00eba623          	sw	a4,12(s7)
    5618:	24c7e863          	bltu	a5,a2,5868 <_realloc_r+0x51c>
    561c:	00840413          	addi	s0,s0,8
    5620:	010b8793          	addi	a5,s7,16
    5624:	00042703          	lw	a4,0(s0)
    5628:	00e7a023          	sw	a4,0(a5)
    562c:	00442703          	lw	a4,4(s0)
    5630:	00e7a223          	sw	a4,4(a5)
    5634:	00842703          	lw	a4,8(s0)
    5638:	00e7a423          	sw	a4,8(a5)
    563c:	014b8733          	add	a4,s7,s4
    5640:	414b07b3          	sub	a5,s6,s4
    5644:	00ec2423          	sw	a4,8(s8)
    5648:	0017e793          	ori	a5,a5,1
    564c:	00f72223          	sw	a5,4(a4)
    5650:	004ba783          	lw	a5,4(s7)
    5654:	00090513          	mv	a0,s2
    5658:	0017f793          	andi	a5,a5,1
    565c:	0147e7b3          	or	a5,a5,s4
    5660:	00fba223          	sw	a5,4(s7)
    5664:	a75ff0ef          	jal	ra,50d8 <__malloc_unlock>
    5668:	e89ff06f          	j	54f0 <_realloc_r+0x1a4>
    566c:	00042683          	lw	a3,0(s0)
    5670:	01b00713          	li	a4,27
    5674:	00d52023          	sw	a3,0(a0)
    5678:	00442683          	lw	a3,4(s0)
    567c:	00d52223          	sw	a3,4(a0)
    5680:	14c76663          	bltu	a4,a2,57cc <_realloc_r+0x480>
    5684:	00840713          	addi	a4,s0,8
    5688:	00850793          	addi	a5,a0,8
    568c:	dd1ff06f          	j	545c <_realloc_r+0x110>
    5690:	ffc52783          	lw	a5,-4(a0)
    5694:	ffc7f793          	andi	a5,a5,-4
    5698:	00f989b3          	add	s3,s3,a5
    569c:	e1dff06f          	j	54b8 <_realloc_r+0x16c>
    56a0:	00cba783          	lw	a5,12(s7)
    56a4:	008ba703          	lw	a4,8(s7)
    56a8:	ffc98613          	addi	a2,s3,-4
    56ac:	02400693          	li	a3,36
    56b0:	00f72623          	sw	a5,12(a4)
    56b4:	00e7a423          	sw	a4,8(a5)
    56b8:	008b8493          	addi	s1,s7,8
    56bc:	10c6e063          	bltu	a3,a2,57bc <_realloc_r+0x470>
    56c0:	01300713          	li	a4,19
    56c4:	00048793          	mv	a5,s1
    56c8:	02c77c63          	bgeu	a4,a2,5700 <_realloc_r+0x3b4>
    56cc:	00042703          	lw	a4,0(s0)
    56d0:	01b00793          	li	a5,27
    56d4:	00eba423          	sw	a4,8(s7)
    56d8:	00442703          	lw	a4,4(s0)
    56dc:	00eba623          	sw	a4,12(s7)
    56e0:	14c7f063          	bgeu	a5,a2,5820 <_realloc_r+0x4d4>
    56e4:	00842783          	lw	a5,8(s0)
    56e8:	00fba823          	sw	a5,16(s7)
    56ec:	00c42783          	lw	a5,12(s0)
    56f0:	00fbaa23          	sw	a5,20(s7)
    56f4:	0ad60663          	beq	a2,a3,57a0 <_realloc_r+0x454>
    56f8:	01040413          	addi	s0,s0,16
    56fc:	018b8793          	addi	a5,s7,24
    5700:	00042703          	lw	a4,0(s0)
    5704:	00e7a023          	sw	a4,0(a5)
    5708:	00442703          	lw	a4,4(s0)
    570c:	00e7a223          	sw	a4,4(a5)
    5710:	00842703          	lw	a4,8(s0)
    5714:	00e7a423          	sw	a4,8(a5)
    5718:	00048413          	mv	s0,s1
    571c:	000b0993          	mv	s3,s6
    5720:	000b8a93          	mv	s5,s7
    5724:	d95ff06f          	j	54b8 <_realloc_r+0x16c>
    5728:	00040593          	mv	a1,s0
    572c:	fa8ff0ef          	jal	ra,4ed4 <memmove>
    5730:	d45ff06f          	j	5474 <_realloc_r+0x128>
    5734:	00c6a783          	lw	a5,12(a3)
    5738:	0086a703          	lw	a4,8(a3)
    573c:	ffc98613          	addi	a2,s3,-4
    5740:	02400693          	li	a3,36
    5744:	00f72623          	sw	a5,12(a4)
    5748:	00e7a423          	sw	a4,8(a5)
    574c:	008ba703          	lw	a4,8(s7)
    5750:	00cba783          	lw	a5,12(s7)
    5754:	008b8493          	addi	s1,s7,8
    5758:	00f72623          	sw	a5,12(a4)
    575c:	00e7a423          	sw	a4,8(a5)
    5760:	04c6ee63          	bltu	a3,a2,57bc <_realloc_r+0x470>
    5764:	01300713          	li	a4,19
    5768:	00048793          	mv	a5,s1
    576c:	f8c77ae3          	bgeu	a4,a2,5700 <_realloc_r+0x3b4>
    5770:	00042703          	lw	a4,0(s0)
    5774:	01b00793          	li	a5,27
    5778:	00eba423          	sw	a4,8(s7)
    577c:	00442703          	lw	a4,4(s0)
    5780:	00eba623          	sw	a4,12(s7)
    5784:	08c7fe63          	bgeu	a5,a2,5820 <_realloc_r+0x4d4>
    5788:	00842703          	lw	a4,8(s0)
    578c:	02400793          	li	a5,36
    5790:	00eba823          	sw	a4,16(s7)
    5794:	00c42703          	lw	a4,12(s0)
    5798:	00ebaa23          	sw	a4,20(s7)
    579c:	f4f61ee3          	bne	a2,a5,56f8 <_realloc_r+0x3ac>
    57a0:	01042703          	lw	a4,16(s0)
    57a4:	020b8793          	addi	a5,s7,32
    57a8:	01840413          	addi	s0,s0,24
    57ac:	00ebac23          	sw	a4,24(s7)
    57b0:	ffc42703          	lw	a4,-4(s0)
    57b4:	00ebae23          	sw	a4,28(s7)
    57b8:	f49ff06f          	j	5700 <_realloc_r+0x3b4>
    57bc:	00040593          	mv	a1,s0
    57c0:	00048513          	mv	a0,s1
    57c4:	f10ff0ef          	jal	ra,4ed4 <memmove>
    57c8:	f51ff06f          	j	5718 <_realloc_r+0x3cc>
    57cc:	00842703          	lw	a4,8(s0)
    57d0:	00e52423          	sw	a4,8(a0)
    57d4:	00c42703          	lw	a4,12(s0)
    57d8:	00e52623          	sw	a4,12(a0)
    57dc:	06f60063          	beq	a2,a5,583c <_realloc_r+0x4f0>
    57e0:	01040713          	addi	a4,s0,16
    57e4:	01050793          	addi	a5,a0,16
    57e8:	c75ff06f          	j	545c <_realloc_r+0x110>
    57ec:	014a8ab3          	add	s5,s5,s4
    57f0:	414687b3          	sub	a5,a3,s4
    57f4:	015c2423          	sw	s5,8(s8)
    57f8:	0017e793          	ori	a5,a5,1
    57fc:	00faa223          	sw	a5,4(s5)
    5800:	ffc42783          	lw	a5,-4(s0)
    5804:	00090513          	mv	a0,s2
    5808:	00040493          	mv	s1,s0
    580c:	0017f793          	andi	a5,a5,1
    5810:	0147e7b3          	or	a5,a5,s4
    5814:	fef42e23          	sw	a5,-4(s0)
    5818:	8c1ff0ef          	jal	ra,50d8 <__malloc_unlock>
    581c:	cd5ff06f          	j	54f0 <_realloc_r+0x1a4>
    5820:	00840413          	addi	s0,s0,8
    5824:	010b8793          	addi	a5,s7,16
    5828:	ed9ff06f          	j	5700 <_realloc_r+0x3b4>
    582c:	00090513          	mv	a0,s2
    5830:	8a9ff0ef          	jal	ra,50d8 <__malloc_unlock>
    5834:	00000493          	li	s1,0
    5838:	cb9ff06f          	j	54f0 <_realloc_r+0x1a4>
    583c:	01042683          	lw	a3,16(s0)
    5840:	01840713          	addi	a4,s0,24
    5844:	01850793          	addi	a5,a0,24
    5848:	00d52823          	sw	a3,16(a0)
    584c:	01442683          	lw	a3,20(s0)
    5850:	00d52a23          	sw	a3,20(a0)
    5854:	c09ff06f          	j	545c <_realloc_r+0x110>
    5858:	00040593          	mv	a1,s0
    585c:	00048513          	mv	a0,s1
    5860:	e74ff0ef          	jal	ra,4ed4 <memmove>
    5864:	dd9ff06f          	j	563c <_realloc_r+0x2f0>
    5868:	00842783          	lw	a5,8(s0)
    586c:	00fba823          	sw	a5,16(s7)
    5870:	00c42783          	lw	a5,12(s0)
    5874:	00fbaa23          	sw	a5,20(s7)
    5878:	00d60863          	beq	a2,a3,5888 <_realloc_r+0x53c>
    587c:	01040413          	addi	s0,s0,16
    5880:	018b8793          	addi	a5,s7,24
    5884:	da1ff06f          	j	5624 <_realloc_r+0x2d8>
    5888:	01042703          	lw	a4,16(s0)
    588c:	020b8793          	addi	a5,s7,32
    5890:	01840413          	addi	s0,s0,24
    5894:	00ebac23          	sw	a4,24(s7)
    5898:	ffc42703          	lw	a4,-4(s0)
    589c:	00ebae23          	sw	a4,28(s7)
    58a0:	d85ff06f          	j	5624 <_realloc_r+0x2d8>

000058a4 <_sbrk_r>:
    58a4:	ff010113          	addi	sp,sp,-16
    58a8:	00812423          	sw	s0,8(sp)
    58ac:	00050413          	mv	s0,a0
    58b0:	00058513          	mv	a0,a1
    58b4:	00006797          	auipc	a5,0x6
    58b8:	e007a623          	sw	zero,-500(a5) # b6c0 <errno>
    58bc:	00112623          	sw	ra,12(sp)
    58c0:	625010ef          	jal	ra,76e4 <_sbrk>
    58c4:	fff00793          	li	a5,-1
    58c8:	00f50a63          	beq	a0,a5,58dc <_sbrk_r+0x38>
    58cc:	00c12083          	lw	ra,12(sp)
    58d0:	00812403          	lw	s0,8(sp)
    58d4:	01010113          	addi	sp,sp,16
    58d8:	00008067          	ret
    58dc:	00006797          	auipc	a5,0x6
    58e0:	de47a783          	lw	a5,-540(a5) # b6c0 <errno>
    58e4:	fe0784e3          	beqz	a5,58cc <_sbrk_r+0x28>
    58e8:	00c12083          	lw	ra,12(sp)
    58ec:	00f42023          	sw	a5,0(s0)
    58f0:	00812403          	lw	s0,8(sp)
    58f4:	01010113          	addi	sp,sp,16
    58f8:	00008067          	ret

000058fc <_init_signal_r>:
    58fc:	2dc52783          	lw	a5,732(a0)
    5900:	00078663          	beqz	a5,590c <_init_signal_r+0x10>
    5904:	00000513          	li	a0,0
    5908:	00008067          	ret
    590c:	ff010113          	addi	sp,sp,-16
    5910:	08000593          	li	a1,128
    5914:	00812423          	sw	s0,8(sp)
    5918:	00112623          	sw	ra,12(sp)
    591c:	00050413          	mv	s0,a0
    5920:	d51fe0ef          	jal	ra,4670 <_malloc_r>
    5924:	2ca42e23          	sw	a0,732(s0)
    5928:	02050463          	beqz	a0,5950 <_init_signal_r+0x54>
    592c:	08050793          	addi	a5,a0,128
    5930:	00052023          	sw	zero,0(a0)
    5934:	00450513          	addi	a0,a0,4
    5938:	fef51ce3          	bne	a0,a5,5930 <_init_signal_r+0x34>
    593c:	00000513          	li	a0,0
    5940:	00c12083          	lw	ra,12(sp)
    5944:	00812403          	lw	s0,8(sp)
    5948:	01010113          	addi	sp,sp,16
    594c:	00008067          	ret
    5950:	fff00513          	li	a0,-1
    5954:	fedff06f          	j	5940 <_init_signal_r+0x44>

00005958 <_signal_r>:
    5958:	fe010113          	addi	sp,sp,-32
    595c:	00912a23          	sw	s1,20(sp)
    5960:	00112e23          	sw	ra,28(sp)
    5964:	00812c23          	sw	s0,24(sp)
    5968:	01f00793          	li	a5,31
    596c:	00050493          	mv	s1,a0
    5970:	02b7ea63          	bltu	a5,a1,59a4 <_signal_r+0x4c>
    5974:	2dc52783          	lw	a5,732(a0)
    5978:	00058413          	mv	s0,a1
    597c:	02078c63          	beqz	a5,59b4 <_signal_r+0x5c>
    5980:	00241413          	slli	s0,s0,0x2
    5984:	008787b3          	add	a5,a5,s0
    5988:	0007a503          	lw	a0,0(a5)
    598c:	00c7a023          	sw	a2,0(a5)
    5990:	01c12083          	lw	ra,28(sp)
    5994:	01812403          	lw	s0,24(sp)
    5998:	01412483          	lw	s1,20(sp)
    599c:	02010113          	addi	sp,sp,32
    59a0:	00008067          	ret
    59a4:	01600793          	li	a5,22
    59a8:	00f52023          	sw	a5,0(a0)
    59ac:	fff00513          	li	a0,-1
    59b0:	fe1ff06f          	j	5990 <_signal_r+0x38>
    59b4:	08000593          	li	a1,128
    59b8:	00c12623          	sw	a2,12(sp)
    59bc:	cb5fe0ef          	jal	ra,4670 <_malloc_r>
    59c0:	2ca4ae23          	sw	a0,732(s1)
    59c4:	00c12603          	lw	a2,12(sp)
    59c8:	00050793          	mv	a5,a0
    59cc:	00050713          	mv	a4,a0
    59d0:	08050693          	addi	a3,a0,128
    59d4:	fc050ce3          	beqz	a0,59ac <_signal_r+0x54>
    59d8:	00072023          	sw	zero,0(a4)
    59dc:	00470713          	addi	a4,a4,4
    59e0:	fed71ce3          	bne	a4,a3,59d8 <_signal_r+0x80>
    59e4:	f9dff06f          	j	5980 <_signal_r+0x28>

000059e8 <_raise_r>:
    59e8:	ff010113          	addi	sp,sp,-16
    59ec:	00912223          	sw	s1,4(sp)
    59f0:	00112623          	sw	ra,12(sp)
    59f4:	00812423          	sw	s0,8(sp)
    59f8:	01f00793          	li	a5,31
    59fc:	00050493          	mv	s1,a0
    5a00:	08b7ee63          	bltu	a5,a1,5a9c <_raise_r+0xb4>
    5a04:	2dc52783          	lw	a5,732(a0)
    5a08:	00058413          	mv	s0,a1
    5a0c:	04078463          	beqz	a5,5a54 <_raise_r+0x6c>
    5a10:	00259713          	slli	a4,a1,0x2
    5a14:	00e787b3          	add	a5,a5,a4
    5a18:	0007a703          	lw	a4,0(a5)
    5a1c:	02070c63          	beqz	a4,5a54 <_raise_r+0x6c>
    5a20:	00100693          	li	a3,1
    5a24:	00d70c63          	beq	a4,a3,5a3c <_raise_r+0x54>
    5a28:	fff00693          	li	a3,-1
    5a2c:	04d70863          	beq	a4,a3,5a7c <_raise_r+0x94>
    5a30:	0007a023          	sw	zero,0(a5)
    5a34:	00058513          	mv	a0,a1
    5a38:	000700e7          	jalr	a4
    5a3c:	00000513          	li	a0,0
    5a40:	00c12083          	lw	ra,12(sp)
    5a44:	00812403          	lw	s0,8(sp)
    5a48:	00412483          	lw	s1,4(sp)
    5a4c:	01010113          	addi	sp,sp,16
    5a50:	00008067          	ret
    5a54:	00048513          	mv	a0,s1
    5a58:	420000ef          	jal	ra,5e78 <_getpid_r>
    5a5c:	00040613          	mv	a2,s0
    5a60:	00812403          	lw	s0,8(sp)
    5a64:	00c12083          	lw	ra,12(sp)
    5a68:	00050593          	mv	a1,a0
    5a6c:	00048513          	mv	a0,s1
    5a70:	00412483          	lw	s1,4(sp)
    5a74:	01010113          	addi	sp,sp,16
    5a78:	3a00006f          	j	5e18 <_kill_r>
    5a7c:	00c12083          	lw	ra,12(sp)
    5a80:	00812403          	lw	s0,8(sp)
    5a84:	01600793          	li	a5,22
    5a88:	00f52023          	sw	a5,0(a0)
    5a8c:	00412483          	lw	s1,4(sp)
    5a90:	00100513          	li	a0,1
    5a94:	01010113          	addi	sp,sp,16
    5a98:	00008067          	ret
    5a9c:	01600793          	li	a5,22
    5aa0:	00f52023          	sw	a5,0(a0)
    5aa4:	fff00513          	li	a0,-1
    5aa8:	f99ff06f          	j	5a40 <_raise_r+0x58>

00005aac <__sigtramp_r>:
    5aac:	01f00793          	li	a5,31
    5ab0:	0cb7ea63          	bltu	a5,a1,5b84 <__sigtramp_r+0xd8>
    5ab4:	2dc52783          	lw	a5,732(a0)
    5ab8:	ff010113          	addi	sp,sp,-16
    5abc:	00812423          	sw	s0,8(sp)
    5ac0:	00912223          	sw	s1,4(sp)
    5ac4:	00112623          	sw	ra,12(sp)
    5ac8:	00058413          	mv	s0,a1
    5acc:	00050493          	mv	s1,a0
    5ad0:	08078063          	beqz	a5,5b50 <__sigtramp_r+0xa4>
    5ad4:	00241713          	slli	a4,s0,0x2
    5ad8:	00e787b3          	add	a5,a5,a4
    5adc:	0007a703          	lw	a4,0(a5)
    5ae0:	02070c63          	beqz	a4,5b18 <__sigtramp_r+0x6c>
    5ae4:	fff00693          	li	a3,-1
    5ae8:	06d70063          	beq	a4,a3,5b48 <__sigtramp_r+0x9c>
    5aec:	00100693          	li	a3,1
    5af0:	04d70063          	beq	a4,a3,5b30 <__sigtramp_r+0x84>
    5af4:	00040513          	mv	a0,s0
    5af8:	0007a023          	sw	zero,0(a5)
    5afc:	000700e7          	jalr	a4
    5b00:	00000513          	li	a0,0
    5b04:	00c12083          	lw	ra,12(sp)
    5b08:	00812403          	lw	s0,8(sp)
    5b0c:	00412483          	lw	s1,4(sp)
    5b10:	01010113          	addi	sp,sp,16
    5b14:	00008067          	ret
    5b18:	00c12083          	lw	ra,12(sp)
    5b1c:	00812403          	lw	s0,8(sp)
    5b20:	00412483          	lw	s1,4(sp)
    5b24:	00100513          	li	a0,1
    5b28:	01010113          	addi	sp,sp,16
    5b2c:	00008067          	ret
    5b30:	00c12083          	lw	ra,12(sp)
    5b34:	00812403          	lw	s0,8(sp)
    5b38:	00412483          	lw	s1,4(sp)
    5b3c:	00300513          	li	a0,3
    5b40:	01010113          	addi	sp,sp,16
    5b44:	00008067          	ret
    5b48:	00200513          	li	a0,2
    5b4c:	fb9ff06f          	j	5b04 <__sigtramp_r+0x58>
    5b50:	08000593          	li	a1,128
    5b54:	b1dfe0ef          	jal	ra,4670 <_malloc_r>
    5b58:	2ca4ae23          	sw	a0,732(s1)
    5b5c:	00050793          	mv	a5,a0
    5b60:	00050e63          	beqz	a0,5b7c <__sigtramp_r+0xd0>
    5b64:	00050713          	mv	a4,a0
    5b68:	08050693          	addi	a3,a0,128
    5b6c:	00072023          	sw	zero,0(a4)
    5b70:	00470713          	addi	a4,a4,4
    5b74:	fee69ce3          	bne	a3,a4,5b6c <__sigtramp_r+0xc0>
    5b78:	f5dff06f          	j	5ad4 <__sigtramp_r+0x28>
    5b7c:	fff00513          	li	a0,-1
    5b80:	f85ff06f          	j	5b04 <__sigtramp_r+0x58>
    5b84:	fff00513          	li	a0,-1
    5b88:	00008067          	ret

00005b8c <raise>:
    5b8c:	ff010113          	addi	sp,sp,-16
    5b90:	00912223          	sw	s1,4(sp)
    5b94:	00112623          	sw	ra,12(sp)
    5b98:	00812423          	sw	s0,8(sp)
    5b9c:	01f00793          	li	a5,31
    5ba0:	8241a483          	lw	s1,-2012(gp) # 9b54 <_impure_ptr>
    5ba4:	08a7ec63          	bltu	a5,a0,5c3c <raise+0xb0>
    5ba8:	2dc4a783          	lw	a5,732(s1)
    5bac:	00050413          	mv	s0,a0
    5bb0:	04078263          	beqz	a5,5bf4 <raise+0x68>
    5bb4:	00251713          	slli	a4,a0,0x2
    5bb8:	00e787b3          	add	a5,a5,a4
    5bbc:	0007a703          	lw	a4,0(a5)
    5bc0:	02070a63          	beqz	a4,5bf4 <raise+0x68>
    5bc4:	00100693          	li	a3,1
    5bc8:	00d70a63          	beq	a4,a3,5bdc <raise+0x50>
    5bcc:	fff00693          	li	a3,-1
    5bd0:	04d70663          	beq	a4,a3,5c1c <raise+0x90>
    5bd4:	0007a023          	sw	zero,0(a5)
    5bd8:	000700e7          	jalr	a4
    5bdc:	00000513          	li	a0,0
    5be0:	00c12083          	lw	ra,12(sp)
    5be4:	00812403          	lw	s0,8(sp)
    5be8:	00412483          	lw	s1,4(sp)
    5bec:	01010113          	addi	sp,sp,16
    5bf0:	00008067          	ret
    5bf4:	00048513          	mv	a0,s1
    5bf8:	280000ef          	jal	ra,5e78 <_getpid_r>
    5bfc:	00040613          	mv	a2,s0
    5c00:	00812403          	lw	s0,8(sp)
    5c04:	00c12083          	lw	ra,12(sp)
    5c08:	00050593          	mv	a1,a0
    5c0c:	00048513          	mv	a0,s1
    5c10:	00412483          	lw	s1,4(sp)
    5c14:	01010113          	addi	sp,sp,16
    5c18:	2000006f          	j	5e18 <_kill_r>
    5c1c:	00c12083          	lw	ra,12(sp)
    5c20:	00812403          	lw	s0,8(sp)
    5c24:	01600793          	li	a5,22
    5c28:	00f4a023          	sw	a5,0(s1)
    5c2c:	00100513          	li	a0,1
    5c30:	00412483          	lw	s1,4(sp)
    5c34:	01010113          	addi	sp,sp,16
    5c38:	00008067          	ret
    5c3c:	01600793          	li	a5,22
    5c40:	00f4a023          	sw	a5,0(s1)
    5c44:	fff00513          	li	a0,-1
    5c48:	f99ff06f          	j	5be0 <raise+0x54>

00005c4c <signal>:
    5c4c:	ff010113          	addi	sp,sp,-16
    5c50:	01212023          	sw	s2,0(sp)
    5c54:	00112623          	sw	ra,12(sp)
    5c58:	00812423          	sw	s0,8(sp)
    5c5c:	00912223          	sw	s1,4(sp)
    5c60:	01f00793          	li	a5,31
    5c64:	8241a903          	lw	s2,-2012(gp) # 9b54 <_impure_ptr>
    5c68:	02a7ee63          	bltu	a5,a0,5ca4 <signal+0x58>
    5c6c:	00050413          	mv	s0,a0
    5c70:	2dc92503          	lw	a0,732(s2)
    5c74:	00058493          	mv	s1,a1
    5c78:	02050e63          	beqz	a0,5cb4 <signal+0x68>
    5c7c:	00241413          	slli	s0,s0,0x2
    5c80:	008507b3          	add	a5,a0,s0
    5c84:	0007a503          	lw	a0,0(a5)
    5c88:	0097a023          	sw	s1,0(a5)
    5c8c:	00c12083          	lw	ra,12(sp)
    5c90:	00812403          	lw	s0,8(sp)
    5c94:	00412483          	lw	s1,4(sp)
    5c98:	00012903          	lw	s2,0(sp)
    5c9c:	01010113          	addi	sp,sp,16
    5ca0:	00008067          	ret
    5ca4:	01600793          	li	a5,22
    5ca8:	00f92023          	sw	a5,0(s2)
    5cac:	fff00513          	li	a0,-1
    5cb0:	fddff06f          	j	5c8c <signal+0x40>
    5cb4:	08000593          	li	a1,128
    5cb8:	00090513          	mv	a0,s2
    5cbc:	9b5fe0ef          	jal	ra,4670 <_malloc_r>
    5cc0:	2ca92e23          	sw	a0,732(s2)
    5cc4:	00050793          	mv	a5,a0
    5cc8:	08050713          	addi	a4,a0,128
    5ccc:	fe0500e3          	beqz	a0,5cac <signal+0x60>
    5cd0:	0007a023          	sw	zero,0(a5)
    5cd4:	00478793          	addi	a5,a5,4
    5cd8:	fee79ce3          	bne	a5,a4,5cd0 <signal+0x84>
    5cdc:	fa1ff06f          	j	5c7c <signal+0x30>

00005ce0 <_init_signal>:
    5ce0:	ff010113          	addi	sp,sp,-16
    5ce4:	00812423          	sw	s0,8(sp)
    5ce8:	8241a403          	lw	s0,-2012(gp) # 9b54 <_impure_ptr>
    5cec:	2dc42783          	lw	a5,732(s0)
    5cf0:	00112623          	sw	ra,12(sp)
    5cf4:	00078c63          	beqz	a5,5d0c <_init_signal+0x2c>
    5cf8:	00000513          	li	a0,0
    5cfc:	00c12083          	lw	ra,12(sp)
    5d00:	00812403          	lw	s0,8(sp)
    5d04:	01010113          	addi	sp,sp,16
    5d08:	00008067          	ret
    5d0c:	08000593          	li	a1,128
    5d10:	00040513          	mv	a0,s0
    5d14:	95dfe0ef          	jal	ra,4670 <_malloc_r>
    5d18:	2ca42e23          	sw	a0,732(s0)
    5d1c:	00050c63          	beqz	a0,5d34 <_init_signal+0x54>
    5d20:	08050793          	addi	a5,a0,128
    5d24:	00052023          	sw	zero,0(a0)
    5d28:	00450513          	addi	a0,a0,4
    5d2c:	fef51ce3          	bne	a0,a5,5d24 <_init_signal+0x44>
    5d30:	fc9ff06f          	j	5cf8 <_init_signal+0x18>
    5d34:	fff00513          	li	a0,-1
    5d38:	fc5ff06f          	j	5cfc <_init_signal+0x1c>

00005d3c <__sigtramp>:
    5d3c:	ff010113          	addi	sp,sp,-16
    5d40:	00912223          	sw	s1,4(sp)
    5d44:	00112623          	sw	ra,12(sp)
    5d48:	00812423          	sw	s0,8(sp)
    5d4c:	01f00793          	li	a5,31
    5d50:	8241a483          	lw	s1,-2012(gp) # 9b54 <_impure_ptr>
    5d54:	0aa7ee63          	bltu	a5,a0,5e10 <__sigtramp+0xd4>
    5d58:	2dc4a783          	lw	a5,732(s1)
    5d5c:	00050413          	mv	s0,a0
    5d60:	08078063          	beqz	a5,5de0 <__sigtramp+0xa4>
    5d64:	00241713          	slli	a4,s0,0x2
    5d68:	00e787b3          	add	a5,a5,a4
    5d6c:	0007a703          	lw	a4,0(a5)
    5d70:	02070c63          	beqz	a4,5da8 <__sigtramp+0x6c>
    5d74:	fff00693          	li	a3,-1
    5d78:	06d70063          	beq	a4,a3,5dd8 <__sigtramp+0x9c>
    5d7c:	00100693          	li	a3,1
    5d80:	04d70063          	beq	a4,a3,5dc0 <__sigtramp+0x84>
    5d84:	00040513          	mv	a0,s0
    5d88:	0007a023          	sw	zero,0(a5)
    5d8c:	000700e7          	jalr	a4
    5d90:	00000513          	li	a0,0
    5d94:	00c12083          	lw	ra,12(sp)
    5d98:	00812403          	lw	s0,8(sp)
    5d9c:	00412483          	lw	s1,4(sp)
    5da0:	01010113          	addi	sp,sp,16
    5da4:	00008067          	ret
    5da8:	00c12083          	lw	ra,12(sp)
    5dac:	00812403          	lw	s0,8(sp)
    5db0:	00412483          	lw	s1,4(sp)
    5db4:	00100513          	li	a0,1
    5db8:	01010113          	addi	sp,sp,16
    5dbc:	00008067          	ret
    5dc0:	00c12083          	lw	ra,12(sp)
    5dc4:	00812403          	lw	s0,8(sp)
    5dc8:	00412483          	lw	s1,4(sp)
    5dcc:	00300513          	li	a0,3
    5dd0:	01010113          	addi	sp,sp,16
    5dd4:	00008067          	ret
    5dd8:	00200513          	li	a0,2
    5ddc:	fb9ff06f          	j	5d94 <__sigtramp+0x58>
    5de0:	08000593          	li	a1,128
    5de4:	00048513          	mv	a0,s1
    5de8:	889fe0ef          	jal	ra,4670 <_malloc_r>
    5dec:	2ca4ae23          	sw	a0,732(s1)
    5df0:	00050793          	mv	a5,a0
    5df4:	00050e63          	beqz	a0,5e10 <__sigtramp+0xd4>
    5df8:	00050713          	mv	a4,a0
    5dfc:	08050693          	addi	a3,a0,128
    5e00:	00072023          	sw	zero,0(a4)
    5e04:	00470713          	addi	a4,a4,4
    5e08:	fee69ce3          	bne	a3,a4,5e00 <__sigtramp+0xc4>
    5e0c:	f59ff06f          	j	5d64 <__sigtramp+0x28>
    5e10:	fff00513          	li	a0,-1
    5e14:	f81ff06f          	j	5d94 <__sigtramp+0x58>

00005e18 <_kill_r>:
    5e18:	ff010113          	addi	sp,sp,-16
    5e1c:	00058713          	mv	a4,a1
    5e20:	00812423          	sw	s0,8(sp)
    5e24:	00060593          	mv	a1,a2
    5e28:	00050413          	mv	s0,a0
    5e2c:	00070513          	mv	a0,a4
    5e30:	00006797          	auipc	a5,0x6
    5e34:	8807a823          	sw	zero,-1904(a5) # b6c0 <errno>
    5e38:	00112623          	sw	ra,12(sp)
    5e3c:	294010ef          	jal	ra,70d0 <_kill>
    5e40:	fff00793          	li	a5,-1
    5e44:	00f50a63          	beq	a0,a5,5e58 <_kill_r+0x40>
    5e48:	00c12083          	lw	ra,12(sp)
    5e4c:	00812403          	lw	s0,8(sp)
    5e50:	01010113          	addi	sp,sp,16
    5e54:	00008067          	ret
    5e58:	00006797          	auipc	a5,0x6
    5e5c:	8687a783          	lw	a5,-1944(a5) # b6c0 <errno>
    5e60:	fe0784e3          	beqz	a5,5e48 <_kill_r+0x30>
    5e64:	00c12083          	lw	ra,12(sp)
    5e68:	00f42023          	sw	a5,0(s0)
    5e6c:	00812403          	lw	s0,8(sp)
    5e70:	01010113          	addi	sp,sp,16
    5e74:	00008067          	ret

00005e78 <_getpid_r>:
    5e78:	0a40106f          	j	6f1c <_getpid>

00005e7c <__sread>:
    5e7c:	ff010113          	addi	sp,sp,-16
    5e80:	00812423          	sw	s0,8(sp)
    5e84:	00058413          	mv	s0,a1
    5e88:	00e59583          	lh	a1,14(a1)
    5e8c:	00112623          	sw	ra,12(sp)
    5e90:	461000ef          	jal	ra,6af0 <_read_r>
    5e94:	02054063          	bltz	a0,5eb4 <__sread+0x38>
    5e98:	05042783          	lw	a5,80(s0)
    5e9c:	00c12083          	lw	ra,12(sp)
    5ea0:	00a787b3          	add	a5,a5,a0
    5ea4:	04f42823          	sw	a5,80(s0)
    5ea8:	00812403          	lw	s0,8(sp)
    5eac:	01010113          	addi	sp,sp,16
    5eb0:	00008067          	ret
    5eb4:	00c45783          	lhu	a5,12(s0)
    5eb8:	fffff737          	lui	a4,0xfffff
    5ebc:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5ec0:	00e7f7b3          	and	a5,a5,a4
    5ec4:	00c12083          	lw	ra,12(sp)
    5ec8:	00f41623          	sh	a5,12(s0)
    5ecc:	00812403          	lw	s0,8(sp)
    5ed0:	01010113          	addi	sp,sp,16
    5ed4:	00008067          	ret

00005ed8 <__seofread>:
    5ed8:	00000513          	li	a0,0
    5edc:	00008067          	ret

00005ee0 <__swrite>:
    5ee0:	00c59783          	lh	a5,12(a1)
    5ee4:	fe010113          	addi	sp,sp,-32
    5ee8:	00812c23          	sw	s0,24(sp)
    5eec:	00912a23          	sw	s1,20(sp)
    5ef0:	01212823          	sw	s2,16(sp)
    5ef4:	01312623          	sw	s3,12(sp)
    5ef8:	00112e23          	sw	ra,28(sp)
    5efc:	1007f713          	andi	a4,a5,256
    5f00:	00058413          	mv	s0,a1
    5f04:	00050493          	mv	s1,a0
    5f08:	00060913          	mv	s2,a2
    5f0c:	00068993          	mv	s3,a3
    5f10:	04071063          	bnez	a4,5f50 <__swrite+0x70>
    5f14:	fffff737          	lui	a4,0xfffff
    5f18:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5f1c:	00e7f7b3          	and	a5,a5,a4
    5f20:	00e41583          	lh	a1,14(s0)
    5f24:	00f41623          	sh	a5,12(s0)
    5f28:	01812403          	lw	s0,24(sp)
    5f2c:	01c12083          	lw	ra,28(sp)
    5f30:	00098693          	mv	a3,s3
    5f34:	00090613          	mv	a2,s2
    5f38:	00c12983          	lw	s3,12(sp)
    5f3c:	01012903          	lw	s2,16(sp)
    5f40:	00048513          	mv	a0,s1
    5f44:	01412483          	lw	s1,20(sp)
    5f48:	02010113          	addi	sp,sp,32
    5f4c:	cc8fd06f          	j	3414 <_write_r>
    5f50:	00e59583          	lh	a1,14(a1)
    5f54:	00200693          	li	a3,2
    5f58:	00000613          	li	a2,0
    5f5c:	0c9000ef          	jal	ra,6824 <_lseek_r>
    5f60:	00c41783          	lh	a5,12(s0)
    5f64:	fb1ff06f          	j	5f14 <__swrite+0x34>

00005f68 <__sseek>:
    5f68:	ff010113          	addi	sp,sp,-16
    5f6c:	00812423          	sw	s0,8(sp)
    5f70:	00058413          	mv	s0,a1
    5f74:	00e59583          	lh	a1,14(a1)
    5f78:	00112623          	sw	ra,12(sp)
    5f7c:	0a9000ef          	jal	ra,6824 <_lseek_r>
    5f80:	fff00793          	li	a5,-1
    5f84:	02f50863          	beq	a0,a5,5fb4 <__sseek+0x4c>
    5f88:	00c45783          	lhu	a5,12(s0)
    5f8c:	00001737          	lui	a4,0x1
    5f90:	00c12083          	lw	ra,12(sp)
    5f94:	00e7e7b3          	or	a5,a5,a4
    5f98:	01079793          	slli	a5,a5,0x10
    5f9c:	4107d793          	srai	a5,a5,0x10
    5fa0:	04a42823          	sw	a0,80(s0)
    5fa4:	00f41623          	sh	a5,12(s0)
    5fa8:	00812403          	lw	s0,8(sp)
    5fac:	01010113          	addi	sp,sp,16
    5fb0:	00008067          	ret
    5fb4:	00c45783          	lhu	a5,12(s0)
    5fb8:	fffff737          	lui	a4,0xfffff
    5fbc:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5fc0:	00e7f7b3          	and	a5,a5,a4
    5fc4:	01079793          	slli	a5,a5,0x10
    5fc8:	4107d793          	srai	a5,a5,0x10
    5fcc:	00c12083          	lw	ra,12(sp)
    5fd0:	00f41623          	sh	a5,12(s0)
    5fd4:	00812403          	lw	s0,8(sp)
    5fd8:	01010113          	addi	sp,sp,16
    5fdc:	00008067          	ret

00005fe0 <__sclose>:
    5fe0:	00e59583          	lh	a1,14(a1)
    5fe4:	ed0fd06f          	j	36b4 <_close_r>

00005fe8 <__swbuf_r>:
    5fe8:	fe010113          	addi	sp,sp,-32
    5fec:	00812c23          	sw	s0,24(sp)
    5ff0:	00912a23          	sw	s1,20(sp)
    5ff4:	01212823          	sw	s2,16(sp)
    5ff8:	00112e23          	sw	ra,28(sp)
    5ffc:	01312623          	sw	s3,12(sp)
    6000:	00050913          	mv	s2,a0
    6004:	00058493          	mv	s1,a1
    6008:	00060413          	mv	s0,a2
    600c:	00050663          	beqz	a0,6018 <__swbuf_r+0x30>
    6010:	03852783          	lw	a5,56(a0)
    6014:	14078063          	beqz	a5,6154 <__swbuf_r+0x16c>
    6018:	01842783          	lw	a5,24(s0)
    601c:	00c41703          	lh	a4,12(s0)
    6020:	00f42423          	sw	a5,8(s0)
    6024:	00877793          	andi	a5,a4,8
    6028:	08078263          	beqz	a5,60ac <__swbuf_r+0xc4>
    602c:	01042783          	lw	a5,16(s0)
    6030:	06078e63          	beqz	a5,60ac <__swbuf_r+0xc4>
    6034:	01271693          	slli	a3,a4,0x12
    6038:	0ff4f993          	zext.b	s3,s1
    603c:	0ff4f493          	zext.b	s1,s1
    6040:	0806da63          	bgez	a3,60d4 <__swbuf_r+0xec>
    6044:	00042703          	lw	a4,0(s0)
    6048:	01442683          	lw	a3,20(s0)
    604c:	40f707b3          	sub	a5,a4,a5
    6050:	0ad7da63          	bge	a5,a3,6104 <__swbuf_r+0x11c>
    6054:	00842683          	lw	a3,8(s0)
    6058:	00170613          	addi	a2,a4,1
    605c:	00c42023          	sw	a2,0(s0)
    6060:	fff68693          	addi	a3,a3,-1
    6064:	00d42423          	sw	a3,8(s0)
    6068:	01370023          	sb	s3,0(a4)
    606c:	01442703          	lw	a4,20(s0)
    6070:	00178793          	addi	a5,a5,1
    6074:	0cf70463          	beq	a4,a5,613c <__swbuf_r+0x154>
    6078:	00c45783          	lhu	a5,12(s0)
    607c:	0017f793          	andi	a5,a5,1
    6080:	00078663          	beqz	a5,608c <__swbuf_r+0xa4>
    6084:	00a00793          	li	a5,10
    6088:	0af48a63          	beq	s1,a5,613c <__swbuf_r+0x154>
    608c:	01c12083          	lw	ra,28(sp)
    6090:	01812403          	lw	s0,24(sp)
    6094:	01012903          	lw	s2,16(sp)
    6098:	00c12983          	lw	s3,12(sp)
    609c:	00048513          	mv	a0,s1
    60a0:	01412483          	lw	s1,20(sp)
    60a4:	02010113          	addi	sp,sp,32
    60a8:	00008067          	ret
    60ac:	00040593          	mv	a1,s0
    60b0:	00090513          	mv	a0,s2
    60b4:	0b8000ef          	jal	ra,616c <__swsetup_r>
    60b8:	08051a63          	bnez	a0,614c <__swbuf_r+0x164>
    60bc:	00c41703          	lh	a4,12(s0)
    60c0:	0ff4f993          	zext.b	s3,s1
    60c4:	01042783          	lw	a5,16(s0)
    60c8:	01271693          	slli	a3,a4,0x12
    60cc:	0ff4f493          	zext.b	s1,s1
    60d0:	f606cae3          	bltz	a3,6044 <__swbuf_r+0x5c>
    60d4:	06442683          	lw	a3,100(s0)
    60d8:	00002637          	lui	a2,0x2
    60dc:	00c76733          	or	a4,a4,a2
    60e0:	ffffe637          	lui	a2,0xffffe
    60e4:	fff60613          	addi	a2,a2,-1 # ffffdfff <__alt_data_end+0xfffedfff>
    60e8:	00c6f6b3          	and	a3,a3,a2
    60ec:	00e41623          	sh	a4,12(s0)
    60f0:	00042703          	lw	a4,0(s0)
    60f4:	06d42223          	sw	a3,100(s0)
    60f8:	01442683          	lw	a3,20(s0)
    60fc:	40f707b3          	sub	a5,a4,a5
    6100:	f4d7cae3          	blt	a5,a3,6054 <__swbuf_r+0x6c>
    6104:	00040593          	mv	a1,s0
    6108:	00090513          	mv	a0,s2
    610c:	570000ef          	jal	ra,667c <_fflush_r>
    6110:	02051e63          	bnez	a0,614c <__swbuf_r+0x164>
    6114:	00042703          	lw	a4,0(s0)
    6118:	00842683          	lw	a3,8(s0)
    611c:	00100793          	li	a5,1
    6120:	00170613          	addi	a2,a4,1
    6124:	fff68693          	addi	a3,a3,-1
    6128:	00c42023          	sw	a2,0(s0)
    612c:	00d42423          	sw	a3,8(s0)
    6130:	01370023          	sb	s3,0(a4)
    6134:	01442703          	lw	a4,20(s0)
    6138:	f4f710e3          	bne	a4,a5,6078 <__swbuf_r+0x90>
    613c:	00040593          	mv	a1,s0
    6140:	00090513          	mv	a0,s2
    6144:	538000ef          	jal	ra,667c <_fflush_r>
    6148:	f40502e3          	beqz	a0,608c <__swbuf_r+0xa4>
    614c:	fff00493          	li	s1,-1
    6150:	f3dff06f          	j	608c <__swbuf_r+0xa4>
    6154:	ec4fd0ef          	jal	ra,3818 <__sinit>
    6158:	ec1ff06f          	j	6018 <__swbuf_r+0x30>

0000615c <__swbuf>:
    615c:	00058613          	mv	a2,a1
    6160:	00050593          	mv	a1,a0
    6164:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    6168:	e81ff06f          	j	5fe8 <__swbuf_r>

0000616c <__swsetup_r>:
    616c:	ff010113          	addi	sp,sp,-16
    6170:	00812423          	sw	s0,8(sp)
    6174:	00912223          	sw	s1,4(sp)
    6178:	00112623          	sw	ra,12(sp)
    617c:	8241a783          	lw	a5,-2012(gp) # 9b54 <_impure_ptr>
    6180:	00050493          	mv	s1,a0
    6184:	00058413          	mv	s0,a1
    6188:	00078663          	beqz	a5,6194 <__swsetup_r+0x28>
    618c:	0387a703          	lw	a4,56(a5)
    6190:	08070063          	beqz	a4,6210 <__swsetup_r+0xa4>
    6194:	00c41783          	lh	a5,12(s0)
    6198:	0087f713          	andi	a4,a5,8
    619c:	08070463          	beqz	a4,6224 <__swsetup_r+0xb8>
    61a0:	01042703          	lw	a4,16(s0)
    61a4:	0a070063          	beqz	a4,6244 <__swsetup_r+0xd8>
    61a8:	0017f693          	andi	a3,a5,1
    61ac:	02068863          	beqz	a3,61dc <__swsetup_r+0x70>
    61b0:	01442683          	lw	a3,20(s0)
    61b4:	00042423          	sw	zero,8(s0)
    61b8:	00000513          	li	a0,0
    61bc:	40d006b3          	neg	a3,a3
    61c0:	00d42c23          	sw	a3,24(s0)
    61c4:	02070a63          	beqz	a4,61f8 <__swsetup_r+0x8c>
    61c8:	00c12083          	lw	ra,12(sp)
    61cc:	00812403          	lw	s0,8(sp)
    61d0:	00412483          	lw	s1,4(sp)
    61d4:	01010113          	addi	sp,sp,16
    61d8:	00008067          	ret
    61dc:	0027f693          	andi	a3,a5,2
    61e0:	00000613          	li	a2,0
    61e4:	00069463          	bnez	a3,61ec <__swsetup_r+0x80>
    61e8:	01442603          	lw	a2,20(s0)
    61ec:	00c42423          	sw	a2,8(s0)
    61f0:	00000513          	li	a0,0
    61f4:	fc071ae3          	bnez	a4,61c8 <__swsetup_r+0x5c>
    61f8:	0807f713          	andi	a4,a5,128
    61fc:	fc0706e3          	beqz	a4,61c8 <__swsetup_r+0x5c>
    6200:	0407e793          	ori	a5,a5,64
    6204:	00f41623          	sh	a5,12(s0)
    6208:	fff00513          	li	a0,-1
    620c:	fbdff06f          	j	61c8 <__swsetup_r+0x5c>
    6210:	00078513          	mv	a0,a5
    6214:	e04fd0ef          	jal	ra,3818 <__sinit>
    6218:	00c41783          	lh	a5,12(s0)
    621c:	0087f713          	andi	a4,a5,8
    6220:	f80710e3          	bnez	a4,61a0 <__swsetup_r+0x34>
    6224:	0107f713          	andi	a4,a5,16
    6228:	06070a63          	beqz	a4,629c <__swsetup_r+0x130>
    622c:	0047f713          	andi	a4,a5,4
    6230:	02071c63          	bnez	a4,6268 <__swsetup_r+0xfc>
    6234:	01042703          	lw	a4,16(s0)
    6238:	0087e793          	ori	a5,a5,8
    623c:	00f41623          	sh	a5,12(s0)
    6240:	f60714e3          	bnez	a4,61a8 <__swsetup_r+0x3c>
    6244:	2807f693          	andi	a3,a5,640
    6248:	20000613          	li	a2,512
    624c:	f4c68ee3          	beq	a3,a2,61a8 <__swsetup_r+0x3c>
    6250:	00040593          	mv	a1,s0
    6254:	00048513          	mv	a0,s1
    6258:	630000ef          	jal	ra,6888 <__smakebuf_r>
    625c:	00c41783          	lh	a5,12(s0)
    6260:	01042703          	lw	a4,16(s0)
    6264:	f45ff06f          	j	61a8 <__swsetup_r+0x3c>
    6268:	03042583          	lw	a1,48(s0)
    626c:	00058e63          	beqz	a1,6288 <__swsetup_r+0x11c>
    6270:	04040713          	addi	a4,s0,64
    6274:	00e58863          	beq	a1,a4,6284 <__swsetup_r+0x118>
    6278:	00048513          	mv	a0,s1
    627c:	ac9fd0ef          	jal	ra,3d44 <_free_r>
    6280:	00c41783          	lh	a5,12(s0)
    6284:	02042823          	sw	zero,48(s0)
    6288:	01042703          	lw	a4,16(s0)
    628c:	fdb7f793          	andi	a5,a5,-37
    6290:	00042223          	sw	zero,4(s0)
    6294:	00e42023          	sw	a4,0(s0)
    6298:	fa1ff06f          	j	6238 <__swsetup_r+0xcc>
    629c:	00900713          	li	a4,9
    62a0:	00e4a023          	sw	a4,0(s1)
    62a4:	0407e793          	ori	a5,a5,64
    62a8:	f5dff06f          	j	6204 <__swsetup_r+0x98>

000062ac <_fclose_r>:
    62ac:	ff010113          	addi	sp,sp,-16
    62b0:	00112623          	sw	ra,12(sp)
    62b4:	00812423          	sw	s0,8(sp)
    62b8:	00912223          	sw	s1,4(sp)
    62bc:	01212023          	sw	s2,0(sp)
    62c0:	0c058a63          	beqz	a1,6394 <_fclose_r+0xe8>
    62c4:	00058413          	mv	s0,a1
    62c8:	00050493          	mv	s1,a0
    62cc:	00050663          	beqz	a0,62d8 <_fclose_r+0x2c>
    62d0:	03852783          	lw	a5,56(a0)
    62d4:	0e078063          	beqz	a5,63b4 <_fclose_r+0x108>
    62d8:	06442783          	lw	a5,100(s0)
    62dc:	00c41703          	lh	a4,12(s0)
    62e0:	0017f793          	andi	a5,a5,1
    62e4:	0a079663          	bnez	a5,6390 <_fclose_r+0xe4>
    62e8:	20077713          	andi	a4,a4,512
    62ec:	10070063          	beqz	a4,63ec <_fclose_r+0x140>
    62f0:	00040593          	mv	a1,s0
    62f4:	00048513          	mv	a0,s1
    62f8:	138000ef          	jal	ra,6430 <__sflush_r>
    62fc:	02c42783          	lw	a5,44(s0)
    6300:	00050913          	mv	s2,a0
    6304:	00078a63          	beqz	a5,6318 <_fclose_r+0x6c>
    6308:	01c42583          	lw	a1,28(s0)
    630c:	00048513          	mv	a0,s1
    6310:	000780e7          	jalr	a5
    6314:	0a054c63          	bltz	a0,63cc <_fclose_r+0x120>
    6318:	00c45783          	lhu	a5,12(s0)
    631c:	0807f793          	andi	a5,a5,128
    6320:	0a079e63          	bnez	a5,63dc <_fclose_r+0x130>
    6324:	03042583          	lw	a1,48(s0)
    6328:	00058c63          	beqz	a1,6340 <_fclose_r+0x94>
    632c:	04040793          	addi	a5,s0,64
    6330:	00f58663          	beq	a1,a5,633c <_fclose_r+0x90>
    6334:	00048513          	mv	a0,s1
    6338:	a0dfd0ef          	jal	ra,3d44 <_free_r>
    633c:	02042823          	sw	zero,48(s0)
    6340:	04442583          	lw	a1,68(s0)
    6344:	00058863          	beqz	a1,6354 <_fclose_r+0xa8>
    6348:	00048513          	mv	a0,s1
    634c:	9f9fd0ef          	jal	ra,3d44 <_free_r>
    6350:	04042223          	sw	zero,68(s0)
    6354:	fd0fd0ef          	jal	ra,3b24 <__sfp_lock_acquire>
    6358:	06442783          	lw	a5,100(s0)
    635c:	00041623          	sh	zero,12(s0)
    6360:	0017f793          	andi	a5,a5,1
    6364:	0a078a63          	beqz	a5,6418 <_fclose_r+0x16c>
    6368:	05842503          	lw	a0,88(s0)
    636c:	ae0fe0ef          	jal	ra,464c <__retarget_lock_close_recursive>
    6370:	fc0fd0ef          	jal	ra,3b30 <__sfp_lock_release>
    6374:	00c12083          	lw	ra,12(sp)
    6378:	00812403          	lw	s0,8(sp)
    637c:	00412483          	lw	s1,4(sp)
    6380:	00090513          	mv	a0,s2
    6384:	00012903          	lw	s2,0(sp)
    6388:	01010113          	addi	sp,sp,16
    638c:	00008067          	ret
    6390:	f60710e3          	bnez	a4,62f0 <_fclose_r+0x44>
    6394:	00000913          	li	s2,0
    6398:	00c12083          	lw	ra,12(sp)
    639c:	00812403          	lw	s0,8(sp)
    63a0:	00412483          	lw	s1,4(sp)
    63a4:	00090513          	mv	a0,s2
    63a8:	00012903          	lw	s2,0(sp)
    63ac:	01010113          	addi	sp,sp,16
    63b0:	00008067          	ret
    63b4:	c64fd0ef          	jal	ra,3818 <__sinit>
    63b8:	06442783          	lw	a5,100(s0)
    63bc:	00c41703          	lh	a4,12(s0)
    63c0:	0017f793          	andi	a5,a5,1
    63c4:	fc0796e3          	bnez	a5,6390 <_fclose_r+0xe4>
    63c8:	f21ff06f          	j	62e8 <_fclose_r+0x3c>
    63cc:	00c45783          	lhu	a5,12(s0)
    63d0:	fff00913          	li	s2,-1
    63d4:	0807f793          	andi	a5,a5,128
    63d8:	f40786e3          	beqz	a5,6324 <_fclose_r+0x78>
    63dc:	01042583          	lw	a1,16(s0)
    63e0:	00048513          	mv	a0,s1
    63e4:	961fd0ef          	jal	ra,3d44 <_free_r>
    63e8:	f3dff06f          	j	6324 <_fclose_r+0x78>
    63ec:	05842503          	lw	a0,88(s0)
    63f0:	a64fe0ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    63f4:	00c41783          	lh	a5,12(s0)
    63f8:	ee079ce3          	bnez	a5,62f0 <_fclose_r+0x44>
    63fc:	06442783          	lw	a5,100(s0)
    6400:	0017f793          	andi	a5,a5,1
    6404:	f80798e3          	bnez	a5,6394 <_fclose_r+0xe8>
    6408:	05842503          	lw	a0,88(s0)
    640c:	00000913          	li	s2,0
    6410:	a5cfe0ef          	jal	ra,466c <__retarget_lock_release_recursive>
    6414:	f85ff06f          	j	6398 <_fclose_r+0xec>
    6418:	05842503          	lw	a0,88(s0)
    641c:	a50fe0ef          	jal	ra,466c <__retarget_lock_release_recursive>
    6420:	f49ff06f          	j	6368 <_fclose_r+0xbc>

00006424 <fclose>:
    6424:	00050593          	mv	a1,a0
    6428:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    642c:	e81ff06f          	j	62ac <_fclose_r>

00006430 <__sflush_r>:
    6430:	00c59783          	lh	a5,12(a1)
    6434:	fe010113          	addi	sp,sp,-32
    6438:	00812c23          	sw	s0,24(sp)
    643c:	01312623          	sw	s3,12(sp)
    6440:	00112e23          	sw	ra,28(sp)
    6444:	00912a23          	sw	s1,20(sp)
    6448:	01212823          	sw	s2,16(sp)
    644c:	0087f713          	andi	a4,a5,8
    6450:	00058413          	mv	s0,a1
    6454:	00050993          	mv	s3,a0
    6458:	12071263          	bnez	a4,657c <__sflush_r+0x14c>
    645c:	00001737          	lui	a4,0x1
    6460:	80070713          	addi	a4,a4,-2048 # 800 <alt_log_private_printf+0x240>
    6464:	0045a683          	lw	a3,4(a1)
    6468:	00e7e733          	or	a4,a5,a4
    646c:	00e59623          	sh	a4,12(a1)
    6470:	18d05863          	blez	a3,6600 <__sflush_r+0x1d0>
    6474:	02842803          	lw	a6,40(s0)
    6478:	0e080263          	beqz	a6,655c <__sflush_r+0x12c>
    647c:	00c7d793          	srli	a5,a5,0xc
    6480:	0009a483          	lw	s1,0(s3)
    6484:	0017f793          	andi	a5,a5,1
    6488:	0009a023          	sw	zero,0(s3)
    648c:	01c42583          	lw	a1,28(s0)
    6490:	18079063          	bnez	a5,6610 <__sflush_r+0x1e0>
    6494:	00000613          	li	a2,0
    6498:	00100693          	li	a3,1
    649c:	00098513          	mv	a0,s3
    64a0:	000800e7          	jalr	a6
    64a4:	fff00793          	li	a5,-1
    64a8:	00050613          	mv	a2,a0
    64ac:	1af50063          	beq	a0,a5,664c <__sflush_r+0x21c>
    64b0:	00c41703          	lh	a4,12(s0)
    64b4:	02842803          	lw	a6,40(s0)
    64b8:	01c42583          	lw	a1,28(s0)
    64bc:	00477713          	andi	a4,a4,4
    64c0:	00070e63          	beqz	a4,64dc <__sflush_r+0xac>
    64c4:	00442703          	lw	a4,4(s0)
    64c8:	03042783          	lw	a5,48(s0)
    64cc:	40e60633          	sub	a2,a2,a4
    64d0:	00078663          	beqz	a5,64dc <__sflush_r+0xac>
    64d4:	03c42783          	lw	a5,60(s0)
    64d8:	40f60633          	sub	a2,a2,a5
    64dc:	00000693          	li	a3,0
    64e0:	00098513          	mv	a0,s3
    64e4:	000800e7          	jalr	a6
    64e8:	fff00793          	li	a5,-1
    64ec:	12f51663          	bne	a0,a5,6618 <__sflush_r+0x1e8>
    64f0:	0009a683          	lw	a3,0(s3)
    64f4:	01d00793          	li	a5,29
    64f8:	0cd7ee63          	bltu	a5,a3,65d4 <__sflush_r+0x1a4>
    64fc:	dfc00737          	lui	a4,0xdfc00
    6500:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xdfbefffe>
    6504:	40d75733          	sra	a4,a4,a3
    6508:	00177713          	andi	a4,a4,1
    650c:	00c41783          	lh	a5,12(s0)
    6510:	0c071463          	bnez	a4,65d8 <__sflush_r+0x1a8>
    6514:	01042603          	lw	a2,16(s0)
    6518:	fffff737          	lui	a4,0xfffff
    651c:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    6520:	00e7f733          	and	a4,a5,a4
    6524:	00c7d793          	srli	a5,a5,0xc
    6528:	00e41623          	sh	a4,12(s0)
    652c:	00042223          	sw	zero,4(s0)
    6530:	00c42023          	sw	a2,0(s0)
    6534:	0017f793          	andi	a5,a5,1
    6538:	12079c63          	bnez	a5,6670 <__sflush_r+0x240>
    653c:	03042583          	lw	a1,48(s0)
    6540:	0099a023          	sw	s1,0(s3)
    6544:	00058c63          	beqz	a1,655c <__sflush_r+0x12c>
    6548:	04040793          	addi	a5,s0,64
    654c:	00f58663          	beq	a1,a5,6558 <__sflush_r+0x128>
    6550:	00098513          	mv	a0,s3
    6554:	ff0fd0ef          	jal	ra,3d44 <_free_r>
    6558:	02042823          	sw	zero,48(s0)
    655c:	00000513          	li	a0,0
    6560:	01c12083          	lw	ra,28(sp)
    6564:	01812403          	lw	s0,24(sp)
    6568:	01412483          	lw	s1,20(sp)
    656c:	01012903          	lw	s2,16(sp)
    6570:	00c12983          	lw	s3,12(sp)
    6574:	02010113          	addi	sp,sp,32
    6578:	00008067          	ret
    657c:	0105a903          	lw	s2,16(a1)
    6580:	fc090ee3          	beqz	s2,655c <__sflush_r+0x12c>
    6584:	0005a483          	lw	s1,0(a1)
    6588:	0037f793          	andi	a5,a5,3
    658c:	0125a023          	sw	s2,0(a1)
    6590:	412484b3          	sub	s1,s1,s2
    6594:	00000713          	li	a4,0
    6598:	00079463          	bnez	a5,65a0 <__sflush_r+0x170>
    659c:	0145a703          	lw	a4,20(a1)
    65a0:	00e42423          	sw	a4,8(s0)
    65a4:	00904863          	bgtz	s1,65b4 <__sflush_r+0x184>
    65a8:	fb5ff06f          	j	655c <__sflush_r+0x12c>
    65ac:	00a90933          	add	s2,s2,a0
    65b0:	fa9056e3          	blez	s1,655c <__sflush_r+0x12c>
    65b4:	02442783          	lw	a5,36(s0)
    65b8:	01c42583          	lw	a1,28(s0)
    65bc:	00048693          	mv	a3,s1
    65c0:	00090613          	mv	a2,s2
    65c4:	00098513          	mv	a0,s3
    65c8:	000780e7          	jalr	a5
    65cc:	40a484b3          	sub	s1,s1,a0
    65d0:	fca04ee3          	bgtz	a0,65ac <__sflush_r+0x17c>
    65d4:	00c41783          	lh	a5,12(s0)
    65d8:	0407e793          	ori	a5,a5,64
    65dc:	01c12083          	lw	ra,28(sp)
    65e0:	00f41623          	sh	a5,12(s0)
    65e4:	01812403          	lw	s0,24(sp)
    65e8:	01412483          	lw	s1,20(sp)
    65ec:	01012903          	lw	s2,16(sp)
    65f0:	00c12983          	lw	s3,12(sp)
    65f4:	fff00513          	li	a0,-1
    65f8:	02010113          	addi	sp,sp,32
    65fc:	00008067          	ret
    6600:	03c5a683          	lw	a3,60(a1)
    6604:	e6d048e3          	bgtz	a3,6474 <__sflush_r+0x44>
    6608:	00000513          	li	a0,0
    660c:	f55ff06f          	j	6560 <__sflush_r+0x130>
    6610:	05042603          	lw	a2,80(s0)
    6614:	ea9ff06f          	j	64bc <__sflush_r+0x8c>
    6618:	00c41783          	lh	a5,12(s0)
    661c:	01042683          	lw	a3,16(s0)
    6620:	fffff737          	lui	a4,0xfffff
    6624:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    6628:	00e7f733          	and	a4,a5,a4
    662c:	00c7d793          	srli	a5,a5,0xc
    6630:	00e41623          	sh	a4,12(s0)
    6634:	00042223          	sw	zero,4(s0)
    6638:	00d42023          	sw	a3,0(s0)
    663c:	0017f793          	andi	a5,a5,1
    6640:	ee078ee3          	beqz	a5,653c <__sflush_r+0x10c>
    6644:	04a42823          	sw	a0,80(s0)
    6648:	ef5ff06f          	j	653c <__sflush_r+0x10c>
    664c:	0009a783          	lw	a5,0(s3)
    6650:	e60780e3          	beqz	a5,64b0 <__sflush_r+0x80>
    6654:	01d00713          	li	a4,29
    6658:	00e78663          	beq	a5,a4,6664 <__sflush_r+0x234>
    665c:	01600713          	li	a4,22
    6660:	f6e79ae3          	bne	a5,a4,65d4 <__sflush_r+0x1a4>
    6664:	0099a023          	sw	s1,0(s3)
    6668:	00000513          	li	a0,0
    666c:	ef5ff06f          	j	6560 <__sflush_r+0x130>
    6670:	ec0696e3          	bnez	a3,653c <__sflush_r+0x10c>
    6674:	04a42823          	sw	a0,80(s0)
    6678:	ec5ff06f          	j	653c <__sflush_r+0x10c>

0000667c <_fflush_r>:
    667c:	ff010113          	addi	sp,sp,-16
    6680:	00812423          	sw	s0,8(sp)
    6684:	00912223          	sw	s1,4(sp)
    6688:	00112623          	sw	ra,12(sp)
    668c:	01212023          	sw	s2,0(sp)
    6690:	00050493          	mv	s1,a0
    6694:	00058413          	mv	s0,a1
    6698:	00050663          	beqz	a0,66a4 <_fflush_r+0x28>
    669c:	03852783          	lw	a5,56(a0)
    66a0:	06078463          	beqz	a5,6708 <_fflush_r+0x8c>
    66a4:	00c41783          	lh	a5,12(s0)
    66a8:	00000913          	li	s2,0
    66ac:	04078063          	beqz	a5,66ec <_fflush_r+0x70>
    66b0:	06442703          	lw	a4,100(s0)
    66b4:	00177713          	andi	a4,a4,1
    66b8:	00071663          	bnez	a4,66c4 <_fflush_r+0x48>
    66bc:	2007f793          	andi	a5,a5,512
    66c0:	04078863          	beqz	a5,6710 <_fflush_r+0x94>
    66c4:	00040593          	mv	a1,s0
    66c8:	00048513          	mv	a0,s1
    66cc:	d65ff0ef          	jal	ra,6430 <__sflush_r>
    66d0:	06442783          	lw	a5,100(s0)
    66d4:	00050913          	mv	s2,a0
    66d8:	0017f793          	andi	a5,a5,1
    66dc:	00079863          	bnez	a5,66ec <_fflush_r+0x70>
    66e0:	00c45783          	lhu	a5,12(s0)
    66e4:	2007f793          	andi	a5,a5,512
    66e8:	04078863          	beqz	a5,6738 <_fflush_r+0xbc>
    66ec:	00c12083          	lw	ra,12(sp)
    66f0:	00812403          	lw	s0,8(sp)
    66f4:	00412483          	lw	s1,4(sp)
    66f8:	00090513          	mv	a0,s2
    66fc:	00012903          	lw	s2,0(sp)
    6700:	01010113          	addi	sp,sp,16
    6704:	00008067          	ret
    6708:	910fd0ef          	jal	ra,3818 <__sinit>
    670c:	f99ff06f          	j	66a4 <_fflush_r+0x28>
    6710:	05842503          	lw	a0,88(s0)
    6714:	f41fd0ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    6718:	00040593          	mv	a1,s0
    671c:	00048513          	mv	a0,s1
    6720:	d11ff0ef          	jal	ra,6430 <__sflush_r>
    6724:	06442783          	lw	a5,100(s0)
    6728:	00050913          	mv	s2,a0
    672c:	0017f793          	andi	a5,a5,1
    6730:	fa079ee3          	bnez	a5,66ec <_fflush_r+0x70>
    6734:	fadff06f          	j	66e0 <_fflush_r+0x64>
    6738:	05842503          	lw	a0,88(s0)
    673c:	f31fd0ef          	jal	ra,466c <__retarget_lock_release_recursive>
    6740:	00c12083          	lw	ra,12(sp)
    6744:	00812403          	lw	s0,8(sp)
    6748:	00412483          	lw	s1,4(sp)
    674c:	00090513          	mv	a0,s2
    6750:	00012903          	lw	s2,0(sp)
    6754:	01010113          	addi	sp,sp,16
    6758:	00008067          	ret

0000675c <fflush>:
    675c:	0a050a63          	beqz	a0,6810 <fflush+0xb4>
    6760:	ff010113          	addi	sp,sp,-16
    6764:	00812423          	sw	s0,8(sp)
    6768:	01212023          	sw	s2,0(sp)
    676c:	00112623          	sw	ra,12(sp)
    6770:	00912223          	sw	s1,4(sp)
    6774:	8241a903          	lw	s2,-2012(gp) # 9b54 <_impure_ptr>
    6778:	00050413          	mv	s0,a0
    677c:	00090663          	beqz	s2,6788 <fflush+0x2c>
    6780:	03892783          	lw	a5,56(s2)
    6784:	06078463          	beqz	a5,67ec <fflush+0x90>
    6788:	00c41783          	lh	a5,12(s0)
    678c:	00000493          	li	s1,0
    6790:	04078063          	beqz	a5,67d0 <fflush+0x74>
    6794:	06442703          	lw	a4,100(s0)
    6798:	00177713          	andi	a4,a4,1
    679c:	00071663          	bnez	a4,67a8 <fflush+0x4c>
    67a0:	2007f793          	andi	a5,a5,512
    67a4:	04078a63          	beqz	a5,67f8 <fflush+0x9c>
    67a8:	00040593          	mv	a1,s0
    67ac:	00090513          	mv	a0,s2
    67b0:	c81ff0ef          	jal	ra,6430 <__sflush_r>
    67b4:	06442783          	lw	a5,100(s0)
    67b8:	00050493          	mv	s1,a0
    67bc:	0017f793          	andi	a5,a5,1
    67c0:	00079863          	bnez	a5,67d0 <fflush+0x74>
    67c4:	00c45783          	lhu	a5,12(s0)
    67c8:	2007f793          	andi	a5,a5,512
    67cc:	02078c63          	beqz	a5,6804 <fflush+0xa8>
    67d0:	00c12083          	lw	ra,12(sp)
    67d4:	00812403          	lw	s0,8(sp)
    67d8:	00012903          	lw	s2,0(sp)
    67dc:	00048513          	mv	a0,s1
    67e0:	00412483          	lw	s1,4(sp)
    67e4:	01010113          	addi	sp,sp,16
    67e8:	00008067          	ret
    67ec:	00090513          	mv	a0,s2
    67f0:	828fd0ef          	jal	ra,3818 <__sinit>
    67f4:	f95ff06f          	j	6788 <fflush+0x2c>
    67f8:	05842503          	lw	a0,88(s0)
    67fc:	e59fd0ef          	jal	ra,4654 <__retarget_lock_acquire_recursive>
    6800:	fa9ff06f          	j	67a8 <fflush+0x4c>
    6804:	05842503          	lw	a0,88(s0)
    6808:	e65fd0ef          	jal	ra,466c <__retarget_lock_release_recursive>
    680c:	fc5ff06f          	j	67d0 <fflush+0x74>
    6810:	00000597          	auipc	a1,0x0
    6814:	e6c58593          	addi	a1,a1,-404 # 667c <_fflush_r>
    6818:	00002517          	auipc	a0,0x2
    681c:	83c52503          	lw	a0,-1988(a0) # 8054 <_global_impure_ptr>
    6820:	d6dfd06f          	j	458c <_fwalk_reent>

00006824 <_lseek_r>:
    6824:	ff010113          	addi	sp,sp,-16
    6828:	00058713          	mv	a4,a1
    682c:	00812423          	sw	s0,8(sp)
    6830:	00060593          	mv	a1,a2
    6834:	00050413          	mv	s0,a0
    6838:	00068613          	mv	a2,a3
    683c:	00070513          	mv	a0,a4
    6840:	00005797          	auipc	a5,0x5
    6844:	e807a023          	sw	zero,-384(a5) # b6c0 <errno>
    6848:	00112623          	sw	ra,12(sp)
    684c:	1c5000ef          	jal	ra,7210 <_lseek>
    6850:	fff00793          	li	a5,-1
    6854:	00f50a63          	beq	a0,a5,6868 <_lseek_r+0x44>
    6858:	00c12083          	lw	ra,12(sp)
    685c:	00812403          	lw	s0,8(sp)
    6860:	01010113          	addi	sp,sp,16
    6864:	00008067          	ret
    6868:	00005797          	auipc	a5,0x5
    686c:	e587a783          	lw	a5,-424(a5) # b6c0 <errno>
    6870:	fe0784e3          	beqz	a5,6858 <_lseek_r+0x34>
    6874:	00c12083          	lw	ra,12(sp)
    6878:	00f42023          	sw	a5,0(s0)
    687c:	00812403          	lw	s0,8(sp)
    6880:	01010113          	addi	sp,sp,16
    6884:	00008067          	ret

00006888 <__smakebuf_r>:
    6888:	00c59783          	lh	a5,12(a1)
    688c:	f8010113          	addi	sp,sp,-128
    6890:	06812c23          	sw	s0,120(sp)
    6894:	06112e23          	sw	ra,124(sp)
    6898:	06912a23          	sw	s1,116(sp)
    689c:	07212823          	sw	s2,112(sp)
    68a0:	07312623          	sw	s3,108(sp)
    68a4:	07412423          	sw	s4,104(sp)
    68a8:	0027f713          	andi	a4,a5,2
    68ac:	00058413          	mv	s0,a1
    68b0:	02070c63          	beqz	a4,68e8 <__smakebuf_r+0x60>
    68b4:	04358793          	addi	a5,a1,67
    68b8:	00f5a023          	sw	a5,0(a1)
    68bc:	00f5a823          	sw	a5,16(a1)
    68c0:	00100793          	li	a5,1
    68c4:	00f5aa23          	sw	a5,20(a1)
    68c8:	07c12083          	lw	ra,124(sp)
    68cc:	07812403          	lw	s0,120(sp)
    68d0:	07412483          	lw	s1,116(sp)
    68d4:	07012903          	lw	s2,112(sp)
    68d8:	06c12983          	lw	s3,108(sp)
    68dc:	06812a03          	lw	s4,104(sp)
    68e0:	08010113          	addi	sp,sp,128
    68e4:	00008067          	ret
    68e8:	00e59583          	lh	a1,14(a1)
    68ec:	00050493          	mv	s1,a0
    68f0:	0805cc63          	bltz	a1,6988 <__smakebuf_r+0x100>
    68f4:	00810613          	addi	a2,sp,8
    68f8:	25c000ef          	jal	ra,6b54 <_fstat_r>
    68fc:	08054463          	bltz	a0,6984 <__smakebuf_r+0xfc>
    6900:	00c12783          	lw	a5,12(sp)
    6904:	0000f937          	lui	s2,0xf
    6908:	00001a37          	lui	s4,0x1
    690c:	00f97933          	and	s2,s2,a5
    6910:	ffffe7b7          	lui	a5,0xffffe
    6914:	00f90933          	add	s2,s2,a5
    6918:	00193913          	seqz	s2,s2
    691c:	40000993          	li	s3,1024
    6920:	800a0a13          	addi	s4,s4,-2048 # 800 <alt_log_private_printf+0x240>
    6924:	00098593          	mv	a1,s3
    6928:	00048513          	mv	a0,s1
    692c:	d45fd0ef          	jal	ra,4670 <_malloc_r>
    6930:	00c41783          	lh	a5,12(s0)
    6934:	06050e63          	beqz	a0,69b0 <__smakebuf_r+0x128>
    6938:	ffffd717          	auipc	a4,0xffffd
    693c:	dd470713          	addi	a4,a4,-556 # 370c <_cleanup_r>
    6940:	02e4ae23          	sw	a4,60(s1)
    6944:	0807e793          	ori	a5,a5,128
    6948:	00f41623          	sh	a5,12(s0)
    694c:	00a42023          	sw	a0,0(s0)
    6950:	00a42823          	sw	a0,16(s0)
    6954:	01342a23          	sw	s3,20(s0)
    6958:	08091863          	bnez	s2,69e8 <__smakebuf_r+0x160>
    695c:	0147e7b3          	or	a5,a5,s4
    6960:	07c12083          	lw	ra,124(sp)
    6964:	00f41623          	sh	a5,12(s0)
    6968:	07812403          	lw	s0,120(sp)
    696c:	07412483          	lw	s1,116(sp)
    6970:	07012903          	lw	s2,112(sp)
    6974:	06c12983          	lw	s3,108(sp)
    6978:	06812a03          	lw	s4,104(sp)
    697c:	08010113          	addi	sp,sp,128
    6980:	00008067          	ret
    6984:	00c41783          	lh	a5,12(s0)
    6988:	0807f793          	andi	a5,a5,128
    698c:	00000913          	li	s2,0
    6990:	04078663          	beqz	a5,69dc <__smakebuf_r+0x154>
    6994:	04000993          	li	s3,64
    6998:	00098593          	mv	a1,s3
    699c:	00048513          	mv	a0,s1
    69a0:	cd1fd0ef          	jal	ra,4670 <_malloc_r>
    69a4:	00c41783          	lh	a5,12(s0)
    69a8:	00000a13          	li	s4,0
    69ac:	f80516e3          	bnez	a0,6938 <__smakebuf_r+0xb0>
    69b0:	2007f713          	andi	a4,a5,512
    69b4:	f0071ae3          	bnez	a4,68c8 <__smakebuf_r+0x40>
    69b8:	ffc7f793          	andi	a5,a5,-4
    69bc:	0027e793          	ori	a5,a5,2
    69c0:	04340713          	addi	a4,s0,67
    69c4:	00f41623          	sh	a5,12(s0)
    69c8:	00100793          	li	a5,1
    69cc:	00e42023          	sw	a4,0(s0)
    69d0:	00e42823          	sw	a4,16(s0)
    69d4:	00f42a23          	sw	a5,20(s0)
    69d8:	ef1ff06f          	j	68c8 <__smakebuf_r+0x40>
    69dc:	40000993          	li	s3,1024
    69e0:	00000a13          	li	s4,0
    69e4:	f41ff06f          	j	6924 <__smakebuf_r+0x9c>
    69e8:	00e41583          	lh	a1,14(s0)
    69ec:	00048513          	mv	a0,s1
    69f0:	1c4000ef          	jal	ra,6bb4 <_isatty_r>
    69f4:	00051663          	bnez	a0,6a00 <__smakebuf_r+0x178>
    69f8:	00c41783          	lh	a5,12(s0)
    69fc:	f61ff06f          	j	695c <__smakebuf_r+0xd4>
    6a00:	00c45783          	lhu	a5,12(s0)
    6a04:	ffc7f793          	andi	a5,a5,-4
    6a08:	0017e793          	ori	a5,a5,1
    6a0c:	01079793          	slli	a5,a5,0x10
    6a10:	4107d793          	srai	a5,a5,0x10
    6a14:	f49ff06f          	j	695c <__smakebuf_r+0xd4>

00006a18 <__swhatbuf_r>:
    6a18:	f9010113          	addi	sp,sp,-112
    6a1c:	06812423          	sw	s0,104(sp)
    6a20:	00058413          	mv	s0,a1
    6a24:	00e59583          	lh	a1,14(a1)
    6a28:	06912223          	sw	s1,100(sp)
    6a2c:	07212023          	sw	s2,96(sp)
    6a30:	06112623          	sw	ra,108(sp)
    6a34:	00060493          	mv	s1,a2
    6a38:	00068913          	mv	s2,a3
    6a3c:	0405ca63          	bltz	a1,6a90 <__swhatbuf_r+0x78>
    6a40:	00810613          	addi	a2,sp,8
    6a44:	110000ef          	jal	ra,6b54 <_fstat_r>
    6a48:	04054463          	bltz	a0,6a90 <__swhatbuf_r+0x78>
    6a4c:	00c12703          	lw	a4,12(sp)
    6a50:	0000f7b7          	lui	a5,0xf
    6a54:	06c12083          	lw	ra,108(sp)
    6a58:	00e7f7b3          	and	a5,a5,a4
    6a5c:	ffffe737          	lui	a4,0xffffe
    6a60:	00e787b3          	add	a5,a5,a4
    6a64:	06812403          	lw	s0,104(sp)
    6a68:	0017b793          	seqz	a5,a5
    6a6c:	00f92023          	sw	a5,0(s2) # f000 <__alt_heap_start+0x3830>
    6a70:	40000713          	li	a4,1024
    6a74:	00e4a023          	sw	a4,0(s1)
    6a78:	00001537          	lui	a0,0x1
    6a7c:	06412483          	lw	s1,100(sp)
    6a80:	06012903          	lw	s2,96(sp)
    6a84:	80050513          	addi	a0,a0,-2048 # 800 <alt_log_private_printf+0x240>
    6a88:	07010113          	addi	sp,sp,112
    6a8c:	00008067          	ret
    6a90:	00c45783          	lhu	a5,12(s0)
    6a94:	0807f793          	andi	a5,a5,128
    6a98:	02078863          	beqz	a5,6ac8 <__swhatbuf_r+0xb0>
    6a9c:	06c12083          	lw	ra,108(sp)
    6aa0:	06812403          	lw	s0,104(sp)
    6aa4:	00000793          	li	a5,0
    6aa8:	00f92023          	sw	a5,0(s2)
    6aac:	04000713          	li	a4,64
    6ab0:	00e4a023          	sw	a4,0(s1)
    6ab4:	06012903          	lw	s2,96(sp)
    6ab8:	06412483          	lw	s1,100(sp)
    6abc:	00000513          	li	a0,0
    6ac0:	07010113          	addi	sp,sp,112
    6ac4:	00008067          	ret
    6ac8:	06c12083          	lw	ra,108(sp)
    6acc:	06812403          	lw	s0,104(sp)
    6ad0:	00f92023          	sw	a5,0(s2)
    6ad4:	40000713          	li	a4,1024
    6ad8:	00e4a023          	sw	a4,0(s1)
    6adc:	06012903          	lw	s2,96(sp)
    6ae0:	06412483          	lw	s1,100(sp)
    6ae4:	00000513          	li	a0,0
    6ae8:	07010113          	addi	sp,sp,112
    6aec:	00008067          	ret

00006af0 <_read_r>:
    6af0:	ff010113          	addi	sp,sp,-16
    6af4:	00058713          	mv	a4,a1
    6af8:	00812423          	sw	s0,8(sp)
    6afc:	00060593          	mv	a1,a2
    6b00:	00050413          	mv	s0,a0
    6b04:	00068613          	mv	a2,a3
    6b08:	00070513          	mv	a0,a4
    6b0c:	00005797          	auipc	a5,0x5
    6b10:	ba07aa23          	sw	zero,-1100(a5) # b6c0 <errno>
    6b14:	00112623          	sw	ra,12(sp)
    6b18:	2c5000ef          	jal	ra,75dc <_read>
    6b1c:	fff00793          	li	a5,-1
    6b20:	00f50a63          	beq	a0,a5,6b34 <_read_r+0x44>
    6b24:	00c12083          	lw	ra,12(sp)
    6b28:	00812403          	lw	s0,8(sp)
    6b2c:	01010113          	addi	sp,sp,16
    6b30:	00008067          	ret
    6b34:	00005797          	auipc	a5,0x5
    6b38:	b8c7a783          	lw	a5,-1140(a5) # b6c0 <errno>
    6b3c:	fe0784e3          	beqz	a5,6b24 <_read_r+0x34>
    6b40:	00c12083          	lw	ra,12(sp)
    6b44:	00f42023          	sw	a5,0(s0)
    6b48:	00812403          	lw	s0,8(sp)
    6b4c:	01010113          	addi	sp,sp,16
    6b50:	00008067          	ret

00006b54 <_fstat_r>:
    6b54:	ff010113          	addi	sp,sp,-16
    6b58:	00058713          	mv	a4,a1
    6b5c:	00812423          	sw	s0,8(sp)
    6b60:	00060593          	mv	a1,a2
    6b64:	00050413          	mv	s0,a0
    6b68:	00070513          	mv	a0,a4
    6b6c:	00005797          	auipc	a5,0x5
    6b70:	b407aa23          	sw	zero,-1196(a5) # b6c0 <errno>
    6b74:	00112623          	sw	ra,12(sp)
    6b78:	2e4000ef          	jal	ra,6e5c <_fstat>
    6b7c:	fff00793          	li	a5,-1
    6b80:	00f50a63          	beq	a0,a5,6b94 <_fstat_r+0x40>
    6b84:	00c12083          	lw	ra,12(sp)
    6b88:	00812403          	lw	s0,8(sp)
    6b8c:	01010113          	addi	sp,sp,16
    6b90:	00008067          	ret
    6b94:	00005797          	auipc	a5,0x5
    6b98:	b2c7a783          	lw	a5,-1236(a5) # b6c0 <errno>
    6b9c:	fe0784e3          	beqz	a5,6b84 <_fstat_r+0x30>
    6ba0:	00c12083          	lw	ra,12(sp)
    6ba4:	00f42023          	sw	a5,0(s0)
    6ba8:	00812403          	lw	s0,8(sp)
    6bac:	01010113          	addi	sp,sp,16
    6bb0:	00008067          	ret

00006bb4 <_isatty_r>:
    6bb4:	ff010113          	addi	sp,sp,-16
    6bb8:	00812423          	sw	s0,8(sp)
    6bbc:	00050413          	mv	s0,a0
    6bc0:	00058513          	mv	a0,a1
    6bc4:	00005797          	auipc	a5,0x5
    6bc8:	ae07ae23          	sw	zero,-1284(a5) # b6c0 <errno>
    6bcc:	00112623          	sw	ra,12(sp)
    6bd0:	3b8000ef          	jal	ra,6f88 <_isatty>
    6bd4:	fff00793          	li	a5,-1
    6bd8:	00f50a63          	beq	a0,a5,6bec <_isatty_r+0x38>
    6bdc:	00c12083          	lw	ra,12(sp)
    6be0:	00812403          	lw	s0,8(sp)
    6be4:	01010113          	addi	sp,sp,16
    6be8:	00008067          	ret
    6bec:	00005797          	auipc	a5,0x5
    6bf0:	ad47a783          	lw	a5,-1324(a5) # b6c0 <errno>
    6bf4:	fe0784e3          	beqz	a5,6bdc <_isatty_r+0x28>
    6bf8:	00c12083          	lw	ra,12(sp)
    6bfc:	00f42023          	sw	a5,0(s0)
    6c00:	00812403          	lw	s0,8(sp)
    6c04:	01010113          	addi	sp,sp,16
    6c08:	00008067          	ret

00006c0c <alt_get_errno>:
{
    6c0c:	ff010113          	addi	sp,sp,-16
    6c10:	00112623          	sw	ra,12(sp)
    6c14:	00812423          	sw	s0,8(sp)
    6c18:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6c1c:	0000a7b7          	lui	a5,0xa
    6c20:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    6c24:	00078c63          	beqz	a5,6c3c <alt_get_errno+0x30>
    6c28:	0000a7b7          	lui	a5,0xa
    6c2c:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    6c30:	000780e7          	jalr	a5
    6c34:	00050793          	mv	a5,a0
    6c38:	00c0006f          	j	6c44 <alt_get_errno+0x38>
    6c3c:	0000b7b7          	lui	a5,0xb
    6c40:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    6c44:	00078513          	mv	a0,a5
    6c48:	00c12083          	lw	ra,12(sp)
    6c4c:	00812403          	lw	s0,8(sp)
    6c50:	01010113          	addi	sp,sp,16
    6c54:	00008067          	ret

00006c58 <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    6c58:	fd010113          	addi	sp,sp,-48
    6c5c:	02112623          	sw	ra,44(sp)
    6c60:	02812423          	sw	s0,40(sp)
    6c64:	03010413          	addi	s0,sp,48
    6c68:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    6c6c:	fdc42783          	lw	a5,-36(s0)
    6c70:	0207c463          	bltz	a5,6c98 <_close+0x40>
    6c74:	fdc42703          	lw	a4,-36(s0)
    6c78:	00070793          	mv	a5,a4
    6c7c:	00179793          	slli	a5,a5,0x1
    6c80:	00e787b3          	add	a5,a5,a4
    6c84:	00279793          	slli	a5,a5,0x2
    6c88:	00009737          	lui	a4,0x9
    6c8c:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    6c90:	00e787b3          	add	a5,a5,a4
    6c94:	0080006f          	j	6c9c <_close+0x44>
    6c98:	00000793          	li	a5,0
    6c9c:	fef42423          	sw	a5,-24(s0)

  if (fd)
    6ca0:	fe842783          	lw	a5,-24(s0)
    6ca4:	06078663          	beqz	a5,6d10 <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    6ca8:	fe842783          	lw	a5,-24(s0)
    6cac:	0007a783          	lw	a5,0(a5)
    6cb0:	0107a783          	lw	a5,16(a5)
    6cb4:	02078063          	beqz	a5,6cd4 <_close+0x7c>
    6cb8:	fe842783          	lw	a5,-24(s0)
    6cbc:	0007a783          	lw	a5,0(a5)
    6cc0:	0107a783          	lw	a5,16(a5)
    6cc4:	fe842503          	lw	a0,-24(s0)
    6cc8:	000780e7          	jalr	a5
    6ccc:	00050793          	mv	a5,a0
    6cd0:	0080006f          	j	6cd8 <_close+0x80>
    6cd4:	00000793          	li	a5,0
    6cd8:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    6cdc:	fdc42503          	lw	a0,-36(s0)
    6ce0:	d05fb0ef          	jal	ra,29e4 <alt_release_fd>
    if (rval < 0)
    6ce4:	fec42783          	lw	a5,-20(s0)
    6ce8:	0207d063          	bgez	a5,6d08 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
    6cec:	f21ff0ef          	jal	ra,6c0c <alt_get_errno>
    6cf0:	00050713          	mv	a4,a0
    6cf4:	fec42783          	lw	a5,-20(s0)
    6cf8:	40f007b3          	neg	a5,a5
    6cfc:	00f72023          	sw	a5,0(a4)
      return -1;
    6d00:	fff00793          	li	a5,-1
    6d04:	0200006f          	j	6d24 <_close+0xcc>
    }
    return 0;
    6d08:	00000793          	li	a5,0
    6d0c:	0180006f          	j	6d24 <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6d10:	efdff0ef          	jal	ra,6c0c <alt_get_errno>
    6d14:	00050713          	mv	a4,a0
    6d18:	05100793          	li	a5,81
    6d1c:	00f72023          	sw	a5,0(a4)
    return -1;
    6d20:	fff00793          	li	a5,-1
  }
}
    6d24:	00078513          	mv	a0,a5
    6d28:	02c12083          	lw	ra,44(sp)
    6d2c:	02812403          	lw	s0,40(sp)
    6d30:	03010113          	addi	sp,sp,48
    6d34:	00008067          	ret

00006d38 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6d38:	fd010113          	addi	sp,sp,-48
    6d3c:	02112623          	sw	ra,44(sp)
    6d40:	02812423          	sw	s0,40(sp)
    6d44:	03010413          	addi	s0,sp,48
    6d48:	fca42e23          	sw	a0,-36(s0)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
    6d4c:	0000a7b7          	lui	a5,0xa
    6d50:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    6d54:	00100793          	li	a5,1
    6d58:	00f71863          	bne	a4,a5,6d68 <_exit+0x30>
    6d5c:	000087b7          	lui	a5,0x8
    6d60:	f8878513          	addi	a0,a5,-120 # 7f88 <__fini_array_end+0x358>
    6d64:	da5f90ef          	jal	ra,b08 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
    6d68:	0000a7b7          	lui	a5,0xa
    6d6c:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    6d70:	00100793          	li	a5,1
    6d74:	00f71a63          	bne	a4,a5,6d88 <_exit+0x50>
    6d78:	fdc42583          	lw	a1,-36(s0)
    6d7c:	000087b7          	lui	a5,0x8
    6d80:	fb478513          	addi	a0,a5,-76 # 7fb4 <__fini_array_end+0x384>
    6d84:	d85f90ef          	jal	ra,b08 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
    6d88:	0000a7b7          	lui	a5,0xa
    6d8c:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    6d90:	00100793          	li	a5,1
    6d94:	00f71863          	bne	a4,a5,6da4 <_exit+0x6c>
    6d98:	000087b7          	lui	a5,0x8
    6d9c:	fe078513          	addi	a0,a5,-32 # 7fe0 <__fini_array_end+0x3b0>
    6da0:	d69f90ef          	jal	ra,b08 <alt_log_printf_proc>
  ALT_OS_STOP();
    6da4:	00000013          	nop

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
    6da8:	0000a7b7          	lui	a5,0xa
    6dac:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    6db0:	00100793          	li	a5,1
    6db4:	00f71863          	bne	a4,a5,6dc4 <_exit+0x8c>
    6db8:	000087b7          	lui	a5,0x8
    6dbc:	00878513          	addi	a0,a5,8 # 8008 <__fini_array_end+0x3d8>
    6dc0:	d49f90ef          	jal	ra,b08 <alt_log_printf_proc>
    6dc4:	fdc42783          	lw	a5,-36(s0)
    6dc8:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
    6dcc:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
    6dd0:	00050793          	mv	a5,a0
    6dd4:	00078663          	beqz	a5,6de0 <_exit+0xa8>
    ALT_SIM_FAIL();
    6dd8:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    6ddc:	0080006f          	j	6de4 <_exit+0xac>
    ALT_SIM_PASS();
    6de0:	7c203013          	sltiu	zero,zero,1986
}
    6de4:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
    6de8:	0000a7b7          	lui	a5,0xa
    6dec:	b307a703          	lw	a4,-1232(a5) # 9b30 <alt_log_boot_on_flag>
    6df0:	00100793          	li	a5,1
    6df4:	00f71a63          	bne	a4,a5,6e08 <_exit+0xd0>
    6df8:	000087b7          	lui	a5,0x8
    6dfc:	03078513          	addi	a0,a5,48 # 8030 <__fini_array_end+0x400>
    6e00:	d09f90ef          	jal	ra,b08 <alt_log_printf_proc>
  while (1);
    6e04:	00000013          	nop
    6e08:	00000013          	nop
    6e0c:	ffdff06f          	j	6e08 <_exit+0xd0>

00006e10 <alt_get_errno>:
{
    6e10:	ff010113          	addi	sp,sp,-16
    6e14:	00112623          	sw	ra,12(sp)
    6e18:	00812423          	sw	s0,8(sp)
    6e1c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6e20:	0000a7b7          	lui	a5,0xa
    6e24:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    6e28:	00078c63          	beqz	a5,6e40 <alt_get_errno+0x30>
    6e2c:	0000a7b7          	lui	a5,0xa
    6e30:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    6e34:	000780e7          	jalr	a5
    6e38:	00050793          	mv	a5,a0
    6e3c:	00c0006f          	j	6e48 <alt_get_errno+0x38>
    6e40:	0000b7b7          	lui	a5,0xb
    6e44:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    6e48:	00078513          	mv	a0,a5
    6e4c:	00c12083          	lw	ra,12(sp)
    6e50:	00812403          	lw	s0,8(sp)
    6e54:	01010113          	addi	sp,sp,16
    6e58:	00008067          	ret

00006e5c <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    6e5c:	fd010113          	addi	sp,sp,-48
    6e60:	02112623          	sw	ra,44(sp)
    6e64:	02812423          	sw	s0,40(sp)
    6e68:	03010413          	addi	s0,sp,48
    6e6c:	fca42e23          	sw	a0,-36(s0)
    6e70:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6e74:	fdc42783          	lw	a5,-36(s0)
    6e78:	0207c463          	bltz	a5,6ea0 <_fstat+0x44>
    6e7c:	fdc42703          	lw	a4,-36(s0)
    6e80:	00070793          	mv	a5,a4
    6e84:	00179793          	slli	a5,a5,0x1
    6e88:	00e787b3          	add	a5,a5,a4
    6e8c:	00279793          	slli	a5,a5,0x2
    6e90:	00009737          	lui	a4,0x9
    6e94:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    6e98:	00e787b3          	add	a5,a5,a4
    6e9c:	0080006f          	j	6ea4 <_fstat+0x48>
    6ea0:	00000793          	li	a5,0
    6ea4:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
    6ea8:	fec42783          	lw	a5,-20(s0)
    6eac:	04078463          	beqz	a5,6ef4 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    6eb0:	fec42783          	lw	a5,-20(s0)
    6eb4:	0007a783          	lw	a5,0(a5)
    6eb8:	0207a783          	lw	a5,32(a5)
    6ebc:	02078263          	beqz	a5,6ee0 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
    6ec0:	fec42783          	lw	a5,-20(s0)
    6ec4:	0007a783          	lw	a5,0(a5)
    6ec8:	0207a783          	lw	a5,32(a5)
    6ecc:	fd842583          	lw	a1,-40(s0)
    6ed0:	fec42503          	lw	a0,-20(s0)
    6ed4:	000780e7          	jalr	a5
    6ed8:	00050793          	mv	a5,a0
    6edc:	02c0006f          	j	6f08 <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    6ee0:	fd842783          	lw	a5,-40(s0)
    6ee4:	00002737          	lui	a4,0x2
    6ee8:	00e7a223          	sw	a4,4(a5)
      return 0;
    6eec:	00000793          	li	a5,0
    6ef0:	0180006f          	j	6f08 <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    6ef4:	f1dff0ef          	jal	ra,6e10 <alt_get_errno>
    6ef8:	00050713          	mv	a4,a0
    6efc:	05100793          	li	a5,81
    6f00:	00f72023          	sw	a5,0(a4) # 2000 <altera_avalon_jtag_uart_write+0x1c>
    return -1;
    6f04:	fff00793          	li	a5,-1
  }
}
    6f08:	00078513          	mv	a0,a5
    6f0c:	02c12083          	lw	ra,44(sp)
    6f10:	02812403          	lw	s0,40(sp)
    6f14:	03010113          	addi	sp,sp,48
    6f18:	00008067          	ret

00006f1c <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    6f1c:	ff010113          	addi	sp,sp,-16
    6f20:	00812623          	sw	s0,12(sp)
    6f24:	01010413          	addi	s0,sp,16
  return 0;
    6f28:	00000793          	li	a5,0
}
    6f2c:	00078513          	mv	a0,a5
    6f30:	00c12403          	lw	s0,12(sp)
    6f34:	01010113          	addi	sp,sp,16
    6f38:	00008067          	ret

00006f3c <alt_get_errno>:
{
    6f3c:	ff010113          	addi	sp,sp,-16
    6f40:	00112623          	sw	ra,12(sp)
    6f44:	00812423          	sw	s0,8(sp)
    6f48:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6f4c:	0000a7b7          	lui	a5,0xa
    6f50:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    6f54:	00078c63          	beqz	a5,6f6c <alt_get_errno+0x30>
    6f58:	0000a7b7          	lui	a5,0xa
    6f5c:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    6f60:	000780e7          	jalr	a5
    6f64:	00050793          	mv	a5,a0
    6f68:	00c0006f          	j	6f74 <alt_get_errno+0x38>
    6f6c:	0000b7b7          	lui	a5,0xb
    6f70:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    6f74:	00078513          	mv	a0,a5
    6f78:	00c12083          	lw	ra,12(sp)
    6f7c:	00812403          	lw	s0,8(sp)
    6f80:	01010113          	addi	sp,sp,16
    6f84:	00008067          	ret

00006f88 <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    6f88:	f7010113          	addi	sp,sp,-144
    6f8c:	08112623          	sw	ra,140(sp)
    6f90:	08812423          	sw	s0,136(sp)
    6f94:	09010413          	addi	s0,sp,144
    6f98:	f6a42e23          	sw	a0,-132(s0)
    6f9c:	0000b7b7          	lui	a5,0xb
    6fa0:	6c47a703          	lw	a4,1732(a5) # b6c4 <__stack_chk_guard>
    6fa4:	fee42623          	sw	a4,-20(s0)
    6fa8:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
    6fac:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6fb0:	f7c42783          	lw	a5,-132(s0)
    6fb4:	0207c463          	bltz	a5,6fdc <_isatty+0x54>
    6fb8:	f7c42703          	lw	a4,-132(s0)
    6fbc:	00070793          	mv	a5,a4
    6fc0:	00179793          	slli	a5,a5,0x1
    6fc4:	00e787b3          	add	a5,a5,a4
    6fc8:	00279793          	slli	a5,a5,0x2
    6fcc:	00009737          	lui	a4,0x9
    6fd0:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    6fd4:	00e787b3          	add	a5,a5,a4
    6fd8:	0080006f          	j	6fe0 <_isatty+0x58>
    6fdc:	00000793          	li	a5,0
    6fe0:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
    6fe4:	f8c42783          	lw	a5,-116(s0)
    6fe8:	04078a63          	beqz	a5,703c <_isatty+0xb4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    6fec:	f8c42783          	lw	a5,-116(s0)
    6ff0:	0007a783          	lw	a5,0(a5)
    6ff4:	0207a783          	lw	a5,32(a5)
    6ff8:	00079663          	bnez	a5,7004 <_isatty+0x7c>
    {
      return 1;
    6ffc:	00100793          	li	a5,1
    7000:	0500006f          	j	7050 <_isatty+0xc8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
    7004:	f9040793          	addi	a5,s0,-112
    7008:	00078593          	mv	a1,a5
    700c:	f7c42503          	lw	a0,-132(s0)
    7010:	409000ef          	jal	ra,7c18 <fstat>
    7014:	00050793          	mv	a5,a0
    7018:	0007d663          	bgez	a5,7024 <_isatty+0x9c>
        return 0;  // fstat will set ERRNO
    701c:	00000793          	li	a5,0
    7020:	0300006f          	j	7050 <_isatty+0xc8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
    7024:	f9442703          	lw	a4,-108(s0)
    7028:	ffffe7b7          	lui	a5,0xffffe
    702c:	00f707b3          	add	a5,a4,a5
    7030:	0017b793          	seqz	a5,a5
    7034:	0ff7f793          	zext.b	a5,a5
    7038:	0180006f          	j	7050 <_isatty+0xc8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    703c:	f01ff0ef          	jal	ra,6f3c <alt_get_errno>
    7040:	00050713          	mv	a4,a0
    7044:	05100793          	li	a5,81
    7048:	00f72023          	sw	a5,0(a4)
    return 0;
    704c:	00000793          	li	a5,0
  }
}
    7050:	00078713          	mv	a4,a5
    7054:	0000b7b7          	lui	a5,0xb
    7058:	fec42683          	lw	a3,-20(s0)
    705c:	6c47a783          	lw	a5,1732(a5) # b6c4 <__stack_chk_guard>
    7060:	00f6c7b3          	xor	a5,a3,a5
    7064:	00000693          	li	a3,0
    7068:	00078463          	beqz	a5,7070 <_isatty+0xe8>
    706c:	9f4fc0ef          	jal	ra,3260 <__stack_chk_fail>
    7070:	00070513          	mv	a0,a4
    7074:	08c12083          	lw	ra,140(sp)
    7078:	08812403          	lw	s0,136(sp)
    707c:	09010113          	addi	sp,sp,144
    7080:	00008067          	ret

00007084 <alt_get_errno>:
{
    7084:	ff010113          	addi	sp,sp,-16
    7088:	00112623          	sw	ra,12(sp)
    708c:	00812423          	sw	s0,8(sp)
    7090:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7094:	0000a7b7          	lui	a5,0xa
    7098:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    709c:	00078c63          	beqz	a5,70b4 <alt_get_errno+0x30>
    70a0:	0000a7b7          	lui	a5,0xa
    70a4:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    70a8:	000780e7          	jalr	a5
    70ac:	00050793          	mv	a5,a0
    70b0:	00c0006f          	j	70bc <alt_get_errno+0x38>
    70b4:	0000b7b7          	lui	a5,0xb
    70b8:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    70bc:	00078513          	mv	a0,a5
    70c0:	00c12083          	lw	ra,12(sp)
    70c4:	00812403          	lw	s0,8(sp)
    70c8:	01010113          	addi	sp,sp,16
    70cc:	00008067          	ret

000070d0 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    70d0:	fd010113          	addi	sp,sp,-48
    70d4:	02112623          	sw	ra,44(sp)
    70d8:	02812423          	sw	s0,40(sp)
    70dc:	03010413          	addi	s0,sp,48
    70e0:	fca42e23          	sw	a0,-36(s0)
    70e4:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
    70e8:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
    70ec:	fdc42783          	lw	a5,-36(s0)
    70f0:	06f04e63          	bgtz	a5,716c <_kill+0x9c>
  {
    switch (sig)
    70f4:	fd842783          	lw	a5,-40(s0)
    70f8:	08078463          	beqz	a5,7180 <_kill+0xb0>
    70fc:	fd842783          	lw	a5,-40(s0)
    7100:	0607c063          	bltz	a5,7160 <_kill+0x90>
    7104:	fd842703          	lw	a4,-40(s0)
    7108:	01f00793          	li	a5,31
    710c:	04e7ca63          	blt	a5,a4,7160 <_kill+0x90>
    7110:	fd842703          	lw	a4,-40(s0)
    7114:	00300793          	li	a5,3
    7118:	04f74463          	blt	a4,a5,7160 <_kill+0x90>
    711c:	fd842783          	lw	a5,-40(s0)
    7120:	00100713          	li	a4,1
    7124:	00f717b3          	sll	a5,a4,a5
    7128:	cf810737          	lui	a4,0xcf810
    712c:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcf7fff78>
    7130:	00e7f733          	and	a4,a5,a4
    7134:	00e03733          	snez	a4,a4
    7138:	0ff77713          	zext.b	a4,a4
    713c:	00071e63          	bnez	a4,7158 <_kill+0x88>
    7140:	00110737          	lui	a4,0x110
    7144:	00e7f7b3          	and	a5,a5,a4
    7148:	00f037b3          	snez	a5,a5
    714c:	0ff7f793          	zext.b	a5,a5
    7150:	02079c63          	bnez	a5,7188 <_kill+0xb8>
    7154:	00c0006f          	j	7160 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    7158:	00000513          	li	a0,0
    715c:	bddff0ef          	jal	ra,6d38 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    7160:	01600793          	li	a5,22
    7164:	fef42623          	sw	a5,-20(s0)
    7168:	0240006f          	j	718c <_kill+0xbc>
    }
  }

  else if (pid > 0)
    716c:	fdc42783          	lw	a5,-36(s0)
    7170:	00f05e63          	blez	a5,718c <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    7174:	00300793          	li	a5,3
    7178:	fef42623          	sw	a5,-20(s0)
    717c:	0100006f          	j	718c <_kill+0xbc>
      break;
    7180:	00000013          	nop
    7184:	0080006f          	j	718c <_kill+0xbc>
      break;
    7188:	00000013          	nop
  }

  if (status)
    718c:	fec42783          	lw	a5,-20(s0)
    7190:	00078e63          	beqz	a5,71ac <_kill+0xdc>
  {
    ALT_ERRNO = status;
    7194:	ef1ff0ef          	jal	ra,7084 <alt_get_errno>
    7198:	00050713          	mv	a4,a0
    719c:	fec42783          	lw	a5,-20(s0)
    71a0:	00f72023          	sw	a5,0(a4) # 110000 <__alt_data_end+0x100000>
    return -1;
    71a4:	fff00793          	li	a5,-1
    71a8:	0080006f          	j	71b0 <_kill+0xe0>
  }

  return 0;
    71ac:	00000793          	li	a5,0
}
    71b0:	00078513          	mv	a0,a5
    71b4:	02c12083          	lw	ra,44(sp)
    71b8:	02812403          	lw	s0,40(sp)
    71bc:	03010113          	addi	sp,sp,48
    71c0:	00008067          	ret

000071c4 <alt_get_errno>:
{
    71c4:	ff010113          	addi	sp,sp,-16
    71c8:	00112623          	sw	ra,12(sp)
    71cc:	00812423          	sw	s0,8(sp)
    71d0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    71d4:	0000a7b7          	lui	a5,0xa
    71d8:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    71dc:	00078c63          	beqz	a5,71f4 <alt_get_errno+0x30>
    71e0:	0000a7b7          	lui	a5,0xa
    71e4:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    71e8:	000780e7          	jalr	a5
    71ec:	00050793          	mv	a5,a0
    71f0:	00c0006f          	j	71fc <alt_get_errno+0x38>
    71f4:	0000b7b7          	lui	a5,0xb
    71f8:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    71fc:	00078513          	mv	a0,a5
    7200:	00c12083          	lw	ra,12(sp)
    7204:	00812403          	lw	s0,8(sp)
    7208:	01010113          	addi	sp,sp,16
    720c:	00008067          	ret

00007210 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    7210:	fd010113          	addi	sp,sp,-48
    7214:	02112623          	sw	ra,44(sp)
    7218:	02812423          	sw	s0,40(sp)
    721c:	03010413          	addi	s0,sp,48
    7220:	fca42e23          	sw	a0,-36(s0)
    7224:	fcb42c23          	sw	a1,-40(s0)
    7228:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
    722c:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7230:	fdc42783          	lw	a5,-36(s0)
    7234:	0207c463          	bltz	a5,725c <_lseek+0x4c>
    7238:	fdc42703          	lw	a4,-36(s0)
    723c:	00070793          	mv	a5,a4
    7240:	00179793          	slli	a5,a5,0x1
    7244:	00e787b3          	add	a5,a5,a4
    7248:	00279793          	slli	a5,a5,0x2
    724c:	00009737          	lui	a4,0x9
    7250:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    7254:	00e787b3          	add	a5,a5,a4
    7258:	0080006f          	j	7260 <_lseek+0x50>
    725c:	00000793          	li	a5,0
    7260:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
    7264:	fec42783          	lw	a5,-20(s0)
    7268:	04078263          	beqz	a5,72ac <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    726c:	fec42783          	lw	a5,-20(s0)
    7270:	0007a783          	lw	a5,0(a5)
    7274:	01c7a783          	lw	a5,28(a5)
    7278:	02078463          	beqz	a5,72a0 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    727c:	fec42783          	lw	a5,-20(s0)
    7280:	0007a783          	lw	a5,0(a5)
    7284:	01c7a783          	lw	a5,28(a5)
    7288:	fd442603          	lw	a2,-44(s0)
    728c:	fd842583          	lw	a1,-40(s0)
    7290:	fec42503          	lw	a0,-20(s0)
    7294:	000780e7          	jalr	a5
    7298:	fea42423          	sw	a0,-24(s0)
    729c:	0180006f          	j	72b4 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    72a0:	f7a00793          	li	a5,-134
    72a4:	fef42423          	sw	a5,-24(s0)
    72a8:	00c0006f          	j	72b4 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    72ac:	faf00793          	li	a5,-81
    72b0:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
    72b4:	fe842783          	lw	a5,-24(s0)
    72b8:	0207d063          	bgez	a5,72d8 <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    72bc:	f09ff0ef          	jal	ra,71c4 <alt_get_errno>
    72c0:	00050713          	mv	a4,a0
    72c4:	fe842783          	lw	a5,-24(s0)
    72c8:	40f007b3          	neg	a5,a5
    72cc:	00f72023          	sw	a5,0(a4)
    rc = -1;
    72d0:	fff00793          	li	a5,-1
    72d4:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
    72d8:	fe842783          	lw	a5,-24(s0)
}
    72dc:	00078513          	mv	a0,a5
    72e0:	02c12083          	lw	ra,44(sp)
    72e4:	02812403          	lw	s0,40(sp)
    72e8:	03010113          	addi	sp,sp,48
    72ec:	00008067          	ret

000072f0 <alt_get_errno>:
{
    72f0:	ff010113          	addi	sp,sp,-16
    72f4:	00112623          	sw	ra,12(sp)
    72f8:	00812423          	sw	s0,8(sp)
    72fc:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7300:	0000a7b7          	lui	a5,0xa
    7304:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    7308:	00078c63          	beqz	a5,7320 <alt_get_errno+0x30>
    730c:	0000a7b7          	lui	a5,0xa
    7310:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    7314:	000780e7          	jalr	a5
    7318:	00050793          	mv	a5,a0
    731c:	00c0006f          	j	7328 <alt_get_errno+0x38>
    7320:	0000b7b7          	lui	a5,0xb
    7324:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    7328:	00078513          	mv	a0,a5
    732c:	00c12083          	lw	ra,12(sp)
    7330:	00812403          	lw	s0,8(sp)
    7334:	01010113          	addi	sp,sp,16
    7338:	00008067          	ret

0000733c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    733c:	fd010113          	addi	sp,sp,-48
    7340:	02812623          	sw	s0,44(sp)
    7344:	03010413          	addi	s0,sp,48
    7348:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    734c:	fdc42783          	lw	a5,-36(s0)
    7350:	0087a703          	lw	a4,8(a5)
    7354:	400007b7          	lui	a5,0x40000
    7358:	00f76733          	or	a4,a4,a5
    735c:	fdc42783          	lw	a5,-36(s0)
    7360:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3fff0008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    7364:	fe042623          	sw	zero,-20(s0)
    7368:	0980006f          	j	7400 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    736c:	000097b7          	lui	a5,0x9
    7370:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    7374:	fec42703          	lw	a4,-20(s0)
    7378:	00070793          	mv	a5,a4
    737c:	00179793          	slli	a5,a5,0x1
    7380:	00e787b3          	add	a5,a5,a4
    7384:	00279793          	slli	a5,a5,0x2
    7388:	00f687b3          	add	a5,a3,a5
    738c:	0007a703          	lw	a4,0(a5)
    7390:	fdc42783          	lw	a5,-36(s0)
    7394:	0007a783          	lw	a5,0(a5)
    7398:	04f71e63          	bne	a4,a5,73f4 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    739c:	000097b7          	lui	a5,0x9
    73a0:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    73a4:	fec42703          	lw	a4,-20(s0)
    73a8:	00070793          	mv	a5,a4
    73ac:	00179793          	slli	a5,a5,0x1
    73b0:	00e787b3          	add	a5,a5,a4
    73b4:	00279793          	slli	a5,a5,0x2
    73b8:	00f687b3          	add	a5,a3,a5
    73bc:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
    73c0:	0207da63          	bgez	a5,73f4 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
    73c4:	fec42703          	lw	a4,-20(s0)
    73c8:	00070793          	mv	a5,a4
    73cc:	00179793          	slli	a5,a5,0x1
    73d0:	00e787b3          	add	a5,a5,a4
    73d4:	00279793          	slli	a5,a5,0x2
    73d8:	00009737          	lui	a4,0x9
    73dc:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    73e0:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    73e4:	fdc42703          	lw	a4,-36(s0)
    73e8:	00f70663          	beq	a4,a5,73f4 <alt_file_locked+0xb8>
    {
      return -EACCES;
    73ec:	ff300793          	li	a5,-13
    73f0:	0280006f          	j	7418 <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
    73f4:	fec42783          	lw	a5,-20(s0)
    73f8:	00178793          	addi	a5,a5,1
    73fc:	fef42623          	sw	a5,-20(s0)
    7400:	0000a7b7          	lui	a5,0xa
    7404:	b4c7a783          	lw	a5,-1204(a5) # 9b4c <alt_max_fd>
    7408:	00078713          	mv	a4,a5
    740c:	fec42783          	lw	a5,-20(s0)
    7410:	f4f77ee3          	bgeu	a4,a5,736c <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    7414:	00000793          	li	a5,0
}
    7418:	00078513          	mv	a0,a5
    741c:	02c12403          	lw	s0,44(sp)
    7420:	03010113          	addi	sp,sp,48
    7424:	00008067          	ret

00007428 <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    7428:	fc010113          	addi	sp,sp,-64
    742c:	02112e23          	sw	ra,60(sp)
    7430:	02812c23          	sw	s0,56(sp)
    7434:	04010413          	addi	s0,sp,64
    7438:	fca42623          	sw	a0,-52(s0)
    743c:	fcb42423          	sw	a1,-56(s0)
    7440:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    7444:	fff00793          	li	a5,-1
    7448:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
    744c:	fed00793          	li	a5,-19
    7450:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
    7454:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    7458:	0000a7b7          	lui	a5,0xa
    745c:	b4478593          	addi	a1,a5,-1212 # 9b44 <alt_dev_list>
    7460:	fcc42503          	lw	a0,-52(s0)
    7464:	490000ef          	jal	ra,78f4 <alt_find_dev>
    7468:	fca42e23          	sw	a0,-36(s0)
    746c:	fdc42783          	lw	a5,-36(s0)
    7470:	00079c63          	bnez	a5,7488 <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    7474:	fcc42503          	lw	a0,-52(s0)
    7478:	59c000ef          	jal	ra,7a14 <alt_find_file>
    747c:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
    7480:	00100793          	li	a5,1
    7484:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    7488:	fdc42783          	lw	a5,-36(s0)
    748c:	0a078c63          	beqz	a5,7544 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    7490:	fdc42503          	lw	a0,-36(s0)
    7494:	6bc000ef          	jal	ra,7b50 <alt_get_fd>
    7498:	fea42023          	sw	a0,-32(s0)
    749c:	fe042783          	lw	a5,-32(s0)
    74a0:	0007d863          	bgez	a5,74b0 <_open+0x88>
    {
      status = index;
    74a4:	fe042783          	lw	a5,-32(s0)
    74a8:	fef42223          	sw	a5,-28(s0)
    74ac:	0a00006f          	j	754c <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
    74b0:	fe042703          	lw	a4,-32(s0)
    74b4:	00070793          	mv	a5,a4
    74b8:	00179793          	slli	a5,a5,0x1
    74bc:	00e787b3          	add	a5,a5,a4
    74c0:	00279793          	slli	a5,a5,0x2
    74c4:	00009737          	lui	a4,0x9
    74c8:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    74cc:	00e787b3          	add	a5,a5,a4
    74d0:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    74d4:	fc842703          	lw	a4,-56(s0)
    74d8:	400007b7          	lui	a5,0x40000
    74dc:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffeffff>
    74e0:	00f77733          	and	a4,a4,a5
    74e4:	fec42783          	lw	a5,-20(s0)
    74e8:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    74ec:	fe842783          	lw	a5,-24(s0)
    74f0:	00079c63          	bnez	a5,7508 <_open+0xe0>
    74f4:	fec42503          	lw	a0,-20(s0)
    74f8:	e45ff0ef          	jal	ra,733c <alt_file_locked>
    74fc:	fea42223          	sw	a0,-28(s0)
    7500:	fe442783          	lw	a5,-28(s0)
    7504:	0407c463          	bltz	a5,754c <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    7508:	fdc42783          	lw	a5,-36(s0)
    750c:	00c7a783          	lw	a5,12(a5)
    7510:	02078463          	beqz	a5,7538 <_open+0x110>
    7514:	fdc42783          	lw	a5,-36(s0)
    7518:	00c7a783          	lw	a5,12(a5)
    751c:	fc442683          	lw	a3,-60(s0)
    7520:	fc842603          	lw	a2,-56(s0)
    7524:	fcc42583          	lw	a1,-52(s0)
    7528:	fec42503          	lw	a0,-20(s0)
    752c:	000780e7          	jalr	a5
    7530:	00050793          	mv	a5,a0
    7534:	0080006f          	j	753c <_open+0x114>
    7538:	00000793          	li	a5,0
    753c:	fef42223          	sw	a5,-28(s0)
    7540:	00c0006f          	j	754c <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
    7544:	fed00793          	li	a5,-19
    7548:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    754c:	fe442783          	lw	a5,-28(s0)
    7550:	0207d463          	bgez	a5,7578 <_open+0x150>
  {
    alt_release_fd (index);  
    7554:	fe042503          	lw	a0,-32(s0)
    7558:	c8cfb0ef          	jal	ra,29e4 <alt_release_fd>
    ALT_ERRNO = -status;
    755c:	d95ff0ef          	jal	ra,72f0 <alt_get_errno>
    7560:	00050713          	mv	a4,a0
    7564:	fe442783          	lw	a5,-28(s0)
    7568:	40f007b3          	neg	a5,a5
    756c:	00f72023          	sw	a5,0(a4)
    return -1;
    7570:	fff00793          	li	a5,-1
    7574:	0080006f          	j	757c <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
    7578:	fe042783          	lw	a5,-32(s0)
}
    757c:	00078513          	mv	a0,a5
    7580:	03c12083          	lw	ra,60(sp)
    7584:	03812403          	lw	s0,56(sp)
    7588:	04010113          	addi	sp,sp,64
    758c:	00008067          	ret

00007590 <alt_get_errno>:
{
    7590:	ff010113          	addi	sp,sp,-16
    7594:	00112623          	sw	ra,12(sp)
    7598:	00812423          	sw	s0,8(sp)
    759c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    75a0:	0000a7b7          	lui	a5,0xa
    75a4:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    75a8:	00078c63          	beqz	a5,75c0 <alt_get_errno+0x30>
    75ac:	0000a7b7          	lui	a5,0xa
    75b0:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    75b4:	000780e7          	jalr	a5
    75b8:	00050793          	mv	a5,a0
    75bc:	00c0006f          	j	75c8 <alt_get_errno+0x38>
    75c0:	0000b7b7          	lui	a5,0xb
    75c4:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    75c8:	00078513          	mv	a0,a5
    75cc:	00c12083          	lw	ra,12(sp)
    75d0:	00812403          	lw	s0,8(sp)
    75d4:	01010113          	addi	sp,sp,16
    75d8:	00008067          	ret

000075dc <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    75dc:	fd010113          	addi	sp,sp,-48
    75e0:	02112623          	sw	ra,44(sp)
    75e4:	02812423          	sw	s0,40(sp)
    75e8:	03010413          	addi	s0,sp,48
    75ec:	fca42e23          	sw	a0,-36(s0)
    75f0:	fcb42c23          	sw	a1,-40(s0)
    75f4:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    75f8:	fdc42783          	lw	a5,-36(s0)
    75fc:	0207c463          	bltz	a5,7624 <_read+0x48>
    7600:	fdc42703          	lw	a4,-36(s0)
    7604:	00070793          	mv	a5,a4
    7608:	00179793          	slli	a5,a5,0x1
    760c:	00e787b3          	add	a5,a5,a4
    7610:	00279793          	slli	a5,a5,0x2
    7614:	00009737          	lui	a4,0x9
    7618:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    761c:	00e787b3          	add	a5,a5,a4
    7620:	0080006f          	j	7628 <_read+0x4c>
    7624:	00000793          	li	a5,0
    7628:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    762c:	fe842783          	lw	a5,-24(s0)
    7630:	08078663          	beqz	a5,76bc <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    7634:	fe842783          	lw	a5,-24(s0)
    7638:	0087a783          	lw	a5,8(a5)
    763c:	0037f713          	andi	a4,a5,3
    7640:	00100793          	li	a5,1
    7644:	06f70263          	beq	a4,a5,76a8 <_read+0xcc>
        (fd->dev->read))
    7648:	fe842783          	lw	a5,-24(s0)
    764c:	0007a783          	lw	a5,0(a5)
    7650:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    7654:	04078a63          	beqz	a5,76a8 <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    7658:	fe842783          	lw	a5,-24(s0)
    765c:	0007a783          	lw	a5,0(a5)
    7660:	0147a783          	lw	a5,20(a5)
    7664:	fd442703          	lw	a4,-44(s0)
    7668:	00070613          	mv	a2,a4
    766c:	fd842583          	lw	a1,-40(s0)
    7670:	fe842503          	lw	a0,-24(s0)
    7674:	000780e7          	jalr	a5
    7678:	fea42623          	sw	a0,-20(s0)
    767c:	fec42783          	lw	a5,-20(s0)
    7680:	0207d063          	bgez	a5,76a0 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
    7684:	f0dff0ef          	jal	ra,7590 <alt_get_errno>
    7688:	00050713          	mv	a4,a0
    768c:	fec42783          	lw	a5,-20(s0)
    7690:	40f007b3          	neg	a5,a5
    7694:	00f72023          	sw	a5,0(a4)
          return -1;
    7698:	fff00793          	li	a5,-1
    769c:	0340006f          	j	76d0 <_read+0xf4>
        }
        return rval;
    76a0:	fec42783          	lw	a5,-20(s0)
    76a4:	02c0006f          	j	76d0 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    76a8:	ee9ff0ef          	jal	ra,7590 <alt_get_errno>
    76ac:	00050713          	mv	a4,a0
    76b0:	00d00793          	li	a5,13
    76b4:	00f72023          	sw	a5,0(a4)
    76b8:	0140006f          	j	76cc <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    76bc:	ed5ff0ef          	jal	ra,7590 <alt_get_errno>
    76c0:	00050713          	mv	a4,a0
    76c4:	05100793          	li	a5,81
    76c8:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    76cc:	fff00793          	li	a5,-1
}
    76d0:	00078513          	mv	a0,a5
    76d4:	02c12083          	lw	ra,44(sp)
    76d8:	02812403          	lw	s0,40(sp)
    76dc:	03010113          	addi	sp,sp,48
    76e0:	00008067          	ret

000076e4 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    76e4:	fc010113          	addi	sp,sp,-64
    76e8:	02812e23          	sw	s0,60(sp)
    76ec:	04010413          	addi	s0,sp,64
    76f0:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    76f4:	00800793          	li	a5,8
    76f8:	3007b7f3          	csrrc	a5,mstatus,a5
    76fc:	fef42223          	sw	a5,-28(s0)
    return context;
    7700:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    7704:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    7708:	8341a783          	lw	a5,-1996(gp) # 9b64 <heap_end>
    770c:	00378793          	addi	a5,a5,3
    7710:	ffc7f793          	andi	a5,a5,-4
    7714:	00078713          	mv	a4,a5
    7718:	82e1aa23          	sw	a4,-1996(gp) # 9b64 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    771c:	8341a703          	lw	a4,-1996(gp) # 9b64 <heap_end>
    7720:	fcc42783          	lw	a5,-52(s0)
    7724:	00f70733          	add	a4,a4,a5
    7728:	000107b7          	lui	a5,0x10
    772c:	00078793          	mv	a5,a5
    7730:	02e7f263          	bgeu	a5,a4,7754 <_sbrk+0x70>
    7734:	fdc42783          	lw	a5,-36(s0)
    7738:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    773c:	fe842783          	lw	a5,-24(s0)
    7740:	0087f793          	andi	a5,a5,8
    7744:	3007a073          	csrs	mstatus,a5
}
    7748:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    774c:	fff00793          	li	a5,-1
    7750:	0380006f          	j	7788 <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
    7754:	8341a783          	lw	a5,-1996(gp) # 9b64 <heap_end>
    7758:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
    775c:	8341a703          	lw	a4,-1996(gp) # 9b64 <heap_end>
    7760:	fcc42783          	lw	a5,-52(s0)
    7764:	00f70733          	add	a4,a4,a5
    7768:	82e1aa23          	sw	a4,-1996(gp) # 9b64 <heap_end>
    776c:	fdc42783          	lw	a5,-36(s0)
    7770:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    7774:	fec42783          	lw	a5,-20(s0)
    7778:	0087f793          	andi	a5,a5,8
    777c:	3007a073          	csrs	mstatus,a5
}
    7780:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    7784:	fe042783          	lw	a5,-32(s0)
}
    7788:	00078513          	mv	a0,a5
    778c:	03c12403          	lw	s0,60(sp)
    7790:	04010113          	addi	sp,sp,64
    7794:	00008067          	ret

00007798 <alt_get_errno>:
{
    7798:	ff010113          	addi	sp,sp,-16
    779c:	00112623          	sw	ra,12(sp)
    77a0:	00812423          	sw	s0,8(sp)
    77a4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    77a8:	0000a7b7          	lui	a5,0xa
    77ac:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    77b0:	00078c63          	beqz	a5,77c8 <alt_get_errno+0x30>
    77b4:	0000a7b7          	lui	a5,0xa
    77b8:	b507a783          	lw	a5,-1200(a5) # 9b50 <alt_errno>
    77bc:	000780e7          	jalr	a5
    77c0:	00050793          	mv	a5,a0
    77c4:	00c0006f          	j	77d0 <alt_get_errno+0x38>
    77c8:	0000b7b7          	lui	a5,0xb
    77cc:	6c078793          	addi	a5,a5,1728 # b6c0 <errno>
}
    77d0:	00078513          	mv	a0,a5
    77d4:	00c12083          	lw	ra,12(sp)
    77d8:	00812403          	lw	s0,8(sp)
    77dc:	01010113          	addi	sp,sp,16
    77e0:	00008067          	ret

000077e4 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    77e4:	fd010113          	addi	sp,sp,-48
    77e8:	02112623          	sw	ra,44(sp)
    77ec:	02812423          	sw	s0,40(sp)
    77f0:	03010413          	addi	s0,sp,48
    77f4:	fca42e23          	sw	a0,-36(s0)
    77f8:	fcb42c23          	sw	a1,-40(s0)
    77fc:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    7800:	fdc42783          	lw	a5,-36(s0)
    7804:	0207c463          	bltz	a5,782c <_write+0x48>
    7808:	fdc42703          	lw	a4,-36(s0)
    780c:	00070793          	mv	a5,a4
    7810:	00179793          	slli	a5,a5,0x1
    7814:	00e787b3          	add	a5,a5,a4
    7818:	00279793          	slli	a5,a5,0x2
    781c:	00009737          	lui	a4,0x9
    7820:	18070713          	addi	a4,a4,384 # 9180 <alt_fd_list>
    7824:	00e787b3          	add	a5,a5,a4
    7828:	0080006f          	j	7830 <_write+0x4c>
    782c:	00000793          	li	a5,0
    7830:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    7834:	fe842783          	lw	a5,-24(s0)
    7838:	08078a63          	beqz	a5,78cc <_write+0xe8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    783c:	fe842783          	lw	a5,-24(s0)
    7840:	0087a783          	lw	a5,8(a5)
    7844:	0037f793          	andi	a5,a5,3
    7848:	06078863          	beqz	a5,78b8 <_write+0xd4>
    784c:	fe842783          	lw	a5,-24(s0)
    7850:	0007a783          	lw	a5,0(a5)
    7854:	0187a783          	lw	a5,24(a5)
    7858:	06078063          	beqz	a5,78b8 <_write+0xd4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
    785c:	fd442583          	lw	a1,-44(s0)
    7860:	fd842503          	lw	a0,-40(s0)
    7864:	d48f90ef          	jal	ra,dac <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    7868:	fe842783          	lw	a5,-24(s0)
    786c:	0007a783          	lw	a5,0(a5)
    7870:	0187a783          	lw	a5,24(a5)
    7874:	fd442703          	lw	a4,-44(s0)
    7878:	00070613          	mv	a2,a4
    787c:	fd842583          	lw	a1,-40(s0)
    7880:	fe842503          	lw	a0,-24(s0)
    7884:	000780e7          	jalr	a5
    7888:	fea42623          	sw	a0,-20(s0)
    788c:	fec42783          	lw	a5,-20(s0)
    7890:	0207d063          	bgez	a5,78b0 <_write+0xcc>
      {
        ALT_ERRNO = -rval;
    7894:	f05ff0ef          	jal	ra,7798 <alt_get_errno>
    7898:	00050713          	mv	a4,a0
    789c:	fec42783          	lw	a5,-20(s0)
    78a0:	40f007b3          	neg	a5,a5
    78a4:	00f72023          	sw	a5,0(a4)
        return -1;
    78a8:	fff00793          	li	a5,-1
    78ac:	0340006f          	j	78e0 <_write+0xfc>
      }
      return rval;
    78b0:	fec42783          	lw	a5,-20(s0)
    78b4:	02c0006f          	j	78e0 <_write+0xfc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    78b8:	ee1ff0ef          	jal	ra,7798 <alt_get_errno>
    78bc:	00050713          	mv	a4,a0
    78c0:	00d00793          	li	a5,13
    78c4:	00f72023          	sw	a5,0(a4)
    78c8:	0140006f          	j	78dc <_write+0xf8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    78cc:	ecdff0ef          	jal	ra,7798 <alt_get_errno>
    78d0:	00050713          	mv	a4,a0
    78d4:	05100793          	li	a5,81
    78d8:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    78dc:	fff00793          	li	a5,-1
}
    78e0:	00078513          	mv	a0,a5
    78e4:	02c12083          	lw	ra,44(sp)
    78e8:	02812403          	lw	s0,40(sp)
    78ec:	03010113          	addi	sp,sp,48
    78f0:	00008067          	ret

000078f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    78f4:	fd010113          	addi	sp,sp,-48
    78f8:	02812623          	sw	s0,44(sp)
    78fc:	03010413          	addi	s0,sp,48
    7900:	fca42e23          	sw	a0,-36(s0)
    7904:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
    7908:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
    790c:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    7910:	3e800793          	li	a5,1000
    7914:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
    7918:	fd842783          	lw	a5,-40(s0)
    791c:	00079663          	bnez	a5,7928 <alt_find_dev+0x34>
    7920:	00000793          	li	a5,0
    7924:	0e00006f          	j	7a04 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
    7928:	fd842783          	lw	a5,-40(s0)
    792c:	0007a783          	lw	a5,0(a5)
    7930:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    7934:	0c00006f          	j	79f4 <alt_find_dev+0x100>
    {
        len=0;
    7938:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    793c:	0380006f          	j	7974 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
    7940:	fe442783          	lw	a5,-28(s0)
    7944:	0087a703          	lw	a4,8(a5)
    7948:	fe842783          	lw	a5,-24(s0)
    794c:	00f707b3          	add	a5,a4,a5
    7950:	0007c703          	lbu	a4,0(a5)
    7954:	fe842783          	lw	a5,-24(s0)
    7958:	fdc42683          	lw	a3,-36(s0)
    795c:	00f687b3          	add	a5,a3,a5
    7960:	0007c783          	lbu	a5,0(a5)
    7964:	04f71663          	bne	a4,a5,79b0 <alt_find_dev+0xbc>
            len++;
    7968:	fe842783          	lw	a5,-24(s0)
    796c:	00178793          	addi	a5,a5,1
    7970:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    7974:	fe842783          	lw	a5,-24(s0)
    7978:	fdc42703          	lw	a4,-36(s0)
    797c:	00f707b3          	add	a5,a4,a5
    7980:	0007c783          	lbu	a5,0(a5)
    7984:	02078863          	beqz	a5,79b4 <alt_find_dev+0xc0>
    7988:	fe442783          	lw	a5,-28(s0)
    798c:	0087a703          	lw	a4,8(a5)
    7990:	fe842783          	lw	a5,-24(s0)
    7994:	00f707b3          	add	a5,a4,a5
    7998:	0007c783          	lbu	a5,0(a5)
    799c:	00078c63          	beqz	a5,79b4 <alt_find_dev+0xc0>
    79a0:	fe842703          	lw	a4,-24(s0)
    79a4:	fec42783          	lw	a5,-20(s0)
    79a8:	f8f74ce3          	blt	a4,a5,7940 <alt_find_dev+0x4c>
    79ac:	0080006f          	j	79b4 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
    79b0:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
    79b4:	fe842783          	lw	a5,-24(s0)
    79b8:	fdc42703          	lw	a4,-36(s0)
    79bc:	00f707b3          	add	a5,a4,a5
    79c0:	0007c783          	lbu	a5,0(a5)
    79c4:	02079263          	bnez	a5,79e8 <alt_find_dev+0xf4>
    79c8:	fe442783          	lw	a5,-28(s0)
    79cc:	0087a703          	lw	a4,8(a5)
    79d0:	fe842783          	lw	a5,-24(s0)
    79d4:	00f707b3          	add	a5,a4,a5
    79d8:	0007c783          	lbu	a5,0(a5)
    79dc:	00079663          	bnez	a5,79e8 <alt_find_dev+0xf4>
    79e0:	fe442783          	lw	a5,-28(s0)
    79e4:	0200006f          	j	7a04 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
    79e8:	fe442783          	lw	a5,-28(s0)
    79ec:	0007a783          	lw	a5,0(a5)
    79f0:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
    79f4:	fe442703          	lw	a4,-28(s0)
    79f8:	fd842783          	lw	a5,-40(s0)
    79fc:	f2f71ee3          	bne	a4,a5,7938 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
    7a00:	00000793          	li	a5,0
}
    7a04:	00078513          	mv	a0,a5
    7a08:	02c12403          	lw	s0,44(sp)
    7a0c:	03010113          	addi	sp,sp,48
    7a10:	00008067          	ret

00007a14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    7a14:	fd010113          	addi	sp,sp,-48
    7a18:	02812623          	sw	s0,44(sp)
    7a1c:	03010413          	addi	s0,sp,48
    7a20:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
    7a24:	0000a7b7          	lui	a5,0xa
    7a28:	b3c78793          	addi	a5,a5,-1220 # 9b3c <alt_fs_list>
    7a2c:	0007a783          	lw	a5,0(a5)
    7a30:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
    7a34:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    7a38:	3e800793          	li	a5,1000
    7a3c:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
    7a40:	0ec0006f          	j	7b2c <alt_find_file+0x118>
    {
        len=0;
    7a44:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    7a48:	0bc0006f          	j	7b04 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
    7a4c:	fe442783          	lw	a5,-28(s0)
    7a50:	0087a703          	lw	a4,8(a5)
    7a54:	fe842783          	lw	a5,-24(s0)
    7a58:	00f707b3          	add	a5,a4,a5
    7a5c:	0007c703          	lbu	a4,0(a5)
    7a60:	02f00793          	li	a5,47
    7a64:	02f71063          	bne	a4,a5,7a84 <alt_find_file+0x70>
    7a68:	fe442783          	lw	a5,-28(s0)
    7a6c:	0087a703          	lw	a4,8(a5)
    7a70:	fe842783          	lw	a5,-24(s0)
    7a74:	00178793          	addi	a5,a5,1
    7a78:	00f707b3          	add	a5,a4,a5
    7a7c:	0007c783          	lbu	a5,0(a5)
    7a80:	00078e63          	beqz	a5,7a9c <alt_find_file+0x88>
    7a84:	fe442783          	lw	a5,-28(s0)
    7a88:	0087a703          	lw	a4,8(a5)
    7a8c:	fe842783          	lw	a5,-24(s0)
    7a90:	00f707b3          	add	a5,a4,a5
    7a94:	0007c783          	lbu	a5,0(a5)
    7a98:	02079c63          	bnez	a5,7ad0 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
    7a9c:	fe842783          	lw	a5,-24(s0)
    7aa0:	fdc42703          	lw	a4,-36(s0)
    7aa4:	00f707b3          	add	a5,a4,a5
    7aa8:	0007c703          	lbu	a4,0(a5)
    7aac:	02f00793          	li	a5,47
    7ab0:	00f70c63          	beq	a4,a5,7ac8 <alt_find_file+0xb4>
    7ab4:	fe842783          	lw	a5,-24(s0)
    7ab8:	fdc42703          	lw	a4,-36(s0)
    7abc:	00f707b3          	add	a5,a4,a5
    7ac0:	0007c783          	lbu	a5,0(a5)
    7ac4:	04079863          	bnez	a5,7b14 <alt_find_file+0x100>
                {
                    return next;
    7ac8:	fe442783          	lw	a5,-28(s0)
    7acc:	0740006f          	j	7b40 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
    7ad0:	fe442783          	lw	a5,-28(s0)
    7ad4:	0087a703          	lw	a4,8(a5)
    7ad8:	fe842783          	lw	a5,-24(s0)
    7adc:	00f707b3          	add	a5,a4,a5
    7ae0:	0007c703          	lbu	a4,0(a5)
    7ae4:	fe842783          	lw	a5,-24(s0)
    7ae8:	fdc42683          	lw	a3,-36(s0)
    7aec:	00f687b3          	add	a5,a3,a5
    7af0:	0007c783          	lbu	a5,0(a5)
    7af4:	02f71463          	bne	a4,a5,7b1c <alt_find_file+0x108>
            len++;
    7af8:	fe842783          	lw	a5,-24(s0)
    7afc:	00178793          	addi	a5,a5,1
    7b00:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    7b04:	fe842703          	lw	a4,-24(s0)
    7b08:	fec42783          	lw	a5,-20(s0)
    7b0c:	f4f740e3          	blt	a4,a5,7a4c <alt_find_file+0x38>
    7b10:	0100006f          	j	7b20 <alt_find_file+0x10c>
                break;
    7b14:	00000013          	nop
    7b18:	0080006f          	j	7b20 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
    7b1c:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
    7b20:	fe442783          	lw	a5,-28(s0)
    7b24:	0007a783          	lw	a5,0(a5)
    7b28:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
    7b2c:	fe442703          	lw	a4,-28(s0)
    7b30:	0000a7b7          	lui	a5,0xa
    7b34:	b3c78793          	addi	a5,a5,-1220 # 9b3c <alt_fs_list>
    7b38:	f0f716e3          	bne	a4,a5,7a44 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
    7b3c:	00000793          	li	a5,0
}
    7b40:	00078513          	mv	a0,a5
    7b44:	02c12403          	lw	s0,44(sp)
    7b48:	03010113          	addi	sp,sp,48
    7b4c:	00008067          	ret

00007b50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    7b50:	fd010113          	addi	sp,sp,-48
    7b54:	02812623          	sw	s0,44(sp)
    7b58:	03010413          	addi	s0,sp,48
    7b5c:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
    7b60:	fe800793          	li	a5,-24
    7b64:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    7b68:	fe042423          	sw	zero,-24(s0)
    7b6c:	0880006f          	j	7bf4 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    7b70:	000097b7          	lui	a5,0x9
    7b74:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    7b78:	fe842703          	lw	a4,-24(s0)
    7b7c:	00070793          	mv	a5,a4
    7b80:	00179793          	slli	a5,a5,0x1
    7b84:	00e787b3          	add	a5,a5,a4
    7b88:	00279793          	slli	a5,a5,0x2
    7b8c:	00f687b3          	add	a5,a3,a5
    7b90:	0007a783          	lw	a5,0(a5)
    7b94:	04079a63          	bnez	a5,7be8 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    7b98:	000097b7          	lui	a5,0x9
    7b9c:	18078693          	addi	a3,a5,384 # 9180 <alt_fd_list>
    7ba0:	fe842703          	lw	a4,-24(s0)
    7ba4:	00070793          	mv	a5,a4
    7ba8:	00179793          	slli	a5,a5,0x1
    7bac:	00e787b3          	add	a5,a5,a4
    7bb0:	00279793          	slli	a5,a5,0x2
    7bb4:	00f687b3          	add	a5,a3,a5
    7bb8:	fdc42703          	lw	a4,-36(s0)
    7bbc:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
    7bc0:	0000a7b7          	lui	a5,0xa
    7bc4:	b4c7a783          	lw	a5,-1204(a5) # 9b4c <alt_max_fd>
    7bc8:	fe842703          	lw	a4,-24(s0)
    7bcc:	00e7d863          	bge	a5,a4,7bdc <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    7bd0:	0000a7b7          	lui	a5,0xa
    7bd4:	fe842703          	lw	a4,-24(s0)
    7bd8:	b4e7a623          	sw	a4,-1204(a5) # 9b4c <alt_max_fd>
      }
      rc = i;
    7bdc:	fe842783          	lw	a5,-24(s0)
    7be0:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
    7be4:	0200006f          	j	7c04 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    7be8:	fe842783          	lw	a5,-24(s0)
    7bec:	00178793          	addi	a5,a5,1
    7bf0:	fef42423          	sw	a5,-24(s0)
    7bf4:	fe842703          	lw	a4,-24(s0)
    7bf8:	01f00793          	li	a5,31
    7bfc:	f6e7dae3          	bge	a5,a4,7b70 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    7c00:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    7c04:	fec42783          	lw	a5,-20(s0)
}
    7c08:	00078513          	mv	a0,a5
    7c0c:	02c12403          	lw	s0,44(sp)
    7c10:	03010113          	addi	sp,sp,48
    7c14:	00008067          	ret

00007c18 <fstat>:
    7c18:	00058613          	mv	a2,a1
    7c1c:	00050593          	mv	a1,a0
    7c20:	8241a503          	lw	a0,-2012(gp) # 9b54 <_impure_ptr>
    7c24:	f31fe06f          	j	6b54 <_fstat_r>
    7c28:	369c                	.2byte	0x369c
    7c2a:	0000                	.2byte	0x0
    7c2c:	3304                	.2byte	0x3304
	...
