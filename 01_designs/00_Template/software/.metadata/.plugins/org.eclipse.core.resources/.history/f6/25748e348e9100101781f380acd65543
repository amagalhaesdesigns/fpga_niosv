
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000318

Program Header:
0x70000003 off    0x0000a522 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000034 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000079e4 memsz 0x000079e4 flags r-x
    LOAD off    0x00008a04 vaddr 0x00007a04 paddr 0x00009510 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x0000001c vaddr 0x0000b01c paddr 0x0000b01c align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002b0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007318  000002d0  000002d0  000012d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000041c  000075e8  000075e8  000085e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  00007a04  00009510  00008a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000154  0000b01c  0000b01c  0000b01c  2**2
                  ALLOC
  6 .onchip_memory2 00000000  0000b170  0000b170  0000a510  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  0000a510  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000034  00000000  00000000  0000a522  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005a8  00000000  00000000  0000a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00007622  00000000  00000000  0000ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030f1  00000000  00000000  00012122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00003e2c  00000000  00000000  00015213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000e78  00000000  00000000  00019040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0000110d  00000000  00000000  00019eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00001397  00000000  00000000  0001afc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  0001c360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000070  00000000  00000000  0001c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000002d0 l    d  .text	00000000 .text
000075e8 l    d  .rodata	00000000 .rodata
00007a04 l    d  .rwdata	00000000 .rwdata
0000b01c l    d  .bss	00000000 .bss
0000b170 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
00000424 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000428 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007aa0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000169c l     F .text	00000250 altera_avalon_jtag_uart_irq
000018ec l     F .text	000000bc altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_log_macro.S.obj
00001f7c l       .text	00000000 tx_next_char
00001fb0 l       .text	00000000 end_tx
00001f88 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000021e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002248 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000025ec l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00008ca8 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
000033dc l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
00003458 l     F .text	00000040 __fp_lock
00003498 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 alt_close.c
000065c4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000067c8 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000068f4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00006a3c l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00006b7c l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
00006ca8 l     F .text	0000004c alt_get_errno
00006cf4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00006f48 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000950c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00007150 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00003038 g     F .text	0000000c .hidden __stack_chk_fail_local
0000656c g     F .text	00000058 _isatty_r
00000f7c g     F .text	00000184 alt_main
00002df0 g     F .text	00000094 cleanup_glue
000068d4 g     F .text	00000020 _getpid
00002cb8 g     F .text	0000012c _puts_r
0000b098 g     O .bss	00000080 alt_irq
000061dc g     F .text	00000064 _lseek_r
00009510 g       *ABS*	00000000 __flash_rwdata_start
0000b170 g       *ABS*	00000000 __alt_heap_start
00005954 g     F .text	00000060 _kill_r
00009cd8 g       *ABS*	00000000 __global_pointer$
0000b080 g     O .bss	00000001 __lock___atexit_recursive_mutex
00005494 g     F .text	00000090 _signal_r
00005aa4 g     F .text	00000078 __sseek
00003558 g     F .text	000001b0 __sinit
000034d8 g     F .text	0000006c __sfmoreglue
00007a04 g       *ABS*	00000000 __tls_base
00004e18 g     F .text	0000000c __malloc_unlock
00000d40 g     F .text	0000005c alt_log_jtag_uart_isr_proc
0000b068 g     O .bss	00000001 __lock___arc4random_mutex
00004c14 g     F .text	0000011c memmove
00003544 g     F .text	00000014 _cleanup
0000b064 g     O .bss	00000004 __stack_chk_guard
0000b024 g     O .bss	00000001 alt_log_write_on_flag
00009500 g     O .rwdata	00000004 __atexit_recursive_mutex
00004388 g     F .text	00000004 __retarget_lock_close
0000b027 g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
00000000 g     F .entry	00000004 __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000650c g     F .text	00000060 _fstat_r
0000b060 g     O .bss	00000004 errno
00005a14 g     F .text	00000008 __seofread
0000b118 g     O .bss	00000011 alt_log_write_buf
0000b038 g     O .bss	00000004 alt_argv
000012f8 g     F .text	00000034 usleep
00008b28 g     O .rwdata	00000180 alt_fd_list
00007a20 g     O .rwdata	0000001d alt_log_msg_alt_main
0000b026 g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
000072ac g     F .text	00000120 alt_find_dev
00002b14 g     F .text	000001a4 memcpy
0000344c g     F .text	0000000c _cleanup_r
000029e0 g     F .text	000000b0 alt_niosv_timer_sc_isr
000026c8 g     F .text	00000078 alt_io_redirect
00002de4 g     F .text	0000000c puts
000075e8 g       *ABS*	00000000 __fini_array_end
00001b14 g     F .text	0000022c altera_avalon_jtag_uart_read
00005524 g     F .text	000000c4 _raise_r
00006814 g     F .text	000000c0 _fstat
000001b4 g     F .exceptions	0000011c handle_trap
00000ef4 g     F .text	00000088 alt_log_system_clock
0000b094 g     O .bss	00000004 __malloc_top_pad
000059b4 g     F .text	00000004 _getpid_r
0000b050 g     O .bss	00000004 __dso_handle
00003d8c g     F .text	0000049c __sfvwrite_r
000055e8 g     F .text	000000e0 __sigtramp_r
00000af8 g     F .text	000000a4 alt_log_printf_proc
000053e0 g     F .text	00000058 _sbrk_r
0000b028 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
000064a8 g     F .text	00000064 _read_r
000094f4 g     O .rwdata	00000004 alt_max_fd
00005c64 g     F .text	00000178 _fclose_r
00006114 g     F .text	000000c8 fflush
0000b090 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b130 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
00003044 g     F .text	0000001c __stack_chk_init
0000b074 g     O .bss	00000001 __lock___env_recursive_mutex
00006940 g     F .text	000000fc _isatty
0000b088 g     O .bss	00000001 __lock___sinit_recursive_mutex
00007a00 g     O .rodata	00000004 _global_impure_ptr
00004e88 g     F .text	00000558 _realloc_r
0000b170 g       *ABS*	00000000 __bss_end
00002470 g     F .text	0000017c alt_iic_isr_register
00001198 g     F .text	00000160 alt_tick
00006de0 g     F .text	00000168 _open
0000b030 g     O .bss	00000004 alt_system_clock_in_sec
0000709c g     F .text	000000b4 _sbrk
00000cf8 g     F .text	00000048 alt_log_jtag_uart_startup_info
00002fa0 g     F .text	00000098 __stack_chk_fail
00007a04 g       *ABS*	00000000 __tbss_start
00002a90 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
00003894 g     F .text	0000002c __fp_lock_all
00001100 g     F .text	00000098 alt_alarm_stop
0000b025 g     O .bss	00000001 alt_log_sys_clk_on_flag
000000c0 g     F .exceptions	000000f4 alt_irq_handler
000005b0 g     F .text	00000548 alt_log_private_printf
00008b00 g     O .rwdata	00000028 alt_dev_null
000038ec g     F .text	0000005c __libc_fini_array
00007a04 g     O .rwdata	00000019 alt_log_msg_bss
00002894 g     F .text	00000084 alt_niosv_mtime_get
00002e84 g     F .text	0000011c _reclaim_reent
00002198 g     F .text	00000048 alt_dcache_flush_all
0000b078 g     O .bss	00000001 __lock___malloc_recursive_mutex
00009510 g       *ABS*	00000000 __ram_rwdata_end
000094ec g     O .rwdata	00000008 alt_dev_list
00003140 g     F .text	00000014 write
00002870 g     F .text	00000024 alt_timestamp_freq
00007a04 g       *ABS*	00000000 __ram_rodata_end
000075d0 g     F .text	00000010 fstat
0000b170 g       *ABS*	00000000 end
0000220c g     F .text	0000003c alt_dev_reg
000043ac g     F .text	00000004 __retarget_lock_release_recursive
000004f8 g     F .text	00000058 alt_log_txchar
000043a0 g     F .text	00000008 __retarget_lock_try_acquire_recursive
00001574 g     F .text	00000128 altera_avalon_jtag_uart_init
00010000 g       *ABS*	00000000 __alt_stack_pointer
00001d40 g     F .text	0000023c altera_avalon_jtag_uart_write
00003864 g     F .text	0000000c __sfp_lock_acquire
00004b50 g     F .text	000000c4 memchr
00003a84 g     F .text	00000308 _free_r
000032a0 g     F .text	0000013c __call_exitprocs
00009504 g     O .rwdata	00000004 __malloc_sbrk_base
00000318 g     F .text	00000110 _start
0000b040 g     O .bss	00000004 _alt_tick_rate
00004398 g     F .text	00000008 __retarget_lock_try_acquire
00006bc8 g     F .text	000000e0 _lseek
0000b048 g     O .bss	00000008 _alt_nticks
00005788 g     F .text	00000094 signal
00002974 g     F .text	0000006c alt_niosv_mtimecmp_get
00001364 g     F .text	0000009c alt_sys_init
00004e24 g     F .text	00000064 _open_r
00007a04 g       *ABS*	00000000 __tdata_source
000031b8 g     F .text	000000e8 __register_exitproc
00001f7c g       .text	00000000 tx_log_str
000019a8 g     F .text	0000006c altera_avalon_jtag_uart_close
00007a04 g       *ABS*	00000000 __ram_rwdata_start
000075e8 g       *ABS*	00000000 __ram_rodata_start
0000b148 g     O .bss	00000028 __malloc_current_mallinfo
0000b058 g     O .bss	00000008 alt_niosv_timestamp_offset
000094d8 g     O .rwdata	00000004 alt_log_boot_on_flag
0000b020 g     O .bss	00000004 alt_niosv_timer_interrupt_handler
00001400 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00007508 g     F .text	000000c8 alt_get_fd
00002120 g     F .text	00000078 alt_busy_sleep
000033f4 g     F .text	00000058 _close_r
00000c18 g     F .text	000000e0 alt_log_jtag_uart_print_control_reg
000014c8 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
0000b170 g       *ABS*	00000000 __alt_stack_base
0000151c g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
0000438c g     F .text	00000004 __retarget_lock_close_recursive
00005b24 g     F .text	00000140 __swsetup_r
00003708 g     F .text	0000015c __sfp
000090d0 g     O .rwdata	00000408 __malloc_av_
00003888 g     F .text	0000000c __sinit_lock_release
000059b8 g     F .text	0000005c __sread
000073cc g     F .text	0000013c alt_find_file
00002294 g     F .text	000000a8 alt_dev_llist_insert
00004e0c g     F .text	0000000c __malloc_lock
000075e8 g       *ABS*	00000000 __fini_array_start
00006034 g     F .text	000000e0 _fflush_r
00004394 g     F .text	00000004 __retarget_lock_acquire_recursive
0000b01c g       *ABS*	00000000 __bss_start
00007a04 g       *ABS*	00000000 __tdata_start
00007a04 g       *ABS*	00000000 __tdata_end
00004d30 g     F .text	000000dc memset
000002d0 g     F .text	00000048 main
0000b03c g     O .bss	00000004 alt_envp
0000b08c g     O .bss	00000004 __malloc_max_total_mem
00001464 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00004384 g     F .text	00000004 __retarget_lock_init_recursive
00005b1c g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
00005ddc g     F .text	0000000c fclose
000027d8 g     F .text	00000040 alt_timestamp_start
000075e8 g       *ABS*	00000000 __init_array_end
000043b0 g     F .text	000007a0 _malloc_r
000094f8 g     O .rwdata	00000004 alt_errno
00000b9c g     F .text	0000007c altera_avalon_jtag_uart_report_log
0000581c g     F .text	0000005c _init_signal
00004228 g     F .text	000000a4 _fwalk
00007a74 g     O .rwdata	0000002a alt_log_msg_cache
00003948 g     F .text	0000013c _malloc_trim_r
000075e8 g       *ABS*	00000000 __flash_rodata_start
00004380 g     F .text	00000004 __retarget_lock_init
0000132c g     F .text	00000038 alt_irq_init
00002740 g     F .text	00000074 alt_release_fd
00007a40 g     O .rwdata	00000031 alt_log_msg_stackpointer
00002acc g     F .text	00000014 atexit
00003154 g     F .text	00000064 _write_r
000094fc g     O .rwdata	00000004 _impure_ptr
0000b034 g     O .bss	00000004 alt_argc
00005de8 g     F .text	0000024c __sflush_r
0000239c g     F .text	00000060 _do_dtors
000038c0 g     F .text	0000002c __fp_unlock_all
000094e4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002818 g     F .text	00000058 alt_timestamp
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000063d0 g     F .text	000000d8 __swhatbuf_r
0000b02c g     O .bss	00000004 alt_log_sys_clk_count
00000d9c g     F .text	00000158 alt_log_write
0000241c g     F .text	00000054 alt_ic_isr_register
00000020 g       .exceptions	00000000 trap_vector
0000719c g     F .text	00000110 _write
00009510 g       *ABS*	00000000 _edata
0000b170 g       *ABS*	00000000 _end
000002d0 g       *ABS*	00000000 __ram_exceptions_end
0000b07c g     O .bss	00000001 __lock___at_quick_exit_mutex
00001a14 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
000027b4 g     F .text	00000024 intel_niosv_irq_init
00005a1c g     F .text	00000088 __swrite
00009508 g     O .rwdata	00000004 __malloc_trim_threshold
00002ae0 g     F .text	00000034 exit
000042cc g     F .text	000000b4 _fwalk_reent
00006a88 g     F .text	000000f4 _kill
00010000 g       *ABS*	00000000 __alt_data_end
00007a04 g       *ABS*	00000000 __tbss_end
00003870 g     F .text	0000000c __sfp_lock_release
00006f94 g     F .text	00000108 _read
000075e0 g       *ABS*	00000000 __init_array_start
00004390 g     F .text	00000004 __retarget_lock_acquire
000043a8 g     F .text	00000004 __retarget_lock_release
000066f0 g     F .text	000000d8 _exit
00001fb4 g     F .text	0000016c alt_alarm_start
0000b06c g     O .bss	00000001 __lock___dd_hash_mutex
00006240 g     F .text	00000190 __smakebuf_r
0000b070 g     O .bss	00000001 __lock___tz_mutex
00003060 g     F .text	0000008c strlen
00005438 g     F .text	0000005c _init_signal_r
000030f8 g     F .text	00000048 open
000023fc g     F .text	00000020 alt_icache_flush_all
00002918 g     F .text	0000005c alt_niosv_mtimecmp_set
000094dc g     O .rwdata	00000008 alt_alarm_list
0000233c g     F .text	00000060 _do_ctors
00005878 g     F .text	000000dc __sigtramp
000030ec g     F .text	0000000c close
00000550 g     F .text	00000060 alt_log_repchar
0000048c g     F .text	0000006c alt_load
0000b01c g     O .bss	00000004 alt_niosv_software_interrupt_handler
0000b084 g     O .bss	00000001 __lock___sfp_recursive_mutex
00006610 g     F .text	000000e0 _close
000056c8 g     F .text	000000c0 raise
0000387c g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	3180006f          	j	318 <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
  20:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
  24:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  28:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  2c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  30:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  34:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  38:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  3c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  40:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  44:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  48:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  4c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  50:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  54:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  58:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  5c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  60:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	ra,1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  b8:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	addi	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fe442783          	lw	a5,-28(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  f8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fd442703          	lw	a4,-44(s0)
 108:	fd842783          	lw	a5,-40(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	0000b7b7          	lui	a5,0xb
 118:	09878713          	addi	a4,a5,152 # b098 <alt_irq>
 11c:	fdc42783          	lw	a5,-36(s0)
 120:	00379793          	slli	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	0000b7b7          	lui	a5,0xb
 130:	09878693          	addi	a3,a5,152 # b098 <alt_irq>
 134:	fdc42783          	lw	a5,-36(s0)
 138:	00379793          	slli	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 160:	fe842703          	lw	a4,-24(s0)
 164:	fec42783          	lw	a5,-20(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srli	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fd842783          	lw	a5,-40(s0)
 178:	00179793          	slli	a5,a5,0x1
 17c:	fcf42c23          	sw	a5,-40(s0)
            i++;
 180:	fdc42783          	lw	a5,-36(s0)
 184:	00178793          	addi	a5,a5,1
 188:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 194:	fd442783          	lw	a5,-44(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	00000013          	nop
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	addi	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff7c793          	not	a5,a5
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1f4:	fe842783          	lw	a5,-24(s0)
 1f8:	0a078663          	beqz	a5,2a4 <handle_trap+0xf0>
        switch (exception_code) {
 1fc:	fec42703          	lw	a4,-20(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fec42703          	lw	a4,-20(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	0000b7b7          	lui	a5,0xb
 218:	0207a783          	lw	a5,32(a5) # b020 <alt_niosv_timer_interrupt_handler>
 21c:	08078863          	beqz	a5,2ac <handle_trap+0xf8>
                    ALT_OS_INT_ENTER();
 220:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	0000b7b7          	lui	a5,0xb
 228:	0207a783          	lw	a5,32(a5) # b020 <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	00000013          	nop
                break;
 240:	06c0006f          	j	2ac <handle_trap+0xf8>
                if (alt_niosv_software_interrupt_handler) {
 244:	0000b7b7          	lui	a5,0xb
 248:	01c7a783          	lw	a5,28(a5) # b01c <alt_niosv_software_interrupt_handler>
 24c:	06078463          	beqz	a5,2b4 <handle_trap+0x100>
                    ALT_OS_INT_ENTER();
 250:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	0000b7b7          	lui	a5,0xb
 258:	01c7a783          	lw	a5,28(a5) # b01c <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	00000013          	nop
                break;
 270:	0440006f          	j	2b4 <handle_trap+0x100>
                if (exception_code >= 16) {
 274:	fec42703          	lw	a4,-20(s0)
 278:	00f00793          	li	a5,15
 27c:	00e7f663          	bgeu	a5,a4,288 <handle_trap+0xd4>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	ra,c0 <alt_irq_handler>
                break;
 284:	0340006f          	j	2b8 <handle_trap+0x104>
                    ALT_LOG_PRINTF("invalid exception code: %d, epc = %d, tval = %d\n", exception_code, epc, tval);
 288:	fd442683          	lw	a3,-44(s0)
 28c:	fd842603          	lw	a2,-40(s0)
 290:	fec42583          	lw	a1,-20(s0)
 294:	000077b7          	lui	a5,0x7
 298:	60078513          	addi	a0,a5,1536 # 7600 <__fini_array_end+0x18>
 29c:	05d000ef          	jal	ra,af8 <alt_log_printf_proc>
                break;
 2a0:	0180006f          	j	2b8 <handle_trap+0x104>
            NIOSV_EBREAK();
 2a4:	00100073          	ebreak
 2a8:	0100006f          	j	2b8 <handle_trap+0x104>
                break;
 2ac:	00000013          	nop
 2b0:	0080006f          	j	2b8 <handle_trap+0x104>
                break;
 2b4:	00000013          	nop
    return epc;
 2b8:	fd842783          	lw	a5,-40(s0)
}
 2bc:	00078513          	mv	a0,a5
 2c0:	02c12083          	lw	ra,44(sp)
 2c4:	02812403          	lw	s0,40(sp)
 2c8:	03010113          	addi	sp,sp,48
 2cc:	00008067          	ret

Disassembly of section .text:

000002d0 <main>:
#include <unistd.h>
#include "system.h"
#include "io.h"

int main (void)
{
     2d0:	fe010113          	addi	sp,sp,-32
     2d4:	00112e23          	sw	ra,28(sp)
     2d8:	00812c23          	sw	s0,24(sp)
     2dc:	02010413          	addi	s0,sp,32
	printf("Starting NIOS V ... \r\n");
     2e0:	000077b7          	lui	a5,0x7
     2e4:	5e878513          	addi	a0,a5,1512 # 75e8 <__fini_array_end>
     2e8:	2fd020ef          	jal	ra,2de4 <puts>

	while(1)
	{
		uint32_t key = IORD_32DIRECT(KEY_BASE, 0);
     2ec:	000207b7          	lui	a5,0x20
     2f0:	02078793          	addi	a5,a5,32 # 20020 <__alt_data_end+0x10020>
     2f4:	0007a783          	lw	a5,0(a5)
     2f8:	fef42423          	sw	a5,-24(s0)
     2fc:	fe842783          	lw	a5,-24(s0)
     300:	fef42623          	sw	a5,-20(s0)
//		} else {
//			printf("LED L \r\n");
//			IOWR_32DIRECT(LED_BASE, 0, 1);
//		}

		usleep(500000);
     304:	0007a7b7          	lui	a5,0x7a
     308:	12078513          	addi	a0,a5,288 # 7a120 <__alt_data_end+0x6a120>
     30c:	7ed000ef          	jal	ra,12f8 <usleep>
	{
     310:	00000013          	nop
     314:	fd9ff06f          	j	2ec <main+0x1c>

00000318 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     318:	00000297          	auipc	t0,0x0
     31c:	d0828293          	addi	t0,t0,-760 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     320:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     324:	08800293          	li	t0,136
    csrc mstatus, t0
     328:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     32c:	30401073          	csrw	mie,zero
    csrw mip, zero
     330:	34401073          	csrw	mip,zero
 * RTL simulations can ensure the data cache tag RAM is already
 * initialized so skipping this speeds up RTL simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
#if ALT_CPU_DCACHE_SIZE > 0
    li t0, ALT_CPU_DCACHE_SIZE
     334:	000012b7          	lui	t0,0x1
0:
    /* cbo.inval.ix */
    .insn i 0x0F, 0x2, zero, t0, 0x080
     338:	0802a00f          	.4byte	0x802a00f
    addi t0, t0, -ALT_CPU_DCACHE_LINE_SIZE
     33c:	fe028293          	addi	t0,t0,-32 # fe0 <alt_main+0x64>
    bnez t0, 0b
     340:	fe029ce3          	bnez	t0,338 <_start+0x20>
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     344:	0000a197          	auipc	gp,0xa
     348:	99418193          	addi	gp,gp,-1644 # 9cd8 <__global_pointer$>
    .option pop

    /* Log that the stack pointer is about to be setup. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
     34c:	00009597          	auipc	a1,0x9
     350:	18c58593          	addi	a1,a1,396 # 94d8 <alt_log_boot_on_flag>
     354:	0005a503          	lw	a0,0(a1)
     358:	00050863          	beqz	a0,368 <_start+0x50>
     35c:	00007517          	auipc	a0,0x7
     360:	6e450513          	addi	a0,a0,1764 # 7a40 <alt_log_msg_stackpointer>
     364:	419010ef          	jal	ra,1f7c <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     368:	00010117          	auipc	sp,0x10
     36c:	c9810113          	addi	sp,sp,-872 # 10000 <__alt_data_end>
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
     370:	00009597          	auipc	a1,0x9
     374:	16858593          	addi	a1,a1,360 # 94d8 <alt_log_boot_on_flag>
     378:	0005a503          	lw	a0,0(a1)
     37c:	00050863          	beqz	a0,38c <_start+0x74>
     380:	00007517          	auipc	a0,0x7
     384:	68450513          	addi	a0,a0,1668 # 7a04 <alt_log_msg_bss>
     388:	3f5010ef          	jal	ra,1f7c <tx_log_str>
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     38c:	0000b317          	auipc	t1,0xb
     390:	c9030313          	addi	t1,t1,-880 # b01c <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
     394:	0000b397          	auipc	t2,0xb
     398:	ddc38393          	addi	t2,t2,-548 # b170 <__alt_heap_start>
0:
    sw zero, (t1)
     39c:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3a0:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3a4:	fe736ce3          	bltu	t1,t2,39c <_start+0x84>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     3a8:	0e4000ef          	jal	ra,48c <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     3ac:	00007317          	auipc	t1,0x7
     3b0:	65830313          	addi	t1,t1,1624 # 7a04 <alt_log_msg_bss>
    la t2, __tbss_end
     3b4:	00007397          	auipc	t2,0x7
     3b8:	65038393          	addi	t2,t2,1616 # 7a04 <alt_log_msg_bss>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     3bc:	00737863          	bgeu	t1,t2,3cc <_start+0xb4>
0:
    sw zero, (t1)
     3c0:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3c4:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3c8:	fe736ce3          	bltu	t1,t2,3c0 <_start+0xa8>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     3cc:	00007297          	auipc	t0,0x7
     3d0:	63828293          	addi	t0,t0,1592 # 7a04 <alt_log_msg_bss>
    la t1, __tdata_end
     3d4:	00007317          	auipc	t1,0x7
     3d8:	63030313          	addi	t1,t1,1584 # 7a04 <alt_log_msg_bss>
    la t2, __tdata_source
     3dc:	00007397          	auipc	t2,0x7
     3e0:	62838393          	addi	t2,t2,1576 # 7a04 <alt_log_msg_bss>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     3e4:	0062fc63          	bgeu	t0,t1,3fc <_start+0xe4>
0:
    lw s1, (t0)
     3e8:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     3ec:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     3f0:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     3f4:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     3f8:	fe62e8e3          	bltu	t0,t1,3e8 <_start+0xd0>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     3fc:	00007217          	auipc	tp,0x7
     400:	60820213          	addi	tp,tp,1544 # 7a04 <alt_log_msg_bss>

    /* Log that alt_main is about to be called. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
     404:	00009597          	auipc	a1,0x9
     408:	0d458593          	addi	a1,a1,212 # 94d8 <alt_log_boot_on_flag>
     40c:	0005a503          	lw	a0,0(a1)
     410:	00050863          	beqz	a0,420 <_start+0x108>
     414:	00007517          	auipc	a0,0x7
     418:	60c50513          	addi	a0,a0,1548 # 7a20 <alt_log_msg_alt_main>
     41c:	361010ef          	jal	ra,1f7c <tx_log_str>
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     420:	35d000ef          	jal	ra,f7c <alt_main>

00000424 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     424:	0000006f          	j	424 <alt_after_alt_main>

00000428 <alt_load_section>:
     428:	fe010113          	addi	sp,sp,-32
     42c:	00812e23          	sw	s0,28(sp)
     430:	02010413          	addi	s0,sp,32
     434:	fea42623          	sw	a0,-20(s0)
     438:	feb42423          	sw	a1,-24(s0)
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     43c:	fec42223          	sw	a2,-28(s0)
  if (to != from)
     440:	fe842703          	lw	a4,-24(s0)
     444:	fec42783          	lw	a5,-20(s0)
     448:	02f70a63          	beq	a4,a5,47c <alt_load_section+0x54>
  {
    while( to != end )
     44c:	0240006f          	j	470 <alt_load_section+0x48>
    {
      *to++ = *from++;
     450:	fec42703          	lw	a4,-20(s0)
     454:	00470793          	addi	a5,a4,4
     458:	fef42623          	sw	a5,-20(s0)
     45c:	fe842783          	lw	a5,-24(s0)
     460:	00478693          	addi	a3,a5,4
     464:	fed42423          	sw	a3,-24(s0)
     468:	00072703          	lw	a4,0(a4)
     46c:	00e7a023          	sw	a4,0(a5)
    while( to != end )
     470:	fe842703          	lw	a4,-24(s0)
     474:	fe442783          	lw	a5,-28(s0)
     478:	fcf71ce3          	bne	a4,a5,450 <alt_load_section+0x28>
    }
  }
}
     47c:	00000013          	nop
     480:	01c12403          	lw	s0,28(sp)
     484:	02010113          	addi	sp,sp,32
     488:	00008067          	ret

0000048c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     48c:	ff010113          	addi	sp,sp,-16
     490:	00112623          	sw	ra,12(sp)
     494:	00812423          	sw	s0,8(sp)
     498:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     49c:	83818613          	addi	a2,gp,-1992 # 9510 <__flash_rwdata_start>
     4a0:	000087b7          	lui	a5,0x8
     4a4:	a0478593          	addi	a1,a5,-1532 # 7a04 <alt_log_msg_bss>
     4a8:	83818513          	addi	a0,gp,-1992 # 9510 <__flash_rwdata_start>
     4ac:	f7dff0ef          	jal	ra,428 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     4b0:	2d000613          	li	a2,720
     4b4:	02000593          	li	a1,32
     4b8:	02000513          	li	a0,32
     4bc:	f6dff0ef          	jal	ra,428 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     4c0:	000087b7          	lui	a5,0x8
     4c4:	a0478613          	addi	a2,a5,-1532 # 7a04 <alt_log_msg_bss>
     4c8:	000077b7          	lui	a5,0x7
     4cc:	5e878593          	addi	a1,a5,1512 # 75e8 <__fini_array_end>
     4d0:	000077b7          	lui	a5,0x7
     4d4:	5e878513          	addi	a0,a5,1512 # 75e8 <__fini_array_end>
     4d8:	f51ff0ef          	jal	ra,428 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     4dc:	4bd010ef          	jal	ra,2198 <alt_dcache_flush_all>
  alt_icache_flush_all();
     4e0:	71d010ef          	jal	ra,23fc <alt_icache_flush_all>
}
     4e4:	00000013          	nop
     4e8:	00c12083          	lw	ra,12(sp)
     4ec:	00812403          	lw	s0,8(sp)
     4f0:	01010113          	addi	sp,sp,16
     4f4:	00008067          	ret

000004f8 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
     4f8:	fd010113          	addi	sp,sp,-48
     4fc:	02812623          	sw	s0,44(sp)
     500:	03010413          	addi	s0,sp,48
     504:	fca42e23          	sw	a0,-36(s0)
     508:	fcb42c23          	sw	a1,-40(s0)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
     50c:	00000013          	nop
     510:	fd842783          	lw	a5,-40(s0)
     514:	00478793          	addi	a5,a5,4
     518:	0007a783          	lw	a5,0(a5)
     51c:	fef42423          	sw	a5,-24(s0)
     520:	fe842703          	lw	a4,-24(s0)
     524:	000107b7          	lui	a5,0x10
     528:	fef764e3          	bltu	a4,a5,510 <alt_log_txchar+0x18>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
     52c:	fdc42783          	lw	a5,-36(s0)
     530:	fef42623          	sw	a5,-20(s0)
     534:	fd842783          	lw	a5,-40(s0)
     538:	fec42703          	lw	a4,-20(s0)
     53c:	00e7a023          	sw	a4,0(a5) # 10000 <__alt_data_end>
}
     540:	00000013          	nop
     544:	02c12403          	lw	s0,44(sp)
     548:	03010113          	addi	sp,sp,48
     54c:	00008067          	ret

00000550 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
     550:	fe010113          	addi	sp,sp,-32
     554:	00112e23          	sw	ra,28(sp)
     558:	00812c23          	sw	s0,24(sp)
     55c:	02010413          	addi	s0,sp,32
     560:	00050793          	mv	a5,a0
     564:	feb42423          	sw	a1,-24(s0)
     568:	fec42223          	sw	a2,-28(s0)
     56c:	fef407a3          	sb	a5,-17(s0)
  while(r-- > 0)
     570:	0180006f          	j	588 <alt_log_repchar+0x38>
    alt_log_txchar(c,(char*) base);
     574:	fef44783          	lbu	a5,-17(s0)
     578:	fe442703          	lw	a4,-28(s0)
     57c:	00070593          	mv	a1,a4
     580:	00078513          	mv	a0,a5
     584:	f75ff0ef          	jal	ra,4f8 <alt_log_txchar>
  while(r-- > 0)
     588:	fe842783          	lw	a5,-24(s0)
     58c:	fff78713          	addi	a4,a5,-1
     590:	fee42423          	sw	a4,-24(s0)
     594:	fef040e3          	bgtz	a5,574 <alt_log_repchar+0x24>
}
     598:	00000013          	nop
     59c:	00000013          	nop
     5a0:	01c12083          	lw	ra,28(sp)
     5a4:	01812403          	lw	s0,24(sp)
     5a8:	02010113          	addi	sp,sp,32
     5ac:	00008067          	ret

000005b0 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
     5b0:	fa010113          	addi	sp,sp,-96
     5b4:	04112e23          	sw	ra,92(sp)
     5b8:	04812c23          	sw	s0,88(sp)
     5bc:	04912a23          	sw	s1,84(sp)
     5c0:	06010413          	addi	s0,sp,96
     5c4:	faa42623          	sw	a0,-84(s0)
     5c8:	fab42423          	sw	a1,-88(s0)
     5cc:	fac42223          	sw	a2,-92(s0)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
     5d0:	fa042e23          	sw	zero,-68(s0)
  int fmtLong = 0;
     5d4:	fc042023          	sw	zero,-64(s0)
  int fmtBeforeDecimal = 0;
     5d8:	fc042223          	sw	zero,-60(s0)
  int fmtAfterDecimal = 0;
     5dc:	fc042423          	sw	zero,-56(s0)
  int fmtBase = 0;
     5e0:	fc042623          	sw	zero,-52(s0)
  int fmtSigned = 0;
     5e4:	fc042823          	sw	zero,-48(s0)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
     5e8:	fc042a23          	sw	zero,-44(s0)

  w = fmt;
     5ec:	fac42783          	lw	a5,-84(s0)
     5f0:	faf42a23          	sw	a5,-76(s0)
  state = pfState_chars;
     5f4:	fa042c23          	sw	zero,-72(s0)

  while(0 != (c = *w++))
     5f8:	4c80006f          	j	ac0 <alt_log_private_printf+0x510>
    {
    switch(state)
     5fc:	fb842703          	lw	a4,-72(s0)
     600:	00200793          	li	a5,2
     604:	0cf70c63          	beq	a4,a5,6dc <alt_log_private_printf+0x12c>
     608:	fb842703          	lw	a4,-72(s0)
     60c:	00200793          	li	a5,2
     610:	4ae7c863          	blt	a5,a4,ac0 <alt_log_private_printf+0x510>
     614:	fb842783          	lw	a5,-72(s0)
     618:	00078a63          	beqz	a5,62c <alt_log_private_printf+0x7c>
     61c:	fb842703          	lw	a4,-72(s0)
     620:	00100793          	li	a5,1
     624:	06f70263          	beq	a4,a5,688 <alt_log_private_printf+0xd8>
     628:	4980006f          	j	ac0 <alt_log_private_printf+0x510>
      {
      case pfState_chars:
        if(c == '%')
     62c:	fb344703          	lbu	a4,-77(s0)
     630:	02500793          	li	a5,37
     634:	02f71e63          	bne	a4,a5,670 <alt_log_private_printf+0xc0>
        {
          fmtLeadingZero = 0;
     638:	fa042e23          	sw	zero,-68(s0)
          fmtLong = 0;
     63c:	fc042023          	sw	zero,-64(s0)
          fmtBase = 10;
     640:	00a00793          	li	a5,10
     644:	fcf42623          	sw	a5,-52(s0)
          fmtSigned = 1;
     648:	00100793          	li	a5,1
     64c:	fcf42823          	sw	a5,-48(s0)
          fmtCase = 0; /* Only %X sets this. */
     650:	fc042a23          	sw	zero,-44(s0)
          fmtBeforeDecimal = -1;
     654:	fff00793          	li	a5,-1
     658:	fcf42223          	sw	a5,-60(s0)
          fmtAfterDecimal = -1;
     65c:	fff00793          	li	a5,-1
     660:	fcf42423          	sw	a5,-56(s0)
          state = pfState_firstFmtChar;
     664:	00100793          	li	a5,1
     668:	faf42c23          	sw	a5,-72(s0)
        }
        else
        {
          alt_log_txchar(c,(char*)base);
        }
        break;
     66c:	4540006f          	j	ac0 <alt_log_private_printf+0x510>
          alt_log_txchar(c,(char*)base);
     670:	fb344783          	lbu	a5,-77(s0)
     674:	fa842703          	lw	a4,-88(s0)
     678:	00070593          	mv	a1,a4
     67c:	00078513          	mv	a0,a5
     680:	e79ff0ef          	jal	ra,4f8 <alt_log_txchar>
        break;
     684:	43c0006f          	j	ac0 <alt_log_private_printf+0x510>

      case pfState_firstFmtChar:
        if(c == '0')
     688:	fb344703          	lbu	a4,-77(s0)
     68c:	03000793          	li	a5,48
     690:	00f71c63          	bne	a4,a5,6a8 <alt_log_private_printf+0xf8>
        {
          fmtLeadingZero = 1;
     694:	00100793          	li	a5,1
     698:	faf42e23          	sw	a5,-68(s0)
          state = pfState_otherFmtChar;
     69c:	00200793          	li	a5,2
     6a0:	faf42c23          	sw	a5,-72(s0)
        else
        {
          state = pfState_otherFmtChar;
          goto otherFmtChar;
        }
        break;
     6a4:	41c0006f          	j	ac0 <alt_log_private_printf+0x510>
        else if(c == '%')
     6a8:	fb344703          	lbu	a4,-77(s0)
     6ac:	02500793          	li	a5,37
     6b0:	02f71063          	bne	a4,a5,6d0 <alt_log_private_printf+0x120>
          alt_log_txchar(c,(char*)base);
     6b4:	fb344783          	lbu	a5,-77(s0)
     6b8:	fa842703          	lw	a4,-88(s0)
     6bc:	00070593          	mv	a1,a4
     6c0:	00078513          	mv	a0,a5
     6c4:	e35ff0ef          	jal	ra,4f8 <alt_log_txchar>
          state = pfState_chars;
     6c8:	fa042c23          	sw	zero,-72(s0)
        break;
     6cc:	3f40006f          	j	ac0 <alt_log_private_printf+0x510>
          state = pfState_otherFmtChar;
     6d0:	00200793          	li	a5,2
     6d4:	faf42c23          	sw	a5,-72(s0)
          goto otherFmtChar;
     6d8:	00000013          	nop

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
     6dc:	fb344703          	lbu	a4,-77(s0)
     6e0:	02e00793          	li	a5,46
     6e4:	00f71663          	bne	a4,a5,6f0 <alt_log_private_printf+0x140>
        {
          fmtAfterDecimal = 0;
     6e8:	fc042423          	sw	zero,-56(s0)
                }
              break;
            } /* switch last letter of fmt */
          state=pfState_chars;
          }
        break;
     6ec:	3d00006f          	j	abc <alt_log_private_printf+0x50c>
        else if('0' <= c && c <= '9')
     6f0:	fb344703          	lbu	a4,-77(s0)
     6f4:	02f00793          	li	a5,47
     6f8:	08e7f463          	bgeu	a5,a4,780 <alt_log_private_printf+0x1d0>
     6fc:	fb344703          	lbu	a4,-77(s0)
     700:	03900793          	li	a5,57
     704:	06e7ee63          	bltu	a5,a4,780 <alt_log_private_printf+0x1d0>
          c -= '0';
     708:	fb344783          	lbu	a5,-77(s0)
     70c:	fd078793          	addi	a5,a5,-48
     710:	faf409a3          	sb	a5,-77(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     714:	fc842783          	lw	a5,-56(s0)
     718:	0407d063          	bgez	a5,758 <alt_log_private_printf+0x1a8>
            if(fmtBeforeDecimal < 0)
     71c:	fc442783          	lw	a5,-60(s0)
     720:	0007d663          	bgez	a5,72c <alt_log_private_printf+0x17c>
              fmtBeforeDecimal = 0;
     724:	fc042223          	sw	zero,-60(s0)
     728:	01c0006f          	j	744 <alt_log_private_printf+0x194>
              fmtBeforeDecimal *= 10;
     72c:	fc442703          	lw	a4,-60(s0)
     730:	00070793          	mv	a5,a4
     734:	00279793          	slli	a5,a5,0x2
     738:	00e787b3          	add	a5,a5,a4
     73c:	00179793          	slli	a5,a5,0x1
     740:	fcf42223          	sw	a5,-60(s0)
            fmtBeforeDecimal += c;
     744:	fb344783          	lbu	a5,-77(s0)
     748:	fc442703          	lw	a4,-60(s0)
     74c:	00f707b3          	add	a5,a4,a5
     750:	fcf42223          	sw	a5,-60(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     754:	3680006f          	j	abc <alt_log_private_printf+0x50c>
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
     758:	fc842703          	lw	a4,-56(s0)
     75c:	00070793          	mv	a5,a4
     760:	00279793          	slli	a5,a5,0x2
     764:	00e787b3          	add	a5,a5,a4
     768:	00179793          	slli	a5,a5,0x1
     76c:	00078713          	mv	a4,a5
     770:	fb344783          	lbu	a5,-77(s0)
     774:	00f707b3          	add	a5,a4,a5
     778:	fcf42423          	sw	a5,-56(s0)
          if(fmtAfterDecimal < 0)     /* still before decimal */
     77c:	3400006f          	j	abc <alt_log_private_printf+0x50c>
        else if(c == 'l')
     780:	fb344703          	lbu	a4,-77(s0)
     784:	06c00793          	li	a5,108
     788:	00f71863          	bne	a4,a5,798 <alt_log_private_printf+0x1e8>
          fmtLong = 1;
     78c:	00100793          	li	a5,1
     790:	fcf42023          	sw	a5,-64(s0)
        break;
     794:	3280006f          	j	abc <alt_log_private_printf+0x50c>
          switch(c)
     798:	fb344783          	lbu	a5,-77(s0)
     79c:	fa878793          	addi	a5,a5,-88
     7a0:	02000713          	li	a4,32
     7a4:	30f76863          	bltu	a4,a5,ab4 <alt_log_private_printf+0x504>
     7a8:	00279713          	slli	a4,a5,0x2
     7ac:	000077b7          	lui	a5,0x7
     7b0:	63478793          	addi	a5,a5,1588 # 7634 <__fini_array_end+0x4c>
     7b4:	00f707b3          	add	a5,a4,a5
     7b8:	0007a783          	lw	a5,0(a5)
     7bc:	00078067          	jr	a5
                if(fmtLong)
     7c0:	fc042783          	lw	a5,-64(s0)
     7c4:	02078e63          	beqz	a5,800 <alt_log_private_printf+0x250>
                  if (fmtSigned)
     7c8:	fd042783          	lw	a5,-48(s0)
     7cc:	00078e63          	beqz	a5,7e8 <alt_log_private_printf+0x238>
                    v = va_arg(args,long);
     7d0:	fa442783          	lw	a5,-92(s0)
     7d4:	00478713          	addi	a4,a5,4
     7d8:	fae42223          	sw	a4,-92(s0)
     7dc:	0007a783          	lw	a5,0(a5)
     7e0:	fcf42c23          	sw	a5,-40(s0)
     7e4:	0500006f          	j	834 <alt_log_private_printf+0x284>
                    v = va_arg(args,unsigned long);
     7e8:	fa442783          	lw	a5,-92(s0)
     7ec:	00478713          	addi	a4,a5,4
     7f0:	fae42223          	sw	a4,-92(s0)
     7f4:	0007a783          	lw	a5,0(a5)
     7f8:	fcf42c23          	sw	a5,-40(s0)
     7fc:	0380006f          	j	834 <alt_log_private_printf+0x284>
                  if (fmtSigned)
     800:	fd042783          	lw	a5,-48(s0)
     804:	00078e63          	beqz	a5,820 <alt_log_private_printf+0x270>
                    v = va_arg(args,int);
     808:	fa442783          	lw	a5,-92(s0)
     80c:	00478713          	addi	a4,a5,4
     810:	fae42223          	sw	a4,-92(s0)
     814:	0007a783          	lw	a5,0(a5)
     818:	fcf42c23          	sw	a5,-40(s0)
     81c:	0180006f          	j	834 <alt_log_private_printf+0x284>
                    v = va_arg(args,unsigned int);
     820:	fa442783          	lw	a5,-92(s0)
     824:	00478713          	addi	a4,a5,4
     828:	fae42223          	sw	a4,-92(s0)
     82c:	0007a783          	lw	a5,0(a5)
     830:	fcf42c23          	sw	a5,-40(s0)
                sign = 0;
     834:	fe042223          	sw	zero,-28(s0)
                if( fmtSigned && (v & (0x80000000)) )
     838:	fd042783          	lw	a5,-48(s0)
     83c:	02078063          	beqz	a5,85c <alt_log_private_printf+0x2ac>
     840:	fd842783          	lw	a5,-40(s0)
     844:	0007dc63          	bgez	a5,85c <alt_log_private_printf+0x2ac>
                  v = ~v + 1;
     848:	fd842783          	lw	a5,-40(s0)
     84c:	40f007b3          	neg	a5,a5
     850:	fcf42c23          	sw	a5,-40(s0)
                  sign = 1;
     854:	00100793          	li	a5,1
     858:	fef42223          	sw	a5,-28(s0)
                vShrink = v;
     85c:	fd842783          	lw	a5,-40(s0)
     860:	fef42023          	sw	a5,-32(s0)
                p = 1;
     864:	00100793          	li	a5,1
     868:	fcf42e23          	sw	a5,-36(s0)
                digitCount = 1;
     86c:	00100793          	li	a5,1
     870:	fef42423          	sw	a5,-24(s0)
                while( (vShrink = vShrink / fmtBase) > 0 )
     874:	0200006f          	j	894 <alt_log_private_printf+0x2e4>
                  digitCount++;
     878:	fe842783          	lw	a5,-24(s0)
     87c:	00178793          	addi	a5,a5,1
     880:	fef42423          	sw	a5,-24(s0)
                  p *= fmtBase;
     884:	fcc42783          	lw	a5,-52(s0)
     888:	fdc42703          	lw	a4,-36(s0)
     88c:	02f707b3          	mul	a5,a4,a5
     890:	fcf42e23          	sw	a5,-36(s0)
                while( (vShrink = vShrink / fmtBase) > 0 )
     894:	fcc42783          	lw	a5,-52(s0)
     898:	fe042703          	lw	a4,-32(s0)
     89c:	02f757b3          	divu	a5,a4,a5
     8a0:	fef42023          	sw	a5,-32(s0)
     8a4:	fe042783          	lw	a5,-32(s0)
     8a8:	fc0798e3          	bnez	a5,878 <alt_log_private_printf+0x2c8>
                fmtBeforeDecimal -= digitCount;
     8ac:	fc442703          	lw	a4,-60(s0)
     8b0:	fe842783          	lw	a5,-24(s0)
     8b4:	40f707b3          	sub	a5,a4,a5
     8b8:	fcf42223          	sw	a5,-60(s0)
                if(fmtLeadingZero)
     8bc:	fbc42783          	lw	a5,-68(s0)
     8c0:	02078e63          	beqz	a5,8fc <alt_log_private_printf+0x34c>
                  if(sign)
     8c4:	fe442783          	lw	a5,-28(s0)
     8c8:	02078063          	beqz	a5,8e8 <alt_log_private_printf+0x338>
                    alt_log_txchar('-',(char*)base);
     8cc:	fa842783          	lw	a5,-88(s0)
     8d0:	00078593          	mv	a1,a5
     8d4:	02d00513          	li	a0,45
     8d8:	c21ff0ef          	jal	ra,4f8 <alt_log_txchar>
                    fmtBeforeDecimal--;
     8dc:	fc442783          	lw	a5,-60(s0)
     8e0:	fff78793          	addi	a5,a5,-1
     8e4:	fcf42223          	sw	a5,-60(s0)
                  alt_log_repchar('0',fmtBeforeDecimal,base);
     8e8:	fa842603          	lw	a2,-88(s0)
     8ec:	fc442583          	lw	a1,-60(s0)
     8f0:	03000513          	li	a0,48
     8f4:	c5dff0ef          	jal	ra,550 <alt_log_repchar>
     8f8:	0c00006f          	j	9b8 <alt_log_private_printf+0x408>
                    if(sign)
     8fc:	fe442783          	lw	a5,-28(s0)
     900:	00078863          	beqz	a5,910 <alt_log_private_printf+0x360>
                      fmtBeforeDecimal--;
     904:	fc442783          	lw	a5,-60(s0)
     908:	fff78793          	addi	a5,a5,-1
     90c:	fcf42223          	sw	a5,-60(s0)
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
     910:	fa842603          	lw	a2,-88(s0)
     914:	fc442583          	lw	a1,-60(s0)
     918:	02000513          	li	a0,32
     91c:	c35ff0ef          	jal	ra,550 <alt_log_repchar>
                    if(sign)
     920:	fe442783          	lw	a5,-28(s0)
     924:	08078a63          	beqz	a5,9b8 <alt_log_private_printf+0x408>
                      alt_log_txchar('-',(char*)base);
     928:	fa842783          	lw	a5,-88(s0)
     92c:	00078593          	mv	a1,a5
     930:	02d00513          	li	a0,45
     934:	bc5ff0ef          	jal	ra,4f8 <alt_log_txchar>
                while(p)
     938:	0800006f          	j	9b8 <alt_log_private_printf+0x408>
                  d = v / p;
     93c:	fd842703          	lw	a4,-40(s0)
     940:	fdc42783          	lw	a5,-36(s0)
     944:	02f757b3          	divu	a5,a4,a5
     948:	faf40923          	sb	a5,-78(s0)
                  d += '0';
     94c:	fb244783          	lbu	a5,-78(s0)
     950:	03078793          	addi	a5,a5,48
     954:	faf40923          	sb	a5,-78(s0)
                  if(d > '9')
     958:	fb244703          	lbu	a4,-78(s0)
     95c:	03900793          	li	a5,57
     960:	02e7f263          	bgeu	a5,a4,984 <alt_log_private_printf+0x3d4>
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
     964:	fd442783          	lw	a5,-44(s0)
     968:	00078663          	beqz	a5,974 <alt_log_private_printf+0x3c4>
     96c:	00700793          	li	a5,7
     970:	0080006f          	j	978 <alt_log_private_printf+0x3c8>
     974:	02700793          	li	a5,39
     978:	fb244703          	lbu	a4,-78(s0)
     97c:	00e787b3          	add	a5,a5,a4
     980:	faf40923          	sb	a5,-78(s0)
                  alt_log_txchar(d,(char*)base);
     984:	fb244783          	lbu	a5,-78(s0)
     988:	fa842703          	lw	a4,-88(s0)
     98c:	00070593          	mv	a1,a4
     990:	00078513          	mv	a0,a5
     994:	b65ff0ef          	jal	ra,4f8 <alt_log_txchar>
                  v = v % p;
     998:	fd842703          	lw	a4,-40(s0)
     99c:	fdc42783          	lw	a5,-36(s0)
     9a0:	02f777b3          	remu	a5,a4,a5
     9a4:	fcf42c23          	sw	a5,-40(s0)
                  p = p / fmtBase;
     9a8:	fcc42783          	lw	a5,-52(s0)
     9ac:	fdc42703          	lw	a4,-36(s0)
     9b0:	02f757b3          	divu	a5,a4,a5
     9b4:	fcf42e23          	sw	a5,-36(s0)
                while(p)
     9b8:	fdc42783          	lw	a5,-36(s0)
     9bc:	f80790e3          	bnez	a5,93c <alt_log_private_printf+0x38c>
              state = pfState_chars;
     9c0:	fa042c23          	sw	zero,-72(s0)
              break;
     9c4:	0f00006f          	j	ab4 <alt_log_private_printf+0x504>
              fmtSigned = 0;
     9c8:	fc042823          	sw	zero,-48(s0)
              goto doIntegerPrint;
     9cc:	df5ff06f          	j	7c0 <alt_log_private_printf+0x210>
              fmtSigned = 0;
     9d0:	fc042823          	sw	zero,-48(s0)
              fmtBase = 8;
     9d4:	00800793          	li	a5,8
     9d8:	fcf42623          	sw	a5,-52(s0)
              goto doIntegerPrint;
     9dc:	de5ff06f          	j	7c0 <alt_log_private_printf+0x210>
              fmtSigned = 0;
     9e0:	fc042823          	sw	zero,-48(s0)
              fmtBase = 16;
     9e4:	01000793          	li	a5,16
     9e8:	fcf42623          	sw	a5,-52(s0)
              goto doIntegerPrint;
     9ec:	dd5ff06f          	j	7c0 <alt_log_private_printf+0x210>
              fmtSigned = 0;
     9f0:	fc042823          	sw	zero,-48(s0)
              fmtBase = 16;
     9f4:	01000793          	li	a5,16
     9f8:	fcf42623          	sw	a5,-52(s0)
              fmtCase = 1;
     9fc:	00100793          	li	a5,1
     a00:	fcf42a23          	sw	a5,-44(s0)
              goto doIntegerPrint;
     a04:	dbdff06f          	j	7c0 <alt_log_private_printf+0x210>
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
     a08:	fc442783          	lw	a5,-60(s0)
     a0c:	fff78793          	addi	a5,a5,-1
     a10:	fa842603          	lw	a2,-88(s0)
     a14:	00078593          	mv	a1,a5
     a18:	02000513          	li	a0,32
     a1c:	b35ff0ef          	jal	ra,550 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
     a20:	fa442783          	lw	a5,-92(s0)
     a24:	00478713          	addi	a4,a5,4
     a28:	fae42223          	sw	a4,-92(s0)
     a2c:	0007a783          	lw	a5,0(a5)
     a30:	fa842703          	lw	a4,-88(s0)
     a34:	00070593          	mv	a1,a4
     a38:	00078513          	mv	a0,a5
     a3c:	abdff0ef          	jal	ra,4f8 <alt_log_txchar>
              break;
     a40:	0740006f          	j	ab4 <alt_log_private_printf+0x504>
                s = va_arg(args,char *);
     a44:	fa442783          	lw	a5,-92(s0)
     a48:	00478713          	addi	a4,a5,4
     a4c:	fae42223          	sw	a4,-92(s0)
     a50:	0007a783          	lw	a5,0(a5)
     a54:	fef42623          	sw	a5,-20(s0)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
     a58:	fc442483          	lw	s1,-60(s0)
     a5c:	fec42503          	lw	a0,-20(s0)
     a60:	600020ef          	jal	ra,3060 <strlen>
     a64:	00050793          	mv	a5,a0
     a68:	40f487b3          	sub	a5,s1,a5
     a6c:	fa842603          	lw	a2,-88(s0)
     a70:	00078593          	mv	a1,a5
     a74:	02000513          	li	a0,32
     a78:	ad9ff0ef          	jal	ra,550 <alt_log_repchar>
                while(*s)
     a7c:	0280006f          	j	aa4 <alt_log_private_printf+0x4f4>
                  alt_log_txchar(*s++,(char*)base);
     a80:	fec42783          	lw	a5,-20(s0)
     a84:	00178713          	addi	a4,a5,1
     a88:	fee42623          	sw	a4,-20(s0)
     a8c:	0007c783          	lbu	a5,0(a5)
     a90:	00078713          	mv	a4,a5
     a94:	fa842783          	lw	a5,-88(s0)
     a98:	00078593          	mv	a1,a5
     a9c:	00070513          	mv	a0,a4
     aa0:	a59ff0ef          	jal	ra,4f8 <alt_log_txchar>
                while(*s)
     aa4:	fec42783          	lw	a5,-20(s0)
     aa8:	0007c783          	lbu	a5,0(a5)
     aac:	fc079ae3          	bnez	a5,a80 <alt_log_private_printf+0x4d0>
              break;
     ab0:	00000013          	nop
          state=pfState_chars;
     ab4:	fa042c23          	sw	zero,-72(s0)
        break;
     ab8:	0040006f          	j	abc <alt_log_private_printf+0x50c>
     abc:	00000013          	nop
  while(0 != (c = *w++))
     ac0:	fb442783          	lw	a5,-76(s0)
     ac4:	00178713          	addi	a4,a5,1
     ac8:	fae42a23          	sw	a4,-76(s0)
     acc:	0007c783          	lbu	a5,0(a5)
     ad0:	faf409a3          	sb	a5,-77(s0)
     ad4:	fb344783          	lbu	a5,-77(s0)
     ad8:	b20792e3          	bnez	a5,5fc <alt_log_private_printf+0x4c>
      } /* switch */
    } /* while chars left */
  } /* printf */
     adc:	00000013          	nop
     ae0:	00000013          	nop
     ae4:	05c12083          	lw	ra,92(sp)
     ae8:	05812403          	lw	s0,88(sp)
     aec:	05412483          	lw	s1,84(sp)
     af0:	06010113          	addi	sp,sp,96
     af4:	00008067          	ret

00000af8 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
     af8:	fb010113          	addi	sp,sp,-80
     afc:	02112623          	sw	ra,44(sp)
     b00:	02812423          	sw	s0,40(sp)
     b04:	03010413          	addi	s0,sp,48
     b08:	fca42e23          	sw	a0,-36(s0)
     b0c:	00b42223          	sw	a1,4(s0)
     b10:	00c42423          	sw	a2,8(s0)
     b14:	00d42623          	sw	a3,12(s0)
     b18:	00e42823          	sw	a4,16(s0)
     b1c:	00f42a23          	sw	a5,20(s0)
     b20:	01042c23          	sw	a6,24(s0)
     b24:	01142e23          	sw	a7,28(s0)
     b28:	0000b7b7          	lui	a5,0xb
     b2c:	0647a703          	lw	a4,100(a5) # b064 <__stack_chk_guard>
     b30:	fee42623          	sw	a4,-20(s0)
     b34:	00000713          	li	a4,0
    va_list args;

    va_start (args, fmt);
     b38:	02040793          	addi	a5,s0,32
     b3c:	fcf42c23          	sw	a5,-40(s0)
     b40:	fd842783          	lw	a5,-40(s0)
     b44:	fe478793          	addi	a5,a5,-28
     b48:	fef42423          	sw	a5,-24(s0)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
     b4c:	fe842783          	lw	a5,-24(s0)
     b50:	00078613          	mv	a2,a5
     b54:	000207b7          	lui	a5,0x20
     b58:	04078593          	addi	a1,a5,64 # 20040 <__alt_data_end+0x10040>
     b5c:	fdc42503          	lw	a0,-36(s0)
     b60:	a51ff0ef          	jal	ra,5b0 <alt_log_private_printf>
    va_end (args);
    return (0);
     b64:	00000793          	li	a5,0
     b68:	00078713          	mv	a4,a5
}
     b6c:	0000b7b7          	lui	a5,0xb
     b70:	fec42683          	lw	a3,-20(s0)
     b74:	0647a783          	lw	a5,100(a5) # b064 <__stack_chk_guard>
     b78:	00f6c7b3          	xor	a5,a3,a5
     b7c:	00000693          	li	a3,0
     b80:	00078463          	beqz	a5,b88 <alt_log_printf_proc+0x90>
     b84:	41c020ef          	jal	ra,2fa0 <__stack_chk_fail>
     b88:	00070513          	mv	a0,a4
     b8c:	02c12083          	lw	ra,44(sp)
     b90:	02812403          	lw	s0,40(sp)
     b94:	05010113          	addi	sp,sp,80
     b98:	00008067          	ret

00000b9c <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
     b9c:	fd010113          	addi	sp,sp,-48
     ba0:	02112623          	sw	ra,44(sp)
     ba4:	02812423          	sw	s0,40(sp)
     ba8:	03010413          	addi	s0,sp,48
     bac:	fca42e23          	sw	a0,-36(s0)
    if (alt_log_jtag_uart_alarm_on_flag) {
     bb0:	0000b7b7          	lui	a5,0xb
     bb4:	0267c783          	lbu	a5,38(a5) # b026 <alt_log_jtag_uart_alarm_on_flag>
     bb8:	0ff7f793          	zext.b	a5,a5
     bbc:	04078263          	beqz	a5,c00 <altera_avalon_jtag_uart_report_log+0x64>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
     bc0:	fdc42783          	lw	a5,-36(s0)
     bc4:	fef42423          	sw	a5,-24(s0)
        const char* header="JTAG Alarm:";
     bc8:	000077b7          	lui	a5,0x7
     bcc:	6b878793          	addi	a5,a5,1720 # 76b8 <__fini_array_end+0xd0>
     bd0:	fef42623          	sw	a5,-20(s0)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
     bd4:	fe842783          	lw	a5,-24(s0)
     bd8:	0007a783          	lw	a5,0(a5)
     bdc:	fec42603          	lw	a2,-20(s0)
     be0:	00078593          	mv	a1,a5
     be4:	fe842503          	lw	a0,-24(s0)
     be8:	030000ef          	jal	ra,c18 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     bec:	0000b7b7          	lui	a5,0xb
     bf0:	0407a703          	lw	a4,64(a5) # b040 <_alt_tick_rate>
        return ALT_LOG_JTAG_UART_TICKS;
     bf4:	00a00793          	li	a5,10
     bf8:	02f757b3          	divu	a5,a4,a5
     bfc:	0080006f          	j	c04 <altera_avalon_jtag_uart_report_log+0x68>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
     c00:	00000793          	li	a5,0
    }
}
     c04:	00078513          	mv	a0,a5
     c08:	02c12083          	lw	ra,44(sp)
     c0c:	02812403          	lw	s0,40(sp)
     c10:	03010113          	addi	sp,sp,48
     c14:	00008067          	ret

00000c18 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
     c18:	fb010113          	addi	sp,sp,-80
     c1c:	04112623          	sw	ra,76(sp)
     c20:	04812423          	sw	s0,72(sp)
     c24:	05010413          	addi	s0,sp,80
     c28:	fca42623          	sw	a0,-52(s0)
     c2c:	fcb42423          	sw	a1,-56(s0)
     c30:	fcc42223          	sw	a2,-60(s0)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     c34:	fc842783          	lw	a5,-56(s0)
     c38:	00478793          	addi	a5,a5,4
     c3c:	0007a783          	lw	a5,0(a5)
     c40:	fcf42823          	sw	a5,-48(s0)
     c44:	fd042783          	lw	a5,-48(s0)
     c48:	fcf42a23          	sw	a5,-44(s0)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
     c4c:	fd442783          	lw	a5,-44(s0)
     c50:	0107d793          	srli	a5,a5,0x10
     c54:	fcf42c23          	sw	a5,-40(s0)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
     c58:	fd442783          	lw	a5,-44(s0)
     c5c:	0017d793          	srli	a5,a5,0x1
     c60:	0017f793          	andi	a5,a5,1
     c64:	fcf42e23          	sw	a5,-36(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
     c68:	fd442783          	lw	a5,-44(s0)
     c6c:	0017f793          	andi	a5,a5,1
     c70:	fef42023          	sw	a5,-32(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
     c74:	fd442783          	lw	a5,-44(s0)
     c78:	0087d793          	srli	a5,a5,0x8
     c7c:	0017f793          	andi	a5,a5,1
     c80:	fef42223          	sw	a5,-28(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
     c84:	fd442783          	lw	a5,-44(s0)
     c88:	0097d793          	srli	a5,a5,0x9
     c8c:	0017f793          	andi	a5,a5,1
     c90:	fef42423          	sw	a5,-24(s0)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
     c94:	fd442783          	lw	a5,-44(s0)
     c98:	00a7d793          	srli	a5,a5,0xa
     c9c:	0017f793          	andi	a5,a5,1
     ca0:	fef42623          	sw	a5,-20(s0)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
     ca4:	fcc42783          	lw	a5,-52(s0)
     ca8:	0347a703          	lw	a4,52(a5)
     cac:	fcc42783          	lw	a5,-52(s0)
     cb0:	0307a783          	lw	a5,48(a5)
     cb4:	40f70633          	sub	a2,a4,a5
     cb8:	fe042783          	lw	a5,-32(s0)
     cbc:	00f12023          	sw	a5,0(sp)
     cc0:	fdc42883          	lw	a7,-36(s0)
     cc4:	fe442803          	lw	a6,-28(s0)
     cc8:	fe842783          	lw	a5,-24(s0)
     ccc:	fec42703          	lw	a4,-20(s0)
     cd0:	fd842683          	lw	a3,-40(s0)
     cd4:	fc442583          	lw	a1,-60(s0)
     cd8:	00007537          	lui	a0,0x7
     cdc:	6c450513          	addi	a0,a0,1732 # 76c4 <__fini_array_end+0xdc>
     ce0:	e19ff0ef          	jal	ra,af8 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
     ce4:	00000013          	nop

}
     ce8:	04c12083          	lw	ra,76(sp)
     cec:	04812403          	lw	s0,72(sp)
     cf0:	05010113          	addi	sp,sp,80
     cf4:	00008067          	ret

00000cf8 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
     cf8:	fd010113          	addi	sp,sp,-48
     cfc:	02112623          	sw	ra,44(sp)
     d00:	02812423          	sw	s0,40(sp)
     d04:	03010413          	addi	s0,sp,48
     d08:	fca42e23          	sw	a0,-36(s0)
     d0c:	fcb42c23          	sw	a1,-40(s0)
     const char* header="JTAG Startup Info:";
     d10:	000077b7          	lui	a5,0x7
     d14:	70c78793          	addi	a5,a5,1804 # 770c <__fini_array_end+0x124>
     d18:	fef42623          	sw	a5,-20(s0)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
     d1c:	fec42603          	lw	a2,-20(s0)
     d20:	fd842583          	lw	a1,-40(s0)
     d24:	fdc42503          	lw	a0,-36(s0)
     d28:	ef1ff0ef          	jal	ra,c18 <alt_log_jtag_uart_print_control_reg>
     return;
     d2c:	00000013          	nop
}
     d30:	02c12083          	lw	ra,44(sp)
     d34:	02812403          	lw	s0,40(sp)
     d38:	03010113          	addi	sp,sp,48
     d3c:	00008067          	ret

00000d40 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
     d40:	fd010113          	addi	sp,sp,-48
     d44:	02112623          	sw	ra,44(sp)
     d48:	02812423          	sw	s0,40(sp)
     d4c:	03010413          	addi	s0,sp,48
     d50:	fca42e23          	sw	a0,-36(s0)
     d54:	fcb42c23          	sw	a1,-40(s0)
    if (alt_log_jtag_uart_isr_on_flag) {
     d58:	0000b7b7          	lui	a5,0xb
     d5c:	0277c783          	lbu	a5,39(a5) # b027 <alt_log_jtag_uart_isr_on_flag>
     d60:	0ff7f793          	zext.b	a5,a5
     d64:	02078263          	beqz	a5,d88 <alt_log_jtag_uart_isr_proc+0x48>
        const char* header="JTAG IRQ:";
     d68:	000077b7          	lui	a5,0x7
     d6c:	72078793          	addi	a5,a5,1824 # 7720 <__fini_array_end+0x138>
     d70:	fef42623          	sw	a5,-20(s0)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
     d74:	fec42603          	lw	a2,-20(s0)
     d78:	fdc42583          	lw	a1,-36(s0)
     d7c:	fd842503          	lw	a0,-40(s0)
     d80:	e99ff0ef          	jal	ra,c18 <alt_log_jtag_uart_print_control_reg>
    }
    return;
     d84:	00000013          	nop
     d88:	00000013          	nop
}
     d8c:	02c12083          	lw	ra,44(sp)
     d90:	02812403          	lw	s0,40(sp)
     d94:	03010113          	addi	sp,sp,48
     d98:	00008067          	ret

00000d9c <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
     d9c:	fd010113          	addi	sp,sp,-48
     da0:	02112623          	sw	ra,44(sp)
     da4:	02812423          	sw	s0,40(sp)
     da8:	03010413          	addi	s0,sp,48
     dac:	fca42e23          	sw	a0,-36(s0)
     db0:	fcb42c23          	sw	a1,-40(s0)
    
    if (alt_log_write_on_flag)
     db4:	0000b7b7          	lui	a5,0xb
     db8:	0247c783          	lbu	a5,36(a5) # b024 <alt_log_write_on_flag>
     dbc:	0ff7f793          	zext.b	a5,a5
     dc0:	12078263          	beqz	a5,ee4 <alt_log_write+0x148>
    {
        int temp_cnt;
        int i;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
     dc4:	fd842783          	lw	a5,-40(s0)
     dc8:	00f00713          	li	a4,15
     dcc:	00f77463          	bgeu	a4,a5,dd4 <alt_log_write+0x38>
     dd0:	00f00793          	li	a5,15
     dd4:	fef42623          	sw	a5,-20(s0)

        if (length < 2) return;
     dd8:	fec42703          	lw	a4,-20(s0)
     ddc:	00100793          	li	a5,1
     de0:	10e7d063          	bge	a5,a4,ee0 <alt_log_write+0x144>
        for (i=0;i<length;i++)
     de4:	fe042423          	sw	zero,-24(s0)
     de8:	0340006f          	j	e1c <alt_log_write+0x80>
        {
            *(unsigned char *)(alt_log_write_buf+i)=*(unsigned char *)(ptr+i);
     dec:	fe842783          	lw	a5,-24(s0)
     df0:	fdc42703          	lw	a4,-36(s0)
     df4:	00f70733          	add	a4,a4,a5
     df8:	fe842683          	lw	a3,-24(s0)
     dfc:	0000b7b7          	lui	a5,0xb
     e00:	11878793          	addi	a5,a5,280 # b118 <alt_log_write_buf>
     e04:	00f687b3          	add	a5,a3,a5
     e08:	00074703          	lbu	a4,0(a4)
     e0c:	00e78023          	sb	a4,0(a5)
        for (i=0;i<length;i++)
     e10:	fe842783          	lw	a5,-24(s0)
     e14:	00178793          	addi	a5,a5,1
     e18:	fef42423          	sw	a5,-24(s0)
     e1c:	fe842703          	lw	a4,-24(s0)
     e20:	fec42783          	lw	a5,-20(s0)
     e24:	fcf744e3          	blt	a4,a5,dec <alt_log_write+0x50>
        }
        alt_log_write_buf[length-1]='\n';
     e28:	fec42783          	lw	a5,-20(s0)
     e2c:	fff78793          	addi	a5,a5,-1
     e30:	0000b737          	lui	a4,0xb
     e34:	11870713          	addi	a4,a4,280 # b118 <alt_log_write_buf>
     e38:	00f707b3          	add	a5,a4,a5
     e3c:	00a00713          	li	a4,10
     e40:	00e78023          	sb	a4,0(a5)
        alt_log_write_buf[length]='\r';
     e44:	0000b7b7          	lui	a5,0xb
     e48:	11878713          	addi	a4,a5,280 # b118 <alt_log_write_buf>
     e4c:	fec42783          	lw	a5,-20(s0)
     e50:	00f707b3          	add	a5,a4,a5
     e54:	00d00713          	li	a4,13
     e58:	00e78023          	sb	a4,0(a5)
        alt_log_write_buf[length+1]='\0';
     e5c:	fec42783          	lw	a5,-20(s0)
     e60:	00178793          	addi	a5,a5,1
     e64:	0000b737          	lui	a4,0xb
     e68:	11870713          	addi	a4,a4,280 # b118 <alt_log_write_buf>
     e6c:	00f707b3          	add	a5,a4,a5
     e70:	00078023          	sb	zero,0(a5)

        /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++)
     e74:	fe042223          	sw	zero,-28(s0)
     e78:	0440006f          	j	ebc <alt_log_write+0x120>
        {
            if (alt_log_write_buf[temp_cnt]== 0x4)
     e7c:	0000b7b7          	lui	a5,0xb
     e80:	11878713          	addi	a4,a5,280 # b118 <alt_log_write_buf>
     e84:	fe442783          	lw	a5,-28(s0)
     e88:	00f707b3          	add	a5,a4,a5
     e8c:	0007c703          	lbu	a4,0(a5)
     e90:	00400793          	li	a5,4
     e94:	00f71e63          	bne	a4,a5,eb0 <alt_log_write+0x114>
            {
                alt_log_write_buf[temp_cnt]='D';
     e98:	0000b7b7          	lui	a5,0xb
     e9c:	11878713          	addi	a4,a5,280 # b118 <alt_log_write_buf>
     ea0:	fe442783          	lw	a5,-28(s0)
     ea4:	00f707b3          	add	a5,a4,a5
     ea8:	04400713          	li	a4,68
     eac:	00e78023          	sb	a4,0(a5)
        for (temp_cnt=0;temp_cnt < length; temp_cnt++)
     eb0:	fe442783          	lw	a5,-28(s0)
     eb4:	00178793          	addi	a5,a5,1
     eb8:	fef42223          	sw	a5,-28(s0)
     ebc:	fe442703          	lw	a4,-28(s0)
     ec0:	fec42783          	lw	a5,-20(s0)
     ec4:	faf74ce3          	blt	a4,a5,e7c <alt_log_write+0xe0>
            }
        }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
     ec8:	0000b7b7          	lui	a5,0xb
     ecc:	11878593          	addi	a1,a5,280 # b118 <alt_log_write_buf>
     ed0:	000077b7          	lui	a5,0x7
     ed4:	72c78513          	addi	a0,a5,1836 # 772c <__fini_array_end+0x144>
     ed8:	c21ff0ef          	jal	ra,af8 <alt_log_printf_proc>
     edc:	0080006f          	j	ee4 <alt_log_write+0x148>
        if (length < 2) return;
     ee0:	00000013          	nop
    }
}
     ee4:	02c12083          	lw	ra,44(sp)
     ee8:	02812403          	lw	s0,40(sp)
     eec:	03010113          	addi	sp,sp,48
     ef0:	00008067          	ret

00000ef4 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
     ef4:	ff010113          	addi	sp,sp,-16
     ef8:	00112623          	sw	ra,12(sp)
     efc:	00812423          	sw	s0,8(sp)
     f00:	01010413          	addi	s0,sp,16
    if (alt_log_sys_clk_on_flag) {
     f04:	0000b7b7          	lui	a5,0xb
     f08:	0257c783          	lbu	a5,37(a5) # b025 <alt_log_sys_clk_on_flag>
     f0c:	0ff7f793          	zext.b	a5,a5
     f10:	04078c63          	beqz	a5,f68 <alt_log_system_clock+0x74>
    alt_log_sys_clk_count++;
     f14:	0000b7b7          	lui	a5,0xb
     f18:	02c7a783          	lw	a5,44(a5) # b02c <alt_log_sys_clk_count>
     f1c:	00178713          	addi	a4,a5,1
     f20:	0000b7b7          	lui	a5,0xb
     f24:	02e7a623          	sw	a4,44(a5) # b02c <alt_log_sys_clk_count>
     f28:	0000b7b7          	lui	a5,0xb
     f2c:	0407a783          	lw	a5,64(a5) # b040 <_alt_tick_rate>
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
     f30:	0000b737          	lui	a4,0xb
     f34:	02c72703          	lw	a4,44(a4) # b02c <alt_log_sys_clk_count>
     f38:	02e7f863          	bgeu	a5,a4,f68 <alt_log_system_clock+0x74>
            alt_log_sys_clk_count = 0;
     f3c:	0000b7b7          	lui	a5,0xb
     f40:	0207a623          	sw	zero,44(a5) # b02c <alt_log_sys_clk_count>
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
     f44:	0000b7b7          	lui	a5,0xb
     f48:	0307a783          	lw	a5,48(a5) # b030 <alt_system_clock_in_sec>
     f4c:	00178693          	addi	a3,a5,1
     f50:	0000b737          	lui	a4,0xb
     f54:	02d72823          	sw	a3,48(a4) # b030 <alt_system_clock_in_sec>
     f58:	00078593          	mv	a1,a5
     f5c:	000077b7          	lui	a5,0x7
     f60:	73c78513          	addi	a0,a5,1852 # 773c <__fini_array_end+0x154>
     f64:	b95ff0ef          	jal	ra,af8 <alt_log_printf_proc>
        }
    }
}
     f68:	00000013          	nop
     f6c:	00c12083          	lw	ra,12(sp)
     f70:	00812403          	lw	s0,8(sp)
     f74:	01010113          	addi	sp,sp,16
     f78:	00008067          	ret

00000f7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     f7c:	fe010113          	addi	sp,sp,-32
     f80:	00112e23          	sw	ra,28(sp)
     f84:	00812c23          	sw	s0,24(sp)
     f88:	02010413          	addi	s0,sp,32
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
     f8c:	000097b7          	lui	a5,0x9
     f90:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
     f94:	00100793          	li	a5,1
     f98:	00f71863          	bne	a4,a5,fa8 <alt_main+0x2c>
     f9c:	000077b7          	lui	a5,0x7
     fa0:	75478513          	addi	a0,a5,1876 # 7754 <__fini_array_end+0x16c>
     fa4:	b55ff0ef          	jal	ra,af8 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     fa8:	00000513          	li	a0,0
     fac:	380000ef          	jal	ra,132c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
     fb0:	000097b7          	lui	a5,0x9
     fb4:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
     fb8:	00100793          	li	a5,1
     fbc:	00f71863          	bne	a4,a5,fcc <alt_main+0x50>
     fc0:	000077b7          	lui	a5,0x7
     fc4:	78c78513          	addi	a0,a5,1932 # 778c <__fini_array_end+0x1a4>
     fc8:	b31ff0ef          	jal	ra,af8 <alt_log_printf_proc>
  ALT_OS_INIT();
     fcc:	00000013          	nop
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
     fd0:	000097b7          	lui	a5,0x9
     fd4:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
     fd8:	00100793          	li	a5,1
     fdc:	00f71863          	bne	a4,a5,fec <alt_main+0x70>
     fe0:	000077b7          	lui	a5,0x7
     fe4:	7c478513          	addi	a0,a5,1988 # 77c4 <__fini_array_end+0x1dc>
     fe8:	b11ff0ef          	jal	ra,af8 <alt_log_printf_proc>
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
     fec:	000097b7          	lui	a5,0x9
     ff0:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
     ff4:	00100793          	li	a5,1
     ff8:	00f71863          	bne	a4,a5,1008 <alt_main+0x8c>
     ffc:	000077b7          	lui	a5,0x7
    1000:	7fc78513          	addi	a0,a5,2044 # 77fc <__fini_array_end+0x214>
    1004:	af5ff0ef          	jal	ra,af8 <alt_log_printf_proc>
  alt_sys_init();
    1008:	35c000ef          	jal	ra,1364 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
    100c:	000097b7          	lui	a5,0x9
    1010:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    1014:	00100793          	li	a5,1
    1018:	00f71863          	bne	a4,a5,1028 <alt_main+0xac>
    101c:	000087b7          	lui	a5,0x8
    1020:	82478513          	addi	a0,a5,-2012 # 7824 <__fini_array_end+0x23c>
    1024:	ad5ff0ef          	jal	ra,af8 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    1028:	000097b7          	lui	a5,0x9
    102c:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    1030:	00100793          	li	a5,1
    1034:	00f71863          	bne	a4,a5,1044 <alt_main+0xc8>
    1038:	000087b7          	lui	a5,0x8
    103c:	84878513          	addi	a0,a5,-1976 # 7848 <__fini_array_end+0x260>
    1040:	ab9ff0ef          	jal	ra,af8 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1044:	000087b7          	lui	a5,0x8
    1048:	86878613          	addi	a2,a5,-1944 # 7868 <__fini_array_end+0x280>
    104c:	000087b7          	lui	a5,0x8
    1050:	86878593          	addi	a1,a5,-1944 # 7868 <__fini_array_end+0x280>
    1054:	000087b7          	lui	a5,0x8
    1058:	86878513          	addi	a0,a5,-1944 # 7868 <__fini_array_end+0x280>
    105c:	66c010ef          	jal	ra,26c8 <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
    1060:	000097b7          	lui	a5,0x9
    1064:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    1068:	00100793          	li	a5,1
    106c:	00f71863          	bne	a4,a5,107c <alt_main+0x100>
    1070:	000087b7          	lui	a5,0x8
    1074:	87878513          	addi	a0,a5,-1928 # 7878 <__fini_array_end+0x290>
    1078:	a81ff0ef          	jal	ra,af8 <alt_log_printf_proc>
  _do_ctors ();
    107c:	2c0010ef          	jal	ra,233c <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
    1080:	000097b7          	lui	a5,0x9
    1084:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    1088:	00100793          	li	a5,1
    108c:	00f71863          	bne	a4,a5,109c <alt_main+0x120>
    1090:	000087b7          	lui	a5,0x8
    1094:	8a478513          	addi	a0,a5,-1884 # 78a4 <__fini_array_end+0x2bc>
    1098:	a61ff0ef          	jal	ra,af8 <alt_log_printf_proc>
  atexit (_do_dtors);
    109c:	000027b7          	lui	a5,0x2
    10a0:	39c78513          	addi	a0,a5,924 # 239c <_do_dtors>
    10a4:	229010ef          	jal	ra,2acc <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
    10a8:	000097b7          	lui	a5,0x9
    10ac:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    10b0:	00100793          	li	a5,1
    10b4:	00f71863          	bne	a4,a5,10c4 <alt_main+0x148>
    10b8:	000087b7          	lui	a5,0x8
    10bc:	8c478513          	addi	a0,a5,-1852 # 78c4 <__fini_array_end+0x2dc>
    10c0:	a39ff0ef          	jal	ra,af8 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    10c4:	0000b7b7          	lui	a5,0xb
    10c8:	0347a703          	lw	a4,52(a5) # b034 <alt_argc>
    10cc:	0000b7b7          	lui	a5,0xb
    10d0:	0387a683          	lw	a3,56(a5) # b038 <alt_argv>
    10d4:	0000b7b7          	lui	a5,0xb
    10d8:	03c7a783          	lw	a5,60(a5) # b03c <alt_envp>
    10dc:	00078613          	mv	a2,a5
    10e0:	00068593          	mv	a1,a3
    10e4:	00070513          	mv	a0,a4
    10e8:	9e8ff0ef          	jal	ra,2d0 <main>
    10ec:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
    10f0:	00100513          	li	a0,1
    10f4:	7f9010ef          	jal	ra,30ec <close>
  exit (result);
    10f8:	fec42503          	lw	a0,-20(s0)
    10fc:	1e5010ef          	jal	ra,2ae0 <exit>

00001100 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1100:	fd010113          	addi	sp,sp,-48
    1104:	02812623          	sw	s0,44(sp)
    1108:	03010413          	addi	s0,sp,48
    110c:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1110:	00800793          	li	a5,8
    1114:	3007b7f3          	csrrc	a5,mstatus,a5
    1118:	fef42623          	sw	a5,-20(s0)
    return context;
    111c:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1120:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    1124:	fdc42783          	lw	a5,-36(s0)
    1128:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    112c:	fe842783          	lw	a5,-24(s0)
    1130:	0007a783          	lw	a5,0(a5)
    1134:	fe842703          	lw	a4,-24(s0)
    1138:	00472703          	lw	a4,4(a4)
    113c:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    1140:	fe842783          	lw	a5,-24(s0)
    1144:	0047a783          	lw	a5,4(a5)
    1148:	fe842703          	lw	a4,-24(s0)
    114c:	00072703          	lw	a4,0(a4)
    1150:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1154:	fe842783          	lw	a5,-24(s0)
    1158:	fe842703          	lw	a4,-24(s0)
    115c:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    1160:	fe842783          	lw	a5,-24(s0)
    1164:	fe842703          	lw	a4,-24(s0)
    1168:	00e7a023          	sw	a4,0(a5)
} 
    116c:	00000013          	nop
    1170:	fe042783          	lw	a5,-32(s0)
    1174:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1178:	fe442783          	lw	a5,-28(s0)
    117c:	0087f793          	andi	a5,a5,8
    1180:	3007a073          	csrs	mstatus,a5
}
    1184:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    1188:	00000013          	nop
    118c:	02c12403          	lw	s0,44(sp)
    1190:	03010113          	addi	sp,sp,48
    1194:	00008067          	ret

00001198 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1198:	fe010113          	addi	sp,sp,-32
    119c:	00112e23          	sw	ra,28(sp)
    11a0:	00812c23          	sw	s0,24(sp)
    11a4:	01212a23          	sw	s2,20(sp)
    11a8:	01312823          	sw	s3,16(sp)
    11ac:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    11b0:	000097b7          	lui	a5,0x9
    11b4:	4dc78793          	addi	a5,a5,1244 # 94dc <alt_alarm_list>
    11b8:	0007a783          	lw	a5,0(a5)
    11bc:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    11c0:	0000b7b7          	lui	a5,0xb
    11c4:	0487a703          	lw	a4,72(a5) # b048 <_alt_nticks>
    11c8:	04c7a783          	lw	a5,76(a5)
    11cc:	00100513          	li	a0,1
    11d0:	00000593          	li	a1,0
    11d4:	00a70633          	add	a2,a4,a0
    11d8:	00060813          	mv	a6,a2
    11dc:	00e83833          	sltu	a6,a6,a4
    11e0:	00b786b3          	add	a3,a5,a1
    11e4:	00d807b3          	add	a5,a6,a3
    11e8:	00078693          	mv	a3,a5
    11ec:	00060713          	mv	a4,a2
    11f0:	00068793          	mv	a5,a3
    11f4:	0000b6b7          	lui	a3,0xb
    11f8:	04e6a423          	sw	a4,72(a3) # b048 <_alt_nticks>
    11fc:	04f6a623          	sw	a5,76(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1200:	0c80006f          	j	12c8 <alt_tick+0x130>
  {
    next = (alt_alarm*) alarm->llist.next;
    1204:	fe442783          	lw	a5,-28(s0)
    1208:	0007a783          	lw	a5,0(a5)
    120c:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    1210:	fe442783          	lw	a5,-28(s0)
    1214:	0087a603          	lw	a2,8(a5)
    1218:	00c7a683          	lw	a3,12(a5)
    121c:	0000b7b7          	lui	a5,0xb
    1220:	0487a703          	lw	a4,72(a5) # b048 <_alt_nticks>
    1224:	04c7a783          	lw	a5,76(a5)
    1228:	00068513          	mv	a0,a3
    122c:	00078593          	mv	a1,a5
    1230:	08a5e863          	bltu	a1,a0,12c0 <alt_tick+0x128>
    1234:	00068513          	mv	a0,a3
    1238:	00078593          	mv	a1,a5
    123c:	00b51863          	bne	a0,a1,124c <alt_tick+0xb4>
    1240:	00060693          	mv	a3,a2
    1244:	00070793          	mv	a5,a4
    1248:	06d7ec63          	bltu	a5,a3,12c0 <alt_tick+0x128>
    {
      next_callback = alarm->callback (alarm->context);
    124c:	fe442783          	lw	a5,-28(s0)
    1250:	0107a783          	lw	a5,16(a5)
    1254:	fe442703          	lw	a4,-28(s0)
    1258:	01472703          	lw	a4,20(a4)
    125c:	00070513          	mv	a0,a4
    1260:	000780e7          	jalr	a5
    1264:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1268:	fec42783          	lw	a5,-20(s0)
    126c:	00079863          	bnez	a5,127c <alt_tick+0xe4>
      {
        alt_alarm_stop (alarm);
    1270:	fe442503          	lw	a0,-28(s0)
    1274:	e8dff0ef          	jal	ra,1100 <alt_alarm_stop>
    1278:	0480006f          	j	12c0 <alt_tick+0x128>
      }
      else
      {
        alarm->time += next_callback;
    127c:	fe442783          	lw	a5,-28(s0)
    1280:	0087a703          	lw	a4,8(a5)
    1284:	00c7a783          	lw	a5,12(a5)
    1288:	fec42683          	lw	a3,-20(s0)
    128c:	00068913          	mv	s2,a3
    1290:	00000993          	li	s3,0
    1294:	01270633          	add	a2,a4,s2
    1298:	00060593          	mv	a1,a2
    129c:	00e5b5b3          	sltu	a1,a1,a4
    12a0:	013786b3          	add	a3,a5,s3
    12a4:	00d587b3          	add	a5,a1,a3
    12a8:	00078693          	mv	a3,a5
    12ac:	00060713          	mv	a4,a2
    12b0:	00068793          	mv	a5,a3
    12b4:	fe442683          	lw	a3,-28(s0)
    12b8:	00e6a423          	sw	a4,8(a3)
    12bc:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    12c0:	fe842783          	lw	a5,-24(s0)
    12c4:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    12c8:	fe442703          	lw	a4,-28(s0)
    12cc:	000097b7          	lui	a5,0x9
    12d0:	4dc78793          	addi	a5,a5,1244 # 94dc <alt_alarm_list>
    12d4:	f2f718e3          	bne	a4,a5,1204 <alt_tick+0x6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    12d8:	00000013          	nop
}
    12dc:	00000013          	nop
    12e0:	01c12083          	lw	ra,28(sp)
    12e4:	01812403          	lw	s0,24(sp)
    12e8:	01412903          	lw	s2,20(sp)
    12ec:	01012983          	lw	s3,16(sp)
    12f0:	02010113          	addi	sp,sp,32
    12f4:	00008067          	ret

000012f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    12f8:	fe010113          	addi	sp,sp,-32
    12fc:	00112e23          	sw	ra,28(sp)
    1300:	00812c23          	sw	s0,24(sp)
    1304:	02010413          	addi	s0,sp,32
    1308:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
    130c:	fec42503          	lw	a0,-20(s0)
    1310:	611000ef          	jal	ra,2120 <alt_busy_sleep>
    1314:	00050793          	mv	a5,a0
}
    1318:	00078513          	mv	a0,a5
    131c:	01c12083          	lw	ra,28(sp)
    1320:	01812403          	lw	s0,24(sp)
    1324:	02010113          	addi	sp,sp,32
    1328:	00008067          	ret

0000132c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    132c:	fe010113          	addi	sp,sp,-32
    1330:	00112e23          	sw	ra,28(sp)
    1334:	00812c23          	sw	s0,24(sp)
    1338:	02010413          	addi	s0,sp,32
    133c:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_G_IRQ_INIT ( NIOSV, niosv);
    1340:	474010ef          	jal	ra,27b4 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
    1344:	00800793          	li	a5,8
    1348:	3007a073          	csrs	mstatus,a5
}
    134c:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
    1350:	00000013          	nop
    1354:	01c12083          	lw	ra,28(sp)
    1358:	01812403          	lw	s0,24(sp)
    135c:	02010113          	addi	sp,sp,32
    1360:	00008067          	ret

00001364 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1364:	fe010113          	addi	sp,sp,-32
    1368:	00112e23          	sw	ra,28(sp)
    136c:	00812c23          	sw	s0,24(sp)
    1370:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    1374:	00000613          	li	a2,0
    1378:	00000593          	li	a1,0
    137c:	000087b7          	lui	a5,0x8
    1380:	ac878513          	addi	a0,a5,-1336 # 7ac8 <jtag_uart+0x28>
    1384:	1f0000ef          	jal	ra,1574 <altera_avalon_jtag_uart_init>
    1388:	000087b7          	lui	a5,0x8
    138c:	aa078513          	addi	a0,a5,-1376 # 7aa0 <jtag_uart>
    1390:	67d000ef          	jal	ra,220c <alt_dev_reg>
    1394:	3e800793          	li	a5,1000
    1398:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    139c:	0000b7b7          	lui	a5,0xb
    13a0:	0407a783          	lw	a5,64(a5) # b040 <_alt_tick_rate>
    13a4:	00079a63          	bnez	a5,13b8 <alt_sys_init+0x54>
  {
    _alt_tick_rate = nticks;
    13a8:	0000b7b7          	lui	a5,0xb
    13ac:	fec42703          	lw	a4,-20(s0)
    13b0:	04e7a023          	sw	a4,64(a5) # b040 <_alt_tick_rate>
    return 0;
    13b4:	0080006f          	j	13bc <alt_sys_init+0x58>
  }
  else
  {
    return -1;
    13b8:	00000013          	nop
    13bc:	000037b7          	lui	a5,0x3
    13c0:	9e078793          	addi	a5,a5,-1568 # 29e0 <alt_niosv_timer_sc_isr>
    13c4:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
    13c8:	0000b7b7          	lui	a5,0xb
    13cc:	fe842703          	lw	a4,-24(s0)
    13d0:	02e7a023          	sw	a4,32(a5) # b020 <alt_niosv_timer_interrupt_handler>
}
    13d4:	00000013          	nop
    INTEL_NIOSV_G_INIT ( NIOSV, niosv);
    13d8:	6b8010ef          	jal	ra,2a90 <alt_niosv_mtimecmp_interrupt_init>
    13dc:	00000613          	li	a2,0
    13e0:	00000593          	li	a1,0
    13e4:	00000513          	li	a0,0
    13e8:	5f8010ef          	jal	ra,29e0 <alt_niosv_timer_sc_isr>
}
    13ec:	00000013          	nop
    13f0:	01c12083          	lw	ra,28(sp)
    13f4:	01812403          	lw	s0,24(sp)
    13f8:	02010113          	addi	sp,sp,32
    13fc:	00008067          	ret

00001400 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1400:	fd010113          	addi	sp,sp,-48
    1404:	02112623          	sw	ra,44(sp)
    1408:	02812423          	sw	s0,40(sp)
    140c:	03010413          	addi	s0,sp,48
    1410:	fca42e23          	sw	a0,-36(s0)
    1414:	fcb42c23          	sw	a1,-40(s0)
    1418:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    141c:	fdc42783          	lw	a5,-36(s0)
    1420:	0007a783          	lw	a5,0(a5)
    1424:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1428:	fec42783          	lw	a5,-20(s0)
    142c:	02878713          	addi	a4,a5,40
    1430:	fdc42783          	lw	a5,-36(s0)
    1434:	0087a783          	lw	a5,8(a5)
    1438:	00078693          	mv	a3,a5
    143c:	fd442603          	lw	a2,-44(s0)
    1440:	fd842583          	lw	a1,-40(s0)
    1444:	00070513          	mv	a0,a4
    1448:	6cc000ef          	jal	ra,1b14 <altera_avalon_jtag_uart_read>
    144c:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    1450:	00078513          	mv	a0,a5
    1454:	02c12083          	lw	ra,44(sp)
    1458:	02812403          	lw	s0,40(sp)
    145c:	03010113          	addi	sp,sp,48
    1460:	00008067          	ret

00001464 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1464:	fd010113          	addi	sp,sp,-48
    1468:	02112623          	sw	ra,44(sp)
    146c:	02812423          	sw	s0,40(sp)
    1470:	03010413          	addi	s0,sp,48
    1474:	fca42e23          	sw	a0,-36(s0)
    1478:	fcb42c23          	sw	a1,-40(s0)
    147c:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1480:	fdc42783          	lw	a5,-36(s0)
    1484:	0007a783          	lw	a5,0(a5)
    1488:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    148c:	fec42783          	lw	a5,-20(s0)
    1490:	02878713          	addi	a4,a5,40
    1494:	fdc42783          	lw	a5,-36(s0)
    1498:	0087a783          	lw	a5,8(a5)
    149c:	00078693          	mv	a3,a5
    14a0:	fd442603          	lw	a2,-44(s0)
    14a4:	fd842583          	lw	a1,-40(s0)
    14a8:	00070513          	mv	a0,a4
    14ac:	095000ef          	jal	ra,1d40 <altera_avalon_jtag_uart_write>
    14b0:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    14b4:	00078513          	mv	a0,a5
    14b8:	02c12083          	lw	ra,44(sp)
    14bc:	02812403          	lw	s0,40(sp)
    14c0:	03010113          	addi	sp,sp,48
    14c4:	00008067          	ret

000014c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    14c8:	fd010113          	addi	sp,sp,-48
    14cc:	02112623          	sw	ra,44(sp)
    14d0:	02812423          	sw	s0,40(sp)
    14d4:	03010413          	addi	s0,sp,48
    14d8:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    14dc:	fdc42783          	lw	a5,-36(s0)
    14e0:	0007a783          	lw	a5,0(a5)
    14e4:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    14e8:	fec42783          	lw	a5,-20(s0)
    14ec:	02878713          	addi	a4,a5,40
    14f0:	fdc42783          	lw	a5,-36(s0)
    14f4:	0087a783          	lw	a5,8(a5)
    14f8:	00078593          	mv	a1,a5
    14fc:	00070513          	mv	a0,a4
    1500:	4a8000ef          	jal	ra,19a8 <altera_avalon_jtag_uart_close>
    1504:	00050793          	mv	a5,a0
}
    1508:	00078513          	mv	a0,a5
    150c:	02c12083          	lw	ra,44(sp)
    1510:	02812403          	lw	s0,40(sp)
    1514:	03010113          	addi	sp,sp,48
    1518:	00008067          	ret

0000151c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    151c:	fd010113          	addi	sp,sp,-48
    1520:	02112623          	sw	ra,44(sp)
    1524:	02812423          	sw	s0,40(sp)
    1528:	03010413          	addi	s0,sp,48
    152c:	fca42e23          	sw	a0,-36(s0)
    1530:	fcb42c23          	sw	a1,-40(s0)
    1534:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    1538:	fdc42783          	lw	a5,-36(s0)
    153c:	0007a783          	lw	a5,0(a5)
    1540:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    1544:	fec42783          	lw	a5,-20(s0)
    1548:	02878793          	addi	a5,a5,40
    154c:	fd442603          	lw	a2,-44(s0)
    1550:	fd842583          	lw	a1,-40(s0)
    1554:	00078513          	mv	a0,a5
    1558:	4bc000ef          	jal	ra,1a14 <altera_avalon_jtag_uart_ioctl>
    155c:	00050793          	mv	a5,a0
}
    1560:	00078513          	mv	a0,a5
    1564:	02c12083          	lw	ra,44(sp)
    1568:	02812403          	lw	s0,40(sp)
    156c:	03010113          	addi	sp,sp,48
    1570:	00008067          	ret

00001574 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    1574:	fd010113          	addi	sp,sp,-48
    1578:	02112623          	sw	ra,44(sp)
    157c:	02812423          	sw	s0,40(sp)
    1580:	03010413          	addi	s0,sp,48
    1584:	fca42e23          	sw	a0,-36(s0)
    1588:	fcb42c23          	sw	a1,-40(s0)
    158c:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1590:	fdc42783          	lw	a5,-36(s0)
    1594:	00100713          	li	a4,1
    1598:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    159c:	fdc42783          	lw	a5,-36(s0)
    15a0:	0207a783          	lw	a5,32(a5)
    15a4:	fef42623          	sw	a5,-20(s0)
    15a8:	fdc42783          	lw	a5,-36(s0)
    15ac:	0007a783          	lw	a5,0(a5)
    15b0:	00478793          	addi	a5,a5,4
    15b4:	00078713          	mv	a4,a5
    15b8:	fec42783          	lw	a5,-20(s0)
    15bc:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    15c0:	fd842503          	lw	a0,-40(s0)
    15c4:	fd442583          	lw	a1,-44(s0)
    15c8:	00000713          	li	a4,0
    15cc:	fdc42683          	lw	a3,-36(s0)
    15d0:	000017b7          	lui	a5,0x1
    15d4:	69c78613          	addi	a2,a5,1692 # 169c <altera_avalon_jtag_uart_irq>
    15d8:	645000ef          	jal	ra,241c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    15dc:	fdc42783          	lw	a5,-36(s0)
    15e0:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    15e4:	fdc42783          	lw	a5,-36(s0)
    15e8:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
    15ec:	0000b7b7          	lui	a5,0xb
    15f0:	0407a583          	lw	a1,64(a5) # b040 <_alt_tick_rate>
    15f4:	fdc42683          	lw	a3,-36(s0)
    15f8:	000027b7          	lui	a5,0x2
    15fc:	8ec78613          	addi	a2,a5,-1812 # 18ec <altera_avalon_jtag_uart_timeout>
    1600:	00070513          	mv	a0,a4
    1604:	1b1000ef          	jal	ra,1fb4 <alt_alarm_start>
    1608:	00050793          	mv	a5,a0
    160c:	0007da63          	bgez	a5,1620 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1610:	fdc42783          	lw	a5,-36(s0)
    1614:	80000737          	lui	a4,0x80000
    1618:	fff74713          	not	a4,a4
    161c:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
    1620:	0000b7b7          	lui	a5,0xb
    1624:	0267c783          	lbu	a5,38(a5) # b026 <alt_log_jtag_uart_alarm_on_flag>
    1628:	0ff7f713          	zext.b	a4,a5
    162c:	00100793          	li	a5,1
    1630:	02f71863          	bne	a4,a5,1660 <altera_avalon_jtag_uart_init+0xec>
    1634:	0000b7b7          	lui	a5,0xb
    1638:	0407a703          	lw	a4,64(a5) # b040 <_alt_tick_rate>
    163c:	00a00793          	li	a5,10
    1640:	02f75733          	divu	a4,a4,a5
    1644:	fdc42683          	lw	a3,-36(s0)
    1648:	000017b7          	lui	a5,0x1
    164c:	b9c78613          	addi	a2,a5,-1124 # b9c <altera_avalon_jtag_uart_report_log>
    1650:	00070593          	mv	a1,a4
    1654:	0000b7b7          	lui	a5,0xb
    1658:	13078513          	addi	a0,a5,304 # b130 <alt_log_jtag_uart_alarm_1>
    165c:	159000ef          	jal	ra,1fb4 <alt_alarm_start>
    1660:	0000b7b7          	lui	a5,0xb
    1664:	0287c783          	lbu	a5,40(a5) # b028 <alt_log_jtag_uart_startup_info_on_flag>
    1668:	0ff7f713          	zext.b	a4,a5
    166c:	00100793          	li	a5,1
    1670:	00f71c63          	bne	a4,a5,1688 <altera_avalon_jtag_uart_init+0x114>
    1674:	fdc42783          	lw	a5,-36(s0)
    1678:	0007a783          	lw	a5,0(a5)
    167c:	00078593          	mv	a1,a5
    1680:	fdc42503          	lw	a0,-36(s0)
    1684:	e74ff0ef          	jal	ra,cf8 <alt_log_jtag_uart_startup_info>
}
    1688:	00000013          	nop
    168c:	02c12083          	lw	ra,44(sp)
    1690:	02812403          	lw	s0,40(sp)
    1694:	03010113          	addi	sp,sp,48
    1698:	00008067          	ret

0000169c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    169c:	fa010113          	addi	sp,sp,-96
    16a0:	04112e23          	sw	ra,92(sp)
    16a4:	04812c23          	sw	s0,88(sp)
    16a8:	06010413          	addi	s0,sp,96
    16ac:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    16b0:	fac42783          	lw	a5,-84(s0)
    16b4:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
    16b8:	fc442783          	lw	a5,-60(s0)
    16bc:	0007a783          	lw	a5,0(a5)
    16c0:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
    16c4:	fa042c23          	sw	zero,-72(s0)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
    16c8:	fc842783          	lw	a5,-56(s0)
    16cc:	fc442583          	lw	a1,-60(s0)
    16d0:	00078513          	mv	a0,a5
    16d4:	e6cff0ef          	jal	ra,d40 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    16d8:	fc842783          	lw	a5,-56(s0)
    16dc:	00478793          	addi	a5,a5,4
    16e0:	0007a783          	lw	a5,0(a5)
    16e4:	fcf42623          	sw	a5,-52(s0)
    16e8:	fcc42783          	lw	a5,-52(s0)
    16ec:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    16f0:	fd042783          	lw	a5,-48(s0)
    16f4:	3007f793          	andi	a5,a5,768
    16f8:	1c078e63          	beqz	a5,18d4 <altera_avalon_jtag_uart_irq+0x238>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    16fc:	fd042783          	lw	a5,-48(s0)
    1700:	1007f793          	andi	a5,a5,256
    1704:	0e078663          	beqz	a5,17f0 <altera_avalon_jtag_uart_irq+0x154>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    1708:	000107b7          	lui	a5,0x10
    170c:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1710:	fc442783          	lw	a5,-60(s0)
    1714:	0287a783          	lw	a5,40(a5) # 10028 <__alt_data_end+0x28>
    1718:	00178793          	addi	a5,a5,1
    171c:	7ff7f793          	andi	a5,a5,2047
    1720:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
    1724:	fc442783          	lw	a5,-60(s0)
    1728:	02c7a783          	lw	a5,44(a5)
    172c:	fd442703          	lw	a4,-44(s0)
    1730:	06f70263          	beq	a4,a5,1794 <altera_avalon_jtag_uart_irq+0xf8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1734:	fc842783          	lw	a5,-56(s0)
    1738:	0007a783          	lw	a5,0(a5)
    173c:	fcf42c23          	sw	a5,-40(s0)
    1740:	fd842783          	lw	a5,-40(s0)
    1744:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1748:	fbc42703          	lw	a4,-68(s0)
    174c:	000087b7          	lui	a5,0x8
    1750:	00f777b3          	and	a5,a4,a5
    1754:	04078463          	beqz	a5,179c <altera_avalon_jtag_uart_irq+0x100>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1758:	fc442783          	lw	a5,-60(s0)
    175c:	0287a783          	lw	a5,40(a5) # 8028 <jtag_uart+0x588>
    1760:	fbc42703          	lw	a4,-68(s0)
    1764:	0ff77713          	zext.b	a4,a4
    1768:	fc442683          	lw	a3,-60(s0)
    176c:	00f687b3          	add	a5,a3,a5
    1770:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1774:	fc442783          	lw	a5,-60(s0)
    1778:	0287a783          	lw	a5,40(a5)
    177c:	00178793          	addi	a5,a5,1
    1780:	7ff7f713          	andi	a4,a5,2047
    1784:	fc442783          	lw	a5,-60(s0)
    1788:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    178c:	00000013          	nop
      {
    1790:	f81ff06f          	j	1710 <altera_avalon_jtag_uart_irq+0x74>
          break;
    1794:	00000013          	nop
    1798:	0080006f          	j	17a0 <altera_avalon_jtag_uart_irq+0x104>
          break;
    179c:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    17a0:	fbc42703          	lw	a4,-68(s0)
    17a4:	000107b7          	lui	a5,0x10
    17a8:	04f76463          	bltu	a4,a5,17f0 <altera_avalon_jtag_uart_irq+0x154>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    17ac:	fc442783          	lw	a5,-60(s0)
    17b0:	0207a783          	lw	a5,32(a5) # 10020 <__alt_data_end+0x20>
    17b4:	ffe7f713          	andi	a4,a5,-2
    17b8:	fc442783          	lw	a5,-60(s0)
    17bc:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    17c0:	fc442783          	lw	a5,-60(s0)
    17c4:	0207a783          	lw	a5,32(a5)
    17c8:	fcf42e23          	sw	a5,-36(s0)
    17cc:	fc842783          	lw	a5,-56(s0)
    17d0:	00478793          	addi	a5,a5,4
    17d4:	00078713          	mv	a4,a5
    17d8:	fdc42783          	lw	a5,-36(s0)
    17dc:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7fff0000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    17e0:	fc842783          	lw	a5,-56(s0)
    17e4:	00478793          	addi	a5,a5,4
    17e8:	0007a783          	lw	a5,0(a5)
    17ec:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    17f0:	fd042783          	lw	a5,-48(s0)
    17f4:	2007f793          	andi	a5,a5,512
    17f8:	ee0780e3          	beqz	a5,16d8 <altera_avalon_jtag_uart_irq+0x3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    17fc:	fd042783          	lw	a5,-48(s0)
    1800:	0107d793          	srli	a5,a5,0x10
    1804:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1808:	05c0006f          	j	1864 <altera_avalon_jtag_uart_irq+0x1c8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    180c:	fc442783          	lw	a5,-60(s0)
    1810:	0347a783          	lw	a5,52(a5)
    1814:	fc442703          	lw	a4,-60(s0)
    1818:	00f707b3          	add	a5,a4,a5
    181c:	00001737          	lui	a4,0x1
    1820:	00f707b3          	add	a5,a4,a5
    1824:	8387c783          	lbu	a5,-1992(a5)
    1828:	fef42223          	sw	a5,-28(s0)
    182c:	fc842783          	lw	a5,-56(s0)
    1830:	fe442703          	lw	a4,-28(s0)
    1834:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1838:	fc442783          	lw	a5,-60(s0)
    183c:	0347a783          	lw	a5,52(a5)
    1840:	00178793          	addi	a5,a5,1
    1844:	7ff7f713          	andi	a4,a5,2047
    1848:	fc442783          	lw	a5,-60(s0)
    184c:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
    1850:	00100793          	li	a5,1
    1854:	faf42c23          	sw	a5,-72(s0)

        space--;
    1858:	fc042783          	lw	a5,-64(s0)
    185c:	fff78793          	addi	a5,a5,-1
    1860:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
    1864:	fc042783          	lw	a5,-64(s0)
    1868:	00078c63          	beqz	a5,1880 <altera_avalon_jtag_uart_irq+0x1e4>
    186c:	fc442783          	lw	a5,-60(s0)
    1870:	0347a703          	lw	a4,52(a5)
    1874:	fc442783          	lw	a5,-60(s0)
    1878:	0307a783          	lw	a5,48(a5)
    187c:	f8f718e3          	bne	a4,a5,180c <altera_avalon_jtag_uart_irq+0x170>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
    1880:	fc042783          	lw	a5,-64(s0)
    1884:	e4078ae3          	beqz	a5,16d8 <altera_avalon_jtag_uart_irq+0x3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1888:	fc442783          	lw	a5,-60(s0)
    188c:	0207a783          	lw	a5,32(a5)
    1890:	ffd7f713          	andi	a4,a5,-3
    1894:	fc442783          	lw	a5,-60(s0)
    1898:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    189c:	fc442783          	lw	a5,-60(s0)
    18a0:	0207a783          	lw	a5,32(a5)
    18a4:	fef42423          	sw	a5,-24(s0)
    18a8:	fc442783          	lw	a5,-60(s0)
    18ac:	0007a783          	lw	a5,0(a5)
    18b0:	00478793          	addi	a5,a5,4
    18b4:	00078713          	mv	a4,a5
    18b8:	fe842783          	lw	a5,-24(s0)
    18bc:	00f72023          	sw	a5,0(a4) # 1000 <alt_main+0x84>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    18c0:	fc842783          	lw	a5,-56(s0)
    18c4:	00478793          	addi	a5,a5,4
    18c8:	0007a783          	lw	a5,0(a5)
    18cc:	fef42623          	sw	a5,-20(s0)
  {
    18d0:	e09ff06f          	j	16d8 <altera_avalon_jtag_uart_irq+0x3c>
      break;
    18d4:	00000013          	nop
      }
    }
  }
}
    18d8:	00000013          	nop
    18dc:	05c12083          	lw	ra,92(sp)
    18e0:	05812403          	lw	s0,88(sp)
    18e4:	06010113          	addi	sp,sp,96
    18e8:	00008067          	ret

000018ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    18ec:	fd010113          	addi	sp,sp,-48
    18f0:	02812623          	sw	s0,44(sp)
    18f4:	03010413          	addi	s0,sp,48
    18f8:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    18fc:	fdc42783          	lw	a5,-36(s0)
    1900:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1904:	fe042783          	lw	a5,-32(s0)
    1908:	0007a783          	lw	a5,0(a5)
    190c:	00478793          	addi	a5,a5,4
    1910:	0007a783          	lw	a5,0(a5)
    1914:	fef42223          	sw	a5,-28(s0)
    1918:	fe442783          	lw	a5,-28(s0)
    191c:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1920:	fe842783          	lw	a5,-24(s0)
    1924:	4007f793          	andi	a5,a5,1024
    1928:	02078c63          	beqz	a5,1960 <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    192c:	fe042783          	lw	a5,-32(s0)
    1930:	0207a783          	lw	a5,32(a5)
    1934:	4007e793          	ori	a5,a5,1024
    1938:	fef42623          	sw	a5,-20(s0)
    193c:	fe042783          	lw	a5,-32(s0)
    1940:	0007a783          	lw	a5,0(a5)
    1944:	00478793          	addi	a5,a5,4
    1948:	00078713          	mv	a4,a5
    194c:	fec42783          	lw	a5,-20(s0)
    1950:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
    1954:	fe042783          	lw	a5,-32(s0)
    1958:	0207a223          	sw	zero,36(a5)
    195c:	0340006f          	j	1990 <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1960:	fe042783          	lw	a5,-32(s0)
    1964:	0247a703          	lw	a4,36(a5)
    1968:	800007b7          	lui	a5,0x80000
    196c:	ffc7c793          	xori	a5,a5,-4
    1970:	02e7e063          	bltu	a5,a4,1990 <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
    1974:	fe042783          	lw	a5,-32(s0)
    1978:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
    197c:	00178713          	addi	a4,a5,1
    1980:	fe042783          	lw	a5,-32(s0)
    1984:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
    1988:	fe042783          	lw	a5,-32(s0)
    198c:	0247a783          	lw	a5,36(a5)
    1990:	0000b7b7          	lui	a5,0xb
    1994:	0407a783          	lw	a5,64(a5) # b040 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1998:	00078513          	mv	a0,a5
    199c:	02c12403          	lw	s0,44(sp)
    19a0:	03010113          	addi	sp,sp,48
    19a4:	00008067          	ret

000019a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    19a8:	fe010113          	addi	sp,sp,-32
    19ac:	00812e23          	sw	s0,28(sp)
    19b0:	02010413          	addi	s0,sp,32
    19b4:	fea42623          	sw	a0,-20(s0)
    19b8:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    19bc:	01c0006f          	j	19d8 <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    19c0:	fe842703          	lw	a4,-24(s0)
    19c4:	000047b7          	lui	a5,0x4
    19c8:	00f777b3          	and	a5,a4,a5
    19cc:	00078663          	beqz	a5,19d8 <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
    19d0:	ff500793          	li	a5,-11
    19d4:	0300006f          	j	1a04 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    19d8:	fec42783          	lw	a5,-20(s0)
    19dc:	0347a703          	lw	a4,52(a5) # 4034 <__sfvwrite_r+0x2a8>
    19e0:	fec42783          	lw	a5,-20(s0)
    19e4:	0307a783          	lw	a5,48(a5)
    19e8:	00f70c63          	beq	a4,a5,1a00 <altera_avalon_jtag_uart_close+0x58>
    19ec:	fec42783          	lw	a5,-20(s0)
    19f0:	0247a703          	lw	a4,36(a5)
    19f4:	fec42783          	lw	a5,-20(s0)
    19f8:	0047a783          	lw	a5,4(a5)
    19fc:	fcf762e3          	bltu	a4,a5,19c0 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    1a00:	00000793          	li	a5,0
}
    1a04:	00078513          	mv	a0,a5
    1a08:	01c12403          	lw	s0,28(sp)
    1a0c:	02010113          	addi	sp,sp,32
    1a10:	00008067          	ret

00001a14 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1a14:	fd010113          	addi	sp,sp,-48
    1a18:	02812623          	sw	s0,44(sp)
    1a1c:	03010413          	addi	s0,sp,48
    1a20:	fca42e23          	sw	a0,-36(s0)
    1a24:	fcb42c23          	sw	a1,-40(s0)
    1a28:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
    1a2c:	fe700793          	li	a5,-25
    1a30:	fef42423          	sw	a5,-24(s0)

  switch (req)
    1a34:	fd842703          	lw	a4,-40(s0)
    1a38:	000077b7          	lui	a5,0x7
    1a3c:	a0178793          	addi	a5,a5,-1535 # 6a01 <_isatty+0xc1>
    1a40:	00f70c63          	beq	a4,a5,1a58 <altera_avalon_jtag_uart_ioctl+0x44>
    1a44:	fd842703          	lw	a4,-40(s0)
    1a48:	000077b7          	lui	a5,0x7
    1a4c:	a0278793          	addi	a5,a5,-1534 # 6a02 <_isatty+0xc2>
    1a50:	06f70263          	beq	a4,a5,1ab4 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
    1a54:	0ac0006f          	j	1b00 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
    1a58:	fdc42783          	lw	a5,-36(s0)
    1a5c:	0047a703          	lw	a4,4(a5)
    1a60:	800007b7          	lui	a5,0x80000
    1a64:	fff7c793          	not	a5,a5
    1a68:	08f70663          	beq	a4,a5,1af4 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
    1a6c:	fd442783          	lw	a5,-44(s0)
    1a70:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7fff0000>
    1a74:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    1a78:	fec42703          	lw	a4,-20(s0)
    1a7c:	00100793          	li	a5,1
    1a80:	00e7de63          	bge	a5,a4,1a9c <altera_avalon_jtag_uart_ioctl+0x88>
    1a84:	fec42703          	lw	a4,-20(s0)
    1a88:	800007b7          	lui	a5,0x80000
    1a8c:	fff7c793          	not	a5,a5
    1a90:	00f70663          	beq	a4,a5,1a9c <altera_avalon_jtag_uart_ioctl+0x88>
    1a94:	fec42783          	lw	a5,-20(s0)
    1a98:	00c0006f          	j	1aa4 <altera_avalon_jtag_uart_ioctl+0x90>
    1a9c:	800007b7          	lui	a5,0x80000
    1aa0:	ffe7c793          	xori	a5,a5,-2
    1aa4:	fdc42703          	lw	a4,-36(s0)
    1aa8:	00f72223          	sw	a5,4(a4)
      rc = 0;
    1aac:	fe042423          	sw	zero,-24(s0)
    break;
    1ab0:	0440006f          	j	1af4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    1ab4:	fdc42783          	lw	a5,-36(s0)
    1ab8:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7fff0004>
    1abc:	800007b7          	lui	a5,0x80000
    1ac0:	fff7c793          	not	a5,a5
    1ac4:	02f70c63          	beq	a4,a5,1afc <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1ac8:	fdc42783          	lw	a5,-36(s0)
    1acc:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
    1ad0:	fdc42783          	lw	a5,-36(s0)
    1ad4:	0047a783          	lw	a5,4(a5)
    1ad8:	00f737b3          	sltu	a5,a4,a5
    1adc:	0ff7f793          	zext.b	a5,a5
    1ae0:	00078713          	mv	a4,a5
    1ae4:	fd442783          	lw	a5,-44(s0)
    1ae8:	00e7a023          	sw	a4,0(a5)
      rc = 0;
    1aec:	fe042423          	sw	zero,-24(s0)
    break;
    1af0:	00c0006f          	j	1afc <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
    1af4:	00000013          	nop
    1af8:	0080006f          	j	1b00 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
    1afc:	00000013          	nop
  }

  return rc;
    1b00:	fe842783          	lw	a5,-24(s0)
}
    1b04:	00078513          	mv	a0,a5
    1b08:	02c12403          	lw	s0,44(sp)
    1b0c:	03010113          	addi	sp,sp,48
    1b10:	00008067          	ret

00001b14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1b14:	fc010113          	addi	sp,sp,-64
    1b18:	02112e23          	sw	ra,60(sp)
    1b1c:	02812c23          	sw	s0,56(sp)
    1b20:	04010413          	addi	s0,sp,64
    1b24:	fca42623          	sw	a0,-52(s0)
    1b28:	fcb42423          	sw	a1,-56(s0)
    1b2c:	fcc42223          	sw	a2,-60(s0)
    1b30:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
    1b34:	fc842783          	lw	a5,-56(s0)
    1b38:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1b3c:	1280006f          	j	1c64 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1b40:	fcc42783          	lw	a5,-52(s0)
    1b44:	0287a783          	lw	a5,40(a5)
    1b48:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
    1b4c:	fcc42783          	lw	a5,-52(s0)
    1b50:	02c7a783          	lw	a5,44(a5)
    1b54:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
    1b58:	fd842703          	lw	a4,-40(s0)
    1b5c:	fdc42783          	lw	a5,-36(s0)
    1b60:	00f76c63          	bltu	a4,a5,1b78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1b64:	fd842703          	lw	a4,-40(s0)
    1b68:	fdc42783          	lw	a5,-36(s0)
    1b6c:	40f707b3          	sub	a5,a4,a5
    1b70:	fcf42a23          	sw	a5,-44(s0)
    1b74:	0180006f          	j	1b8c <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1b78:	000017b7          	lui	a5,0x1
    1b7c:	80078713          	addi	a4,a5,-2048 # 800 <alt_log_private_printf+0x250>
    1b80:	fdc42783          	lw	a5,-36(s0)
    1b84:	40f707b3          	sub	a5,a4,a5
    1b88:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
    1b8c:	fd442783          	lw	a5,-44(s0)
    1b90:	06078e63          	beqz	a5,1c0c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
    1b94:	fc442783          	lw	a5,-60(s0)
    1b98:	fd442703          	lw	a4,-44(s0)
    1b9c:	00e7f663          	bgeu	a5,a4,1ba8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1ba0:	fc442783          	lw	a5,-60(s0)
    1ba4:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
    1ba8:	fcc42783          	lw	a5,-52(s0)
    1bac:	03878713          	addi	a4,a5,56
    1bb0:	fdc42783          	lw	a5,-36(s0)
    1bb4:	00f707b3          	add	a5,a4,a5
    1bb8:	fd442603          	lw	a2,-44(s0)
    1bbc:	00078593          	mv	a1,a5
    1bc0:	fd042503          	lw	a0,-48(s0)
    1bc4:	751000ef          	jal	ra,2b14 <memcpy>
      ptr   += n;
    1bc8:	fd042703          	lw	a4,-48(s0)
    1bcc:	fd442783          	lw	a5,-44(s0)
    1bd0:	00f707b3          	add	a5,a4,a5
    1bd4:	fcf42823          	sw	a5,-48(s0)
      space -= n;
    1bd8:	fc442703          	lw	a4,-60(s0)
    1bdc:	fd442783          	lw	a5,-44(s0)
    1be0:	40f707b3          	sub	a5,a4,a5
    1be4:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1be8:	fdc42703          	lw	a4,-36(s0)
    1bec:	fd442783          	lw	a5,-44(s0)
    1bf0:	00f707b3          	add	a5,a4,a5
    1bf4:	7ff7f713          	andi	a4,a5,2047
    1bf8:	fcc42783          	lw	a5,-52(s0)
    1bfc:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
    1c00:	fc442783          	lw	a5,-60(s0)
    1c04:	f2f04ee3          	bgtz	a5,1b40 <altera_avalon_jtag_uart_read+0x2c>
    1c08:	0080006f          	j	1c10 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
    1c0c:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    1c10:	fd042703          	lw	a4,-48(s0)
    1c14:	fc842783          	lw	a5,-56(s0)
    1c18:	04f71c63          	bne	a4,a5,1c70 <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1c1c:	fc042703          	lw	a4,-64(s0)
    1c20:	000047b7          	lui	a5,0x4
    1c24:	00f777b3          	and	a5,a4,a5
    1c28:	04079863          	bnez	a5,1c78 <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1c2c:	00000013          	nop
    1c30:	fcc42783          	lw	a5,-52(s0)
    1c34:	0287a783          	lw	a5,40(a5) # 4028 <__sfvwrite_r+0x29c>
    1c38:	fd842703          	lw	a4,-40(s0)
    1c3c:	00f71c63          	bne	a4,a5,1c54 <altera_avalon_jtag_uart_read+0x140>
    1c40:	fcc42783          	lw	a5,-52(s0)
    1c44:	0247a703          	lw	a4,36(a5)
    1c48:	fcc42783          	lw	a5,-52(s0)
    1c4c:	0047a783          	lw	a5,4(a5)
    1c50:	fef760e3          	bltu	a4,a5,1c30 <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1c54:	fcc42783          	lw	a5,-52(s0)
    1c58:	0287a783          	lw	a5,40(a5)
    1c5c:	fd842703          	lw	a4,-40(s0)
    1c60:	02f70063          	beq	a4,a5,1c80 <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
    1c64:	fc442783          	lw	a5,-60(s0)
    1c68:	ecf04ce3          	bgtz	a5,1b40 <altera_avalon_jtag_uart_read+0x2c>
    1c6c:	0180006f          	j	1c84 <altera_avalon_jtag_uart_read+0x170>
      break;
    1c70:	00000013          	nop
    1c74:	0100006f          	j	1c84 <altera_avalon_jtag_uart_read+0x170>
      break;
    1c78:	00000013          	nop
    1c7c:	0080006f          	j	1c84 <altera_avalon_jtag_uart_read+0x170>
      break;
    1c80:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1c84:	fd042703          	lw	a4,-48(s0)
    1c88:	fc842783          	lw	a5,-56(s0)
    1c8c:	06f70463          	beq	a4,a5,1cf4 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1c90:	00800793          	li	a5,8
    1c94:	3007b7f3          	csrrc	a5,mstatus,a5
    1c98:	fef42623          	sw	a5,-20(s0)
    return context;
    1c9c:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1ca0:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1ca4:	fcc42783          	lw	a5,-52(s0)
    1ca8:	0207a783          	lw	a5,32(a5)
    1cac:	0017e713          	ori	a4,a5,1
    1cb0:	fcc42783          	lw	a5,-52(s0)
    1cb4:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1cb8:	fcc42783          	lw	a5,-52(s0)
    1cbc:	0207a783          	lw	a5,32(a5)
    1cc0:	fef42223          	sw	a5,-28(s0)
    1cc4:	fcc42783          	lw	a5,-52(s0)
    1cc8:	0007a783          	lw	a5,0(a5)
    1ccc:	00478793          	addi	a5,a5,4
    1cd0:	00078713          	mv	a4,a5
    1cd4:	fe442783          	lw	a5,-28(s0)
    1cd8:	00f72023          	sw	a5,0(a4)
    1cdc:	fe042783          	lw	a5,-32(s0)
    1ce0:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1ce4:	fe842783          	lw	a5,-24(s0)
    1ce8:	0087f793          	andi	a5,a5,8
    1cec:	3007a073          	csrs	mstatus,a5
}
    1cf0:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    1cf4:	fd042703          	lw	a4,-48(s0)
    1cf8:	fc842783          	lw	a5,-56(s0)
    1cfc:	00f70a63          	beq	a4,a5,1d10 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
    1d00:	fd042703          	lw	a4,-48(s0)
    1d04:	fc842783          	lw	a5,-56(s0)
    1d08:	40f707b3          	sub	a5,a4,a5
    1d0c:	0200006f          	j	1d2c <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
    1d10:	fc042703          	lw	a4,-64(s0)
    1d14:	000047b7          	lui	a5,0x4
    1d18:	00f777b3          	and	a5,a4,a5
    1d1c:	00078663          	beqz	a5,1d28 <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
    1d20:	ff500793          	li	a5,-11
    1d24:	0080006f          	j	1d2c <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
    1d28:	ffb00793          	li	a5,-5
}
    1d2c:	00078513          	mv	a0,a5
    1d30:	03c12083          	lw	ra,60(sp)
    1d34:	03812403          	lw	s0,56(sp)
    1d38:	04010113          	addi	sp,sp,64
    1d3c:	00008067          	ret

00001d40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1d40:	fc010113          	addi	sp,sp,-64
    1d44:	02112e23          	sw	ra,60(sp)
    1d48:	02812c23          	sw	s0,56(sp)
    1d4c:	04010413          	addi	s0,sp,64
    1d50:	fca42623          	sw	a0,-52(s0)
    1d54:	fcb42423          	sw	a1,-56(s0)
    1d58:	fcc42223          	sw	a2,-60(s0)
    1d5c:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1d60:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1d64:	fc842783          	lw	a5,-56(s0)
    1d68:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1d6c:	0ec0006f          	j	1e58 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1d70:	fcc42783          	lw	a5,-52(s0)
    1d74:	0307a783          	lw	a5,48(a5) # 4030 <__sfvwrite_r+0x2a4>
    1d78:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
    1d7c:	fcc42783          	lw	a5,-52(s0)
    1d80:	0347a783          	lw	a5,52(a5)
    1d84:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
    1d88:	fdc42703          	lw	a4,-36(s0)
    1d8c:	fd042783          	lw	a5,-48(s0)
    1d90:	00f77e63          	bgeu	a4,a5,1dac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1d94:	fd042703          	lw	a4,-48(s0)
    1d98:	fdc42783          	lw	a5,-36(s0)
    1d9c:	40f707b3          	sub	a5,a4,a5
    1da0:	fff78793          	addi	a5,a5,-1
    1da4:	fcf42a23          	sw	a5,-44(s0)
    1da8:	0340006f          	j	1ddc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    1dac:	fd042783          	lw	a5,-48(s0)
    1db0:	00078e63          	beqz	a5,1dcc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1db4:	000017b7          	lui	a5,0x1
    1db8:	80078713          	addi	a4,a5,-2048 # 800 <alt_log_private_printf+0x250>
    1dbc:	fdc42783          	lw	a5,-36(s0)
    1dc0:	40f707b3          	sub	a5,a4,a5
    1dc4:	fcf42a23          	sw	a5,-44(s0)
    1dc8:	0140006f          	j	1ddc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    1dcc:	7ff00713          	li	a4,2047
    1dd0:	fdc42783          	lw	a5,-36(s0)
    1dd4:	40f707b3          	sub	a5,a4,a5
    1dd8:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
    1ddc:	fd442783          	lw	a5,-44(s0)
    1de0:	08078263          	beqz	a5,1e64 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    1de4:	fc442783          	lw	a5,-60(s0)
    1de8:	fd442703          	lw	a4,-44(s0)
    1dec:	00e7f663          	bgeu	a5,a4,1df8 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    1df0:	fc442783          	lw	a5,-60(s0)
    1df4:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
    1df8:	fcc42703          	lw	a4,-52(s0)
    1dfc:	000017b7          	lui	a5,0x1
    1e00:	83878793          	addi	a5,a5,-1992 # 838 <alt_log_private_printf+0x288>
    1e04:	00f70733          	add	a4,a4,a5
    1e08:	fdc42783          	lw	a5,-36(s0)
    1e0c:	00f707b3          	add	a5,a4,a5
    1e10:	fd442603          	lw	a2,-44(s0)
    1e14:	fc842583          	lw	a1,-56(s0)
    1e18:	00078513          	mv	a0,a5
    1e1c:	4f9000ef          	jal	ra,2b14 <memcpy>
      ptr   += n;
    1e20:	fc842703          	lw	a4,-56(s0)
    1e24:	fd442783          	lw	a5,-44(s0)
    1e28:	00f707b3          	add	a5,a4,a5
    1e2c:	fcf42423          	sw	a5,-56(s0)
      count -= n;
    1e30:	fc442703          	lw	a4,-60(s0)
    1e34:	fd442783          	lw	a5,-44(s0)
    1e38:	40f707b3          	sub	a5,a4,a5
    1e3c:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1e40:	fdc42703          	lw	a4,-36(s0)
    1e44:	fd442783          	lw	a5,-44(s0)
    1e48:	00f707b3          	add	a5,a4,a5
    1e4c:	7ff7f713          	andi	a4,a5,2047
    1e50:	fcc42783          	lw	a5,-52(s0)
    1e54:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
    1e58:	fc442783          	lw	a5,-60(s0)
    1e5c:	f0f04ae3          	bgtz	a5,1d70 <altera_avalon_jtag_uart_write+0x30>
    1e60:	0080006f          	j	1e68 <altera_avalon_jtag_uart_write+0x128>
        break;
    1e64:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1e68:	00800793          	li	a5,8
    1e6c:	3007b7f3          	csrrc	a5,mstatus,a5
    1e70:	fef42623          	sw	a5,-20(s0)
    return context;
    1e74:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1e78:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1e7c:	fcc42783          	lw	a5,-52(s0)
    1e80:	0207a783          	lw	a5,32(a5)
    1e84:	0027e713          	ori	a4,a5,2
    1e88:	fcc42783          	lw	a5,-52(s0)
    1e8c:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1e90:	fcc42783          	lw	a5,-52(s0)
    1e94:	0207a783          	lw	a5,32(a5)
    1e98:	fef42223          	sw	a5,-28(s0)
    1e9c:	fcc42783          	lw	a5,-52(s0)
    1ea0:	0007a783          	lw	a5,0(a5)
    1ea4:	00478793          	addi	a5,a5,4
    1ea8:	00078713          	mv	a4,a5
    1eac:	fe442783          	lw	a5,-28(s0)
    1eb0:	00f72023          	sw	a5,0(a4)
    1eb4:	fe042783          	lw	a5,-32(s0)
    1eb8:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1ebc:	fe842783          	lw	a5,-24(s0)
    1ec0:	0087f793          	andi	a5,a5,8
    1ec4:	3007a073          	csrs	mstatus,a5
}
    1ec8:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    1ecc:	fc442783          	lw	a5,-60(s0)
    1ed0:	04f05463          	blez	a5,1f18 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    1ed4:	fc042703          	lw	a4,-64(s0)
    1ed8:	000047b7          	lui	a5,0x4
    1edc:	00f777b3          	and	a5,a4,a5
    1ee0:	04079263          	bnez	a5,1f24 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1ee4:	00000013          	nop
    1ee8:	fcc42783          	lw	a5,-52(s0)
    1eec:	0347a783          	lw	a5,52(a5) # 4034 <__sfvwrite_r+0x2a8>
    1ef0:	fd042703          	lw	a4,-48(s0)
    1ef4:	00f71c63          	bne	a4,a5,1f0c <altera_avalon_jtag_uart_write+0x1cc>
    1ef8:	fcc42783          	lw	a5,-52(s0)
    1efc:	0247a703          	lw	a4,36(a5)
    1f00:	fcc42783          	lw	a5,-52(s0)
    1f04:	0047a783          	lw	a5,4(a5)
    1f08:	fef760e3          	bltu	a4,a5,1ee8 <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1f0c:	fcc42783          	lw	a5,-52(s0)
    1f10:	0247a783          	lw	a5,36(a5)
    1f14:	00079c63          	bnez	a5,1f2c <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
    1f18:	fc442783          	lw	a5,-60(s0)
    1f1c:	f2f04ee3          	bgtz	a5,1e58 <altera_avalon_jtag_uart_write+0x118>
    1f20:	0100006f          	j	1f30 <altera_avalon_jtag_uart_write+0x1f0>
        break;
    1f24:	00000013          	nop
    1f28:	0080006f          	j	1f30 <altera_avalon_jtag_uart_write+0x1f0>
         break;
    1f2c:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1f30:	fc842703          	lw	a4,-56(s0)
    1f34:	fd842783          	lw	a5,-40(s0)
    1f38:	00f70a63          	beq	a4,a5,1f4c <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
    1f3c:	fc842703          	lw	a4,-56(s0)
    1f40:	fd842783          	lw	a5,-40(s0)
    1f44:	40f707b3          	sub	a5,a4,a5
    1f48:	0200006f          	j	1f68 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1f4c:	fc042703          	lw	a4,-64(s0)
    1f50:	000047b7          	lui	a5,0x4
    1f54:	00f777b3          	and	a5,a4,a5
    1f58:	00078663          	beqz	a5,1f64 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
    1f5c:	ff500793          	li	a5,-11
    1f60:	0080006f          	j	1f68 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1f64:	ffb00793          	li	a5,-5
}
    1f68:	00078513          	mv	a0,a5
    1f6c:	03c12083          	lw	ra,60(sp)
    1f70:	03812403          	lw	s0,56(sp)
    1f74:	04010113          	addi	sp,sp,64
    1f78:	00008067          	ret

00001f7c <tx_log_str>:
        .global tx_log_str
tx_log_str:
tx_next_char:
    /* if pointer points to null, return .
     * a0 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	lb      t1, (a0)
    1f7c:	00050303          	lb	t1,0(a0)
	beqz    t1, end_tx
    1f80:	02030863          	beqz	t1,1fb0 <end_tx>
	/* 
     * Check device transmit ready
     *    UART, ALT_LOG_PRINT_MSK == 0x40
     *    JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000
     */
    li      t2, ALT_LOG_PRINT_MSK
    1f84:	ffff03b7          	lui	t2,0xffff0

00001f88 <wait_tx_ready_loop>:

wait_tx_ready_loop:
    /* load base uart / jtag uart address into t0 */
    li      t0, ALT_LOG_PORT_BASE
    1f88:	000202b7          	lui	t0,0x20
    1f8c:	04028293          	addi	t0,t0,64 # 20040 <__alt_data_end+0x10040>

    lw      t0, ALT_LOG_PRINT_REG_OFFSET(t0)
    1f90:	0042a283          	lw	t0,4(t0)
    and     t0, t0, t2
    1f94:	0072f2b3          	and	t0,t0,t2
    beqz    t0, wait_tx_ready_loop	
    1f98:	fe0288e3          	beqz	t0,1f88 <wait_tx_ready_loop>

    /* load base uart / jtag uart address into t0 */
    li      t0, ALT_LOG_PORT_BASE
    1f9c:	000202b7          	lui	t0,0x20
    1fa0:	04028293          	addi	t0,t0,64 # 20040 <__alt_data_end+0x10040>

	/* write char */
	sw      t1, ALT_LOG_PRINT_TXDATA_REG_OFFSET(t0)		
    1fa4:	0062a023          	sw	t1,0(t0)

	/* advance string pointer */
	addi    a0, a0, 1
    1fa8:	00150513          	addi	a0,a0,1
	j       tx_next_char
    1fac:	fd1ff06f          	j	1f7c <tx_log_str>

00001fb0 <end_tx>:

end_tx:	
    ret
    1fb0:	00008067          	ret

00001fb4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1fb4:	fc010113          	addi	sp,sp,-64
    1fb8:	02812e23          	sw	s0,60(sp)
    1fbc:	04010413          	addi	s0,sp,64
    1fc0:	fca42623          	sw	a0,-52(s0)
    1fc4:	fcb42423          	sw	a1,-56(s0)
    1fc8:	fcc42223          	sw	a2,-60(s0)
    1fcc:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    1fd0:	00000713          	li	a4,0
    1fd4:	00000793          	li	a5,0
    1fd8:	fee42423          	sw	a4,-24(s0)
    1fdc:	fef42623          	sw	a5,-20(s0)
    1fe0:	0000b7b7          	lui	a5,0xb
    1fe4:	0407a783          	lw	a5,64(a5) # b040 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    1fe8:	12078263          	beqz	a5,210c <alt_alarm_start+0x158>
  {
    if (alarm)
    1fec:	fcc42783          	lw	a5,-52(s0)
    1ff0:	10078a63          	beqz	a5,2104 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
    1ff4:	fcc42783          	lw	a5,-52(s0)
    1ff8:	fc442703          	lw	a4,-60(s0)
    1ffc:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    2000:	fcc42783          	lw	a5,-52(s0)
    2004:	fc042703          	lw	a4,-64(s0)
    2008:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    200c:	00800793          	li	a5,8
    2010:	3007b7f3          	csrrc	a5,mstatus,a5
    2014:	fef42223          	sw	a5,-28(s0)
    return context;
    2018:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    201c:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    2020:	0000b7b7          	lui	a5,0xb
    2024:	0487a703          	lw	a4,72(a5) # b048 <_alt_nticks>
    2028:	04c7a783          	lw	a5,76(a5)
      
      current_nticks = alt_nticks();
    202c:	fee42423          	sw	a4,-24(s0)
    2030:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    2034:	fc842783          	lw	a5,-56(s0)
    2038:	00078813          	mv	a6,a5
    203c:	00000893          	li	a7,0
    2040:	fe842603          	lw	a2,-24(s0)
    2044:	fec42683          	lw	a3,-20(s0)
    2048:	00c80733          	add	a4,a6,a2
    204c:	00070593          	mv	a1,a4
    2050:	0105b5b3          	sltu	a1,a1,a6
    2054:	00d887b3          	add	a5,a7,a3
    2058:	00f586b3          	add	a3,a1,a5
    205c:	00068793          	mv	a5,a3
    2060:	00070613          	mv	a2,a4
    2064:	00078693          	mv	a3,a5
    2068:	00100513          	li	a0,1
    206c:	00000593          	li	a1,0
    2070:	00a60733          	add	a4,a2,a0
    2074:	00070813          	mv	a6,a4
    2078:	00c83833          	sltu	a6,a6,a2
    207c:	00b687b3          	add	a5,a3,a1
    2080:	00f806b3          	add	a3,a6,a5
    2084:	00068793          	mv	a5,a3
    2088:	fcc42683          	lw	a3,-52(s0)
    208c:	00e6a423          	sw	a4,8(a3)
    2090:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    2094:	fcc42783          	lw	a5,-52(s0)
    2098:	00009737          	lui	a4,0x9
    209c:	4dc70713          	addi	a4,a4,1244 # 94dc <alt_alarm_list>
    20a0:	fce42e23          	sw	a4,-36(s0)
    20a4:	fef42023          	sw	a5,-32(s0)
  entry->previous = list;
    20a8:	fe042783          	lw	a5,-32(s0)
    20ac:	fdc42703          	lw	a4,-36(s0)
    20b0:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    20b4:	fdc42783          	lw	a5,-36(s0)
    20b8:	0007a703          	lw	a4,0(a5)
    20bc:	fe042783          	lw	a5,-32(s0)
    20c0:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    20c4:	fdc42783          	lw	a5,-36(s0)
    20c8:	0007a783          	lw	a5,0(a5)
    20cc:	fe042703          	lw	a4,-32(s0)
    20d0:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    20d4:	fdc42783          	lw	a5,-36(s0)
    20d8:	fe042703          	lw	a4,-32(s0)
    20dc:	00e7a023          	sw	a4,0(a5)
}
    20e0:	00000013          	nop
    20e4:	fd442783          	lw	a5,-44(s0)
    20e8:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    20ec:	fd842783          	lw	a5,-40(s0)
    20f0:	0087f793          	andi	a5,a5,8
    20f4:	3007a073          	csrs	mstatus,a5
}
    20f8:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    20fc:	00000793          	li	a5,0
    2100:	0100006f          	j	2110 <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
    2104:	fea00793          	li	a5,-22
    2108:	0080006f          	j	2110 <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
    210c:	f7a00793          	li	a5,-134
  }
}
    2110:	00078513          	mv	a0,a5
    2114:	03c12403          	lw	s0,60(sp)
    2118:	04010113          	addi	sp,sp,64
    211c:	00008067          	ret

00002120 <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
    2120:	fd010113          	addi	sp,sp,-48
    2124:	02112623          	sw	ra,44(sp)
    2128:	02812423          	sw	s0,40(sp)
    212c:	03010413          	addi	s0,sp,48
    2130:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
    2134:	6a4000ef          	jal	ra,27d8 <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
    2138:	fdc42703          	lw	a4,-36(s0)
    213c:	03200793          	li	a5,50
    2140:	02f707b3          	mul	a5,a4,a5
    2144:	fef42423          	sw	a5,-24(s0)
    2148:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
    214c:	00000013          	nop
    2150:	6c8000ef          	jal	ra,2818 <alt_timestamp>
    2154:	00050713          	mv	a4,a0
    2158:	00058793          	mv	a5,a1
    215c:	fec42683          	lw	a3,-20(s0)
    2160:	00078613          	mv	a2,a5
    2164:	fed666e3          	bltu	a2,a3,2150 <alt_busy_sleep+0x30>
    2168:	fec42683          	lw	a3,-20(s0)
    216c:	00078613          	mv	a2,a5
    2170:	00c69863          	bne	a3,a2,2180 <alt_busy_sleep+0x60>
    2174:	fe842683          	lw	a3,-24(s0)
    2178:	00070793          	mv	a5,a4
    217c:	fcd7eae3          	bltu	a5,a3,2150 <alt_busy_sleep+0x30>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
    2180:	00000793          	li	a5,0
}
    2184:	00078513          	mv	a0,a5
    2188:	02c12083          	lw	ra,44(sp)
    218c:	02812403          	lw	s0,40(sp)
    2190:	03010113          	addi	sp,sp,48
    2194:	00008067          	ret

00002198 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
    2198:	fe010113          	addi	sp,sp,-32
    219c:	00812e23          	sw	s0,28(sp)
    21a0:	02010413          	addi	s0,sp,32
#if ALT_CPU_DCACHE_SIZE > 0
    char* i;
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    21a4:	fe042623          	sw	zero,-20(s0)
    21a8:	0180006f          	j	21c0 <alt_dcache_flush_all+0x28>
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    21ac:	fec42783          	lw	a5,-20(s0)
    21b0:	0817a00f          	.4byte	0x817a00f
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    21b4:	fec42783          	lw	a5,-20(s0)
    21b8:	02078793          	addi	a5,a5,32
    21bc:	fef42623          	sw	a5,-20(s0)
    21c0:	fec42703          	lw	a4,-20(s0)
    21c4:	000017b7          	lui	a5,0x1
    21c8:	fef762e3          	bltu	a4,a5,21ac <alt_dcache_flush_all+0x14>
    }
#endif
}
    21cc:	00000013          	nop
    21d0:	00000013          	nop
    21d4:	01c12403          	lw	s0,28(sp)
    21d8:	02010113          	addi	sp,sp,32
    21dc:	00008067          	ret

000021e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    21e0:	fe010113          	addi	sp,sp,-32
    21e4:	00812e23          	sw	s0,28(sp)
    21e8:	02010413          	addi	s0,sp,32
    21ec:	fea42623          	sw	a0,-20(s0)
    21f0:	feb42423          	sw	a1,-24(s0)
    21f4:	fec42223          	sw	a2,-28(s0)
  return len;
    21f8:	fe442783          	lw	a5,-28(s0)
}
    21fc:	00078513          	mv	a0,a5
    2200:	01c12403          	lw	s0,28(sp)
    2204:	02010113          	addi	sp,sp,32
    2208:	00008067          	ret

0000220c <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    220c:	fe010113          	addi	sp,sp,-32
    2210:	00112e23          	sw	ra,28(sp)
    2214:	00812c23          	sw	s0,24(sp)
    2218:	02010413          	addi	s0,sp,32
    221c:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    2220:	000097b7          	lui	a5,0x9
    2224:	4ec78593          	addi	a1,a5,1260 # 94ec <alt_dev_list>
    2228:	fec42503          	lw	a0,-20(s0)
    222c:	068000ef          	jal	ra,2294 <alt_dev_llist_insert>
    2230:	00050793          	mv	a5,a0
}
    2234:	00078513          	mv	a0,a5
    2238:	01c12083          	lw	ra,28(sp)
    223c:	01812403          	lw	s0,24(sp)
    2240:	02010113          	addi	sp,sp,32
    2244:	00008067          	ret

00002248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2248:	ff010113          	addi	sp,sp,-16
    224c:	00112623          	sw	ra,12(sp)
    2250:	00812423          	sw	s0,8(sp)
    2254:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    2258:	000097b7          	lui	a5,0x9
    225c:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    2260:	00078c63          	beqz	a5,2278 <alt_get_errno+0x30>
    2264:	000097b7          	lui	a5,0x9
    2268:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    226c:	000780e7          	jalr	a5
    2270:	00050793          	mv	a5,a0
    2274:	00c0006f          	j	2280 <alt_get_errno+0x38>
    2278:	0000b7b7          	lui	a5,0xb
    227c:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    2280:	00078513          	mv	a0,a5
    2284:	00c12083          	lw	ra,12(sp)
    2288:	00812403          	lw	s0,8(sp)
    228c:	01010113          	addi	sp,sp,16
    2290:	00008067          	ret

00002294 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2294:	fd010113          	addi	sp,sp,-48
    2298:	02112623          	sw	ra,44(sp)
    229c:	02812423          	sw	s0,40(sp)
    22a0:	03010413          	addi	s0,sp,48
    22a4:	fca42e23          	sw	a0,-36(s0)
    22a8:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    22ac:	fdc42783          	lw	a5,-36(s0)
    22b0:	00078863          	beqz	a5,22c0 <alt_dev_llist_insert+0x2c>
    22b4:	fdc42783          	lw	a5,-36(s0)
    22b8:	0087a783          	lw	a5,8(a5)
    22bc:	00079e63          	bnez	a5,22d8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    22c0:	f89ff0ef          	jal	ra,2248 <alt_get_errno>
    22c4:	00050713          	mv	a4,a0
    22c8:	01600793          	li	a5,22
    22cc:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    22d0:	fea00793          	li	a5,-22
    22d4:	0540006f          	j	2328 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    22d8:	fdc42783          	lw	a5,-36(s0)
    22dc:	fd842703          	lw	a4,-40(s0)
    22e0:	fee42423          	sw	a4,-24(s0)
    22e4:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    22e8:	fec42783          	lw	a5,-20(s0)
    22ec:	fe842703          	lw	a4,-24(s0)
    22f0:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    22f4:	fe842783          	lw	a5,-24(s0)
    22f8:	0007a703          	lw	a4,0(a5)
    22fc:	fec42783          	lw	a5,-20(s0)
    2300:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    2304:	fe842783          	lw	a5,-24(s0)
    2308:	0007a783          	lw	a5,0(a5)
    230c:	fec42703          	lw	a4,-20(s0)
    2310:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    2314:	fe842783          	lw	a5,-24(s0)
    2318:	fec42703          	lw	a4,-20(s0)
    231c:	00e7a023          	sw	a4,0(a5)
}
    2320:	00000013          	nop

  return 0;  
    2324:	00000793          	li	a5,0
}
    2328:	00078513          	mv	a0,a5
    232c:	02c12083          	lw	ra,44(sp)
    2330:	02812403          	lw	s0,40(sp)
    2334:	03010113          	addi	sp,sp,48
    2338:	00008067          	ret

0000233c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    233c:	fe010113          	addi	sp,sp,-32
    2340:	00112e23          	sw	ra,28(sp)
    2344:	00812c23          	sw	s0,24(sp)
    2348:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    234c:	000077b7          	lui	a5,0x7
    2350:	5e478793          	addi	a5,a5,1508 # 75e4 <__init_array_start+0x4>
    2354:	fef42623          	sw	a5,-20(s0)
    2358:	01c0006f          	j	2374 <_do_ctors+0x38>
        (*ctor) (); 
    235c:	fec42783          	lw	a5,-20(s0)
    2360:	0007a783          	lw	a5,0(a5)
    2364:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    2368:	fec42783          	lw	a5,-20(s0)
    236c:	ffc78793          	addi	a5,a5,-4
    2370:	fef42623          	sw	a5,-20(s0)
    2374:	fec42703          	lw	a4,-20(s0)
    2378:	000077b7          	lui	a5,0x7
    237c:	5e078793          	addi	a5,a5,1504 # 75e0 <__init_array_start>
    2380:	fcf77ee3          	bgeu	a4,a5,235c <_do_ctors+0x20>
}
    2384:	00000013          	nop
    2388:	00000013          	nop
    238c:	01c12083          	lw	ra,28(sp)
    2390:	01812403          	lw	s0,24(sp)
    2394:	02010113          	addi	sp,sp,32
    2398:	00008067          	ret

0000239c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    239c:	fe010113          	addi	sp,sp,-32
    23a0:	00112e23          	sw	ra,28(sp)
    23a4:	00812c23          	sw	s0,24(sp)
    23a8:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    23ac:	000077b7          	lui	a5,0x7
    23b0:	5e478793          	addi	a5,a5,1508 # 75e4 <__init_array_start+0x4>
    23b4:	fef42623          	sw	a5,-20(s0)
    23b8:	01c0006f          	j	23d4 <_do_dtors+0x38>
        (*dtor) (); 
    23bc:	fec42783          	lw	a5,-20(s0)
    23c0:	0007a783          	lw	a5,0(a5)
    23c4:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    23c8:	fec42783          	lw	a5,-20(s0)
    23cc:	ffc78793          	addi	a5,a5,-4
    23d0:	fef42623          	sw	a5,-20(s0)
    23d4:	fec42703          	lw	a4,-20(s0)
    23d8:	000077b7          	lui	a5,0x7
    23dc:	5e878793          	addi	a5,a5,1512 # 75e8 <__fini_array_end>
    23e0:	fcf77ee3          	bgeu	a4,a5,23bc <_do_dtors+0x20>
}
    23e4:	00000013          	nop
    23e8:	00000013          	nop
    23ec:	01c12083          	lw	ra,28(sp)
    23f0:	01812403          	lw	s0,24(sp)
    23f4:	02010113          	addi	sp,sp,32
    23f8:	00008067          	ret

000023fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    23fc:	ff010113          	addi	sp,sp,-16
    2400:	00812623          	sw	s0,12(sp)
    2404:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
    2408:	0000100f          	fence.i
#endif
}
    240c:	00000013          	nop
    2410:	00c12403          	lw	s0,12(sp)
    2414:	01010113          	addi	sp,sp,16
    2418:	00008067          	ret

0000241c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    241c:	fd010113          	addi	sp,sp,-48
    2420:	02112623          	sw	ra,44(sp)
    2424:	02812423          	sw	s0,40(sp)
    2428:	03010413          	addi	s0,sp,48
    242c:	fea42623          	sw	a0,-20(s0)
    2430:	feb42423          	sw	a1,-24(s0)
    2434:	fec42223          	sw	a2,-28(s0)
    2438:	fed42023          	sw	a3,-32(s0)
    243c:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2440:	fdc42703          	lw	a4,-36(s0)
    2444:	fe042683          	lw	a3,-32(s0)
    2448:	fe442603          	lw	a2,-28(s0)
    244c:	fe842583          	lw	a1,-24(s0)
    2450:	fec42503          	lw	a0,-20(s0)
    2454:	01c000ef          	jal	ra,2470 <alt_iic_isr_register>
    2458:	00050793          	mv	a5,a0
}  
    245c:	00078513          	mv	a0,a5
    2460:	02c12083          	lw	ra,44(sp)
    2464:	02812403          	lw	s0,40(sp)
    2468:	03010113          	addi	sp,sp,48
    246c:	00008067          	ret

00002470 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2470:	fa010113          	addi	sp,sp,-96
    2474:	04812e23          	sw	s0,92(sp)
    2478:	06010413          	addi	s0,sp,96
    247c:	faa42e23          	sw	a0,-68(s0)
    2480:	fab42c23          	sw	a1,-72(s0)
    2484:	fac42a23          	sw	a2,-76(s0)
    2488:	fad42823          	sw	a3,-80(s0)
    248c:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    2490:	fea00793          	li	a5,-22
    2494:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2498:	fb842783          	lw	a5,-72(s0)
    249c:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    24a0:	fc842703          	lw	a4,-56(s0)
    24a4:	00f00793          	li	a5,15
    24a8:	12e7c863          	blt	a5,a4,25d8 <alt_iic_isr_register+0x168>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    24ac:	00800793          	li	a5,8
    24b0:	3007b7f3          	csrrc	a5,mstatus,a5
    24b4:	fcf42823          	sw	a5,-48(s0)
    return context;
    24b8:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    24bc:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    24c0:	0000b7b7          	lui	a5,0xb
    24c4:	09878713          	addi	a4,a5,152 # b098 <alt_irq>
    24c8:	fc842783          	lw	a5,-56(s0)
    24cc:	00379793          	slli	a5,a5,0x3
    24d0:	00f707b3          	add	a5,a4,a5
    24d4:	fb442703          	lw	a4,-76(s0)
    24d8:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    24dc:	0000b7b7          	lui	a5,0xb
    24e0:	09878713          	addi	a4,a5,152 # b098 <alt_irq>
    24e4:	fc842783          	lw	a5,-56(s0)
    24e8:	00379793          	slli	a5,a5,0x3
    24ec:	00f707b3          	add	a5,a4,a5
    24f0:	fb042703          	lw	a4,-80(s0)
    24f4:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    24f8:	fb442783          	lw	a5,-76(s0)
    24fc:	06078263          	beqz	a5,2560 <alt_iic_isr_register+0xf0>
    2500:	fc842783          	lw	a5,-56(s0)
    2504:	fbc42703          	lw	a4,-68(s0)
    2508:	fce42a23          	sw	a4,-44(s0)
    250c:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    2510:	fd842703          	lw	a4,-40(s0)
    2514:	00f00793          	li	a5,15
    2518:	00e7e863          	bltu	a5,a4,2528 <alt_iic_isr_register+0xb8>
    251c:	fd842783          	lw	a5,-40(s0)
    2520:	01078793          	addi	a5,a5,16
    2524:	0080006f          	j	252c <alt_iic_isr_register+0xbc>
    2528:	fff00793          	li	a5,-1
    252c:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    2530:	fdc42783          	lw	a5,-36(s0)
    2534:	0007d663          	bgez	a5,2540 <alt_iic_isr_register+0xd0>
        return rc;
    2538:	fdc42783          	lw	a5,-36(s0)
    253c:	0800006f          	j	25bc <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    2540:	fdc42783          	lw	a5,-36(s0)
    2544:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    2548:	fd842783          	lw	a5,-40(s0)
    254c:	00100713          	li	a4,1
    2550:	00f717b3          	sll	a5,a4,a5
    2554:	3047a073          	csrs	mie,a5
    return 0;
    2558:	00000793          	li	a5,0
    255c:	0600006f          	j	25bc <alt_iic_isr_register+0x14c>
    2560:	fc842783          	lw	a5,-56(s0)
    2564:	fbc42703          	lw	a4,-68(s0)
    2568:	fee42023          	sw	a4,-32(s0)
    256c:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    2570:	fe442703          	lw	a4,-28(s0)
    2574:	00f00793          	li	a5,15
    2578:	00e7e863          	bltu	a5,a4,2588 <alt_iic_isr_register+0x118>
    257c:	fe442783          	lw	a5,-28(s0)
    2580:	01078793          	addi	a5,a5,16
    2584:	0080006f          	j	258c <alt_iic_isr_register+0x11c>
    2588:	fff00793          	li	a5,-1
    258c:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    2590:	fe842783          	lw	a5,-24(s0)
    2594:	0007d663          	bgez	a5,25a0 <alt_iic_isr_register+0x130>
        return rc;
    2598:	fe842783          	lw	a5,-24(s0)
    259c:	0200006f          	j	25bc <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    25a0:	fe842783          	lw	a5,-24(s0)
    25a4:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    25a8:	fe442783          	lw	a5,-28(s0)
    25ac:	00100713          	li	a4,1
    25b0:	00f717b3          	sll	a5,a4,a5
    25b4:	3047b073          	csrc	mie,a5
    return 0;
    25b8:	00000793          	li	a5,0
    25bc:	fcf42223          	sw	a5,-60(s0)
    25c0:	fcc42783          	lw	a5,-52(s0)
    25c4:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    25c8:	fec42783          	lw	a5,-20(s0)
    25cc:	0087f793          	andi	a5,a5,8
    25d0:	3007a073          	csrs	mstatus,a5
}
    25d4:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    25d8:	fc442783          	lw	a5,-60(s0)
}
    25dc:	00078513          	mv	a0,a5
    25e0:	05c12403          	lw	s0,92(sp)
    25e4:	06010113          	addi	sp,sp,96
    25e8:	00008067          	ret

000025ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    25ec:	fd010113          	addi	sp,sp,-48
    25f0:	02112623          	sw	ra,44(sp)
    25f4:	02812423          	sw	s0,40(sp)
    25f8:	03010413          	addi	s0,sp,48
    25fc:	fca42e23          	sw	a0,-36(s0)
    2600:	fcb42c23          	sw	a1,-40(s0)
    2604:	fcc42a23          	sw	a2,-44(s0)
    2608:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    260c:	fd042603          	lw	a2,-48(s0)
    2610:	fd442583          	lw	a1,-44(s0)
    2614:	fd842503          	lw	a0,-40(s0)
    2618:	2e1000ef          	jal	ra,30f8 <open>
    261c:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    2620:	fec42783          	lw	a5,-20(s0)
    2624:	0807c863          	bltz	a5,26b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    2628:	000097b7          	lui	a5,0x9
    262c:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    2630:	fec42703          	lw	a4,-20(s0)
    2634:	00070793          	mv	a5,a4
    2638:	00179793          	slli	a5,a5,0x1
    263c:	00e787b3          	add	a5,a5,a4
    2640:	00279793          	slli	a5,a5,0x2
    2644:	00f687b3          	add	a5,a3,a5
    2648:	0007a703          	lw	a4,0(a5)
    264c:	fdc42783          	lw	a5,-36(s0)
    2650:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    2654:	000097b7          	lui	a5,0x9
    2658:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    265c:	fec42703          	lw	a4,-20(s0)
    2660:	00070793          	mv	a5,a4
    2664:	00179793          	slli	a5,a5,0x1
    2668:	00e787b3          	add	a5,a5,a4
    266c:	00279793          	slli	a5,a5,0x2
    2670:	00f687b3          	add	a5,a3,a5
    2674:	0047a703          	lw	a4,4(a5)
    2678:	fdc42783          	lw	a5,-36(s0)
    267c:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2680:	000097b7          	lui	a5,0x9
    2684:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    2688:	fec42703          	lw	a4,-20(s0)
    268c:	00070793          	mv	a5,a4
    2690:	00179793          	slli	a5,a5,0x1
    2694:	00e787b3          	add	a5,a5,a4
    2698:	00279793          	slli	a5,a5,0x2
    269c:	00f687b3          	add	a5,a3,a5
    26a0:	0087a703          	lw	a4,8(a5)
    26a4:	fdc42783          	lw	a5,-36(s0)
    26a8:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    26ac:	fec42503          	lw	a0,-20(s0)
    26b0:	090000ef          	jal	ra,2740 <alt_release_fd>
  }
} 
    26b4:	00000013          	nop
    26b8:	02c12083          	lw	ra,44(sp)
    26bc:	02812403          	lw	s0,40(sp)
    26c0:	03010113          	addi	sp,sp,48
    26c4:	00008067          	ret

000026c8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    26c8:	fe010113          	addi	sp,sp,-32
    26cc:	00112e23          	sw	ra,28(sp)
    26d0:	00812c23          	sw	s0,24(sp)
    26d4:	02010413          	addi	s0,sp,32
    26d8:	fea42623          	sw	a0,-20(s0)
    26dc:	feb42423          	sw	a1,-24(s0)
    26e0:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    26e4:	1ff00693          	li	a3,511
    26e8:	00100613          	li	a2,1
    26ec:	fec42583          	lw	a1,-20(s0)
    26f0:	000097b7          	lui	a5,0x9
    26f4:	b3478513          	addi	a0,a5,-1228 # 8b34 <alt_fd_list+0xc>
    26f8:	ef5ff0ef          	jal	ra,25ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    26fc:	1ff00693          	li	a3,511
    2700:	00000613          	li	a2,0
    2704:	fe842583          	lw	a1,-24(s0)
    2708:	000097b7          	lui	a5,0x9
    270c:	b2878513          	addi	a0,a5,-1240 # 8b28 <alt_fd_list>
    2710:	eddff0ef          	jal	ra,25ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2714:	1ff00693          	li	a3,511
    2718:	00100613          	li	a2,1
    271c:	fe442583          	lw	a1,-28(s0)
    2720:	000097b7          	lui	a5,0x9
    2724:	b4078513          	addi	a0,a5,-1216 # 8b40 <alt_fd_list+0x18>
    2728:	ec5ff0ef          	jal	ra,25ec <alt_open_fd>
}  
    272c:	00000013          	nop
    2730:	01c12083          	lw	ra,28(sp)
    2734:	01812403          	lw	s0,24(sp)
    2738:	02010113          	addi	sp,sp,32
    273c:	00008067          	ret

00002740 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2740:	fe010113          	addi	sp,sp,-32
    2744:	00812e23          	sw	s0,28(sp)
    2748:	02010413          	addi	s0,sp,32
    274c:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    2750:	fec42703          	lw	a4,-20(s0)
    2754:	00200793          	li	a5,2
    2758:	04e7d663          	bge	a5,a4,27a4 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    275c:	000097b7          	lui	a5,0x9
    2760:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    2764:	fec42703          	lw	a4,-20(s0)
    2768:	00070793          	mv	a5,a4
    276c:	00179793          	slli	a5,a5,0x1
    2770:	00e787b3          	add	a5,a5,a4
    2774:	00279793          	slli	a5,a5,0x2
    2778:	00f687b3          	add	a5,a3,a5
    277c:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    2780:	000097b7          	lui	a5,0x9
    2784:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    2788:	fec42703          	lw	a4,-20(s0)
    278c:	00070793          	mv	a5,a4
    2790:	00179793          	slli	a5,a5,0x1
    2794:	00e787b3          	add	a5,a5,a4
    2798:	00279793          	slli	a5,a5,0x2
    279c:	00f687b3          	add	a5,a3,a5
    27a0:	0007a023          	sw	zero,0(a5)
  }
}
    27a4:	00000013          	nop
    27a8:	01c12403          	lw	s0,28(sp)
    27ac:	02010113          	addi	sp,sp,32
    27b0:	00008067          	ret

000027b4 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    27b4:	ff010113          	addi	sp,sp,-16
    27b8:	00812623          	sw	s0,12(sp)
    27bc:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    27c0:	fff00793          	li	a5,-1
    27c4:	3047b073          	csrc	mie,a5
#endif
}
    27c8:	00000013          	nop
    27cc:	00c12403          	lw	s0,12(sp)
    27d0:	01010113          	addi	sp,sp,16
    27d4:	00008067          	ret

000027d8 <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    27d8:	ff010113          	addi	sp,sp,-16
    27dc:	00112623          	sw	ra,12(sp)
    27e0:	00812423          	sw	s0,8(sp)
    27e4:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    27e8:	0ac000ef          	jal	ra,2894 <alt_niosv_mtime_get>
    27ec:	00050713          	mv	a4,a0
    27f0:	00058793          	mv	a5,a1
    27f4:	0000b6b7          	lui	a3,0xb
    27f8:	04e6ac23          	sw	a4,88(a3) # b058 <alt_niosv_timestamp_offset>
    27fc:	04f6ae23          	sw	a5,92(a3)
    return 0;
    2800:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    2804:	00078513          	mv	a0,a5
    2808:	00c12083          	lw	ra,12(sp)
    280c:	00812403          	lw	s0,8(sp)
    2810:	01010113          	addi	sp,sp,16
    2814:	00008067          	ret

00002818 <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    2818:	ff010113          	addi	sp,sp,-16
    281c:	00112623          	sw	ra,12(sp)
    2820:	00812423          	sw	s0,8(sp)
    2824:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    2828:	06c000ef          	jal	ra,2894 <alt_niosv_mtime_get>
    282c:	00050613          	mv	a2,a0
    2830:	00058693          	mv	a3,a1
    2834:	0000b7b7          	lui	a5,0xb
    2838:	0587a503          	lw	a0,88(a5) # b058 <alt_niosv_timestamp_offset>
    283c:	05c7a583          	lw	a1,92(a5)
    2840:	40a60733          	sub	a4,a2,a0
    2844:	00070813          	mv	a6,a4
    2848:	01063833          	sltu	a6,a2,a6
    284c:	40b687b3          	sub	a5,a3,a1
    2850:	410786b3          	sub	a3,a5,a6
    2854:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    2858:	00070513          	mv	a0,a4
    285c:	00078593          	mv	a1,a5
    2860:	00c12083          	lw	ra,12(sp)
    2864:	00812403          	lw	s0,8(sp)
    2868:	01010113          	addi	sp,sp,16
    286c:	00008067          	ret

00002870 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    2870:	ff010113          	addi	sp,sp,-16
    2874:	00812623          	sw	s0,12(sp)
    2878:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    287c:	02faf7b7          	lui	a5,0x2faf
    2880:	08078793          	addi	a5,a5,128 # 2faf080 <__alt_data_end+0x2f9f080>
    return alt_niosv_timer_timestamp_freq();
}
    2884:	00078513          	mv	a0,a5
    2888:	00c12403          	lw	s0,12(sp)
    288c:	01010113          	addi	sp,sp,16
    2890:	00008067          	ret

00002894 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    2894:	fe010113          	addi	sp,sp,-32
    2898:	00812e23          	sw	s0,28(sp)
    289c:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    28a0:	00020337          	lui	t1,0x20
    28a4:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    28a8:	00032303          	lw	t1,0(t1)
    28ac:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    28b0:	00020337          	lui	t1,0x20
    28b4:	00830313          	addi	t1,t1,8 # 20008 <__alt_data_end+0x10008>
    28b8:	00032303          	lw	t1,0(t1)
    28bc:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    28c0:	00020337          	lui	t1,0x20
    28c4:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    28c8:	00032303          	lw	t1,0(t1)
    28cc:	fe842e03          	lw	t3,-24(s0)
    28d0:	fc6e18e3          	bne	t3,t1,28a0 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    28d4:	fe842303          	lw	t1,-24(s0)
    28d8:	00030813          	mv	a6,t1
    28dc:	00000893          	li	a7,0
    28e0:	00081793          	slli	a5,a6,0x0
    28e4:	00000713          	li	a4,0
    28e8:	fec42803          	lw	a6,-20(s0)
    28ec:	00080613          	mv	a2,a6
    28f0:	00000693          	li	a3,0
    28f4:	00c76533          	or	a0,a4,a2
    28f8:	00d7e5b3          	or	a1,a5,a3
    28fc:	00050713          	mv	a4,a0
    2900:	00058793          	mv	a5,a1
}
    2904:	00070513          	mv	a0,a4
    2908:	00078593          	mv	a1,a5
    290c:	01c12403          	lw	s0,28(sp)
    2910:	02010113          	addi	sp,sp,32
    2914:	00008067          	ret

00002918 <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    2918:	fe010113          	addi	sp,sp,-32
    291c:	00812e23          	sw	s0,28(sp)
    2920:	02010413          	addi	s0,sp,32
    2924:	fea42423          	sw	a0,-24(s0)
    2928:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    292c:	000206b7          	lui	a3,0x20
    2930:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    2934:	fff00613          	li	a2,-1
    2938:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    293c:	000206b7          	lui	a3,0x20
    2940:	fe842603          	lw	a2,-24(s0)
    2944:	00c6a023          	sw	a2,0(a3) # 20000 <__alt_data_end+0x10000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    2948:	fec42683          	lw	a3,-20(s0)
    294c:	0006d713          	srli	a4,a3,0x0
    2950:	00000793          	li	a5,0
    2954:	000206b7          	lui	a3,0x20
    2958:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    295c:	00070793          	mv	a5,a4
    2960:	00f6a023          	sw	a5,0(a3)
}
    2964:	00000013          	nop
    2968:	01c12403          	lw	s0,28(sp)
    296c:	02010113          	addi	sp,sp,32
    2970:	00008067          	ret

00002974 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    2974:	fe010113          	addi	sp,sp,-32
    2978:	00812e23          	sw	s0,28(sp)
    297c:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    2980:	00020337          	lui	t1,0x20
    2984:	00032303          	lw	t1,0(t1) # 20000 <__alt_data_end+0x10000>
    2988:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    298c:	00020337          	lui	t1,0x20
    2990:	00430313          	addi	t1,t1,4 # 20004 <__alt_data_end+0x10004>
    2994:	00032303          	lw	t1,0(t1)
    2998:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    299c:	fec42303          	lw	t1,-20(s0)
    29a0:	00030813          	mv	a6,t1
    29a4:	00000893          	li	a7,0
    29a8:	00081793          	slli	a5,a6,0x0
    29ac:	00000713          	li	a4,0
    29b0:	fe842803          	lw	a6,-24(s0)
    29b4:	00080613          	mv	a2,a6
    29b8:	00000693          	li	a3,0
    29bc:	00c76533          	or	a0,a4,a2
    29c0:	00d7e5b3          	or	a1,a5,a3
    29c4:	00050713          	mv	a4,a0
    29c8:	00058793          	mv	a5,a1
}
    29cc:	00070513          	mv	a0,a4
    29d0:	00078593          	mv	a1,a5
    29d4:	01c12403          	lw	s0,28(sp)
    29d8:	02010113          	addi	sp,sp,32
    29dc:	00008067          	ret

000029e0 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    29e0:	fc010113          	addi	sp,sp,-64
    29e4:	02112e23          	sw	ra,60(sp)
    29e8:	02812c23          	sw	s0,56(sp)
    29ec:	04010413          	addi	s0,sp,64
    29f0:	fca42623          	sw	a0,-52(s0)
    29f4:	fcb42423          	sw	a1,-56(s0)
    29f8:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
    29fc:	e99ff0ef          	jal	ra,2894 <alt_niosv_mtime_get>
    2a00:	fea42423          	sw	a0,-24(s0)
    2a04:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    2a08:	fe842703          	lw	a4,-24(s0)
    2a0c:	fec42783          	lw	a5,-20(s0)
    2a10:	0000c537          	lui	a0,0xc
    2a14:	35050513          	addi	a0,a0,848 # c350 <__alt_heap_start+0x11e0>
    2a18:	00000593          	li	a1,0
    2a1c:	00a70633          	add	a2,a4,a0
    2a20:	00060813          	mv	a6,a2
    2a24:	00e83833          	sltu	a6,a6,a4
    2a28:	00b786b3          	add	a3,a5,a1
    2a2c:	00d807b3          	add	a5,a6,a3
    2a30:	00078693          	mv	a3,a5
    2a34:	00060713          	mv	a4,a2
    2a38:	00068793          	mv	a5,a3
    2a3c:	00070513          	mv	a0,a4
    2a40:	00078593          	mv	a1,a5
    2a44:	ed5ff0ef          	jal	ra,2918 <alt_niosv_mtimecmp_set>

    // ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h
    ALT_LOG_SYS_CLK_HEARTBEAT();
    2a48:	cacfe0ef          	jal	ra,ef4 <alt_log_system_clock>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    2a4c:	00800793          	li	a5,8
    2a50:	3007b7f3          	csrrc	a5,mstatus,a5
    2a54:	fef42223          	sw	a5,-28(s0)
    return context;
    2a58:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    2a5c:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
    2a60:	f38fe0ef          	jal	ra,1198 <alt_tick>
    2a64:	fdc42783          	lw	a5,-36(s0)
    2a68:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    2a6c:	fe042783          	lw	a5,-32(s0)
    2a70:	0087f793          	andi	a5,a5,8
    2a74:	3007a073          	csrs	mstatus,a5
}
    2a78:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    2a7c:	00000013          	nop
    2a80:	03c12083          	lw	ra,60(sp)
    2a84:	03812403          	lw	s0,56(sp)
    2a88:	04010113          	addi	sp,sp,64
    2a8c:	00008067          	ret

00002a90 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    2a90:	ff010113          	addi	sp,sp,-16
    2a94:	00112623          	sw	ra,12(sp)
    2a98:	00812423          	sw	s0,8(sp)
    2a9c:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    2aa0:	fff00513          	li	a0,-1
    2aa4:	fff00593          	li	a1,-1
    2aa8:	e71ff0ef          	jal	ra,2918 <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
    2aac:	08000793          	li	a5,128
    2ab0:	3047a073          	csrs	mie,a5
}
    2ab4:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    2ab8:	00000013          	nop
    2abc:	00c12083          	lw	ra,12(sp)
    2ac0:	00812403          	lw	s0,8(sp)
    2ac4:	01010113          	addi	sp,sp,16
    2ac8:	00008067          	ret

00002acc <atexit>:
    2acc:	00050593          	mv	a1,a0
    2ad0:	00000693          	li	a3,0
    2ad4:	00000613          	li	a2,0
    2ad8:	00000513          	li	a0,0
    2adc:	6dc0006f          	j	31b8 <__register_exitproc>

00002ae0 <exit>:
    2ae0:	ff010113          	addi	sp,sp,-16
    2ae4:	00000593          	li	a1,0
    2ae8:	00812423          	sw	s0,8(sp)
    2aec:	00112623          	sw	ra,12(sp)
    2af0:	00050413          	mv	s0,a0
    2af4:	7ac000ef          	jal	ra,32a0 <__call_exitprocs>
    2af8:	00005517          	auipc	a0,0x5
    2afc:	f0852503          	lw	a0,-248(a0) # 7a00 <_global_impure_ptr>
    2b00:	03c52783          	lw	a5,60(a0)
    2b04:	00078463          	beqz	a5,2b0c <exit+0x2c>
    2b08:	000780e7          	jalr	a5
    2b0c:	00040513          	mv	a0,s0
    2b10:	3e1030ef          	jal	ra,66f0 <_exit>

00002b14 <memcpy>:
    2b14:	00b547b3          	xor	a5,a0,a1
    2b18:	0037f793          	andi	a5,a5,3
    2b1c:	00c508b3          	add	a7,a0,a2
    2b20:	06079463          	bnez	a5,2b88 <memcpy+0x74>
    2b24:	00300793          	li	a5,3
    2b28:	06c7f063          	bgeu	a5,a2,2b88 <memcpy+0x74>
    2b2c:	00357793          	andi	a5,a0,3
    2b30:	00050713          	mv	a4,a0
    2b34:	06079a63          	bnez	a5,2ba8 <memcpy+0x94>
    2b38:	ffc8f613          	andi	a2,a7,-4
    2b3c:	40e606b3          	sub	a3,a2,a4
    2b40:	02000793          	li	a5,32
    2b44:	08d7ce63          	blt	a5,a3,2be0 <memcpy+0xcc>
    2b48:	00058693          	mv	a3,a1
    2b4c:	00070793          	mv	a5,a4
    2b50:	02c77863          	bgeu	a4,a2,2b80 <memcpy+0x6c>
    2b54:	0006a803          	lw	a6,0(a3)
    2b58:	00478793          	addi	a5,a5,4
    2b5c:	00468693          	addi	a3,a3,4
    2b60:	ff07ae23          	sw	a6,-4(a5)
    2b64:	fec7e8e3          	bltu	a5,a2,2b54 <memcpy+0x40>
    2b68:	fff60793          	addi	a5,a2,-1
    2b6c:	40e787b3          	sub	a5,a5,a4
    2b70:	ffc7f793          	andi	a5,a5,-4
    2b74:	00478793          	addi	a5,a5,4
    2b78:	00f70733          	add	a4,a4,a5
    2b7c:	00f585b3          	add	a1,a1,a5
    2b80:	01176863          	bltu	a4,a7,2b90 <memcpy+0x7c>
    2b84:	00008067          	ret
    2b88:	00050713          	mv	a4,a0
    2b8c:	05157863          	bgeu	a0,a7,2bdc <memcpy+0xc8>
    2b90:	0005c783          	lbu	a5,0(a1)
    2b94:	00170713          	addi	a4,a4,1
    2b98:	00158593          	addi	a1,a1,1
    2b9c:	fef70fa3          	sb	a5,-1(a4)
    2ba0:	fee898e3          	bne	a7,a4,2b90 <memcpy+0x7c>
    2ba4:	00008067          	ret
    2ba8:	0005c683          	lbu	a3,0(a1)
    2bac:	00170713          	addi	a4,a4,1
    2bb0:	00377793          	andi	a5,a4,3
    2bb4:	fed70fa3          	sb	a3,-1(a4)
    2bb8:	00158593          	addi	a1,a1,1
    2bbc:	f6078ee3          	beqz	a5,2b38 <memcpy+0x24>
    2bc0:	0005c683          	lbu	a3,0(a1)
    2bc4:	00170713          	addi	a4,a4,1
    2bc8:	00377793          	andi	a5,a4,3
    2bcc:	fed70fa3          	sb	a3,-1(a4)
    2bd0:	00158593          	addi	a1,a1,1
    2bd4:	fc079ae3          	bnez	a5,2ba8 <memcpy+0x94>
    2bd8:	f61ff06f          	j	2b38 <memcpy+0x24>
    2bdc:	00008067          	ret
    2be0:	ff010113          	addi	sp,sp,-16
    2be4:	00812623          	sw	s0,12(sp)
    2be8:	02000413          	li	s0,32
    2bec:	0005a383          	lw	t2,0(a1)
    2bf0:	0045a283          	lw	t0,4(a1)
    2bf4:	0085af83          	lw	t6,8(a1)
    2bf8:	00c5af03          	lw	t5,12(a1)
    2bfc:	0105ae83          	lw	t4,16(a1)
    2c00:	0145ae03          	lw	t3,20(a1)
    2c04:	0185a303          	lw	t1,24(a1)
    2c08:	01c5a803          	lw	a6,28(a1)
    2c0c:	0205a683          	lw	a3,32(a1)
    2c10:	02470713          	addi	a4,a4,36
    2c14:	40e607b3          	sub	a5,a2,a4
    2c18:	fc772e23          	sw	t2,-36(a4)
    2c1c:	fe572023          	sw	t0,-32(a4)
    2c20:	fff72223          	sw	t6,-28(a4)
    2c24:	ffe72423          	sw	t5,-24(a4)
    2c28:	ffd72623          	sw	t4,-20(a4)
    2c2c:	ffc72823          	sw	t3,-16(a4)
    2c30:	fe672a23          	sw	t1,-12(a4)
    2c34:	ff072c23          	sw	a6,-8(a4)
    2c38:	fed72e23          	sw	a3,-4(a4)
    2c3c:	02458593          	addi	a1,a1,36
    2c40:	faf446e3          	blt	s0,a5,2bec <memcpy+0xd8>
    2c44:	00058693          	mv	a3,a1
    2c48:	00070793          	mv	a5,a4
    2c4c:	02c77863          	bgeu	a4,a2,2c7c <memcpy+0x168>
    2c50:	0006a803          	lw	a6,0(a3)
    2c54:	00478793          	addi	a5,a5,4
    2c58:	00468693          	addi	a3,a3,4
    2c5c:	ff07ae23          	sw	a6,-4(a5)
    2c60:	fec7e8e3          	bltu	a5,a2,2c50 <memcpy+0x13c>
    2c64:	fff60793          	addi	a5,a2,-1
    2c68:	40e787b3          	sub	a5,a5,a4
    2c6c:	ffc7f793          	andi	a5,a5,-4
    2c70:	00478793          	addi	a5,a5,4
    2c74:	00f70733          	add	a4,a4,a5
    2c78:	00f585b3          	add	a1,a1,a5
    2c7c:	01176863          	bltu	a4,a7,2c8c <memcpy+0x178>
    2c80:	00c12403          	lw	s0,12(sp)
    2c84:	01010113          	addi	sp,sp,16
    2c88:	00008067          	ret
    2c8c:	0005c783          	lbu	a5,0(a1)
    2c90:	00170713          	addi	a4,a4,1
    2c94:	00158593          	addi	a1,a1,1
    2c98:	fef70fa3          	sb	a5,-1(a4)
    2c9c:	fee882e3          	beq	a7,a4,2c80 <memcpy+0x16c>
    2ca0:	0005c783          	lbu	a5,0(a1)
    2ca4:	00170713          	addi	a4,a4,1
    2ca8:	00158593          	addi	a1,a1,1
    2cac:	fef70fa3          	sb	a5,-1(a4)
    2cb0:	fce89ee3          	bne	a7,a4,2c8c <memcpy+0x178>
    2cb4:	fcdff06f          	j	2c80 <memcpy+0x16c>

00002cb8 <_puts_r>:
    2cb8:	fd010113          	addi	sp,sp,-48
    2cbc:	02812423          	sw	s0,40(sp)
    2cc0:	00050413          	mv	s0,a0
    2cc4:	00058513          	mv	a0,a1
    2cc8:	02912223          	sw	s1,36(sp)
    2ccc:	02112623          	sw	ra,44(sp)
    2cd0:	00058493          	mv	s1,a1
    2cd4:	38c000ef          	jal	ra,3060 <strlen>
    2cd8:	00150713          	addi	a4,a0,1
    2cdc:	00005697          	auipc	a3,0x5
    2ce0:	c2468693          	addi	a3,a3,-988 # 7900 <__fini_array_end+0x318>
    2ce4:	00e12623          	sw	a4,12(sp)
    2ce8:	03842783          	lw	a5,56(s0)
    2cec:	01010713          	addi	a4,sp,16
    2cf0:	00d12c23          	sw	a3,24(sp)
    2cf4:	00e12223          	sw	a4,4(sp)
    2cf8:	00100693          	li	a3,1
    2cfc:	00200713          	li	a4,2
    2d00:	00912823          	sw	s1,16(sp)
    2d04:	00a12a23          	sw	a0,20(sp)
    2d08:	00d12e23          	sw	a3,28(sp)
    2d0c:	00e12423          	sw	a4,8(sp)
    2d10:	00842483          	lw	s1,8(s0)
    2d14:	08078a63          	beqz	a5,2da8 <_puts_r+0xf0>
    2d18:	0644a703          	lw	a4,100(s1)
    2d1c:	00c49783          	lh	a5,12(s1)
    2d20:	00177713          	andi	a4,a4,1
    2d24:	00071663          	bnez	a4,2d30 <_puts_r+0x78>
    2d28:	2007f713          	andi	a4,a5,512
    2d2c:	0a070463          	beqz	a4,2dd4 <_puts_r+0x11c>
    2d30:	01279713          	slli	a4,a5,0x12
    2d34:	02074263          	bltz	a4,2d58 <_puts_r+0xa0>
    2d38:	0644a703          	lw	a4,100(s1)
    2d3c:	000026b7          	lui	a3,0x2
    2d40:	00d7e7b3          	or	a5,a5,a3
    2d44:	ffffe6b7          	lui	a3,0xffffe
    2d48:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffedfff>
    2d4c:	00d77733          	and	a4,a4,a3
    2d50:	00f49623          	sh	a5,12(s1)
    2d54:	06e4a223          	sw	a4,100(s1)
    2d58:	00040513          	mv	a0,s0
    2d5c:	00410613          	addi	a2,sp,4
    2d60:	00048593          	mv	a1,s1
    2d64:	028010ef          	jal	ra,3d8c <__sfvwrite_r>
    2d68:	0644a783          	lw	a5,100(s1)
    2d6c:	00153413          	seqz	s0,a0
    2d70:	40800433          	neg	s0,s0
    2d74:	00b47413          	andi	s0,s0,11
    2d78:	0017f793          	andi	a5,a5,1
    2d7c:	fff40413          	addi	s0,s0,-1
    2d80:	00079863          	bnez	a5,2d90 <_puts_r+0xd8>
    2d84:	00c4d783          	lhu	a5,12(s1)
    2d88:	2007f793          	andi	a5,a5,512
    2d8c:	02078463          	beqz	a5,2db4 <_puts_r+0xfc>
    2d90:	02c12083          	lw	ra,44(sp)
    2d94:	00040513          	mv	a0,s0
    2d98:	02812403          	lw	s0,40(sp)
    2d9c:	02412483          	lw	s1,36(sp)
    2da0:	03010113          	addi	sp,sp,48
    2da4:	00008067          	ret
    2da8:	00040513          	mv	a0,s0
    2dac:	7ac000ef          	jal	ra,3558 <__sinit>
    2db0:	f69ff06f          	j	2d18 <_puts_r+0x60>
    2db4:	0584a503          	lw	a0,88(s1)
    2db8:	5f4010ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    2dbc:	02c12083          	lw	ra,44(sp)
    2dc0:	00040513          	mv	a0,s0
    2dc4:	02812403          	lw	s0,40(sp)
    2dc8:	02412483          	lw	s1,36(sp)
    2dcc:	03010113          	addi	sp,sp,48
    2dd0:	00008067          	ret
    2dd4:	0584a503          	lw	a0,88(s1)
    2dd8:	5bc010ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    2ddc:	00c49783          	lh	a5,12(s1)
    2de0:	f51ff06f          	j	2d30 <_puts_r+0x78>

00002de4 <puts>:
    2de4:	00050593          	mv	a1,a0
    2de8:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    2dec:	ecdff06f          	j	2cb8 <_puts_r>

00002df0 <cleanup_glue>:
    2df0:	fe010113          	addi	sp,sp,-32
    2df4:	01212823          	sw	s2,16(sp)
    2df8:	0005a903          	lw	s2,0(a1)
    2dfc:	00812c23          	sw	s0,24(sp)
    2e00:	00912a23          	sw	s1,20(sp)
    2e04:	00112e23          	sw	ra,28(sp)
    2e08:	01312623          	sw	s3,12(sp)
    2e0c:	01412423          	sw	s4,8(sp)
    2e10:	00058413          	mv	s0,a1
    2e14:	00050493          	mv	s1,a0
    2e18:	04090263          	beqz	s2,2e5c <cleanup_glue+0x6c>
    2e1c:	00092983          	lw	s3,0(s2)
    2e20:	02098863          	beqz	s3,2e50 <cleanup_glue+0x60>
    2e24:	0009aa03          	lw	s4,0(s3)
    2e28:	000a0e63          	beqz	s4,2e44 <cleanup_glue+0x54>
    2e2c:	000a2583          	lw	a1,0(s4)
    2e30:	00058463          	beqz	a1,2e38 <cleanup_glue+0x48>
    2e34:	fbdff0ef          	jal	ra,2df0 <cleanup_glue>
    2e38:	000a0593          	mv	a1,s4
    2e3c:	00048513          	mv	a0,s1
    2e40:	445000ef          	jal	ra,3a84 <_free_r>
    2e44:	00098593          	mv	a1,s3
    2e48:	00048513          	mv	a0,s1
    2e4c:	439000ef          	jal	ra,3a84 <_free_r>
    2e50:	00090593          	mv	a1,s2
    2e54:	00048513          	mv	a0,s1
    2e58:	42d000ef          	jal	ra,3a84 <_free_r>
    2e5c:	00040593          	mv	a1,s0
    2e60:	01812403          	lw	s0,24(sp)
    2e64:	01c12083          	lw	ra,28(sp)
    2e68:	01012903          	lw	s2,16(sp)
    2e6c:	00c12983          	lw	s3,12(sp)
    2e70:	00812a03          	lw	s4,8(sp)
    2e74:	00048513          	mv	a0,s1
    2e78:	01412483          	lw	s1,20(sp)
    2e7c:	02010113          	addi	sp,sp,32
    2e80:	4050006f          	j	3a84 <_free_r>

00002e84 <_reclaim_reent>:
    2e84:	8241a783          	lw	a5,-2012(gp) # 94fc <_impure_ptr>
    2e88:	10a78a63          	beq	a5,a0,2f9c <_reclaim_reent+0x118>
    2e8c:	04c52583          	lw	a1,76(a0)
    2e90:	fe010113          	addi	sp,sp,-32
    2e94:	00912a23          	sw	s1,20(sp)
    2e98:	00112e23          	sw	ra,28(sp)
    2e9c:	00812c23          	sw	s0,24(sp)
    2ea0:	01212823          	sw	s2,16(sp)
    2ea4:	01312623          	sw	s3,12(sp)
    2ea8:	00050493          	mv	s1,a0
    2eac:	04058063          	beqz	a1,2eec <_reclaim_reent+0x68>
    2eb0:	00000913          	li	s2,0
    2eb4:	08000993          	li	s3,128
    2eb8:	012587b3          	add	a5,a1,s2
    2ebc:	0007a403          	lw	s0,0(a5)
    2ec0:	00040e63          	beqz	s0,2edc <_reclaim_reent+0x58>
    2ec4:	00040593          	mv	a1,s0
    2ec8:	00042403          	lw	s0,0(s0)
    2ecc:	00048513          	mv	a0,s1
    2ed0:	3b5000ef          	jal	ra,3a84 <_free_r>
    2ed4:	fe0418e3          	bnez	s0,2ec4 <_reclaim_reent+0x40>
    2ed8:	04c4a583          	lw	a1,76(s1)
    2edc:	00490913          	addi	s2,s2,4
    2ee0:	fd391ce3          	bne	s2,s3,2eb8 <_reclaim_reent+0x34>
    2ee4:	00048513          	mv	a0,s1
    2ee8:	39d000ef          	jal	ra,3a84 <_free_r>
    2eec:	0404a583          	lw	a1,64(s1)
    2ef0:	00058663          	beqz	a1,2efc <_reclaim_reent+0x78>
    2ef4:	00048513          	mv	a0,s1
    2ef8:	38d000ef          	jal	ra,3a84 <_free_r>
    2efc:	1484a403          	lw	s0,328(s1)
    2f00:	02040063          	beqz	s0,2f20 <_reclaim_reent+0x9c>
    2f04:	14c48913          	addi	s2,s1,332
    2f08:	01240c63          	beq	s0,s2,2f20 <_reclaim_reent+0x9c>
    2f0c:	00040593          	mv	a1,s0
    2f10:	00042403          	lw	s0,0(s0)
    2f14:	00048513          	mv	a0,s1
    2f18:	36d000ef          	jal	ra,3a84 <_free_r>
    2f1c:	fe8918e3          	bne	s2,s0,2f0c <_reclaim_reent+0x88>
    2f20:	0544a583          	lw	a1,84(s1)
    2f24:	00058663          	beqz	a1,2f30 <_reclaim_reent+0xac>
    2f28:	00048513          	mv	a0,s1
    2f2c:	359000ef          	jal	ra,3a84 <_free_r>
    2f30:	0384a783          	lw	a5,56(s1)
    2f34:	04078663          	beqz	a5,2f80 <_reclaim_reent+0xfc>
    2f38:	03c4a783          	lw	a5,60(s1)
    2f3c:	00048513          	mv	a0,s1
    2f40:	000780e7          	jalr	a5
    2f44:	2e04a403          	lw	s0,736(s1)
    2f48:	02040c63          	beqz	s0,2f80 <_reclaim_reent+0xfc>
    2f4c:	00042583          	lw	a1,0(s0)
    2f50:	00058663          	beqz	a1,2f5c <_reclaim_reent+0xd8>
    2f54:	00048513          	mv	a0,s1
    2f58:	e99ff0ef          	jal	ra,2df0 <cleanup_glue>
    2f5c:	00040593          	mv	a1,s0
    2f60:	01812403          	lw	s0,24(sp)
    2f64:	01c12083          	lw	ra,28(sp)
    2f68:	01012903          	lw	s2,16(sp)
    2f6c:	00c12983          	lw	s3,12(sp)
    2f70:	00048513          	mv	a0,s1
    2f74:	01412483          	lw	s1,20(sp)
    2f78:	02010113          	addi	sp,sp,32
    2f7c:	3090006f          	j	3a84 <_free_r>
    2f80:	01c12083          	lw	ra,28(sp)
    2f84:	01812403          	lw	s0,24(sp)
    2f88:	01412483          	lw	s1,20(sp)
    2f8c:	01012903          	lw	s2,16(sp)
    2f90:	00c12983          	lw	s3,12(sp)
    2f94:	02010113          	addi	sp,sp,32
    2f98:	00008067          	ret
    2f9c:	00008067          	ret

00002fa0 <__stack_chk_fail>:
    2fa0:	00005797          	auipc	a5,0x5
    2fa4:	96478793          	addi	a5,a5,-1692 # 7904 <__fini_array_end+0x31c>
    2fa8:	0007af83          	lw	t6,0(a5)
    2fac:	0047af03          	lw	t5,4(a5)
    2fb0:	0087ae83          	lw	t4,8(a5)
    2fb4:	00c7ae03          	lw	t3,12(a5)
    2fb8:	0107a303          	lw	t1,16(a5)
    2fbc:	0147a883          	lw	a7,20(a5)
    2fc0:	0187a803          	lw	a6,24(a5)
    2fc4:	0247a683          	lw	a3,36(a5)
    2fc8:	0287a703          	lw	a4,40(a5)
    2fcc:	01c7a583          	lw	a1,28(a5)
    2fd0:	0207a603          	lw	a2,32(a5)
    2fd4:	02c7c783          	lbu	a5,44(a5)
    2fd8:	fc010113          	addi	sp,sp,-64
    2fdc:	00010513          	mv	a0,sp
    2fe0:	02112e23          	sw	ra,60(sp)
    2fe4:	01f12023          	sw	t6,0(sp)
    2fe8:	01e12223          	sw	t5,4(sp)
    2fec:	01d12423          	sw	t4,8(sp)
    2ff0:	01c12623          	sw	t3,12(sp)
    2ff4:	00612823          	sw	t1,16(sp)
    2ff8:	01112a23          	sw	a7,20(sp)
    2ffc:	01012c23          	sw	a6,24(sp)
    3000:	02d12223          	sw	a3,36(sp)
    3004:	02e12423          	sw	a4,40(sp)
    3008:	02f10623          	sb	a5,44(sp)
    300c:	00b12e23          	sw	a1,28(sp)
    3010:	02c12023          	sw	a2,32(sp)
    3014:	04c000ef          	jal	ra,3060 <strlen>
    3018:	00050613          	mv	a2,a0
    301c:	00010593          	mv	a1,sp
    3020:	00200513          	li	a0,2
    3024:	11c000ef          	jal	ra,3140 <write>
    3028:	00600513          	li	a0,6
    302c:	69c020ef          	jal	ra,56c8 <raise>
    3030:	07f00513          	li	a0,127
    3034:	6bc030ef          	jal	ra,66f0 <_exit>

00003038 <__stack_chk_fail_local>:
    3038:	ff010113          	addi	sp,sp,-16
    303c:	00112623          	sw	ra,12(sp)
    3040:	f61ff0ef          	jal	ra,2fa0 <__stack_chk_fail>

00003044 <__stack_chk_init>:
    3044:	00008797          	auipc	a5,0x8
    3048:	02078793          	addi	a5,a5,32 # b064 <__stack_chk_guard>
    304c:	0007a703          	lw	a4,0(a5)
    3050:	00071663          	bnez	a4,305c <__stack_chk_init+0x18>
    3054:	ff0a0737          	lui	a4,0xff0a0
    3058:	00e7a023          	sw	a4,0(a5)
    305c:	00008067          	ret

00003060 <strlen>:
    3060:	00357793          	andi	a5,a0,3
    3064:	00050713          	mv	a4,a0
    3068:	04079c63          	bnez	a5,30c0 <strlen+0x60>
    306c:	7f7f86b7          	lui	a3,0x7f7f8
    3070:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7e7f7f>
    3074:	fff00593          	li	a1,-1
    3078:	00072603          	lw	a2,0(a4) # ff0a0000 <__alt_data_end+0xff090000>
    307c:	00470713          	addi	a4,a4,4
    3080:	00d677b3          	and	a5,a2,a3
    3084:	00d787b3          	add	a5,a5,a3
    3088:	00c7e7b3          	or	a5,a5,a2
    308c:	00d7e7b3          	or	a5,a5,a3
    3090:	feb784e3          	beq	a5,a1,3078 <strlen+0x18>
    3094:	ffc74683          	lbu	a3,-4(a4)
    3098:	40a707b3          	sub	a5,a4,a0
    309c:	04068463          	beqz	a3,30e4 <strlen+0x84>
    30a0:	ffd74683          	lbu	a3,-3(a4)
    30a4:	02068c63          	beqz	a3,30dc <strlen+0x7c>
    30a8:	ffe74503          	lbu	a0,-2(a4)
    30ac:	00a03533          	snez	a0,a0
    30b0:	00f50533          	add	a0,a0,a5
    30b4:	ffe50513          	addi	a0,a0,-2
    30b8:	00008067          	ret
    30bc:	fa0688e3          	beqz	a3,306c <strlen+0xc>
    30c0:	00074783          	lbu	a5,0(a4)
    30c4:	00170713          	addi	a4,a4,1
    30c8:	00377693          	andi	a3,a4,3
    30cc:	fe0798e3          	bnez	a5,30bc <strlen+0x5c>
    30d0:	40a70733          	sub	a4,a4,a0
    30d4:	fff70513          	addi	a0,a4,-1
    30d8:	00008067          	ret
    30dc:	ffd78513          	addi	a0,a5,-3
    30e0:	00008067          	ret
    30e4:	ffc78513          	addi	a0,a5,-4
    30e8:	00008067          	ret

000030ec <close>:
    30ec:	00050593          	mv	a1,a0
    30f0:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    30f4:	3000006f          	j	33f4 <_close_r>

000030f8 <open>:
    30f8:	fc010113          	addi	sp,sp,-64
    30fc:	02c12423          	sw	a2,40(sp)
    3100:	02d12623          	sw	a3,44(sp)
    3104:	02f12a23          	sw	a5,52(sp)
    3108:	00060693          	mv	a3,a2
    310c:	02810793          	addi	a5,sp,40
    3110:	00058613          	mv	a2,a1
    3114:	00050593          	mv	a1,a0
    3118:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    311c:	00112e23          	sw	ra,28(sp)
    3120:	02e12823          	sw	a4,48(sp)
    3124:	03012c23          	sw	a6,56(sp)
    3128:	03112e23          	sw	a7,60(sp)
    312c:	00f12623          	sw	a5,12(sp)
    3130:	4f5010ef          	jal	ra,4e24 <_open_r>
    3134:	01c12083          	lw	ra,28(sp)
    3138:	04010113          	addi	sp,sp,64
    313c:	00008067          	ret

00003140 <write>:
    3140:	00060693          	mv	a3,a2
    3144:	00058613          	mv	a2,a1
    3148:	00050593          	mv	a1,a0
    314c:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    3150:	0040006f          	j	3154 <_write_r>

00003154 <_write_r>:
    3154:	ff010113          	addi	sp,sp,-16
    3158:	00058713          	mv	a4,a1
    315c:	00812423          	sw	s0,8(sp)
    3160:	00060593          	mv	a1,a2
    3164:	00050413          	mv	s0,a0
    3168:	00068613          	mv	a2,a3
    316c:	00070513          	mv	a0,a4
    3170:	00008797          	auipc	a5,0x8
    3174:	ee07a823          	sw	zero,-272(a5) # b060 <errno>
    3178:	00112623          	sw	ra,12(sp)
    317c:	020040ef          	jal	ra,719c <_write>
    3180:	fff00793          	li	a5,-1
    3184:	00f50a63          	beq	a0,a5,3198 <_write_r+0x44>
    3188:	00c12083          	lw	ra,12(sp)
    318c:	00812403          	lw	s0,8(sp)
    3190:	01010113          	addi	sp,sp,16
    3194:	00008067          	ret
    3198:	00008797          	auipc	a5,0x8
    319c:	ec87a783          	lw	a5,-312(a5) # b060 <errno>
    31a0:	fe0784e3          	beqz	a5,3188 <_write_r+0x34>
    31a4:	00c12083          	lw	ra,12(sp)
    31a8:	00f42023          	sw	a5,0(s0)
    31ac:	00812403          	lw	s0,8(sp)
    31b0:	01010113          	addi	sp,sp,16
    31b4:	00008067          	ret

000031b8 <__register_exitproc>:
    31b8:	fe010113          	addi	sp,sp,-32
    31bc:	01212823          	sw	s2,16(sp)
    31c0:	82818913          	addi	s2,gp,-2008 # 9500 <__atexit_recursive_mutex>
    31c4:	00812c23          	sw	s0,24(sp)
    31c8:	00050413          	mv	s0,a0
    31cc:	00092503          	lw	a0,0(s2)
    31d0:	00912a23          	sw	s1,20(sp)
    31d4:	01312623          	sw	s3,12(sp)
    31d8:	01412423          	sw	s4,8(sp)
    31dc:	00112e23          	sw	ra,28(sp)
    31e0:	00058493          	mv	s1,a1
    31e4:	00060a13          	mv	s4,a2
    31e8:	00068993          	mv	s3,a3
    31ec:	1a8010ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    31f0:	00005717          	auipc	a4,0x5
    31f4:	81072703          	lw	a4,-2032(a4) # 7a00 <_global_impure_ptr>
    31f8:	14872783          	lw	a5,328(a4)
    31fc:	08078663          	beqz	a5,3288 <__register_exitproc+0xd0>
    3200:	0047a703          	lw	a4,4(a5)
    3204:	01f00593          	li	a1,31
    3208:	00092503          	lw	a0,0(s2)
    320c:	08e5c463          	blt	a1,a4,3294 <__register_exitproc+0xdc>
    3210:	00271593          	slli	a1,a4,0x2
    3214:	02041e63          	bnez	s0,3250 <__register_exitproc+0x98>
    3218:	00170713          	addi	a4,a4,1
    321c:	00e7a223          	sw	a4,4(a5)
    3220:	00b787b3          	add	a5,a5,a1
    3224:	0097a423          	sw	s1,8(a5)
    3228:	184010ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    322c:	00000513          	li	a0,0
    3230:	01c12083          	lw	ra,28(sp)
    3234:	01812403          	lw	s0,24(sp)
    3238:	01412483          	lw	s1,20(sp)
    323c:	01012903          	lw	s2,16(sp)
    3240:	00c12983          	lw	s3,12(sp)
    3244:	00812a03          	lw	s4,8(sp)
    3248:	02010113          	addi	sp,sp,32
    324c:	00008067          	ret
    3250:	00b78833          	add	a6,a5,a1
    3254:	09482423          	sw	s4,136(a6)
    3258:	1887a683          	lw	a3,392(a5)
    325c:	00100613          	li	a2,1
    3260:	00e61633          	sll	a2,a2,a4
    3264:	00c6e6b3          	or	a3,a3,a2
    3268:	18d7a423          	sw	a3,392(a5)
    326c:	11382423          	sw	s3,264(a6)
    3270:	00200693          	li	a3,2
    3274:	fad412e3          	bne	s0,a3,3218 <__register_exitproc+0x60>
    3278:	18c7a683          	lw	a3,396(a5)
    327c:	00c6e6b3          	or	a3,a3,a2
    3280:	18d7a623          	sw	a3,396(a5)
    3284:	f95ff06f          	j	3218 <__register_exitproc+0x60>
    3288:	14c70793          	addi	a5,a4,332
    328c:	14f72423          	sw	a5,328(a4)
    3290:	f71ff06f          	j	3200 <__register_exitproc+0x48>
    3294:	118010ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    3298:	fff00513          	li	a0,-1
    329c:	f95ff06f          	j	3230 <__register_exitproc+0x78>

000032a0 <__call_exitprocs>:
    32a0:	fd010113          	addi	sp,sp,-48
    32a4:	01712623          	sw	s7,12(sp)
    32a8:	82818b93          	addi	s7,gp,-2008 # 9500 <__atexit_recursive_mutex>
    32ac:	01612823          	sw	s6,16(sp)
    32b0:	00050b13          	mv	s6,a0
    32b4:	000ba503          	lw	a0,0(s7)
    32b8:	03212023          	sw	s2,32(sp)
    32bc:	01312e23          	sw	s3,28(sp)
    32c0:	01412c23          	sw	s4,24(sp)
    32c4:	01512a23          	sw	s5,20(sp)
    32c8:	01812423          	sw	s8,8(sp)
    32cc:	02112623          	sw	ra,44(sp)
    32d0:	02812423          	sw	s0,40(sp)
    32d4:	02912223          	sw	s1,36(sp)
    32d8:	01912223          	sw	s9,4(sp)
    32dc:	00058c13          	mv	s8,a1
    32e0:	0b4010ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    32e4:	00004a17          	auipc	s4,0x4
    32e8:	71ca2a03          	lw	s4,1820(s4) # 7a00 <_global_impure_ptr>
    32ec:	148a2903          	lw	s2,328(s4)
    32f0:	00100a93          	li	s5,1
    32f4:	fff00993          	li	s3,-1
    32f8:	02090863          	beqz	s2,3328 <__call_exitprocs+0x88>
    32fc:	00492483          	lw	s1,4(s2)
    3300:	fff48413          	addi	s0,s1,-1
    3304:	02044263          	bltz	s0,3328 <__call_exitprocs+0x88>
    3308:	00249493          	slli	s1,s1,0x2
    330c:	009904b3          	add	s1,s2,s1
    3310:	040c0863          	beqz	s8,3360 <__call_exitprocs+0xc0>
    3314:	1044a783          	lw	a5,260(s1)
    3318:	05878463          	beq	a5,s8,3360 <__call_exitprocs+0xc0>
    331c:	fff40413          	addi	s0,s0,-1
    3320:	ffc48493          	addi	s1,s1,-4
    3324:	ff3416e3          	bne	s0,s3,3310 <__call_exitprocs+0x70>
    3328:	02812403          	lw	s0,40(sp)
    332c:	000ba503          	lw	a0,0(s7)
    3330:	02c12083          	lw	ra,44(sp)
    3334:	02412483          	lw	s1,36(sp)
    3338:	02012903          	lw	s2,32(sp)
    333c:	01c12983          	lw	s3,28(sp)
    3340:	01812a03          	lw	s4,24(sp)
    3344:	01412a83          	lw	s5,20(sp)
    3348:	01012b03          	lw	s6,16(sp)
    334c:	00c12b83          	lw	s7,12(sp)
    3350:	00812c03          	lw	s8,8(sp)
    3354:	00412c83          	lw	s9,4(sp)
    3358:	03010113          	addi	sp,sp,48
    335c:	0500106f          	j	43ac <__retarget_lock_release_recursive>
    3360:	00492783          	lw	a5,4(s2)
    3364:	0044a683          	lw	a3,4(s1)
    3368:	fff78793          	addi	a5,a5,-1
    336c:	04878e63          	beq	a5,s0,33c8 <__call_exitprocs+0x128>
    3370:	0004a223          	sw	zero,4(s1)
    3374:	fa0684e3          	beqz	a3,331c <__call_exitprocs+0x7c>
    3378:	18892783          	lw	a5,392(s2)
    337c:	008a9733          	sll	a4,s5,s0
    3380:	00492c83          	lw	s9,4(s2)
    3384:	00f777b3          	and	a5,a4,a5
    3388:	02079263          	bnez	a5,33ac <__call_exitprocs+0x10c>
    338c:	000680e7          	jalr	a3
    3390:	00492703          	lw	a4,4(s2)
    3394:	148a2783          	lw	a5,328(s4)
    3398:	01971463          	bne	a4,s9,33a0 <__call_exitprocs+0x100>
    339c:	f92780e3          	beq	a5,s2,331c <__call_exitprocs+0x7c>
    33a0:	f80784e3          	beqz	a5,3328 <__call_exitprocs+0x88>
    33a4:	00078913          	mv	s2,a5
    33a8:	f55ff06f          	j	32fc <__call_exitprocs+0x5c>
    33ac:	18c92783          	lw	a5,396(s2)
    33b0:	0844a583          	lw	a1,132(s1)
    33b4:	00f77733          	and	a4,a4,a5
    33b8:	00071c63          	bnez	a4,33d0 <__call_exitprocs+0x130>
    33bc:	000b0513          	mv	a0,s6
    33c0:	000680e7          	jalr	a3
    33c4:	fcdff06f          	j	3390 <__call_exitprocs+0xf0>
    33c8:	00892223          	sw	s0,4(s2)
    33cc:	fa9ff06f          	j	3374 <__call_exitprocs+0xd4>
    33d0:	00058513          	mv	a0,a1
    33d4:	000680e7          	jalr	a3
    33d8:	fb9ff06f          	j	3390 <__call_exitprocs+0xf0>

000033dc <register_fini>:
    33dc:	00000793          	li	a5,0
    33e0:	00078863          	beqz	a5,33f0 <register_fini+0x14>
    33e4:	00000517          	auipc	a0,0x0
    33e8:	50850513          	addi	a0,a0,1288 # 38ec <__libc_fini_array>
    33ec:	ee0ff06f          	j	2acc <atexit>
    33f0:	00008067          	ret

000033f4 <_close_r>:
    33f4:	ff010113          	addi	sp,sp,-16
    33f8:	00812423          	sw	s0,8(sp)
    33fc:	00050413          	mv	s0,a0
    3400:	00058513          	mv	a0,a1
    3404:	00008797          	auipc	a5,0x8
    3408:	c407ae23          	sw	zero,-932(a5) # b060 <errno>
    340c:	00112623          	sw	ra,12(sp)
    3410:	200030ef          	jal	ra,6610 <_close>
    3414:	fff00793          	li	a5,-1
    3418:	00f50a63          	beq	a0,a5,342c <_close_r+0x38>
    341c:	00c12083          	lw	ra,12(sp)
    3420:	00812403          	lw	s0,8(sp)
    3424:	01010113          	addi	sp,sp,16
    3428:	00008067          	ret
    342c:	00008797          	auipc	a5,0x8
    3430:	c347a783          	lw	a5,-972(a5) # b060 <errno>
    3434:	fe0784e3          	beqz	a5,341c <_close_r+0x28>
    3438:	00c12083          	lw	ra,12(sp)
    343c:	00f42023          	sw	a5,0(s0)
    3440:	00812403          	lw	s0,8(sp)
    3444:	01010113          	addi	sp,sp,16
    3448:	00008067          	ret

0000344c <_cleanup_r>:
    344c:	00003597          	auipc	a1,0x3
    3450:	81858593          	addi	a1,a1,-2024 # 5c64 <_fclose_r>
    3454:	6790006f          	j	42cc <_fwalk_reent>

00003458 <__fp_lock>:
    3458:	06452783          	lw	a5,100(a0)
    345c:	0017f793          	andi	a5,a5,1
    3460:	00079863          	bnez	a5,3470 <__fp_lock+0x18>
    3464:	00c55783          	lhu	a5,12(a0)
    3468:	2007f793          	andi	a5,a5,512
    346c:	00078663          	beqz	a5,3478 <__fp_lock+0x20>
    3470:	00000513          	li	a0,0
    3474:	00008067          	ret
    3478:	05852503          	lw	a0,88(a0)
    347c:	ff010113          	addi	sp,sp,-16
    3480:	00112623          	sw	ra,12(sp)
    3484:	711000ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    3488:	00c12083          	lw	ra,12(sp)
    348c:	00000513          	li	a0,0
    3490:	01010113          	addi	sp,sp,16
    3494:	00008067          	ret

00003498 <__fp_unlock>:
    3498:	06452783          	lw	a5,100(a0)
    349c:	0017f793          	andi	a5,a5,1
    34a0:	00079863          	bnez	a5,34b0 <__fp_unlock+0x18>
    34a4:	00c55783          	lhu	a5,12(a0)
    34a8:	2007f793          	andi	a5,a5,512
    34ac:	00078663          	beqz	a5,34b8 <__fp_unlock+0x20>
    34b0:	00000513          	li	a0,0
    34b4:	00008067          	ret
    34b8:	05852503          	lw	a0,88(a0)
    34bc:	ff010113          	addi	sp,sp,-16
    34c0:	00112623          	sw	ra,12(sp)
    34c4:	6e9000ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    34c8:	00c12083          	lw	ra,12(sp)
    34cc:	00000513          	li	a0,0
    34d0:	01010113          	addi	sp,sp,16
    34d4:	00008067          	ret

000034d8 <__sfmoreglue>:
    34d8:	ff010113          	addi	sp,sp,-16
    34dc:	00912223          	sw	s1,4(sp)
    34e0:	06800793          	li	a5,104
    34e4:	fff58493          	addi	s1,a1,-1
    34e8:	02f484b3          	mul	s1,s1,a5
    34ec:	01212023          	sw	s2,0(sp)
    34f0:	00058913          	mv	s2,a1
    34f4:	00812423          	sw	s0,8(sp)
    34f8:	00112623          	sw	ra,12(sp)
    34fc:	07448593          	addi	a1,s1,116
    3500:	6b1000ef          	jal	ra,43b0 <_malloc_r>
    3504:	00050413          	mv	s0,a0
    3508:	02050063          	beqz	a0,3528 <__sfmoreglue+0x50>
    350c:	00c50513          	addi	a0,a0,12
    3510:	00042023          	sw	zero,0(s0)
    3514:	01242223          	sw	s2,4(s0)
    3518:	00a42423          	sw	a0,8(s0)
    351c:	06848613          	addi	a2,s1,104
    3520:	00000593          	li	a1,0
    3524:	00d010ef          	jal	ra,4d30 <memset>
    3528:	00c12083          	lw	ra,12(sp)
    352c:	00040513          	mv	a0,s0
    3530:	00812403          	lw	s0,8(sp)
    3534:	00412483          	lw	s1,4(sp)
    3538:	00012903          	lw	s2,0(sp)
    353c:	01010113          	addi	sp,sp,16
    3540:	00008067          	ret

00003544 <_cleanup>:
    3544:	00002597          	auipc	a1,0x2
    3548:	72058593          	addi	a1,a1,1824 # 5c64 <_fclose_r>
    354c:	00004517          	auipc	a0,0x4
    3550:	4b452503          	lw	a0,1204(a0) # 7a00 <_global_impure_ptr>
    3554:	5790006f          	j	42cc <_fwalk_reent>

00003558 <__sinit>:
    3558:	fe010113          	addi	sp,sp,-32
    355c:	00912a23          	sw	s1,20(sp)
    3560:	00050493          	mv	s1,a0
    3564:	00008517          	auipc	a0,0x8
    3568:	b2450513          	addi	a0,a0,-1244 # b088 <__lock___sinit_recursive_mutex>
    356c:	00112e23          	sw	ra,28(sp)
    3570:	00812c23          	sw	s0,24(sp)
    3574:	01212823          	sw	s2,16(sp)
    3578:	01312623          	sw	s3,12(sp)
    357c:	01412423          	sw	s4,8(sp)
    3580:	01512223          	sw	s5,4(sp)
    3584:	611000ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    3588:	0384a783          	lw	a5,56(s1)
    358c:	14079863          	bnez	a5,36dc <__sinit+0x184>
    3590:	0044a403          	lw	s0,4(s1)
    3594:	00000717          	auipc	a4,0x0
    3598:	eb870713          	addi	a4,a4,-328 # 344c <_cleanup_r>
    359c:	02e4ae23          	sw	a4,60(s1)
    35a0:	2ec48793          	addi	a5,s1,748
    35a4:	00300713          	li	a4,3
    35a8:	2ee4a223          	sw	a4,740(s1)
    35ac:	2ef4a423          	sw	a5,744(s1)
    35b0:	2e04a023          	sw	zero,736(s1)
    35b4:	00400793          	li	a5,4
    35b8:	00f42623          	sw	a5,12(s0)
    35bc:	00800613          	li	a2,8
    35c0:	00000593          	li	a1,0
    35c4:	00042023          	sw	zero,0(s0)
    35c8:	00042223          	sw	zero,4(s0)
    35cc:	00042423          	sw	zero,8(s0)
    35d0:	06042223          	sw	zero,100(s0)
    35d4:	00042823          	sw	zero,16(s0)
    35d8:	00042a23          	sw	zero,20(s0)
    35dc:	00042c23          	sw	zero,24(s0)
    35e0:	05c40513          	addi	a0,s0,92
    35e4:	74c010ef          	jal	ra,4d30 <memset>
    35e8:	00002a97          	auipc	s5,0x2
    35ec:	3d0a8a93          	addi	s5,s5,976 # 59b8 <__sread>
    35f0:	00002a17          	auipc	s4,0x2
    35f4:	42ca0a13          	addi	s4,s4,1068 # 5a1c <__swrite>
    35f8:	00002997          	auipc	s3,0x2
    35fc:	4ac98993          	addi	s3,s3,1196 # 5aa4 <__sseek>
    3600:	00002917          	auipc	s2,0x2
    3604:	51c90913          	addi	s2,s2,1308 # 5b1c <__sclose>
    3608:	05840513          	addi	a0,s0,88
    360c:	00842e23          	sw	s0,28(s0)
    3610:	03542023          	sw	s5,32(s0)
    3614:	03442223          	sw	s4,36(s0)
    3618:	03342423          	sw	s3,40(s0)
    361c:	03242623          	sw	s2,44(s0)
    3620:	565000ef          	jal	ra,4384 <__retarget_lock_init_recursive>
    3624:	0084a403          	lw	s0,8(s1)
    3628:	000107b7          	lui	a5,0x10
    362c:	00878793          	addi	a5,a5,8 # 10008 <__alt_data_end+0x8>
    3630:	00f42623          	sw	a5,12(s0)
    3634:	00800613          	li	a2,8
    3638:	00000593          	li	a1,0
    363c:	00042023          	sw	zero,0(s0)
    3640:	00042223          	sw	zero,4(s0)
    3644:	00042423          	sw	zero,8(s0)
    3648:	06042223          	sw	zero,100(s0)
    364c:	00042823          	sw	zero,16(s0)
    3650:	00042a23          	sw	zero,20(s0)
    3654:	00042c23          	sw	zero,24(s0)
    3658:	05c40513          	addi	a0,s0,92
    365c:	6d4010ef          	jal	ra,4d30 <memset>
    3660:	05840513          	addi	a0,s0,88
    3664:	00842e23          	sw	s0,28(s0)
    3668:	03542023          	sw	s5,32(s0)
    366c:	03442223          	sw	s4,36(s0)
    3670:	03342423          	sw	s3,40(s0)
    3674:	03242623          	sw	s2,44(s0)
    3678:	50d000ef          	jal	ra,4384 <__retarget_lock_init_recursive>
    367c:	00c4a403          	lw	s0,12(s1)
    3680:	000207b7          	lui	a5,0x20
    3684:	01278793          	addi	a5,a5,18 # 20012 <__alt_data_end+0x10012>
    3688:	00f42623          	sw	a5,12(s0)
    368c:	00800613          	li	a2,8
    3690:	00000593          	li	a1,0
    3694:	00042023          	sw	zero,0(s0)
    3698:	00042223          	sw	zero,4(s0)
    369c:	00042423          	sw	zero,8(s0)
    36a0:	06042223          	sw	zero,100(s0)
    36a4:	00042823          	sw	zero,16(s0)
    36a8:	00042a23          	sw	zero,20(s0)
    36ac:	00042c23          	sw	zero,24(s0)
    36b0:	05c40513          	addi	a0,s0,92
    36b4:	67c010ef          	jal	ra,4d30 <memset>
    36b8:	05840513          	addi	a0,s0,88
    36bc:	00842e23          	sw	s0,28(s0)
    36c0:	03542023          	sw	s5,32(s0)
    36c4:	03442223          	sw	s4,36(s0)
    36c8:	03342423          	sw	s3,40(s0)
    36cc:	03242623          	sw	s2,44(s0)
    36d0:	4b5000ef          	jal	ra,4384 <__retarget_lock_init_recursive>
    36d4:	00100793          	li	a5,1
    36d8:	02f4ac23          	sw	a5,56(s1)
    36dc:	01812403          	lw	s0,24(sp)
    36e0:	01c12083          	lw	ra,28(sp)
    36e4:	01412483          	lw	s1,20(sp)
    36e8:	01012903          	lw	s2,16(sp)
    36ec:	00c12983          	lw	s3,12(sp)
    36f0:	00812a03          	lw	s4,8(sp)
    36f4:	00412a83          	lw	s5,4(sp)
    36f8:	00008517          	auipc	a0,0x8
    36fc:	99050513          	addi	a0,a0,-1648 # b088 <__lock___sinit_recursive_mutex>
    3700:	02010113          	addi	sp,sp,32
    3704:	4a90006f          	j	43ac <__retarget_lock_release_recursive>

00003708 <__sfp>:
    3708:	fe010113          	addi	sp,sp,-32
    370c:	01312623          	sw	s3,12(sp)
    3710:	00050993          	mv	s3,a0
    3714:	00008517          	auipc	a0,0x8
    3718:	97050513          	addi	a0,a0,-1680 # b084 <__lock___sfp_recursive_mutex>
    371c:	01212823          	sw	s2,16(sp)
    3720:	00112e23          	sw	ra,28(sp)
    3724:	00812c23          	sw	s0,24(sp)
    3728:	00912a23          	sw	s1,20(sp)
    372c:	469000ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    3730:	00004917          	auipc	s2,0x4
    3734:	2d092903          	lw	s2,720(s2) # 7a00 <_global_impure_ptr>
    3738:	03892783          	lw	a5,56(s2)
    373c:	0c078063          	beqz	a5,37fc <__sfp+0xf4>
    3740:	2e090913          	addi	s2,s2,736
    3744:	fff00493          	li	s1,-1
    3748:	00492783          	lw	a5,4(s2)
    374c:	00892403          	lw	s0,8(s2)
    3750:	fff78793          	addi	a5,a5,-1
    3754:	0007d863          	bgez	a5,3764 <__sfp+0x5c>
    3758:	0940006f          	j	37ec <__sfp+0xe4>
    375c:	06840413          	addi	s0,s0,104
    3760:	08978663          	beq	a5,s1,37ec <__sfp+0xe4>
    3764:	00c41703          	lh	a4,12(s0)
    3768:	fff78793          	addi	a5,a5,-1
    376c:	fe0718e3          	bnez	a4,375c <__sfp+0x54>
    3770:	ffff07b7          	lui	a5,0xffff0
    3774:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfffe0001>
    3778:	00f42623          	sw	a5,12(s0)
    377c:	05840513          	addi	a0,s0,88
    3780:	06042223          	sw	zero,100(s0)
    3784:	401000ef          	jal	ra,4384 <__retarget_lock_init_recursive>
    3788:	00008517          	auipc	a0,0x8
    378c:	8fc50513          	addi	a0,a0,-1796 # b084 <__lock___sfp_recursive_mutex>
    3790:	41d000ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    3794:	00800613          	li	a2,8
    3798:	00042023          	sw	zero,0(s0)
    379c:	00042423          	sw	zero,8(s0)
    37a0:	00042223          	sw	zero,4(s0)
    37a4:	00042823          	sw	zero,16(s0)
    37a8:	00042a23          	sw	zero,20(s0)
    37ac:	00042c23          	sw	zero,24(s0)
    37b0:	00000593          	li	a1,0
    37b4:	05c40513          	addi	a0,s0,92
    37b8:	578010ef          	jal	ra,4d30 <memset>
    37bc:	02042823          	sw	zero,48(s0)
    37c0:	02042a23          	sw	zero,52(s0)
    37c4:	04042223          	sw	zero,68(s0)
    37c8:	04042423          	sw	zero,72(s0)
    37cc:	01c12083          	lw	ra,28(sp)
    37d0:	00040513          	mv	a0,s0
    37d4:	01812403          	lw	s0,24(sp)
    37d8:	01412483          	lw	s1,20(sp)
    37dc:	01012903          	lw	s2,16(sp)
    37e0:	00c12983          	lw	s3,12(sp)
    37e4:	02010113          	addi	sp,sp,32
    37e8:	00008067          	ret
    37ec:	00092403          	lw	s0,0(s2)
    37f0:	00040c63          	beqz	s0,3808 <__sfp+0x100>
    37f4:	00040913          	mv	s2,s0
    37f8:	f51ff06f          	j	3748 <__sfp+0x40>
    37fc:	00090513          	mv	a0,s2
    3800:	d59ff0ef          	jal	ra,3558 <__sinit>
    3804:	f3dff06f          	j	3740 <__sfp+0x38>
    3808:	1ac00593          	li	a1,428
    380c:	00098513          	mv	a0,s3
    3810:	3a1000ef          	jal	ra,43b0 <_malloc_r>
    3814:	00050413          	mv	s0,a0
    3818:	02050863          	beqz	a0,3848 <__sfp+0x140>
    381c:	00c50513          	addi	a0,a0,12
    3820:	00400793          	li	a5,4
    3824:	00042023          	sw	zero,0(s0)
    3828:	00f42223          	sw	a5,4(s0)
    382c:	00a42423          	sw	a0,8(s0)
    3830:	1a000613          	li	a2,416
    3834:	00000593          	li	a1,0
    3838:	4f8010ef          	jal	ra,4d30 <memset>
    383c:	00892023          	sw	s0,0(s2)
    3840:	00040913          	mv	s2,s0
    3844:	f05ff06f          	j	3748 <__sfp+0x40>
    3848:	00092023          	sw	zero,0(s2)
    384c:	00008517          	auipc	a0,0x8
    3850:	83850513          	addi	a0,a0,-1992 # b084 <__lock___sfp_recursive_mutex>
    3854:	359000ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    3858:	00c00793          	li	a5,12
    385c:	00f9a023          	sw	a5,0(s3)
    3860:	f6dff06f          	j	37cc <__sfp+0xc4>

00003864 <__sfp_lock_acquire>:
    3864:	00008517          	auipc	a0,0x8
    3868:	82050513          	addi	a0,a0,-2016 # b084 <__lock___sfp_recursive_mutex>
    386c:	3290006f          	j	4394 <__retarget_lock_acquire_recursive>

00003870 <__sfp_lock_release>:
    3870:	00008517          	auipc	a0,0x8
    3874:	81450513          	addi	a0,a0,-2028 # b084 <__lock___sfp_recursive_mutex>
    3878:	3350006f          	j	43ac <__retarget_lock_release_recursive>

0000387c <__sinit_lock_acquire>:
    387c:	00008517          	auipc	a0,0x8
    3880:	80c50513          	addi	a0,a0,-2036 # b088 <__lock___sinit_recursive_mutex>
    3884:	3110006f          	j	4394 <__retarget_lock_acquire_recursive>

00003888 <__sinit_lock_release>:
    3888:	00008517          	auipc	a0,0x8
    388c:	80050513          	addi	a0,a0,-2048 # b088 <__lock___sinit_recursive_mutex>
    3890:	31d0006f          	j	43ac <__retarget_lock_release_recursive>

00003894 <__fp_lock_all>:
    3894:	ff010113          	addi	sp,sp,-16
    3898:	00007517          	auipc	a0,0x7
    389c:	7ec50513          	addi	a0,a0,2028 # b084 <__lock___sfp_recursive_mutex>
    38a0:	00112623          	sw	ra,12(sp)
    38a4:	2f1000ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    38a8:	00c12083          	lw	ra,12(sp)
    38ac:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    38b0:	00000597          	auipc	a1,0x0
    38b4:	ba858593          	addi	a1,a1,-1112 # 3458 <__fp_lock>
    38b8:	01010113          	addi	sp,sp,16
    38bc:	16d0006f          	j	4228 <_fwalk>

000038c0 <__fp_unlock_all>:
    38c0:	ff010113          	addi	sp,sp,-16
    38c4:	00000597          	auipc	a1,0x0
    38c8:	bd458593          	addi	a1,a1,-1068 # 3498 <__fp_unlock>
    38cc:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    38d0:	00112623          	sw	ra,12(sp)
    38d4:	155000ef          	jal	ra,4228 <_fwalk>
    38d8:	00c12083          	lw	ra,12(sp)
    38dc:	00007517          	auipc	a0,0x7
    38e0:	7a850513          	addi	a0,a0,1960 # b084 <__lock___sfp_recursive_mutex>
    38e4:	01010113          	addi	sp,sp,16
    38e8:	2c50006f          	j	43ac <__retarget_lock_release_recursive>

000038ec <__libc_fini_array>:
    38ec:	ff010113          	addi	sp,sp,-16
    38f0:	00812423          	sw	s0,8(sp)
    38f4:	00004797          	auipc	a5,0x4
    38f8:	cf478793          	addi	a5,a5,-780 # 75e8 <__fini_array_end>
    38fc:	00004417          	auipc	s0,0x4
    3900:	cec40413          	addi	s0,s0,-788 # 75e8 <__fini_array_end>
    3904:	40f40433          	sub	s0,s0,a5
    3908:	00912223          	sw	s1,4(sp)
    390c:	00112623          	sw	ra,12(sp)
    3910:	40245493          	srai	s1,s0,0x2
    3914:	02048063          	beqz	s1,3934 <__libc_fini_array+0x48>
    3918:	ffc40413          	addi	s0,s0,-4
    391c:	00f40433          	add	s0,s0,a5
    3920:	00042783          	lw	a5,0(s0)
    3924:	fff48493          	addi	s1,s1,-1
    3928:	ffc40413          	addi	s0,s0,-4
    392c:	000780e7          	jalr	a5
    3930:	fe0498e3          	bnez	s1,3920 <__libc_fini_array+0x34>
    3934:	00c12083          	lw	ra,12(sp)
    3938:	00812403          	lw	s0,8(sp)
    393c:	00412483          	lw	s1,4(sp)
    3940:	01010113          	addi	sp,sp,16
    3944:	00008067          	ret

00003948 <_malloc_trim_r>:
    3948:	fe010113          	addi	sp,sp,-32
    394c:	00812c23          	sw	s0,24(sp)
    3950:	00912a23          	sw	s1,20(sp)
    3954:	01212823          	sw	s2,16(sp)
    3958:	01312623          	sw	s3,12(sp)
    395c:	01412423          	sw	s4,8(sp)
    3960:	00058993          	mv	s3,a1
    3964:	00112e23          	sw	ra,28(sp)
    3968:	00005a17          	auipc	s4,0x5
    396c:	768a0a13          	addi	s4,s4,1896 # 90d0 <__malloc_av_>
    3970:	00050913          	mv	s2,a0
    3974:	498010ef          	jal	ra,4e0c <__malloc_lock>
    3978:	008a2703          	lw	a4,8(s4)
    397c:	000017b7          	lui	a5,0x1
    3980:	fef78413          	addi	s0,a5,-17 # fef <alt_main+0x73>
    3984:	00472483          	lw	s1,4(a4)
    3988:	ffc4f493          	andi	s1,s1,-4
    398c:	00848433          	add	s0,s1,s0
    3990:	41340433          	sub	s0,s0,s3
    3994:	00c45413          	srli	s0,s0,0xc
    3998:	fff40413          	addi	s0,s0,-1
    399c:	00c41413          	slli	s0,s0,0xc
    39a0:	00f44e63          	blt	s0,a5,39bc <_malloc_trim_r+0x74>
    39a4:	00000593          	li	a1,0
    39a8:	00090513          	mv	a0,s2
    39ac:	235010ef          	jal	ra,53e0 <_sbrk_r>
    39b0:	008a2783          	lw	a5,8(s4)
    39b4:	009787b3          	add	a5,a5,s1
    39b8:	02f50863          	beq	a0,a5,39e8 <_malloc_trim_r+0xa0>
    39bc:	00090513          	mv	a0,s2
    39c0:	458010ef          	jal	ra,4e18 <__malloc_unlock>
    39c4:	01c12083          	lw	ra,28(sp)
    39c8:	01812403          	lw	s0,24(sp)
    39cc:	01412483          	lw	s1,20(sp)
    39d0:	01012903          	lw	s2,16(sp)
    39d4:	00c12983          	lw	s3,12(sp)
    39d8:	00812a03          	lw	s4,8(sp)
    39dc:	00000513          	li	a0,0
    39e0:	02010113          	addi	sp,sp,32
    39e4:	00008067          	ret
    39e8:	408005b3          	neg	a1,s0
    39ec:	00090513          	mv	a0,s2
    39f0:	1f1010ef          	jal	ra,53e0 <_sbrk_r>
    39f4:	fff00793          	li	a5,-1
    39f8:	04f50a63          	beq	a0,a5,3a4c <_malloc_trim_r+0x104>
    39fc:	00007717          	auipc	a4,0x7
    3a00:	74c70713          	addi	a4,a4,1868 # b148 <__malloc_current_mallinfo>
    3a04:	00072783          	lw	a5,0(a4)
    3a08:	008a2683          	lw	a3,8(s4)
    3a0c:	408484b3          	sub	s1,s1,s0
    3a10:	0014e493          	ori	s1,s1,1
    3a14:	408787b3          	sub	a5,a5,s0
    3a18:	00090513          	mv	a0,s2
    3a1c:	0096a223          	sw	s1,4(a3)
    3a20:	00f72023          	sw	a5,0(a4)
    3a24:	3f4010ef          	jal	ra,4e18 <__malloc_unlock>
    3a28:	01c12083          	lw	ra,28(sp)
    3a2c:	01812403          	lw	s0,24(sp)
    3a30:	01412483          	lw	s1,20(sp)
    3a34:	01012903          	lw	s2,16(sp)
    3a38:	00c12983          	lw	s3,12(sp)
    3a3c:	00812a03          	lw	s4,8(sp)
    3a40:	00100513          	li	a0,1
    3a44:	02010113          	addi	sp,sp,32
    3a48:	00008067          	ret
    3a4c:	00000593          	li	a1,0
    3a50:	00090513          	mv	a0,s2
    3a54:	18d010ef          	jal	ra,53e0 <_sbrk_r>
    3a58:	008a2703          	lw	a4,8(s4)
    3a5c:	00f00693          	li	a3,15
    3a60:	40e507b3          	sub	a5,a0,a4
    3a64:	f4f6dce3          	bge	a3,a5,39bc <_malloc_trim_r+0x74>
    3a68:	82c1a683          	lw	a3,-2004(gp) # 9504 <__malloc_sbrk_base>
    3a6c:	40d50533          	sub	a0,a0,a3
    3a70:	0017e793          	ori	a5,a5,1
    3a74:	00007697          	auipc	a3,0x7
    3a78:	6ca6aa23          	sw	a0,1748(a3) # b148 <__malloc_current_mallinfo>
    3a7c:	00f72223          	sw	a5,4(a4)
    3a80:	f3dff06f          	j	39bc <_malloc_trim_r+0x74>

00003a84 <_free_r>:
    3a84:	18058263          	beqz	a1,3c08 <_free_r+0x184>
    3a88:	ff010113          	addi	sp,sp,-16
    3a8c:	00812423          	sw	s0,8(sp)
    3a90:	00912223          	sw	s1,4(sp)
    3a94:	00058413          	mv	s0,a1
    3a98:	00050493          	mv	s1,a0
    3a9c:	00112623          	sw	ra,12(sp)
    3aa0:	36c010ef          	jal	ra,4e0c <__malloc_lock>
    3aa4:	ffc42583          	lw	a1,-4(s0)
    3aa8:	ff840713          	addi	a4,s0,-8
    3aac:	00005517          	auipc	a0,0x5
    3ab0:	62450513          	addi	a0,a0,1572 # 90d0 <__malloc_av_>
    3ab4:	ffe5f793          	andi	a5,a1,-2
    3ab8:	00f70633          	add	a2,a4,a5
    3abc:	00462683          	lw	a3,4(a2)
    3ac0:	00852803          	lw	a6,8(a0)
    3ac4:	ffc6f693          	andi	a3,a3,-4
    3ac8:	1ac80263          	beq	a6,a2,3c6c <_free_r+0x1e8>
    3acc:	00d62223          	sw	a3,4(a2)
    3ad0:	0015f593          	andi	a1,a1,1
    3ad4:	00d60833          	add	a6,a2,a3
    3ad8:	0a059063          	bnez	a1,3b78 <_free_r+0xf4>
    3adc:	ff842303          	lw	t1,-8(s0)
    3ae0:	00482583          	lw	a1,4(a6)
    3ae4:	00005897          	auipc	a7,0x5
    3ae8:	5f488893          	addi	a7,a7,1524 # 90d8 <__malloc_av_+0x8>
    3aec:	40670733          	sub	a4,a4,t1
    3af0:	00872803          	lw	a6,8(a4)
    3af4:	006787b3          	add	a5,a5,t1
    3af8:	0015f593          	andi	a1,a1,1
    3afc:	15180263          	beq	a6,a7,3c40 <_free_r+0x1bc>
    3b00:	00c72303          	lw	t1,12(a4)
    3b04:	00682623          	sw	t1,12(a6)
    3b08:	01032423          	sw	a6,8(t1)
    3b0c:	1a058863          	beqz	a1,3cbc <_free_r+0x238>
    3b10:	0017e693          	ori	a3,a5,1
    3b14:	00d72223          	sw	a3,4(a4)
    3b18:	00f62023          	sw	a5,0(a2)
    3b1c:	1ff00693          	li	a3,511
    3b20:	06f6ec63          	bltu	a3,a5,3b98 <_free_r+0x114>
    3b24:	ff87f693          	andi	a3,a5,-8
    3b28:	00868693          	addi	a3,a3,8
    3b2c:	00452583          	lw	a1,4(a0)
    3b30:	00d506b3          	add	a3,a0,a3
    3b34:	0006a603          	lw	a2,0(a3)
    3b38:	0057d813          	srli	a6,a5,0x5
    3b3c:	00100793          	li	a5,1
    3b40:	010797b3          	sll	a5,a5,a6
    3b44:	00b7e7b3          	or	a5,a5,a1
    3b48:	ff868593          	addi	a1,a3,-8
    3b4c:	00b72623          	sw	a1,12(a4)
    3b50:	00c72423          	sw	a2,8(a4)
    3b54:	00f52223          	sw	a5,4(a0)
    3b58:	00e6a023          	sw	a4,0(a3)
    3b5c:	00e62623          	sw	a4,12(a2)
    3b60:	00812403          	lw	s0,8(sp)
    3b64:	00c12083          	lw	ra,12(sp)
    3b68:	00048513          	mv	a0,s1
    3b6c:	00412483          	lw	s1,4(sp)
    3b70:	01010113          	addi	sp,sp,16
    3b74:	2a40106f          	j	4e18 <__malloc_unlock>
    3b78:	00482583          	lw	a1,4(a6)
    3b7c:	0015f593          	andi	a1,a1,1
    3b80:	08058663          	beqz	a1,3c0c <_free_r+0x188>
    3b84:	0017e693          	ori	a3,a5,1
    3b88:	fed42e23          	sw	a3,-4(s0)
    3b8c:	00f62023          	sw	a5,0(a2)
    3b90:	1ff00693          	li	a3,511
    3b94:	f8f6f8e3          	bgeu	a3,a5,3b24 <_free_r+0xa0>
    3b98:	0097d693          	srli	a3,a5,0x9
    3b9c:	00400613          	li	a2,4
    3ba0:	12d66263          	bltu	a2,a3,3cc4 <_free_r+0x240>
    3ba4:	0067d693          	srli	a3,a5,0x6
    3ba8:	03968593          	addi	a1,a3,57
    3bac:	03868613          	addi	a2,a3,56
    3bb0:	00359593          	slli	a1,a1,0x3
    3bb4:	00b505b3          	add	a1,a0,a1
    3bb8:	0005a683          	lw	a3,0(a1)
    3bbc:	ff858593          	addi	a1,a1,-8
    3bc0:	00d59863          	bne	a1,a3,3bd0 <_free_r+0x14c>
    3bc4:	1580006f          	j	3d1c <_free_r+0x298>
    3bc8:	0086a683          	lw	a3,8(a3)
    3bcc:	00d58863          	beq	a1,a3,3bdc <_free_r+0x158>
    3bd0:	0046a603          	lw	a2,4(a3)
    3bd4:	ffc67613          	andi	a2,a2,-4
    3bd8:	fec7e8e3          	bltu	a5,a2,3bc8 <_free_r+0x144>
    3bdc:	00c6a583          	lw	a1,12(a3)
    3be0:	00b72623          	sw	a1,12(a4)
    3be4:	00d72423          	sw	a3,8(a4)
    3be8:	00812403          	lw	s0,8(sp)
    3bec:	00c12083          	lw	ra,12(sp)
    3bf0:	00e5a423          	sw	a4,8(a1)
    3bf4:	00048513          	mv	a0,s1
    3bf8:	00412483          	lw	s1,4(sp)
    3bfc:	00e6a623          	sw	a4,12(a3)
    3c00:	01010113          	addi	sp,sp,16
    3c04:	2140106f          	j	4e18 <__malloc_unlock>
    3c08:	00008067          	ret
    3c0c:	00d787b3          	add	a5,a5,a3
    3c10:	00005897          	auipc	a7,0x5
    3c14:	4c888893          	addi	a7,a7,1224 # 90d8 <__malloc_av_+0x8>
    3c18:	00862683          	lw	a3,8(a2)
    3c1c:	0d168e63          	beq	a3,a7,3cf8 <_free_r+0x274>
    3c20:	00c62803          	lw	a6,12(a2)
    3c24:	0017e593          	ori	a1,a5,1
    3c28:	00f70633          	add	a2,a4,a5
    3c2c:	0106a623          	sw	a6,12(a3)
    3c30:	00d82423          	sw	a3,8(a6)
    3c34:	00b72223          	sw	a1,4(a4)
    3c38:	00f62023          	sw	a5,0(a2)
    3c3c:	ee1ff06f          	j	3b1c <_free_r+0x98>
    3c40:	12059e63          	bnez	a1,3d7c <_free_r+0x2f8>
    3c44:	00862583          	lw	a1,8(a2)
    3c48:	00c62603          	lw	a2,12(a2)
    3c4c:	00f686b3          	add	a3,a3,a5
    3c50:	0016e793          	ori	a5,a3,1
    3c54:	00c5a623          	sw	a2,12(a1)
    3c58:	00b62423          	sw	a1,8(a2)
    3c5c:	00f72223          	sw	a5,4(a4)
    3c60:	00d70733          	add	a4,a4,a3
    3c64:	00d72023          	sw	a3,0(a4)
    3c68:	ef9ff06f          	j	3b60 <_free_r+0xdc>
    3c6c:	0015f593          	andi	a1,a1,1
    3c70:	00d786b3          	add	a3,a5,a3
    3c74:	02059063          	bnez	a1,3c94 <_free_r+0x210>
    3c78:	ff842583          	lw	a1,-8(s0)
    3c7c:	40b70733          	sub	a4,a4,a1
    3c80:	00c72783          	lw	a5,12(a4)
    3c84:	00872603          	lw	a2,8(a4)
    3c88:	00b686b3          	add	a3,a3,a1
    3c8c:	00f62623          	sw	a5,12(a2)
    3c90:	00c7a423          	sw	a2,8(a5)
    3c94:	0016e793          	ori	a5,a3,1
    3c98:	00f72223          	sw	a5,4(a4)
    3c9c:	00e52423          	sw	a4,8(a0)
    3ca0:	8301a783          	lw	a5,-2000(gp) # 9508 <__malloc_trim_threshold>
    3ca4:	eaf6eee3          	bltu	a3,a5,3b60 <_free_r+0xdc>
    3ca8:	00007597          	auipc	a1,0x7
    3cac:	3ec5a583          	lw	a1,1004(a1) # b094 <__malloc_top_pad>
    3cb0:	00048513          	mv	a0,s1
    3cb4:	c95ff0ef          	jal	ra,3948 <_malloc_trim_r>
    3cb8:	ea9ff06f          	j	3b60 <_free_r+0xdc>
    3cbc:	00d787b3          	add	a5,a5,a3
    3cc0:	f59ff06f          	j	3c18 <_free_r+0x194>
    3cc4:	01400613          	li	a2,20
    3cc8:	02d67063          	bgeu	a2,a3,3ce8 <_free_r+0x264>
    3ccc:	05400613          	li	a2,84
    3cd0:	06d66463          	bltu	a2,a3,3d38 <_free_r+0x2b4>
    3cd4:	00c7d693          	srli	a3,a5,0xc
    3cd8:	06f68593          	addi	a1,a3,111
    3cdc:	06e68613          	addi	a2,a3,110
    3ce0:	00359593          	slli	a1,a1,0x3
    3ce4:	ed1ff06f          	j	3bb4 <_free_r+0x130>
    3ce8:	05c68593          	addi	a1,a3,92
    3cec:	05b68613          	addi	a2,a3,91
    3cf0:	00359593          	slli	a1,a1,0x3
    3cf4:	ec1ff06f          	j	3bb4 <_free_r+0x130>
    3cf8:	00e52a23          	sw	a4,20(a0)
    3cfc:	00e52823          	sw	a4,16(a0)
    3d00:	0017e693          	ori	a3,a5,1
    3d04:	01172623          	sw	a7,12(a4)
    3d08:	01172423          	sw	a7,8(a4)
    3d0c:	00d72223          	sw	a3,4(a4)
    3d10:	00f70733          	add	a4,a4,a5
    3d14:	00f72023          	sw	a5,0(a4)
    3d18:	e49ff06f          	j	3b60 <_free_r+0xdc>
    3d1c:	00452803          	lw	a6,4(a0)
    3d20:	40265613          	srai	a2,a2,0x2
    3d24:	00100793          	li	a5,1
    3d28:	00c797b3          	sll	a5,a5,a2
    3d2c:	0107e7b3          	or	a5,a5,a6
    3d30:	00f52223          	sw	a5,4(a0)
    3d34:	eadff06f          	j	3be0 <_free_r+0x15c>
    3d38:	15400613          	li	a2,340
    3d3c:	00d66c63          	bltu	a2,a3,3d54 <_free_r+0x2d0>
    3d40:	00f7d693          	srli	a3,a5,0xf
    3d44:	07868593          	addi	a1,a3,120
    3d48:	07768613          	addi	a2,a3,119
    3d4c:	00359593          	slli	a1,a1,0x3
    3d50:	e65ff06f          	j	3bb4 <_free_r+0x130>
    3d54:	55400613          	li	a2,1364
    3d58:	00d66c63          	bltu	a2,a3,3d70 <_free_r+0x2ec>
    3d5c:	0127d693          	srli	a3,a5,0x12
    3d60:	07d68593          	addi	a1,a3,125
    3d64:	07c68613          	addi	a2,a3,124
    3d68:	00359593          	slli	a1,a1,0x3
    3d6c:	e49ff06f          	j	3bb4 <_free_r+0x130>
    3d70:	3f800593          	li	a1,1016
    3d74:	07e00613          	li	a2,126
    3d78:	e3dff06f          	j	3bb4 <_free_r+0x130>
    3d7c:	0017e693          	ori	a3,a5,1
    3d80:	00d72223          	sw	a3,4(a4)
    3d84:	00f62023          	sw	a5,0(a2)
    3d88:	dd9ff06f          	j	3b60 <_free_r+0xdc>

00003d8c <__sfvwrite_r>:
    3d8c:	00862783          	lw	a5,8(a2)
    3d90:	30078a63          	beqz	a5,40a4 <__sfvwrite_r+0x318>
    3d94:	00c59683          	lh	a3,12(a1)
    3d98:	fd010113          	addi	sp,sp,-48
    3d9c:	02812423          	sw	s0,40(sp)
    3da0:	01412c23          	sw	s4,24(sp)
    3da4:	01612823          	sw	s6,16(sp)
    3da8:	02112623          	sw	ra,44(sp)
    3dac:	02912223          	sw	s1,36(sp)
    3db0:	03212023          	sw	s2,32(sp)
    3db4:	01312e23          	sw	s3,28(sp)
    3db8:	01512a23          	sw	s5,20(sp)
    3dbc:	01712623          	sw	s7,12(sp)
    3dc0:	01812423          	sw	s8,8(sp)
    3dc4:	01912223          	sw	s9,4(sp)
    3dc8:	0086f793          	andi	a5,a3,8
    3dcc:	00060b13          	mv	s6,a2
    3dd0:	00050a13          	mv	s4,a0
    3dd4:	00058413          	mv	s0,a1
    3dd8:	08078663          	beqz	a5,3e64 <__sfvwrite_r+0xd8>
    3ddc:	0105a783          	lw	a5,16(a1)
    3de0:	08078263          	beqz	a5,3e64 <__sfvwrite_r+0xd8>
    3de4:	0026f793          	andi	a5,a3,2
    3de8:	000b2483          	lw	s1,0(s6)
    3dec:	08078c63          	beqz	a5,3e84 <__sfvwrite_r+0xf8>
    3df0:	02442783          	lw	a5,36(s0)
    3df4:	01c42583          	lw	a1,28(s0)
    3df8:	80000ab7          	lui	s5,0x80000
    3dfc:	00000993          	li	s3,0
    3e00:	00000913          	li	s2,0
    3e04:	c00aca93          	xori	s5,s5,-1024
    3e08:	00098613          	mv	a2,s3
    3e0c:	000a0513          	mv	a0,s4
    3e10:	04090263          	beqz	s2,3e54 <__sfvwrite_r+0xc8>
    3e14:	00090693          	mv	a3,s2
    3e18:	012af463          	bgeu	s5,s2,3e20 <__sfvwrite_r+0x94>
    3e1c:	000a8693          	mv	a3,s5
    3e20:	000780e7          	jalr	a5
    3e24:	26a05663          	blez	a0,4090 <__sfvwrite_r+0x304>
    3e28:	008b2783          	lw	a5,8(s6)
    3e2c:	00a989b3          	add	s3,s3,a0
    3e30:	40a90933          	sub	s2,s2,a0
    3e34:	40a787b3          	sub	a5,a5,a0
    3e38:	00fb2423          	sw	a5,8(s6)
    3e3c:	20078663          	beqz	a5,4048 <__sfvwrite_r+0x2bc>
    3e40:	02442783          	lw	a5,36(s0)
    3e44:	01c42583          	lw	a1,28(s0)
    3e48:	00098613          	mv	a2,s3
    3e4c:	000a0513          	mv	a0,s4
    3e50:	fc0912e3          	bnez	s2,3e14 <__sfvwrite_r+0x88>
    3e54:	0004a983          	lw	s3,0(s1)
    3e58:	0044a903          	lw	s2,4(s1)
    3e5c:	00848493          	addi	s1,s1,8
    3e60:	fa9ff06f          	j	3e08 <__sfvwrite_r+0x7c>
    3e64:	00040593          	mv	a1,s0
    3e68:	000a0513          	mv	a0,s4
    3e6c:	4b9010ef          	jal	ra,5b24 <__swsetup_r>
    3e70:	22051663          	bnez	a0,409c <__sfvwrite_r+0x310>
    3e74:	00c41683          	lh	a3,12(s0)
    3e78:	000b2483          	lw	s1,0(s6)
    3e7c:	0026f793          	andi	a5,a3,2
    3e80:	f60798e3          	bnez	a5,3df0 <__sfvwrite_r+0x64>
    3e84:	0016f793          	andi	a5,a3,1
    3e88:	12079c63          	bnez	a5,3fc0 <__sfvwrite_r+0x234>
    3e8c:	00042783          	lw	a5,0(s0)
    3e90:	00842703          	lw	a4,8(s0)
    3e94:	80000ab7          	lui	s5,0x80000
    3e98:	00000b93          	li	s7,0
    3e9c:	00000993          	li	s3,0
    3ea0:	fffaca93          	not	s5,s5
    3ea4:	00078513          	mv	a0,a5
    3ea8:	00070c13          	mv	s8,a4
    3eac:	10098263          	beqz	s3,3fb0 <__sfvwrite_r+0x224>
    3eb0:	2006f613          	andi	a2,a3,512
    3eb4:	24060c63          	beqz	a2,410c <__sfvwrite_r+0x380>
    3eb8:	00070c93          	mv	s9,a4
    3ebc:	2ee9e463          	bltu	s3,a4,41a4 <__sfvwrite_r+0x418>
    3ec0:	4806f713          	andi	a4,a3,1152
    3ec4:	08070a63          	beqz	a4,3f58 <__sfvwrite_r+0x1cc>
    3ec8:	01442603          	lw	a2,20(s0)
    3ecc:	01042583          	lw	a1,16(s0)
    3ed0:	00161713          	slli	a4,a2,0x1
    3ed4:	00c70733          	add	a4,a4,a2
    3ed8:	40b78933          	sub	s2,a5,a1
    3edc:	01f75c13          	srli	s8,a4,0x1f
    3ee0:	00ec0c33          	add	s8,s8,a4
    3ee4:	00190793          	addi	a5,s2,1
    3ee8:	401c5c13          	srai	s8,s8,0x1
    3eec:	013787b3          	add	a5,a5,s3
    3ef0:	000c0613          	mv	a2,s8
    3ef4:	00fc7663          	bgeu	s8,a5,3f00 <__sfvwrite_r+0x174>
    3ef8:	00078c13          	mv	s8,a5
    3efc:	00078613          	mv	a2,a5
    3f00:	4006f693          	andi	a3,a3,1024
    3f04:	2c068c63          	beqz	a3,41dc <__sfvwrite_r+0x450>
    3f08:	00060593          	mv	a1,a2
    3f0c:	000a0513          	mv	a0,s4
    3f10:	4a0000ef          	jal	ra,43b0 <_malloc_r>
    3f14:	00050c93          	mv	s9,a0
    3f18:	30050063          	beqz	a0,4218 <__sfvwrite_r+0x48c>
    3f1c:	01042583          	lw	a1,16(s0)
    3f20:	00090613          	mv	a2,s2
    3f24:	bf1fe0ef          	jal	ra,2b14 <memcpy>
    3f28:	00c45783          	lhu	a5,12(s0)
    3f2c:	b7f7f793          	andi	a5,a5,-1153
    3f30:	0807e793          	ori	a5,a5,128
    3f34:	00f41623          	sh	a5,12(s0)
    3f38:	012c8533          	add	a0,s9,s2
    3f3c:	412c07b3          	sub	a5,s8,s2
    3f40:	01942823          	sw	s9,16(s0)
    3f44:	01842a23          	sw	s8,20(s0)
    3f48:	00a42023          	sw	a0,0(s0)
    3f4c:	00098c13          	mv	s8,s3
    3f50:	00f42423          	sw	a5,8(s0)
    3f54:	00098c93          	mv	s9,s3
    3f58:	000c8613          	mv	a2,s9
    3f5c:	000b8593          	mv	a1,s7
    3f60:	4b5000ef          	jal	ra,4c14 <memmove>
    3f64:	00842703          	lw	a4,8(s0)
    3f68:	00042783          	lw	a5,0(s0)
    3f6c:	00098913          	mv	s2,s3
    3f70:	41870733          	sub	a4,a4,s8
    3f74:	019787b3          	add	a5,a5,s9
    3f78:	00e42423          	sw	a4,8(s0)
    3f7c:	00f42023          	sw	a5,0(s0)
    3f80:	00000993          	li	s3,0
    3f84:	008b2783          	lw	a5,8(s6)
    3f88:	012b8bb3          	add	s7,s7,s2
    3f8c:	412787b3          	sub	a5,a5,s2
    3f90:	00fb2423          	sw	a5,8(s6)
    3f94:	0a078a63          	beqz	a5,4048 <__sfvwrite_r+0x2bc>
    3f98:	00042783          	lw	a5,0(s0)
    3f9c:	00842703          	lw	a4,8(s0)
    3fa0:	00c41683          	lh	a3,12(s0)
    3fa4:	00078513          	mv	a0,a5
    3fa8:	00070c13          	mv	s8,a4
    3fac:	f00992e3          	bnez	s3,3eb0 <__sfvwrite_r+0x124>
    3fb0:	0004ab83          	lw	s7,0(s1)
    3fb4:	0044a983          	lw	s3,4(s1)
    3fb8:	00848493          	addi	s1,s1,8
    3fbc:	ee9ff06f          	j	3ea4 <__sfvwrite_r+0x118>
    3fc0:	00000a93          	li	s5,0
    3fc4:	00000513          	li	a0,0
    3fc8:	00000c13          	li	s8,0
    3fcc:	00000993          	li	s3,0
    3fd0:	0c098e63          	beqz	s3,40ac <__sfvwrite_r+0x320>
    3fd4:	0e050663          	beqz	a0,40c0 <__sfvwrite_r+0x334>
    3fd8:	000a8793          	mv	a5,s5
    3fdc:	00098b93          	mv	s7,s3
    3fe0:	0137f463          	bgeu	a5,s3,3fe8 <__sfvwrite_r+0x25c>
    3fe4:	00078b93          	mv	s7,a5
    3fe8:	00042503          	lw	a0,0(s0)
    3fec:	01042783          	lw	a5,16(s0)
    3ff0:	00842903          	lw	s2,8(s0)
    3ff4:	01442683          	lw	a3,20(s0)
    3ff8:	00a7f663          	bgeu	a5,a0,4004 <__sfvwrite_r+0x278>
    3ffc:	00d90933          	add	s2,s2,a3
    4000:	0f794063          	blt	s2,s7,40e0 <__sfvwrite_r+0x354>
    4004:	1adbc663          	blt	s7,a3,41b0 <__sfvwrite_r+0x424>
    4008:	02442783          	lw	a5,36(s0)
    400c:	01c42583          	lw	a1,28(s0)
    4010:	000c0613          	mv	a2,s8
    4014:	000a0513          	mv	a0,s4
    4018:	000780e7          	jalr	a5
    401c:	00050913          	mv	s2,a0
    4020:	06a05863          	blez	a0,4090 <__sfvwrite_r+0x304>
    4024:	412a8ab3          	sub	s5,s5,s2
    4028:	00100513          	li	a0,1
    402c:	040a8a63          	beqz	s5,4080 <__sfvwrite_r+0x2f4>
    4030:	008b2783          	lw	a5,8(s6)
    4034:	012c0c33          	add	s8,s8,s2
    4038:	412989b3          	sub	s3,s3,s2
    403c:	412787b3          	sub	a5,a5,s2
    4040:	00fb2423          	sw	a5,8(s6)
    4044:	f80796e3          	bnez	a5,3fd0 <__sfvwrite_r+0x244>
    4048:	00000513          	li	a0,0
    404c:	02c12083          	lw	ra,44(sp)
    4050:	02812403          	lw	s0,40(sp)
    4054:	02412483          	lw	s1,36(sp)
    4058:	02012903          	lw	s2,32(sp)
    405c:	01c12983          	lw	s3,28(sp)
    4060:	01812a03          	lw	s4,24(sp)
    4064:	01412a83          	lw	s5,20(sp)
    4068:	01012b03          	lw	s6,16(sp)
    406c:	00c12b83          	lw	s7,12(sp)
    4070:	00812c03          	lw	s8,8(sp)
    4074:	00412c83          	lw	s9,4(sp)
    4078:	03010113          	addi	sp,sp,48
    407c:	00008067          	ret
    4080:	00040593          	mv	a1,s0
    4084:	000a0513          	mv	a0,s4
    4088:	7ad010ef          	jal	ra,6034 <_fflush_r>
    408c:	fa0502e3          	beqz	a0,4030 <__sfvwrite_r+0x2a4>
    4090:	00c41783          	lh	a5,12(s0)
    4094:	0407e793          	ori	a5,a5,64
    4098:	00f41623          	sh	a5,12(s0)
    409c:	fff00513          	li	a0,-1
    40a0:	fadff06f          	j	404c <__sfvwrite_r+0x2c0>
    40a4:	00000513          	li	a0,0
    40a8:	00008067          	ret
    40ac:	0044a983          	lw	s3,4(s1)
    40b0:	00048793          	mv	a5,s1
    40b4:	00848493          	addi	s1,s1,8
    40b8:	fe098ae3          	beqz	s3,40ac <__sfvwrite_r+0x320>
    40bc:	0007ac03          	lw	s8,0(a5)
    40c0:	00098613          	mv	a2,s3
    40c4:	00a00593          	li	a1,10
    40c8:	000c0513          	mv	a0,s8
    40cc:	285000ef          	jal	ra,4b50 <memchr>
    40d0:	12050e63          	beqz	a0,420c <__sfvwrite_r+0x480>
    40d4:	00150513          	addi	a0,a0,1
    40d8:	41850ab3          	sub	s5,a0,s8
    40dc:	efdff06f          	j	3fd8 <__sfvwrite_r+0x24c>
    40e0:	000c0593          	mv	a1,s8
    40e4:	00090613          	mv	a2,s2
    40e8:	32d000ef          	jal	ra,4c14 <memmove>
    40ec:	00042783          	lw	a5,0(s0)
    40f0:	00040593          	mv	a1,s0
    40f4:	000a0513          	mv	a0,s4
    40f8:	012787b3          	add	a5,a5,s2
    40fc:	00f42023          	sw	a5,0(s0)
    4100:	735010ef          	jal	ra,6034 <_fflush_r>
    4104:	f20500e3          	beqz	a0,4024 <__sfvwrite_r+0x298>
    4108:	f89ff06f          	j	4090 <__sfvwrite_r+0x304>
    410c:	01042683          	lw	a3,16(s0)
    4110:	04f6e263          	bltu	a3,a5,4154 <__sfvwrite_r+0x3c8>
    4114:	01442603          	lw	a2,20(s0)
    4118:	02c9ee63          	bltu	s3,a2,4154 <__sfvwrite_r+0x3c8>
    411c:	00098793          	mv	a5,s3
    4120:	013af463          	bgeu	s5,s3,4128 <__sfvwrite_r+0x39c>
    4124:	000a8793          	mv	a5,s5
    4128:	02c7e6b3          	rem	a3,a5,a2
    412c:	02442703          	lw	a4,36(s0)
    4130:	01c42583          	lw	a1,28(s0)
    4134:	000b8613          	mv	a2,s7
    4138:	000a0513          	mv	a0,s4
    413c:	40d786b3          	sub	a3,a5,a3
    4140:	000700e7          	jalr	a4
    4144:	00050913          	mv	s2,a0
    4148:	f4a054e3          	blez	a0,4090 <__sfvwrite_r+0x304>
    414c:	412989b3          	sub	s3,s3,s2
    4150:	e35ff06f          	j	3f84 <__sfvwrite_r+0x1f8>
    4154:	00070913          	mv	s2,a4
    4158:	00e9f463          	bgeu	s3,a4,4160 <__sfvwrite_r+0x3d4>
    415c:	00098913          	mv	s2,s3
    4160:	00078513          	mv	a0,a5
    4164:	00090613          	mv	a2,s2
    4168:	000b8593          	mv	a1,s7
    416c:	2a9000ef          	jal	ra,4c14 <memmove>
    4170:	00842703          	lw	a4,8(s0)
    4174:	00042783          	lw	a5,0(s0)
    4178:	41270733          	sub	a4,a4,s2
    417c:	012787b3          	add	a5,a5,s2
    4180:	00e42423          	sw	a4,8(s0)
    4184:	00f42023          	sw	a5,0(s0)
    4188:	fc0712e3          	bnez	a4,414c <__sfvwrite_r+0x3c0>
    418c:	00040593          	mv	a1,s0
    4190:	000a0513          	mv	a0,s4
    4194:	6a1010ef          	jal	ra,6034 <_fflush_r>
    4198:	ee051ce3          	bnez	a0,4090 <__sfvwrite_r+0x304>
    419c:	412989b3          	sub	s3,s3,s2
    41a0:	de5ff06f          	j	3f84 <__sfvwrite_r+0x1f8>
    41a4:	00098c13          	mv	s8,s3
    41a8:	00098c93          	mv	s9,s3
    41ac:	dadff06f          	j	3f58 <__sfvwrite_r+0x1cc>
    41b0:	000b8613          	mv	a2,s7
    41b4:	000c0593          	mv	a1,s8
    41b8:	25d000ef          	jal	ra,4c14 <memmove>
    41bc:	00842703          	lw	a4,8(s0)
    41c0:	00042783          	lw	a5,0(s0)
    41c4:	000b8913          	mv	s2,s7
    41c8:	41770733          	sub	a4,a4,s7
    41cc:	017787b3          	add	a5,a5,s7
    41d0:	00e42423          	sw	a4,8(s0)
    41d4:	00f42023          	sw	a5,0(s0)
    41d8:	e4dff06f          	j	4024 <__sfvwrite_r+0x298>
    41dc:	000a0513          	mv	a0,s4
    41e0:	4a9000ef          	jal	ra,4e88 <_realloc_r>
    41e4:	00050c93          	mv	s9,a0
    41e8:	d40518e3          	bnez	a0,3f38 <__sfvwrite_r+0x1ac>
    41ec:	01042583          	lw	a1,16(s0)
    41f0:	000a0513          	mv	a0,s4
    41f4:	891ff0ef          	jal	ra,3a84 <_free_r>
    41f8:	00c41783          	lh	a5,12(s0)
    41fc:	00c00713          	li	a4,12
    4200:	00ea2023          	sw	a4,0(s4)
    4204:	f7f7f793          	andi	a5,a5,-129
    4208:	e8dff06f          	j	4094 <__sfvwrite_r+0x308>
    420c:	00198793          	addi	a5,s3,1
    4210:	00078a93          	mv	s5,a5
    4214:	dc9ff06f          	j	3fdc <__sfvwrite_r+0x250>
    4218:	00c00713          	li	a4,12
    421c:	00c41783          	lh	a5,12(s0)
    4220:	00ea2023          	sw	a4,0(s4)
    4224:	e71ff06f          	j	4094 <__sfvwrite_r+0x308>

00004228 <_fwalk>:
    4228:	fe010113          	addi	sp,sp,-32
    422c:	01212823          	sw	s2,16(sp)
    4230:	01312623          	sw	s3,12(sp)
    4234:	01412423          	sw	s4,8(sp)
    4238:	01512223          	sw	s5,4(sp)
    423c:	01612023          	sw	s6,0(sp)
    4240:	00112e23          	sw	ra,28(sp)
    4244:	00812c23          	sw	s0,24(sp)
    4248:	00912a23          	sw	s1,20(sp)
    424c:	00058b13          	mv	s6,a1
    4250:	2e050a93          	addi	s5,a0,736
    4254:	00000a13          	li	s4,0
    4258:	00100993          	li	s3,1
    425c:	fff00913          	li	s2,-1
    4260:	004aa483          	lw	s1,4(s5) # 80000004 <__alt_data_end+0x7fff0004>
    4264:	008aa403          	lw	s0,8(s5)
    4268:	fff48493          	addi	s1,s1,-1
    426c:	0204c663          	bltz	s1,4298 <_fwalk+0x70>
    4270:	00c45783          	lhu	a5,12(s0)
    4274:	fff48493          	addi	s1,s1,-1
    4278:	00f9fc63          	bgeu	s3,a5,4290 <_fwalk+0x68>
    427c:	00e41783          	lh	a5,14(s0)
    4280:	00040513          	mv	a0,s0
    4284:	01278663          	beq	a5,s2,4290 <_fwalk+0x68>
    4288:	000b00e7          	jalr	s6
    428c:	00aa6a33          	or	s4,s4,a0
    4290:	06840413          	addi	s0,s0,104
    4294:	fd249ee3          	bne	s1,s2,4270 <_fwalk+0x48>
    4298:	000aaa83          	lw	s5,0(s5)
    429c:	fc0a92e3          	bnez	s5,4260 <_fwalk+0x38>
    42a0:	01c12083          	lw	ra,28(sp)
    42a4:	01812403          	lw	s0,24(sp)
    42a8:	01412483          	lw	s1,20(sp)
    42ac:	01012903          	lw	s2,16(sp)
    42b0:	00c12983          	lw	s3,12(sp)
    42b4:	00412a83          	lw	s5,4(sp)
    42b8:	00012b03          	lw	s6,0(sp)
    42bc:	000a0513          	mv	a0,s4
    42c0:	00812a03          	lw	s4,8(sp)
    42c4:	02010113          	addi	sp,sp,32
    42c8:	00008067          	ret

000042cc <_fwalk_reent>:
    42cc:	fd010113          	addi	sp,sp,-48
    42d0:	03212023          	sw	s2,32(sp)
    42d4:	01312e23          	sw	s3,28(sp)
    42d8:	01412c23          	sw	s4,24(sp)
    42dc:	01512a23          	sw	s5,20(sp)
    42e0:	01612823          	sw	s6,16(sp)
    42e4:	01712623          	sw	s7,12(sp)
    42e8:	02112623          	sw	ra,44(sp)
    42ec:	02812423          	sw	s0,40(sp)
    42f0:	02912223          	sw	s1,36(sp)
    42f4:	00050a93          	mv	s5,a0
    42f8:	00058b93          	mv	s7,a1
    42fc:	2e050b13          	addi	s6,a0,736
    4300:	00000a13          	li	s4,0
    4304:	00100993          	li	s3,1
    4308:	fff00913          	li	s2,-1
    430c:	004b2483          	lw	s1,4(s6)
    4310:	008b2403          	lw	s0,8(s6)
    4314:	fff48493          	addi	s1,s1,-1
    4318:	0204c863          	bltz	s1,4348 <_fwalk_reent+0x7c>
    431c:	00c45783          	lhu	a5,12(s0)
    4320:	fff48493          	addi	s1,s1,-1
    4324:	00f9fe63          	bgeu	s3,a5,4340 <_fwalk_reent+0x74>
    4328:	00e41783          	lh	a5,14(s0)
    432c:	00040593          	mv	a1,s0
    4330:	000a8513          	mv	a0,s5
    4334:	01278663          	beq	a5,s2,4340 <_fwalk_reent+0x74>
    4338:	000b80e7          	jalr	s7
    433c:	00aa6a33          	or	s4,s4,a0
    4340:	06840413          	addi	s0,s0,104
    4344:	fd249ce3          	bne	s1,s2,431c <_fwalk_reent+0x50>
    4348:	000b2b03          	lw	s6,0(s6)
    434c:	fc0b10e3          	bnez	s6,430c <_fwalk_reent+0x40>
    4350:	02c12083          	lw	ra,44(sp)
    4354:	02812403          	lw	s0,40(sp)
    4358:	02412483          	lw	s1,36(sp)
    435c:	02012903          	lw	s2,32(sp)
    4360:	01c12983          	lw	s3,28(sp)
    4364:	01412a83          	lw	s5,20(sp)
    4368:	01012b03          	lw	s6,16(sp)
    436c:	00c12b83          	lw	s7,12(sp)
    4370:	000a0513          	mv	a0,s4
    4374:	01812a03          	lw	s4,24(sp)
    4378:	03010113          	addi	sp,sp,48
    437c:	00008067          	ret

00004380 <__retarget_lock_init>:
    4380:	00008067          	ret

00004384 <__retarget_lock_init_recursive>:
    4384:	00008067          	ret

00004388 <__retarget_lock_close>:
    4388:	00008067          	ret

0000438c <__retarget_lock_close_recursive>:
    438c:	00008067          	ret

00004390 <__retarget_lock_acquire>:
    4390:	00008067          	ret

00004394 <__retarget_lock_acquire_recursive>:
    4394:	00008067          	ret

00004398 <__retarget_lock_try_acquire>:
    4398:	00100513          	li	a0,1
    439c:	00008067          	ret

000043a0 <__retarget_lock_try_acquire_recursive>:
    43a0:	00100513          	li	a0,1
    43a4:	00008067          	ret

000043a8 <__retarget_lock_release>:
    43a8:	00008067          	ret

000043ac <__retarget_lock_release_recursive>:
    43ac:	00008067          	ret

000043b0 <_malloc_r>:
    43b0:	fd010113          	addi	sp,sp,-48
    43b4:	03212023          	sw	s2,32(sp)
    43b8:	02112623          	sw	ra,44(sp)
    43bc:	02812423          	sw	s0,40(sp)
    43c0:	02912223          	sw	s1,36(sp)
    43c4:	01312e23          	sw	s3,28(sp)
    43c8:	01412c23          	sw	s4,24(sp)
    43cc:	01512a23          	sw	s5,20(sp)
    43d0:	01612823          	sw	s6,16(sp)
    43d4:	01712623          	sw	s7,12(sp)
    43d8:	01812423          	sw	s8,8(sp)
    43dc:	01912223          	sw	s9,4(sp)
    43e0:	00b58793          	addi	a5,a1,11
    43e4:	01600713          	li	a4,22
    43e8:	00050913          	mv	s2,a0
    43ec:	08f76e63          	bltu	a4,a5,4488 <_malloc_r+0xd8>
    43f0:	01000793          	li	a5,16
    43f4:	22b7e063          	bltu	a5,a1,4614 <_malloc_r+0x264>
    43f8:	215000ef          	jal	ra,4e0c <__malloc_lock>
    43fc:	01000493          	li	s1,16
    4400:	01800793          	li	a5,24
    4404:	00200593          	li	a1,2
    4408:	00005997          	auipc	s3,0x5
    440c:	cc898993          	addi	s3,s3,-824 # 90d0 <__malloc_av_>
    4410:	00f987b3          	add	a5,s3,a5
    4414:	0047a403          	lw	s0,4(a5)
    4418:	ff878713          	addi	a4,a5,-8
    441c:	32e40263          	beq	s0,a4,4740 <_malloc_r+0x390>
    4420:	00442783          	lw	a5,4(s0)
    4424:	00c42683          	lw	a3,12(s0)
    4428:	00842603          	lw	a2,8(s0)
    442c:	ffc7f793          	andi	a5,a5,-4
    4430:	00f407b3          	add	a5,s0,a5
    4434:	0047a703          	lw	a4,4(a5)
    4438:	00d62623          	sw	a3,12(a2)
    443c:	00c6a423          	sw	a2,8(a3)
    4440:	00176713          	ori	a4,a4,1
    4444:	00090513          	mv	a0,s2
    4448:	00e7a223          	sw	a4,4(a5)
    444c:	1cd000ef          	jal	ra,4e18 <__malloc_unlock>
    4450:	00840513          	addi	a0,s0,8
    4454:	02c12083          	lw	ra,44(sp)
    4458:	02812403          	lw	s0,40(sp)
    445c:	02412483          	lw	s1,36(sp)
    4460:	02012903          	lw	s2,32(sp)
    4464:	01c12983          	lw	s3,28(sp)
    4468:	01812a03          	lw	s4,24(sp)
    446c:	01412a83          	lw	s5,20(sp)
    4470:	01012b03          	lw	s6,16(sp)
    4474:	00c12b83          	lw	s7,12(sp)
    4478:	00812c03          	lw	s8,8(sp)
    447c:	00412c83          	lw	s9,4(sp)
    4480:	03010113          	addi	sp,sp,48
    4484:	00008067          	ret
    4488:	ff87f493          	andi	s1,a5,-8
    448c:	1807c463          	bltz	a5,4614 <_malloc_r+0x264>
    4490:	18b4e263          	bltu	s1,a1,4614 <_malloc_r+0x264>
    4494:	179000ef          	jal	ra,4e0c <__malloc_lock>
    4498:	1f700793          	li	a5,503
    449c:	3a97fc63          	bgeu	a5,s1,4854 <_malloc_r+0x4a4>
    44a0:	0094d793          	srli	a5,s1,0x9
    44a4:	18078063          	beqz	a5,4624 <_malloc_r+0x274>
    44a8:	00400713          	li	a4,4
    44ac:	30f76263          	bltu	a4,a5,47b0 <_malloc_r+0x400>
    44b0:	0064d793          	srli	a5,s1,0x6
    44b4:	03978593          	addi	a1,a5,57
    44b8:	03878513          	addi	a0,a5,56
    44bc:	00359693          	slli	a3,a1,0x3
    44c0:	00005997          	auipc	s3,0x5
    44c4:	c1098993          	addi	s3,s3,-1008 # 90d0 <__malloc_av_>
    44c8:	00d986b3          	add	a3,s3,a3
    44cc:	0046a403          	lw	s0,4(a3)
    44d0:	ff868693          	addi	a3,a3,-8
    44d4:	02868663          	beq	a3,s0,4500 <_malloc_r+0x150>
    44d8:	00f00613          	li	a2,15
    44dc:	0100006f          	j	44ec <_malloc_r+0x13c>
    44e0:	24075a63          	bgez	a4,4734 <_malloc_r+0x384>
    44e4:	00c42403          	lw	s0,12(s0)
    44e8:	00868c63          	beq	a3,s0,4500 <_malloc_r+0x150>
    44ec:	00442783          	lw	a5,4(s0)
    44f0:	ffc7f793          	andi	a5,a5,-4
    44f4:	40978733          	sub	a4,a5,s1
    44f8:	fee654e3          	bge	a2,a4,44e0 <_malloc_r+0x130>
    44fc:	00050593          	mv	a1,a0
    4500:	0109a403          	lw	s0,16(s3)
    4504:	00005897          	auipc	a7,0x5
    4508:	bd488893          	addi	a7,a7,-1068 # 90d8 <__malloc_av_+0x8>
    450c:	1f140c63          	beq	s0,a7,4704 <_malloc_r+0x354>
    4510:	00442783          	lw	a5,4(s0)
    4514:	00f00693          	li	a3,15
    4518:	ffc7f793          	andi	a5,a5,-4
    451c:	40978733          	sub	a4,a5,s1
    4520:	34e6c063          	blt	a3,a4,4860 <_malloc_r+0x4b0>
    4524:	0119aa23          	sw	a7,20(s3)
    4528:	0119a823          	sw	a7,16(s3)
    452c:	30075463          	bgez	a4,4834 <_malloc_r+0x484>
    4530:	1ff00713          	li	a4,511
    4534:	0049a503          	lw	a0,4(s3)
    4538:	20f76c63          	bltu	a4,a5,4750 <_malloc_r+0x3a0>
    453c:	ff87f713          	andi	a4,a5,-8
    4540:	00870713          	addi	a4,a4,8
    4544:	00e98733          	add	a4,s3,a4
    4548:	00072683          	lw	a3,0(a4)
    454c:	0057d613          	srli	a2,a5,0x5
    4550:	00100793          	li	a5,1
    4554:	00c797b3          	sll	a5,a5,a2
    4558:	00f56533          	or	a0,a0,a5
    455c:	ff870793          	addi	a5,a4,-8
    4560:	00f42623          	sw	a5,12(s0)
    4564:	00d42423          	sw	a3,8(s0)
    4568:	00a9a223          	sw	a0,4(s3)
    456c:	00872023          	sw	s0,0(a4)
    4570:	0086a623          	sw	s0,12(a3)
    4574:	4025d793          	srai	a5,a1,0x2
    4578:	00100613          	li	a2,1
    457c:	00f61633          	sll	a2,a2,a5
    4580:	0ac56a63          	bltu	a0,a2,4634 <_malloc_r+0x284>
    4584:	00a677b3          	and	a5,a2,a0
    4588:	02079463          	bnez	a5,45b0 <_malloc_r+0x200>
    458c:	00161613          	slli	a2,a2,0x1
    4590:	ffc5f593          	andi	a1,a1,-4
    4594:	00a677b3          	and	a5,a2,a0
    4598:	00458593          	addi	a1,a1,4
    459c:	00079a63          	bnez	a5,45b0 <_malloc_r+0x200>
    45a0:	00161613          	slli	a2,a2,0x1
    45a4:	00a677b3          	and	a5,a2,a0
    45a8:	00458593          	addi	a1,a1,4
    45ac:	fe078ae3          	beqz	a5,45a0 <_malloc_r+0x1f0>
    45b0:	00f00813          	li	a6,15
    45b4:	00359313          	slli	t1,a1,0x3
    45b8:	00698333          	add	t1,s3,t1
    45bc:	00030513          	mv	a0,t1
    45c0:	00c52783          	lw	a5,12(a0)
    45c4:	00058e13          	mv	t3,a1
    45c8:	20f50663          	beq	a0,a5,47d4 <_malloc_r+0x424>
    45cc:	0047a703          	lw	a4,4(a5)
    45d0:	00078413          	mv	s0,a5
    45d4:	00c7a783          	lw	a5,12(a5)
    45d8:	ffc77713          	andi	a4,a4,-4
    45dc:	409706b3          	sub	a3,a4,s1
    45e0:	20d84663          	blt	a6,a3,47ec <_malloc_r+0x43c>
    45e4:	fe06c2e3          	bltz	a3,45c8 <_malloc_r+0x218>
    45e8:	00e40733          	add	a4,s0,a4
    45ec:	00472683          	lw	a3,4(a4)
    45f0:	00842603          	lw	a2,8(s0)
    45f4:	00090513          	mv	a0,s2
    45f8:	0016e693          	ori	a3,a3,1
    45fc:	00d72223          	sw	a3,4(a4)
    4600:	00f62623          	sw	a5,12(a2)
    4604:	00c7a423          	sw	a2,8(a5)
    4608:	011000ef          	jal	ra,4e18 <__malloc_unlock>
    460c:	00840513          	addi	a0,s0,8
    4610:	e45ff06f          	j	4454 <_malloc_r+0xa4>
    4614:	00c00793          	li	a5,12
    4618:	00f92023          	sw	a5,0(s2)
    461c:	00000513          	li	a0,0
    4620:	e35ff06f          	j	4454 <_malloc_r+0xa4>
    4624:	20000693          	li	a3,512
    4628:	04000593          	li	a1,64
    462c:	03f00513          	li	a0,63
    4630:	e91ff06f          	j	44c0 <_malloc_r+0x110>
    4634:	0089a403          	lw	s0,8(s3)
    4638:	00442783          	lw	a5,4(s0)
    463c:	ffc7fb13          	andi	s6,a5,-4
    4640:	009b6863          	bltu	s6,s1,4650 <_malloc_r+0x2a0>
    4644:	409b0733          	sub	a4,s6,s1
    4648:	00f00793          	li	a5,15
    464c:	0ce7c063          	blt	a5,a4,470c <_malloc_r+0x35c>
    4650:	82c18c93          	addi	s9,gp,-2004 # 9504 <__malloc_sbrk_base>
    4654:	000ca703          	lw	a4,0(s9)
    4658:	00007a97          	auipc	s5,0x7
    465c:	a3caaa83          	lw	s5,-1476(s5) # b094 <__malloc_top_pad>
    4660:	fff00793          	li	a5,-1
    4664:	01640a33          	add	s4,s0,s6
    4668:	01548ab3          	add	s5,s1,s5
    466c:	3cf70063          	beq	a4,a5,4a2c <_malloc_r+0x67c>
    4670:	000017b7          	lui	a5,0x1
    4674:	00f78793          	addi	a5,a5,15 # 100f <alt_main+0x93>
    4678:	00fa8ab3          	add	s5,s5,a5
    467c:	fffff7b7          	lui	a5,0xfffff
    4680:	00fafab3          	and	s5,s5,a5
    4684:	000a8593          	mv	a1,s5
    4688:	00090513          	mv	a0,s2
    468c:	555000ef          	jal	ra,53e0 <_sbrk_r>
    4690:	fff00793          	li	a5,-1
    4694:	00050b93          	mv	s7,a0
    4698:	20f50e63          	beq	a0,a5,48b4 <_malloc_r+0x504>
    469c:	21456a63          	bltu	a0,s4,48b0 <_malloc_r+0x500>
    46a0:	00007c17          	auipc	s8,0x7
    46a4:	aa8c0c13          	addi	s8,s8,-1368 # b148 <__malloc_current_mallinfo>
    46a8:	000c2583          	lw	a1,0(s8)
    46ac:	00ba85b3          	add	a1,s5,a1
    46b0:	00bc2023          	sw	a1,0(s8)
    46b4:	00058713          	mv	a4,a1
    46b8:	2aaa1063          	bne	s4,a0,4958 <_malloc_r+0x5a8>
    46bc:	01451793          	slli	a5,a0,0x14
    46c0:	28079c63          	bnez	a5,4958 <_malloc_r+0x5a8>
    46c4:	0089ab83          	lw	s7,8(s3)
    46c8:	015b07b3          	add	a5,s6,s5
    46cc:	0017e793          	ori	a5,a5,1
    46d0:	00fba223          	sw	a5,4(s7)
    46d4:	00007717          	auipc	a4,0x7
    46d8:	9bc70713          	addi	a4,a4,-1604 # b090 <__malloc_max_sbrked_mem>
    46dc:	00072683          	lw	a3,0(a4)
    46e0:	00b6f463          	bgeu	a3,a1,46e8 <_malloc_r+0x338>
    46e4:	00b72023          	sw	a1,0(a4)
    46e8:	00007717          	auipc	a4,0x7
    46ec:	9a470713          	addi	a4,a4,-1628 # b08c <__malloc_max_total_mem>
    46f0:	00072683          	lw	a3,0(a4)
    46f4:	00b6f463          	bgeu	a3,a1,46fc <_malloc_r+0x34c>
    46f8:	00b72023          	sw	a1,0(a4)
    46fc:	000b8413          	mv	s0,s7
    4700:	1bc0006f          	j	48bc <_malloc_r+0x50c>
    4704:	0049a503          	lw	a0,4(s3)
    4708:	e6dff06f          	j	4574 <_malloc_r+0x1c4>
    470c:	0014e793          	ori	a5,s1,1
    4710:	00f42223          	sw	a5,4(s0)
    4714:	009404b3          	add	s1,s0,s1
    4718:	0099a423          	sw	s1,8(s3)
    471c:	00176713          	ori	a4,a4,1
    4720:	00090513          	mv	a0,s2
    4724:	00e4a223          	sw	a4,4(s1)
    4728:	6f0000ef          	jal	ra,4e18 <__malloc_unlock>
    472c:	00840513          	addi	a0,s0,8
    4730:	d25ff06f          	j	4454 <_malloc_r+0xa4>
    4734:	00c42683          	lw	a3,12(s0)
    4738:	00842603          	lw	a2,8(s0)
    473c:	cf5ff06f          	j	4430 <_malloc_r+0x80>
    4740:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfffef00c>
    4744:	00258593          	addi	a1,a1,2
    4748:	da878ce3          	beq	a5,s0,4500 <_malloc_r+0x150>
    474c:	cd5ff06f          	j	4420 <_malloc_r+0x70>
    4750:	0097d713          	srli	a4,a5,0x9
    4754:	00400693          	li	a3,4
    4758:	14e6f263          	bgeu	a3,a4,489c <_malloc_r+0x4ec>
    475c:	01400693          	li	a3,20
    4760:	30e6ec63          	bltu	a3,a4,4a78 <_malloc_r+0x6c8>
    4764:	05c70613          	addi	a2,a4,92
    4768:	05b70693          	addi	a3,a4,91
    476c:	00361613          	slli	a2,a2,0x3
    4770:	00c98633          	add	a2,s3,a2
    4774:	00062703          	lw	a4,0(a2)
    4778:	ff860613          	addi	a2,a2,-8
    477c:	00e61863          	bne	a2,a4,478c <_malloc_r+0x3dc>
    4780:	2b40006f          	j	4a34 <_malloc_r+0x684>
    4784:	00872703          	lw	a4,8(a4)
    4788:	00e60863          	beq	a2,a4,4798 <_malloc_r+0x3e8>
    478c:	00472683          	lw	a3,4(a4)
    4790:	ffc6f693          	andi	a3,a3,-4
    4794:	fed7e8e3          	bltu	a5,a3,4784 <_malloc_r+0x3d4>
    4798:	00c72603          	lw	a2,12(a4)
    479c:	00c42623          	sw	a2,12(s0)
    47a0:	00e42423          	sw	a4,8(s0)
    47a4:	00862423          	sw	s0,8(a2)
    47a8:	00872623          	sw	s0,12(a4)
    47ac:	dc9ff06f          	j	4574 <_malloc_r+0x1c4>
    47b0:	01400713          	li	a4,20
    47b4:	12f77663          	bgeu	a4,a5,48e0 <_malloc_r+0x530>
    47b8:	05400713          	li	a4,84
    47bc:	2cf76c63          	bltu	a4,a5,4a94 <_malloc_r+0x6e4>
    47c0:	00c4d793          	srli	a5,s1,0xc
    47c4:	06f78593          	addi	a1,a5,111
    47c8:	06e78513          	addi	a0,a5,110
    47cc:	00359693          	slli	a3,a1,0x3
    47d0:	cf1ff06f          	j	44c0 <_malloc_r+0x110>
    47d4:	001e0e13          	addi	t3,t3,1
    47d8:	003e7793          	andi	a5,t3,3
    47dc:	00850513          	addi	a0,a0,8
    47e0:	10078e63          	beqz	a5,48fc <_malloc_r+0x54c>
    47e4:	00c52783          	lw	a5,12(a0)
    47e8:	de1ff06f          	j	45c8 <_malloc_r+0x218>
    47ec:	00842603          	lw	a2,8(s0)
    47f0:	0014e593          	ori	a1,s1,1
    47f4:	00b42223          	sw	a1,4(s0)
    47f8:	00f62623          	sw	a5,12(a2)
    47fc:	00c7a423          	sw	a2,8(a5)
    4800:	009404b3          	add	s1,s0,s1
    4804:	0099aa23          	sw	s1,20(s3)
    4808:	0099a823          	sw	s1,16(s3)
    480c:	0016e793          	ori	a5,a3,1
    4810:	0114a623          	sw	a7,12(s1)
    4814:	0114a423          	sw	a7,8(s1)
    4818:	00f4a223          	sw	a5,4(s1)
    481c:	00e40733          	add	a4,s0,a4
    4820:	00090513          	mv	a0,s2
    4824:	00d72023          	sw	a3,0(a4)
    4828:	5f0000ef          	jal	ra,4e18 <__malloc_unlock>
    482c:	00840513          	addi	a0,s0,8
    4830:	c25ff06f          	j	4454 <_malloc_r+0xa4>
    4834:	00f407b3          	add	a5,s0,a5
    4838:	0047a703          	lw	a4,4(a5)
    483c:	00090513          	mv	a0,s2
    4840:	00176713          	ori	a4,a4,1
    4844:	00e7a223          	sw	a4,4(a5)
    4848:	5d0000ef          	jal	ra,4e18 <__malloc_unlock>
    484c:	00840513          	addi	a0,s0,8
    4850:	c05ff06f          	j	4454 <_malloc_r+0xa4>
    4854:	0034d593          	srli	a1,s1,0x3
    4858:	00848793          	addi	a5,s1,8
    485c:	badff06f          	j	4408 <_malloc_r+0x58>
    4860:	0014e693          	ori	a3,s1,1
    4864:	00d42223          	sw	a3,4(s0)
    4868:	009404b3          	add	s1,s0,s1
    486c:	0099aa23          	sw	s1,20(s3)
    4870:	0099a823          	sw	s1,16(s3)
    4874:	00176693          	ori	a3,a4,1
    4878:	0114a623          	sw	a7,12(s1)
    487c:	0114a423          	sw	a7,8(s1)
    4880:	00d4a223          	sw	a3,4(s1)
    4884:	00f407b3          	add	a5,s0,a5
    4888:	00090513          	mv	a0,s2
    488c:	00e7a023          	sw	a4,0(a5)
    4890:	588000ef          	jal	ra,4e18 <__malloc_unlock>
    4894:	00840513          	addi	a0,s0,8
    4898:	bbdff06f          	j	4454 <_malloc_r+0xa4>
    489c:	0067d713          	srli	a4,a5,0x6
    48a0:	03970613          	addi	a2,a4,57
    48a4:	03870693          	addi	a3,a4,56
    48a8:	00361613          	slli	a2,a2,0x3
    48ac:	ec5ff06f          	j	4770 <_malloc_r+0x3c0>
    48b0:	09340a63          	beq	s0,s3,4944 <_malloc_r+0x594>
    48b4:	0089a403          	lw	s0,8(s3)
    48b8:	00442783          	lw	a5,4(s0)
    48bc:	ffc7f793          	andi	a5,a5,-4
    48c0:	40978733          	sub	a4,a5,s1
    48c4:	0097e663          	bltu	a5,s1,48d0 <_malloc_r+0x520>
    48c8:	00f00793          	li	a5,15
    48cc:	e4e7c0e3          	blt	a5,a4,470c <_malloc_r+0x35c>
    48d0:	00090513          	mv	a0,s2
    48d4:	544000ef          	jal	ra,4e18 <__malloc_unlock>
    48d8:	00000513          	li	a0,0
    48dc:	b79ff06f          	j	4454 <_malloc_r+0xa4>
    48e0:	05c78593          	addi	a1,a5,92
    48e4:	05b78513          	addi	a0,a5,91
    48e8:	00359693          	slli	a3,a1,0x3
    48ec:	bd5ff06f          	j	44c0 <_malloc_r+0x110>
    48f0:	00832783          	lw	a5,8(t1)
    48f4:	fff58593          	addi	a1,a1,-1
    48f8:	24679863          	bne	a5,t1,4b48 <_malloc_r+0x798>
    48fc:	0035f793          	andi	a5,a1,3
    4900:	ff830313          	addi	t1,t1,-8
    4904:	fe0796e3          	bnez	a5,48f0 <_malloc_r+0x540>
    4908:	0049a703          	lw	a4,4(s3)
    490c:	fff64793          	not	a5,a2
    4910:	00e7f7b3          	and	a5,a5,a4
    4914:	00f9a223          	sw	a5,4(s3)
    4918:	00161613          	slli	a2,a2,0x1
    491c:	d0c7ece3          	bltu	a5,a2,4634 <_malloc_r+0x284>
    4920:	d0060ae3          	beqz	a2,4634 <_malloc_r+0x284>
    4924:	00f67733          	and	a4,a2,a5
    4928:	00071a63          	bnez	a4,493c <_malloc_r+0x58c>
    492c:	00161613          	slli	a2,a2,0x1
    4930:	00f67733          	and	a4,a2,a5
    4934:	004e0e13          	addi	t3,t3,4
    4938:	fe070ae3          	beqz	a4,492c <_malloc_r+0x57c>
    493c:	000e0593          	mv	a1,t3
    4940:	c75ff06f          	j	45b4 <_malloc_r+0x204>
    4944:	00007c17          	auipc	s8,0x7
    4948:	804c0c13          	addi	s8,s8,-2044 # b148 <__malloc_current_mallinfo>
    494c:	000c2703          	lw	a4,0(s8)
    4950:	00ea8733          	add	a4,s5,a4
    4954:	00ec2023          	sw	a4,0(s8)
    4958:	000ca683          	lw	a3,0(s9)
    495c:	fff00793          	li	a5,-1
    4960:	14f68863          	beq	a3,a5,4ab0 <_malloc_r+0x700>
    4964:	414b87b3          	sub	a5,s7,s4
    4968:	00e787b3          	add	a5,a5,a4
    496c:	00fc2023          	sw	a5,0(s8)
    4970:	007bfc93          	andi	s9,s7,7
    4974:	0c0c8c63          	beqz	s9,4a4c <_malloc_r+0x69c>
    4978:	00001737          	lui	a4,0x1
    497c:	419b8bb3          	sub	s7,s7,s9
    4980:	00870593          	addi	a1,a4,8 # 1008 <alt_main+0x8c>
    4984:	008b8b93          	addi	s7,s7,8
    4988:	419585b3          	sub	a1,a1,s9
    498c:	015b8ab3          	add	s5,s7,s5
    4990:	415585b3          	sub	a1,a1,s5
    4994:	fff70713          	addi	a4,a4,-1
    4998:	00e5fa33          	and	s4,a1,a4
    499c:	000a0593          	mv	a1,s4
    49a0:	00090513          	mv	a0,s2
    49a4:	23d000ef          	jal	ra,53e0 <_sbrk_r>
    49a8:	fff00793          	li	a5,-1
    49ac:	14f50863          	beq	a0,a5,4afc <_malloc_r+0x74c>
    49b0:	41750533          	sub	a0,a0,s7
    49b4:	01450ab3          	add	s5,a0,s4
    49b8:	000c2703          	lw	a4,0(s8)
    49bc:	0179a423          	sw	s7,8(s3)
    49c0:	001ae793          	ori	a5,s5,1
    49c4:	00ea05b3          	add	a1,s4,a4
    49c8:	00bc2023          	sw	a1,0(s8)
    49cc:	00fba223          	sw	a5,4(s7)
    49d0:	d13402e3          	beq	s0,s3,46d4 <_malloc_r+0x324>
    49d4:	00f00693          	li	a3,15
    49d8:	0f66f063          	bgeu	a3,s6,4ab8 <_malloc_r+0x708>
    49dc:	00442703          	lw	a4,4(s0)
    49e0:	ff4b0793          	addi	a5,s6,-12
    49e4:	ff87f793          	andi	a5,a5,-8
    49e8:	00177713          	andi	a4,a4,1
    49ec:	00f76733          	or	a4,a4,a5
    49f0:	00e42223          	sw	a4,4(s0)
    49f4:	00500613          	li	a2,5
    49f8:	00f40733          	add	a4,s0,a5
    49fc:	00c72223          	sw	a2,4(a4)
    4a00:	00c72423          	sw	a2,8(a4)
    4a04:	00f6e663          	bltu	a3,a5,4a10 <_malloc_r+0x660>
    4a08:	004ba783          	lw	a5,4(s7)
    4a0c:	cc9ff06f          	j	46d4 <_malloc_r+0x324>
    4a10:	00840593          	addi	a1,s0,8
    4a14:	00090513          	mv	a0,s2
    4a18:	86cff0ef          	jal	ra,3a84 <_free_r>
    4a1c:	0089ab83          	lw	s7,8(s3)
    4a20:	000c2583          	lw	a1,0(s8)
    4a24:	004ba783          	lw	a5,4(s7)
    4a28:	cadff06f          	j	46d4 <_malloc_r+0x324>
    4a2c:	010a8a93          	addi	s5,s5,16
    4a30:	c55ff06f          	j	4684 <_malloc_r+0x2d4>
    4a34:	4026d693          	srai	a3,a3,0x2
    4a38:	00100793          	li	a5,1
    4a3c:	00d797b3          	sll	a5,a5,a3
    4a40:	00f56533          	or	a0,a0,a5
    4a44:	00a9a223          	sw	a0,4(s3)
    4a48:	d55ff06f          	j	479c <_malloc_r+0x3ec>
    4a4c:	015b85b3          	add	a1,s7,s5
    4a50:	40b005b3          	neg	a1,a1
    4a54:	01459593          	slli	a1,a1,0x14
    4a58:	0145da13          	srli	s4,a1,0x14
    4a5c:	000a0593          	mv	a1,s4
    4a60:	00090513          	mv	a0,s2
    4a64:	17d000ef          	jal	ra,53e0 <_sbrk_r>
    4a68:	fff00793          	li	a5,-1
    4a6c:	f4f512e3          	bne	a0,a5,49b0 <_malloc_r+0x600>
    4a70:	00000a13          	li	s4,0
    4a74:	f45ff06f          	j	49b8 <_malloc_r+0x608>
    4a78:	05400693          	li	a3,84
    4a7c:	04e6e463          	bltu	a3,a4,4ac4 <_malloc_r+0x714>
    4a80:	00c7d713          	srli	a4,a5,0xc
    4a84:	06f70613          	addi	a2,a4,111
    4a88:	06e70693          	addi	a3,a4,110
    4a8c:	00361613          	slli	a2,a2,0x3
    4a90:	ce1ff06f          	j	4770 <_malloc_r+0x3c0>
    4a94:	15400713          	li	a4,340
    4a98:	04f76463          	bltu	a4,a5,4ae0 <_malloc_r+0x730>
    4a9c:	00f4d793          	srli	a5,s1,0xf
    4aa0:	07878593          	addi	a1,a5,120
    4aa4:	07778513          	addi	a0,a5,119
    4aa8:	00359693          	slli	a3,a1,0x3
    4aac:	a15ff06f          	j	44c0 <_malloc_r+0x110>
    4ab0:	017ca023          	sw	s7,0(s9)
    4ab4:	ebdff06f          	j	4970 <_malloc_r+0x5c0>
    4ab8:	00100793          	li	a5,1
    4abc:	00fba223          	sw	a5,4(s7)
    4ac0:	e11ff06f          	j	48d0 <_malloc_r+0x520>
    4ac4:	15400693          	li	a3,340
    4ac8:	04e6e463          	bltu	a3,a4,4b10 <_malloc_r+0x760>
    4acc:	00f7d713          	srli	a4,a5,0xf
    4ad0:	07870613          	addi	a2,a4,120
    4ad4:	07770693          	addi	a3,a4,119
    4ad8:	00361613          	slli	a2,a2,0x3
    4adc:	c95ff06f          	j	4770 <_malloc_r+0x3c0>
    4ae0:	55400713          	li	a4,1364
    4ae4:	04f76463          	bltu	a4,a5,4b2c <_malloc_r+0x77c>
    4ae8:	0124d793          	srli	a5,s1,0x12
    4aec:	07d78593          	addi	a1,a5,125
    4af0:	07c78513          	addi	a0,a5,124
    4af4:	00359693          	slli	a3,a1,0x3
    4af8:	9c9ff06f          	j	44c0 <_malloc_r+0x110>
    4afc:	ff8c8c93          	addi	s9,s9,-8
    4b00:	019a8ab3          	add	s5,s5,s9
    4b04:	417a8ab3          	sub	s5,s5,s7
    4b08:	00000a13          	li	s4,0
    4b0c:	eadff06f          	j	49b8 <_malloc_r+0x608>
    4b10:	55400693          	li	a3,1364
    4b14:	02e6e463          	bltu	a3,a4,4b3c <_malloc_r+0x78c>
    4b18:	0127d713          	srli	a4,a5,0x12
    4b1c:	07d70613          	addi	a2,a4,125
    4b20:	07c70693          	addi	a3,a4,124
    4b24:	00361613          	slli	a2,a2,0x3
    4b28:	c49ff06f          	j	4770 <_malloc_r+0x3c0>
    4b2c:	3f800693          	li	a3,1016
    4b30:	07f00593          	li	a1,127
    4b34:	07e00513          	li	a0,126
    4b38:	989ff06f          	j	44c0 <_malloc_r+0x110>
    4b3c:	3f800613          	li	a2,1016
    4b40:	07e00693          	li	a3,126
    4b44:	c2dff06f          	j	4770 <_malloc_r+0x3c0>
    4b48:	0049a783          	lw	a5,4(s3)
    4b4c:	dcdff06f          	j	4918 <_malloc_r+0x568>

00004b50 <memchr>:
    4b50:	00357793          	andi	a5,a0,3
    4b54:	0ff5f693          	zext.b	a3,a1
    4b58:	02078e63          	beqz	a5,4b94 <memchr+0x44>
    4b5c:	fff60793          	addi	a5,a2,-1
    4b60:	02060663          	beqz	a2,4b8c <memchr+0x3c>
    4b64:	fff00613          	li	a2,-1
    4b68:	0180006f          	j	4b80 <memchr+0x30>
    4b6c:	00150513          	addi	a0,a0,1
    4b70:	00357713          	andi	a4,a0,3
    4b74:	02070263          	beqz	a4,4b98 <memchr+0x48>
    4b78:	fff78793          	addi	a5,a5,-1
    4b7c:	00c78863          	beq	a5,a2,4b8c <memchr+0x3c>
    4b80:	00054703          	lbu	a4,0(a0)
    4b84:	fed714e3          	bne	a4,a3,4b6c <memchr+0x1c>
    4b88:	00008067          	ret
    4b8c:	00000513          	li	a0,0
    4b90:	00008067          	ret
    4b94:	00060793          	mv	a5,a2
    4b98:	00300713          	li	a4,3
    4b9c:	04f77c63          	bgeu	a4,a5,4bf4 <memchr+0xa4>
    4ba0:	0ff5f593          	zext.b	a1,a1
    4ba4:	00859713          	slli	a4,a1,0x8
    4ba8:	00b705b3          	add	a1,a4,a1
    4bac:	01059713          	slli	a4,a1,0x10
    4bb0:	feff08b7          	lui	a7,0xfeff0
    4bb4:	80808837          	lui	a6,0x80808
    4bb8:	00e585b3          	add	a1,a1,a4
    4bbc:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfefdfeff>
    4bc0:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x807f8080>
    4bc4:	00300313          	li	t1,3
    4bc8:	0100006f          	j	4bd8 <memchr+0x88>
    4bcc:	ffc78793          	addi	a5,a5,-4
    4bd0:	00450513          	addi	a0,a0,4
    4bd4:	02f37063          	bgeu	t1,a5,4bf4 <memchr+0xa4>
    4bd8:	00052703          	lw	a4,0(a0)
    4bdc:	00e5c733          	xor	a4,a1,a4
    4be0:	01170633          	add	a2,a4,a7
    4be4:	fff74713          	not	a4,a4
    4be8:	00e67733          	and	a4,a2,a4
    4bec:	01077733          	and	a4,a4,a6
    4bf0:	fc070ee3          	beqz	a4,4bcc <memchr+0x7c>
    4bf4:	00f50733          	add	a4,a0,a5
    4bf8:	00079863          	bnez	a5,4c08 <memchr+0xb8>
    4bfc:	f91ff06f          	j	4b8c <memchr+0x3c>
    4c00:	00150513          	addi	a0,a0,1
    4c04:	f8a704e3          	beq	a4,a0,4b8c <memchr+0x3c>
    4c08:	00054783          	lbu	a5,0(a0)
    4c0c:	fed79ae3          	bne	a5,a3,4c00 <memchr+0xb0>
    4c10:	00008067          	ret

00004c14 <memmove>:
    4c14:	02a5f663          	bgeu	a1,a0,4c40 <memmove+0x2c>
    4c18:	00c58733          	add	a4,a1,a2
    4c1c:	02e57263          	bgeu	a0,a4,4c40 <memmove+0x2c>
    4c20:	00c507b3          	add	a5,a0,a2
    4c24:	04060663          	beqz	a2,4c70 <memmove+0x5c>
    4c28:	fff74683          	lbu	a3,-1(a4)
    4c2c:	fff78793          	addi	a5,a5,-1
    4c30:	fff70713          	addi	a4,a4,-1
    4c34:	00d78023          	sb	a3,0(a5)
    4c38:	fef518e3          	bne	a0,a5,4c28 <memmove+0x14>
    4c3c:	00008067          	ret
    4c40:	00f00793          	li	a5,15
    4c44:	02c7e863          	bltu	a5,a2,4c74 <memmove+0x60>
    4c48:	00050793          	mv	a5,a0
    4c4c:	fff60693          	addi	a3,a2,-1
    4c50:	0c060a63          	beqz	a2,4d24 <memmove+0x110>
    4c54:	00168693          	addi	a3,a3,1
    4c58:	00d786b3          	add	a3,a5,a3
    4c5c:	0005c703          	lbu	a4,0(a1)
    4c60:	00178793          	addi	a5,a5,1
    4c64:	00158593          	addi	a1,a1,1
    4c68:	fee78fa3          	sb	a4,-1(a5)
    4c6c:	fed798e3          	bne	a5,a3,4c5c <memmove+0x48>
    4c70:	00008067          	ret
    4c74:	00b567b3          	or	a5,a0,a1
    4c78:	0037f793          	andi	a5,a5,3
    4c7c:	08079e63          	bnez	a5,4d18 <memmove+0x104>
    4c80:	ff060893          	addi	a7,a2,-16
    4c84:	ff08f893          	andi	a7,a7,-16
    4c88:	01088893          	addi	a7,a7,16
    4c8c:	011507b3          	add	a5,a0,a7
    4c90:	00058693          	mv	a3,a1
    4c94:	00050713          	mv	a4,a0
    4c98:	0006a803          	lw	a6,0(a3)
    4c9c:	01068693          	addi	a3,a3,16
    4ca0:	01070713          	addi	a4,a4,16
    4ca4:	ff072823          	sw	a6,-16(a4)
    4ca8:	ff46a803          	lw	a6,-12(a3)
    4cac:	ff072a23          	sw	a6,-12(a4)
    4cb0:	ff86a803          	lw	a6,-8(a3)
    4cb4:	ff072c23          	sw	a6,-8(a4)
    4cb8:	ffc6a803          	lw	a6,-4(a3)
    4cbc:	ff072e23          	sw	a6,-4(a4)
    4cc0:	fcf71ce3          	bne	a4,a5,4c98 <memmove+0x84>
    4cc4:	00c67713          	andi	a4,a2,12
    4cc8:	011585b3          	add	a1,a1,a7
    4ccc:	00f67813          	andi	a6,a2,15
    4cd0:	04070c63          	beqz	a4,4d28 <memmove+0x114>
    4cd4:	00058693          	mv	a3,a1
    4cd8:	00078713          	mv	a4,a5
    4cdc:	01078eb3          	add	t4,a5,a6
    4ce0:	00300e13          	li	t3,3
    4ce4:	0006a303          	lw	t1,0(a3)
    4ce8:	00470713          	addi	a4,a4,4
    4cec:	40ee88b3          	sub	a7,t4,a4
    4cf0:	fe672e23          	sw	t1,-4(a4)
    4cf4:	00468693          	addi	a3,a3,4
    4cf8:	ff1e66e3          	bltu	t3,a7,4ce4 <memmove+0xd0>
    4cfc:	ffc80713          	addi	a4,a6,-4
    4d00:	ffc77713          	andi	a4,a4,-4
    4d04:	00470713          	addi	a4,a4,4
    4d08:	00367613          	andi	a2,a2,3
    4d0c:	00e787b3          	add	a5,a5,a4
    4d10:	00e585b3          	add	a1,a1,a4
    4d14:	f39ff06f          	j	4c4c <memmove+0x38>
    4d18:	fff60693          	addi	a3,a2,-1
    4d1c:	00050793          	mv	a5,a0
    4d20:	f35ff06f          	j	4c54 <memmove+0x40>
    4d24:	00008067          	ret
    4d28:	00080613          	mv	a2,a6
    4d2c:	f21ff06f          	j	4c4c <memmove+0x38>

00004d30 <memset>:
    4d30:	00f00313          	li	t1,15
    4d34:	00050713          	mv	a4,a0
    4d38:	02c37e63          	bgeu	t1,a2,4d74 <memset+0x44>
    4d3c:	00f77793          	andi	a5,a4,15
    4d40:	0a079063          	bnez	a5,4de0 <memset+0xb0>
    4d44:	08059263          	bnez	a1,4dc8 <memset+0x98>
    4d48:	ff067693          	andi	a3,a2,-16
    4d4c:	00f67613          	andi	a2,a2,15
    4d50:	00e686b3          	add	a3,a3,a4
    4d54:	00b72023          	sw	a1,0(a4)
    4d58:	00b72223          	sw	a1,4(a4)
    4d5c:	00b72423          	sw	a1,8(a4)
    4d60:	00b72623          	sw	a1,12(a4)
    4d64:	01070713          	addi	a4,a4,16
    4d68:	fed766e3          	bltu	a4,a3,4d54 <memset+0x24>
    4d6c:	00061463          	bnez	a2,4d74 <memset+0x44>
    4d70:	00008067          	ret
    4d74:	40c306b3          	sub	a3,t1,a2
    4d78:	00269693          	slli	a3,a3,0x2
    4d7c:	00000297          	auipc	t0,0x0
    4d80:	005686b3          	add	a3,a3,t0
    4d84:	00c68067          	jr	12(a3)
    4d88:	00b70723          	sb	a1,14(a4)
    4d8c:	00b706a3          	sb	a1,13(a4)
    4d90:	00b70623          	sb	a1,12(a4)
    4d94:	00b705a3          	sb	a1,11(a4)
    4d98:	00b70523          	sb	a1,10(a4)
    4d9c:	00b704a3          	sb	a1,9(a4)
    4da0:	00b70423          	sb	a1,8(a4)
    4da4:	00b703a3          	sb	a1,7(a4)
    4da8:	00b70323          	sb	a1,6(a4)
    4dac:	00b702a3          	sb	a1,5(a4)
    4db0:	00b70223          	sb	a1,4(a4)
    4db4:	00b701a3          	sb	a1,3(a4)
    4db8:	00b70123          	sb	a1,2(a4)
    4dbc:	00b700a3          	sb	a1,1(a4)
    4dc0:	00b70023          	sb	a1,0(a4)
    4dc4:	00008067          	ret
    4dc8:	0ff5f593          	zext.b	a1,a1
    4dcc:	00859693          	slli	a3,a1,0x8
    4dd0:	00d5e5b3          	or	a1,a1,a3
    4dd4:	01059693          	slli	a3,a1,0x10
    4dd8:	00d5e5b3          	or	a1,a1,a3
    4ddc:	f6dff06f          	j	4d48 <memset+0x18>
    4de0:	00279693          	slli	a3,a5,0x2
    4de4:	00000297          	auipc	t0,0x0
    4de8:	005686b3          	add	a3,a3,t0
    4dec:	00008293          	mv	t0,ra
    4df0:	fa0680e7          	jalr	-96(a3)
    4df4:	00028093          	mv	ra,t0
    4df8:	ff078793          	addi	a5,a5,-16
    4dfc:	40f70733          	sub	a4,a4,a5
    4e00:	00f60633          	add	a2,a2,a5
    4e04:	f6c378e3          	bgeu	t1,a2,4d74 <memset+0x44>
    4e08:	f3dff06f          	j	4d44 <memset+0x14>

00004e0c <__malloc_lock>:
    4e0c:	00006517          	auipc	a0,0x6
    4e10:	26c50513          	addi	a0,a0,620 # b078 <__lock___malloc_recursive_mutex>
    4e14:	d80ff06f          	j	4394 <__retarget_lock_acquire_recursive>

00004e18 <__malloc_unlock>:
    4e18:	00006517          	auipc	a0,0x6
    4e1c:	26050513          	addi	a0,a0,608 # b078 <__lock___malloc_recursive_mutex>
    4e20:	d8cff06f          	j	43ac <__retarget_lock_release_recursive>

00004e24 <_open_r>:
    4e24:	ff010113          	addi	sp,sp,-16
    4e28:	00058713          	mv	a4,a1
    4e2c:	00812423          	sw	s0,8(sp)
    4e30:	00060593          	mv	a1,a2
    4e34:	00050413          	mv	s0,a0
    4e38:	00068613          	mv	a2,a3
    4e3c:	00070513          	mv	a0,a4
    4e40:	00006797          	auipc	a5,0x6
    4e44:	2207a023          	sw	zero,544(a5) # b060 <errno>
    4e48:	00112623          	sw	ra,12(sp)
    4e4c:	795010ef          	jal	ra,6de0 <_open>
    4e50:	fff00793          	li	a5,-1
    4e54:	00f50a63          	beq	a0,a5,4e68 <_open_r+0x44>
    4e58:	00c12083          	lw	ra,12(sp)
    4e5c:	00812403          	lw	s0,8(sp)
    4e60:	01010113          	addi	sp,sp,16
    4e64:	00008067          	ret
    4e68:	00006797          	auipc	a5,0x6
    4e6c:	1f87a783          	lw	a5,504(a5) # b060 <errno>
    4e70:	fe0784e3          	beqz	a5,4e58 <_open_r+0x34>
    4e74:	00c12083          	lw	ra,12(sp)
    4e78:	00f42023          	sw	a5,0(s0)
    4e7c:	00812403          	lw	s0,8(sp)
    4e80:	01010113          	addi	sp,sp,16
    4e84:	00008067          	ret

00004e88 <_realloc_r>:
    4e88:	fd010113          	addi	sp,sp,-48
    4e8c:	02912223          	sw	s1,36(sp)
    4e90:	02112623          	sw	ra,44(sp)
    4e94:	02812423          	sw	s0,40(sp)
    4e98:	03212023          	sw	s2,32(sp)
    4e9c:	01312e23          	sw	s3,28(sp)
    4ea0:	01412c23          	sw	s4,24(sp)
    4ea4:	01512a23          	sw	s5,20(sp)
    4ea8:	01612823          	sw	s6,16(sp)
    4eac:	01712623          	sw	s7,12(sp)
    4eb0:	01812423          	sw	s8,8(sp)
    4eb4:	00060493          	mv	s1,a2
    4eb8:	1c058263          	beqz	a1,507c <_realloc_r+0x1f4>
    4ebc:	00058413          	mv	s0,a1
    4ec0:	00050913          	mv	s2,a0
    4ec4:	f49ff0ef          	jal	ra,4e0c <__malloc_lock>
    4ec8:	ffc42703          	lw	a4,-4(s0)
    4ecc:	00b48793          	addi	a5,s1,11
    4ed0:	01600693          	li	a3,22
    4ed4:	ff840a93          	addi	s5,s0,-8
    4ed8:	ffc77993          	andi	s3,a4,-4
    4edc:	0ef6f663          	bgeu	a3,a5,4fc8 <_realloc_r+0x140>
    4ee0:	ff87fa13          	andi	s4,a5,-8
    4ee4:	0e07c663          	bltz	a5,4fd0 <_realloc_r+0x148>
    4ee8:	0e9a6463          	bltu	s4,s1,4fd0 <_realloc_r+0x148>
    4eec:	1149d463          	bge	s3,s4,4ff4 <_realloc_r+0x16c>
    4ef0:	00004c17          	auipc	s8,0x4
    4ef4:	1e0c0c13          	addi	s8,s8,480 # 90d0 <__malloc_av_>
    4ef8:	008c2603          	lw	a2,8(s8)
    4efc:	013a86b3          	add	a3,s5,s3
    4f00:	0046a783          	lw	a5,4(a3)
    4f04:	1cd60e63          	beq	a2,a3,50e0 <_realloc_r+0x258>
    4f08:	ffe7f613          	andi	a2,a5,-2
    4f0c:	00c68633          	add	a2,a3,a2
    4f10:	00462603          	lw	a2,4(a2)
    4f14:	00167613          	andi	a2,a2,1
    4f18:	14061463          	bnez	a2,5060 <_realloc_r+0x1d8>
    4f1c:	ffc7f793          	andi	a5,a5,-4
    4f20:	00f98633          	add	a2,s3,a5
    4f24:	0b465e63          	bge	a2,s4,4fe0 <_realloc_r+0x158>
    4f28:	00177713          	andi	a4,a4,1
    4f2c:	02071463          	bnez	a4,4f54 <_realloc_r+0xcc>
    4f30:	ff842b83          	lw	s7,-8(s0)
    4f34:	417a8bb3          	sub	s7,s5,s7
    4f38:	004ba703          	lw	a4,4(s7)
    4f3c:	ffc77713          	andi	a4,a4,-4
    4f40:	00e787b3          	add	a5,a5,a4
    4f44:	01378b33          	add	s6,a5,s3
    4f48:	334b5463          	bge	s6,s4,5270 <_realloc_r+0x3e8>
    4f4c:	00e98b33          	add	s6,s3,a4
    4f50:	294b5663          	bge	s6,s4,51dc <_realloc_r+0x354>
    4f54:	00048593          	mv	a1,s1
    4f58:	00090513          	mv	a0,s2
    4f5c:	c54ff0ef          	jal	ra,43b0 <_malloc_r>
    4f60:	00050493          	mv	s1,a0
    4f64:	40050263          	beqz	a0,5368 <_realloc_r+0x4e0>
    4f68:	ffc42783          	lw	a5,-4(s0)
    4f6c:	ff850713          	addi	a4,a0,-8
    4f70:	ffe7f793          	andi	a5,a5,-2
    4f74:	00fa87b3          	add	a5,s5,a5
    4f78:	24e78a63          	beq	a5,a4,51cc <_realloc_r+0x344>
    4f7c:	ffc98613          	addi	a2,s3,-4
    4f80:	02400793          	li	a5,36
    4f84:	2ec7e063          	bltu	a5,a2,5264 <_realloc_r+0x3dc>
    4f88:	01300713          	li	a4,19
    4f8c:	20c76e63          	bltu	a4,a2,51a8 <_realloc_r+0x320>
    4f90:	00050793          	mv	a5,a0
    4f94:	00040713          	mv	a4,s0
    4f98:	00072683          	lw	a3,0(a4)
    4f9c:	00d7a023          	sw	a3,0(a5)
    4fa0:	00472683          	lw	a3,4(a4)
    4fa4:	00d7a223          	sw	a3,4(a5)
    4fa8:	00872703          	lw	a4,8(a4)
    4fac:	00e7a423          	sw	a4,8(a5)
    4fb0:	00090513          	mv	a0,s2
    4fb4:	00040593          	mv	a1,s0
    4fb8:	acdfe0ef          	jal	ra,3a84 <_free_r>
    4fbc:	00090513          	mv	a0,s2
    4fc0:	e59ff0ef          	jal	ra,4e18 <__malloc_unlock>
    4fc4:	0680006f          	j	502c <_realloc_r+0x1a4>
    4fc8:	01000a13          	li	s4,16
    4fcc:	f29a70e3          	bgeu	s4,s1,4eec <_realloc_r+0x64>
    4fd0:	00c00793          	li	a5,12
    4fd4:	00f92023          	sw	a5,0(s2)
    4fd8:	00000493          	li	s1,0
    4fdc:	0500006f          	j	502c <_realloc_r+0x1a4>
    4fe0:	00c6a783          	lw	a5,12(a3)
    4fe4:	0086a703          	lw	a4,8(a3)
    4fe8:	00060993          	mv	s3,a2
    4fec:	00f72623          	sw	a5,12(a4)
    4ff0:	00e7a423          	sw	a4,8(a5)
    4ff4:	004aa783          	lw	a5,4(s5)
    4ff8:	414986b3          	sub	a3,s3,s4
    4ffc:	00f00613          	li	a2,15
    5000:	0017f793          	andi	a5,a5,1
    5004:	013a8733          	add	a4,s5,s3
    5008:	0ad66463          	bltu	a2,a3,50b0 <_realloc_r+0x228>
    500c:	0137e7b3          	or	a5,a5,s3
    5010:	00faa223          	sw	a5,4(s5)
    5014:	00472783          	lw	a5,4(a4)
    5018:	0017e793          	ori	a5,a5,1
    501c:	00f72223          	sw	a5,4(a4)
    5020:	00090513          	mv	a0,s2
    5024:	df5ff0ef          	jal	ra,4e18 <__malloc_unlock>
    5028:	00040493          	mv	s1,s0
    502c:	02c12083          	lw	ra,44(sp)
    5030:	02812403          	lw	s0,40(sp)
    5034:	02012903          	lw	s2,32(sp)
    5038:	01c12983          	lw	s3,28(sp)
    503c:	01812a03          	lw	s4,24(sp)
    5040:	01412a83          	lw	s5,20(sp)
    5044:	01012b03          	lw	s6,16(sp)
    5048:	00c12b83          	lw	s7,12(sp)
    504c:	00812c03          	lw	s8,8(sp)
    5050:	00048513          	mv	a0,s1
    5054:	02412483          	lw	s1,36(sp)
    5058:	03010113          	addi	sp,sp,48
    505c:	00008067          	ret
    5060:	00177713          	andi	a4,a4,1
    5064:	ee0718e3          	bnez	a4,4f54 <_realloc_r+0xcc>
    5068:	ff842b83          	lw	s7,-8(s0)
    506c:	417a8bb3          	sub	s7,s5,s7
    5070:	004ba703          	lw	a4,4(s7)
    5074:	ffc77713          	andi	a4,a4,-4
    5078:	ed5ff06f          	j	4f4c <_realloc_r+0xc4>
    507c:	02812403          	lw	s0,40(sp)
    5080:	02c12083          	lw	ra,44(sp)
    5084:	02412483          	lw	s1,36(sp)
    5088:	02012903          	lw	s2,32(sp)
    508c:	01c12983          	lw	s3,28(sp)
    5090:	01812a03          	lw	s4,24(sp)
    5094:	01412a83          	lw	s5,20(sp)
    5098:	01012b03          	lw	s6,16(sp)
    509c:	00c12b83          	lw	s7,12(sp)
    50a0:	00812c03          	lw	s8,8(sp)
    50a4:	00060593          	mv	a1,a2
    50a8:	03010113          	addi	sp,sp,48
    50ac:	b04ff06f          	j	43b0 <_malloc_r>
    50b0:	0147e7b3          	or	a5,a5,s4
    50b4:	00faa223          	sw	a5,4(s5)
    50b8:	014a85b3          	add	a1,s5,s4
    50bc:	0016e693          	ori	a3,a3,1
    50c0:	00d5a223          	sw	a3,4(a1)
    50c4:	00472783          	lw	a5,4(a4)
    50c8:	00858593          	addi	a1,a1,8
    50cc:	00090513          	mv	a0,s2
    50d0:	0017e793          	ori	a5,a5,1
    50d4:	00f72223          	sw	a5,4(a4)
    50d8:	9adfe0ef          	jal	ra,3a84 <_free_r>
    50dc:	f45ff06f          	j	5020 <_realloc_r+0x198>
    50e0:	ffc7f793          	andi	a5,a5,-4
    50e4:	013786b3          	add	a3,a5,s3
    50e8:	010a0613          	addi	a2,s4,16
    50ec:	22c6de63          	bge	a3,a2,5328 <_realloc_r+0x4a0>
    50f0:	00177713          	andi	a4,a4,1
    50f4:	e60710e3          	bnez	a4,4f54 <_realloc_r+0xcc>
    50f8:	ff842b83          	lw	s7,-8(s0)
    50fc:	417a8bb3          	sub	s7,s5,s7
    5100:	004ba703          	lw	a4,4(s7)
    5104:	ffc77713          	andi	a4,a4,-4
    5108:	00e787b3          	add	a5,a5,a4
    510c:	01378b33          	add	s6,a5,s3
    5110:	e2cb4ee3          	blt	s6,a2,4f4c <_realloc_r+0xc4>
    5114:	00cba783          	lw	a5,12(s7)
    5118:	008ba703          	lw	a4,8(s7)
    511c:	ffc98613          	addi	a2,s3,-4
    5120:	02400693          	li	a3,36
    5124:	00f72623          	sw	a5,12(a4)
    5128:	00e7a423          	sw	a4,8(a5)
    512c:	008b8493          	addi	s1,s7,8
    5130:	26c6e263          	bltu	a3,a2,5394 <_realloc_r+0x50c>
    5134:	01300713          	li	a4,19
    5138:	00048793          	mv	a5,s1
    513c:	02c77263          	bgeu	a4,a2,5160 <_realloc_r+0x2d8>
    5140:	00042703          	lw	a4,0(s0)
    5144:	01b00793          	li	a5,27
    5148:	00eba423          	sw	a4,8(s7)
    514c:	00442703          	lw	a4,4(s0)
    5150:	00eba623          	sw	a4,12(s7)
    5154:	24c7e863          	bltu	a5,a2,53a4 <_realloc_r+0x51c>
    5158:	00840413          	addi	s0,s0,8
    515c:	010b8793          	addi	a5,s7,16
    5160:	00042703          	lw	a4,0(s0)
    5164:	00e7a023          	sw	a4,0(a5)
    5168:	00442703          	lw	a4,4(s0)
    516c:	00e7a223          	sw	a4,4(a5)
    5170:	00842703          	lw	a4,8(s0)
    5174:	00e7a423          	sw	a4,8(a5)
    5178:	014b8733          	add	a4,s7,s4
    517c:	414b07b3          	sub	a5,s6,s4
    5180:	00ec2423          	sw	a4,8(s8)
    5184:	0017e793          	ori	a5,a5,1
    5188:	00f72223          	sw	a5,4(a4)
    518c:	004ba783          	lw	a5,4(s7)
    5190:	00090513          	mv	a0,s2
    5194:	0017f793          	andi	a5,a5,1
    5198:	0147e7b3          	or	a5,a5,s4
    519c:	00fba223          	sw	a5,4(s7)
    51a0:	c79ff0ef          	jal	ra,4e18 <__malloc_unlock>
    51a4:	e89ff06f          	j	502c <_realloc_r+0x1a4>
    51a8:	00042683          	lw	a3,0(s0)
    51ac:	01b00713          	li	a4,27
    51b0:	00d52023          	sw	a3,0(a0)
    51b4:	00442683          	lw	a3,4(s0)
    51b8:	00d52223          	sw	a3,4(a0)
    51bc:	14c76663          	bltu	a4,a2,5308 <_realloc_r+0x480>
    51c0:	00840713          	addi	a4,s0,8
    51c4:	00850793          	addi	a5,a0,8
    51c8:	dd1ff06f          	j	4f98 <_realloc_r+0x110>
    51cc:	ffc52783          	lw	a5,-4(a0)
    51d0:	ffc7f793          	andi	a5,a5,-4
    51d4:	00f989b3          	add	s3,s3,a5
    51d8:	e1dff06f          	j	4ff4 <_realloc_r+0x16c>
    51dc:	00cba783          	lw	a5,12(s7)
    51e0:	008ba703          	lw	a4,8(s7)
    51e4:	ffc98613          	addi	a2,s3,-4
    51e8:	02400693          	li	a3,36
    51ec:	00f72623          	sw	a5,12(a4)
    51f0:	00e7a423          	sw	a4,8(a5)
    51f4:	008b8493          	addi	s1,s7,8
    51f8:	10c6e063          	bltu	a3,a2,52f8 <_realloc_r+0x470>
    51fc:	01300713          	li	a4,19
    5200:	00048793          	mv	a5,s1
    5204:	02c77c63          	bgeu	a4,a2,523c <_realloc_r+0x3b4>
    5208:	00042703          	lw	a4,0(s0)
    520c:	01b00793          	li	a5,27
    5210:	00eba423          	sw	a4,8(s7)
    5214:	00442703          	lw	a4,4(s0)
    5218:	00eba623          	sw	a4,12(s7)
    521c:	14c7f063          	bgeu	a5,a2,535c <_realloc_r+0x4d4>
    5220:	00842783          	lw	a5,8(s0)
    5224:	00fba823          	sw	a5,16(s7)
    5228:	00c42783          	lw	a5,12(s0)
    522c:	00fbaa23          	sw	a5,20(s7)
    5230:	0ad60663          	beq	a2,a3,52dc <_realloc_r+0x454>
    5234:	01040413          	addi	s0,s0,16
    5238:	018b8793          	addi	a5,s7,24
    523c:	00042703          	lw	a4,0(s0)
    5240:	00e7a023          	sw	a4,0(a5)
    5244:	00442703          	lw	a4,4(s0)
    5248:	00e7a223          	sw	a4,4(a5)
    524c:	00842703          	lw	a4,8(s0)
    5250:	00e7a423          	sw	a4,8(a5)
    5254:	00048413          	mv	s0,s1
    5258:	000b0993          	mv	s3,s6
    525c:	000b8a93          	mv	s5,s7
    5260:	d95ff06f          	j	4ff4 <_realloc_r+0x16c>
    5264:	00040593          	mv	a1,s0
    5268:	9adff0ef          	jal	ra,4c14 <memmove>
    526c:	d45ff06f          	j	4fb0 <_realloc_r+0x128>
    5270:	00c6a783          	lw	a5,12(a3)
    5274:	0086a703          	lw	a4,8(a3)
    5278:	ffc98613          	addi	a2,s3,-4
    527c:	02400693          	li	a3,36
    5280:	00f72623          	sw	a5,12(a4)
    5284:	00e7a423          	sw	a4,8(a5)
    5288:	008ba703          	lw	a4,8(s7)
    528c:	00cba783          	lw	a5,12(s7)
    5290:	008b8493          	addi	s1,s7,8
    5294:	00f72623          	sw	a5,12(a4)
    5298:	00e7a423          	sw	a4,8(a5)
    529c:	04c6ee63          	bltu	a3,a2,52f8 <_realloc_r+0x470>
    52a0:	01300713          	li	a4,19
    52a4:	00048793          	mv	a5,s1
    52a8:	f8c77ae3          	bgeu	a4,a2,523c <_realloc_r+0x3b4>
    52ac:	00042703          	lw	a4,0(s0)
    52b0:	01b00793          	li	a5,27
    52b4:	00eba423          	sw	a4,8(s7)
    52b8:	00442703          	lw	a4,4(s0)
    52bc:	00eba623          	sw	a4,12(s7)
    52c0:	08c7fe63          	bgeu	a5,a2,535c <_realloc_r+0x4d4>
    52c4:	00842703          	lw	a4,8(s0)
    52c8:	02400793          	li	a5,36
    52cc:	00eba823          	sw	a4,16(s7)
    52d0:	00c42703          	lw	a4,12(s0)
    52d4:	00ebaa23          	sw	a4,20(s7)
    52d8:	f4f61ee3          	bne	a2,a5,5234 <_realloc_r+0x3ac>
    52dc:	01042703          	lw	a4,16(s0)
    52e0:	020b8793          	addi	a5,s7,32
    52e4:	01840413          	addi	s0,s0,24
    52e8:	00ebac23          	sw	a4,24(s7)
    52ec:	ffc42703          	lw	a4,-4(s0)
    52f0:	00ebae23          	sw	a4,28(s7)
    52f4:	f49ff06f          	j	523c <_realloc_r+0x3b4>
    52f8:	00040593          	mv	a1,s0
    52fc:	00048513          	mv	a0,s1
    5300:	915ff0ef          	jal	ra,4c14 <memmove>
    5304:	f51ff06f          	j	5254 <_realloc_r+0x3cc>
    5308:	00842703          	lw	a4,8(s0)
    530c:	00e52423          	sw	a4,8(a0)
    5310:	00c42703          	lw	a4,12(s0)
    5314:	00e52623          	sw	a4,12(a0)
    5318:	06f60063          	beq	a2,a5,5378 <_realloc_r+0x4f0>
    531c:	01040713          	addi	a4,s0,16
    5320:	01050793          	addi	a5,a0,16
    5324:	c75ff06f          	j	4f98 <_realloc_r+0x110>
    5328:	014a8ab3          	add	s5,s5,s4
    532c:	414687b3          	sub	a5,a3,s4
    5330:	015c2423          	sw	s5,8(s8)
    5334:	0017e793          	ori	a5,a5,1
    5338:	00faa223          	sw	a5,4(s5)
    533c:	ffc42783          	lw	a5,-4(s0)
    5340:	00090513          	mv	a0,s2
    5344:	00040493          	mv	s1,s0
    5348:	0017f793          	andi	a5,a5,1
    534c:	0147e7b3          	or	a5,a5,s4
    5350:	fef42e23          	sw	a5,-4(s0)
    5354:	ac5ff0ef          	jal	ra,4e18 <__malloc_unlock>
    5358:	cd5ff06f          	j	502c <_realloc_r+0x1a4>
    535c:	00840413          	addi	s0,s0,8
    5360:	010b8793          	addi	a5,s7,16
    5364:	ed9ff06f          	j	523c <_realloc_r+0x3b4>
    5368:	00090513          	mv	a0,s2
    536c:	aadff0ef          	jal	ra,4e18 <__malloc_unlock>
    5370:	00000493          	li	s1,0
    5374:	cb9ff06f          	j	502c <_realloc_r+0x1a4>
    5378:	01042683          	lw	a3,16(s0)
    537c:	01840713          	addi	a4,s0,24
    5380:	01850793          	addi	a5,a0,24
    5384:	00d52823          	sw	a3,16(a0)
    5388:	01442683          	lw	a3,20(s0)
    538c:	00d52a23          	sw	a3,20(a0)
    5390:	c09ff06f          	j	4f98 <_realloc_r+0x110>
    5394:	00040593          	mv	a1,s0
    5398:	00048513          	mv	a0,s1
    539c:	879ff0ef          	jal	ra,4c14 <memmove>
    53a0:	dd9ff06f          	j	5178 <_realloc_r+0x2f0>
    53a4:	00842783          	lw	a5,8(s0)
    53a8:	00fba823          	sw	a5,16(s7)
    53ac:	00c42783          	lw	a5,12(s0)
    53b0:	00fbaa23          	sw	a5,20(s7)
    53b4:	00d60863          	beq	a2,a3,53c4 <_realloc_r+0x53c>
    53b8:	01040413          	addi	s0,s0,16
    53bc:	018b8793          	addi	a5,s7,24
    53c0:	da1ff06f          	j	5160 <_realloc_r+0x2d8>
    53c4:	01042703          	lw	a4,16(s0)
    53c8:	020b8793          	addi	a5,s7,32
    53cc:	01840413          	addi	s0,s0,24
    53d0:	00ebac23          	sw	a4,24(s7)
    53d4:	ffc42703          	lw	a4,-4(s0)
    53d8:	00ebae23          	sw	a4,28(s7)
    53dc:	d85ff06f          	j	5160 <_realloc_r+0x2d8>

000053e0 <_sbrk_r>:
    53e0:	ff010113          	addi	sp,sp,-16
    53e4:	00812423          	sw	s0,8(sp)
    53e8:	00050413          	mv	s0,a0
    53ec:	00058513          	mv	a0,a1
    53f0:	00006797          	auipc	a5,0x6
    53f4:	c607a823          	sw	zero,-912(a5) # b060 <errno>
    53f8:	00112623          	sw	ra,12(sp)
    53fc:	4a1010ef          	jal	ra,709c <_sbrk>
    5400:	fff00793          	li	a5,-1
    5404:	00f50a63          	beq	a0,a5,5418 <_sbrk_r+0x38>
    5408:	00c12083          	lw	ra,12(sp)
    540c:	00812403          	lw	s0,8(sp)
    5410:	01010113          	addi	sp,sp,16
    5414:	00008067          	ret
    5418:	00006797          	auipc	a5,0x6
    541c:	c487a783          	lw	a5,-952(a5) # b060 <errno>
    5420:	fe0784e3          	beqz	a5,5408 <_sbrk_r+0x28>
    5424:	00c12083          	lw	ra,12(sp)
    5428:	00f42023          	sw	a5,0(s0)
    542c:	00812403          	lw	s0,8(sp)
    5430:	01010113          	addi	sp,sp,16
    5434:	00008067          	ret

00005438 <_init_signal_r>:
    5438:	2dc52783          	lw	a5,732(a0)
    543c:	00078663          	beqz	a5,5448 <_init_signal_r+0x10>
    5440:	00000513          	li	a0,0
    5444:	00008067          	ret
    5448:	ff010113          	addi	sp,sp,-16
    544c:	08000593          	li	a1,128
    5450:	00812423          	sw	s0,8(sp)
    5454:	00112623          	sw	ra,12(sp)
    5458:	00050413          	mv	s0,a0
    545c:	f55fe0ef          	jal	ra,43b0 <_malloc_r>
    5460:	2ca42e23          	sw	a0,732(s0)
    5464:	02050463          	beqz	a0,548c <_init_signal_r+0x54>
    5468:	08050793          	addi	a5,a0,128
    546c:	00052023          	sw	zero,0(a0)
    5470:	00450513          	addi	a0,a0,4
    5474:	fef51ce3          	bne	a0,a5,546c <_init_signal_r+0x34>
    5478:	00000513          	li	a0,0
    547c:	00c12083          	lw	ra,12(sp)
    5480:	00812403          	lw	s0,8(sp)
    5484:	01010113          	addi	sp,sp,16
    5488:	00008067          	ret
    548c:	fff00513          	li	a0,-1
    5490:	fedff06f          	j	547c <_init_signal_r+0x44>

00005494 <_signal_r>:
    5494:	fe010113          	addi	sp,sp,-32
    5498:	00912a23          	sw	s1,20(sp)
    549c:	00112e23          	sw	ra,28(sp)
    54a0:	00812c23          	sw	s0,24(sp)
    54a4:	01f00793          	li	a5,31
    54a8:	00050493          	mv	s1,a0
    54ac:	02b7ea63          	bltu	a5,a1,54e0 <_signal_r+0x4c>
    54b0:	2dc52783          	lw	a5,732(a0)
    54b4:	00058413          	mv	s0,a1
    54b8:	02078c63          	beqz	a5,54f0 <_signal_r+0x5c>
    54bc:	00241413          	slli	s0,s0,0x2
    54c0:	008787b3          	add	a5,a5,s0
    54c4:	0007a503          	lw	a0,0(a5)
    54c8:	00c7a023          	sw	a2,0(a5)
    54cc:	01c12083          	lw	ra,28(sp)
    54d0:	01812403          	lw	s0,24(sp)
    54d4:	01412483          	lw	s1,20(sp)
    54d8:	02010113          	addi	sp,sp,32
    54dc:	00008067          	ret
    54e0:	01600793          	li	a5,22
    54e4:	00f52023          	sw	a5,0(a0)
    54e8:	fff00513          	li	a0,-1
    54ec:	fe1ff06f          	j	54cc <_signal_r+0x38>
    54f0:	08000593          	li	a1,128
    54f4:	00c12623          	sw	a2,12(sp)
    54f8:	eb9fe0ef          	jal	ra,43b0 <_malloc_r>
    54fc:	2ca4ae23          	sw	a0,732(s1)
    5500:	00c12603          	lw	a2,12(sp)
    5504:	00050793          	mv	a5,a0
    5508:	00050713          	mv	a4,a0
    550c:	08050693          	addi	a3,a0,128
    5510:	fc050ce3          	beqz	a0,54e8 <_signal_r+0x54>
    5514:	00072023          	sw	zero,0(a4)
    5518:	00470713          	addi	a4,a4,4
    551c:	fed71ce3          	bne	a4,a3,5514 <_signal_r+0x80>
    5520:	f9dff06f          	j	54bc <_signal_r+0x28>

00005524 <_raise_r>:
    5524:	ff010113          	addi	sp,sp,-16
    5528:	00912223          	sw	s1,4(sp)
    552c:	00112623          	sw	ra,12(sp)
    5530:	00812423          	sw	s0,8(sp)
    5534:	01f00793          	li	a5,31
    5538:	00050493          	mv	s1,a0
    553c:	08b7ee63          	bltu	a5,a1,55d8 <_raise_r+0xb4>
    5540:	2dc52783          	lw	a5,732(a0)
    5544:	00058413          	mv	s0,a1
    5548:	04078463          	beqz	a5,5590 <_raise_r+0x6c>
    554c:	00259713          	slli	a4,a1,0x2
    5550:	00e787b3          	add	a5,a5,a4
    5554:	0007a703          	lw	a4,0(a5)
    5558:	02070c63          	beqz	a4,5590 <_raise_r+0x6c>
    555c:	00100693          	li	a3,1
    5560:	00d70c63          	beq	a4,a3,5578 <_raise_r+0x54>
    5564:	fff00693          	li	a3,-1
    5568:	04d70863          	beq	a4,a3,55b8 <_raise_r+0x94>
    556c:	0007a023          	sw	zero,0(a5)
    5570:	00058513          	mv	a0,a1
    5574:	000700e7          	jalr	a4
    5578:	00000513          	li	a0,0
    557c:	00c12083          	lw	ra,12(sp)
    5580:	00812403          	lw	s0,8(sp)
    5584:	00412483          	lw	s1,4(sp)
    5588:	01010113          	addi	sp,sp,16
    558c:	00008067          	ret
    5590:	00048513          	mv	a0,s1
    5594:	420000ef          	jal	ra,59b4 <_getpid_r>
    5598:	00040613          	mv	a2,s0
    559c:	00812403          	lw	s0,8(sp)
    55a0:	00c12083          	lw	ra,12(sp)
    55a4:	00050593          	mv	a1,a0
    55a8:	00048513          	mv	a0,s1
    55ac:	00412483          	lw	s1,4(sp)
    55b0:	01010113          	addi	sp,sp,16
    55b4:	3a00006f          	j	5954 <_kill_r>
    55b8:	00c12083          	lw	ra,12(sp)
    55bc:	00812403          	lw	s0,8(sp)
    55c0:	01600793          	li	a5,22
    55c4:	00f52023          	sw	a5,0(a0)
    55c8:	00412483          	lw	s1,4(sp)
    55cc:	00100513          	li	a0,1
    55d0:	01010113          	addi	sp,sp,16
    55d4:	00008067          	ret
    55d8:	01600793          	li	a5,22
    55dc:	00f52023          	sw	a5,0(a0)
    55e0:	fff00513          	li	a0,-1
    55e4:	f99ff06f          	j	557c <_raise_r+0x58>

000055e8 <__sigtramp_r>:
    55e8:	01f00793          	li	a5,31
    55ec:	0cb7ea63          	bltu	a5,a1,56c0 <__sigtramp_r+0xd8>
    55f0:	2dc52783          	lw	a5,732(a0)
    55f4:	ff010113          	addi	sp,sp,-16
    55f8:	00812423          	sw	s0,8(sp)
    55fc:	00912223          	sw	s1,4(sp)
    5600:	00112623          	sw	ra,12(sp)
    5604:	00058413          	mv	s0,a1
    5608:	00050493          	mv	s1,a0
    560c:	08078063          	beqz	a5,568c <__sigtramp_r+0xa4>
    5610:	00241713          	slli	a4,s0,0x2
    5614:	00e787b3          	add	a5,a5,a4
    5618:	0007a703          	lw	a4,0(a5)
    561c:	02070c63          	beqz	a4,5654 <__sigtramp_r+0x6c>
    5620:	fff00693          	li	a3,-1
    5624:	06d70063          	beq	a4,a3,5684 <__sigtramp_r+0x9c>
    5628:	00100693          	li	a3,1
    562c:	04d70063          	beq	a4,a3,566c <__sigtramp_r+0x84>
    5630:	00040513          	mv	a0,s0
    5634:	0007a023          	sw	zero,0(a5)
    5638:	000700e7          	jalr	a4
    563c:	00000513          	li	a0,0
    5640:	00c12083          	lw	ra,12(sp)
    5644:	00812403          	lw	s0,8(sp)
    5648:	00412483          	lw	s1,4(sp)
    564c:	01010113          	addi	sp,sp,16
    5650:	00008067          	ret
    5654:	00c12083          	lw	ra,12(sp)
    5658:	00812403          	lw	s0,8(sp)
    565c:	00412483          	lw	s1,4(sp)
    5660:	00100513          	li	a0,1
    5664:	01010113          	addi	sp,sp,16
    5668:	00008067          	ret
    566c:	00c12083          	lw	ra,12(sp)
    5670:	00812403          	lw	s0,8(sp)
    5674:	00412483          	lw	s1,4(sp)
    5678:	00300513          	li	a0,3
    567c:	01010113          	addi	sp,sp,16
    5680:	00008067          	ret
    5684:	00200513          	li	a0,2
    5688:	fb9ff06f          	j	5640 <__sigtramp_r+0x58>
    568c:	08000593          	li	a1,128
    5690:	d21fe0ef          	jal	ra,43b0 <_malloc_r>
    5694:	2ca4ae23          	sw	a0,732(s1)
    5698:	00050793          	mv	a5,a0
    569c:	00050e63          	beqz	a0,56b8 <__sigtramp_r+0xd0>
    56a0:	00050713          	mv	a4,a0
    56a4:	08050693          	addi	a3,a0,128
    56a8:	00072023          	sw	zero,0(a4)
    56ac:	00470713          	addi	a4,a4,4
    56b0:	fee69ce3          	bne	a3,a4,56a8 <__sigtramp_r+0xc0>
    56b4:	f5dff06f          	j	5610 <__sigtramp_r+0x28>
    56b8:	fff00513          	li	a0,-1
    56bc:	f85ff06f          	j	5640 <__sigtramp_r+0x58>
    56c0:	fff00513          	li	a0,-1
    56c4:	00008067          	ret

000056c8 <raise>:
    56c8:	ff010113          	addi	sp,sp,-16
    56cc:	00912223          	sw	s1,4(sp)
    56d0:	00112623          	sw	ra,12(sp)
    56d4:	00812423          	sw	s0,8(sp)
    56d8:	01f00793          	li	a5,31
    56dc:	8241a483          	lw	s1,-2012(gp) # 94fc <_impure_ptr>
    56e0:	08a7ec63          	bltu	a5,a0,5778 <raise+0xb0>
    56e4:	2dc4a783          	lw	a5,732(s1)
    56e8:	00050413          	mv	s0,a0
    56ec:	04078263          	beqz	a5,5730 <raise+0x68>
    56f0:	00251713          	slli	a4,a0,0x2
    56f4:	00e787b3          	add	a5,a5,a4
    56f8:	0007a703          	lw	a4,0(a5)
    56fc:	02070a63          	beqz	a4,5730 <raise+0x68>
    5700:	00100693          	li	a3,1
    5704:	00d70a63          	beq	a4,a3,5718 <raise+0x50>
    5708:	fff00693          	li	a3,-1
    570c:	04d70663          	beq	a4,a3,5758 <raise+0x90>
    5710:	0007a023          	sw	zero,0(a5)
    5714:	000700e7          	jalr	a4
    5718:	00000513          	li	a0,0
    571c:	00c12083          	lw	ra,12(sp)
    5720:	00812403          	lw	s0,8(sp)
    5724:	00412483          	lw	s1,4(sp)
    5728:	01010113          	addi	sp,sp,16
    572c:	00008067          	ret
    5730:	00048513          	mv	a0,s1
    5734:	280000ef          	jal	ra,59b4 <_getpid_r>
    5738:	00040613          	mv	a2,s0
    573c:	00812403          	lw	s0,8(sp)
    5740:	00c12083          	lw	ra,12(sp)
    5744:	00050593          	mv	a1,a0
    5748:	00048513          	mv	a0,s1
    574c:	00412483          	lw	s1,4(sp)
    5750:	01010113          	addi	sp,sp,16
    5754:	2000006f          	j	5954 <_kill_r>
    5758:	00c12083          	lw	ra,12(sp)
    575c:	00812403          	lw	s0,8(sp)
    5760:	01600793          	li	a5,22
    5764:	00f4a023          	sw	a5,0(s1)
    5768:	00100513          	li	a0,1
    576c:	00412483          	lw	s1,4(sp)
    5770:	01010113          	addi	sp,sp,16
    5774:	00008067          	ret
    5778:	01600793          	li	a5,22
    577c:	00f4a023          	sw	a5,0(s1)
    5780:	fff00513          	li	a0,-1
    5784:	f99ff06f          	j	571c <raise+0x54>

00005788 <signal>:
    5788:	ff010113          	addi	sp,sp,-16
    578c:	01212023          	sw	s2,0(sp)
    5790:	00112623          	sw	ra,12(sp)
    5794:	00812423          	sw	s0,8(sp)
    5798:	00912223          	sw	s1,4(sp)
    579c:	01f00793          	li	a5,31
    57a0:	8241a903          	lw	s2,-2012(gp) # 94fc <_impure_ptr>
    57a4:	02a7ee63          	bltu	a5,a0,57e0 <signal+0x58>
    57a8:	00050413          	mv	s0,a0
    57ac:	2dc92503          	lw	a0,732(s2)
    57b0:	00058493          	mv	s1,a1
    57b4:	02050e63          	beqz	a0,57f0 <signal+0x68>
    57b8:	00241413          	slli	s0,s0,0x2
    57bc:	008507b3          	add	a5,a0,s0
    57c0:	0007a503          	lw	a0,0(a5)
    57c4:	0097a023          	sw	s1,0(a5)
    57c8:	00c12083          	lw	ra,12(sp)
    57cc:	00812403          	lw	s0,8(sp)
    57d0:	00412483          	lw	s1,4(sp)
    57d4:	00012903          	lw	s2,0(sp)
    57d8:	01010113          	addi	sp,sp,16
    57dc:	00008067          	ret
    57e0:	01600793          	li	a5,22
    57e4:	00f92023          	sw	a5,0(s2)
    57e8:	fff00513          	li	a0,-1
    57ec:	fddff06f          	j	57c8 <signal+0x40>
    57f0:	08000593          	li	a1,128
    57f4:	00090513          	mv	a0,s2
    57f8:	bb9fe0ef          	jal	ra,43b0 <_malloc_r>
    57fc:	2ca92e23          	sw	a0,732(s2)
    5800:	00050793          	mv	a5,a0
    5804:	08050713          	addi	a4,a0,128
    5808:	fe0500e3          	beqz	a0,57e8 <signal+0x60>
    580c:	0007a023          	sw	zero,0(a5)
    5810:	00478793          	addi	a5,a5,4
    5814:	fee79ce3          	bne	a5,a4,580c <signal+0x84>
    5818:	fa1ff06f          	j	57b8 <signal+0x30>

0000581c <_init_signal>:
    581c:	ff010113          	addi	sp,sp,-16
    5820:	00812423          	sw	s0,8(sp)
    5824:	8241a403          	lw	s0,-2012(gp) # 94fc <_impure_ptr>
    5828:	2dc42783          	lw	a5,732(s0)
    582c:	00112623          	sw	ra,12(sp)
    5830:	00078c63          	beqz	a5,5848 <_init_signal+0x2c>
    5834:	00000513          	li	a0,0
    5838:	00c12083          	lw	ra,12(sp)
    583c:	00812403          	lw	s0,8(sp)
    5840:	01010113          	addi	sp,sp,16
    5844:	00008067          	ret
    5848:	08000593          	li	a1,128
    584c:	00040513          	mv	a0,s0
    5850:	b61fe0ef          	jal	ra,43b0 <_malloc_r>
    5854:	2ca42e23          	sw	a0,732(s0)
    5858:	00050c63          	beqz	a0,5870 <_init_signal+0x54>
    585c:	08050793          	addi	a5,a0,128
    5860:	00052023          	sw	zero,0(a0)
    5864:	00450513          	addi	a0,a0,4
    5868:	fef51ce3          	bne	a0,a5,5860 <_init_signal+0x44>
    586c:	fc9ff06f          	j	5834 <_init_signal+0x18>
    5870:	fff00513          	li	a0,-1
    5874:	fc5ff06f          	j	5838 <_init_signal+0x1c>

00005878 <__sigtramp>:
    5878:	ff010113          	addi	sp,sp,-16
    587c:	00912223          	sw	s1,4(sp)
    5880:	00112623          	sw	ra,12(sp)
    5884:	00812423          	sw	s0,8(sp)
    5888:	01f00793          	li	a5,31
    588c:	8241a483          	lw	s1,-2012(gp) # 94fc <_impure_ptr>
    5890:	0aa7ee63          	bltu	a5,a0,594c <__sigtramp+0xd4>
    5894:	2dc4a783          	lw	a5,732(s1)
    5898:	00050413          	mv	s0,a0
    589c:	08078063          	beqz	a5,591c <__sigtramp+0xa4>
    58a0:	00241713          	slli	a4,s0,0x2
    58a4:	00e787b3          	add	a5,a5,a4
    58a8:	0007a703          	lw	a4,0(a5)
    58ac:	02070c63          	beqz	a4,58e4 <__sigtramp+0x6c>
    58b0:	fff00693          	li	a3,-1
    58b4:	06d70063          	beq	a4,a3,5914 <__sigtramp+0x9c>
    58b8:	00100693          	li	a3,1
    58bc:	04d70063          	beq	a4,a3,58fc <__sigtramp+0x84>
    58c0:	00040513          	mv	a0,s0
    58c4:	0007a023          	sw	zero,0(a5)
    58c8:	000700e7          	jalr	a4
    58cc:	00000513          	li	a0,0
    58d0:	00c12083          	lw	ra,12(sp)
    58d4:	00812403          	lw	s0,8(sp)
    58d8:	00412483          	lw	s1,4(sp)
    58dc:	01010113          	addi	sp,sp,16
    58e0:	00008067          	ret
    58e4:	00c12083          	lw	ra,12(sp)
    58e8:	00812403          	lw	s0,8(sp)
    58ec:	00412483          	lw	s1,4(sp)
    58f0:	00100513          	li	a0,1
    58f4:	01010113          	addi	sp,sp,16
    58f8:	00008067          	ret
    58fc:	00c12083          	lw	ra,12(sp)
    5900:	00812403          	lw	s0,8(sp)
    5904:	00412483          	lw	s1,4(sp)
    5908:	00300513          	li	a0,3
    590c:	01010113          	addi	sp,sp,16
    5910:	00008067          	ret
    5914:	00200513          	li	a0,2
    5918:	fb9ff06f          	j	58d0 <__sigtramp+0x58>
    591c:	08000593          	li	a1,128
    5920:	00048513          	mv	a0,s1
    5924:	a8dfe0ef          	jal	ra,43b0 <_malloc_r>
    5928:	2ca4ae23          	sw	a0,732(s1)
    592c:	00050793          	mv	a5,a0
    5930:	00050e63          	beqz	a0,594c <__sigtramp+0xd4>
    5934:	00050713          	mv	a4,a0
    5938:	08050693          	addi	a3,a0,128
    593c:	00072023          	sw	zero,0(a4)
    5940:	00470713          	addi	a4,a4,4
    5944:	fee69ce3          	bne	a3,a4,593c <__sigtramp+0xc4>
    5948:	f59ff06f          	j	58a0 <__sigtramp+0x28>
    594c:	fff00513          	li	a0,-1
    5950:	f81ff06f          	j	58d0 <__sigtramp+0x58>

00005954 <_kill_r>:
    5954:	ff010113          	addi	sp,sp,-16
    5958:	00058713          	mv	a4,a1
    595c:	00812423          	sw	s0,8(sp)
    5960:	00060593          	mv	a1,a2
    5964:	00050413          	mv	s0,a0
    5968:	00070513          	mv	a0,a4
    596c:	00005797          	auipc	a5,0x5
    5970:	6e07aa23          	sw	zero,1780(a5) # b060 <errno>
    5974:	00112623          	sw	ra,12(sp)
    5978:	110010ef          	jal	ra,6a88 <_kill>
    597c:	fff00793          	li	a5,-1
    5980:	00f50a63          	beq	a0,a5,5994 <_kill_r+0x40>
    5984:	00c12083          	lw	ra,12(sp)
    5988:	00812403          	lw	s0,8(sp)
    598c:	01010113          	addi	sp,sp,16
    5990:	00008067          	ret
    5994:	00005797          	auipc	a5,0x5
    5998:	6cc7a783          	lw	a5,1740(a5) # b060 <errno>
    599c:	fe0784e3          	beqz	a5,5984 <_kill_r+0x30>
    59a0:	00c12083          	lw	ra,12(sp)
    59a4:	00f42023          	sw	a5,0(s0)
    59a8:	00812403          	lw	s0,8(sp)
    59ac:	01010113          	addi	sp,sp,16
    59b0:	00008067          	ret

000059b4 <_getpid_r>:
    59b4:	7210006f          	j	68d4 <_getpid>

000059b8 <__sread>:
    59b8:	ff010113          	addi	sp,sp,-16
    59bc:	00812423          	sw	s0,8(sp)
    59c0:	00058413          	mv	s0,a1
    59c4:	00e59583          	lh	a1,14(a1)
    59c8:	00112623          	sw	ra,12(sp)
    59cc:	2dd000ef          	jal	ra,64a8 <_read_r>
    59d0:	02054063          	bltz	a0,59f0 <__sread+0x38>
    59d4:	05042783          	lw	a5,80(s0)
    59d8:	00c12083          	lw	ra,12(sp)
    59dc:	00a787b3          	add	a5,a5,a0
    59e0:	04f42823          	sw	a5,80(s0)
    59e4:	00812403          	lw	s0,8(sp)
    59e8:	01010113          	addi	sp,sp,16
    59ec:	00008067          	ret
    59f0:	00c45783          	lhu	a5,12(s0)
    59f4:	fffff737          	lui	a4,0xfffff
    59f8:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    59fc:	00e7f7b3          	and	a5,a5,a4
    5a00:	00c12083          	lw	ra,12(sp)
    5a04:	00f41623          	sh	a5,12(s0)
    5a08:	00812403          	lw	s0,8(sp)
    5a0c:	01010113          	addi	sp,sp,16
    5a10:	00008067          	ret

00005a14 <__seofread>:
    5a14:	00000513          	li	a0,0
    5a18:	00008067          	ret

00005a1c <__swrite>:
    5a1c:	00c59783          	lh	a5,12(a1)
    5a20:	fe010113          	addi	sp,sp,-32
    5a24:	00812c23          	sw	s0,24(sp)
    5a28:	00912a23          	sw	s1,20(sp)
    5a2c:	01212823          	sw	s2,16(sp)
    5a30:	01312623          	sw	s3,12(sp)
    5a34:	00112e23          	sw	ra,28(sp)
    5a38:	1007f713          	andi	a4,a5,256
    5a3c:	00058413          	mv	s0,a1
    5a40:	00050493          	mv	s1,a0
    5a44:	00060913          	mv	s2,a2
    5a48:	00068993          	mv	s3,a3
    5a4c:	04071063          	bnez	a4,5a8c <__swrite+0x70>
    5a50:	fffff737          	lui	a4,0xfffff
    5a54:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5a58:	00e7f7b3          	and	a5,a5,a4
    5a5c:	00e41583          	lh	a1,14(s0)
    5a60:	00f41623          	sh	a5,12(s0)
    5a64:	01812403          	lw	s0,24(sp)
    5a68:	01c12083          	lw	ra,28(sp)
    5a6c:	00098693          	mv	a3,s3
    5a70:	00090613          	mv	a2,s2
    5a74:	00c12983          	lw	s3,12(sp)
    5a78:	01012903          	lw	s2,16(sp)
    5a7c:	00048513          	mv	a0,s1
    5a80:	01412483          	lw	s1,20(sp)
    5a84:	02010113          	addi	sp,sp,32
    5a88:	eccfd06f          	j	3154 <_write_r>
    5a8c:	00e59583          	lh	a1,14(a1)
    5a90:	00200693          	li	a3,2
    5a94:	00000613          	li	a2,0
    5a98:	744000ef          	jal	ra,61dc <_lseek_r>
    5a9c:	00c41783          	lh	a5,12(s0)
    5aa0:	fb1ff06f          	j	5a50 <__swrite+0x34>

00005aa4 <__sseek>:
    5aa4:	ff010113          	addi	sp,sp,-16
    5aa8:	00812423          	sw	s0,8(sp)
    5aac:	00058413          	mv	s0,a1
    5ab0:	00e59583          	lh	a1,14(a1)
    5ab4:	00112623          	sw	ra,12(sp)
    5ab8:	724000ef          	jal	ra,61dc <_lseek_r>
    5abc:	fff00793          	li	a5,-1
    5ac0:	02f50863          	beq	a0,a5,5af0 <__sseek+0x4c>
    5ac4:	00c45783          	lhu	a5,12(s0)
    5ac8:	00001737          	lui	a4,0x1
    5acc:	00c12083          	lw	ra,12(sp)
    5ad0:	00e7e7b3          	or	a5,a5,a4
    5ad4:	01079793          	slli	a5,a5,0x10
    5ad8:	4107d793          	srai	a5,a5,0x10
    5adc:	04a42823          	sw	a0,80(s0)
    5ae0:	00f41623          	sh	a5,12(s0)
    5ae4:	00812403          	lw	s0,8(sp)
    5ae8:	01010113          	addi	sp,sp,16
    5aec:	00008067          	ret
    5af0:	00c45783          	lhu	a5,12(s0)
    5af4:	fffff737          	lui	a4,0xfffff
    5af8:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    5afc:	00e7f7b3          	and	a5,a5,a4
    5b00:	01079793          	slli	a5,a5,0x10
    5b04:	4107d793          	srai	a5,a5,0x10
    5b08:	00c12083          	lw	ra,12(sp)
    5b0c:	00f41623          	sh	a5,12(s0)
    5b10:	00812403          	lw	s0,8(sp)
    5b14:	01010113          	addi	sp,sp,16
    5b18:	00008067          	ret

00005b1c <__sclose>:
    5b1c:	00e59583          	lh	a1,14(a1)
    5b20:	8d5fd06f          	j	33f4 <_close_r>

00005b24 <__swsetup_r>:
    5b24:	ff010113          	addi	sp,sp,-16
    5b28:	00812423          	sw	s0,8(sp)
    5b2c:	00912223          	sw	s1,4(sp)
    5b30:	00112623          	sw	ra,12(sp)
    5b34:	8241a783          	lw	a5,-2012(gp) # 94fc <_impure_ptr>
    5b38:	00050493          	mv	s1,a0
    5b3c:	00058413          	mv	s0,a1
    5b40:	00078663          	beqz	a5,5b4c <__swsetup_r+0x28>
    5b44:	0387a703          	lw	a4,56(a5)
    5b48:	08070063          	beqz	a4,5bc8 <__swsetup_r+0xa4>
    5b4c:	00c41783          	lh	a5,12(s0)
    5b50:	0087f713          	andi	a4,a5,8
    5b54:	08070463          	beqz	a4,5bdc <__swsetup_r+0xb8>
    5b58:	01042703          	lw	a4,16(s0)
    5b5c:	0a070063          	beqz	a4,5bfc <__swsetup_r+0xd8>
    5b60:	0017f693          	andi	a3,a5,1
    5b64:	02068863          	beqz	a3,5b94 <__swsetup_r+0x70>
    5b68:	01442683          	lw	a3,20(s0)
    5b6c:	00042423          	sw	zero,8(s0)
    5b70:	00000513          	li	a0,0
    5b74:	40d006b3          	neg	a3,a3
    5b78:	00d42c23          	sw	a3,24(s0)
    5b7c:	02070a63          	beqz	a4,5bb0 <__swsetup_r+0x8c>
    5b80:	00c12083          	lw	ra,12(sp)
    5b84:	00812403          	lw	s0,8(sp)
    5b88:	00412483          	lw	s1,4(sp)
    5b8c:	01010113          	addi	sp,sp,16
    5b90:	00008067          	ret
    5b94:	0027f693          	andi	a3,a5,2
    5b98:	00000613          	li	a2,0
    5b9c:	00069463          	bnez	a3,5ba4 <__swsetup_r+0x80>
    5ba0:	01442603          	lw	a2,20(s0)
    5ba4:	00c42423          	sw	a2,8(s0)
    5ba8:	00000513          	li	a0,0
    5bac:	fc071ae3          	bnez	a4,5b80 <__swsetup_r+0x5c>
    5bb0:	0807f713          	andi	a4,a5,128
    5bb4:	fc0706e3          	beqz	a4,5b80 <__swsetup_r+0x5c>
    5bb8:	0407e793          	ori	a5,a5,64
    5bbc:	00f41623          	sh	a5,12(s0)
    5bc0:	fff00513          	li	a0,-1
    5bc4:	fbdff06f          	j	5b80 <__swsetup_r+0x5c>
    5bc8:	00078513          	mv	a0,a5
    5bcc:	98dfd0ef          	jal	ra,3558 <__sinit>
    5bd0:	00c41783          	lh	a5,12(s0)
    5bd4:	0087f713          	andi	a4,a5,8
    5bd8:	f80710e3          	bnez	a4,5b58 <__swsetup_r+0x34>
    5bdc:	0107f713          	andi	a4,a5,16
    5be0:	06070a63          	beqz	a4,5c54 <__swsetup_r+0x130>
    5be4:	0047f713          	andi	a4,a5,4
    5be8:	02071c63          	bnez	a4,5c20 <__swsetup_r+0xfc>
    5bec:	01042703          	lw	a4,16(s0)
    5bf0:	0087e793          	ori	a5,a5,8
    5bf4:	00f41623          	sh	a5,12(s0)
    5bf8:	f60714e3          	bnez	a4,5b60 <__swsetup_r+0x3c>
    5bfc:	2807f693          	andi	a3,a5,640
    5c00:	20000613          	li	a2,512
    5c04:	f4c68ee3          	beq	a3,a2,5b60 <__swsetup_r+0x3c>
    5c08:	00040593          	mv	a1,s0
    5c0c:	00048513          	mv	a0,s1
    5c10:	630000ef          	jal	ra,6240 <__smakebuf_r>
    5c14:	00c41783          	lh	a5,12(s0)
    5c18:	01042703          	lw	a4,16(s0)
    5c1c:	f45ff06f          	j	5b60 <__swsetup_r+0x3c>
    5c20:	03042583          	lw	a1,48(s0)
    5c24:	00058e63          	beqz	a1,5c40 <__swsetup_r+0x11c>
    5c28:	04040713          	addi	a4,s0,64
    5c2c:	00e58863          	beq	a1,a4,5c3c <__swsetup_r+0x118>
    5c30:	00048513          	mv	a0,s1
    5c34:	e51fd0ef          	jal	ra,3a84 <_free_r>
    5c38:	00c41783          	lh	a5,12(s0)
    5c3c:	02042823          	sw	zero,48(s0)
    5c40:	01042703          	lw	a4,16(s0)
    5c44:	fdb7f793          	andi	a5,a5,-37
    5c48:	00042223          	sw	zero,4(s0)
    5c4c:	00e42023          	sw	a4,0(s0)
    5c50:	fa1ff06f          	j	5bf0 <__swsetup_r+0xcc>
    5c54:	00900713          	li	a4,9
    5c58:	00e4a023          	sw	a4,0(s1)
    5c5c:	0407e793          	ori	a5,a5,64
    5c60:	f5dff06f          	j	5bbc <__swsetup_r+0x98>

00005c64 <_fclose_r>:
    5c64:	ff010113          	addi	sp,sp,-16
    5c68:	00112623          	sw	ra,12(sp)
    5c6c:	00812423          	sw	s0,8(sp)
    5c70:	00912223          	sw	s1,4(sp)
    5c74:	01212023          	sw	s2,0(sp)
    5c78:	0c058a63          	beqz	a1,5d4c <_fclose_r+0xe8>
    5c7c:	00058413          	mv	s0,a1
    5c80:	00050493          	mv	s1,a0
    5c84:	00050663          	beqz	a0,5c90 <_fclose_r+0x2c>
    5c88:	03852783          	lw	a5,56(a0)
    5c8c:	0e078063          	beqz	a5,5d6c <_fclose_r+0x108>
    5c90:	06442783          	lw	a5,100(s0)
    5c94:	00c41703          	lh	a4,12(s0)
    5c98:	0017f793          	andi	a5,a5,1
    5c9c:	0a079663          	bnez	a5,5d48 <_fclose_r+0xe4>
    5ca0:	20077713          	andi	a4,a4,512
    5ca4:	10070063          	beqz	a4,5da4 <_fclose_r+0x140>
    5ca8:	00040593          	mv	a1,s0
    5cac:	00048513          	mv	a0,s1
    5cb0:	138000ef          	jal	ra,5de8 <__sflush_r>
    5cb4:	02c42783          	lw	a5,44(s0)
    5cb8:	00050913          	mv	s2,a0
    5cbc:	00078a63          	beqz	a5,5cd0 <_fclose_r+0x6c>
    5cc0:	01c42583          	lw	a1,28(s0)
    5cc4:	00048513          	mv	a0,s1
    5cc8:	000780e7          	jalr	a5
    5ccc:	0a054c63          	bltz	a0,5d84 <_fclose_r+0x120>
    5cd0:	00c45783          	lhu	a5,12(s0)
    5cd4:	0807f793          	andi	a5,a5,128
    5cd8:	0a079e63          	bnez	a5,5d94 <_fclose_r+0x130>
    5cdc:	03042583          	lw	a1,48(s0)
    5ce0:	00058c63          	beqz	a1,5cf8 <_fclose_r+0x94>
    5ce4:	04040793          	addi	a5,s0,64
    5ce8:	00f58663          	beq	a1,a5,5cf4 <_fclose_r+0x90>
    5cec:	00048513          	mv	a0,s1
    5cf0:	d95fd0ef          	jal	ra,3a84 <_free_r>
    5cf4:	02042823          	sw	zero,48(s0)
    5cf8:	04442583          	lw	a1,68(s0)
    5cfc:	00058863          	beqz	a1,5d0c <_fclose_r+0xa8>
    5d00:	00048513          	mv	a0,s1
    5d04:	d81fd0ef          	jal	ra,3a84 <_free_r>
    5d08:	04042223          	sw	zero,68(s0)
    5d0c:	b59fd0ef          	jal	ra,3864 <__sfp_lock_acquire>
    5d10:	06442783          	lw	a5,100(s0)
    5d14:	00041623          	sh	zero,12(s0)
    5d18:	0017f793          	andi	a5,a5,1
    5d1c:	0a078a63          	beqz	a5,5dd0 <_fclose_r+0x16c>
    5d20:	05842503          	lw	a0,88(s0)
    5d24:	e68fe0ef          	jal	ra,438c <__retarget_lock_close_recursive>
    5d28:	b49fd0ef          	jal	ra,3870 <__sfp_lock_release>
    5d2c:	00c12083          	lw	ra,12(sp)
    5d30:	00812403          	lw	s0,8(sp)
    5d34:	00412483          	lw	s1,4(sp)
    5d38:	00090513          	mv	a0,s2
    5d3c:	00012903          	lw	s2,0(sp)
    5d40:	01010113          	addi	sp,sp,16
    5d44:	00008067          	ret
    5d48:	f60710e3          	bnez	a4,5ca8 <_fclose_r+0x44>
    5d4c:	00000913          	li	s2,0
    5d50:	00c12083          	lw	ra,12(sp)
    5d54:	00812403          	lw	s0,8(sp)
    5d58:	00412483          	lw	s1,4(sp)
    5d5c:	00090513          	mv	a0,s2
    5d60:	00012903          	lw	s2,0(sp)
    5d64:	01010113          	addi	sp,sp,16
    5d68:	00008067          	ret
    5d6c:	fecfd0ef          	jal	ra,3558 <__sinit>
    5d70:	06442783          	lw	a5,100(s0)
    5d74:	00c41703          	lh	a4,12(s0)
    5d78:	0017f793          	andi	a5,a5,1
    5d7c:	fc0796e3          	bnez	a5,5d48 <_fclose_r+0xe4>
    5d80:	f21ff06f          	j	5ca0 <_fclose_r+0x3c>
    5d84:	00c45783          	lhu	a5,12(s0)
    5d88:	fff00913          	li	s2,-1
    5d8c:	0807f793          	andi	a5,a5,128
    5d90:	f40786e3          	beqz	a5,5cdc <_fclose_r+0x78>
    5d94:	01042583          	lw	a1,16(s0)
    5d98:	00048513          	mv	a0,s1
    5d9c:	ce9fd0ef          	jal	ra,3a84 <_free_r>
    5da0:	f3dff06f          	j	5cdc <_fclose_r+0x78>
    5da4:	05842503          	lw	a0,88(s0)
    5da8:	decfe0ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    5dac:	00c41783          	lh	a5,12(s0)
    5db0:	ee079ce3          	bnez	a5,5ca8 <_fclose_r+0x44>
    5db4:	06442783          	lw	a5,100(s0)
    5db8:	0017f793          	andi	a5,a5,1
    5dbc:	f80798e3          	bnez	a5,5d4c <_fclose_r+0xe8>
    5dc0:	05842503          	lw	a0,88(s0)
    5dc4:	00000913          	li	s2,0
    5dc8:	de4fe0ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    5dcc:	f85ff06f          	j	5d50 <_fclose_r+0xec>
    5dd0:	05842503          	lw	a0,88(s0)
    5dd4:	dd8fe0ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    5dd8:	f49ff06f          	j	5d20 <_fclose_r+0xbc>

00005ddc <fclose>:
    5ddc:	00050593          	mv	a1,a0
    5de0:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    5de4:	e81ff06f          	j	5c64 <_fclose_r>

00005de8 <__sflush_r>:
    5de8:	00c59783          	lh	a5,12(a1)
    5dec:	fe010113          	addi	sp,sp,-32
    5df0:	00812c23          	sw	s0,24(sp)
    5df4:	01312623          	sw	s3,12(sp)
    5df8:	00112e23          	sw	ra,28(sp)
    5dfc:	00912a23          	sw	s1,20(sp)
    5e00:	01212823          	sw	s2,16(sp)
    5e04:	0087f713          	andi	a4,a5,8
    5e08:	00058413          	mv	s0,a1
    5e0c:	00050993          	mv	s3,a0
    5e10:	12071263          	bnez	a4,5f34 <__sflush_r+0x14c>
    5e14:	00001737          	lui	a4,0x1
    5e18:	80070713          	addi	a4,a4,-2048 # 800 <alt_log_private_printf+0x250>
    5e1c:	0045a683          	lw	a3,4(a1)
    5e20:	00e7e733          	or	a4,a5,a4
    5e24:	00e59623          	sh	a4,12(a1)
    5e28:	18d05863          	blez	a3,5fb8 <__sflush_r+0x1d0>
    5e2c:	02842803          	lw	a6,40(s0)
    5e30:	0e080263          	beqz	a6,5f14 <__sflush_r+0x12c>
    5e34:	00c7d793          	srli	a5,a5,0xc
    5e38:	0009a483          	lw	s1,0(s3)
    5e3c:	0017f793          	andi	a5,a5,1
    5e40:	0009a023          	sw	zero,0(s3)
    5e44:	01c42583          	lw	a1,28(s0)
    5e48:	18079063          	bnez	a5,5fc8 <__sflush_r+0x1e0>
    5e4c:	00000613          	li	a2,0
    5e50:	00100693          	li	a3,1
    5e54:	00098513          	mv	a0,s3
    5e58:	000800e7          	jalr	a6
    5e5c:	fff00793          	li	a5,-1
    5e60:	00050613          	mv	a2,a0
    5e64:	1af50063          	beq	a0,a5,6004 <__sflush_r+0x21c>
    5e68:	00c41703          	lh	a4,12(s0)
    5e6c:	02842803          	lw	a6,40(s0)
    5e70:	01c42583          	lw	a1,28(s0)
    5e74:	00477713          	andi	a4,a4,4
    5e78:	00070e63          	beqz	a4,5e94 <__sflush_r+0xac>
    5e7c:	00442703          	lw	a4,4(s0)
    5e80:	03042783          	lw	a5,48(s0)
    5e84:	40e60633          	sub	a2,a2,a4
    5e88:	00078663          	beqz	a5,5e94 <__sflush_r+0xac>
    5e8c:	03c42783          	lw	a5,60(s0)
    5e90:	40f60633          	sub	a2,a2,a5
    5e94:	00000693          	li	a3,0
    5e98:	00098513          	mv	a0,s3
    5e9c:	000800e7          	jalr	a6
    5ea0:	fff00793          	li	a5,-1
    5ea4:	12f51663          	bne	a0,a5,5fd0 <__sflush_r+0x1e8>
    5ea8:	0009a683          	lw	a3,0(s3)
    5eac:	01d00793          	li	a5,29
    5eb0:	0cd7ee63          	bltu	a5,a3,5f8c <__sflush_r+0x1a4>
    5eb4:	dfc00737          	lui	a4,0xdfc00
    5eb8:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xdfbefffe>
    5ebc:	40d75733          	sra	a4,a4,a3
    5ec0:	00177713          	andi	a4,a4,1
    5ec4:	00c41783          	lh	a5,12(s0)
    5ec8:	0c071463          	bnez	a4,5f90 <__sflush_r+0x1a8>
    5ecc:	01042603          	lw	a2,16(s0)
    5ed0:	fffff737          	lui	a4,0xfffff
    5ed4:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    5ed8:	00e7f733          	and	a4,a5,a4
    5edc:	00c7d793          	srli	a5,a5,0xc
    5ee0:	00e41623          	sh	a4,12(s0)
    5ee4:	00042223          	sw	zero,4(s0)
    5ee8:	00c42023          	sw	a2,0(s0)
    5eec:	0017f793          	andi	a5,a5,1
    5ef0:	12079c63          	bnez	a5,6028 <__sflush_r+0x240>
    5ef4:	03042583          	lw	a1,48(s0)
    5ef8:	0099a023          	sw	s1,0(s3)
    5efc:	00058c63          	beqz	a1,5f14 <__sflush_r+0x12c>
    5f00:	04040793          	addi	a5,s0,64
    5f04:	00f58663          	beq	a1,a5,5f10 <__sflush_r+0x128>
    5f08:	00098513          	mv	a0,s3
    5f0c:	b79fd0ef          	jal	ra,3a84 <_free_r>
    5f10:	02042823          	sw	zero,48(s0)
    5f14:	00000513          	li	a0,0
    5f18:	01c12083          	lw	ra,28(sp)
    5f1c:	01812403          	lw	s0,24(sp)
    5f20:	01412483          	lw	s1,20(sp)
    5f24:	01012903          	lw	s2,16(sp)
    5f28:	00c12983          	lw	s3,12(sp)
    5f2c:	02010113          	addi	sp,sp,32
    5f30:	00008067          	ret
    5f34:	0105a903          	lw	s2,16(a1)
    5f38:	fc090ee3          	beqz	s2,5f14 <__sflush_r+0x12c>
    5f3c:	0005a483          	lw	s1,0(a1)
    5f40:	0037f793          	andi	a5,a5,3
    5f44:	0125a023          	sw	s2,0(a1)
    5f48:	412484b3          	sub	s1,s1,s2
    5f4c:	00000713          	li	a4,0
    5f50:	00079463          	bnez	a5,5f58 <__sflush_r+0x170>
    5f54:	0145a703          	lw	a4,20(a1)
    5f58:	00e42423          	sw	a4,8(s0)
    5f5c:	00904863          	bgtz	s1,5f6c <__sflush_r+0x184>
    5f60:	fb5ff06f          	j	5f14 <__sflush_r+0x12c>
    5f64:	00a90933          	add	s2,s2,a0
    5f68:	fa9056e3          	blez	s1,5f14 <__sflush_r+0x12c>
    5f6c:	02442783          	lw	a5,36(s0)
    5f70:	01c42583          	lw	a1,28(s0)
    5f74:	00048693          	mv	a3,s1
    5f78:	00090613          	mv	a2,s2
    5f7c:	00098513          	mv	a0,s3
    5f80:	000780e7          	jalr	a5
    5f84:	40a484b3          	sub	s1,s1,a0
    5f88:	fca04ee3          	bgtz	a0,5f64 <__sflush_r+0x17c>
    5f8c:	00c41783          	lh	a5,12(s0)
    5f90:	0407e793          	ori	a5,a5,64
    5f94:	01c12083          	lw	ra,28(sp)
    5f98:	00f41623          	sh	a5,12(s0)
    5f9c:	01812403          	lw	s0,24(sp)
    5fa0:	01412483          	lw	s1,20(sp)
    5fa4:	01012903          	lw	s2,16(sp)
    5fa8:	00c12983          	lw	s3,12(sp)
    5fac:	fff00513          	li	a0,-1
    5fb0:	02010113          	addi	sp,sp,32
    5fb4:	00008067          	ret
    5fb8:	03c5a683          	lw	a3,60(a1)
    5fbc:	e6d048e3          	bgtz	a3,5e2c <__sflush_r+0x44>
    5fc0:	00000513          	li	a0,0
    5fc4:	f55ff06f          	j	5f18 <__sflush_r+0x130>
    5fc8:	05042603          	lw	a2,80(s0)
    5fcc:	ea9ff06f          	j	5e74 <__sflush_r+0x8c>
    5fd0:	00c41783          	lh	a5,12(s0)
    5fd4:	01042683          	lw	a3,16(s0)
    5fd8:	fffff737          	lui	a4,0xfffff
    5fdc:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    5fe0:	00e7f733          	and	a4,a5,a4
    5fe4:	00c7d793          	srli	a5,a5,0xc
    5fe8:	00e41623          	sh	a4,12(s0)
    5fec:	00042223          	sw	zero,4(s0)
    5ff0:	00d42023          	sw	a3,0(s0)
    5ff4:	0017f793          	andi	a5,a5,1
    5ff8:	ee078ee3          	beqz	a5,5ef4 <__sflush_r+0x10c>
    5ffc:	04a42823          	sw	a0,80(s0)
    6000:	ef5ff06f          	j	5ef4 <__sflush_r+0x10c>
    6004:	0009a783          	lw	a5,0(s3)
    6008:	e60780e3          	beqz	a5,5e68 <__sflush_r+0x80>
    600c:	01d00713          	li	a4,29
    6010:	00e78663          	beq	a5,a4,601c <__sflush_r+0x234>
    6014:	01600713          	li	a4,22
    6018:	f6e79ae3          	bne	a5,a4,5f8c <__sflush_r+0x1a4>
    601c:	0099a023          	sw	s1,0(s3)
    6020:	00000513          	li	a0,0
    6024:	ef5ff06f          	j	5f18 <__sflush_r+0x130>
    6028:	ec0696e3          	bnez	a3,5ef4 <__sflush_r+0x10c>
    602c:	04a42823          	sw	a0,80(s0)
    6030:	ec5ff06f          	j	5ef4 <__sflush_r+0x10c>

00006034 <_fflush_r>:
    6034:	ff010113          	addi	sp,sp,-16
    6038:	00812423          	sw	s0,8(sp)
    603c:	00912223          	sw	s1,4(sp)
    6040:	00112623          	sw	ra,12(sp)
    6044:	01212023          	sw	s2,0(sp)
    6048:	00050493          	mv	s1,a0
    604c:	00058413          	mv	s0,a1
    6050:	00050663          	beqz	a0,605c <_fflush_r+0x28>
    6054:	03852783          	lw	a5,56(a0)
    6058:	06078463          	beqz	a5,60c0 <_fflush_r+0x8c>
    605c:	00c41783          	lh	a5,12(s0)
    6060:	00000913          	li	s2,0
    6064:	04078063          	beqz	a5,60a4 <_fflush_r+0x70>
    6068:	06442703          	lw	a4,100(s0)
    606c:	00177713          	andi	a4,a4,1
    6070:	00071663          	bnez	a4,607c <_fflush_r+0x48>
    6074:	2007f793          	andi	a5,a5,512
    6078:	04078863          	beqz	a5,60c8 <_fflush_r+0x94>
    607c:	00040593          	mv	a1,s0
    6080:	00048513          	mv	a0,s1
    6084:	d65ff0ef          	jal	ra,5de8 <__sflush_r>
    6088:	06442783          	lw	a5,100(s0)
    608c:	00050913          	mv	s2,a0
    6090:	0017f793          	andi	a5,a5,1
    6094:	00079863          	bnez	a5,60a4 <_fflush_r+0x70>
    6098:	00c45783          	lhu	a5,12(s0)
    609c:	2007f793          	andi	a5,a5,512
    60a0:	04078863          	beqz	a5,60f0 <_fflush_r+0xbc>
    60a4:	00c12083          	lw	ra,12(sp)
    60a8:	00812403          	lw	s0,8(sp)
    60ac:	00412483          	lw	s1,4(sp)
    60b0:	00090513          	mv	a0,s2
    60b4:	00012903          	lw	s2,0(sp)
    60b8:	01010113          	addi	sp,sp,16
    60bc:	00008067          	ret
    60c0:	c98fd0ef          	jal	ra,3558 <__sinit>
    60c4:	f99ff06f          	j	605c <_fflush_r+0x28>
    60c8:	05842503          	lw	a0,88(s0)
    60cc:	ac8fe0ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    60d0:	00040593          	mv	a1,s0
    60d4:	00048513          	mv	a0,s1
    60d8:	d11ff0ef          	jal	ra,5de8 <__sflush_r>
    60dc:	06442783          	lw	a5,100(s0)
    60e0:	00050913          	mv	s2,a0
    60e4:	0017f793          	andi	a5,a5,1
    60e8:	fa079ee3          	bnez	a5,60a4 <_fflush_r+0x70>
    60ec:	fadff06f          	j	6098 <_fflush_r+0x64>
    60f0:	05842503          	lw	a0,88(s0)
    60f4:	ab8fe0ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    60f8:	00c12083          	lw	ra,12(sp)
    60fc:	00812403          	lw	s0,8(sp)
    6100:	00412483          	lw	s1,4(sp)
    6104:	00090513          	mv	a0,s2
    6108:	00012903          	lw	s2,0(sp)
    610c:	01010113          	addi	sp,sp,16
    6110:	00008067          	ret

00006114 <fflush>:
    6114:	0a050a63          	beqz	a0,61c8 <fflush+0xb4>
    6118:	ff010113          	addi	sp,sp,-16
    611c:	00812423          	sw	s0,8(sp)
    6120:	01212023          	sw	s2,0(sp)
    6124:	00112623          	sw	ra,12(sp)
    6128:	00912223          	sw	s1,4(sp)
    612c:	8241a903          	lw	s2,-2012(gp) # 94fc <_impure_ptr>
    6130:	00050413          	mv	s0,a0
    6134:	00090663          	beqz	s2,6140 <fflush+0x2c>
    6138:	03892783          	lw	a5,56(s2)
    613c:	06078463          	beqz	a5,61a4 <fflush+0x90>
    6140:	00c41783          	lh	a5,12(s0)
    6144:	00000493          	li	s1,0
    6148:	04078063          	beqz	a5,6188 <fflush+0x74>
    614c:	06442703          	lw	a4,100(s0)
    6150:	00177713          	andi	a4,a4,1
    6154:	00071663          	bnez	a4,6160 <fflush+0x4c>
    6158:	2007f793          	andi	a5,a5,512
    615c:	04078a63          	beqz	a5,61b0 <fflush+0x9c>
    6160:	00040593          	mv	a1,s0
    6164:	00090513          	mv	a0,s2
    6168:	c81ff0ef          	jal	ra,5de8 <__sflush_r>
    616c:	06442783          	lw	a5,100(s0)
    6170:	00050493          	mv	s1,a0
    6174:	0017f793          	andi	a5,a5,1
    6178:	00079863          	bnez	a5,6188 <fflush+0x74>
    617c:	00c45783          	lhu	a5,12(s0)
    6180:	2007f793          	andi	a5,a5,512
    6184:	02078c63          	beqz	a5,61bc <fflush+0xa8>
    6188:	00c12083          	lw	ra,12(sp)
    618c:	00812403          	lw	s0,8(sp)
    6190:	00012903          	lw	s2,0(sp)
    6194:	00048513          	mv	a0,s1
    6198:	00412483          	lw	s1,4(sp)
    619c:	01010113          	addi	sp,sp,16
    61a0:	00008067          	ret
    61a4:	00090513          	mv	a0,s2
    61a8:	bb0fd0ef          	jal	ra,3558 <__sinit>
    61ac:	f95ff06f          	j	6140 <fflush+0x2c>
    61b0:	05842503          	lw	a0,88(s0)
    61b4:	9e0fe0ef          	jal	ra,4394 <__retarget_lock_acquire_recursive>
    61b8:	fa9ff06f          	j	6160 <fflush+0x4c>
    61bc:	05842503          	lw	a0,88(s0)
    61c0:	9ecfe0ef          	jal	ra,43ac <__retarget_lock_release_recursive>
    61c4:	fc5ff06f          	j	6188 <fflush+0x74>
    61c8:	00000597          	auipc	a1,0x0
    61cc:	e6c58593          	addi	a1,a1,-404 # 6034 <_fflush_r>
    61d0:	00002517          	auipc	a0,0x2
    61d4:	83052503          	lw	a0,-2000(a0) # 7a00 <_global_impure_ptr>
    61d8:	8f4fe06f          	j	42cc <_fwalk_reent>

000061dc <_lseek_r>:
    61dc:	ff010113          	addi	sp,sp,-16
    61e0:	00058713          	mv	a4,a1
    61e4:	00812423          	sw	s0,8(sp)
    61e8:	00060593          	mv	a1,a2
    61ec:	00050413          	mv	s0,a0
    61f0:	00068613          	mv	a2,a3
    61f4:	00070513          	mv	a0,a4
    61f8:	00005797          	auipc	a5,0x5
    61fc:	e607a423          	sw	zero,-408(a5) # b060 <errno>
    6200:	00112623          	sw	ra,12(sp)
    6204:	1c5000ef          	jal	ra,6bc8 <_lseek>
    6208:	fff00793          	li	a5,-1
    620c:	00f50a63          	beq	a0,a5,6220 <_lseek_r+0x44>
    6210:	00c12083          	lw	ra,12(sp)
    6214:	00812403          	lw	s0,8(sp)
    6218:	01010113          	addi	sp,sp,16
    621c:	00008067          	ret
    6220:	00005797          	auipc	a5,0x5
    6224:	e407a783          	lw	a5,-448(a5) # b060 <errno>
    6228:	fe0784e3          	beqz	a5,6210 <_lseek_r+0x34>
    622c:	00c12083          	lw	ra,12(sp)
    6230:	00f42023          	sw	a5,0(s0)
    6234:	00812403          	lw	s0,8(sp)
    6238:	01010113          	addi	sp,sp,16
    623c:	00008067          	ret

00006240 <__smakebuf_r>:
    6240:	00c59783          	lh	a5,12(a1)
    6244:	f8010113          	addi	sp,sp,-128
    6248:	06812c23          	sw	s0,120(sp)
    624c:	06112e23          	sw	ra,124(sp)
    6250:	06912a23          	sw	s1,116(sp)
    6254:	07212823          	sw	s2,112(sp)
    6258:	07312623          	sw	s3,108(sp)
    625c:	07412423          	sw	s4,104(sp)
    6260:	0027f713          	andi	a4,a5,2
    6264:	00058413          	mv	s0,a1
    6268:	02070c63          	beqz	a4,62a0 <__smakebuf_r+0x60>
    626c:	04358793          	addi	a5,a1,67
    6270:	00f5a023          	sw	a5,0(a1)
    6274:	00f5a823          	sw	a5,16(a1)
    6278:	00100793          	li	a5,1
    627c:	00f5aa23          	sw	a5,20(a1)
    6280:	07c12083          	lw	ra,124(sp)
    6284:	07812403          	lw	s0,120(sp)
    6288:	07412483          	lw	s1,116(sp)
    628c:	07012903          	lw	s2,112(sp)
    6290:	06c12983          	lw	s3,108(sp)
    6294:	06812a03          	lw	s4,104(sp)
    6298:	08010113          	addi	sp,sp,128
    629c:	00008067          	ret
    62a0:	00e59583          	lh	a1,14(a1)
    62a4:	00050493          	mv	s1,a0
    62a8:	0805cc63          	bltz	a1,6340 <__smakebuf_r+0x100>
    62ac:	00810613          	addi	a2,sp,8
    62b0:	25c000ef          	jal	ra,650c <_fstat_r>
    62b4:	08054463          	bltz	a0,633c <__smakebuf_r+0xfc>
    62b8:	00c12783          	lw	a5,12(sp)
    62bc:	0000f937          	lui	s2,0xf
    62c0:	00001a37          	lui	s4,0x1
    62c4:	00f97933          	and	s2,s2,a5
    62c8:	ffffe7b7          	lui	a5,0xffffe
    62cc:	00f90933          	add	s2,s2,a5
    62d0:	00193913          	seqz	s2,s2
    62d4:	40000993          	li	s3,1024
    62d8:	800a0a13          	addi	s4,s4,-2048 # 800 <alt_log_private_printf+0x250>
    62dc:	00098593          	mv	a1,s3
    62e0:	00048513          	mv	a0,s1
    62e4:	8ccfe0ef          	jal	ra,43b0 <_malloc_r>
    62e8:	00c41783          	lh	a5,12(s0)
    62ec:	06050e63          	beqz	a0,6368 <__smakebuf_r+0x128>
    62f0:	ffffd717          	auipc	a4,0xffffd
    62f4:	15c70713          	addi	a4,a4,348 # 344c <_cleanup_r>
    62f8:	02e4ae23          	sw	a4,60(s1)
    62fc:	0807e793          	ori	a5,a5,128
    6300:	00f41623          	sh	a5,12(s0)
    6304:	00a42023          	sw	a0,0(s0)
    6308:	00a42823          	sw	a0,16(s0)
    630c:	01342a23          	sw	s3,20(s0)
    6310:	08091863          	bnez	s2,63a0 <__smakebuf_r+0x160>
    6314:	0147e7b3          	or	a5,a5,s4
    6318:	07c12083          	lw	ra,124(sp)
    631c:	00f41623          	sh	a5,12(s0)
    6320:	07812403          	lw	s0,120(sp)
    6324:	07412483          	lw	s1,116(sp)
    6328:	07012903          	lw	s2,112(sp)
    632c:	06c12983          	lw	s3,108(sp)
    6330:	06812a03          	lw	s4,104(sp)
    6334:	08010113          	addi	sp,sp,128
    6338:	00008067          	ret
    633c:	00c41783          	lh	a5,12(s0)
    6340:	0807f793          	andi	a5,a5,128
    6344:	00000913          	li	s2,0
    6348:	04078663          	beqz	a5,6394 <__smakebuf_r+0x154>
    634c:	04000993          	li	s3,64
    6350:	00098593          	mv	a1,s3
    6354:	00048513          	mv	a0,s1
    6358:	858fe0ef          	jal	ra,43b0 <_malloc_r>
    635c:	00c41783          	lh	a5,12(s0)
    6360:	00000a13          	li	s4,0
    6364:	f80516e3          	bnez	a0,62f0 <__smakebuf_r+0xb0>
    6368:	2007f713          	andi	a4,a5,512
    636c:	f0071ae3          	bnez	a4,6280 <__smakebuf_r+0x40>
    6370:	ffc7f793          	andi	a5,a5,-4
    6374:	0027e793          	ori	a5,a5,2
    6378:	04340713          	addi	a4,s0,67
    637c:	00f41623          	sh	a5,12(s0)
    6380:	00100793          	li	a5,1
    6384:	00e42023          	sw	a4,0(s0)
    6388:	00e42823          	sw	a4,16(s0)
    638c:	00f42a23          	sw	a5,20(s0)
    6390:	ef1ff06f          	j	6280 <__smakebuf_r+0x40>
    6394:	40000993          	li	s3,1024
    6398:	00000a13          	li	s4,0
    639c:	f41ff06f          	j	62dc <__smakebuf_r+0x9c>
    63a0:	00e41583          	lh	a1,14(s0)
    63a4:	00048513          	mv	a0,s1
    63a8:	1c4000ef          	jal	ra,656c <_isatty_r>
    63ac:	00051663          	bnez	a0,63b8 <__smakebuf_r+0x178>
    63b0:	00c41783          	lh	a5,12(s0)
    63b4:	f61ff06f          	j	6314 <__smakebuf_r+0xd4>
    63b8:	00c45783          	lhu	a5,12(s0)
    63bc:	ffc7f793          	andi	a5,a5,-4
    63c0:	0017e793          	ori	a5,a5,1
    63c4:	01079793          	slli	a5,a5,0x10
    63c8:	4107d793          	srai	a5,a5,0x10
    63cc:	f49ff06f          	j	6314 <__smakebuf_r+0xd4>

000063d0 <__swhatbuf_r>:
    63d0:	f9010113          	addi	sp,sp,-112
    63d4:	06812423          	sw	s0,104(sp)
    63d8:	00058413          	mv	s0,a1
    63dc:	00e59583          	lh	a1,14(a1)
    63e0:	06912223          	sw	s1,100(sp)
    63e4:	07212023          	sw	s2,96(sp)
    63e8:	06112623          	sw	ra,108(sp)
    63ec:	00060493          	mv	s1,a2
    63f0:	00068913          	mv	s2,a3
    63f4:	0405ca63          	bltz	a1,6448 <__swhatbuf_r+0x78>
    63f8:	00810613          	addi	a2,sp,8
    63fc:	110000ef          	jal	ra,650c <_fstat_r>
    6400:	04054463          	bltz	a0,6448 <__swhatbuf_r+0x78>
    6404:	00c12703          	lw	a4,12(sp)
    6408:	0000f7b7          	lui	a5,0xf
    640c:	06c12083          	lw	ra,108(sp)
    6410:	00e7f7b3          	and	a5,a5,a4
    6414:	ffffe737          	lui	a4,0xffffe
    6418:	00e787b3          	add	a5,a5,a4
    641c:	06812403          	lw	s0,104(sp)
    6420:	0017b793          	seqz	a5,a5
    6424:	00f92023          	sw	a5,0(s2) # f000 <__alt_heap_start+0x3e90>
    6428:	40000713          	li	a4,1024
    642c:	00e4a023          	sw	a4,0(s1)
    6430:	00001537          	lui	a0,0x1
    6434:	06412483          	lw	s1,100(sp)
    6438:	06012903          	lw	s2,96(sp)
    643c:	80050513          	addi	a0,a0,-2048 # 800 <alt_log_private_printf+0x250>
    6440:	07010113          	addi	sp,sp,112
    6444:	00008067          	ret
    6448:	00c45783          	lhu	a5,12(s0)
    644c:	0807f793          	andi	a5,a5,128
    6450:	02078863          	beqz	a5,6480 <__swhatbuf_r+0xb0>
    6454:	06c12083          	lw	ra,108(sp)
    6458:	06812403          	lw	s0,104(sp)
    645c:	00000793          	li	a5,0
    6460:	00f92023          	sw	a5,0(s2)
    6464:	04000713          	li	a4,64
    6468:	00e4a023          	sw	a4,0(s1)
    646c:	06012903          	lw	s2,96(sp)
    6470:	06412483          	lw	s1,100(sp)
    6474:	00000513          	li	a0,0
    6478:	07010113          	addi	sp,sp,112
    647c:	00008067          	ret
    6480:	06c12083          	lw	ra,108(sp)
    6484:	06812403          	lw	s0,104(sp)
    6488:	00f92023          	sw	a5,0(s2)
    648c:	40000713          	li	a4,1024
    6490:	00e4a023          	sw	a4,0(s1)
    6494:	06012903          	lw	s2,96(sp)
    6498:	06412483          	lw	s1,100(sp)
    649c:	00000513          	li	a0,0
    64a0:	07010113          	addi	sp,sp,112
    64a4:	00008067          	ret

000064a8 <_read_r>:
    64a8:	ff010113          	addi	sp,sp,-16
    64ac:	00058713          	mv	a4,a1
    64b0:	00812423          	sw	s0,8(sp)
    64b4:	00060593          	mv	a1,a2
    64b8:	00050413          	mv	s0,a0
    64bc:	00068613          	mv	a2,a3
    64c0:	00070513          	mv	a0,a4
    64c4:	00005797          	auipc	a5,0x5
    64c8:	b807ae23          	sw	zero,-1124(a5) # b060 <errno>
    64cc:	00112623          	sw	ra,12(sp)
    64d0:	2c5000ef          	jal	ra,6f94 <_read>
    64d4:	fff00793          	li	a5,-1
    64d8:	00f50a63          	beq	a0,a5,64ec <_read_r+0x44>
    64dc:	00c12083          	lw	ra,12(sp)
    64e0:	00812403          	lw	s0,8(sp)
    64e4:	01010113          	addi	sp,sp,16
    64e8:	00008067          	ret
    64ec:	00005797          	auipc	a5,0x5
    64f0:	b747a783          	lw	a5,-1164(a5) # b060 <errno>
    64f4:	fe0784e3          	beqz	a5,64dc <_read_r+0x34>
    64f8:	00c12083          	lw	ra,12(sp)
    64fc:	00f42023          	sw	a5,0(s0)
    6500:	00812403          	lw	s0,8(sp)
    6504:	01010113          	addi	sp,sp,16
    6508:	00008067          	ret

0000650c <_fstat_r>:
    650c:	ff010113          	addi	sp,sp,-16
    6510:	00058713          	mv	a4,a1
    6514:	00812423          	sw	s0,8(sp)
    6518:	00060593          	mv	a1,a2
    651c:	00050413          	mv	s0,a0
    6520:	00070513          	mv	a0,a4
    6524:	00005797          	auipc	a5,0x5
    6528:	b207ae23          	sw	zero,-1220(a5) # b060 <errno>
    652c:	00112623          	sw	ra,12(sp)
    6530:	2e4000ef          	jal	ra,6814 <_fstat>
    6534:	fff00793          	li	a5,-1
    6538:	00f50a63          	beq	a0,a5,654c <_fstat_r+0x40>
    653c:	00c12083          	lw	ra,12(sp)
    6540:	00812403          	lw	s0,8(sp)
    6544:	01010113          	addi	sp,sp,16
    6548:	00008067          	ret
    654c:	00005797          	auipc	a5,0x5
    6550:	b147a783          	lw	a5,-1260(a5) # b060 <errno>
    6554:	fe0784e3          	beqz	a5,653c <_fstat_r+0x30>
    6558:	00c12083          	lw	ra,12(sp)
    655c:	00f42023          	sw	a5,0(s0)
    6560:	00812403          	lw	s0,8(sp)
    6564:	01010113          	addi	sp,sp,16
    6568:	00008067          	ret

0000656c <_isatty_r>:
    656c:	ff010113          	addi	sp,sp,-16
    6570:	00812423          	sw	s0,8(sp)
    6574:	00050413          	mv	s0,a0
    6578:	00058513          	mv	a0,a1
    657c:	00005797          	auipc	a5,0x5
    6580:	ae07a223          	sw	zero,-1308(a5) # b060 <errno>
    6584:	00112623          	sw	ra,12(sp)
    6588:	3b8000ef          	jal	ra,6940 <_isatty>
    658c:	fff00793          	li	a5,-1
    6590:	00f50a63          	beq	a0,a5,65a4 <_isatty_r+0x38>
    6594:	00c12083          	lw	ra,12(sp)
    6598:	00812403          	lw	s0,8(sp)
    659c:	01010113          	addi	sp,sp,16
    65a0:	00008067          	ret
    65a4:	00005797          	auipc	a5,0x5
    65a8:	abc7a783          	lw	a5,-1348(a5) # b060 <errno>
    65ac:	fe0784e3          	beqz	a5,6594 <_isatty_r+0x28>
    65b0:	00c12083          	lw	ra,12(sp)
    65b4:	00f42023          	sw	a5,0(s0)
    65b8:	00812403          	lw	s0,8(sp)
    65bc:	01010113          	addi	sp,sp,16
    65c0:	00008067          	ret

000065c4 <alt_get_errno>:
{
    65c4:	ff010113          	addi	sp,sp,-16
    65c8:	00112623          	sw	ra,12(sp)
    65cc:	00812423          	sw	s0,8(sp)
    65d0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    65d4:	000097b7          	lui	a5,0x9
    65d8:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    65dc:	00078c63          	beqz	a5,65f4 <alt_get_errno+0x30>
    65e0:	000097b7          	lui	a5,0x9
    65e4:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    65e8:	000780e7          	jalr	a5
    65ec:	00050793          	mv	a5,a0
    65f0:	00c0006f          	j	65fc <alt_get_errno+0x38>
    65f4:	0000b7b7          	lui	a5,0xb
    65f8:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    65fc:	00078513          	mv	a0,a5
    6600:	00c12083          	lw	ra,12(sp)
    6604:	00812403          	lw	s0,8(sp)
    6608:	01010113          	addi	sp,sp,16
    660c:	00008067          	ret

00006610 <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    6610:	fd010113          	addi	sp,sp,-48
    6614:	02112623          	sw	ra,44(sp)
    6618:	02812423          	sw	s0,40(sp)
    661c:	03010413          	addi	s0,sp,48
    6620:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    6624:	fdc42783          	lw	a5,-36(s0)
    6628:	0207c463          	bltz	a5,6650 <_close+0x40>
    662c:	fdc42703          	lw	a4,-36(s0)
    6630:	00070793          	mv	a5,a4
    6634:	00179793          	slli	a5,a5,0x1
    6638:	00e787b3          	add	a5,a5,a4
    663c:	00279793          	slli	a5,a5,0x2
    6640:	00009737          	lui	a4,0x9
    6644:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    6648:	00e787b3          	add	a5,a5,a4
    664c:	0080006f          	j	6654 <_close+0x44>
    6650:	00000793          	li	a5,0
    6654:	fef42423          	sw	a5,-24(s0)

  if (fd)
    6658:	fe842783          	lw	a5,-24(s0)
    665c:	06078663          	beqz	a5,66c8 <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    6660:	fe842783          	lw	a5,-24(s0)
    6664:	0007a783          	lw	a5,0(a5)
    6668:	0107a783          	lw	a5,16(a5)
    666c:	02078063          	beqz	a5,668c <_close+0x7c>
    6670:	fe842783          	lw	a5,-24(s0)
    6674:	0007a783          	lw	a5,0(a5)
    6678:	0107a783          	lw	a5,16(a5)
    667c:	fe842503          	lw	a0,-24(s0)
    6680:	000780e7          	jalr	a5
    6684:	00050793          	mv	a5,a0
    6688:	0080006f          	j	6690 <_close+0x80>
    668c:	00000793          	li	a5,0
    6690:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    6694:	fdc42503          	lw	a0,-36(s0)
    6698:	8a8fc0ef          	jal	ra,2740 <alt_release_fd>
    if (rval < 0)
    669c:	fec42783          	lw	a5,-20(s0)
    66a0:	0207d063          	bgez	a5,66c0 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
    66a4:	f21ff0ef          	jal	ra,65c4 <alt_get_errno>
    66a8:	00050713          	mv	a4,a0
    66ac:	fec42783          	lw	a5,-20(s0)
    66b0:	40f007b3          	neg	a5,a5
    66b4:	00f72023          	sw	a5,0(a4)
      return -1;
    66b8:	fff00793          	li	a5,-1
    66bc:	0200006f          	j	66dc <_close+0xcc>
    }
    return 0;
    66c0:	00000793          	li	a5,0
    66c4:	0180006f          	j	66dc <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    66c8:	efdff0ef          	jal	ra,65c4 <alt_get_errno>
    66cc:	00050713          	mv	a4,a0
    66d0:	05100793          	li	a5,81
    66d4:	00f72023          	sw	a5,0(a4)
    return -1;
    66d8:	fff00793          	li	a5,-1
  }
}
    66dc:	00078513          	mv	a0,a5
    66e0:	02c12083          	lw	ra,44(sp)
    66e4:	02812403          	lw	s0,40(sp)
    66e8:	03010113          	addi	sp,sp,48
    66ec:	00008067          	ret

000066f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    66f0:	fd010113          	addi	sp,sp,-48
    66f4:	02112623          	sw	ra,44(sp)
    66f8:	02812423          	sw	s0,40(sp)
    66fc:	03010413          	addi	s0,sp,48
    6700:	fca42e23          	sw	a0,-36(s0)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
    6704:	000097b7          	lui	a5,0x9
    6708:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    670c:	00100793          	li	a5,1
    6710:	00f71863          	bne	a4,a5,6720 <_exit+0x30>
    6714:	000087b7          	lui	a5,0x8
    6718:	93478513          	addi	a0,a5,-1740 # 7934 <__fini_array_end+0x34c>
    671c:	bdcfa0ef          	jal	ra,af8 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
    6720:	000097b7          	lui	a5,0x9
    6724:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    6728:	00100793          	li	a5,1
    672c:	00f71a63          	bne	a4,a5,6740 <_exit+0x50>
    6730:	fdc42583          	lw	a1,-36(s0)
    6734:	000087b7          	lui	a5,0x8
    6738:	96078513          	addi	a0,a5,-1696 # 7960 <__fini_array_end+0x378>
    673c:	bbcfa0ef          	jal	ra,af8 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
    6740:	000097b7          	lui	a5,0x9
    6744:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    6748:	00100793          	li	a5,1
    674c:	00f71863          	bne	a4,a5,675c <_exit+0x6c>
    6750:	000087b7          	lui	a5,0x8
    6754:	98c78513          	addi	a0,a5,-1652 # 798c <__fini_array_end+0x3a4>
    6758:	ba0fa0ef          	jal	ra,af8 <alt_log_printf_proc>
  ALT_OS_STOP();
    675c:	00000013          	nop

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
    6760:	000097b7          	lui	a5,0x9
    6764:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    6768:	00100793          	li	a5,1
    676c:	00f71863          	bne	a4,a5,677c <_exit+0x8c>
    6770:	000087b7          	lui	a5,0x8
    6774:	9b478513          	addi	a0,a5,-1612 # 79b4 <__fini_array_end+0x3cc>
    6778:	b80fa0ef          	jal	ra,af8 <alt_log_printf_proc>
    677c:	fdc42783          	lw	a5,-36(s0)
    6780:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
    6784:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
    6788:	00050793          	mv	a5,a0
    678c:	00078663          	beqz	a5,6798 <_exit+0xa8>
    ALT_SIM_FAIL();
    6790:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    6794:	0080006f          	j	679c <_exit+0xac>
    ALT_SIM_PASS();
    6798:	7c203013          	sltiu	zero,zero,1986
}
    679c:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
    67a0:	000097b7          	lui	a5,0x9
    67a4:	4d87a703          	lw	a4,1240(a5) # 94d8 <alt_log_boot_on_flag>
    67a8:	00100793          	li	a5,1
    67ac:	00f71a63          	bne	a4,a5,67c0 <_exit+0xd0>
    67b0:	000087b7          	lui	a5,0x8
    67b4:	9dc78513          	addi	a0,a5,-1572 # 79dc <__fini_array_end+0x3f4>
    67b8:	b40fa0ef          	jal	ra,af8 <alt_log_printf_proc>
  while (1);
    67bc:	00000013          	nop
    67c0:	00000013          	nop
    67c4:	ffdff06f          	j	67c0 <_exit+0xd0>

000067c8 <alt_get_errno>:
{
    67c8:	ff010113          	addi	sp,sp,-16
    67cc:	00112623          	sw	ra,12(sp)
    67d0:	00812423          	sw	s0,8(sp)
    67d4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    67d8:	000097b7          	lui	a5,0x9
    67dc:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    67e0:	00078c63          	beqz	a5,67f8 <alt_get_errno+0x30>
    67e4:	000097b7          	lui	a5,0x9
    67e8:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    67ec:	000780e7          	jalr	a5
    67f0:	00050793          	mv	a5,a0
    67f4:	00c0006f          	j	6800 <alt_get_errno+0x38>
    67f8:	0000b7b7          	lui	a5,0xb
    67fc:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    6800:	00078513          	mv	a0,a5
    6804:	00c12083          	lw	ra,12(sp)
    6808:	00812403          	lw	s0,8(sp)
    680c:	01010113          	addi	sp,sp,16
    6810:	00008067          	ret

00006814 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    6814:	fd010113          	addi	sp,sp,-48
    6818:	02112623          	sw	ra,44(sp)
    681c:	02812423          	sw	s0,40(sp)
    6820:	03010413          	addi	s0,sp,48
    6824:	fca42e23          	sw	a0,-36(s0)
    6828:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    682c:	fdc42783          	lw	a5,-36(s0)
    6830:	0207c463          	bltz	a5,6858 <_fstat+0x44>
    6834:	fdc42703          	lw	a4,-36(s0)
    6838:	00070793          	mv	a5,a4
    683c:	00179793          	slli	a5,a5,0x1
    6840:	00e787b3          	add	a5,a5,a4
    6844:	00279793          	slli	a5,a5,0x2
    6848:	00009737          	lui	a4,0x9
    684c:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    6850:	00e787b3          	add	a5,a5,a4
    6854:	0080006f          	j	685c <_fstat+0x48>
    6858:	00000793          	li	a5,0
    685c:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
    6860:	fec42783          	lw	a5,-20(s0)
    6864:	04078463          	beqz	a5,68ac <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    6868:	fec42783          	lw	a5,-20(s0)
    686c:	0007a783          	lw	a5,0(a5)
    6870:	0207a783          	lw	a5,32(a5)
    6874:	02078263          	beqz	a5,6898 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
    6878:	fec42783          	lw	a5,-20(s0)
    687c:	0007a783          	lw	a5,0(a5)
    6880:	0207a783          	lw	a5,32(a5)
    6884:	fd842583          	lw	a1,-40(s0)
    6888:	fec42503          	lw	a0,-20(s0)
    688c:	000780e7          	jalr	a5
    6890:	00050793          	mv	a5,a0
    6894:	02c0006f          	j	68c0 <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    6898:	fd842783          	lw	a5,-40(s0)
    689c:	00002737          	lui	a4,0x2
    68a0:	00e7a223          	sw	a4,4(a5)
      return 0;
    68a4:	00000793          	li	a5,0
    68a8:	0180006f          	j	68c0 <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    68ac:	f1dff0ef          	jal	ra,67c8 <alt_get_errno>
    68b0:	00050713          	mv	a4,a0
    68b4:	05100793          	li	a5,81
    68b8:	00f72023          	sw	a5,0(a4) # 2000 <alt_alarm_start+0x4c>
    return -1;
    68bc:	fff00793          	li	a5,-1
  }
}
    68c0:	00078513          	mv	a0,a5
    68c4:	02c12083          	lw	ra,44(sp)
    68c8:	02812403          	lw	s0,40(sp)
    68cc:	03010113          	addi	sp,sp,48
    68d0:	00008067          	ret

000068d4 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    68d4:	ff010113          	addi	sp,sp,-16
    68d8:	00812623          	sw	s0,12(sp)
    68dc:	01010413          	addi	s0,sp,16
  return 0;
    68e0:	00000793          	li	a5,0
}
    68e4:	00078513          	mv	a0,a5
    68e8:	00c12403          	lw	s0,12(sp)
    68ec:	01010113          	addi	sp,sp,16
    68f0:	00008067          	ret

000068f4 <alt_get_errno>:
{
    68f4:	ff010113          	addi	sp,sp,-16
    68f8:	00112623          	sw	ra,12(sp)
    68fc:	00812423          	sw	s0,8(sp)
    6900:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6904:	000097b7          	lui	a5,0x9
    6908:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    690c:	00078c63          	beqz	a5,6924 <alt_get_errno+0x30>
    6910:	000097b7          	lui	a5,0x9
    6914:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6918:	000780e7          	jalr	a5
    691c:	00050793          	mv	a5,a0
    6920:	00c0006f          	j	692c <alt_get_errno+0x38>
    6924:	0000b7b7          	lui	a5,0xb
    6928:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    692c:	00078513          	mv	a0,a5
    6930:	00c12083          	lw	ra,12(sp)
    6934:	00812403          	lw	s0,8(sp)
    6938:	01010113          	addi	sp,sp,16
    693c:	00008067          	ret

00006940 <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    6940:	f7010113          	addi	sp,sp,-144
    6944:	08112623          	sw	ra,140(sp)
    6948:	08812423          	sw	s0,136(sp)
    694c:	09010413          	addi	s0,sp,144
    6950:	f6a42e23          	sw	a0,-132(s0)
    6954:	0000b7b7          	lui	a5,0xb
    6958:	0647a703          	lw	a4,100(a5) # b064 <__stack_chk_guard>
    695c:	fee42623          	sw	a4,-20(s0)
    6960:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
    6964:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6968:	f7c42783          	lw	a5,-132(s0)
    696c:	0207c463          	bltz	a5,6994 <_isatty+0x54>
    6970:	f7c42703          	lw	a4,-132(s0)
    6974:	00070793          	mv	a5,a4
    6978:	00179793          	slli	a5,a5,0x1
    697c:	00e787b3          	add	a5,a5,a4
    6980:	00279793          	slli	a5,a5,0x2
    6984:	00009737          	lui	a4,0x9
    6988:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    698c:	00e787b3          	add	a5,a5,a4
    6990:	0080006f          	j	6998 <_isatty+0x58>
    6994:	00000793          	li	a5,0
    6998:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
    699c:	f8c42783          	lw	a5,-116(s0)
    69a0:	04078a63          	beqz	a5,69f4 <_isatty+0xb4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    69a4:	f8c42783          	lw	a5,-116(s0)
    69a8:	0007a783          	lw	a5,0(a5)
    69ac:	0207a783          	lw	a5,32(a5)
    69b0:	00079663          	bnez	a5,69bc <_isatty+0x7c>
    {
      return 1;
    69b4:	00100793          	li	a5,1
    69b8:	0500006f          	j	6a08 <_isatty+0xc8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
    69bc:	f9040793          	addi	a5,s0,-112
    69c0:	00078593          	mv	a1,a5
    69c4:	f7c42503          	lw	a0,-132(s0)
    69c8:	409000ef          	jal	ra,75d0 <fstat>
    69cc:	00050793          	mv	a5,a0
    69d0:	0007d663          	bgez	a5,69dc <_isatty+0x9c>
        return 0;  // fstat will set ERRNO
    69d4:	00000793          	li	a5,0
    69d8:	0300006f          	j	6a08 <_isatty+0xc8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
    69dc:	f9442703          	lw	a4,-108(s0)
    69e0:	ffffe7b7          	lui	a5,0xffffe
    69e4:	00f707b3          	add	a5,a4,a5
    69e8:	0017b793          	seqz	a5,a5
    69ec:	0ff7f793          	zext.b	a5,a5
    69f0:	0180006f          	j	6a08 <_isatty+0xc8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    69f4:	f01ff0ef          	jal	ra,68f4 <alt_get_errno>
    69f8:	00050713          	mv	a4,a0
    69fc:	05100793          	li	a5,81
    6a00:	00f72023          	sw	a5,0(a4)
    return 0;
    6a04:	00000793          	li	a5,0
  }
}
    6a08:	00078713          	mv	a4,a5
    6a0c:	0000b7b7          	lui	a5,0xb
    6a10:	fec42683          	lw	a3,-20(s0)
    6a14:	0647a783          	lw	a5,100(a5) # b064 <__stack_chk_guard>
    6a18:	00f6c7b3          	xor	a5,a3,a5
    6a1c:	00000693          	li	a3,0
    6a20:	00078463          	beqz	a5,6a28 <_isatty+0xe8>
    6a24:	d7cfc0ef          	jal	ra,2fa0 <__stack_chk_fail>
    6a28:	00070513          	mv	a0,a4
    6a2c:	08c12083          	lw	ra,140(sp)
    6a30:	08812403          	lw	s0,136(sp)
    6a34:	09010113          	addi	sp,sp,144
    6a38:	00008067          	ret

00006a3c <alt_get_errno>:
{
    6a3c:	ff010113          	addi	sp,sp,-16
    6a40:	00112623          	sw	ra,12(sp)
    6a44:	00812423          	sw	s0,8(sp)
    6a48:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6a4c:	000097b7          	lui	a5,0x9
    6a50:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6a54:	00078c63          	beqz	a5,6a6c <alt_get_errno+0x30>
    6a58:	000097b7          	lui	a5,0x9
    6a5c:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6a60:	000780e7          	jalr	a5
    6a64:	00050793          	mv	a5,a0
    6a68:	00c0006f          	j	6a74 <alt_get_errno+0x38>
    6a6c:	0000b7b7          	lui	a5,0xb
    6a70:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    6a74:	00078513          	mv	a0,a5
    6a78:	00c12083          	lw	ra,12(sp)
    6a7c:	00812403          	lw	s0,8(sp)
    6a80:	01010113          	addi	sp,sp,16
    6a84:	00008067          	ret

00006a88 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    6a88:	fd010113          	addi	sp,sp,-48
    6a8c:	02112623          	sw	ra,44(sp)
    6a90:	02812423          	sw	s0,40(sp)
    6a94:	03010413          	addi	s0,sp,48
    6a98:	fca42e23          	sw	a0,-36(s0)
    6a9c:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
    6aa0:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
    6aa4:	fdc42783          	lw	a5,-36(s0)
    6aa8:	06f04e63          	bgtz	a5,6b24 <_kill+0x9c>
  {
    switch (sig)
    6aac:	fd842783          	lw	a5,-40(s0)
    6ab0:	08078463          	beqz	a5,6b38 <_kill+0xb0>
    6ab4:	fd842783          	lw	a5,-40(s0)
    6ab8:	0607c063          	bltz	a5,6b18 <_kill+0x90>
    6abc:	fd842703          	lw	a4,-40(s0)
    6ac0:	01f00793          	li	a5,31
    6ac4:	04e7ca63          	blt	a5,a4,6b18 <_kill+0x90>
    6ac8:	fd842703          	lw	a4,-40(s0)
    6acc:	00300793          	li	a5,3
    6ad0:	04f74463          	blt	a4,a5,6b18 <_kill+0x90>
    6ad4:	fd842783          	lw	a5,-40(s0)
    6ad8:	00100713          	li	a4,1
    6adc:	00f717b3          	sll	a5,a4,a5
    6ae0:	cf810737          	lui	a4,0xcf810
    6ae4:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcf7fff78>
    6ae8:	00e7f733          	and	a4,a5,a4
    6aec:	00e03733          	snez	a4,a4
    6af0:	0ff77713          	zext.b	a4,a4
    6af4:	00071e63          	bnez	a4,6b10 <_kill+0x88>
    6af8:	00110737          	lui	a4,0x110
    6afc:	00e7f7b3          	and	a5,a5,a4
    6b00:	00f037b3          	snez	a5,a5
    6b04:	0ff7f793          	zext.b	a5,a5
    6b08:	02079c63          	bnez	a5,6b40 <_kill+0xb8>
    6b0c:	00c0006f          	j	6b18 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    6b10:	00000513          	li	a0,0
    6b14:	bddff0ef          	jal	ra,66f0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    6b18:	01600793          	li	a5,22
    6b1c:	fef42623          	sw	a5,-20(s0)
    6b20:	0240006f          	j	6b44 <_kill+0xbc>
    }
  }

  else if (pid > 0)
    6b24:	fdc42783          	lw	a5,-36(s0)
    6b28:	00f05e63          	blez	a5,6b44 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    6b2c:	00300793          	li	a5,3
    6b30:	fef42623          	sw	a5,-20(s0)
    6b34:	0100006f          	j	6b44 <_kill+0xbc>
      break;
    6b38:	00000013          	nop
    6b3c:	0080006f          	j	6b44 <_kill+0xbc>
      break;
    6b40:	00000013          	nop
  }

  if (status)
    6b44:	fec42783          	lw	a5,-20(s0)
    6b48:	00078e63          	beqz	a5,6b64 <_kill+0xdc>
  {
    ALT_ERRNO = status;
    6b4c:	ef1ff0ef          	jal	ra,6a3c <alt_get_errno>
    6b50:	00050713          	mv	a4,a0
    6b54:	fec42783          	lw	a5,-20(s0)
    6b58:	00f72023          	sw	a5,0(a4) # 110000 <__alt_data_end+0x100000>
    return -1;
    6b5c:	fff00793          	li	a5,-1
    6b60:	0080006f          	j	6b68 <_kill+0xe0>
  }

  return 0;
    6b64:	00000793          	li	a5,0
}
    6b68:	00078513          	mv	a0,a5
    6b6c:	02c12083          	lw	ra,44(sp)
    6b70:	02812403          	lw	s0,40(sp)
    6b74:	03010113          	addi	sp,sp,48
    6b78:	00008067          	ret

00006b7c <alt_get_errno>:
{
    6b7c:	ff010113          	addi	sp,sp,-16
    6b80:	00112623          	sw	ra,12(sp)
    6b84:	00812423          	sw	s0,8(sp)
    6b88:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6b8c:	000097b7          	lui	a5,0x9
    6b90:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6b94:	00078c63          	beqz	a5,6bac <alt_get_errno+0x30>
    6b98:	000097b7          	lui	a5,0x9
    6b9c:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6ba0:	000780e7          	jalr	a5
    6ba4:	00050793          	mv	a5,a0
    6ba8:	00c0006f          	j	6bb4 <alt_get_errno+0x38>
    6bac:	0000b7b7          	lui	a5,0xb
    6bb0:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    6bb4:	00078513          	mv	a0,a5
    6bb8:	00c12083          	lw	ra,12(sp)
    6bbc:	00812403          	lw	s0,8(sp)
    6bc0:	01010113          	addi	sp,sp,16
    6bc4:	00008067          	ret

00006bc8 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    6bc8:	fd010113          	addi	sp,sp,-48
    6bcc:	02112623          	sw	ra,44(sp)
    6bd0:	02812423          	sw	s0,40(sp)
    6bd4:	03010413          	addi	s0,sp,48
    6bd8:	fca42e23          	sw	a0,-36(s0)
    6bdc:	fcb42c23          	sw	a1,-40(s0)
    6be0:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
    6be4:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6be8:	fdc42783          	lw	a5,-36(s0)
    6bec:	0207c463          	bltz	a5,6c14 <_lseek+0x4c>
    6bf0:	fdc42703          	lw	a4,-36(s0)
    6bf4:	00070793          	mv	a5,a4
    6bf8:	00179793          	slli	a5,a5,0x1
    6bfc:	00e787b3          	add	a5,a5,a4
    6c00:	00279793          	slli	a5,a5,0x2
    6c04:	00009737          	lui	a4,0x9
    6c08:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    6c0c:	00e787b3          	add	a5,a5,a4
    6c10:	0080006f          	j	6c18 <_lseek+0x50>
    6c14:	00000793          	li	a5,0
    6c18:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
    6c1c:	fec42783          	lw	a5,-20(s0)
    6c20:	04078263          	beqz	a5,6c64 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    6c24:	fec42783          	lw	a5,-20(s0)
    6c28:	0007a783          	lw	a5,0(a5)
    6c2c:	01c7a783          	lw	a5,28(a5)
    6c30:	02078463          	beqz	a5,6c58 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    6c34:	fec42783          	lw	a5,-20(s0)
    6c38:	0007a783          	lw	a5,0(a5)
    6c3c:	01c7a783          	lw	a5,28(a5)
    6c40:	fd442603          	lw	a2,-44(s0)
    6c44:	fd842583          	lw	a1,-40(s0)
    6c48:	fec42503          	lw	a0,-20(s0)
    6c4c:	000780e7          	jalr	a5
    6c50:	fea42423          	sw	a0,-24(s0)
    6c54:	0180006f          	j	6c6c <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    6c58:	f7a00793          	li	a5,-134
    6c5c:	fef42423          	sw	a5,-24(s0)
    6c60:	00c0006f          	j	6c6c <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    6c64:	faf00793          	li	a5,-81
    6c68:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
    6c6c:	fe842783          	lw	a5,-24(s0)
    6c70:	0207d063          	bgez	a5,6c90 <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    6c74:	f09ff0ef          	jal	ra,6b7c <alt_get_errno>
    6c78:	00050713          	mv	a4,a0
    6c7c:	fe842783          	lw	a5,-24(s0)
    6c80:	40f007b3          	neg	a5,a5
    6c84:	00f72023          	sw	a5,0(a4)
    rc = -1;
    6c88:	fff00793          	li	a5,-1
    6c8c:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
    6c90:	fe842783          	lw	a5,-24(s0)
}
    6c94:	00078513          	mv	a0,a5
    6c98:	02c12083          	lw	ra,44(sp)
    6c9c:	02812403          	lw	s0,40(sp)
    6ca0:	03010113          	addi	sp,sp,48
    6ca4:	00008067          	ret

00006ca8 <alt_get_errno>:
{
    6ca8:	ff010113          	addi	sp,sp,-16
    6cac:	00112623          	sw	ra,12(sp)
    6cb0:	00812423          	sw	s0,8(sp)
    6cb4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6cb8:	000097b7          	lui	a5,0x9
    6cbc:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6cc0:	00078c63          	beqz	a5,6cd8 <alt_get_errno+0x30>
    6cc4:	000097b7          	lui	a5,0x9
    6cc8:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6ccc:	000780e7          	jalr	a5
    6cd0:	00050793          	mv	a5,a0
    6cd4:	00c0006f          	j	6ce0 <alt_get_errno+0x38>
    6cd8:	0000b7b7          	lui	a5,0xb
    6cdc:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    6ce0:	00078513          	mv	a0,a5
    6ce4:	00c12083          	lw	ra,12(sp)
    6ce8:	00812403          	lw	s0,8(sp)
    6cec:	01010113          	addi	sp,sp,16
    6cf0:	00008067          	ret

00006cf4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    6cf4:	fd010113          	addi	sp,sp,-48
    6cf8:	02812623          	sw	s0,44(sp)
    6cfc:	03010413          	addi	s0,sp,48
    6d00:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    6d04:	fdc42783          	lw	a5,-36(s0)
    6d08:	0087a703          	lw	a4,8(a5)
    6d0c:	400007b7          	lui	a5,0x40000
    6d10:	00f76733          	or	a4,a4,a5
    6d14:	fdc42783          	lw	a5,-36(s0)
    6d18:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3fff0008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    6d1c:	fe042623          	sw	zero,-20(s0)
    6d20:	0980006f          	j	6db8 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    6d24:	000097b7          	lui	a5,0x9
    6d28:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    6d2c:	fec42703          	lw	a4,-20(s0)
    6d30:	00070793          	mv	a5,a4
    6d34:	00179793          	slli	a5,a5,0x1
    6d38:	00e787b3          	add	a5,a5,a4
    6d3c:	00279793          	slli	a5,a5,0x2
    6d40:	00f687b3          	add	a5,a3,a5
    6d44:	0007a703          	lw	a4,0(a5)
    6d48:	fdc42783          	lw	a5,-36(s0)
    6d4c:	0007a783          	lw	a5,0(a5)
    6d50:	04f71e63          	bne	a4,a5,6dac <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6d54:	000097b7          	lui	a5,0x9
    6d58:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    6d5c:	fec42703          	lw	a4,-20(s0)
    6d60:	00070793          	mv	a5,a4
    6d64:	00179793          	slli	a5,a5,0x1
    6d68:	00e787b3          	add	a5,a5,a4
    6d6c:	00279793          	slli	a5,a5,0x2
    6d70:	00f687b3          	add	a5,a3,a5
    6d74:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
    6d78:	0207da63          	bgez	a5,6dac <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
    6d7c:	fec42703          	lw	a4,-20(s0)
    6d80:	00070793          	mv	a5,a4
    6d84:	00179793          	slli	a5,a5,0x1
    6d88:	00e787b3          	add	a5,a5,a4
    6d8c:	00279793          	slli	a5,a5,0x2
    6d90:	00009737          	lui	a4,0x9
    6d94:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    6d98:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6d9c:	fdc42703          	lw	a4,-36(s0)
    6da0:	00f70663          	beq	a4,a5,6dac <alt_file_locked+0xb8>
    {
      return -EACCES;
    6da4:	ff300793          	li	a5,-13
    6da8:	0280006f          	j	6dd0 <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
    6dac:	fec42783          	lw	a5,-20(s0)
    6db0:	00178793          	addi	a5,a5,1
    6db4:	fef42623          	sw	a5,-20(s0)
    6db8:	000097b7          	lui	a5,0x9
    6dbc:	4f47a783          	lw	a5,1268(a5) # 94f4 <alt_max_fd>
    6dc0:	00078713          	mv	a4,a5
    6dc4:	fec42783          	lw	a5,-20(s0)
    6dc8:	f4f77ee3          	bgeu	a4,a5,6d24 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6dcc:	00000793          	li	a5,0
}
    6dd0:	00078513          	mv	a0,a5
    6dd4:	02c12403          	lw	s0,44(sp)
    6dd8:	03010113          	addi	sp,sp,48
    6ddc:	00008067          	ret

00006de0 <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    6de0:	fc010113          	addi	sp,sp,-64
    6de4:	02112e23          	sw	ra,60(sp)
    6de8:	02812c23          	sw	s0,56(sp)
    6dec:	04010413          	addi	s0,sp,64
    6df0:	fca42623          	sw	a0,-52(s0)
    6df4:	fcb42423          	sw	a1,-56(s0)
    6df8:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    6dfc:	fff00793          	li	a5,-1
    6e00:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
    6e04:	fed00793          	li	a5,-19
    6e08:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
    6e0c:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    6e10:	000097b7          	lui	a5,0x9
    6e14:	4ec78593          	addi	a1,a5,1260 # 94ec <alt_dev_list>
    6e18:	fcc42503          	lw	a0,-52(s0)
    6e1c:	490000ef          	jal	ra,72ac <alt_find_dev>
    6e20:	fca42e23          	sw	a0,-36(s0)
    6e24:	fdc42783          	lw	a5,-36(s0)
    6e28:	00079c63          	bnez	a5,6e40 <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    6e2c:	fcc42503          	lw	a0,-52(s0)
    6e30:	59c000ef          	jal	ra,73cc <alt_find_file>
    6e34:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
    6e38:	00100793          	li	a5,1
    6e3c:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6e40:	fdc42783          	lw	a5,-36(s0)
    6e44:	0a078c63          	beqz	a5,6efc <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6e48:	fdc42503          	lw	a0,-36(s0)
    6e4c:	6bc000ef          	jal	ra,7508 <alt_get_fd>
    6e50:	fea42023          	sw	a0,-32(s0)
    6e54:	fe042783          	lw	a5,-32(s0)
    6e58:	0007d863          	bgez	a5,6e68 <_open+0x88>
    {
      status = index;
    6e5c:	fe042783          	lw	a5,-32(s0)
    6e60:	fef42223          	sw	a5,-28(s0)
    6e64:	0a00006f          	j	6f04 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
    6e68:	fe042703          	lw	a4,-32(s0)
    6e6c:	00070793          	mv	a5,a4
    6e70:	00179793          	slli	a5,a5,0x1
    6e74:	00e787b3          	add	a5,a5,a4
    6e78:	00279793          	slli	a5,a5,0x2
    6e7c:	00009737          	lui	a4,0x9
    6e80:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    6e84:	00e787b3          	add	a5,a5,a4
    6e88:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6e8c:	fc842703          	lw	a4,-56(s0)
    6e90:	400007b7          	lui	a5,0x40000
    6e94:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffeffff>
    6e98:	00f77733          	and	a4,a4,a5
    6e9c:	fec42783          	lw	a5,-20(s0)
    6ea0:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6ea4:	fe842783          	lw	a5,-24(s0)
    6ea8:	00079c63          	bnez	a5,6ec0 <_open+0xe0>
    6eac:	fec42503          	lw	a0,-20(s0)
    6eb0:	e45ff0ef          	jal	ra,6cf4 <alt_file_locked>
    6eb4:	fea42223          	sw	a0,-28(s0)
    6eb8:	fe442783          	lw	a5,-28(s0)
    6ebc:	0407c463          	bltz	a5,6f04 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6ec0:	fdc42783          	lw	a5,-36(s0)
    6ec4:	00c7a783          	lw	a5,12(a5)
    6ec8:	02078463          	beqz	a5,6ef0 <_open+0x110>
    6ecc:	fdc42783          	lw	a5,-36(s0)
    6ed0:	00c7a783          	lw	a5,12(a5)
    6ed4:	fc442683          	lw	a3,-60(s0)
    6ed8:	fc842603          	lw	a2,-56(s0)
    6edc:	fcc42583          	lw	a1,-52(s0)
    6ee0:	fec42503          	lw	a0,-20(s0)
    6ee4:	000780e7          	jalr	a5
    6ee8:	00050793          	mv	a5,a0
    6eec:	0080006f          	j	6ef4 <_open+0x114>
    6ef0:	00000793          	li	a5,0
    6ef4:	fef42223          	sw	a5,-28(s0)
    6ef8:	00c0006f          	j	6f04 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
    6efc:	fed00793          	li	a5,-19
    6f00:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    6f04:	fe442783          	lw	a5,-28(s0)
    6f08:	0207d463          	bgez	a5,6f30 <_open+0x150>
  {
    alt_release_fd (index);  
    6f0c:	fe042503          	lw	a0,-32(s0)
    6f10:	831fb0ef          	jal	ra,2740 <alt_release_fd>
    ALT_ERRNO = -status;
    6f14:	d95ff0ef          	jal	ra,6ca8 <alt_get_errno>
    6f18:	00050713          	mv	a4,a0
    6f1c:	fe442783          	lw	a5,-28(s0)
    6f20:	40f007b3          	neg	a5,a5
    6f24:	00f72023          	sw	a5,0(a4)
    return -1;
    6f28:	fff00793          	li	a5,-1
    6f2c:	0080006f          	j	6f34 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
    6f30:	fe042783          	lw	a5,-32(s0)
}
    6f34:	00078513          	mv	a0,a5
    6f38:	03c12083          	lw	ra,60(sp)
    6f3c:	03812403          	lw	s0,56(sp)
    6f40:	04010113          	addi	sp,sp,64
    6f44:	00008067          	ret

00006f48 <alt_get_errno>:
{
    6f48:	ff010113          	addi	sp,sp,-16
    6f4c:	00112623          	sw	ra,12(sp)
    6f50:	00812423          	sw	s0,8(sp)
    6f54:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    6f58:	000097b7          	lui	a5,0x9
    6f5c:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6f60:	00078c63          	beqz	a5,6f78 <alt_get_errno+0x30>
    6f64:	000097b7          	lui	a5,0x9
    6f68:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    6f6c:	000780e7          	jalr	a5
    6f70:	00050793          	mv	a5,a0
    6f74:	00c0006f          	j	6f80 <alt_get_errno+0x38>
    6f78:	0000b7b7          	lui	a5,0xb
    6f7c:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    6f80:	00078513          	mv	a0,a5
    6f84:	00c12083          	lw	ra,12(sp)
    6f88:	00812403          	lw	s0,8(sp)
    6f8c:	01010113          	addi	sp,sp,16
    6f90:	00008067          	ret

00006f94 <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    6f94:	fd010113          	addi	sp,sp,-48
    6f98:	02112623          	sw	ra,44(sp)
    6f9c:	02812423          	sw	s0,40(sp)
    6fa0:	03010413          	addi	s0,sp,48
    6fa4:	fca42e23          	sw	a0,-36(s0)
    6fa8:	fcb42c23          	sw	a1,-40(s0)
    6fac:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    6fb0:	fdc42783          	lw	a5,-36(s0)
    6fb4:	0207c463          	bltz	a5,6fdc <_read+0x48>
    6fb8:	fdc42703          	lw	a4,-36(s0)
    6fbc:	00070793          	mv	a5,a4
    6fc0:	00179793          	slli	a5,a5,0x1
    6fc4:	00e787b3          	add	a5,a5,a4
    6fc8:	00279793          	slli	a5,a5,0x2
    6fcc:	00009737          	lui	a4,0x9
    6fd0:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    6fd4:	00e787b3          	add	a5,a5,a4
    6fd8:	0080006f          	j	6fe0 <_read+0x4c>
    6fdc:	00000793          	li	a5,0
    6fe0:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    6fe4:	fe842783          	lw	a5,-24(s0)
    6fe8:	08078663          	beqz	a5,7074 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    6fec:	fe842783          	lw	a5,-24(s0)
    6ff0:	0087a783          	lw	a5,8(a5)
    6ff4:	0037f713          	andi	a4,a5,3
    6ff8:	00100793          	li	a5,1
    6ffc:	06f70263          	beq	a4,a5,7060 <_read+0xcc>
        (fd->dev->read))
    7000:	fe842783          	lw	a5,-24(s0)
    7004:	0007a783          	lw	a5,0(a5)
    7008:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    700c:	04078a63          	beqz	a5,7060 <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    7010:	fe842783          	lw	a5,-24(s0)
    7014:	0007a783          	lw	a5,0(a5)
    7018:	0147a783          	lw	a5,20(a5)
    701c:	fd442703          	lw	a4,-44(s0)
    7020:	00070613          	mv	a2,a4
    7024:	fd842583          	lw	a1,-40(s0)
    7028:	fe842503          	lw	a0,-24(s0)
    702c:	000780e7          	jalr	a5
    7030:	fea42623          	sw	a0,-20(s0)
    7034:	fec42783          	lw	a5,-20(s0)
    7038:	0207d063          	bgez	a5,7058 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
    703c:	f0dff0ef          	jal	ra,6f48 <alt_get_errno>
    7040:	00050713          	mv	a4,a0
    7044:	fec42783          	lw	a5,-20(s0)
    7048:	40f007b3          	neg	a5,a5
    704c:	00f72023          	sw	a5,0(a4)
          return -1;
    7050:	fff00793          	li	a5,-1
    7054:	0340006f          	j	7088 <_read+0xf4>
        }
        return rval;
    7058:	fec42783          	lw	a5,-20(s0)
    705c:	02c0006f          	j	7088 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    7060:	ee9ff0ef          	jal	ra,6f48 <alt_get_errno>
    7064:	00050713          	mv	a4,a0
    7068:	00d00793          	li	a5,13
    706c:	00f72023          	sw	a5,0(a4)
    7070:	0140006f          	j	7084 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    7074:	ed5ff0ef          	jal	ra,6f48 <alt_get_errno>
    7078:	00050713          	mv	a4,a0
    707c:	05100793          	li	a5,81
    7080:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    7084:	fff00793          	li	a5,-1
}
    7088:	00078513          	mv	a0,a5
    708c:	02c12083          	lw	ra,44(sp)
    7090:	02812403          	lw	s0,40(sp)
    7094:	03010113          	addi	sp,sp,48
    7098:	00008067          	ret

0000709c <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    709c:	fc010113          	addi	sp,sp,-64
    70a0:	02812e23          	sw	s0,60(sp)
    70a4:	04010413          	addi	s0,sp,64
    70a8:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    70ac:	00800793          	li	a5,8
    70b0:	3007b7f3          	csrrc	a5,mstatus,a5
    70b4:	fef42223          	sw	a5,-28(s0)
    return context;
    70b8:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    70bc:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    70c0:	8341a783          	lw	a5,-1996(gp) # 950c <heap_end>
    70c4:	00378793          	addi	a5,a5,3
    70c8:	ffc7f793          	andi	a5,a5,-4
    70cc:	00078713          	mv	a4,a5
    70d0:	82e1aa23          	sw	a4,-1996(gp) # 950c <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    70d4:	8341a703          	lw	a4,-1996(gp) # 950c <heap_end>
    70d8:	fcc42783          	lw	a5,-52(s0)
    70dc:	00f70733          	add	a4,a4,a5
    70e0:	000107b7          	lui	a5,0x10
    70e4:	00078793          	mv	a5,a5
    70e8:	02e7f263          	bgeu	a5,a4,710c <_sbrk+0x70>
    70ec:	fdc42783          	lw	a5,-36(s0)
    70f0:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    70f4:	fe842783          	lw	a5,-24(s0)
    70f8:	0087f793          	andi	a5,a5,8
    70fc:	3007a073          	csrs	mstatus,a5
}
    7100:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    7104:	fff00793          	li	a5,-1
    7108:	0380006f          	j	7140 <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
    710c:	8341a783          	lw	a5,-1996(gp) # 950c <heap_end>
    7110:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
    7114:	8341a703          	lw	a4,-1996(gp) # 950c <heap_end>
    7118:	fcc42783          	lw	a5,-52(s0)
    711c:	00f70733          	add	a4,a4,a5
    7120:	82e1aa23          	sw	a4,-1996(gp) # 950c <heap_end>
    7124:	fdc42783          	lw	a5,-36(s0)
    7128:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    712c:	fec42783          	lw	a5,-20(s0)
    7130:	0087f793          	andi	a5,a5,8
    7134:	3007a073          	csrs	mstatus,a5
}
    7138:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    713c:	fe042783          	lw	a5,-32(s0)
}
    7140:	00078513          	mv	a0,a5
    7144:	03c12403          	lw	s0,60(sp)
    7148:	04010113          	addi	sp,sp,64
    714c:	00008067          	ret

00007150 <alt_get_errno>:
{
    7150:	ff010113          	addi	sp,sp,-16
    7154:	00112623          	sw	ra,12(sp)
    7158:	00812423          	sw	s0,8(sp)
    715c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    7160:	000097b7          	lui	a5,0x9
    7164:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    7168:	00078c63          	beqz	a5,7180 <alt_get_errno+0x30>
    716c:	000097b7          	lui	a5,0x9
    7170:	4f87a783          	lw	a5,1272(a5) # 94f8 <alt_errno>
    7174:	000780e7          	jalr	a5
    7178:	00050793          	mv	a5,a0
    717c:	00c0006f          	j	7188 <alt_get_errno+0x38>
    7180:	0000b7b7          	lui	a5,0xb
    7184:	06078793          	addi	a5,a5,96 # b060 <errno>
}
    7188:	00078513          	mv	a0,a5
    718c:	00c12083          	lw	ra,12(sp)
    7190:	00812403          	lw	s0,8(sp)
    7194:	01010113          	addi	sp,sp,16
    7198:	00008067          	ret

0000719c <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    719c:	fd010113          	addi	sp,sp,-48
    71a0:	02112623          	sw	ra,44(sp)
    71a4:	02812423          	sw	s0,40(sp)
    71a8:	03010413          	addi	s0,sp,48
    71ac:	fca42e23          	sw	a0,-36(s0)
    71b0:	fcb42c23          	sw	a1,-40(s0)
    71b4:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    71b8:	fdc42783          	lw	a5,-36(s0)
    71bc:	0207c463          	bltz	a5,71e4 <_write+0x48>
    71c0:	fdc42703          	lw	a4,-36(s0)
    71c4:	00070793          	mv	a5,a4
    71c8:	00179793          	slli	a5,a5,0x1
    71cc:	00e787b3          	add	a5,a5,a4
    71d0:	00279793          	slli	a5,a5,0x2
    71d4:	00009737          	lui	a4,0x9
    71d8:	b2870713          	addi	a4,a4,-1240 # 8b28 <alt_fd_list>
    71dc:	00e787b3          	add	a5,a5,a4
    71e0:	0080006f          	j	71e8 <_write+0x4c>
    71e4:	00000793          	li	a5,0
    71e8:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    71ec:	fe842783          	lw	a5,-24(s0)
    71f0:	08078a63          	beqz	a5,7284 <_write+0xe8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    71f4:	fe842783          	lw	a5,-24(s0)
    71f8:	0087a783          	lw	a5,8(a5)
    71fc:	0037f793          	andi	a5,a5,3
    7200:	06078863          	beqz	a5,7270 <_write+0xd4>
    7204:	fe842783          	lw	a5,-24(s0)
    7208:	0007a783          	lw	a5,0(a5)
    720c:	0187a783          	lw	a5,24(a5)
    7210:	06078063          	beqz	a5,7270 <_write+0xd4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
    7214:	fd442583          	lw	a1,-44(s0)
    7218:	fd842503          	lw	a0,-40(s0)
    721c:	b81f90ef          	jal	ra,d9c <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    7220:	fe842783          	lw	a5,-24(s0)
    7224:	0007a783          	lw	a5,0(a5)
    7228:	0187a783          	lw	a5,24(a5)
    722c:	fd442703          	lw	a4,-44(s0)
    7230:	00070613          	mv	a2,a4
    7234:	fd842583          	lw	a1,-40(s0)
    7238:	fe842503          	lw	a0,-24(s0)
    723c:	000780e7          	jalr	a5
    7240:	fea42623          	sw	a0,-20(s0)
    7244:	fec42783          	lw	a5,-20(s0)
    7248:	0207d063          	bgez	a5,7268 <_write+0xcc>
      {
        ALT_ERRNO = -rval;
    724c:	f05ff0ef          	jal	ra,7150 <alt_get_errno>
    7250:	00050713          	mv	a4,a0
    7254:	fec42783          	lw	a5,-20(s0)
    7258:	40f007b3          	neg	a5,a5
    725c:	00f72023          	sw	a5,0(a4)
        return -1;
    7260:	fff00793          	li	a5,-1
    7264:	0340006f          	j	7298 <_write+0xfc>
      }
      return rval;
    7268:	fec42783          	lw	a5,-20(s0)
    726c:	02c0006f          	j	7298 <_write+0xfc>
    }
    else
    {
      ALT_ERRNO = EACCES;
    7270:	ee1ff0ef          	jal	ra,7150 <alt_get_errno>
    7274:	00050713          	mv	a4,a0
    7278:	00d00793          	li	a5,13
    727c:	00f72023          	sw	a5,0(a4)
    7280:	0140006f          	j	7294 <_write+0xf8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    7284:	ecdff0ef          	jal	ra,7150 <alt_get_errno>
    7288:	00050713          	mv	a4,a0
    728c:	05100793          	li	a5,81
    7290:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    7294:	fff00793          	li	a5,-1
}
    7298:	00078513          	mv	a0,a5
    729c:	02c12083          	lw	ra,44(sp)
    72a0:	02812403          	lw	s0,40(sp)
    72a4:	03010113          	addi	sp,sp,48
    72a8:	00008067          	ret

000072ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    72ac:	fd010113          	addi	sp,sp,-48
    72b0:	02812623          	sw	s0,44(sp)
    72b4:	03010413          	addi	s0,sp,48
    72b8:	fca42e23          	sw	a0,-36(s0)
    72bc:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
    72c0:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
    72c4:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    72c8:	3e800793          	li	a5,1000
    72cc:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
    72d0:	fd842783          	lw	a5,-40(s0)
    72d4:	00079663          	bnez	a5,72e0 <alt_find_dev+0x34>
    72d8:	00000793          	li	a5,0
    72dc:	0e00006f          	j	73bc <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
    72e0:	fd842783          	lw	a5,-40(s0)
    72e4:	0007a783          	lw	a5,0(a5)
    72e8:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    72ec:	0c00006f          	j	73ac <alt_find_dev+0x100>
    {
        len=0;
    72f0:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    72f4:	0380006f          	j	732c <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
    72f8:	fe442783          	lw	a5,-28(s0)
    72fc:	0087a703          	lw	a4,8(a5)
    7300:	fe842783          	lw	a5,-24(s0)
    7304:	00f707b3          	add	a5,a4,a5
    7308:	0007c703          	lbu	a4,0(a5)
    730c:	fe842783          	lw	a5,-24(s0)
    7310:	fdc42683          	lw	a3,-36(s0)
    7314:	00f687b3          	add	a5,a3,a5
    7318:	0007c783          	lbu	a5,0(a5)
    731c:	04f71663          	bne	a4,a5,7368 <alt_find_dev+0xbc>
            len++;
    7320:	fe842783          	lw	a5,-24(s0)
    7324:	00178793          	addi	a5,a5,1
    7328:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    732c:	fe842783          	lw	a5,-24(s0)
    7330:	fdc42703          	lw	a4,-36(s0)
    7334:	00f707b3          	add	a5,a4,a5
    7338:	0007c783          	lbu	a5,0(a5)
    733c:	02078863          	beqz	a5,736c <alt_find_dev+0xc0>
    7340:	fe442783          	lw	a5,-28(s0)
    7344:	0087a703          	lw	a4,8(a5)
    7348:	fe842783          	lw	a5,-24(s0)
    734c:	00f707b3          	add	a5,a4,a5
    7350:	0007c783          	lbu	a5,0(a5)
    7354:	00078c63          	beqz	a5,736c <alt_find_dev+0xc0>
    7358:	fe842703          	lw	a4,-24(s0)
    735c:	fec42783          	lw	a5,-20(s0)
    7360:	f8f74ce3          	blt	a4,a5,72f8 <alt_find_dev+0x4c>
    7364:	0080006f          	j	736c <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
    7368:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
    736c:	fe842783          	lw	a5,-24(s0)
    7370:	fdc42703          	lw	a4,-36(s0)
    7374:	00f707b3          	add	a5,a4,a5
    7378:	0007c783          	lbu	a5,0(a5)
    737c:	02079263          	bnez	a5,73a0 <alt_find_dev+0xf4>
    7380:	fe442783          	lw	a5,-28(s0)
    7384:	0087a703          	lw	a4,8(a5)
    7388:	fe842783          	lw	a5,-24(s0)
    738c:	00f707b3          	add	a5,a4,a5
    7390:	0007c783          	lbu	a5,0(a5)
    7394:	00079663          	bnez	a5,73a0 <alt_find_dev+0xf4>
    7398:	fe442783          	lw	a5,-28(s0)
    739c:	0200006f          	j	73bc <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
    73a0:	fe442783          	lw	a5,-28(s0)
    73a4:	0007a783          	lw	a5,0(a5)
    73a8:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
    73ac:	fe442703          	lw	a4,-28(s0)
    73b0:	fd842783          	lw	a5,-40(s0)
    73b4:	f2f71ee3          	bne	a4,a5,72f0 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
    73b8:	00000793          	li	a5,0
}
    73bc:	00078513          	mv	a0,a5
    73c0:	02c12403          	lw	s0,44(sp)
    73c4:	03010113          	addi	sp,sp,48
    73c8:	00008067          	ret

000073cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    73cc:	fd010113          	addi	sp,sp,-48
    73d0:	02812623          	sw	s0,44(sp)
    73d4:	03010413          	addi	s0,sp,48
    73d8:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
    73dc:	000097b7          	lui	a5,0x9
    73e0:	4e478793          	addi	a5,a5,1252 # 94e4 <alt_fs_list>
    73e4:	0007a783          	lw	a5,0(a5)
    73e8:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
    73ec:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    73f0:	3e800793          	li	a5,1000
    73f4:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
    73f8:	0ec0006f          	j	74e4 <alt_find_file+0x118>
    {
        len=0;
    73fc:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    7400:	0bc0006f          	j	74bc <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
    7404:	fe442783          	lw	a5,-28(s0)
    7408:	0087a703          	lw	a4,8(a5)
    740c:	fe842783          	lw	a5,-24(s0)
    7410:	00f707b3          	add	a5,a4,a5
    7414:	0007c703          	lbu	a4,0(a5)
    7418:	02f00793          	li	a5,47
    741c:	02f71063          	bne	a4,a5,743c <alt_find_file+0x70>
    7420:	fe442783          	lw	a5,-28(s0)
    7424:	0087a703          	lw	a4,8(a5)
    7428:	fe842783          	lw	a5,-24(s0)
    742c:	00178793          	addi	a5,a5,1
    7430:	00f707b3          	add	a5,a4,a5
    7434:	0007c783          	lbu	a5,0(a5)
    7438:	00078e63          	beqz	a5,7454 <alt_find_file+0x88>
    743c:	fe442783          	lw	a5,-28(s0)
    7440:	0087a703          	lw	a4,8(a5)
    7444:	fe842783          	lw	a5,-24(s0)
    7448:	00f707b3          	add	a5,a4,a5
    744c:	0007c783          	lbu	a5,0(a5)
    7450:	02079c63          	bnez	a5,7488 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
    7454:	fe842783          	lw	a5,-24(s0)
    7458:	fdc42703          	lw	a4,-36(s0)
    745c:	00f707b3          	add	a5,a4,a5
    7460:	0007c703          	lbu	a4,0(a5)
    7464:	02f00793          	li	a5,47
    7468:	00f70c63          	beq	a4,a5,7480 <alt_find_file+0xb4>
    746c:	fe842783          	lw	a5,-24(s0)
    7470:	fdc42703          	lw	a4,-36(s0)
    7474:	00f707b3          	add	a5,a4,a5
    7478:	0007c783          	lbu	a5,0(a5)
    747c:	04079863          	bnez	a5,74cc <alt_find_file+0x100>
                {
                    return next;
    7480:	fe442783          	lw	a5,-28(s0)
    7484:	0740006f          	j	74f8 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
    7488:	fe442783          	lw	a5,-28(s0)
    748c:	0087a703          	lw	a4,8(a5)
    7490:	fe842783          	lw	a5,-24(s0)
    7494:	00f707b3          	add	a5,a4,a5
    7498:	0007c703          	lbu	a4,0(a5)
    749c:	fe842783          	lw	a5,-24(s0)
    74a0:	fdc42683          	lw	a3,-36(s0)
    74a4:	00f687b3          	add	a5,a3,a5
    74a8:	0007c783          	lbu	a5,0(a5)
    74ac:	02f71463          	bne	a4,a5,74d4 <alt_find_file+0x108>
            len++;
    74b0:	fe842783          	lw	a5,-24(s0)
    74b4:	00178793          	addi	a5,a5,1
    74b8:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    74bc:	fe842703          	lw	a4,-24(s0)
    74c0:	fec42783          	lw	a5,-20(s0)
    74c4:	f4f740e3          	blt	a4,a5,7404 <alt_find_file+0x38>
    74c8:	0100006f          	j	74d8 <alt_find_file+0x10c>
                break;
    74cc:	00000013          	nop
    74d0:	0080006f          	j	74d8 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
    74d4:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
    74d8:	fe442783          	lw	a5,-28(s0)
    74dc:	0007a783          	lw	a5,0(a5)
    74e0:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
    74e4:	fe442703          	lw	a4,-28(s0)
    74e8:	000097b7          	lui	a5,0x9
    74ec:	4e478793          	addi	a5,a5,1252 # 94e4 <alt_fs_list>
    74f0:	f0f716e3          	bne	a4,a5,73fc <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
    74f4:	00000793          	li	a5,0
}
    74f8:	00078513          	mv	a0,a5
    74fc:	02c12403          	lw	s0,44(sp)
    7500:	03010113          	addi	sp,sp,48
    7504:	00008067          	ret

00007508 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    7508:	fd010113          	addi	sp,sp,-48
    750c:	02812623          	sw	s0,44(sp)
    7510:	03010413          	addi	s0,sp,48
    7514:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
    7518:	fe800793          	li	a5,-24
    751c:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    7520:	fe042423          	sw	zero,-24(s0)
    7524:	0880006f          	j	75ac <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    7528:	000097b7          	lui	a5,0x9
    752c:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    7530:	fe842703          	lw	a4,-24(s0)
    7534:	00070793          	mv	a5,a4
    7538:	00179793          	slli	a5,a5,0x1
    753c:	00e787b3          	add	a5,a5,a4
    7540:	00279793          	slli	a5,a5,0x2
    7544:	00f687b3          	add	a5,a3,a5
    7548:	0007a783          	lw	a5,0(a5)
    754c:	04079a63          	bnez	a5,75a0 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    7550:	000097b7          	lui	a5,0x9
    7554:	b2878693          	addi	a3,a5,-1240 # 8b28 <alt_fd_list>
    7558:	fe842703          	lw	a4,-24(s0)
    755c:	00070793          	mv	a5,a4
    7560:	00179793          	slli	a5,a5,0x1
    7564:	00e787b3          	add	a5,a5,a4
    7568:	00279793          	slli	a5,a5,0x2
    756c:	00f687b3          	add	a5,a3,a5
    7570:	fdc42703          	lw	a4,-36(s0)
    7574:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
    7578:	000097b7          	lui	a5,0x9
    757c:	4f47a783          	lw	a5,1268(a5) # 94f4 <alt_max_fd>
    7580:	fe842703          	lw	a4,-24(s0)
    7584:	00e7d863          	bge	a5,a4,7594 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    7588:	000097b7          	lui	a5,0x9
    758c:	fe842703          	lw	a4,-24(s0)
    7590:	4ee7aa23          	sw	a4,1268(a5) # 94f4 <alt_max_fd>
      }
      rc = i;
    7594:	fe842783          	lw	a5,-24(s0)
    7598:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
    759c:	0200006f          	j	75bc <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    75a0:	fe842783          	lw	a5,-24(s0)
    75a4:	00178793          	addi	a5,a5,1
    75a8:	fef42423          	sw	a5,-24(s0)
    75ac:	fe842703          	lw	a4,-24(s0)
    75b0:	01f00793          	li	a5,31
    75b4:	f6e7dae3          	bge	a5,a4,7528 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    75b8:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    75bc:	fec42783          	lw	a5,-20(s0)
}
    75c0:	00078513          	mv	a0,a5
    75c4:	02c12403          	lw	s0,44(sp)
    75c8:	03010113          	addi	sp,sp,48
    75cc:	00008067          	ret

000075d0 <fstat>:
    75d0:	00058613          	mv	a2,a1
    75d4:	00050593          	mv	a1,a0
    75d8:	8241a503          	lw	a0,-2012(gp) # 94fc <_impure_ptr>
    75dc:	f31fe06f          	j	650c <_fstat_r>
    75e0:	33dc                	.2byte	0x33dc
    75e2:	0000                	.2byte	0x0
    75e4:	3044                	.2byte	0x3044
	...
