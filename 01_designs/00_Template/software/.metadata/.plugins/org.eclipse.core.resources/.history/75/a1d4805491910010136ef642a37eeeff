
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000348

Program Header:
0x70000003 off    0x0000942e vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000034 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000698c memsz 0x0000698c flags r-x
    LOAD off    0x000079ac vaddr 0x000069ac paddr 0x0000841c align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x00000e8c vaddr 0x00009e8c paddr 0x00009e8c align 2**12
         filesz 0x00000000 memsz 0x00000114 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000029c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006664  000002bc  000002bc  000012bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000008c  00006920  00006920  00007920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  000069ac  0000841c  000079ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000114  00009e8c  00009e8c  00009e8c  2**2
                  ALLOC
  6 .onchip_memory2 00000000  00009fa0  00009fa0  0000941c  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  0000941c  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000034  00000000  00000000  0000942e  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000568  00000000  00000000  00009468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00006bf8  00000000  00000000  000099d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d13  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000033ea  00000000  00000000  000132db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000cd4  00000000  00000000  000166c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000d94  00000000  00000000  0001739c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000131f  00000000  00000000  00018130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000020  00000000  00000000  00019450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000070  00000000  00000000  00019470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000002bc l    d  .text	00000000 .text
00006920 l    d  .rodata	00000000 .rodata
000069ac l    d  .rwdata	00000000 .rwdata
00009e8c l    d  .bss	00000000 .bss
00009fa0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.S.obj
00000400 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000404 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000069b0 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000898 l     F .text	00000238 altera_avalon_jtag_uart_irq
00000ad0 l     F .text	000000bc altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000138c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000013f4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001798 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00007bb8 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
00002654 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
000026d0 l     F .text	00000040 __fp_lock
00002710 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-mlock.o
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 alt_close.c
00005334 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000054a0 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000055ac l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000056f4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
00005820 l     F .text	0000004c alt_get_errno
0000586c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00005ac0 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00008418 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00005cc8 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
000067d8 l     F .text	0000004c alt_get_errno
000061d4 g     F .text	0000000c .hidden __stack_chk_fail_local
000052dc g     F .text	00000058 _isatty_r
000004d4 g     F .text	00000088 alt_main
00002194 g     F .text	00000094 cleanup_glue
000067b8 g     F .text	00000020 _getpid
00002058 g     F .text	0000012c _puts_r
00009ef8 g     O .bss	00000080 alt_irq
00004f4c g     F .text	00000064 _lseek_r
0000841c g       *ABS*	00000000 __flash_rwdata_start
00009fa0 g       *ABS*	00000000 __alt_heap_start
00006754 g     F .text	00000060 _kill_r
00008be8 g       *ABS*	00000000 __global_pointer$
00009edc g     O .bss	00000001 __lock___atexit_recursive_mutex
00006284 g     F .text	00000090 _signal_r
000047a4 g     F .text	00000078 __sseek
000027d0 g     F .text	000001b0 __sinit
00002750 g     F .text	0000006c __sfmoreglue
000069ac g       *ABS*	00000000 __tls_base
00004098 g     F .text	0000000c __malloc_unlock
00009ec4 g     O .bss	00000001 __lock___arc4random_mutex
00003e94 g     F .text	0000011c memmove
000027bc g     F .text	00000014 _cleanup
00009ef4 g     O .bss	00000004 __stack_chk_guard
0000840c g     O .rwdata	00000004 __atexit_recursive_mutex
00003608 g     F .text	00000004 __retarget_lock_close
00000000 g     F .entry	00000004 __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000527c g     F .text	00000060 _fstat_r
00009ec0 g     O .bss	00000004 errno
00004714 g     F .text	00000008 __seofread
00009e98 g     O .bss	00000004 alt_argv
0000055c g     F .text	00000034 usleep
00007a38 g     O .rwdata	00000180 alt_fd_list
00005e18 g     F .text	00000120 alt_find_dev
00001eb4 g     F .text	000001a4 memcpy
000026c4 g     F .text	0000000c _cleanup_r
00001d84 g     F .text	000000ac alt_niosv_timer_sc_isr
00001874 g     F .text	00000078 alt_io_redirect
00002184 g     F .text	00000010 puts
00006920 g       *ABS*	00000000 __fini_array_end
00000cf8 g     F .text	0000022c altera_avalon_jtag_uart_read
00006314 g     F .text	000000c4 _raise_r
000054ec g     F .text	000000c0 _fstat
000001b4 g     F .exceptions	00000108 handle_trap
00009ef0 g     O .bss	00000004 __malloc_top_pad
000067b4 g     F .text	00000004 _getpid_r
00009ea0 g     O .bss	00000004 __dso_handle
0000300c g     F .text	0000049c __sfvwrite_r
000063d8 g     F .text	000000e0 __sigtramp_r
00004660 g     F .text	00000058 _sbrk_r
00005218 g     F .text	00000064 _read_r
000083f8 g     O .rwdata	00000004 alt_max_fd
000049cc g     F .text	00000178 _fclose_r
00004e80 g     F .text	000000cc fflush
00009eec g     O .bss	00000004 __malloc_max_sbrked_mem
000061e0 g     F .text	0000001c __stack_chk_init
00009ed0 g     O .bss	00000001 __lock___env_recursive_mutex
000055f8 g     F .text	000000fc _isatty
00009ee4 g     O .bss	00000001 __lock___sinit_recursive_mutex
000069a8 g     O .rodata	00000004 _global_impure_ptr
00004108 g     F .text	00000558 _realloc_r
00009fa0 g       *ABS*	00000000 __bss_end
0000161c g     F .text	0000017c alt_iic_isr_register
000019f8 g     F .text	00000160 alt_tick
00005958 g     F .text	00000168 _open
00005c14 g     F .text	000000b4 _sbrk
0000613c g     F .text	00000098 __stack_chk_fail
000069ac g       *ABS*	00000000 __tbss_start
00001e30 g     F .text	0000003c alt_niosv_mtimecmp_interrupt_init
00002b0c g     F .text	00000030 __fp_lock_all
00001960 g     F .text	00000098 alt_alarm_stop
000000c0 g     F .exceptions	000000f4 alt_irq_handler
00007a10 g     O .rwdata	00000028 alt_dev_null
00002b6c g     F .text	0000005c __libc_fini_array
00001c38 g     F .text	00000084 alt_niosv_mtime_get
00002228 g     F .text	00000120 _reclaim_reent
00001344 g     F .text	00000048 alt_dcache_flush_all
00009ed4 g     O .bss	00000001 __lock___malloc_recursive_mutex
0000841c g       *ABS*	00000000 __ram_rwdata_end
000083f0 g     O .rwdata	00000008 alt_dev_list
00006210 g     F .text	00000018 write
00001c14 g     F .text	00000024 alt_timestamp_freq
000069ac g       *ABS*	00000000 __ram_rodata_end
000061fc g     F .text	00000014 fstat
00009fa0 g       *ABS*	00000000 end
000013b8 g     F .text	0000003c alt_dev_reg
0000362c g     F .text	00000004 __retarget_lock_release_recursive
00003620 g     F .text	00000008 __retarget_lock_try_acquire_recursive
000007d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00010000 g       *ABS*	00000000 __alt_stack_pointer
00000f24 g     F .text	0000023c altera_avalon_jtag_uart_write
00002adc g     F .text	0000000c __sfp_lock_acquire
00003dd0 g     F .text	000000c4 memchr
00002d04 g     F .text	00000308 _free_r
00002518 g     F .text	0000013c __call_exitprocs
00008410 g     O .rwdata	00000004 __malloc_sbrk_base
00000348 g     F .text	000000bc _start
00009ea8 g     O .bss	00000004 _alt_tick_rate
00003618 g     F .text	00000008 __retarget_lock_try_acquire
00005740 g     F .text	000000e0 _lseek
00009eb0 g     O .bss	00000008 _alt_nticks
0000657c g     F .text	00000098 signal
00001d18 g     F .text	0000006c alt_niosv_mtimecmp_get
000005c8 g     F .text	0000009c alt_sys_init
000040a4 g     F .text	00000064 _open_r
000069ac g       *ABS*	00000000 __tdata_source
00002430 g     F .text	000000e8 __register_exitproc
00000b8c g     F .text	0000006c altera_avalon_jtag_uart_close
000069ac g       *ABS*	00000000 __ram_rwdata_start
00006920 g       *ABS*	00000000 __ram_rodata_start
00009f78 g     O .bss	00000028 __malloc_current_mallinfo
00009eb8 g     O .bss	00000008 alt_niosv_timestamp_offset
00009e90 g     O .bss	00000004 alt_niosv_timer_interrupt_handler
00000664 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00006074 g     F .text	000000c8 alt_get_fd
000012cc g     F .text	00000078 alt_busy_sleep
0000266c g     F .text	00000058 _close_r
0000072c g     F .text	00000054 altera_avalon_jtag_uart_close_fd
00009fa0 g       *ABS*	00000000 __alt_stack_base
00000780 g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
0000360c g     F .text	00000004 __retarget_lock_close_recursive
00004888 g     F .text	00000144 __swsetup_r
00002980 g     F .text	0000015c __sfp
00007fe0 g     O .rwdata	00000408 __malloc_av_
00002b00 g     F .text	0000000c __sinit_lock_release
000046b8 g     F .text	0000005c __sread
00005f38 g     F .text	0000013c alt_find_file
00001440 g     F .text	000000a8 alt_dev_llist_insert
0000408c g     F .text	0000000c __malloc_lock
00006920 g       *ABS*	00000000 __fini_array_start
00004da0 g     F .text	000000e0 _fflush_r
00003614 g     F .text	00000004 __retarget_lock_acquire_recursive
00009e8c g       *ABS*	00000000 __bss_start
000069ac g       *ABS*	00000000 __tdata_start
000069ac g       *ABS*	00000000 __tdata_end
00003fb0 g     F .text	000000dc memset
000002bc g     F .text	0000008c main
00009e9c g     O .bss	00000004 alt_envp
00009ee8 g     O .bss	00000004 __malloc_max_total_mem
000006c8 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00003604 g     F .text	00000004 __retarget_lock_init_recursive
0000481c g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
00004b44 g     F .text	00000010 fclose
00001b7c g     F .text	00000040 alt_timestamp_start
00006920 g       *ABS*	00000000 __init_array_end
00003630 g     F .text	000007a0 _malloc_r
000083fc g     O .rwdata	00000004 alt_errno
00006614 g     F .text	00000060 _init_signal
000034a8 g     F .text	000000a4 _fwalk
00002bc8 g     F .text	0000013c _malloc_trim_r
00006920 g       *ABS*	00000000 __flash_rodata_start
00003600 g     F .text	00000004 __retarget_lock_init
00000590 g     F .text	00000038 alt_irq_init
000018ec g     F .text	00000074 alt_release_fd
00001e6c g     F .text	00000014 atexit
00004824 g     F .text	00000064 _write_r
00008408 g     O .rwdata	00000004 _impure_ptr
00009e94 g     O .bss	00000004 alt_argc
00004b54 g     F .text	0000024c __sflush_r
00001548 g     F .text	00000060 _do_dtors
00002b3c g     F .text	00000030 __fp_unlock_all
000083e8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001bbc g     F .text	00000058 alt_timestamp
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00005140 g     F .text	000000d8 __swhatbuf_r
000015c8 g     F .text	00000054 alt_ic_isr_register
00000020 g       .exceptions	00000000 trap_vector
00005d14 g     F .text	00000104 _write
0000841c g       *ABS*	00000000 _edata
00009fa0 g       *ABS*	00000000 _end
000002bc g       *ABS*	00000000 __ram_exceptions_end
00009ed8 g     O .bss	00000001 __lock___at_quick_exit_mutex
00000bf8 g     F .text	00000100 altera_avalon_jtag_uart_ioctl
00001b58 g     F .text	00000024 intel_niosv_irq_init
0000471c g     F .text	00000088 __swrite
00008414 g     O .rwdata	00000004 __malloc_trim_threshold
00001e80 g     F .text	00000034 exit
0000354c g     F .text	000000b4 _fwalk_reent
00006824 g     F .text	000000f4 _kill
00010000 g       *ABS*	00000000 __alt_data_end
000069ac g       *ABS*	00000000 __tbss_end
00002ae8 g     F .text	0000000c __sfp_lock_release
00005b0c g     F .text	00000108 _read
00006918 g       *ABS*	00000000 __init_array_start
00003610 g     F .text	00000004 __retarget_lock_acquire
00003628 g     F .text	00000004 __retarget_lock_release
00005460 g     F .text	00000040 _exit
00001160 g     F .text	0000016c alt_alarm_start
00009ec8 g     O .bss	00000001 __lock___dd_hash_mutex
00004fb0 g     F .text	00000190 __smakebuf_r
00009ecc g     O .bss	00000001 __lock___tz_mutex
00002348 g     F .text	0000008c strlen
00006228 g     F .text	0000005c _init_signal_r
000023e4 g     F .text	0000004c open
000015a8 g     F .text	00000020 alt_icache_flush_all
00001cbc g     F .text	0000005c alt_niosv_mtimecmp_set
00008400 g     O .rwdata	00000008 alt_alarm_list
000014e8 g     F .text	00000060 _do_ctors
00006674 g     F .text	000000e0 __sigtramp
000023d4 g     F .text	00000010 close
00000468 g     F .text	0000006c alt_load
00009e8c g     O .bss	00000004 alt_niosv_software_interrupt_handler
00009ee0 g     O .bss	00000001 __lock___sfp_recursive_mutex
000064b8 g     F .text	000000c4 raise
00005380 g     F .text	000000e0 _close
00002af4 g     F .text	0000000c __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	3480006f          	j	348 <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
  20:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
  24:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  28:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  2c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  30:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  34:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  38:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  3c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  40:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  44:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  48:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  4c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  50:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  54:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  58:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  5c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  60:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	ra,1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  b8:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	addi	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fe442783          	lw	a5,-28(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  f8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fd442703          	lw	a4,-44(s0)
 108:	fd842783          	lw	a5,-40(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	0000a7b7          	lui	a5,0xa
 118:	ef878713          	addi	a4,a5,-264 # 9ef8 <alt_irq>
 11c:	fdc42783          	lw	a5,-36(s0)
 120:	00379793          	slli	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	0000a7b7          	lui	a5,0xa
 130:	ef878693          	addi	a3,a5,-264 # 9ef8 <alt_irq>
 134:	fdc42783          	lw	a5,-36(s0)
 138:	00379793          	slli	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 160:	fe842703          	lw	a4,-24(s0)
 164:	fec42783          	lw	a5,-20(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srli	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fd842783          	lw	a5,-40(s0)
 178:	00179793          	slli	a5,a5,0x1
 17c:	fcf42c23          	sw	a5,-40(s0)
            i++;
 180:	fdc42783          	lw	a5,-36(s0)
 184:	00178793          	addi	a5,a5,1
 188:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 194:	fd442783          	lw	a5,-44(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	00000013          	nop
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	addi	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff7c793          	not	a5,a5
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1f4:	fe842783          	lw	a5,-24(s0)
 1f8:	08078863          	beqz	a5,288 <handle_trap+0xd4>
        switch (exception_code) {
 1fc:	fec42703          	lw	a4,-20(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fec42703          	lw	a4,-20(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	0000a7b7          	lui	a5,0xa
 218:	e907a783          	lw	a5,-368(a5) # 9e90 <alt_niosv_timer_interrupt_handler>
 21c:	06078a63          	beqz	a5,290 <handle_trap+0xdc>
                    ALT_OS_INT_ENTER();
 220:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	0000a7b7          	lui	a5,0xa
 228:	e907a783          	lw	a5,-368(a5) # 9e90 <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	00000013          	nop
                break;
 240:	0500006f          	j	290 <handle_trap+0xdc>
                if (alt_niosv_software_interrupt_handler) {
 244:	0000a7b7          	lui	a5,0xa
 248:	e8c7a783          	lw	a5,-372(a5) # 9e8c <alt_niosv_software_interrupt_handler>
 24c:	04078663          	beqz	a5,298 <handle_trap+0xe4>
                    ALT_OS_INT_ENTER();
 250:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	0000a7b7          	lui	a5,0xa
 258:	e8c7a783          	lw	a5,-372(a5) # 9e8c <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	00000013          	nop
                break;
 270:	0280006f          	j	298 <handle_trap+0xe4>
                if (exception_code >= 16) {
 274:	fec42703          	lw	a4,-20(s0)
 278:	00f00793          	li	a5,15
 27c:	02e7f263          	bgeu	a5,a4,2a0 <handle_trap+0xec>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	ra,c0 <alt_irq_handler>
                break;
 284:	01c0006f          	j	2a0 <handle_trap+0xec>
            NIOSV_EBREAK();
 288:	00100073          	ebreak
 28c:	0180006f          	j	2a4 <handle_trap+0xf0>
                break;
 290:	00000013          	nop
 294:	0100006f          	j	2a4 <handle_trap+0xf0>
                break;
 298:	00000013          	nop
 29c:	0080006f          	j	2a4 <handle_trap+0xf0>
                break;
 2a0:	00000013          	nop
    return epc;
 2a4:	fd842783          	lw	a5,-40(s0)
}
 2a8:	00078513          	mv	a0,a5
 2ac:	02c12083          	lw	ra,44(sp)
 2b0:	02812403          	lw	s0,40(sp)
 2b4:	03010113          	addi	sp,sp,48
 2b8:	00008067          	ret

Disassembly of section .text:

000002bc <main>:
#include <unistd.h>
#include "system.h"
#include "io.h"

int main (void)
{
     2bc:	fe010113          	addi	sp,sp,-32
     2c0:	00112e23          	sw	ra,28(sp)
     2c4:	00812c23          	sw	s0,24(sp)
     2c8:	02010413          	addi	s0,sp,32
	printf("Starting NIOS V ... \r\n");
     2cc:	000077b7          	lui	a5,0x7
     2d0:	92078513          	addi	a0,a5,-1760 # 6920 <__fini_array_end>
     2d4:	6b1010ef          	jal	ra,2184 <puts>

	while(1)
	{
		if (IORD_32DIRECT(KEY_BASE,0)){
     2d8:	000207b7          	lui	a5,0x20
     2dc:	06078793          	addi	a5,a5,96 # 20060 <__alt_data_end+0x10060>
     2e0:	0007a783          	lw	a5,0(a5)
     2e4:	fef42223          	sw	a5,-28(s0)
     2e8:	fe442783          	lw	a5,-28(s0)
     2ec:	02078463          	beqz	a5,314 <main+0x58>
			printf("LED H \r\n");
     2f0:	000077b7          	lui	a5,0x7
     2f4:	93878513          	addi	a0,a5,-1736 # 6938 <__fini_array_end+0x18>
     2f8:	68d010ef          	jal	ra,2184 <puts>
			IOWR_32DIRECT(LED_BASE, 0, 0);
     2fc:	fe042623          	sw	zero,-20(s0)
     300:	000207b7          	lui	a5,0x20
     304:	04078793          	addi	a5,a5,64 # 20040 <__alt_data_end+0x10040>
     308:	fec42703          	lw	a4,-20(s0)
     30c:	00e7a023          	sw	a4,0(a5)
     310:	0280006f          	j	338 <main+0x7c>
		} else {
			printf("LED L \r\n");
     314:	000077b7          	lui	a5,0x7
     318:	94078513          	addi	a0,a5,-1728 # 6940 <__fini_array_end+0x20>
     31c:	669010ef          	jal	ra,2184 <puts>
			IOWR_32DIRECT(LED_BASE, 0, 1);
     320:	00100793          	li	a5,1
     324:	fef42423          	sw	a5,-24(s0)
     328:	000207b7          	lui	a5,0x20
     32c:	04078793          	addi	a5,a5,64 # 20040 <__alt_data_end+0x10040>
     330:	fe842703          	lw	a4,-24(s0)
     334:	00e7a023          	sw	a4,0(a5)
		}

		usleep(200000);
     338:	000317b7          	lui	a5,0x31
     33c:	d4078513          	addi	a0,a5,-704 # 30d40 <__alt_data_end+0x20d40>
     340:	21c000ef          	jal	ra,55c <usleep>
		if (IORD_32DIRECT(KEY_BASE,0)){
     344:	f95ff06f          	j	2d8 <main+0x1c>

00000348 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     348:	00000297          	auipc	t0,0x0
     34c:	cd828293          	addi	t0,t0,-808 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     350:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     354:	08800293          	li	t0,136
    csrc mstatus, t0
     358:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     35c:	30401073          	csrw	mie,zero
    csrw mip, zero
     360:	34401073          	csrw	mip,zero
 * RTL simulations can ensure the data cache tag RAM is already
 * initialized so skipping this speeds up RTL simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
#if ALT_CPU_DCACHE_SIZE > 0
    li t0, ALT_CPU_DCACHE_SIZE
     364:	000012b7          	lui	t0,0x1
0:
    /* cbo.inval.ix */
    .insn i 0x0F, 0x2, zero, t0, 0x080
     368:	0802a00f          	.4byte	0x802a00f
    addi t0, t0, -ALT_CPU_DCACHE_LINE_SIZE
     36c:	fe028293          	addi	t0,t0,-32 # fe0 <altera_avalon_jtag_uart_write+0xbc>
    bnez t0, 0b
     370:	fe029ce3          	bnez	t0,368 <_start+0x20>
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     374:	00009197          	auipc	gp,0x9
     378:	87418193          	addi	gp,gp,-1932 # 8be8 <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     37c:	00010117          	auipc	sp,0x10
     380:	c8410113          	addi	sp,sp,-892 # 10000 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     384:	0000a317          	auipc	t1,0xa
     388:	b0830313          	addi	t1,t1,-1272 # 9e8c <alt_niosv_software_interrupt_handler>
    la t2, __bss_end
     38c:	0000a397          	auipc	t2,0xa
     390:	c1438393          	addi	t2,t2,-1004 # 9fa0 <__alt_heap_start>
0:
    sw zero, (t1)
     394:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     398:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     39c:	fe736ce3          	bltu	t1,t2,394 <_start+0x4c>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     3a0:	0c8000ef          	jal	ra,468 <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     3a4:	00006317          	auipc	t1,0x6
     3a8:	60830313          	addi	t1,t1,1544 # 69ac <__ram_rodata_end>
    la t2, __tbss_end
     3ac:	00006397          	auipc	t2,0x6
     3b0:	60038393          	addi	t2,t2,1536 # 69ac <__ram_rodata_end>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     3b4:	00737863          	bgeu	t1,t2,3c4 <_start+0x7c>
0:
    sw zero, (t1)
     3b8:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     3bc:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     3c0:	fe736ce3          	bltu	t1,t2,3b8 <_start+0x70>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     3c4:	00006297          	auipc	t0,0x6
     3c8:	5e828293          	addi	t0,t0,1512 # 69ac <__ram_rodata_end>
    la t1, __tdata_end
     3cc:	00006317          	auipc	t1,0x6
     3d0:	5e030313          	addi	t1,t1,1504 # 69ac <__ram_rodata_end>
    la t2, __tdata_source
     3d4:	00006397          	auipc	t2,0x6
     3d8:	5d838393          	addi	t2,t2,1496 # 69ac <__ram_rodata_end>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     3dc:	0062fc63          	bgeu	t0,t1,3f4 <_start+0xac>
0:
    lw s1, (t0)
     3e0:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     3e4:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     3e8:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     3ec:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     3f0:	fe62e8e3          	bltu	t0,t1,3e0 <_start+0x98>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     3f4:	00006217          	auipc	tp,0x6
     3f8:	5b820213          	addi	tp,tp,1464 # 69ac <__ram_rodata_end>
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     3fc:	0d8000ef          	jal	ra,4d4 <alt_main>

00000400 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     400:	0000006f          	j	400 <alt_after_alt_main>

00000404 <alt_load_section>:
     404:	fe010113          	addi	sp,sp,-32
     408:	00812e23          	sw	s0,28(sp)
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     40c:	02010413          	addi	s0,sp,32
     410:	fea42623          	sw	a0,-20(s0)
     414:	feb42423          	sw	a1,-24(s0)
     418:	fec42223          	sw	a2,-28(s0)
  if (to != from)
     41c:	fe842703          	lw	a4,-24(s0)
     420:	fec42783          	lw	a5,-20(s0)
     424:	02f70a63          	beq	a4,a5,458 <alt_load_section+0x54>
  {
    while( to != end )
     428:	0240006f          	j	44c <alt_load_section+0x48>
    {
      *to++ = *from++;
     42c:	fec42703          	lw	a4,-20(s0)
     430:	00470793          	addi	a5,a4,4
     434:	fef42623          	sw	a5,-20(s0)
     438:	fe842783          	lw	a5,-24(s0)
     43c:	00478693          	addi	a3,a5,4
     440:	fed42423          	sw	a3,-24(s0)
     444:	00072703          	lw	a4,0(a4)
     448:	00e7a023          	sw	a4,0(a5)
    while( to != end )
     44c:	fe842703          	lw	a4,-24(s0)
     450:	fe442783          	lw	a5,-28(s0)
     454:	fcf71ce3          	bne	a4,a5,42c <alt_load_section+0x28>
    }
  }
}
     458:	00000013          	nop
     45c:	01c12403          	lw	s0,28(sp)
     460:	02010113          	addi	sp,sp,32
     464:	00008067          	ret

00000468 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     468:	ff010113          	addi	sp,sp,-16
     46c:	00112623          	sw	ra,12(sp)
     470:	00812423          	sw	s0,8(sp)
     474:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     478:	83418613          	addi	a2,gp,-1996 # 841c <__flash_rwdata_start>
     47c:	000077b7          	lui	a5,0x7
     480:	9ac78593          	addi	a1,a5,-1620 # 69ac <__ram_rodata_end>
     484:	83418513          	addi	a0,gp,-1996 # 841c <__flash_rwdata_start>
     488:	f7dff0ef          	jal	ra,404 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     48c:	2bc00613          	li	a2,700
     490:	02000593          	li	a1,32
     494:	02000513          	li	a0,32
     498:	f6dff0ef          	jal	ra,404 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     49c:	000077b7          	lui	a5,0x7
     4a0:	9ac78613          	addi	a2,a5,-1620 # 69ac <__ram_rodata_end>
     4a4:	000077b7          	lui	a5,0x7
     4a8:	92078593          	addi	a1,a5,-1760 # 6920 <__fini_array_end>
     4ac:	000077b7          	lui	a5,0x7
     4b0:	92078513          	addi	a0,a5,-1760 # 6920 <__fini_array_end>
     4b4:	f51ff0ef          	jal	ra,404 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     4b8:	68d000ef          	jal	ra,1344 <alt_dcache_flush_all>
  alt_icache_flush_all();
     4bc:	0ec010ef          	jal	ra,15a8 <alt_icache_flush_all>
}
     4c0:	00000013          	nop
     4c4:	00c12083          	lw	ra,12(sp)
     4c8:	00812403          	lw	s0,8(sp)
     4cc:	01010113          	addi	sp,sp,16
     4d0:	00008067          	ret

000004d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     4d4:	fe010113          	addi	sp,sp,-32
     4d8:	00112e23          	sw	ra,28(sp)
     4dc:	00812c23          	sw	s0,24(sp)
     4e0:	02010413          	addi	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     4e4:	00000513          	li	a0,0
     4e8:	0a8000ef          	jal	ra,590 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     4ec:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     4f0:	0d8000ef          	jal	ra,5c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     4f4:	000077b7          	lui	a5,0x7
     4f8:	94878613          	addi	a2,a5,-1720 # 6948 <__fini_array_end+0x28>
     4fc:	000077b7          	lui	a5,0x7
     500:	94878593          	addi	a1,a5,-1720 # 6948 <__fini_array_end+0x28>
     504:	000077b7          	lui	a5,0x7
     508:	94878513          	addi	a0,a5,-1720 # 6948 <__fini_array_end+0x28>
     50c:	368010ef          	jal	ra,1874 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     510:	7d9000ef          	jal	ra,14e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     514:	000017b7          	lui	a5,0x1
     518:	54878513          	addi	a0,a5,1352 # 1548 <_do_dtors>
     51c:	151010ef          	jal	ra,1e6c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     520:	0000a7b7          	lui	a5,0xa
     524:	e947a703          	lw	a4,-364(a5) # 9e94 <alt_argc>
     528:	0000a7b7          	lui	a5,0xa
     52c:	e987a683          	lw	a3,-360(a5) # 9e98 <alt_argv>
     530:	0000a7b7          	lui	a5,0xa
     534:	e9c7a783          	lw	a5,-356(a5) # 9e9c <alt_envp>
     538:	00078613          	mv	a2,a5
     53c:	00068593          	mv	a1,a3
     540:	00070513          	mv	a0,a4
     544:	d79ff0ef          	jal	ra,2bc <main>
     548:	fea42623          	sw	a0,-20(s0)
  close(STDOUT_FILENO);
     54c:	00100513          	li	a0,1
     550:	685010ef          	jal	ra,23d4 <close>
  exit (result);
     554:	fec42503          	lw	a0,-20(s0)
     558:	129010ef          	jal	ra,1e80 <exit>

0000055c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     55c:	fe010113          	addi	sp,sp,-32
     560:	00112e23          	sw	ra,28(sp)
     564:	00812c23          	sw	s0,24(sp)
     568:	02010413          	addi	s0,sp,32
     56c:	fea42623          	sw	a0,-20(s0)
  return alt_busy_sleep(us);
     570:	fec42503          	lw	a0,-20(s0)
     574:	559000ef          	jal	ra,12cc <alt_busy_sleep>
     578:	00050793          	mv	a5,a0
}
     57c:	00078513          	mv	a0,a5
     580:	01c12083          	lw	ra,28(sp)
     584:	01812403          	lw	s0,24(sp)
     588:	02010113          	addi	sp,sp,32
     58c:	00008067          	ret

00000590 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     590:	fe010113          	addi	sp,sp,-32
     594:	00112e23          	sw	ra,28(sp)
     598:	00812c23          	sw	s0,24(sp)
     59c:	02010413          	addi	s0,sp,32
     5a0:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_G_IRQ_INIT ( NIOSV, niosv);
     5a4:	5b4010ef          	jal	ra,1b58 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
     5a8:	00800793          	li	a5,8
     5ac:	3007a073          	csrs	mstatus,a5
}
     5b0:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
     5b4:	00000013          	nop
     5b8:	01c12083          	lw	ra,28(sp)
     5bc:	01812403          	lw	s0,24(sp)
     5c0:	02010113          	addi	sp,sp,32
     5c4:	00008067          	ret

000005c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     5c8:	fe010113          	addi	sp,sp,-32
     5cc:	00112e23          	sw	ra,28(sp)
     5d0:	00812c23          	sw	s0,24(sp)
     5d4:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
     5d8:	00000613          	li	a2,0
     5dc:	00000593          	li	a1,0
     5e0:	000077b7          	lui	a5,0x7
     5e4:	9d878513          	addi	a0,a5,-1576 # 69d8 <jtag_uart+0x28>
     5e8:	1f0000ef          	jal	ra,7d8 <altera_avalon_jtag_uart_init>
     5ec:	000077b7          	lui	a5,0x7
     5f0:	9b078513          	addi	a0,a5,-1616 # 69b0 <jtag_uart>
     5f4:	5c5000ef          	jal	ra,13b8 <alt_dev_reg>
     5f8:	3e800793          	li	a5,1000
     5fc:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     600:	0000a7b7          	lui	a5,0xa
     604:	ea87a783          	lw	a5,-344(a5) # 9ea8 <_alt_tick_rate>
     608:	00079a63          	bnez	a5,61c <alt_sys_init+0x54>
  {
    _alt_tick_rate = nticks;
     60c:	0000a7b7          	lui	a5,0xa
     610:	fec42703          	lw	a4,-20(s0)
     614:	eae7a423          	sw	a4,-344(a5) # 9ea8 <_alt_tick_rate>
    return 0;
     618:	0080006f          	j	620 <alt_sys_init+0x58>
  }
  else
  {
    return -1;
     61c:	00000013          	nop
     620:	000027b7          	lui	a5,0x2
     624:	d8478793          	addi	a5,a5,-636 # 1d84 <alt_niosv_timer_sc_isr>
     628:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
     62c:	0000a7b7          	lui	a5,0xa
     630:	fe842703          	lw	a4,-24(s0)
     634:	e8e7a823          	sw	a4,-368(a5) # 9e90 <alt_niosv_timer_interrupt_handler>
}
     638:	00000013          	nop
    INTEL_NIOSV_G_INIT ( NIOSV, niosv);
     63c:	7f4010ef          	jal	ra,1e30 <alt_niosv_mtimecmp_interrupt_init>
     640:	00000613          	li	a2,0
     644:	00000593          	li	a1,0
     648:	00000513          	li	a0,0
     64c:	738010ef          	jal	ra,1d84 <alt_niosv_timer_sc_isr>
}
     650:	00000013          	nop
     654:	01c12083          	lw	ra,28(sp)
     658:	01812403          	lw	s0,24(sp)
     65c:	02010113          	addi	sp,sp,32
     660:	00008067          	ret

00000664 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     664:	fd010113          	addi	sp,sp,-48
     668:	02112623          	sw	ra,44(sp)
     66c:	02812423          	sw	s0,40(sp)
     670:	03010413          	addi	s0,sp,48
     674:	fca42e23          	sw	a0,-36(s0)
     678:	fcb42c23          	sw	a1,-40(s0)
     67c:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     680:	fdc42783          	lw	a5,-36(s0)
     684:	0007a783          	lw	a5,0(a5)
     688:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     68c:	fec42783          	lw	a5,-20(s0)
     690:	02878713          	addi	a4,a5,40
     694:	fdc42783          	lw	a5,-36(s0)
     698:	0087a783          	lw	a5,8(a5)
     69c:	00078693          	mv	a3,a5
     6a0:	fd442603          	lw	a2,-44(s0)
     6a4:	fd842583          	lw	a1,-40(s0)
     6a8:	00070513          	mv	a0,a4
     6ac:	64c000ef          	jal	ra,cf8 <altera_avalon_jtag_uart_read>
     6b0:	00050793          	mv	a5,a0
      fd->fd_flags);
}
     6b4:	00078513          	mv	a0,a5
     6b8:	02c12083          	lw	ra,44(sp)
     6bc:	02812403          	lw	s0,40(sp)
     6c0:	03010113          	addi	sp,sp,48
     6c4:	00008067          	ret

000006c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     6c8:	fd010113          	addi	sp,sp,-48
     6cc:	02112623          	sw	ra,44(sp)
     6d0:	02812423          	sw	s0,40(sp)
     6d4:	03010413          	addi	s0,sp,48
     6d8:	fca42e23          	sw	a0,-36(s0)
     6dc:	fcb42c23          	sw	a1,-40(s0)
     6e0:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     6e4:	fdc42783          	lw	a5,-36(s0)
     6e8:	0007a783          	lw	a5,0(a5)
     6ec:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     6f0:	fec42783          	lw	a5,-20(s0)
     6f4:	02878713          	addi	a4,a5,40
     6f8:	fdc42783          	lw	a5,-36(s0)
     6fc:	0087a783          	lw	a5,8(a5)
     700:	00078693          	mv	a3,a5
     704:	fd442603          	lw	a2,-44(s0)
     708:	fd842583          	lw	a1,-40(s0)
     70c:	00070513          	mv	a0,a4
     710:	015000ef          	jal	ra,f24 <altera_avalon_jtag_uart_write>
     714:	00050793          	mv	a5,a0
      fd->fd_flags);
}
     718:	00078513          	mv	a0,a5
     71c:	02c12083          	lw	ra,44(sp)
     720:	02812403          	lw	s0,40(sp)
     724:	03010113          	addi	sp,sp,48
     728:	00008067          	ret

0000072c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     72c:	fd010113          	addi	sp,sp,-48
     730:	02112623          	sw	ra,44(sp)
     734:	02812423          	sw	s0,40(sp)
     738:	03010413          	addi	s0,sp,48
     73c:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     740:	fdc42783          	lw	a5,-36(s0)
     744:	0007a783          	lw	a5,0(a5)
     748:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     74c:	fec42783          	lw	a5,-20(s0)
     750:	02878713          	addi	a4,a5,40
     754:	fdc42783          	lw	a5,-36(s0)
     758:	0087a783          	lw	a5,8(a5)
     75c:	00078593          	mv	a1,a5
     760:	00070513          	mv	a0,a4
     764:	428000ef          	jal	ra,b8c <altera_avalon_jtag_uart_close>
     768:	00050793          	mv	a5,a0
}
     76c:	00078513          	mv	a0,a5
     770:	02c12083          	lw	ra,44(sp)
     774:	02812403          	lw	s0,40(sp)
     778:	03010113          	addi	sp,sp,48
     77c:	00008067          	ret

00000780 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     780:	fd010113          	addi	sp,sp,-48
     784:	02112623          	sw	ra,44(sp)
     788:	02812423          	sw	s0,40(sp)
     78c:	03010413          	addi	s0,sp,48
     790:	fca42e23          	sw	a0,-36(s0)
     794:	fcb42c23          	sw	a1,-40(s0)
     798:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     79c:	fdc42783          	lw	a5,-36(s0)
     7a0:	0007a783          	lw	a5,0(a5)
     7a4:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     7a8:	fec42783          	lw	a5,-20(s0)
     7ac:	02878793          	addi	a5,a5,40
     7b0:	fd442603          	lw	a2,-44(s0)
     7b4:	fd842583          	lw	a1,-40(s0)
     7b8:	00078513          	mv	a0,a5
     7bc:	43c000ef          	jal	ra,bf8 <altera_avalon_jtag_uart_ioctl>
     7c0:	00050793          	mv	a5,a0
}
     7c4:	00078513          	mv	a0,a5
     7c8:	02c12083          	lw	ra,44(sp)
     7cc:	02812403          	lw	s0,40(sp)
     7d0:	03010113          	addi	sp,sp,48
     7d4:	00008067          	ret

000007d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     7d8:	fd010113          	addi	sp,sp,-48
     7dc:	02112623          	sw	ra,44(sp)
     7e0:	02812423          	sw	s0,40(sp)
     7e4:	03010413          	addi	s0,sp,48
     7e8:	fca42e23          	sw	a0,-36(s0)
     7ec:	fcb42c23          	sw	a1,-40(s0)
     7f0:	fcc42a23          	sw	a2,-44(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     7f4:	fdc42783          	lw	a5,-36(s0)
     7f8:	00100713          	li	a4,1
     7fc:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     800:	fdc42783          	lw	a5,-36(s0)
     804:	0207a783          	lw	a5,32(a5)
     808:	fef42623          	sw	a5,-20(s0)
     80c:	fdc42783          	lw	a5,-36(s0)
     810:	0007a783          	lw	a5,0(a5)
     814:	00478793          	addi	a5,a5,4
     818:	00078713          	mv	a4,a5
     81c:	fec42783          	lw	a5,-20(s0)
     820:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     824:	fd842503          	lw	a0,-40(s0)
     828:	fd442583          	lw	a1,-44(s0)
     82c:	00000713          	li	a4,0
     830:	fdc42683          	lw	a3,-36(s0)
     834:	000017b7          	lui	a5,0x1
     838:	89878613          	addi	a2,a5,-1896 # 898 <altera_avalon_jtag_uart_irq>
     83c:	58d000ef          	jal	ra,15c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     840:	fdc42783          	lw	a5,-36(s0)
     844:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     848:	fdc42783          	lw	a5,-36(s0)
     84c:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
     850:	0000a7b7          	lui	a5,0xa
     854:	ea87a583          	lw	a1,-344(a5) # 9ea8 <_alt_tick_rate>
     858:	fdc42683          	lw	a3,-36(s0)
     85c:	000017b7          	lui	a5,0x1
     860:	ad078613          	addi	a2,a5,-1328 # ad0 <altera_avalon_jtag_uart_timeout>
     864:	00070513          	mv	a0,a4
     868:	0f9000ef          	jal	ra,1160 <alt_alarm_start>
     86c:	00050793          	mv	a5,a0
     870:	0007da63          	bgez	a5,884 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     874:	fdc42783          	lw	a5,-36(s0)
     878:	80000737          	lui	a4,0x80000
     87c:	fff74713          	not	a4,a4
     880:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     884:	00000013          	nop
     888:	02c12083          	lw	ra,44(sp)
     88c:	02812403          	lw	s0,40(sp)
     890:	03010113          	addi	sp,sp,48
     894:	00008067          	ret

00000898 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     898:	fa010113          	addi	sp,sp,-96
     89c:	04812e23          	sw	s0,92(sp)
     8a0:	06010413          	addi	s0,sp,96
     8a4:	faa42623          	sw	a0,-84(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     8a8:	fac42783          	lw	a5,-84(s0)
     8ac:	fcf42223          	sw	a5,-60(s0)
  unsigned int base = sp->base;
     8b0:	fc442783          	lw	a5,-60(s0)
     8b4:	0007a783          	lw	a5,0(a5)
     8b8:	fcf42423          	sw	a5,-56(s0)
  unsigned int postflag=0;
     8bc:	fa042c23          	sw	zero,-72(s0)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8c0:	fc842783          	lw	a5,-56(s0)
     8c4:	00478793          	addi	a5,a5,4
     8c8:	0007a783          	lw	a5,0(a5)
     8cc:	fcf42623          	sw	a5,-52(s0)
     8d0:	fcc42783          	lw	a5,-52(s0)
     8d4:	fcf42823          	sw	a5,-48(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     8d8:	fd042783          	lw	a5,-48(s0)
     8dc:	3007f793          	andi	a5,a5,768
     8e0:	1c078e63          	beqz	a5,abc <altera_avalon_jtag_uart_irq+0x224>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     8e4:	fd042783          	lw	a5,-48(s0)
     8e8:	1007f793          	andi	a5,a5,256
     8ec:	0e078663          	beqz	a5,9d8 <altera_avalon_jtag_uart_irq+0x140>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     8f0:	000107b7          	lui	a5,0x10
     8f4:	faf42e23          	sw	a5,-68(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8f8:	fc442783          	lw	a5,-60(s0)
     8fc:	0287a783          	lw	a5,40(a5) # 10028 <__alt_data_end+0x28>
     900:	00178793          	addi	a5,a5,1
     904:	7ff7f793          	andi	a5,a5,2047
     908:	fcf42a23          	sw	a5,-44(s0)
        if (next == sp->rx_out)
     90c:	fc442783          	lw	a5,-60(s0)
     910:	02c7a783          	lw	a5,44(a5)
     914:	fd442703          	lw	a4,-44(s0)
     918:	06f70263          	beq	a4,a5,97c <altera_avalon_jtag_uart_irq+0xe4>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     91c:	fc842783          	lw	a5,-56(s0)
     920:	0007a783          	lw	a5,0(a5)
     924:	fcf42c23          	sw	a5,-40(s0)
     928:	fd842783          	lw	a5,-40(s0)
     92c:	faf42e23          	sw	a5,-68(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     930:	fbc42703          	lw	a4,-68(s0)
     934:	000087b7          	lui	a5,0x8
     938:	00f777b3          	and	a5,a4,a5
     93c:	04078463          	beqz	a5,984 <altera_avalon_jtag_uart_irq+0xec>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     940:	fc442783          	lw	a5,-60(s0)
     944:	0287a783          	lw	a5,40(a5) # 8028 <__malloc_av_+0x48>
     948:	fbc42703          	lw	a4,-68(s0)
     94c:	0ff77713          	zext.b	a4,a4
     950:	fc442683          	lw	a3,-60(s0)
     954:	00f687b3          	add	a5,a3,a5
     958:	02e78c23          	sb	a4,56(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     95c:	fc442783          	lw	a5,-60(s0)
     960:	0287a783          	lw	a5,40(a5)
     964:	00178793          	addi	a5,a5,1
     968:	7ff7f713          	andi	a4,a5,2047
     96c:	fc442783          	lw	a5,-60(s0)
     970:	02e7a423          	sw	a4,40(a5)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
     974:	00000013          	nop
      {
     978:	f81ff06f          	j	8f8 <altera_avalon_jtag_uart_irq+0x60>
          break;
     97c:	00000013          	nop
     980:	0080006f          	j	988 <altera_avalon_jtag_uart_irq+0xf0>
          break;
     984:	00000013          	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     988:	fbc42703          	lw	a4,-68(s0)
     98c:	000107b7          	lui	a5,0x10
     990:	04f76463          	bltu	a4,a5,9d8 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     994:	fc442783          	lw	a5,-60(s0)
     998:	0207a783          	lw	a5,32(a5) # 10020 <__alt_data_end+0x20>
     99c:	ffe7f713          	andi	a4,a5,-2
     9a0:	fc442783          	lw	a5,-60(s0)
     9a4:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     9a8:	fc442783          	lw	a5,-60(s0)
     9ac:	0207a783          	lw	a5,32(a5)
     9b0:	fcf42e23          	sw	a5,-36(s0)
     9b4:	fc842783          	lw	a5,-56(s0)
     9b8:	00478793          	addi	a5,a5,4
     9bc:	00078713          	mv	a4,a5
     9c0:	fdc42783          	lw	a5,-36(s0)
     9c4:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7fff0000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     9c8:	fc842783          	lw	a5,-56(s0)
     9cc:	00478793          	addi	a5,a5,4
     9d0:	0007a783          	lw	a5,0(a5)
     9d4:	fef42023          	sw	a5,-32(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     9d8:	fd042783          	lw	a5,-48(s0)
     9dc:	2007f793          	andi	a5,a5,512
     9e0:	ee0780e3          	beqz	a5,8c0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     9e4:	fd042783          	lw	a5,-48(s0)
     9e8:	0107d793          	srli	a5,a5,0x10
     9ec:	fcf42023          	sw	a5,-64(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
     9f0:	05c0006f          	j	a4c <altera_avalon_jtag_uart_irq+0x1b4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     9f4:	fc442783          	lw	a5,-60(s0)
     9f8:	0347a783          	lw	a5,52(a5)
     9fc:	fc442703          	lw	a4,-60(s0)
     a00:	00f707b3          	add	a5,a4,a5
     a04:	00001737          	lui	a4,0x1
     a08:	00f707b3          	add	a5,a4,a5
     a0c:	8387c783          	lbu	a5,-1992(a5)
     a10:	fef42223          	sw	a5,-28(s0)
     a14:	fc842783          	lw	a5,-56(s0)
     a18:	fe442703          	lw	a4,-28(s0)
     a1c:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     a20:	fc442783          	lw	a5,-60(s0)
     a24:	0347a783          	lw	a5,52(a5)
     a28:	00178793          	addi	a5,a5,1
     a2c:	7ff7f713          	andi	a4,a5,2047
     a30:	fc442783          	lw	a5,-60(s0)
     a34:	02e7aa23          	sw	a4,52(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
     a38:	00100793          	li	a5,1
     a3c:	faf42c23          	sw	a5,-72(s0)

        space--;
     a40:	fc042783          	lw	a5,-64(s0)
     a44:	fff78793          	addi	a5,a5,-1
     a48:	fcf42023          	sw	a5,-64(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
     a4c:	fc042783          	lw	a5,-64(s0)
     a50:	00078c63          	beqz	a5,a68 <altera_avalon_jtag_uart_irq+0x1d0>
     a54:	fc442783          	lw	a5,-60(s0)
     a58:	0347a703          	lw	a4,52(a5)
     a5c:	fc442783          	lw	a5,-60(s0)
     a60:	0307a783          	lw	a5,48(a5)
     a64:	f8f718e3          	bne	a4,a5,9f4 <altera_avalon_jtag_uart_irq+0x15c>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
     a68:	fc042783          	lw	a5,-64(s0)
     a6c:	e4078ae3          	beqz	a5,8c0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     a70:	fc442783          	lw	a5,-60(s0)
     a74:	0207a783          	lw	a5,32(a5)
     a78:	ffd7f713          	andi	a4,a5,-3
     a7c:	fc442783          	lw	a5,-60(s0)
     a80:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     a84:	fc442783          	lw	a5,-60(s0)
     a88:	0207a783          	lw	a5,32(a5)
     a8c:	fef42423          	sw	a5,-24(s0)
     a90:	fc442783          	lw	a5,-60(s0)
     a94:	0007a783          	lw	a5,0(a5)
     a98:	00478793          	addi	a5,a5,4
     a9c:	00078713          	mv	a4,a5
     aa0:	fe842783          	lw	a5,-24(s0)
     aa4:	00f72023          	sw	a5,0(a4) # 1000 <altera_avalon_jtag_uart_write+0xdc>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     aa8:	fc842783          	lw	a5,-56(s0)
     aac:	00478793          	addi	a5,a5,4
     ab0:	0007a783          	lw	a5,0(a5)
     ab4:	fef42623          	sw	a5,-20(s0)
  {
     ab8:	e09ff06f          	j	8c0 <altera_avalon_jtag_uart_irq+0x28>
      break;
     abc:	00000013          	nop
      }
    }
  }
}
     ac0:	00000013          	nop
     ac4:	05c12403          	lw	s0,92(sp)
     ac8:	06010113          	addi	sp,sp,96
     acc:	00008067          	ret

00000ad0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     ad0:	fd010113          	addi	sp,sp,-48
     ad4:	02812623          	sw	s0,44(sp)
     ad8:	03010413          	addi	s0,sp,48
     adc:	fca42e23          	sw	a0,-36(s0)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     ae0:	fdc42783          	lw	a5,-36(s0)
     ae4:	fef42023          	sw	a5,-32(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     ae8:	fe042783          	lw	a5,-32(s0)
     aec:	0007a783          	lw	a5,0(a5)
     af0:	00478793          	addi	a5,a5,4
     af4:	0007a783          	lw	a5,0(a5)
     af8:	fef42223          	sw	a5,-28(s0)
     afc:	fe442783          	lw	a5,-28(s0)
     b00:	fef42423          	sw	a5,-24(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     b04:	fe842783          	lw	a5,-24(s0)
     b08:	4007f793          	andi	a5,a5,1024
     b0c:	02078c63          	beqz	a5,b44 <altera_avalon_jtag_uart_timeout+0x74>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     b10:	fe042783          	lw	a5,-32(s0)
     b14:	0207a783          	lw	a5,32(a5)
     b18:	4007e793          	ori	a5,a5,1024
     b1c:	fef42623          	sw	a5,-20(s0)
     b20:	fe042783          	lw	a5,-32(s0)
     b24:	0007a783          	lw	a5,0(a5)
     b28:	00478793          	addi	a5,a5,4
     b2c:	00078713          	mv	a4,a5
     b30:	fec42783          	lw	a5,-20(s0)
     b34:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
     b38:	fe042783          	lw	a5,-32(s0)
     b3c:	0207a223          	sw	zero,36(a5)
     b40:	0340006f          	j	b74 <altera_avalon_jtag_uart_timeout+0xa4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     b44:	fe042783          	lw	a5,-32(s0)
     b48:	0247a703          	lw	a4,36(a5)
     b4c:	800007b7          	lui	a5,0x80000
     b50:	ffc7c793          	xori	a5,a5,-4
     b54:	02e7e063          	bltu	a5,a4,b74 <altera_avalon_jtag_uart_timeout+0xa4>
    sp->host_inactive++;
     b58:	fe042783          	lw	a5,-32(s0)
     b5c:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
     b60:	00178713          	addi	a4,a5,1
     b64:	fe042783          	lw	a5,-32(s0)
     b68:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
     b6c:	fe042783          	lw	a5,-32(s0)
     b70:	0247a783          	lw	a5,36(a5)
     b74:	0000a7b7          	lui	a5,0xa
     b78:	ea87a783          	lw	a5,-344(a5) # 9ea8 <_alt_tick_rate>
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     b7c:	00078513          	mv	a0,a5
     b80:	02c12403          	lw	s0,44(sp)
     b84:	03010113          	addi	sp,sp,48
     b88:	00008067          	ret

00000b8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     b8c:	fe010113          	addi	sp,sp,-32
     b90:	00812e23          	sw	s0,28(sp)
     b94:	02010413          	addi	s0,sp,32
     b98:	fea42623          	sw	a0,-20(s0)
     b9c:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     ba0:	01c0006f          	j	bbc <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
     ba4:	fe842703          	lw	a4,-24(s0)
     ba8:	000047b7          	lui	a5,0x4
     bac:	00f777b3          	and	a5,a4,a5
     bb0:	00078663          	beqz	a5,bbc <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
     bb4:	ff500793          	li	a5,-11
     bb8:	0300006f          	j	be8 <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     bbc:	fec42783          	lw	a5,-20(s0)
     bc0:	0347a703          	lw	a4,52(a5) # 4034 <memset+0x84>
     bc4:	fec42783          	lw	a5,-20(s0)
     bc8:	0307a783          	lw	a5,48(a5)
     bcc:	00f70c63          	beq	a4,a5,be4 <altera_avalon_jtag_uart_close+0x58>
     bd0:	fec42783          	lw	a5,-20(s0)
     bd4:	0247a703          	lw	a4,36(a5)
     bd8:	fec42783          	lw	a5,-20(s0)
     bdc:	0047a783          	lw	a5,4(a5)
     be0:	fcf762e3          	bltu	a4,a5,ba4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
     be4:	00000793          	li	a5,0
}
     be8:	00078513          	mv	a0,a5
     bec:	01c12403          	lw	s0,28(sp)
     bf0:	02010113          	addi	sp,sp,32
     bf4:	00008067          	ret

00000bf8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     bf8:	fd010113          	addi	sp,sp,-48
     bfc:	02812623          	sw	s0,44(sp)
     c00:	03010413          	addi	s0,sp,48
     c04:	fca42e23          	sw	a0,-36(s0)
     c08:	fcb42c23          	sw	a1,-40(s0)
     c0c:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
     c10:	fe700793          	li	a5,-25
     c14:	fef42423          	sw	a5,-24(s0)

  switch (req)
     c18:	fd842703          	lw	a4,-40(s0)
     c1c:	000077b7          	lui	a5,0x7
     c20:	a0178793          	addi	a5,a5,-1535 # 6a01 <jtag_uart+0x51>
     c24:	00f70c63          	beq	a4,a5,c3c <altera_avalon_jtag_uart_ioctl+0x44>
     c28:	fd842703          	lw	a4,-40(s0)
     c2c:	000077b7          	lui	a5,0x7
     c30:	a0278793          	addi	a5,a5,-1534 # 6a02 <jtag_uart+0x52>
     c34:	06f70263          	beq	a4,a5,c98 <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
     c38:	0ac0006f          	j	ce4 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
     c3c:	fdc42783          	lw	a5,-36(s0)
     c40:	0047a703          	lw	a4,4(a5)
     c44:	800007b7          	lui	a5,0x80000
     c48:	fff7c793          	not	a5,a5
     c4c:	08f70663          	beq	a4,a5,cd8 <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
     c50:	fd442783          	lw	a5,-44(s0)
     c54:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7fff0000>
     c58:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     c5c:	fec42703          	lw	a4,-20(s0)
     c60:	00100793          	li	a5,1
     c64:	00e7de63          	bge	a5,a4,c80 <altera_avalon_jtag_uart_ioctl+0x88>
     c68:	fec42703          	lw	a4,-20(s0)
     c6c:	800007b7          	lui	a5,0x80000
     c70:	fff7c793          	not	a5,a5
     c74:	00f70663          	beq	a4,a5,c80 <altera_avalon_jtag_uart_ioctl+0x88>
     c78:	fec42783          	lw	a5,-20(s0)
     c7c:	00c0006f          	j	c88 <altera_avalon_jtag_uart_ioctl+0x90>
     c80:	800007b7          	lui	a5,0x80000
     c84:	ffe7c793          	xori	a5,a5,-2
     c88:	fdc42703          	lw	a4,-36(s0)
     c8c:	00f72223          	sw	a5,4(a4)
      rc = 0;
     c90:	fe042423          	sw	zero,-24(s0)
    break;
     c94:	0440006f          	j	cd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
     c98:	fdc42783          	lw	a5,-36(s0)
     c9c:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7fff0004>
     ca0:	800007b7          	lui	a5,0x80000
     ca4:	fff7c793          	not	a5,a5
     ca8:	02f70c63          	beq	a4,a5,ce0 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     cac:	fdc42783          	lw	a5,-36(s0)
     cb0:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7fff0024>
     cb4:	fdc42783          	lw	a5,-36(s0)
     cb8:	0047a783          	lw	a5,4(a5)
     cbc:	00f737b3          	sltu	a5,a4,a5
     cc0:	0ff7f793          	zext.b	a5,a5
     cc4:	00078713          	mv	a4,a5
     cc8:	fd442783          	lw	a5,-44(s0)
     ccc:	00e7a023          	sw	a4,0(a5)
      rc = 0;
     cd0:	fe042423          	sw	zero,-24(s0)
    break;
     cd4:	00c0006f          	j	ce0 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
     cd8:	00000013          	nop
     cdc:	0080006f          	j	ce4 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
     ce0:	00000013          	nop
  }

  return rc;
     ce4:	fe842783          	lw	a5,-24(s0)
}
     ce8:	00078513          	mv	a0,a5
     cec:	02c12403          	lw	s0,44(sp)
     cf0:	03010113          	addi	sp,sp,48
     cf4:	00008067          	ret

00000cf8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     cf8:	fc010113          	addi	sp,sp,-64
     cfc:	02112e23          	sw	ra,60(sp)
     d00:	02812c23          	sw	s0,56(sp)
     d04:	04010413          	addi	s0,sp,64
     d08:	fca42623          	sw	a0,-52(s0)
     d0c:	fcb42423          	sw	a1,-56(s0)
     d10:	fcc42223          	sw	a2,-60(s0)
     d14:	fcd42023          	sw	a3,-64(s0)
  char * ptr = buffer;
     d18:	fc842783          	lw	a5,-56(s0)
     d1c:	fcf42823          	sw	a5,-48(s0)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     d20:	1280006f          	j	e48 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     d24:	fcc42783          	lw	a5,-52(s0)
     d28:	0287a783          	lw	a5,40(a5)
     d2c:	fcf42c23          	sw	a5,-40(s0)
      out = sp->rx_out;
     d30:	fcc42783          	lw	a5,-52(s0)
     d34:	02c7a783          	lw	a5,44(a5)
     d38:	fcf42e23          	sw	a5,-36(s0)

      if (in >= out)
     d3c:	fd842703          	lw	a4,-40(s0)
     d40:	fdc42783          	lw	a5,-36(s0)
     d44:	00f76c63          	bltu	a4,a5,d5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     d48:	fd842703          	lw	a4,-40(s0)
     d4c:	fdc42783          	lw	a5,-36(s0)
     d50:	40f707b3          	sub	a5,a4,a5
     d54:	fcf42a23          	sw	a5,-44(s0)
     d58:	0180006f          	j	d70 <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     d5c:	000017b7          	lui	a5,0x1
     d60:	80078713          	addi	a4,a5,-2048 # 800 <altera_avalon_jtag_uart_init+0x28>
     d64:	fdc42783          	lw	a5,-36(s0)
     d68:	40f707b3          	sub	a5,a4,a5
     d6c:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
     d70:	fd442783          	lw	a5,-44(s0)
     d74:	06078e63          	beqz	a5,df0 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
     d78:	fc442783          	lw	a5,-60(s0)
     d7c:	fd442703          	lw	a4,-44(s0)
     d80:	00e7f663          	bgeu	a5,a4,d8c <altera_avalon_jtag_uart_read+0x94>
        n = space;
     d84:	fc442783          	lw	a5,-60(s0)
     d88:	fcf42a23          	sw	a5,-44(s0)

      memcpy(ptr, sp->rx_buf + out, n);
     d8c:	fcc42783          	lw	a5,-52(s0)
     d90:	03878713          	addi	a4,a5,56
     d94:	fdc42783          	lw	a5,-36(s0)
     d98:	00f707b3          	add	a5,a4,a5
     d9c:	fd442603          	lw	a2,-44(s0)
     da0:	00078593          	mv	a1,a5
     da4:	fd042503          	lw	a0,-48(s0)
     da8:	10c010ef          	jal	ra,1eb4 <memcpy>
      ptr   += n;
     dac:	fd042703          	lw	a4,-48(s0)
     db0:	fd442783          	lw	a5,-44(s0)
     db4:	00f707b3          	add	a5,a4,a5
     db8:	fcf42823          	sw	a5,-48(s0)
      space -= n;
     dbc:	fc442703          	lw	a4,-60(s0)
     dc0:	fd442783          	lw	a5,-44(s0)
     dc4:	40f707b3          	sub	a5,a4,a5
     dc8:	fcf42223          	sw	a5,-60(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     dcc:	fdc42703          	lw	a4,-36(s0)
     dd0:	fd442783          	lw	a5,-44(s0)
     dd4:	00f707b3          	add	a5,a4,a5
     dd8:	7ff7f713          	andi	a4,a5,2047
     ddc:	fcc42783          	lw	a5,-52(s0)
     de0:	02e7a623          	sw	a4,44(a5)
    }
    while (space > 0);
     de4:	fc442783          	lw	a5,-60(s0)
     de8:	f2f04ee3          	bgtz	a5,d24 <altera_avalon_jtag_uart_read+0x2c>
     dec:	0080006f          	j	df4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */
     df0:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
     df4:	fd042703          	lw	a4,-48(s0)
     df8:	fc842783          	lw	a5,-56(s0)
     dfc:	04f71c63          	bne	a4,a5,e54 <altera_avalon_jtag_uart_read+0x15c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     e00:	fc042703          	lw	a4,-64(s0)
     e04:	000047b7          	lui	a5,0x4
     e08:	00f777b3          	and	a5,a4,a5
     e0c:	04079863          	bnez	a5,e5c <altera_avalon_jtag_uart_read+0x164>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     e10:	00000013          	nop
     e14:	fcc42783          	lw	a5,-52(s0)
     e18:	0287a783          	lw	a5,40(a5) # 4028 <memset+0x78>
     e1c:	fd842703          	lw	a4,-40(s0)
     e20:	00f71c63          	bne	a4,a5,e38 <altera_avalon_jtag_uart_read+0x140>
     e24:	fcc42783          	lw	a5,-52(s0)
     e28:	0247a703          	lw	a4,36(a5)
     e2c:	fcc42783          	lw	a5,-52(s0)
     e30:	0047a783          	lw	a5,4(a5)
     e34:	fef760e3          	bltu	a4,a5,e14 <altera_avalon_jtag_uart_read+0x11c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     e38:	fcc42783          	lw	a5,-52(s0)
     e3c:	0287a783          	lw	a5,40(a5)
     e40:	fd842703          	lw	a4,-40(s0)
     e44:	02f70063          	beq	a4,a5,e64 <altera_avalon_jtag_uart_read+0x16c>
  while (space > 0)
     e48:	fc442783          	lw	a5,-60(s0)
     e4c:	ecf04ce3          	bgtz	a5,d24 <altera_avalon_jtag_uart_read+0x2c>
     e50:	0180006f          	j	e68 <altera_avalon_jtag_uart_read+0x170>
      break;
     e54:	00000013          	nop
     e58:	0100006f          	j	e68 <altera_avalon_jtag_uart_read+0x170>
      break;
     e5c:	00000013          	nop
     e60:	0080006f          	j	e68 <altera_avalon_jtag_uart_read+0x170>
      break;
     e64:	00000013          	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     e68:	fd042703          	lw	a4,-48(s0)
     e6c:	fc842783          	lw	a5,-56(s0)
     e70:	06f70463          	beq	a4,a5,ed8 <altera_avalon_jtag_uart_read+0x1e0>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
     e74:	00800793          	li	a5,8
     e78:	3007b7f3          	csrrc	a5,mstatus,a5
     e7c:	fef42623          	sw	a5,-20(s0)
    return context;
     e80:	fec42783          	lw	a5,-20(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     e84:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e88:	fcc42783          	lw	a5,-52(s0)
     e8c:	0207a783          	lw	a5,32(a5)
     e90:	0017e713          	ori	a4,a5,1
     e94:	fcc42783          	lw	a5,-52(s0)
     e98:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     e9c:	fcc42783          	lw	a5,-52(s0)
     ea0:	0207a783          	lw	a5,32(a5)
     ea4:	fef42223          	sw	a5,-28(s0)
     ea8:	fcc42783          	lw	a5,-52(s0)
     eac:	0007a783          	lw	a5,0(a5)
     eb0:	00478793          	addi	a5,a5,4
     eb4:	00078713          	mv	a4,a5
     eb8:	fe442783          	lw	a5,-28(s0)
     ebc:	00f72023          	sw	a5,0(a4)
     ec0:	fe042783          	lw	a5,-32(s0)
     ec4:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
     ec8:	fe842783          	lw	a5,-24(s0)
     ecc:	0087f793          	andi	a5,a5,8
     ed0:	3007a073          	csrs	mstatus,a5
}
     ed4:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     ed8:	fd042703          	lw	a4,-48(s0)
     edc:	fc842783          	lw	a5,-56(s0)
     ee0:	00f70a63          	beq	a4,a5,ef4 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
     ee4:	fd042703          	lw	a4,-48(s0)
     ee8:	fc842783          	lw	a5,-56(s0)
     eec:	40f707b3          	sub	a5,a4,a5
     ef0:	0200006f          	j	f10 <altera_avalon_jtag_uart_read+0x218>
  else if (flags & O_NONBLOCK)
     ef4:	fc042703          	lw	a4,-64(s0)
     ef8:	000047b7          	lui	a5,0x4
     efc:	00f777b3          	and	a5,a4,a5
     f00:	00078663          	beqz	a5,f0c <altera_avalon_jtag_uart_read+0x214>
    return -EWOULDBLOCK;
     f04:	ff500793          	li	a5,-11
     f08:	0080006f          	j	f10 <altera_avalon_jtag_uart_read+0x218>
  else
    return -EIO;
     f0c:	ffb00793          	li	a5,-5
}
     f10:	00078513          	mv	a0,a5
     f14:	03c12083          	lw	ra,60(sp)
     f18:	03812403          	lw	s0,56(sp)
     f1c:	04010113          	addi	sp,sp,64
     f20:	00008067          	ret

00000f24 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     f24:	fc010113          	addi	sp,sp,-64
     f28:	02112e23          	sw	ra,60(sp)
     f2c:	02812c23          	sw	s0,56(sp)
     f30:	04010413          	addi	s0,sp,64
     f34:	fca42623          	sw	a0,-52(s0)
     f38:	fcb42423          	sw	a1,-56(s0)
     f3c:	fcc42223          	sw	a2,-60(s0)
     f40:	fcd42023          	sw	a3,-64(s0)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     f44:	fc042823          	sw	zero,-48(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     f48:	fc842783          	lw	a5,-56(s0)
     f4c:	fcf42c23          	sw	a5,-40(s0)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     f50:	0ec0006f          	j	103c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     f54:	fcc42783          	lw	a5,-52(s0)
     f58:	0307a783          	lw	a5,48(a5) # 4030 <memset+0x80>
     f5c:	fcf42e23          	sw	a5,-36(s0)
      out = sp->tx_out;
     f60:	fcc42783          	lw	a5,-52(s0)
     f64:	0347a783          	lw	a5,52(a5)
     f68:	fcf42823          	sw	a5,-48(s0)

      if (in < out)
     f6c:	fdc42703          	lw	a4,-36(s0)
     f70:	fd042783          	lw	a5,-48(s0)
     f74:	00f77e63          	bgeu	a4,a5,f90 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     f78:	fd042703          	lw	a4,-48(s0)
     f7c:	fdc42783          	lw	a5,-36(s0)
     f80:	40f707b3          	sub	a5,a4,a5
     f84:	fff78793          	addi	a5,a5,-1
     f88:	fcf42a23          	sw	a5,-44(s0)
     f8c:	0340006f          	j	fc0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
     f90:	fd042783          	lw	a5,-48(s0)
     f94:	00078e63          	beqz	a5,fb0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     f98:	000017b7          	lui	a5,0x1
     f9c:	80078713          	addi	a4,a5,-2048 # 800 <altera_avalon_jtag_uart_init+0x28>
     fa0:	fdc42783          	lw	a5,-36(s0)
     fa4:	40f707b3          	sub	a5,a4,a5
     fa8:	fcf42a23          	sw	a5,-44(s0)
     fac:	0140006f          	j	fc0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     fb0:	7ff00713          	li	a4,2047
     fb4:	fdc42783          	lw	a5,-36(s0)
     fb8:	40f707b3          	sub	a5,a4,a5
     fbc:	fcf42a23          	sw	a5,-44(s0)

      if (n == 0)
     fc0:	fd442783          	lw	a5,-44(s0)
     fc4:	08078263          	beqz	a5,1048 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
     fc8:	fc442783          	lw	a5,-60(s0)
     fcc:	fd442703          	lw	a4,-44(s0)
     fd0:	00e7f663          	bgeu	a5,a4,fdc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
     fd4:	fc442783          	lw	a5,-60(s0)
     fd8:	fcf42a23          	sw	a5,-44(s0)

      memcpy(sp->tx_buf + in, ptr, n);
     fdc:	fcc42703          	lw	a4,-52(s0)
     fe0:	000017b7          	lui	a5,0x1
     fe4:	83878793          	addi	a5,a5,-1992 # 838 <altera_avalon_jtag_uart_init+0x60>
     fe8:	00f70733          	add	a4,a4,a5
     fec:	fdc42783          	lw	a5,-36(s0)
     ff0:	00f707b3          	add	a5,a4,a5
     ff4:	fd442603          	lw	a2,-44(s0)
     ff8:	fc842583          	lw	a1,-56(s0)
     ffc:	00078513          	mv	a0,a5
    1000:	6b5000ef          	jal	ra,1eb4 <memcpy>
      ptr   += n;
    1004:	fc842703          	lw	a4,-56(s0)
    1008:	fd442783          	lw	a5,-44(s0)
    100c:	00f707b3          	add	a5,a4,a5
    1010:	fcf42423          	sw	a5,-56(s0)
      count -= n;
    1014:	fc442703          	lw	a4,-60(s0)
    1018:	fd442783          	lw	a5,-44(s0)
    101c:	40f707b3          	sub	a5,a4,a5
    1020:	fcf42223          	sw	a5,-60(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1024:	fdc42703          	lw	a4,-36(s0)
    1028:	fd442783          	lw	a5,-44(s0)
    102c:	00f707b3          	add	a5,a4,a5
    1030:	7ff7f713          	andi	a4,a5,2047
    1034:	fcc42783          	lw	a5,-52(s0)
    1038:	02e7a823          	sw	a4,48(a5)
    while (count > 0)
    103c:	fc442783          	lw	a5,-60(s0)
    1040:	f0f04ae3          	bgtz	a5,f54 <altera_avalon_jtag_uart_write+0x30>
    1044:	0080006f          	j	104c <altera_avalon_jtag_uart_write+0x128>
        break;
    1048:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    104c:	00800793          	li	a5,8
    1050:	3007b7f3          	csrrc	a5,mstatus,a5
    1054:	fef42623          	sw	a5,-20(s0)
    return context;
    1058:	fec42783          	lw	a5,-20(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    105c:	fef42023          	sw	a5,-32(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1060:	fcc42783          	lw	a5,-52(s0)
    1064:	0207a783          	lw	a5,32(a5)
    1068:	0027e713          	ori	a4,a5,2
    106c:	fcc42783          	lw	a5,-52(s0)
    1070:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1074:	fcc42783          	lw	a5,-52(s0)
    1078:	0207a783          	lw	a5,32(a5)
    107c:	fef42223          	sw	a5,-28(s0)
    1080:	fcc42783          	lw	a5,-52(s0)
    1084:	0007a783          	lw	a5,0(a5)
    1088:	00478793          	addi	a5,a5,4
    108c:	00078713          	mv	a4,a5
    1090:	fe442783          	lw	a5,-28(s0)
    1094:	00f72023          	sw	a5,0(a4)
    1098:	fe042783          	lw	a5,-32(s0)
    109c:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    10a0:	fe842783          	lw	a5,-24(s0)
    10a4:	0087f793          	andi	a5,a5,8
    10a8:	3007a073          	csrs	mstatus,a5
}
    10ac:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    10b0:	fc442783          	lw	a5,-60(s0)
    10b4:	04f05463          	blez	a5,10fc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    10b8:	fc042703          	lw	a4,-64(s0)
    10bc:	000047b7          	lui	a5,0x4
    10c0:	00f777b3          	and	a5,a4,a5
    10c4:	04079263          	bnez	a5,1108 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    10c8:	00000013          	nop
    10cc:	fcc42783          	lw	a5,-52(s0)
    10d0:	0347a783          	lw	a5,52(a5) # 4034 <memset+0x84>
    10d4:	fd042703          	lw	a4,-48(s0)
    10d8:	00f71c63          	bne	a4,a5,10f0 <altera_avalon_jtag_uart_write+0x1cc>
    10dc:	fcc42783          	lw	a5,-52(s0)
    10e0:	0247a703          	lw	a4,36(a5)
    10e4:	fcc42783          	lw	a5,-52(s0)
    10e8:	0047a783          	lw	a5,4(a5)
    10ec:	fef760e3          	bltu	a4,a5,10cc <altera_avalon_jtag_uart_write+0x1a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    10f0:	fcc42783          	lw	a5,-52(s0)
    10f4:	0247a783          	lw	a5,36(a5)
    10f8:	00079c63          	bnez	a5,1110 <altera_avalon_jtag_uart_write+0x1ec>
         break;
    }
  }
  while (count > 0);
    10fc:	fc442783          	lw	a5,-60(s0)
    1100:	f2f04ee3          	bgtz	a5,103c <altera_avalon_jtag_uart_write+0x118>
    1104:	0100006f          	j	1114 <altera_avalon_jtag_uart_write+0x1f0>
        break;
    1108:	00000013          	nop
    110c:	0080006f          	j	1114 <altera_avalon_jtag_uart_write+0x1f0>
         break;
    1110:	00000013          	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1114:	fc842703          	lw	a4,-56(s0)
    1118:	fd842783          	lw	a5,-40(s0)
    111c:	00f70a63          	beq	a4,a5,1130 <altera_avalon_jtag_uart_write+0x20c>
    return ptr - start;
    1120:	fc842703          	lw	a4,-56(s0)
    1124:	fd842783          	lw	a5,-40(s0)
    1128:	40f707b3          	sub	a5,a4,a5
    112c:	0200006f          	j	114c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1130:	fc042703          	lw	a4,-64(s0)
    1134:	000047b7          	lui	a5,0x4
    1138:	00f777b3          	and	a5,a4,a5
    113c:	00078663          	beqz	a5,1148 <altera_avalon_jtag_uart_write+0x224>
    return -EWOULDBLOCK;
    1140:	ff500793          	li	a5,-11
    1144:	0080006f          	j	114c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1148:	ffb00793          	li	a5,-5
}
    114c:	00078513          	mv	a0,a5
    1150:	03c12083          	lw	ra,60(sp)
    1154:	03812403          	lw	s0,56(sp)
    1158:	04010113          	addi	sp,sp,64
    115c:	00008067          	ret

00001160 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1160:	fc010113          	addi	sp,sp,-64
    1164:	02812e23          	sw	s0,60(sp)
    1168:	04010413          	addi	s0,sp,64
    116c:	fca42623          	sw	a0,-52(s0)
    1170:	fcb42423          	sw	a1,-56(s0)
    1174:	fcc42223          	sw	a2,-60(s0)
    1178:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    117c:	00000713          	li	a4,0
    1180:	00000793          	li	a5,0
    1184:	fee42423          	sw	a4,-24(s0)
    1188:	fef42623          	sw	a5,-20(s0)
    118c:	0000a7b7          	lui	a5,0xa
    1190:	ea87a783          	lw	a5,-344(a5) # 9ea8 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    1194:	12078263          	beqz	a5,12b8 <alt_alarm_start+0x158>
  {
    if (alarm)
    1198:	fcc42783          	lw	a5,-52(s0)
    119c:	10078a63          	beqz	a5,12b0 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
    11a0:	fcc42783          	lw	a5,-52(s0)
    11a4:	fc442703          	lw	a4,-60(s0)
    11a8:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    11ac:	fcc42783          	lw	a5,-52(s0)
    11b0:	fc042703          	lw	a4,-64(s0)
    11b4:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    11b8:	00800793          	li	a5,8
    11bc:	3007b7f3          	csrrc	a5,mstatus,a5
    11c0:	fef42223          	sw	a5,-28(s0)
    return context;
    11c4:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    11c8:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    11cc:	0000a7b7          	lui	a5,0xa
    11d0:	eb07a703          	lw	a4,-336(a5) # 9eb0 <_alt_nticks>
    11d4:	eb47a783          	lw	a5,-332(a5)
      
      current_nticks = alt_nticks();
    11d8:	fee42423          	sw	a4,-24(s0)
    11dc:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    11e0:	fc842783          	lw	a5,-56(s0)
    11e4:	00078813          	mv	a6,a5
    11e8:	00000893          	li	a7,0
    11ec:	fe842603          	lw	a2,-24(s0)
    11f0:	fec42683          	lw	a3,-20(s0)
    11f4:	00c80733          	add	a4,a6,a2
    11f8:	00070593          	mv	a1,a4
    11fc:	0105b5b3          	sltu	a1,a1,a6
    1200:	00d887b3          	add	a5,a7,a3
    1204:	00f586b3          	add	a3,a1,a5
    1208:	00068793          	mv	a5,a3
    120c:	00070613          	mv	a2,a4
    1210:	00078693          	mv	a3,a5
    1214:	00100513          	li	a0,1
    1218:	00000593          	li	a1,0
    121c:	00a60733          	add	a4,a2,a0
    1220:	00070813          	mv	a6,a4
    1224:	00c83833          	sltu	a6,a6,a2
    1228:	00b687b3          	add	a5,a3,a1
    122c:	00f806b3          	add	a3,a6,a5
    1230:	00068793          	mv	a5,a3
    1234:	fcc42683          	lw	a3,-52(s0)
    1238:	00e6a423          	sw	a4,8(a3)
    123c:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1240:	fcc42783          	lw	a5,-52(s0)
    1244:	00008737          	lui	a4,0x8
    1248:	40070713          	addi	a4,a4,1024 # 8400 <alt_alarm_list>
    124c:	fce42e23          	sw	a4,-36(s0)
    1250:	fef42023          	sw	a5,-32(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1254:	fe042783          	lw	a5,-32(s0)
    1258:	fdc42703          	lw	a4,-36(s0)
    125c:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    1260:	fdc42783          	lw	a5,-36(s0)
    1264:	0007a703          	lw	a4,0(a5)
    1268:	fe042783          	lw	a5,-32(s0)
    126c:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
    1270:	fdc42783          	lw	a5,-36(s0)
    1274:	0007a783          	lw	a5,0(a5)
    1278:	fe042703          	lw	a4,-32(s0)
    127c:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    1280:	fdc42783          	lw	a5,-36(s0)
    1284:	fe042703          	lw	a4,-32(s0)
    1288:	00e7a023          	sw	a4,0(a5)
}
    128c:	00000013          	nop
    1290:	fd442783          	lw	a5,-44(s0)
    1294:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1298:	fd842783          	lw	a5,-40(s0)
    129c:	0087f793          	andi	a5,a5,8
    12a0:	3007a073          	csrs	mstatus,a5
}
    12a4:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    12a8:	00000793          	li	a5,0
    12ac:	0100006f          	j	12bc <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
    12b0:	fea00793          	li	a5,-22
    12b4:	0080006f          	j	12bc <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
    12b8:	f7a00793          	li	a5,-134
  }
}
    12bc:	00078513          	mv	a0,a5
    12c0:	03c12403          	lw	s0,60(sp)
    12c4:	04010113          	addi	sp,sp,64
    12c8:	00008067          	ret

000012cc <alt_busy_sleep>:

// For a 50 Mhz clock, this is 1,202,590,842.
#define US_PER_OUTER_LOOP ((alt_u64)CLOCKS_PER_OUTER_LOOP / (alt_u64)CPU_FREQUENCY_MHZ)

unsigned int alt_busy_sleep (unsigned int us)
{
    12cc:	fd010113          	addi	sp,sp,-48
    12d0:	02112623          	sw	ra,44(sp)
    12d4:	02812423          	sw	s0,40(sp)
    12d8:	03010413          	addi	s0,sp,48
    12dc:	fca42e23          	sw	a0,-36(s0)
 * is connected, use that. If no timer agent is connected, fallback to a low accuracy busy
 * loop. If accurate timing is desired for busy sleep (used by usleep), please be sure to
 * provide a timestamp source, or connect the timer agent.
 */
#if HAL_TIMESTAMP_ENABLED
    alt_timestamp_start();
    12e0:	09d000ef          	jal	ra,1b7c <alt_timestamp_start>
    const alt_timestamp_type end_time = (CPU_FREQUENCY_MHZ * us);
    12e4:	fdc42703          	lw	a4,-36(s0)
    12e8:	03200793          	li	a5,50
    12ec:	02f707b3          	mul	a5,a4,a5
    12f0:	fef42423          	sw	a5,-24(s0)
    12f4:	fe042623          	sw	zero,-20(s0)
    while (alt_timestamp() < end_time) {
    12f8:	00000013          	nop
    12fc:	0c1000ef          	jal	ra,1bbc <alt_timestamp>
    1300:	00050713          	mv	a4,a0
    1304:	00058793          	mv	a5,a1
    1308:	fec42683          	lw	a3,-20(s0)
    130c:	00078613          	mv	a2,a5
    1310:	fed666e3          	bltu	a2,a3,12fc <alt_busy_sleep+0x30>
    1314:	fec42683          	lw	a3,-20(s0)
    1318:	00078613          	mv	a2,a5
    131c:	00c69863          	bne	a3,a2,132c <alt_busy_sleep+0x60>
    1320:	fe842683          	lw	a3,-24(s0)
    1324:	00070793          	mv	a5,a4
    1328:	fcd7eae3          	bltu	a5,a3,12fc <alt_busy_sleep+0x30>
        );
    }
#endif
#endif /* #ifndef ALT_SIM_OPTIMIZE */

  return 0;
    132c:	00000793          	li	a5,0
}
    1330:	00078513          	mv	a0,a5
    1334:	02c12083          	lw	ra,44(sp)
    1338:	02812403          	lw	s0,40(sp)
    133c:	03010113          	addi	sp,sp,48
    1340:	00008067          	ret

00001344 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
    1344:	fe010113          	addi	sp,sp,-32
    1348:	00812e23          	sw	s0,28(sp)
    134c:	02010413          	addi	s0,sp,32
#if ALT_CPU_DCACHE_SIZE > 0
    char* i;
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    1350:	fe042623          	sw	zero,-20(s0)
    1354:	0180006f          	j	136c <alt_dcache_flush_all+0x28>
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    1358:	fec42783          	lw	a5,-20(s0)
    135c:	0817a00f          	.4byte	0x817a00f
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    1360:	fec42783          	lw	a5,-20(s0)
    1364:	02078793          	addi	a5,a5,32
    1368:	fef42623          	sw	a5,-20(s0)
    136c:	fec42703          	lw	a4,-20(s0)
    1370:	000017b7          	lui	a5,0x1
    1374:	fef762e3          	bltu	a4,a5,1358 <alt_dcache_flush_all+0x14>
    }
#endif
}
    1378:	00000013          	nop
    137c:	00000013          	nop
    1380:	01c12403          	lw	s0,28(sp)
    1384:	02010113          	addi	sp,sp,32
    1388:	00008067          	ret

0000138c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    138c:	fe010113          	addi	sp,sp,-32
    1390:	00812e23          	sw	s0,28(sp)
    1394:	02010413          	addi	s0,sp,32
    1398:	fea42623          	sw	a0,-20(s0)
    139c:	feb42423          	sw	a1,-24(s0)
    13a0:	fec42223          	sw	a2,-28(s0)
  return len;
    13a4:	fe442783          	lw	a5,-28(s0)
}
    13a8:	00078513          	mv	a0,a5
    13ac:	01c12403          	lw	s0,28(sp)
    13b0:	02010113          	addi	sp,sp,32
    13b4:	00008067          	ret

000013b8 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    13b8:	fe010113          	addi	sp,sp,-32
    13bc:	00112e23          	sw	ra,28(sp)
    13c0:	00812c23          	sw	s0,24(sp)
    13c4:	02010413          	addi	s0,sp,32
    13c8:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    13cc:	000087b7          	lui	a5,0x8
    13d0:	3f078593          	addi	a1,a5,1008 # 83f0 <alt_dev_list>
    13d4:	fec42503          	lw	a0,-20(s0)
    13d8:	068000ef          	jal	ra,1440 <alt_dev_llist_insert>
    13dc:	00050793          	mv	a5,a0
}
    13e0:	00078513          	mv	a0,a5
    13e4:	01c12083          	lw	ra,28(sp)
    13e8:	01812403          	lw	s0,24(sp)
    13ec:	02010113          	addi	sp,sp,32
    13f0:	00008067          	ret

000013f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    13f4:	ff010113          	addi	sp,sp,-16
    13f8:	00112623          	sw	ra,12(sp)
    13fc:	00812423          	sw	s0,8(sp)
    1400:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    1404:	000087b7          	lui	a5,0x8
    1408:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    140c:	00078c63          	beqz	a5,1424 <alt_get_errno+0x30>
    1410:	000087b7          	lui	a5,0x8
    1414:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    1418:	000780e7          	jalr	a5
    141c:	00050793          	mv	a5,a0
    1420:	00c0006f          	j	142c <alt_get_errno+0x38>
    1424:	0000a7b7          	lui	a5,0xa
    1428:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    142c:	00078513          	mv	a0,a5
    1430:	00c12083          	lw	ra,12(sp)
    1434:	00812403          	lw	s0,8(sp)
    1438:	01010113          	addi	sp,sp,16
    143c:	00008067          	ret

00001440 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1440:	fd010113          	addi	sp,sp,-48
    1444:	02112623          	sw	ra,44(sp)
    1448:	02812423          	sw	s0,40(sp)
    144c:	03010413          	addi	s0,sp,48
    1450:	fca42e23          	sw	a0,-36(s0)
    1454:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1458:	fdc42783          	lw	a5,-36(s0)
    145c:	00078863          	beqz	a5,146c <alt_dev_llist_insert+0x2c>
    1460:	fdc42783          	lw	a5,-36(s0)
    1464:	0087a783          	lw	a5,8(a5)
    1468:	00079e63          	bnez	a5,1484 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    146c:	f89ff0ef          	jal	ra,13f4 <alt_get_errno>
    1470:	00050713          	mv	a4,a0
    1474:	01600793          	li	a5,22
    1478:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    147c:	fea00793          	li	a5,-22
    1480:	0540006f          	j	14d4 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1484:	fdc42783          	lw	a5,-36(s0)
    1488:	fd842703          	lw	a4,-40(s0)
    148c:	fee42423          	sw	a4,-24(s0)
    1490:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    1494:	fec42783          	lw	a5,-20(s0)
    1498:	fe842703          	lw	a4,-24(s0)
    149c:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    14a0:	fe842783          	lw	a5,-24(s0)
    14a4:	0007a703          	lw	a4,0(a5)
    14a8:	fec42783          	lw	a5,-20(s0)
    14ac:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    14b0:	fe842783          	lw	a5,-24(s0)
    14b4:	0007a783          	lw	a5,0(a5)
    14b8:	fec42703          	lw	a4,-20(s0)
    14bc:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    14c0:	fe842783          	lw	a5,-24(s0)
    14c4:	fec42703          	lw	a4,-20(s0)
    14c8:	00e7a023          	sw	a4,0(a5)
}
    14cc:	00000013          	nop

  return 0;  
    14d0:	00000793          	li	a5,0
}
    14d4:	00078513          	mv	a0,a5
    14d8:	02c12083          	lw	ra,44(sp)
    14dc:	02812403          	lw	s0,40(sp)
    14e0:	03010113          	addi	sp,sp,48
    14e4:	00008067          	ret

000014e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    14e8:	fe010113          	addi	sp,sp,-32
    14ec:	00112e23          	sw	ra,28(sp)
    14f0:	00812c23          	sw	s0,24(sp)
    14f4:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    14f8:	000077b7          	lui	a5,0x7
    14fc:	91c78793          	addi	a5,a5,-1764 # 691c <__init_array_start+0x4>
    1500:	fef42623          	sw	a5,-20(s0)
    1504:	01c0006f          	j	1520 <_do_ctors+0x38>
        (*ctor) (); 
    1508:	fec42783          	lw	a5,-20(s0)
    150c:	0007a783          	lw	a5,0(a5)
    1510:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    1514:	fec42783          	lw	a5,-20(s0)
    1518:	ffc78793          	addi	a5,a5,-4
    151c:	fef42623          	sw	a5,-20(s0)
    1520:	fec42703          	lw	a4,-20(s0)
    1524:	000077b7          	lui	a5,0x7
    1528:	91878793          	addi	a5,a5,-1768 # 6918 <__init_array_start>
    152c:	fcf77ee3          	bgeu	a4,a5,1508 <_do_ctors+0x20>
}
    1530:	00000013          	nop
    1534:	00000013          	nop
    1538:	01c12083          	lw	ra,28(sp)
    153c:	01812403          	lw	s0,24(sp)
    1540:	02010113          	addi	sp,sp,32
    1544:	00008067          	ret

00001548 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1548:	fe010113          	addi	sp,sp,-32
    154c:	00112e23          	sw	ra,28(sp)
    1550:	00812c23          	sw	s0,24(sp)
    1554:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    1558:	000077b7          	lui	a5,0x7
    155c:	91c78793          	addi	a5,a5,-1764 # 691c <__init_array_start+0x4>
    1560:	fef42623          	sw	a5,-20(s0)
    1564:	01c0006f          	j	1580 <_do_dtors+0x38>
        (*dtor) (); 
    1568:	fec42783          	lw	a5,-20(s0)
    156c:	0007a783          	lw	a5,0(a5)
    1570:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    1574:	fec42783          	lw	a5,-20(s0)
    1578:	ffc78793          	addi	a5,a5,-4
    157c:	fef42623          	sw	a5,-20(s0)
    1580:	fec42703          	lw	a4,-20(s0)
    1584:	000077b7          	lui	a5,0x7
    1588:	92078793          	addi	a5,a5,-1760 # 6920 <__fini_array_end>
    158c:	fcf77ee3          	bgeu	a4,a5,1568 <_do_dtors+0x20>
}
    1590:	00000013          	nop
    1594:	00000013          	nop
    1598:	01c12083          	lw	ra,28(sp)
    159c:	01812403          	lw	s0,24(sp)
    15a0:	02010113          	addi	sp,sp,32
    15a4:	00008067          	ret

000015a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    15a8:	ff010113          	addi	sp,sp,-16
    15ac:	00812623          	sw	s0,12(sp)
    15b0:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
    15b4:	0000100f          	fence.i
#endif
}
    15b8:	00000013          	nop
    15bc:	00c12403          	lw	s0,12(sp)
    15c0:	01010113          	addi	sp,sp,16
    15c4:	00008067          	ret

000015c8 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    15c8:	fd010113          	addi	sp,sp,-48
    15cc:	02112623          	sw	ra,44(sp)
    15d0:	02812423          	sw	s0,40(sp)
    15d4:	03010413          	addi	s0,sp,48
    15d8:	fea42623          	sw	a0,-20(s0)
    15dc:	feb42423          	sw	a1,-24(s0)
    15e0:	fec42223          	sw	a2,-28(s0)
    15e4:	fed42023          	sw	a3,-32(s0)
    15e8:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    15ec:	fdc42703          	lw	a4,-36(s0)
    15f0:	fe042683          	lw	a3,-32(s0)
    15f4:	fe442603          	lw	a2,-28(s0)
    15f8:	fe842583          	lw	a1,-24(s0)
    15fc:	fec42503          	lw	a0,-20(s0)
    1600:	01c000ef          	jal	ra,161c <alt_iic_isr_register>
    1604:	00050793          	mv	a5,a0
}  
    1608:	00078513          	mv	a0,a5
    160c:	02c12083          	lw	ra,44(sp)
    1610:	02812403          	lw	s0,40(sp)
    1614:	03010113          	addi	sp,sp,48
    1618:	00008067          	ret

0000161c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    161c:	fa010113          	addi	sp,sp,-96
    1620:	04812e23          	sw	s0,92(sp)
    1624:	06010413          	addi	s0,sp,96
    1628:	faa42e23          	sw	a0,-68(s0)
    162c:	fab42c23          	sw	a1,-72(s0)
    1630:	fac42a23          	sw	a2,-76(s0)
    1634:	fad42823          	sw	a3,-80(s0)
    1638:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    163c:	fea00793          	li	a5,-22
    1640:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1644:	fb842783          	lw	a5,-72(s0)
    1648:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    164c:	fc842703          	lw	a4,-56(s0)
    1650:	00f00793          	li	a5,15
    1654:	12e7c863          	blt	a5,a4,1784 <alt_iic_isr_register+0x168>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1658:	00800793          	li	a5,8
    165c:	3007b7f3          	csrrc	a5,mstatus,a5
    1660:	fcf42823          	sw	a5,-48(s0)
    return context;
    1664:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1668:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    166c:	0000a7b7          	lui	a5,0xa
    1670:	ef878713          	addi	a4,a5,-264 # 9ef8 <alt_irq>
    1674:	fc842783          	lw	a5,-56(s0)
    1678:	00379793          	slli	a5,a5,0x3
    167c:	00f707b3          	add	a5,a4,a5
    1680:	fb442703          	lw	a4,-76(s0)
    1684:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    1688:	0000a7b7          	lui	a5,0xa
    168c:	ef878713          	addi	a4,a5,-264 # 9ef8 <alt_irq>
    1690:	fc842783          	lw	a5,-56(s0)
    1694:	00379793          	slli	a5,a5,0x3
    1698:	00f707b3          	add	a5,a4,a5
    169c:	fb042703          	lw	a4,-80(s0)
    16a0:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    16a4:	fb442783          	lw	a5,-76(s0)
    16a8:	06078263          	beqz	a5,170c <alt_iic_isr_register+0xf0>
    16ac:	fc842783          	lw	a5,-56(s0)
    16b0:	fbc42703          	lw	a4,-68(s0)
    16b4:	fce42a23          	sw	a4,-44(s0)
    16b8:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    16bc:	fd842703          	lw	a4,-40(s0)
    16c0:	00f00793          	li	a5,15
    16c4:	00e7e863          	bltu	a5,a4,16d4 <alt_iic_isr_register+0xb8>
    16c8:	fd842783          	lw	a5,-40(s0)
    16cc:	01078793          	addi	a5,a5,16
    16d0:	0080006f          	j	16d8 <alt_iic_isr_register+0xbc>
    16d4:	fff00793          	li	a5,-1
    16d8:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    16dc:	fdc42783          	lw	a5,-36(s0)
    16e0:	0007d663          	bgez	a5,16ec <alt_iic_isr_register+0xd0>
        return rc;
    16e4:	fdc42783          	lw	a5,-36(s0)
    16e8:	0800006f          	j	1768 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    16ec:	fdc42783          	lw	a5,-36(s0)
    16f0:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    16f4:	fd842783          	lw	a5,-40(s0)
    16f8:	00100713          	li	a4,1
    16fc:	00f717b3          	sll	a5,a4,a5
    1700:	3047a073          	csrs	mie,a5
    return 0;
    1704:	00000793          	li	a5,0
    1708:	0600006f          	j	1768 <alt_iic_isr_register+0x14c>
    170c:	fc842783          	lw	a5,-56(s0)
    1710:	fbc42703          	lw	a4,-68(s0)
    1714:	fee42023          	sw	a4,-32(s0)
    1718:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    171c:	fe442703          	lw	a4,-28(s0)
    1720:	00f00793          	li	a5,15
    1724:	00e7e863          	bltu	a5,a4,1734 <alt_iic_isr_register+0x118>
    1728:	fe442783          	lw	a5,-28(s0)
    172c:	01078793          	addi	a5,a5,16
    1730:	0080006f          	j	1738 <alt_iic_isr_register+0x11c>
    1734:	fff00793          	li	a5,-1
    1738:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    173c:	fe842783          	lw	a5,-24(s0)
    1740:	0007d663          	bgez	a5,174c <alt_iic_isr_register+0x130>
        return rc;
    1744:	fe842783          	lw	a5,-24(s0)
    1748:	0200006f          	j	1768 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    174c:	fe842783          	lw	a5,-24(s0)
    1750:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    1754:	fe442783          	lw	a5,-28(s0)
    1758:	00100713          	li	a4,1
    175c:	00f717b3          	sll	a5,a4,a5
    1760:	3047b073          	csrc	mie,a5
    return 0;
    1764:	00000793          	li	a5,0
    1768:	fcf42223          	sw	a5,-60(s0)
    176c:	fcc42783          	lw	a5,-52(s0)
    1770:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1774:	fec42783          	lw	a5,-20(s0)
    1778:	0087f793          	andi	a5,a5,8
    177c:	3007a073          	csrs	mstatus,a5
}
    1780:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    1784:	fc442783          	lw	a5,-60(s0)
}
    1788:	00078513          	mv	a0,a5
    178c:	05c12403          	lw	s0,92(sp)
    1790:	06010113          	addi	sp,sp,96
    1794:	00008067          	ret

00001798 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1798:	fd010113          	addi	sp,sp,-48
    179c:	02112623          	sw	ra,44(sp)
    17a0:	02812423          	sw	s0,40(sp)
    17a4:	03010413          	addi	s0,sp,48
    17a8:	fca42e23          	sw	a0,-36(s0)
    17ac:	fcb42c23          	sw	a1,-40(s0)
    17b0:	fcc42a23          	sw	a2,-44(s0)
    17b4:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    17b8:	fd042603          	lw	a2,-48(s0)
    17bc:	fd442583          	lw	a1,-44(s0)
    17c0:	fd842503          	lw	a0,-40(s0)
    17c4:	421000ef          	jal	ra,23e4 <open>
    17c8:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    17cc:	fec42783          	lw	a5,-20(s0)
    17d0:	0807c863          	bltz	a5,1860 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    17d4:	000087b7          	lui	a5,0x8
    17d8:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    17dc:	fec42703          	lw	a4,-20(s0)
    17e0:	00070793          	mv	a5,a4
    17e4:	00179793          	slli	a5,a5,0x1
    17e8:	00e787b3          	add	a5,a5,a4
    17ec:	00279793          	slli	a5,a5,0x2
    17f0:	00f687b3          	add	a5,a3,a5
    17f4:	0007a703          	lw	a4,0(a5)
    17f8:	fdc42783          	lw	a5,-36(s0)
    17fc:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    1800:	000087b7          	lui	a5,0x8
    1804:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    1808:	fec42703          	lw	a4,-20(s0)
    180c:	00070793          	mv	a5,a4
    1810:	00179793          	slli	a5,a5,0x1
    1814:	00e787b3          	add	a5,a5,a4
    1818:	00279793          	slli	a5,a5,0x2
    181c:	00f687b3          	add	a5,a3,a5
    1820:	0047a703          	lw	a4,4(a5)
    1824:	fdc42783          	lw	a5,-36(s0)
    1828:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    182c:	000087b7          	lui	a5,0x8
    1830:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    1834:	fec42703          	lw	a4,-20(s0)
    1838:	00070793          	mv	a5,a4
    183c:	00179793          	slli	a5,a5,0x1
    1840:	00e787b3          	add	a5,a5,a4
    1844:	00279793          	slli	a5,a5,0x2
    1848:	00f687b3          	add	a5,a3,a5
    184c:	0087a703          	lw	a4,8(a5)
    1850:	fdc42783          	lw	a5,-36(s0)
    1854:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    1858:	fec42503          	lw	a0,-20(s0)
    185c:	090000ef          	jal	ra,18ec <alt_release_fd>
  }
} 
    1860:	00000013          	nop
    1864:	02c12083          	lw	ra,44(sp)
    1868:	02812403          	lw	s0,40(sp)
    186c:	03010113          	addi	sp,sp,48
    1870:	00008067          	ret

00001874 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1874:	fe010113          	addi	sp,sp,-32
    1878:	00112e23          	sw	ra,28(sp)
    187c:	00812c23          	sw	s0,24(sp)
    1880:	02010413          	addi	s0,sp,32
    1884:	fea42623          	sw	a0,-20(s0)
    1888:	feb42423          	sw	a1,-24(s0)
    188c:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1890:	1ff00693          	li	a3,511
    1894:	00100613          	li	a2,1
    1898:	fec42583          	lw	a1,-20(s0)
    189c:	000087b7          	lui	a5,0x8
    18a0:	a4478513          	addi	a0,a5,-1468 # 7a44 <alt_fd_list+0xc>
    18a4:	ef5ff0ef          	jal	ra,1798 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    18a8:	1ff00693          	li	a3,511
    18ac:	00000613          	li	a2,0
    18b0:	fe842583          	lw	a1,-24(s0)
    18b4:	000087b7          	lui	a5,0x8
    18b8:	a3878513          	addi	a0,a5,-1480 # 7a38 <alt_fd_list>
    18bc:	eddff0ef          	jal	ra,1798 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    18c0:	1ff00693          	li	a3,511
    18c4:	00100613          	li	a2,1
    18c8:	fe442583          	lw	a1,-28(s0)
    18cc:	000087b7          	lui	a5,0x8
    18d0:	a5078513          	addi	a0,a5,-1456 # 7a50 <alt_fd_list+0x18>
    18d4:	ec5ff0ef          	jal	ra,1798 <alt_open_fd>
}  
    18d8:	00000013          	nop
    18dc:	01c12083          	lw	ra,28(sp)
    18e0:	01812403          	lw	s0,24(sp)
    18e4:	02010113          	addi	sp,sp,32
    18e8:	00008067          	ret

000018ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    18ec:	fe010113          	addi	sp,sp,-32
    18f0:	00812e23          	sw	s0,28(sp)
    18f4:	02010413          	addi	s0,sp,32
    18f8:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    18fc:	fec42703          	lw	a4,-20(s0)
    1900:	00200793          	li	a5,2
    1904:	04e7d663          	bge	a5,a4,1950 <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    1908:	000087b7          	lui	a5,0x8
    190c:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    1910:	fec42703          	lw	a4,-20(s0)
    1914:	00070793          	mv	a5,a4
    1918:	00179793          	slli	a5,a5,0x1
    191c:	00e787b3          	add	a5,a5,a4
    1920:	00279793          	slli	a5,a5,0x2
    1924:	00f687b3          	add	a5,a3,a5
    1928:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    192c:	000087b7          	lui	a5,0x8
    1930:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    1934:	fec42703          	lw	a4,-20(s0)
    1938:	00070793          	mv	a5,a4
    193c:	00179793          	slli	a5,a5,0x1
    1940:	00e787b3          	add	a5,a5,a4
    1944:	00279793          	slli	a5,a5,0x2
    1948:	00f687b3          	add	a5,a3,a5
    194c:	0007a023          	sw	zero,0(a5)
  }
}
    1950:	00000013          	nop
    1954:	01c12403          	lw	s0,28(sp)
    1958:	02010113          	addi	sp,sp,32
    195c:	00008067          	ret

00001960 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1960:	fd010113          	addi	sp,sp,-48
    1964:	02812623          	sw	s0,44(sp)
    1968:	03010413          	addi	s0,sp,48
    196c:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1970:	00800793          	li	a5,8
    1974:	3007b7f3          	csrrc	a5,mstatus,a5
    1978:	fef42623          	sw	a5,-20(s0)
    return context;
    197c:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1980:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    1984:	fdc42783          	lw	a5,-36(s0)
    1988:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    198c:	fe842783          	lw	a5,-24(s0)
    1990:	0007a783          	lw	a5,0(a5)
    1994:	fe842703          	lw	a4,-24(s0)
    1998:	00472703          	lw	a4,4(a4)
    199c:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    19a0:	fe842783          	lw	a5,-24(s0)
    19a4:	0047a783          	lw	a5,4(a5)
    19a8:	fe842703          	lw	a4,-24(s0)
    19ac:	00072703          	lw	a4,0(a4)
    19b0:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    19b4:	fe842783          	lw	a5,-24(s0)
    19b8:	fe842703          	lw	a4,-24(s0)
    19bc:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    19c0:	fe842783          	lw	a5,-24(s0)
    19c4:	fe842703          	lw	a4,-24(s0)
    19c8:	00e7a023          	sw	a4,0(a5)
} 
    19cc:	00000013          	nop
    19d0:	fe042783          	lw	a5,-32(s0)
    19d4:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    19d8:	fe442783          	lw	a5,-28(s0)
    19dc:	0087f793          	andi	a5,a5,8
    19e0:	3007a073          	csrs	mstatus,a5
}
    19e4:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    19e8:	00000013          	nop
    19ec:	02c12403          	lw	s0,44(sp)
    19f0:	03010113          	addi	sp,sp,48
    19f4:	00008067          	ret

000019f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    19f8:	fe010113          	addi	sp,sp,-32
    19fc:	00112e23          	sw	ra,28(sp)
    1a00:	00812c23          	sw	s0,24(sp)
    1a04:	01212a23          	sw	s2,20(sp)
    1a08:	01312823          	sw	s3,16(sp)
    1a0c:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1a10:	000087b7          	lui	a5,0x8
    1a14:	40078793          	addi	a5,a5,1024 # 8400 <alt_alarm_list>
    1a18:	0007a783          	lw	a5,0(a5)
    1a1c:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1a20:	0000a7b7          	lui	a5,0xa
    1a24:	eb07a703          	lw	a4,-336(a5) # 9eb0 <_alt_nticks>
    1a28:	eb47a783          	lw	a5,-332(a5)
    1a2c:	00100513          	li	a0,1
    1a30:	00000593          	li	a1,0
    1a34:	00a70633          	add	a2,a4,a0
    1a38:	00060813          	mv	a6,a2
    1a3c:	00e83833          	sltu	a6,a6,a4
    1a40:	00b786b3          	add	a3,a5,a1
    1a44:	00d807b3          	add	a5,a6,a3
    1a48:	00078693          	mv	a3,a5
    1a4c:	00060713          	mv	a4,a2
    1a50:	00068793          	mv	a5,a3
    1a54:	0000a6b7          	lui	a3,0xa
    1a58:	eae6a823          	sw	a4,-336(a3) # 9eb0 <_alt_nticks>
    1a5c:	eaf6aa23          	sw	a5,-332(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1a60:	0c80006f          	j	1b28 <alt_tick+0x130>
  {
    next = (alt_alarm*) alarm->llist.next;
    1a64:	fe442783          	lw	a5,-28(s0)
    1a68:	0007a783          	lw	a5,0(a5)
    1a6c:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    1a70:	fe442783          	lw	a5,-28(s0)
    1a74:	0087a603          	lw	a2,8(a5)
    1a78:	00c7a683          	lw	a3,12(a5)
    1a7c:	0000a7b7          	lui	a5,0xa
    1a80:	eb07a703          	lw	a4,-336(a5) # 9eb0 <_alt_nticks>
    1a84:	eb47a783          	lw	a5,-332(a5)
    1a88:	00068513          	mv	a0,a3
    1a8c:	00078593          	mv	a1,a5
    1a90:	08a5e863          	bltu	a1,a0,1b20 <alt_tick+0x128>
    1a94:	00068513          	mv	a0,a3
    1a98:	00078593          	mv	a1,a5
    1a9c:	00b51863          	bne	a0,a1,1aac <alt_tick+0xb4>
    1aa0:	00060693          	mv	a3,a2
    1aa4:	00070793          	mv	a5,a4
    1aa8:	06d7ec63          	bltu	a5,a3,1b20 <alt_tick+0x128>
    {
      next_callback = alarm->callback (alarm->context);
    1aac:	fe442783          	lw	a5,-28(s0)
    1ab0:	0107a783          	lw	a5,16(a5)
    1ab4:	fe442703          	lw	a4,-28(s0)
    1ab8:	01472703          	lw	a4,20(a4)
    1abc:	00070513          	mv	a0,a4
    1ac0:	000780e7          	jalr	a5
    1ac4:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1ac8:	fec42783          	lw	a5,-20(s0)
    1acc:	00079863          	bnez	a5,1adc <alt_tick+0xe4>
      {
        alt_alarm_stop (alarm);
    1ad0:	fe442503          	lw	a0,-28(s0)
    1ad4:	e8dff0ef          	jal	ra,1960 <alt_alarm_stop>
    1ad8:	0480006f          	j	1b20 <alt_tick+0x128>
      }
      else
      {
        alarm->time += next_callback;
    1adc:	fe442783          	lw	a5,-28(s0)
    1ae0:	0087a703          	lw	a4,8(a5)
    1ae4:	00c7a783          	lw	a5,12(a5)
    1ae8:	fec42683          	lw	a3,-20(s0)
    1aec:	00068913          	mv	s2,a3
    1af0:	00000993          	li	s3,0
    1af4:	01270633          	add	a2,a4,s2
    1af8:	00060593          	mv	a1,a2
    1afc:	00e5b5b3          	sltu	a1,a1,a4
    1b00:	013786b3          	add	a3,a5,s3
    1b04:	00d587b3          	add	a5,a1,a3
    1b08:	00078693          	mv	a3,a5
    1b0c:	00060713          	mv	a4,a2
    1b10:	00068793          	mv	a5,a3
    1b14:	fe442683          	lw	a3,-28(s0)
    1b18:	00e6a423          	sw	a4,8(a3)
    1b1c:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    1b20:	fe842783          	lw	a5,-24(s0)
    1b24:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    1b28:	fe442703          	lw	a4,-28(s0)
    1b2c:	000087b7          	lui	a5,0x8
    1b30:	40078793          	addi	a5,a5,1024 # 8400 <alt_alarm_list>
    1b34:	f2f718e3          	bne	a4,a5,1a64 <alt_tick+0x6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    1b38:	00000013          	nop
}
    1b3c:	00000013          	nop
    1b40:	01c12083          	lw	ra,28(sp)
    1b44:	01812403          	lw	s0,24(sp)
    1b48:	01412903          	lw	s2,20(sp)
    1b4c:	01012983          	lw	s3,16(sp)
    1b50:	02010113          	addi	sp,sp,32
    1b54:	00008067          	ret

00001b58 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    1b58:	ff010113          	addi	sp,sp,-16
    1b5c:	00812623          	sw	s0,12(sp)
    1b60:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    1b64:	fff00793          	li	a5,-1
    1b68:	3047b073          	csrc	mie,a5
#endif
}
    1b6c:	00000013          	nop
    1b70:	00c12403          	lw	s0,12(sp)
    1b74:	01010113          	addi	sp,sp,16
    1b78:	00008067          	ret

00001b7c <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    1b7c:	ff010113          	addi	sp,sp,-16
    1b80:	00112623          	sw	ra,12(sp)
    1b84:	00812423          	sw	s0,8(sp)
    1b88:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    1b8c:	0ac000ef          	jal	ra,1c38 <alt_niosv_mtime_get>
    1b90:	00050713          	mv	a4,a0
    1b94:	00058793          	mv	a5,a1
    1b98:	0000a6b7          	lui	a3,0xa
    1b9c:	eae6ac23          	sw	a4,-328(a3) # 9eb8 <alt_niosv_timestamp_offset>
    1ba0:	eaf6ae23          	sw	a5,-324(a3)
    return 0;
    1ba4:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    1ba8:	00078513          	mv	a0,a5
    1bac:	00c12083          	lw	ra,12(sp)
    1bb0:	00812403          	lw	s0,8(sp)
    1bb4:	01010113          	addi	sp,sp,16
    1bb8:	00008067          	ret

00001bbc <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    1bbc:	ff010113          	addi	sp,sp,-16
    1bc0:	00112623          	sw	ra,12(sp)
    1bc4:	00812423          	sw	s0,8(sp)
    1bc8:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    1bcc:	06c000ef          	jal	ra,1c38 <alt_niosv_mtime_get>
    1bd0:	00050613          	mv	a2,a0
    1bd4:	00058693          	mv	a3,a1
    1bd8:	0000a7b7          	lui	a5,0xa
    1bdc:	eb87a503          	lw	a0,-328(a5) # 9eb8 <alt_niosv_timestamp_offset>
    1be0:	ebc7a583          	lw	a1,-324(a5)
    1be4:	40a60733          	sub	a4,a2,a0
    1be8:	00070813          	mv	a6,a4
    1bec:	01063833          	sltu	a6,a2,a6
    1bf0:	40b687b3          	sub	a5,a3,a1
    1bf4:	410786b3          	sub	a3,a5,a6
    1bf8:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    1bfc:	00070513          	mv	a0,a4
    1c00:	00078593          	mv	a1,a5
    1c04:	00c12083          	lw	ra,12(sp)
    1c08:	00812403          	lw	s0,8(sp)
    1c0c:	01010113          	addi	sp,sp,16
    1c10:	00008067          	ret

00001c14 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    1c14:	ff010113          	addi	sp,sp,-16
    1c18:	00812623          	sw	s0,12(sp)
    1c1c:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    1c20:	02faf7b7          	lui	a5,0x2faf
    1c24:	08078793          	addi	a5,a5,128 # 2faf080 <__alt_data_end+0x2f9f080>
    return alt_niosv_timer_timestamp_freq();
}
    1c28:	00078513          	mv	a0,a5
    1c2c:	00c12403          	lw	s0,12(sp)
    1c30:	01010113          	addi	sp,sp,16
    1c34:	00008067          	ret

00001c38 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    1c38:	fe010113          	addi	sp,sp,-32
    1c3c:	00812e23          	sw	s0,28(sp)
    1c40:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    1c44:	00020337          	lui	t1,0x20
    1c48:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    1c4c:	00032303          	lw	t1,0(t1)
    1c50:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    1c54:	00020337          	lui	t1,0x20
    1c58:	00830313          	addi	t1,t1,8 # 20008 <__alt_data_end+0x10008>
    1c5c:	00032303          	lw	t1,0(t1)
    1c60:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    1c64:	00020337          	lui	t1,0x20
    1c68:	00c30313          	addi	t1,t1,12 # 2000c <__alt_data_end+0x1000c>
    1c6c:	00032303          	lw	t1,0(t1)
    1c70:	fe842e03          	lw	t3,-24(s0)
    1c74:	fc6e18e3          	bne	t3,t1,1c44 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    1c78:	fe842303          	lw	t1,-24(s0)
    1c7c:	00030813          	mv	a6,t1
    1c80:	00000893          	li	a7,0
    1c84:	00081793          	slli	a5,a6,0x0
    1c88:	00000713          	li	a4,0
    1c8c:	fec42803          	lw	a6,-20(s0)
    1c90:	00080613          	mv	a2,a6
    1c94:	00000693          	li	a3,0
    1c98:	00c76533          	or	a0,a4,a2
    1c9c:	00d7e5b3          	or	a1,a5,a3
    1ca0:	00050713          	mv	a4,a0
    1ca4:	00058793          	mv	a5,a1
}
    1ca8:	00070513          	mv	a0,a4
    1cac:	00078593          	mv	a1,a5
    1cb0:	01c12403          	lw	s0,28(sp)
    1cb4:	02010113          	addi	sp,sp,32
    1cb8:	00008067          	ret

00001cbc <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    1cbc:	fe010113          	addi	sp,sp,-32
    1cc0:	00812e23          	sw	s0,28(sp)
    1cc4:	02010413          	addi	s0,sp,32
    1cc8:	fea42423          	sw	a0,-24(s0)
    1ccc:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    1cd0:	000206b7          	lui	a3,0x20
    1cd4:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    1cd8:	fff00613          	li	a2,-1
    1cdc:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    1ce0:	000206b7          	lui	a3,0x20
    1ce4:	fe842603          	lw	a2,-24(s0)
    1ce8:	00c6a023          	sw	a2,0(a3) # 20000 <__alt_data_end+0x10000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    1cec:	fec42683          	lw	a3,-20(s0)
    1cf0:	0006d713          	srli	a4,a3,0x0
    1cf4:	00000793          	li	a5,0
    1cf8:	000206b7          	lui	a3,0x20
    1cfc:	00468693          	addi	a3,a3,4 # 20004 <__alt_data_end+0x10004>
    1d00:	00070793          	mv	a5,a4
    1d04:	00f6a023          	sw	a5,0(a3)
}
    1d08:	00000013          	nop
    1d0c:	01c12403          	lw	s0,28(sp)
    1d10:	02010113          	addi	sp,sp,32
    1d14:	00008067          	ret

00001d18 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    1d18:	fe010113          	addi	sp,sp,-32
    1d1c:	00812e23          	sw	s0,28(sp)
    1d20:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    1d24:	00020337          	lui	t1,0x20
    1d28:	00032303          	lw	t1,0(t1) # 20000 <__alt_data_end+0x10000>
    1d2c:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    1d30:	00020337          	lui	t1,0x20
    1d34:	00430313          	addi	t1,t1,4 # 20004 <__alt_data_end+0x10004>
    1d38:	00032303          	lw	t1,0(t1)
    1d3c:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    1d40:	fec42303          	lw	t1,-20(s0)
    1d44:	00030813          	mv	a6,t1
    1d48:	00000893          	li	a7,0
    1d4c:	00081793          	slli	a5,a6,0x0
    1d50:	00000713          	li	a4,0
    1d54:	fe842803          	lw	a6,-24(s0)
    1d58:	00080613          	mv	a2,a6
    1d5c:	00000693          	li	a3,0
    1d60:	00c76533          	or	a0,a4,a2
    1d64:	00d7e5b3          	or	a1,a5,a3
    1d68:	00050713          	mv	a4,a0
    1d6c:	00058793          	mv	a5,a1
}
    1d70:	00070513          	mv	a0,a4
    1d74:	00078593          	mv	a1,a5
    1d78:	01c12403          	lw	s0,28(sp)
    1d7c:	02010113          	addi	sp,sp,32
    1d80:	00008067          	ret

00001d84 <alt_niosv_timer_sc_isr>:
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
void alt_niosv_mtimecmp_interrupt_init() {}
#else
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {
    1d84:	fc010113          	addi	sp,sp,-64
    1d88:	02112e23          	sw	ra,60(sp)
    1d8c:	02812c23          	sw	s0,56(sp)
    1d90:	04010413          	addi	s0,sp,64
    1d94:	fca42623          	sw	a0,-52(s0)
    1d98:	fcb42423          	sw	a1,-56(s0)
    1d9c:	fcc42223          	sw	a2,-60(s0)
    // Schedule the next interrupt.  This is done first since who knows how long
    // the following code takes, and the contract is ticks per second, irrespective
    // of how long a given clock tick may take.

    alt_u64 curr_time = alt_niosv_mtime_get();
    1da0:	e99ff0ef          	jal	ra,1c38 <alt_niosv_mtime_get>
    1da4:	fea42423          	sw	a0,-24(s0)
    1da8:	feb42623          	sw	a1,-20(s0)
    alt_niosv_mtimecmp_set(curr_time + MTIMECMP_DELTA_AMT);
    1dac:	fe842703          	lw	a4,-24(s0)
    1db0:	fec42783          	lw	a5,-20(s0)
    1db4:	0000c537          	lui	a0,0xc
    1db8:	35050513          	addi	a0,a0,848 # c350 <__alt_heap_start+0x23b0>
    1dbc:	00000593          	li	a1,0
    1dc0:	00a70633          	add	a2,a4,a0
    1dc4:	00060813          	mv	a6,a2
    1dc8:	00e83833          	sltu	a6,a6,a4
    1dcc:	00b786b3          	add	a3,a5,a1
    1dd0:	00d807b3          	add	a5,a6,a3
    1dd4:	00078693          	mv	a3,a5
    1dd8:	00060713          	mv	a4,a2
    1ddc:	00068793          	mv	a5,a3
    1de0:	00070513          	mv	a0,a4
    1de4:	00078593          	mv	a1,a5
    1de8:	ed5ff0ef          	jal	ra,1cbc <alt_niosv_mtimecmp_set>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    1dec:	00800793          	li	a5,8
    1df0:	3007b7f3          	csrrc	a5,mstatus,a5
    1df4:	fef42223          	sw	a5,-28(s0)
    return context;
    1df8:	fe442783          	lw	a5,-28(s0)

    /* 
    * Notify the system of a clock tick. disable interrupts 
    * during this time to safely support ISR preemption
    */
    alt_irq_context cpu_sr = alt_irq_disable_all();
    1dfc:	fcf42e23          	sw	a5,-36(s0)
    alt_tick();
    1e00:	bf9ff0ef          	jal	ra,19f8 <alt_tick>
    1e04:	fdc42783          	lw	a5,-36(s0)
    1e08:	fef42023          	sw	a5,-32(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    1e0c:	fe042783          	lw	a5,-32(s0)
    1e10:	0087f793          	andi	a5,a5,8
    1e14:	3007a073          	csrs	mstatus,a5
}
    1e18:	00000013          	nop
    alt_irq_enable_all(cpu_sr);
}
    1e1c:	00000013          	nop
    1e20:	03c12083          	lw	ra,60(sp)
    1e24:	03812403          	lw	s0,56(sp)
    1e28:	04010113          	addi	sp,sp,64
    1e2c:	00008067          	ret

00001e30 <alt_niosv_mtimecmp_interrupt_init>:

void alt_niosv_mtimecmp_interrupt_init() {
    1e30:	ff010113          	addi	sp,sp,-16
    1e34:	00112623          	sw	ra,12(sp)
    1e38:	00812423          	sw	s0,8(sp)
    1e3c:	01010413          	addi	s0,sp,16
    alt_niosv_mtimecmp_set(MTIMECMP_MAX_VALUE);
    1e40:	fff00513          	li	a0,-1
    1e44:	fff00593          	li	a1,-1
    1e48:	e75ff0ef          	jal	ra,1cbc <alt_niosv_mtimecmp_set>
    NIOSV_SET_CSR(NIOSV_MIE_CSR, (0x1 << NIOSV_TIMER_IRQ));
    1e4c:	08000793          	li	a5,128
    1e50:	3047a073          	csrs	mie,a5
}
    1e54:	00000013          	nop
    alt_niosv_enable_timer_interrupt();
}
    1e58:	00000013          	nop
    1e5c:	00c12083          	lw	ra,12(sp)
    1e60:	00812403          	lw	s0,8(sp)
    1e64:	01010113          	addi	sp,sp,16
    1e68:	00008067          	ret

00001e6c <atexit>:
    1e6c:	00050593          	mv	a1,a0
    1e70:	00000693          	li	a3,0
    1e74:	00000613          	li	a2,0
    1e78:	00000513          	li	a0,0
    1e7c:	5b40006f          	j	2430 <__register_exitproc>

00001e80 <exit>:
    1e80:	ff010113          	addi	sp,sp,-16
    1e84:	00000593          	li	a1,0
    1e88:	00812423          	sw	s0,8(sp)
    1e8c:	00112623          	sw	ra,12(sp)
    1e90:	00050413          	mv	s0,a0
    1e94:	684000ef          	jal	ra,2518 <__call_exitprocs>
    1e98:	00005517          	auipc	a0,0x5
    1e9c:	b1052503          	lw	a0,-1264(a0) # 69a8 <_global_impure_ptr>
    1ea0:	03c52783          	lw	a5,60(a0)
    1ea4:	00078463          	beqz	a5,1eac <exit+0x2c>
    1ea8:	000780e7          	jalr	a5
    1eac:	00040513          	mv	a0,s0
    1eb0:	5b0030ef          	jal	ra,5460 <_exit>

00001eb4 <memcpy>:
    1eb4:	00b547b3          	xor	a5,a0,a1
    1eb8:	0037f793          	andi	a5,a5,3
    1ebc:	00c508b3          	add	a7,a0,a2
    1ec0:	06079463          	bnez	a5,1f28 <memcpy+0x74>
    1ec4:	00300793          	li	a5,3
    1ec8:	06c7f063          	bgeu	a5,a2,1f28 <memcpy+0x74>
    1ecc:	00357793          	andi	a5,a0,3
    1ed0:	00050713          	mv	a4,a0
    1ed4:	06079a63          	bnez	a5,1f48 <memcpy+0x94>
    1ed8:	ffc8f613          	andi	a2,a7,-4
    1edc:	40e606b3          	sub	a3,a2,a4
    1ee0:	02000793          	li	a5,32
    1ee4:	08d7ce63          	blt	a5,a3,1f80 <memcpy+0xcc>
    1ee8:	00058693          	mv	a3,a1
    1eec:	00070793          	mv	a5,a4
    1ef0:	02c77863          	bgeu	a4,a2,1f20 <memcpy+0x6c>
    1ef4:	0006a803          	lw	a6,0(a3)
    1ef8:	00478793          	addi	a5,a5,4
    1efc:	00468693          	addi	a3,a3,4
    1f00:	ff07ae23          	sw	a6,-4(a5)
    1f04:	fec7e8e3          	bltu	a5,a2,1ef4 <memcpy+0x40>
    1f08:	fff60793          	addi	a5,a2,-1
    1f0c:	40e787b3          	sub	a5,a5,a4
    1f10:	ffc7f793          	andi	a5,a5,-4
    1f14:	00478793          	addi	a5,a5,4
    1f18:	00f70733          	add	a4,a4,a5
    1f1c:	00f585b3          	add	a1,a1,a5
    1f20:	01176863          	bltu	a4,a7,1f30 <memcpy+0x7c>
    1f24:	00008067          	ret
    1f28:	00050713          	mv	a4,a0
    1f2c:	05157863          	bgeu	a0,a7,1f7c <memcpy+0xc8>
    1f30:	0005c783          	lbu	a5,0(a1)
    1f34:	00170713          	addi	a4,a4,1
    1f38:	00158593          	addi	a1,a1,1
    1f3c:	fef70fa3          	sb	a5,-1(a4)
    1f40:	fee898e3          	bne	a7,a4,1f30 <memcpy+0x7c>
    1f44:	00008067          	ret
    1f48:	0005c683          	lbu	a3,0(a1)
    1f4c:	00170713          	addi	a4,a4,1
    1f50:	00377793          	andi	a5,a4,3
    1f54:	fed70fa3          	sb	a3,-1(a4)
    1f58:	00158593          	addi	a1,a1,1
    1f5c:	f6078ee3          	beqz	a5,1ed8 <memcpy+0x24>
    1f60:	0005c683          	lbu	a3,0(a1)
    1f64:	00170713          	addi	a4,a4,1
    1f68:	00377793          	andi	a5,a4,3
    1f6c:	fed70fa3          	sb	a3,-1(a4)
    1f70:	00158593          	addi	a1,a1,1
    1f74:	fc079ae3          	bnez	a5,1f48 <memcpy+0x94>
    1f78:	f61ff06f          	j	1ed8 <memcpy+0x24>
    1f7c:	00008067          	ret
    1f80:	ff010113          	addi	sp,sp,-16
    1f84:	00812623          	sw	s0,12(sp)
    1f88:	02000413          	li	s0,32
    1f8c:	0005a383          	lw	t2,0(a1)
    1f90:	0045a283          	lw	t0,4(a1)
    1f94:	0085af83          	lw	t6,8(a1)
    1f98:	00c5af03          	lw	t5,12(a1)
    1f9c:	0105ae83          	lw	t4,16(a1)
    1fa0:	0145ae03          	lw	t3,20(a1)
    1fa4:	0185a303          	lw	t1,24(a1)
    1fa8:	01c5a803          	lw	a6,28(a1)
    1fac:	0205a683          	lw	a3,32(a1)
    1fb0:	02470713          	addi	a4,a4,36
    1fb4:	40e607b3          	sub	a5,a2,a4
    1fb8:	fc772e23          	sw	t2,-36(a4)
    1fbc:	fe572023          	sw	t0,-32(a4)
    1fc0:	fff72223          	sw	t6,-28(a4)
    1fc4:	ffe72423          	sw	t5,-24(a4)
    1fc8:	ffd72623          	sw	t4,-20(a4)
    1fcc:	ffc72823          	sw	t3,-16(a4)
    1fd0:	fe672a23          	sw	t1,-12(a4)
    1fd4:	ff072c23          	sw	a6,-8(a4)
    1fd8:	fed72e23          	sw	a3,-4(a4)
    1fdc:	02458593          	addi	a1,a1,36
    1fe0:	faf446e3          	blt	s0,a5,1f8c <memcpy+0xd8>
    1fe4:	00058693          	mv	a3,a1
    1fe8:	00070793          	mv	a5,a4
    1fec:	02c77863          	bgeu	a4,a2,201c <memcpy+0x168>
    1ff0:	0006a803          	lw	a6,0(a3)
    1ff4:	00478793          	addi	a5,a5,4
    1ff8:	00468693          	addi	a3,a3,4
    1ffc:	ff07ae23          	sw	a6,-4(a5)
    2000:	fec7e8e3          	bltu	a5,a2,1ff0 <memcpy+0x13c>
    2004:	fff60793          	addi	a5,a2,-1
    2008:	40e787b3          	sub	a5,a5,a4
    200c:	ffc7f793          	andi	a5,a5,-4
    2010:	00478793          	addi	a5,a5,4
    2014:	00f70733          	add	a4,a4,a5
    2018:	00f585b3          	add	a1,a1,a5
    201c:	01176863          	bltu	a4,a7,202c <memcpy+0x178>
    2020:	00c12403          	lw	s0,12(sp)
    2024:	01010113          	addi	sp,sp,16
    2028:	00008067          	ret
    202c:	0005c783          	lbu	a5,0(a1)
    2030:	00170713          	addi	a4,a4,1
    2034:	00158593          	addi	a1,a1,1
    2038:	fef70fa3          	sb	a5,-1(a4)
    203c:	fee882e3          	beq	a7,a4,2020 <memcpy+0x16c>
    2040:	0005c783          	lbu	a5,0(a1)
    2044:	00170713          	addi	a4,a4,1
    2048:	00158593          	addi	a1,a1,1
    204c:	fef70fa3          	sb	a5,-1(a4)
    2050:	fce89ee3          	bne	a7,a4,202c <memcpy+0x178>
    2054:	fcdff06f          	j	2020 <memcpy+0x16c>

00002058 <_puts_r>:
    2058:	fd010113          	addi	sp,sp,-48
    205c:	02812423          	sw	s0,40(sp)
    2060:	00050413          	mv	s0,a0
    2064:	00058513          	mv	a0,a1
    2068:	02912223          	sw	s1,36(sp)
    206c:	02112623          	sw	ra,44(sp)
    2070:	00058493          	mv	s1,a1
    2074:	2d4000ef          	jal	ra,2348 <strlen>
    2078:	00150713          	addi	a4,a0,1
    207c:	00005697          	auipc	a3,0x5
    2080:	8f868693          	addi	a3,a3,-1800 # 6974 <__fini_array_end+0x54>
    2084:	00e12623          	sw	a4,12(sp)
    2088:	03842783          	lw	a5,56(s0)
    208c:	01010713          	addi	a4,sp,16
    2090:	00d12c23          	sw	a3,24(sp)
    2094:	00e12223          	sw	a4,4(sp)
    2098:	00100693          	li	a3,1
    209c:	00200713          	li	a4,2
    20a0:	00912823          	sw	s1,16(sp)
    20a4:	00a12a23          	sw	a0,20(sp)
    20a8:	00d12e23          	sw	a3,28(sp)
    20ac:	00e12423          	sw	a4,8(sp)
    20b0:	00842483          	lw	s1,8(s0)
    20b4:	08078a63          	beqz	a5,2148 <_puts_r+0xf0>
    20b8:	0644a703          	lw	a4,100(s1)
    20bc:	00c49783          	lh	a5,12(s1)
    20c0:	00177713          	andi	a4,a4,1
    20c4:	00071663          	bnez	a4,20d0 <_puts_r+0x78>
    20c8:	2007f713          	andi	a4,a5,512
    20cc:	0a070463          	beqz	a4,2174 <_puts_r+0x11c>
    20d0:	01279713          	slli	a4,a5,0x12
    20d4:	02074263          	bltz	a4,20f8 <_puts_r+0xa0>
    20d8:	0644a703          	lw	a4,100(s1)
    20dc:	000026b7          	lui	a3,0x2
    20e0:	00d7e7b3          	or	a5,a5,a3
    20e4:	ffffe6b7          	lui	a3,0xffffe
    20e8:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffedfff>
    20ec:	00d77733          	and	a4,a4,a3
    20f0:	00f49623          	sh	a5,12(s1)
    20f4:	06e4a223          	sw	a4,100(s1)
    20f8:	00040513          	mv	a0,s0
    20fc:	00410613          	addi	a2,sp,4
    2100:	00048593          	mv	a1,s1
    2104:	709000ef          	jal	ra,300c <__sfvwrite_r>
    2108:	0644a783          	lw	a5,100(s1)
    210c:	00153413          	seqz	s0,a0
    2110:	40800433          	neg	s0,s0
    2114:	00b47413          	andi	s0,s0,11
    2118:	0017f793          	andi	a5,a5,1
    211c:	fff40413          	addi	s0,s0,-1
    2120:	00079863          	bnez	a5,2130 <_puts_r+0xd8>
    2124:	00c4d783          	lhu	a5,12(s1)
    2128:	2007f793          	andi	a5,a5,512
    212c:	02078463          	beqz	a5,2154 <_puts_r+0xfc>
    2130:	02c12083          	lw	ra,44(sp)
    2134:	00040513          	mv	a0,s0
    2138:	02812403          	lw	s0,40(sp)
    213c:	02412483          	lw	s1,36(sp)
    2140:	03010113          	addi	sp,sp,48
    2144:	00008067          	ret
    2148:	00040513          	mv	a0,s0
    214c:	684000ef          	jal	ra,27d0 <__sinit>
    2150:	f69ff06f          	j	20b8 <_puts_r+0x60>
    2154:	0584a503          	lw	a0,88(s1)
    2158:	4d4010ef          	jal	ra,362c <__retarget_lock_release_recursive>
    215c:	02c12083          	lw	ra,44(sp)
    2160:	00040513          	mv	a0,s0
    2164:	02812403          	lw	s0,40(sp)
    2168:	02412483          	lw	s1,36(sp)
    216c:	03010113          	addi	sp,sp,48
    2170:	00008067          	ret
    2174:	0584a503          	lw	a0,88(s1)
    2178:	49c010ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    217c:	00c49783          	lh	a5,12(s1)
    2180:	f51ff06f          	j	20d0 <_puts_r+0x78>

00002184 <puts>:
    2184:	00050593          	mv	a1,a0
    2188:	00006517          	auipc	a0,0x6
    218c:	28052503          	lw	a0,640(a0) # 8408 <_impure_ptr>
    2190:	ec9ff06f          	j	2058 <_puts_r>

00002194 <cleanup_glue>:
    2194:	fe010113          	addi	sp,sp,-32
    2198:	01212823          	sw	s2,16(sp)
    219c:	0005a903          	lw	s2,0(a1)
    21a0:	00812c23          	sw	s0,24(sp)
    21a4:	00912a23          	sw	s1,20(sp)
    21a8:	00112e23          	sw	ra,28(sp)
    21ac:	01312623          	sw	s3,12(sp)
    21b0:	01412423          	sw	s4,8(sp)
    21b4:	00058413          	mv	s0,a1
    21b8:	00050493          	mv	s1,a0
    21bc:	04090263          	beqz	s2,2200 <cleanup_glue+0x6c>
    21c0:	00092983          	lw	s3,0(s2)
    21c4:	02098863          	beqz	s3,21f4 <cleanup_glue+0x60>
    21c8:	0009aa03          	lw	s4,0(s3)
    21cc:	000a0e63          	beqz	s4,21e8 <cleanup_glue+0x54>
    21d0:	000a2583          	lw	a1,0(s4)
    21d4:	00058463          	beqz	a1,21dc <cleanup_glue+0x48>
    21d8:	fbdff0ef          	jal	ra,2194 <cleanup_glue>
    21dc:	000a0593          	mv	a1,s4
    21e0:	00048513          	mv	a0,s1
    21e4:	321000ef          	jal	ra,2d04 <_free_r>
    21e8:	00098593          	mv	a1,s3
    21ec:	00048513          	mv	a0,s1
    21f0:	315000ef          	jal	ra,2d04 <_free_r>
    21f4:	00090593          	mv	a1,s2
    21f8:	00048513          	mv	a0,s1
    21fc:	309000ef          	jal	ra,2d04 <_free_r>
    2200:	00040593          	mv	a1,s0
    2204:	01812403          	lw	s0,24(sp)
    2208:	01c12083          	lw	ra,28(sp)
    220c:	01012903          	lw	s2,16(sp)
    2210:	00c12983          	lw	s3,12(sp)
    2214:	00812a03          	lw	s4,8(sp)
    2218:	00048513          	mv	a0,s1
    221c:	01412483          	lw	s1,20(sp)
    2220:	02010113          	addi	sp,sp,32
    2224:	2e10006f          	j	2d04 <_free_r>

00002228 <_reclaim_reent>:
    2228:	00006797          	auipc	a5,0x6
    222c:	1e07a783          	lw	a5,480(a5) # 8408 <_impure_ptr>
    2230:	10a78a63          	beq	a5,a0,2344 <_reclaim_reent+0x11c>
    2234:	04c52583          	lw	a1,76(a0)
    2238:	fe010113          	addi	sp,sp,-32
    223c:	00912a23          	sw	s1,20(sp)
    2240:	00112e23          	sw	ra,28(sp)
    2244:	00812c23          	sw	s0,24(sp)
    2248:	01212823          	sw	s2,16(sp)
    224c:	01312623          	sw	s3,12(sp)
    2250:	00050493          	mv	s1,a0
    2254:	04058063          	beqz	a1,2294 <_reclaim_reent+0x6c>
    2258:	00000913          	li	s2,0
    225c:	08000993          	li	s3,128
    2260:	012587b3          	add	a5,a1,s2
    2264:	0007a403          	lw	s0,0(a5)
    2268:	00040e63          	beqz	s0,2284 <_reclaim_reent+0x5c>
    226c:	00040593          	mv	a1,s0
    2270:	00042403          	lw	s0,0(s0)
    2274:	00048513          	mv	a0,s1
    2278:	28d000ef          	jal	ra,2d04 <_free_r>
    227c:	fe0418e3          	bnez	s0,226c <_reclaim_reent+0x44>
    2280:	04c4a583          	lw	a1,76(s1)
    2284:	00490913          	addi	s2,s2,4
    2288:	fd391ce3          	bne	s2,s3,2260 <_reclaim_reent+0x38>
    228c:	00048513          	mv	a0,s1
    2290:	275000ef          	jal	ra,2d04 <_free_r>
    2294:	0404a583          	lw	a1,64(s1)
    2298:	00058663          	beqz	a1,22a4 <_reclaim_reent+0x7c>
    229c:	00048513          	mv	a0,s1
    22a0:	265000ef          	jal	ra,2d04 <_free_r>
    22a4:	1484a403          	lw	s0,328(s1)
    22a8:	02040063          	beqz	s0,22c8 <_reclaim_reent+0xa0>
    22ac:	14c48913          	addi	s2,s1,332
    22b0:	01240c63          	beq	s0,s2,22c8 <_reclaim_reent+0xa0>
    22b4:	00040593          	mv	a1,s0
    22b8:	00042403          	lw	s0,0(s0)
    22bc:	00048513          	mv	a0,s1
    22c0:	245000ef          	jal	ra,2d04 <_free_r>
    22c4:	fe8918e3          	bne	s2,s0,22b4 <_reclaim_reent+0x8c>
    22c8:	0544a583          	lw	a1,84(s1)
    22cc:	00058663          	beqz	a1,22d8 <_reclaim_reent+0xb0>
    22d0:	00048513          	mv	a0,s1
    22d4:	231000ef          	jal	ra,2d04 <_free_r>
    22d8:	0384a783          	lw	a5,56(s1)
    22dc:	04078663          	beqz	a5,2328 <_reclaim_reent+0x100>
    22e0:	03c4a783          	lw	a5,60(s1)
    22e4:	00048513          	mv	a0,s1
    22e8:	000780e7          	jalr	a5
    22ec:	2e04a403          	lw	s0,736(s1)
    22f0:	02040c63          	beqz	s0,2328 <_reclaim_reent+0x100>
    22f4:	00042583          	lw	a1,0(s0)
    22f8:	00058663          	beqz	a1,2304 <_reclaim_reent+0xdc>
    22fc:	00048513          	mv	a0,s1
    2300:	e95ff0ef          	jal	ra,2194 <cleanup_glue>
    2304:	00040593          	mv	a1,s0
    2308:	01812403          	lw	s0,24(sp)
    230c:	01c12083          	lw	ra,28(sp)
    2310:	01012903          	lw	s2,16(sp)
    2314:	00c12983          	lw	s3,12(sp)
    2318:	00048513          	mv	a0,s1
    231c:	01412483          	lw	s1,20(sp)
    2320:	02010113          	addi	sp,sp,32
    2324:	1e10006f          	j	2d04 <_free_r>
    2328:	01c12083          	lw	ra,28(sp)
    232c:	01812403          	lw	s0,24(sp)
    2330:	01412483          	lw	s1,20(sp)
    2334:	01012903          	lw	s2,16(sp)
    2338:	00c12983          	lw	s3,12(sp)
    233c:	02010113          	addi	sp,sp,32
    2340:	00008067          	ret
    2344:	00008067          	ret

00002348 <strlen>:
    2348:	00357793          	andi	a5,a0,3
    234c:	00050713          	mv	a4,a0
    2350:	04079c63          	bnez	a5,23a8 <strlen+0x60>
    2354:	7f7f86b7          	lui	a3,0x7f7f8
    2358:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7e7f7f>
    235c:	fff00593          	li	a1,-1
    2360:	00072603          	lw	a2,0(a4)
    2364:	00470713          	addi	a4,a4,4
    2368:	00d677b3          	and	a5,a2,a3
    236c:	00d787b3          	add	a5,a5,a3
    2370:	00c7e7b3          	or	a5,a5,a2
    2374:	00d7e7b3          	or	a5,a5,a3
    2378:	feb784e3          	beq	a5,a1,2360 <strlen+0x18>
    237c:	ffc74683          	lbu	a3,-4(a4)
    2380:	40a707b3          	sub	a5,a4,a0
    2384:	04068463          	beqz	a3,23cc <strlen+0x84>
    2388:	ffd74683          	lbu	a3,-3(a4)
    238c:	02068c63          	beqz	a3,23c4 <strlen+0x7c>
    2390:	ffe74503          	lbu	a0,-2(a4)
    2394:	00a03533          	snez	a0,a0
    2398:	00f50533          	add	a0,a0,a5
    239c:	ffe50513          	addi	a0,a0,-2
    23a0:	00008067          	ret
    23a4:	fa0688e3          	beqz	a3,2354 <strlen+0xc>
    23a8:	00074783          	lbu	a5,0(a4)
    23ac:	00170713          	addi	a4,a4,1
    23b0:	00377693          	andi	a3,a4,3
    23b4:	fe0798e3          	bnez	a5,23a4 <strlen+0x5c>
    23b8:	40a70733          	sub	a4,a4,a0
    23bc:	fff70513          	addi	a0,a4,-1
    23c0:	00008067          	ret
    23c4:	ffd78513          	addi	a0,a5,-3
    23c8:	00008067          	ret
    23cc:	ffc78513          	addi	a0,a5,-4
    23d0:	00008067          	ret

000023d4 <close>:
    23d4:	00050593          	mv	a1,a0
    23d8:	00006517          	auipc	a0,0x6
    23dc:	03052503          	lw	a0,48(a0) # 8408 <_impure_ptr>
    23e0:	28c0006f          	j	266c <_close_r>

000023e4 <open>:
    23e4:	fc010113          	addi	sp,sp,-64
    23e8:	02c12423          	sw	a2,40(sp)
    23ec:	02d12623          	sw	a3,44(sp)
    23f0:	02f12a23          	sw	a5,52(sp)
    23f4:	00060693          	mv	a3,a2
    23f8:	02810793          	addi	a5,sp,40
    23fc:	00058613          	mv	a2,a1
    2400:	00050593          	mv	a1,a0
    2404:	00006517          	auipc	a0,0x6
    2408:	00452503          	lw	a0,4(a0) # 8408 <_impure_ptr>
    240c:	00112e23          	sw	ra,28(sp)
    2410:	02e12823          	sw	a4,48(sp)
    2414:	03012c23          	sw	a6,56(sp)
    2418:	03112e23          	sw	a7,60(sp)
    241c:	00f12623          	sw	a5,12(sp)
    2420:	485010ef          	jal	ra,40a4 <_open_r>
    2424:	01c12083          	lw	ra,28(sp)
    2428:	04010113          	addi	sp,sp,64
    242c:	00008067          	ret

00002430 <__register_exitproc>:
    2430:	fe010113          	addi	sp,sp,-32
    2434:	01212823          	sw	s2,16(sp)
    2438:	82418913          	addi	s2,gp,-2012 # 840c <__atexit_recursive_mutex>
    243c:	00812c23          	sw	s0,24(sp)
    2440:	00050413          	mv	s0,a0
    2444:	00092503          	lw	a0,0(s2)
    2448:	00912a23          	sw	s1,20(sp)
    244c:	01312623          	sw	s3,12(sp)
    2450:	01412423          	sw	s4,8(sp)
    2454:	00112e23          	sw	ra,28(sp)
    2458:	00058493          	mv	s1,a1
    245c:	00060a13          	mv	s4,a2
    2460:	00068993          	mv	s3,a3
    2464:	1b0010ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    2468:	00004717          	auipc	a4,0x4
    246c:	54072703          	lw	a4,1344(a4) # 69a8 <_global_impure_ptr>
    2470:	14872783          	lw	a5,328(a4)
    2474:	08078663          	beqz	a5,2500 <__register_exitproc+0xd0>
    2478:	0047a703          	lw	a4,4(a5)
    247c:	01f00593          	li	a1,31
    2480:	00092503          	lw	a0,0(s2)
    2484:	08e5c463          	blt	a1,a4,250c <__register_exitproc+0xdc>
    2488:	00271593          	slli	a1,a4,0x2
    248c:	02041e63          	bnez	s0,24c8 <__register_exitproc+0x98>
    2490:	00170713          	addi	a4,a4,1
    2494:	00e7a223          	sw	a4,4(a5)
    2498:	00b787b3          	add	a5,a5,a1
    249c:	0097a423          	sw	s1,8(a5)
    24a0:	18c010ef          	jal	ra,362c <__retarget_lock_release_recursive>
    24a4:	00000513          	li	a0,0
    24a8:	01c12083          	lw	ra,28(sp)
    24ac:	01812403          	lw	s0,24(sp)
    24b0:	01412483          	lw	s1,20(sp)
    24b4:	01012903          	lw	s2,16(sp)
    24b8:	00c12983          	lw	s3,12(sp)
    24bc:	00812a03          	lw	s4,8(sp)
    24c0:	02010113          	addi	sp,sp,32
    24c4:	00008067          	ret
    24c8:	00b78833          	add	a6,a5,a1
    24cc:	09482423          	sw	s4,136(a6)
    24d0:	1887a683          	lw	a3,392(a5)
    24d4:	00100613          	li	a2,1
    24d8:	00e61633          	sll	a2,a2,a4
    24dc:	00c6e6b3          	or	a3,a3,a2
    24e0:	18d7a423          	sw	a3,392(a5)
    24e4:	11382423          	sw	s3,264(a6)
    24e8:	00200693          	li	a3,2
    24ec:	fad412e3          	bne	s0,a3,2490 <__register_exitproc+0x60>
    24f0:	18c7a683          	lw	a3,396(a5)
    24f4:	00c6e6b3          	or	a3,a3,a2
    24f8:	18d7a623          	sw	a3,396(a5)
    24fc:	f95ff06f          	j	2490 <__register_exitproc+0x60>
    2500:	14c70793          	addi	a5,a4,332
    2504:	14f72423          	sw	a5,328(a4)
    2508:	f71ff06f          	j	2478 <__register_exitproc+0x48>
    250c:	120010ef          	jal	ra,362c <__retarget_lock_release_recursive>
    2510:	fff00513          	li	a0,-1
    2514:	f95ff06f          	j	24a8 <__register_exitproc+0x78>

00002518 <__call_exitprocs>:
    2518:	fd010113          	addi	sp,sp,-48
    251c:	01712623          	sw	s7,12(sp)
    2520:	82418b93          	addi	s7,gp,-2012 # 840c <__atexit_recursive_mutex>
    2524:	01612823          	sw	s6,16(sp)
    2528:	00050b13          	mv	s6,a0
    252c:	000ba503          	lw	a0,0(s7)
    2530:	03212023          	sw	s2,32(sp)
    2534:	01312e23          	sw	s3,28(sp)
    2538:	01412c23          	sw	s4,24(sp)
    253c:	01512a23          	sw	s5,20(sp)
    2540:	01812423          	sw	s8,8(sp)
    2544:	02112623          	sw	ra,44(sp)
    2548:	02812423          	sw	s0,40(sp)
    254c:	02912223          	sw	s1,36(sp)
    2550:	01912223          	sw	s9,4(sp)
    2554:	00058c13          	mv	s8,a1
    2558:	0bc010ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    255c:	00004a17          	auipc	s4,0x4
    2560:	44ca2a03          	lw	s4,1100(s4) # 69a8 <_global_impure_ptr>
    2564:	148a2903          	lw	s2,328(s4)
    2568:	00100a93          	li	s5,1
    256c:	fff00993          	li	s3,-1
    2570:	02090863          	beqz	s2,25a0 <__call_exitprocs+0x88>
    2574:	00492483          	lw	s1,4(s2)
    2578:	fff48413          	addi	s0,s1,-1
    257c:	02044263          	bltz	s0,25a0 <__call_exitprocs+0x88>
    2580:	00249493          	slli	s1,s1,0x2
    2584:	009904b3          	add	s1,s2,s1
    2588:	040c0863          	beqz	s8,25d8 <__call_exitprocs+0xc0>
    258c:	1044a783          	lw	a5,260(s1)
    2590:	05878463          	beq	a5,s8,25d8 <__call_exitprocs+0xc0>
    2594:	fff40413          	addi	s0,s0,-1
    2598:	ffc48493          	addi	s1,s1,-4
    259c:	ff3416e3          	bne	s0,s3,2588 <__call_exitprocs+0x70>
    25a0:	02812403          	lw	s0,40(sp)
    25a4:	000ba503          	lw	a0,0(s7)
    25a8:	02c12083          	lw	ra,44(sp)
    25ac:	02412483          	lw	s1,36(sp)
    25b0:	02012903          	lw	s2,32(sp)
    25b4:	01c12983          	lw	s3,28(sp)
    25b8:	01812a03          	lw	s4,24(sp)
    25bc:	01412a83          	lw	s5,20(sp)
    25c0:	01012b03          	lw	s6,16(sp)
    25c4:	00c12b83          	lw	s7,12(sp)
    25c8:	00812c03          	lw	s8,8(sp)
    25cc:	00412c83          	lw	s9,4(sp)
    25d0:	03010113          	addi	sp,sp,48
    25d4:	0580106f          	j	362c <__retarget_lock_release_recursive>
    25d8:	00492783          	lw	a5,4(s2)
    25dc:	0044a683          	lw	a3,4(s1)
    25e0:	fff78793          	addi	a5,a5,-1
    25e4:	04878e63          	beq	a5,s0,2640 <__call_exitprocs+0x128>
    25e8:	0004a223          	sw	zero,4(s1)
    25ec:	fa0684e3          	beqz	a3,2594 <__call_exitprocs+0x7c>
    25f0:	18892783          	lw	a5,392(s2)
    25f4:	008a9733          	sll	a4,s5,s0
    25f8:	00492c83          	lw	s9,4(s2)
    25fc:	00f777b3          	and	a5,a4,a5
    2600:	02079263          	bnez	a5,2624 <__call_exitprocs+0x10c>
    2604:	000680e7          	jalr	a3
    2608:	00492703          	lw	a4,4(s2)
    260c:	148a2783          	lw	a5,328(s4)
    2610:	01971463          	bne	a4,s9,2618 <__call_exitprocs+0x100>
    2614:	f92780e3          	beq	a5,s2,2594 <__call_exitprocs+0x7c>
    2618:	f80784e3          	beqz	a5,25a0 <__call_exitprocs+0x88>
    261c:	00078913          	mv	s2,a5
    2620:	f55ff06f          	j	2574 <__call_exitprocs+0x5c>
    2624:	18c92783          	lw	a5,396(s2)
    2628:	0844a583          	lw	a1,132(s1)
    262c:	00f77733          	and	a4,a4,a5
    2630:	00071c63          	bnez	a4,2648 <__call_exitprocs+0x130>
    2634:	000b0513          	mv	a0,s6
    2638:	000680e7          	jalr	a3
    263c:	fcdff06f          	j	2608 <__call_exitprocs+0xf0>
    2640:	00892223          	sw	s0,4(s2)
    2644:	fa9ff06f          	j	25ec <__call_exitprocs+0xd4>
    2648:	00058513          	mv	a0,a1
    264c:	000680e7          	jalr	a3
    2650:	fb9ff06f          	j	2608 <__call_exitprocs+0xf0>

00002654 <register_fini>:
    2654:	00000793          	li	a5,0
    2658:	00078863          	beqz	a5,2668 <register_fini+0x14>
    265c:	00000517          	auipc	a0,0x0
    2660:	51050513          	addi	a0,a0,1296 # 2b6c <__libc_fini_array>
    2664:	809ff06f          	j	1e6c <atexit>
    2668:	00008067          	ret

0000266c <_close_r>:
    266c:	ff010113          	addi	sp,sp,-16
    2670:	00812423          	sw	s0,8(sp)
    2674:	00050413          	mv	s0,a0
    2678:	00058513          	mv	a0,a1
    267c:	00008797          	auipc	a5,0x8
    2680:	8407a223          	sw	zero,-1980(a5) # 9ec0 <errno>
    2684:	00112623          	sw	ra,12(sp)
    2688:	4f9020ef          	jal	ra,5380 <_close>
    268c:	fff00793          	li	a5,-1
    2690:	00f50a63          	beq	a0,a5,26a4 <_close_r+0x38>
    2694:	00c12083          	lw	ra,12(sp)
    2698:	00812403          	lw	s0,8(sp)
    269c:	01010113          	addi	sp,sp,16
    26a0:	00008067          	ret
    26a4:	00008797          	auipc	a5,0x8
    26a8:	81c7a783          	lw	a5,-2020(a5) # 9ec0 <errno>
    26ac:	fe0784e3          	beqz	a5,2694 <_close_r+0x28>
    26b0:	00c12083          	lw	ra,12(sp)
    26b4:	00f42023          	sw	a5,0(s0)
    26b8:	00812403          	lw	s0,8(sp)
    26bc:	01010113          	addi	sp,sp,16
    26c0:	00008067          	ret

000026c4 <_cleanup_r>:
    26c4:	00002597          	auipc	a1,0x2
    26c8:	30858593          	addi	a1,a1,776 # 49cc <_fclose_r>
    26cc:	6810006f          	j	354c <_fwalk_reent>

000026d0 <__fp_lock>:
    26d0:	06452783          	lw	a5,100(a0)
    26d4:	0017f793          	andi	a5,a5,1
    26d8:	00079863          	bnez	a5,26e8 <__fp_lock+0x18>
    26dc:	00c55783          	lhu	a5,12(a0)
    26e0:	2007f793          	andi	a5,a5,512
    26e4:	00078663          	beqz	a5,26f0 <__fp_lock+0x20>
    26e8:	00000513          	li	a0,0
    26ec:	00008067          	ret
    26f0:	05852503          	lw	a0,88(a0)
    26f4:	ff010113          	addi	sp,sp,-16
    26f8:	00112623          	sw	ra,12(sp)
    26fc:	719000ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    2700:	00c12083          	lw	ra,12(sp)
    2704:	00000513          	li	a0,0
    2708:	01010113          	addi	sp,sp,16
    270c:	00008067          	ret

00002710 <__fp_unlock>:
    2710:	06452783          	lw	a5,100(a0)
    2714:	0017f793          	andi	a5,a5,1
    2718:	00079863          	bnez	a5,2728 <__fp_unlock+0x18>
    271c:	00c55783          	lhu	a5,12(a0)
    2720:	2007f793          	andi	a5,a5,512
    2724:	00078663          	beqz	a5,2730 <__fp_unlock+0x20>
    2728:	00000513          	li	a0,0
    272c:	00008067          	ret
    2730:	05852503          	lw	a0,88(a0)
    2734:	ff010113          	addi	sp,sp,-16
    2738:	00112623          	sw	ra,12(sp)
    273c:	6f1000ef          	jal	ra,362c <__retarget_lock_release_recursive>
    2740:	00c12083          	lw	ra,12(sp)
    2744:	00000513          	li	a0,0
    2748:	01010113          	addi	sp,sp,16
    274c:	00008067          	ret

00002750 <__sfmoreglue>:
    2750:	ff010113          	addi	sp,sp,-16
    2754:	00912223          	sw	s1,4(sp)
    2758:	06800793          	li	a5,104
    275c:	fff58493          	addi	s1,a1,-1
    2760:	02f484b3          	mul	s1,s1,a5
    2764:	01212023          	sw	s2,0(sp)
    2768:	00058913          	mv	s2,a1
    276c:	00812423          	sw	s0,8(sp)
    2770:	00112623          	sw	ra,12(sp)
    2774:	07448593          	addi	a1,s1,116
    2778:	6b9000ef          	jal	ra,3630 <_malloc_r>
    277c:	00050413          	mv	s0,a0
    2780:	02050063          	beqz	a0,27a0 <__sfmoreglue+0x50>
    2784:	00c50513          	addi	a0,a0,12
    2788:	00042023          	sw	zero,0(s0)
    278c:	01242223          	sw	s2,4(s0)
    2790:	00a42423          	sw	a0,8(s0)
    2794:	06848613          	addi	a2,s1,104
    2798:	00000593          	li	a1,0
    279c:	015010ef          	jal	ra,3fb0 <memset>
    27a0:	00c12083          	lw	ra,12(sp)
    27a4:	00040513          	mv	a0,s0
    27a8:	00812403          	lw	s0,8(sp)
    27ac:	00412483          	lw	s1,4(sp)
    27b0:	00012903          	lw	s2,0(sp)
    27b4:	01010113          	addi	sp,sp,16
    27b8:	00008067          	ret

000027bc <_cleanup>:
    27bc:	00002597          	auipc	a1,0x2
    27c0:	21058593          	addi	a1,a1,528 # 49cc <_fclose_r>
    27c4:	00004517          	auipc	a0,0x4
    27c8:	1e452503          	lw	a0,484(a0) # 69a8 <_global_impure_ptr>
    27cc:	5810006f          	j	354c <_fwalk_reent>

000027d0 <__sinit>:
    27d0:	fe010113          	addi	sp,sp,-32
    27d4:	00912a23          	sw	s1,20(sp)
    27d8:	00050493          	mv	s1,a0
    27dc:	00007517          	auipc	a0,0x7
    27e0:	70850513          	addi	a0,a0,1800 # 9ee4 <__lock___sinit_recursive_mutex>
    27e4:	00112e23          	sw	ra,28(sp)
    27e8:	00812c23          	sw	s0,24(sp)
    27ec:	01212823          	sw	s2,16(sp)
    27f0:	01312623          	sw	s3,12(sp)
    27f4:	01412423          	sw	s4,8(sp)
    27f8:	01512223          	sw	s5,4(sp)
    27fc:	619000ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    2800:	0384a783          	lw	a5,56(s1)
    2804:	14079863          	bnez	a5,2954 <__sinit+0x184>
    2808:	0044a403          	lw	s0,4(s1)
    280c:	00000717          	auipc	a4,0x0
    2810:	eb870713          	addi	a4,a4,-328 # 26c4 <_cleanup_r>
    2814:	02e4ae23          	sw	a4,60(s1)
    2818:	2ec48793          	addi	a5,s1,748
    281c:	00300713          	li	a4,3
    2820:	2ee4a223          	sw	a4,740(s1)
    2824:	2ef4a423          	sw	a5,744(s1)
    2828:	2e04a023          	sw	zero,736(s1)
    282c:	00400793          	li	a5,4
    2830:	00f42623          	sw	a5,12(s0)
    2834:	00800613          	li	a2,8
    2838:	00000593          	li	a1,0
    283c:	00042023          	sw	zero,0(s0)
    2840:	00042223          	sw	zero,4(s0)
    2844:	00042423          	sw	zero,8(s0)
    2848:	06042223          	sw	zero,100(s0)
    284c:	00042823          	sw	zero,16(s0)
    2850:	00042a23          	sw	zero,20(s0)
    2854:	00042c23          	sw	zero,24(s0)
    2858:	05c40513          	addi	a0,s0,92
    285c:	754010ef          	jal	ra,3fb0 <memset>
    2860:	00002a97          	auipc	s5,0x2
    2864:	e58a8a93          	addi	s5,s5,-424 # 46b8 <__sread>
    2868:	00002a17          	auipc	s4,0x2
    286c:	eb4a0a13          	addi	s4,s4,-332 # 471c <__swrite>
    2870:	00002997          	auipc	s3,0x2
    2874:	f3498993          	addi	s3,s3,-204 # 47a4 <__sseek>
    2878:	00002917          	auipc	s2,0x2
    287c:	fa490913          	addi	s2,s2,-92 # 481c <__sclose>
    2880:	05840513          	addi	a0,s0,88
    2884:	00842e23          	sw	s0,28(s0)
    2888:	03542023          	sw	s5,32(s0)
    288c:	03442223          	sw	s4,36(s0)
    2890:	03342423          	sw	s3,40(s0)
    2894:	03242623          	sw	s2,44(s0)
    2898:	56d000ef          	jal	ra,3604 <__retarget_lock_init_recursive>
    289c:	0084a403          	lw	s0,8(s1)
    28a0:	000107b7          	lui	a5,0x10
    28a4:	00878793          	addi	a5,a5,8 # 10008 <__alt_data_end+0x8>
    28a8:	00f42623          	sw	a5,12(s0)
    28ac:	00800613          	li	a2,8
    28b0:	00000593          	li	a1,0
    28b4:	00042023          	sw	zero,0(s0)
    28b8:	00042223          	sw	zero,4(s0)
    28bc:	00042423          	sw	zero,8(s0)
    28c0:	06042223          	sw	zero,100(s0)
    28c4:	00042823          	sw	zero,16(s0)
    28c8:	00042a23          	sw	zero,20(s0)
    28cc:	00042c23          	sw	zero,24(s0)
    28d0:	05c40513          	addi	a0,s0,92
    28d4:	6dc010ef          	jal	ra,3fb0 <memset>
    28d8:	05840513          	addi	a0,s0,88
    28dc:	00842e23          	sw	s0,28(s0)
    28e0:	03542023          	sw	s5,32(s0)
    28e4:	03442223          	sw	s4,36(s0)
    28e8:	03342423          	sw	s3,40(s0)
    28ec:	03242623          	sw	s2,44(s0)
    28f0:	515000ef          	jal	ra,3604 <__retarget_lock_init_recursive>
    28f4:	00c4a403          	lw	s0,12(s1)
    28f8:	000207b7          	lui	a5,0x20
    28fc:	01278793          	addi	a5,a5,18 # 20012 <__alt_data_end+0x10012>
    2900:	00f42623          	sw	a5,12(s0)
    2904:	00800613          	li	a2,8
    2908:	00000593          	li	a1,0
    290c:	00042023          	sw	zero,0(s0)
    2910:	00042223          	sw	zero,4(s0)
    2914:	00042423          	sw	zero,8(s0)
    2918:	06042223          	sw	zero,100(s0)
    291c:	00042823          	sw	zero,16(s0)
    2920:	00042a23          	sw	zero,20(s0)
    2924:	00042c23          	sw	zero,24(s0)
    2928:	05c40513          	addi	a0,s0,92
    292c:	684010ef          	jal	ra,3fb0 <memset>
    2930:	05840513          	addi	a0,s0,88
    2934:	00842e23          	sw	s0,28(s0)
    2938:	03542023          	sw	s5,32(s0)
    293c:	03442223          	sw	s4,36(s0)
    2940:	03342423          	sw	s3,40(s0)
    2944:	03242623          	sw	s2,44(s0)
    2948:	4bd000ef          	jal	ra,3604 <__retarget_lock_init_recursive>
    294c:	00100793          	li	a5,1
    2950:	02f4ac23          	sw	a5,56(s1)
    2954:	01812403          	lw	s0,24(sp)
    2958:	01c12083          	lw	ra,28(sp)
    295c:	01412483          	lw	s1,20(sp)
    2960:	01012903          	lw	s2,16(sp)
    2964:	00c12983          	lw	s3,12(sp)
    2968:	00812a03          	lw	s4,8(sp)
    296c:	00412a83          	lw	s5,4(sp)
    2970:	00007517          	auipc	a0,0x7
    2974:	57450513          	addi	a0,a0,1396 # 9ee4 <__lock___sinit_recursive_mutex>
    2978:	02010113          	addi	sp,sp,32
    297c:	4b10006f          	j	362c <__retarget_lock_release_recursive>

00002980 <__sfp>:
    2980:	fe010113          	addi	sp,sp,-32
    2984:	01312623          	sw	s3,12(sp)
    2988:	00050993          	mv	s3,a0
    298c:	00007517          	auipc	a0,0x7
    2990:	55450513          	addi	a0,a0,1364 # 9ee0 <__lock___sfp_recursive_mutex>
    2994:	01212823          	sw	s2,16(sp)
    2998:	00112e23          	sw	ra,28(sp)
    299c:	00812c23          	sw	s0,24(sp)
    29a0:	00912a23          	sw	s1,20(sp)
    29a4:	471000ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    29a8:	00004917          	auipc	s2,0x4
    29ac:	00092903          	lw	s2,0(s2) # 69a8 <_global_impure_ptr>
    29b0:	03892783          	lw	a5,56(s2)
    29b4:	0c078063          	beqz	a5,2a74 <__sfp+0xf4>
    29b8:	2e090913          	addi	s2,s2,736
    29bc:	fff00493          	li	s1,-1
    29c0:	00492783          	lw	a5,4(s2)
    29c4:	00892403          	lw	s0,8(s2)
    29c8:	fff78793          	addi	a5,a5,-1
    29cc:	0007d863          	bgez	a5,29dc <__sfp+0x5c>
    29d0:	0940006f          	j	2a64 <__sfp+0xe4>
    29d4:	06840413          	addi	s0,s0,104
    29d8:	08978663          	beq	a5,s1,2a64 <__sfp+0xe4>
    29dc:	00c41703          	lh	a4,12(s0)
    29e0:	fff78793          	addi	a5,a5,-1
    29e4:	fe0718e3          	bnez	a4,29d4 <__sfp+0x54>
    29e8:	ffff07b7          	lui	a5,0xffff0
    29ec:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfffe0001>
    29f0:	00f42623          	sw	a5,12(s0)
    29f4:	05840513          	addi	a0,s0,88
    29f8:	06042223          	sw	zero,100(s0)
    29fc:	409000ef          	jal	ra,3604 <__retarget_lock_init_recursive>
    2a00:	00007517          	auipc	a0,0x7
    2a04:	4e050513          	addi	a0,a0,1248 # 9ee0 <__lock___sfp_recursive_mutex>
    2a08:	425000ef          	jal	ra,362c <__retarget_lock_release_recursive>
    2a0c:	00800613          	li	a2,8
    2a10:	00042023          	sw	zero,0(s0)
    2a14:	00042423          	sw	zero,8(s0)
    2a18:	00042223          	sw	zero,4(s0)
    2a1c:	00042823          	sw	zero,16(s0)
    2a20:	00042a23          	sw	zero,20(s0)
    2a24:	00042c23          	sw	zero,24(s0)
    2a28:	00000593          	li	a1,0
    2a2c:	05c40513          	addi	a0,s0,92
    2a30:	580010ef          	jal	ra,3fb0 <memset>
    2a34:	02042823          	sw	zero,48(s0)
    2a38:	02042a23          	sw	zero,52(s0)
    2a3c:	04042223          	sw	zero,68(s0)
    2a40:	04042423          	sw	zero,72(s0)
    2a44:	01c12083          	lw	ra,28(sp)
    2a48:	00040513          	mv	a0,s0
    2a4c:	01812403          	lw	s0,24(sp)
    2a50:	01412483          	lw	s1,20(sp)
    2a54:	01012903          	lw	s2,16(sp)
    2a58:	00c12983          	lw	s3,12(sp)
    2a5c:	02010113          	addi	sp,sp,32
    2a60:	00008067          	ret
    2a64:	00092403          	lw	s0,0(s2)
    2a68:	00040c63          	beqz	s0,2a80 <__sfp+0x100>
    2a6c:	00040913          	mv	s2,s0
    2a70:	f51ff06f          	j	29c0 <__sfp+0x40>
    2a74:	00090513          	mv	a0,s2
    2a78:	d59ff0ef          	jal	ra,27d0 <__sinit>
    2a7c:	f3dff06f          	j	29b8 <__sfp+0x38>
    2a80:	1ac00593          	li	a1,428
    2a84:	00098513          	mv	a0,s3
    2a88:	3a9000ef          	jal	ra,3630 <_malloc_r>
    2a8c:	00050413          	mv	s0,a0
    2a90:	02050863          	beqz	a0,2ac0 <__sfp+0x140>
    2a94:	00c50513          	addi	a0,a0,12
    2a98:	00400793          	li	a5,4
    2a9c:	00042023          	sw	zero,0(s0)
    2aa0:	00f42223          	sw	a5,4(s0)
    2aa4:	00a42423          	sw	a0,8(s0)
    2aa8:	1a000613          	li	a2,416
    2aac:	00000593          	li	a1,0
    2ab0:	500010ef          	jal	ra,3fb0 <memset>
    2ab4:	00892023          	sw	s0,0(s2)
    2ab8:	00040913          	mv	s2,s0
    2abc:	f05ff06f          	j	29c0 <__sfp+0x40>
    2ac0:	00092023          	sw	zero,0(s2)
    2ac4:	00007517          	auipc	a0,0x7
    2ac8:	41c50513          	addi	a0,a0,1052 # 9ee0 <__lock___sfp_recursive_mutex>
    2acc:	361000ef          	jal	ra,362c <__retarget_lock_release_recursive>
    2ad0:	00c00793          	li	a5,12
    2ad4:	00f9a023          	sw	a5,0(s3)
    2ad8:	f6dff06f          	j	2a44 <__sfp+0xc4>

00002adc <__sfp_lock_acquire>:
    2adc:	00007517          	auipc	a0,0x7
    2ae0:	40450513          	addi	a0,a0,1028 # 9ee0 <__lock___sfp_recursive_mutex>
    2ae4:	3310006f          	j	3614 <__retarget_lock_acquire_recursive>

00002ae8 <__sfp_lock_release>:
    2ae8:	00007517          	auipc	a0,0x7
    2aec:	3f850513          	addi	a0,a0,1016 # 9ee0 <__lock___sfp_recursive_mutex>
    2af0:	33d0006f          	j	362c <__retarget_lock_release_recursive>

00002af4 <__sinit_lock_acquire>:
    2af4:	00007517          	auipc	a0,0x7
    2af8:	3f050513          	addi	a0,a0,1008 # 9ee4 <__lock___sinit_recursive_mutex>
    2afc:	3190006f          	j	3614 <__retarget_lock_acquire_recursive>

00002b00 <__sinit_lock_release>:
    2b00:	00007517          	auipc	a0,0x7
    2b04:	3e450513          	addi	a0,a0,996 # 9ee4 <__lock___sinit_recursive_mutex>
    2b08:	3250006f          	j	362c <__retarget_lock_release_recursive>

00002b0c <__fp_lock_all>:
    2b0c:	ff010113          	addi	sp,sp,-16
    2b10:	00007517          	auipc	a0,0x7
    2b14:	3d050513          	addi	a0,a0,976 # 9ee0 <__lock___sfp_recursive_mutex>
    2b18:	00112623          	sw	ra,12(sp)
    2b1c:	2f9000ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    2b20:	00c12083          	lw	ra,12(sp)
    2b24:	00006517          	auipc	a0,0x6
    2b28:	8e452503          	lw	a0,-1820(a0) # 8408 <_impure_ptr>
    2b2c:	00000597          	auipc	a1,0x0
    2b30:	ba458593          	addi	a1,a1,-1116 # 26d0 <__fp_lock>
    2b34:	01010113          	addi	sp,sp,16
    2b38:	1710006f          	j	34a8 <_fwalk>

00002b3c <__fp_unlock_all>:
    2b3c:	ff010113          	addi	sp,sp,-16
    2b40:	00000597          	auipc	a1,0x0
    2b44:	bd058593          	addi	a1,a1,-1072 # 2710 <__fp_unlock>
    2b48:	00006517          	auipc	a0,0x6
    2b4c:	8c052503          	lw	a0,-1856(a0) # 8408 <_impure_ptr>
    2b50:	00112623          	sw	ra,12(sp)
    2b54:	155000ef          	jal	ra,34a8 <_fwalk>
    2b58:	00c12083          	lw	ra,12(sp)
    2b5c:	00007517          	auipc	a0,0x7
    2b60:	38450513          	addi	a0,a0,900 # 9ee0 <__lock___sfp_recursive_mutex>
    2b64:	01010113          	addi	sp,sp,16
    2b68:	2c50006f          	j	362c <__retarget_lock_release_recursive>

00002b6c <__libc_fini_array>:
    2b6c:	ff010113          	addi	sp,sp,-16
    2b70:	00812423          	sw	s0,8(sp)
    2b74:	00004797          	auipc	a5,0x4
    2b78:	dac78793          	addi	a5,a5,-596 # 6920 <__fini_array_end>
    2b7c:	00004417          	auipc	s0,0x4
    2b80:	da440413          	addi	s0,s0,-604 # 6920 <__fini_array_end>
    2b84:	40f40433          	sub	s0,s0,a5
    2b88:	00912223          	sw	s1,4(sp)
    2b8c:	00112623          	sw	ra,12(sp)
    2b90:	40245493          	srai	s1,s0,0x2
    2b94:	02048063          	beqz	s1,2bb4 <__libc_fini_array+0x48>
    2b98:	ffc40413          	addi	s0,s0,-4
    2b9c:	00f40433          	add	s0,s0,a5
    2ba0:	00042783          	lw	a5,0(s0)
    2ba4:	fff48493          	addi	s1,s1,-1
    2ba8:	ffc40413          	addi	s0,s0,-4
    2bac:	000780e7          	jalr	a5
    2bb0:	fe0498e3          	bnez	s1,2ba0 <__libc_fini_array+0x34>
    2bb4:	00c12083          	lw	ra,12(sp)
    2bb8:	00812403          	lw	s0,8(sp)
    2bbc:	00412483          	lw	s1,4(sp)
    2bc0:	01010113          	addi	sp,sp,16
    2bc4:	00008067          	ret

00002bc8 <_malloc_trim_r>:
    2bc8:	fe010113          	addi	sp,sp,-32
    2bcc:	00812c23          	sw	s0,24(sp)
    2bd0:	00912a23          	sw	s1,20(sp)
    2bd4:	01212823          	sw	s2,16(sp)
    2bd8:	01312623          	sw	s3,12(sp)
    2bdc:	01412423          	sw	s4,8(sp)
    2be0:	00058993          	mv	s3,a1
    2be4:	00112e23          	sw	ra,28(sp)
    2be8:	00005a17          	auipc	s4,0x5
    2bec:	3f8a0a13          	addi	s4,s4,1016 # 7fe0 <__malloc_av_>
    2bf0:	00050913          	mv	s2,a0
    2bf4:	498010ef          	jal	ra,408c <__malloc_lock>
    2bf8:	008a2703          	lw	a4,8(s4)
    2bfc:	000017b7          	lui	a5,0x1
    2c00:	fef78413          	addi	s0,a5,-17 # fef <altera_avalon_jtag_uart_write+0xcb>
    2c04:	00472483          	lw	s1,4(a4)
    2c08:	ffc4f493          	andi	s1,s1,-4
    2c0c:	00848433          	add	s0,s1,s0
    2c10:	41340433          	sub	s0,s0,s3
    2c14:	00c45413          	srli	s0,s0,0xc
    2c18:	fff40413          	addi	s0,s0,-1
    2c1c:	00c41413          	slli	s0,s0,0xc
    2c20:	00f44e63          	blt	s0,a5,2c3c <_malloc_trim_r+0x74>
    2c24:	00000593          	li	a1,0
    2c28:	00090513          	mv	a0,s2
    2c2c:	235010ef          	jal	ra,4660 <_sbrk_r>
    2c30:	008a2783          	lw	a5,8(s4)
    2c34:	009787b3          	add	a5,a5,s1
    2c38:	02f50863          	beq	a0,a5,2c68 <_malloc_trim_r+0xa0>
    2c3c:	00090513          	mv	a0,s2
    2c40:	458010ef          	jal	ra,4098 <__malloc_unlock>
    2c44:	01c12083          	lw	ra,28(sp)
    2c48:	01812403          	lw	s0,24(sp)
    2c4c:	01412483          	lw	s1,20(sp)
    2c50:	01012903          	lw	s2,16(sp)
    2c54:	00c12983          	lw	s3,12(sp)
    2c58:	00812a03          	lw	s4,8(sp)
    2c5c:	00000513          	li	a0,0
    2c60:	02010113          	addi	sp,sp,32
    2c64:	00008067          	ret
    2c68:	408005b3          	neg	a1,s0
    2c6c:	00090513          	mv	a0,s2
    2c70:	1f1010ef          	jal	ra,4660 <_sbrk_r>
    2c74:	fff00793          	li	a5,-1
    2c78:	04f50a63          	beq	a0,a5,2ccc <_malloc_trim_r+0x104>
    2c7c:	00007717          	auipc	a4,0x7
    2c80:	2fc70713          	addi	a4,a4,764 # 9f78 <__malloc_current_mallinfo>
    2c84:	00072783          	lw	a5,0(a4)
    2c88:	008a2683          	lw	a3,8(s4)
    2c8c:	408484b3          	sub	s1,s1,s0
    2c90:	0014e493          	ori	s1,s1,1
    2c94:	408787b3          	sub	a5,a5,s0
    2c98:	00090513          	mv	a0,s2
    2c9c:	0096a223          	sw	s1,4(a3)
    2ca0:	00f72023          	sw	a5,0(a4)
    2ca4:	3f4010ef          	jal	ra,4098 <__malloc_unlock>
    2ca8:	01c12083          	lw	ra,28(sp)
    2cac:	01812403          	lw	s0,24(sp)
    2cb0:	01412483          	lw	s1,20(sp)
    2cb4:	01012903          	lw	s2,16(sp)
    2cb8:	00c12983          	lw	s3,12(sp)
    2cbc:	00812a03          	lw	s4,8(sp)
    2cc0:	00100513          	li	a0,1
    2cc4:	02010113          	addi	sp,sp,32
    2cc8:	00008067          	ret
    2ccc:	00000593          	li	a1,0
    2cd0:	00090513          	mv	a0,s2
    2cd4:	18d010ef          	jal	ra,4660 <_sbrk_r>
    2cd8:	008a2703          	lw	a4,8(s4)
    2cdc:	00f00693          	li	a3,15
    2ce0:	40e507b3          	sub	a5,a0,a4
    2ce4:	f4f6dce3          	bge	a3,a5,2c3c <_malloc_trim_r+0x74>
    2ce8:	8281a683          	lw	a3,-2008(gp) # 8410 <__malloc_sbrk_base>
    2cec:	40d50533          	sub	a0,a0,a3
    2cf0:	0017e793          	ori	a5,a5,1
    2cf4:	00007697          	auipc	a3,0x7
    2cf8:	28a6a223          	sw	a0,644(a3) # 9f78 <__malloc_current_mallinfo>
    2cfc:	00f72223          	sw	a5,4(a4)
    2d00:	f3dff06f          	j	2c3c <_malloc_trim_r+0x74>

00002d04 <_free_r>:
    2d04:	18058263          	beqz	a1,2e88 <_free_r+0x184>
    2d08:	ff010113          	addi	sp,sp,-16
    2d0c:	00812423          	sw	s0,8(sp)
    2d10:	00912223          	sw	s1,4(sp)
    2d14:	00058413          	mv	s0,a1
    2d18:	00050493          	mv	s1,a0
    2d1c:	00112623          	sw	ra,12(sp)
    2d20:	36c010ef          	jal	ra,408c <__malloc_lock>
    2d24:	ffc42583          	lw	a1,-4(s0)
    2d28:	ff840713          	addi	a4,s0,-8
    2d2c:	00005517          	auipc	a0,0x5
    2d30:	2b450513          	addi	a0,a0,692 # 7fe0 <__malloc_av_>
    2d34:	ffe5f793          	andi	a5,a1,-2
    2d38:	00f70633          	add	a2,a4,a5
    2d3c:	00462683          	lw	a3,4(a2)
    2d40:	00852803          	lw	a6,8(a0)
    2d44:	ffc6f693          	andi	a3,a3,-4
    2d48:	1ac80263          	beq	a6,a2,2eec <_free_r+0x1e8>
    2d4c:	00d62223          	sw	a3,4(a2)
    2d50:	0015f593          	andi	a1,a1,1
    2d54:	00d60833          	add	a6,a2,a3
    2d58:	0a059063          	bnez	a1,2df8 <_free_r+0xf4>
    2d5c:	ff842303          	lw	t1,-8(s0)
    2d60:	00482583          	lw	a1,4(a6)
    2d64:	00005897          	auipc	a7,0x5
    2d68:	28488893          	addi	a7,a7,644 # 7fe8 <__malloc_av_+0x8>
    2d6c:	40670733          	sub	a4,a4,t1
    2d70:	00872803          	lw	a6,8(a4)
    2d74:	006787b3          	add	a5,a5,t1
    2d78:	0015f593          	andi	a1,a1,1
    2d7c:	15180263          	beq	a6,a7,2ec0 <_free_r+0x1bc>
    2d80:	00c72303          	lw	t1,12(a4)
    2d84:	00682623          	sw	t1,12(a6)
    2d88:	01032423          	sw	a6,8(t1)
    2d8c:	1a058863          	beqz	a1,2f3c <_free_r+0x238>
    2d90:	0017e693          	ori	a3,a5,1
    2d94:	00d72223          	sw	a3,4(a4)
    2d98:	00f62023          	sw	a5,0(a2)
    2d9c:	1ff00693          	li	a3,511
    2da0:	06f6ec63          	bltu	a3,a5,2e18 <_free_r+0x114>
    2da4:	ff87f693          	andi	a3,a5,-8
    2da8:	00868693          	addi	a3,a3,8
    2dac:	00452583          	lw	a1,4(a0)
    2db0:	00d506b3          	add	a3,a0,a3
    2db4:	0006a603          	lw	a2,0(a3)
    2db8:	0057d813          	srli	a6,a5,0x5
    2dbc:	00100793          	li	a5,1
    2dc0:	010797b3          	sll	a5,a5,a6
    2dc4:	00b7e7b3          	or	a5,a5,a1
    2dc8:	ff868593          	addi	a1,a3,-8
    2dcc:	00b72623          	sw	a1,12(a4)
    2dd0:	00c72423          	sw	a2,8(a4)
    2dd4:	00f52223          	sw	a5,4(a0)
    2dd8:	00e6a023          	sw	a4,0(a3)
    2ddc:	00e62623          	sw	a4,12(a2)
    2de0:	00812403          	lw	s0,8(sp)
    2de4:	00c12083          	lw	ra,12(sp)
    2de8:	00048513          	mv	a0,s1
    2dec:	00412483          	lw	s1,4(sp)
    2df0:	01010113          	addi	sp,sp,16
    2df4:	2a40106f          	j	4098 <__malloc_unlock>
    2df8:	00482583          	lw	a1,4(a6)
    2dfc:	0015f593          	andi	a1,a1,1
    2e00:	08058663          	beqz	a1,2e8c <_free_r+0x188>
    2e04:	0017e693          	ori	a3,a5,1
    2e08:	fed42e23          	sw	a3,-4(s0)
    2e0c:	00f62023          	sw	a5,0(a2)
    2e10:	1ff00693          	li	a3,511
    2e14:	f8f6f8e3          	bgeu	a3,a5,2da4 <_free_r+0xa0>
    2e18:	0097d693          	srli	a3,a5,0x9
    2e1c:	00400613          	li	a2,4
    2e20:	12d66263          	bltu	a2,a3,2f44 <_free_r+0x240>
    2e24:	0067d693          	srli	a3,a5,0x6
    2e28:	03968593          	addi	a1,a3,57
    2e2c:	03868613          	addi	a2,a3,56
    2e30:	00359593          	slli	a1,a1,0x3
    2e34:	00b505b3          	add	a1,a0,a1
    2e38:	0005a683          	lw	a3,0(a1)
    2e3c:	ff858593          	addi	a1,a1,-8
    2e40:	00d59863          	bne	a1,a3,2e50 <_free_r+0x14c>
    2e44:	1580006f          	j	2f9c <_free_r+0x298>
    2e48:	0086a683          	lw	a3,8(a3)
    2e4c:	00d58863          	beq	a1,a3,2e5c <_free_r+0x158>
    2e50:	0046a603          	lw	a2,4(a3)
    2e54:	ffc67613          	andi	a2,a2,-4
    2e58:	fec7e8e3          	bltu	a5,a2,2e48 <_free_r+0x144>
    2e5c:	00c6a583          	lw	a1,12(a3)
    2e60:	00b72623          	sw	a1,12(a4)
    2e64:	00d72423          	sw	a3,8(a4)
    2e68:	00812403          	lw	s0,8(sp)
    2e6c:	00c12083          	lw	ra,12(sp)
    2e70:	00e5a423          	sw	a4,8(a1)
    2e74:	00048513          	mv	a0,s1
    2e78:	00412483          	lw	s1,4(sp)
    2e7c:	00e6a623          	sw	a4,12(a3)
    2e80:	01010113          	addi	sp,sp,16
    2e84:	2140106f          	j	4098 <__malloc_unlock>
    2e88:	00008067          	ret
    2e8c:	00d787b3          	add	a5,a5,a3
    2e90:	00005897          	auipc	a7,0x5
    2e94:	15888893          	addi	a7,a7,344 # 7fe8 <__malloc_av_+0x8>
    2e98:	00862683          	lw	a3,8(a2)
    2e9c:	0d168e63          	beq	a3,a7,2f78 <_free_r+0x274>
    2ea0:	00c62803          	lw	a6,12(a2)
    2ea4:	0017e593          	ori	a1,a5,1
    2ea8:	00f70633          	add	a2,a4,a5
    2eac:	0106a623          	sw	a6,12(a3)
    2eb0:	00d82423          	sw	a3,8(a6)
    2eb4:	00b72223          	sw	a1,4(a4)
    2eb8:	00f62023          	sw	a5,0(a2)
    2ebc:	ee1ff06f          	j	2d9c <_free_r+0x98>
    2ec0:	12059e63          	bnez	a1,2ffc <_free_r+0x2f8>
    2ec4:	00862583          	lw	a1,8(a2)
    2ec8:	00c62603          	lw	a2,12(a2)
    2ecc:	00f686b3          	add	a3,a3,a5
    2ed0:	0016e793          	ori	a5,a3,1
    2ed4:	00c5a623          	sw	a2,12(a1)
    2ed8:	00b62423          	sw	a1,8(a2)
    2edc:	00f72223          	sw	a5,4(a4)
    2ee0:	00d70733          	add	a4,a4,a3
    2ee4:	00d72023          	sw	a3,0(a4)
    2ee8:	ef9ff06f          	j	2de0 <_free_r+0xdc>
    2eec:	0015f593          	andi	a1,a1,1
    2ef0:	00d786b3          	add	a3,a5,a3
    2ef4:	02059063          	bnez	a1,2f14 <_free_r+0x210>
    2ef8:	ff842583          	lw	a1,-8(s0)
    2efc:	40b70733          	sub	a4,a4,a1
    2f00:	00c72783          	lw	a5,12(a4)
    2f04:	00872603          	lw	a2,8(a4)
    2f08:	00b686b3          	add	a3,a3,a1
    2f0c:	00f62623          	sw	a5,12(a2)
    2f10:	00c7a423          	sw	a2,8(a5)
    2f14:	0016e793          	ori	a5,a3,1
    2f18:	00f72223          	sw	a5,4(a4)
    2f1c:	00e52423          	sw	a4,8(a0)
    2f20:	82c1a783          	lw	a5,-2004(gp) # 8414 <__malloc_trim_threshold>
    2f24:	eaf6eee3          	bltu	a3,a5,2de0 <_free_r+0xdc>
    2f28:	00007597          	auipc	a1,0x7
    2f2c:	fc85a583          	lw	a1,-56(a1) # 9ef0 <__malloc_top_pad>
    2f30:	00048513          	mv	a0,s1
    2f34:	c95ff0ef          	jal	ra,2bc8 <_malloc_trim_r>
    2f38:	ea9ff06f          	j	2de0 <_free_r+0xdc>
    2f3c:	00d787b3          	add	a5,a5,a3
    2f40:	f59ff06f          	j	2e98 <_free_r+0x194>
    2f44:	01400613          	li	a2,20
    2f48:	02d67063          	bgeu	a2,a3,2f68 <_free_r+0x264>
    2f4c:	05400613          	li	a2,84
    2f50:	06d66463          	bltu	a2,a3,2fb8 <_free_r+0x2b4>
    2f54:	00c7d693          	srli	a3,a5,0xc
    2f58:	06f68593          	addi	a1,a3,111
    2f5c:	06e68613          	addi	a2,a3,110
    2f60:	00359593          	slli	a1,a1,0x3
    2f64:	ed1ff06f          	j	2e34 <_free_r+0x130>
    2f68:	05c68593          	addi	a1,a3,92
    2f6c:	05b68613          	addi	a2,a3,91
    2f70:	00359593          	slli	a1,a1,0x3
    2f74:	ec1ff06f          	j	2e34 <_free_r+0x130>
    2f78:	00e52a23          	sw	a4,20(a0)
    2f7c:	00e52823          	sw	a4,16(a0)
    2f80:	0017e693          	ori	a3,a5,1
    2f84:	01172623          	sw	a7,12(a4)
    2f88:	01172423          	sw	a7,8(a4)
    2f8c:	00d72223          	sw	a3,4(a4)
    2f90:	00f70733          	add	a4,a4,a5
    2f94:	00f72023          	sw	a5,0(a4)
    2f98:	e49ff06f          	j	2de0 <_free_r+0xdc>
    2f9c:	00452803          	lw	a6,4(a0)
    2fa0:	40265613          	srai	a2,a2,0x2
    2fa4:	00100793          	li	a5,1
    2fa8:	00c797b3          	sll	a5,a5,a2
    2fac:	0107e7b3          	or	a5,a5,a6
    2fb0:	00f52223          	sw	a5,4(a0)
    2fb4:	eadff06f          	j	2e60 <_free_r+0x15c>
    2fb8:	15400613          	li	a2,340
    2fbc:	00d66c63          	bltu	a2,a3,2fd4 <_free_r+0x2d0>
    2fc0:	00f7d693          	srli	a3,a5,0xf
    2fc4:	07868593          	addi	a1,a3,120
    2fc8:	07768613          	addi	a2,a3,119
    2fcc:	00359593          	slli	a1,a1,0x3
    2fd0:	e65ff06f          	j	2e34 <_free_r+0x130>
    2fd4:	55400613          	li	a2,1364
    2fd8:	00d66c63          	bltu	a2,a3,2ff0 <_free_r+0x2ec>
    2fdc:	0127d693          	srli	a3,a5,0x12
    2fe0:	07d68593          	addi	a1,a3,125
    2fe4:	07c68613          	addi	a2,a3,124
    2fe8:	00359593          	slli	a1,a1,0x3
    2fec:	e49ff06f          	j	2e34 <_free_r+0x130>
    2ff0:	3f800593          	li	a1,1016
    2ff4:	07e00613          	li	a2,126
    2ff8:	e3dff06f          	j	2e34 <_free_r+0x130>
    2ffc:	0017e693          	ori	a3,a5,1
    3000:	00d72223          	sw	a3,4(a4)
    3004:	00f62023          	sw	a5,0(a2)
    3008:	dd9ff06f          	j	2de0 <_free_r+0xdc>

0000300c <__sfvwrite_r>:
    300c:	00862783          	lw	a5,8(a2)
    3010:	30078a63          	beqz	a5,3324 <__sfvwrite_r+0x318>
    3014:	00c59683          	lh	a3,12(a1)
    3018:	fd010113          	addi	sp,sp,-48
    301c:	02812423          	sw	s0,40(sp)
    3020:	01412c23          	sw	s4,24(sp)
    3024:	01612823          	sw	s6,16(sp)
    3028:	02112623          	sw	ra,44(sp)
    302c:	02912223          	sw	s1,36(sp)
    3030:	03212023          	sw	s2,32(sp)
    3034:	01312e23          	sw	s3,28(sp)
    3038:	01512a23          	sw	s5,20(sp)
    303c:	01712623          	sw	s7,12(sp)
    3040:	01812423          	sw	s8,8(sp)
    3044:	01912223          	sw	s9,4(sp)
    3048:	0086f793          	andi	a5,a3,8
    304c:	00060b13          	mv	s6,a2
    3050:	00050a13          	mv	s4,a0
    3054:	00058413          	mv	s0,a1
    3058:	08078663          	beqz	a5,30e4 <__sfvwrite_r+0xd8>
    305c:	0105a783          	lw	a5,16(a1)
    3060:	08078263          	beqz	a5,30e4 <__sfvwrite_r+0xd8>
    3064:	0026f793          	andi	a5,a3,2
    3068:	000b2483          	lw	s1,0(s6)
    306c:	08078c63          	beqz	a5,3104 <__sfvwrite_r+0xf8>
    3070:	02442783          	lw	a5,36(s0)
    3074:	01c42583          	lw	a1,28(s0)
    3078:	80000ab7          	lui	s5,0x80000
    307c:	00000993          	li	s3,0
    3080:	00000913          	li	s2,0
    3084:	c00aca93          	xori	s5,s5,-1024
    3088:	00098613          	mv	a2,s3
    308c:	000a0513          	mv	a0,s4
    3090:	04090263          	beqz	s2,30d4 <__sfvwrite_r+0xc8>
    3094:	00090693          	mv	a3,s2
    3098:	012af463          	bgeu	s5,s2,30a0 <__sfvwrite_r+0x94>
    309c:	000a8693          	mv	a3,s5
    30a0:	000780e7          	jalr	a5
    30a4:	26a05663          	blez	a0,3310 <__sfvwrite_r+0x304>
    30a8:	008b2783          	lw	a5,8(s6)
    30ac:	00a989b3          	add	s3,s3,a0
    30b0:	40a90933          	sub	s2,s2,a0
    30b4:	40a787b3          	sub	a5,a5,a0
    30b8:	00fb2423          	sw	a5,8(s6)
    30bc:	20078663          	beqz	a5,32c8 <__sfvwrite_r+0x2bc>
    30c0:	02442783          	lw	a5,36(s0)
    30c4:	01c42583          	lw	a1,28(s0)
    30c8:	00098613          	mv	a2,s3
    30cc:	000a0513          	mv	a0,s4
    30d0:	fc0912e3          	bnez	s2,3094 <__sfvwrite_r+0x88>
    30d4:	0004a983          	lw	s3,0(s1)
    30d8:	0044a903          	lw	s2,4(s1)
    30dc:	00848493          	addi	s1,s1,8
    30e0:	fa9ff06f          	j	3088 <__sfvwrite_r+0x7c>
    30e4:	00040593          	mv	a1,s0
    30e8:	000a0513          	mv	a0,s4
    30ec:	79c010ef          	jal	ra,4888 <__swsetup_r>
    30f0:	22051663          	bnez	a0,331c <__sfvwrite_r+0x310>
    30f4:	00c41683          	lh	a3,12(s0)
    30f8:	000b2483          	lw	s1,0(s6)
    30fc:	0026f793          	andi	a5,a3,2
    3100:	f60798e3          	bnez	a5,3070 <__sfvwrite_r+0x64>
    3104:	0016f793          	andi	a5,a3,1
    3108:	12079c63          	bnez	a5,3240 <__sfvwrite_r+0x234>
    310c:	00042783          	lw	a5,0(s0)
    3110:	00842703          	lw	a4,8(s0)
    3114:	80000ab7          	lui	s5,0x80000
    3118:	00000b93          	li	s7,0
    311c:	00000993          	li	s3,0
    3120:	fffaca93          	not	s5,s5
    3124:	00078513          	mv	a0,a5
    3128:	00070c13          	mv	s8,a4
    312c:	10098263          	beqz	s3,3230 <__sfvwrite_r+0x224>
    3130:	2006f613          	andi	a2,a3,512
    3134:	24060c63          	beqz	a2,338c <__sfvwrite_r+0x380>
    3138:	00070c93          	mv	s9,a4
    313c:	2ee9e463          	bltu	s3,a4,3424 <__sfvwrite_r+0x418>
    3140:	4806f713          	andi	a4,a3,1152
    3144:	08070a63          	beqz	a4,31d8 <__sfvwrite_r+0x1cc>
    3148:	01442603          	lw	a2,20(s0)
    314c:	01042583          	lw	a1,16(s0)
    3150:	00161713          	slli	a4,a2,0x1
    3154:	00c70733          	add	a4,a4,a2
    3158:	40b78933          	sub	s2,a5,a1
    315c:	01f75c13          	srli	s8,a4,0x1f
    3160:	00ec0c33          	add	s8,s8,a4
    3164:	00190793          	addi	a5,s2,1
    3168:	401c5c13          	srai	s8,s8,0x1
    316c:	013787b3          	add	a5,a5,s3
    3170:	000c0613          	mv	a2,s8
    3174:	00fc7663          	bgeu	s8,a5,3180 <__sfvwrite_r+0x174>
    3178:	00078c13          	mv	s8,a5
    317c:	00078613          	mv	a2,a5
    3180:	4006f693          	andi	a3,a3,1024
    3184:	2c068c63          	beqz	a3,345c <__sfvwrite_r+0x450>
    3188:	00060593          	mv	a1,a2
    318c:	000a0513          	mv	a0,s4
    3190:	4a0000ef          	jal	ra,3630 <_malloc_r>
    3194:	00050c93          	mv	s9,a0
    3198:	30050063          	beqz	a0,3498 <__sfvwrite_r+0x48c>
    319c:	01042583          	lw	a1,16(s0)
    31a0:	00090613          	mv	a2,s2
    31a4:	d11fe0ef          	jal	ra,1eb4 <memcpy>
    31a8:	00c45783          	lhu	a5,12(s0)
    31ac:	b7f7f793          	andi	a5,a5,-1153
    31b0:	0807e793          	ori	a5,a5,128
    31b4:	00f41623          	sh	a5,12(s0)
    31b8:	012c8533          	add	a0,s9,s2
    31bc:	412c07b3          	sub	a5,s8,s2
    31c0:	01942823          	sw	s9,16(s0)
    31c4:	01842a23          	sw	s8,20(s0)
    31c8:	00a42023          	sw	a0,0(s0)
    31cc:	00098c13          	mv	s8,s3
    31d0:	00f42423          	sw	a5,8(s0)
    31d4:	00098c93          	mv	s9,s3
    31d8:	000c8613          	mv	a2,s9
    31dc:	000b8593          	mv	a1,s7
    31e0:	4b5000ef          	jal	ra,3e94 <memmove>
    31e4:	00842703          	lw	a4,8(s0)
    31e8:	00042783          	lw	a5,0(s0)
    31ec:	00098913          	mv	s2,s3
    31f0:	41870733          	sub	a4,a4,s8
    31f4:	019787b3          	add	a5,a5,s9
    31f8:	00e42423          	sw	a4,8(s0)
    31fc:	00f42023          	sw	a5,0(s0)
    3200:	00000993          	li	s3,0
    3204:	008b2783          	lw	a5,8(s6)
    3208:	012b8bb3          	add	s7,s7,s2
    320c:	412787b3          	sub	a5,a5,s2
    3210:	00fb2423          	sw	a5,8(s6)
    3214:	0a078a63          	beqz	a5,32c8 <__sfvwrite_r+0x2bc>
    3218:	00042783          	lw	a5,0(s0)
    321c:	00842703          	lw	a4,8(s0)
    3220:	00c41683          	lh	a3,12(s0)
    3224:	00078513          	mv	a0,a5
    3228:	00070c13          	mv	s8,a4
    322c:	f00992e3          	bnez	s3,3130 <__sfvwrite_r+0x124>
    3230:	0004ab83          	lw	s7,0(s1)
    3234:	0044a983          	lw	s3,4(s1)
    3238:	00848493          	addi	s1,s1,8
    323c:	ee9ff06f          	j	3124 <__sfvwrite_r+0x118>
    3240:	00000a93          	li	s5,0
    3244:	00000513          	li	a0,0
    3248:	00000c13          	li	s8,0
    324c:	00000993          	li	s3,0
    3250:	0c098e63          	beqz	s3,332c <__sfvwrite_r+0x320>
    3254:	0e050663          	beqz	a0,3340 <__sfvwrite_r+0x334>
    3258:	000a8793          	mv	a5,s5
    325c:	00098b93          	mv	s7,s3
    3260:	0137f463          	bgeu	a5,s3,3268 <__sfvwrite_r+0x25c>
    3264:	00078b93          	mv	s7,a5
    3268:	00042503          	lw	a0,0(s0)
    326c:	01042783          	lw	a5,16(s0)
    3270:	00842903          	lw	s2,8(s0)
    3274:	01442683          	lw	a3,20(s0)
    3278:	00a7f663          	bgeu	a5,a0,3284 <__sfvwrite_r+0x278>
    327c:	00d90933          	add	s2,s2,a3
    3280:	0f794063          	blt	s2,s7,3360 <__sfvwrite_r+0x354>
    3284:	1adbc663          	blt	s7,a3,3430 <__sfvwrite_r+0x424>
    3288:	02442783          	lw	a5,36(s0)
    328c:	01c42583          	lw	a1,28(s0)
    3290:	000c0613          	mv	a2,s8
    3294:	000a0513          	mv	a0,s4
    3298:	000780e7          	jalr	a5
    329c:	00050913          	mv	s2,a0
    32a0:	06a05863          	blez	a0,3310 <__sfvwrite_r+0x304>
    32a4:	412a8ab3          	sub	s5,s5,s2
    32a8:	00100513          	li	a0,1
    32ac:	040a8a63          	beqz	s5,3300 <__sfvwrite_r+0x2f4>
    32b0:	008b2783          	lw	a5,8(s6)
    32b4:	012c0c33          	add	s8,s8,s2
    32b8:	412989b3          	sub	s3,s3,s2
    32bc:	412787b3          	sub	a5,a5,s2
    32c0:	00fb2423          	sw	a5,8(s6)
    32c4:	f80796e3          	bnez	a5,3250 <__sfvwrite_r+0x244>
    32c8:	00000513          	li	a0,0
    32cc:	02c12083          	lw	ra,44(sp)
    32d0:	02812403          	lw	s0,40(sp)
    32d4:	02412483          	lw	s1,36(sp)
    32d8:	02012903          	lw	s2,32(sp)
    32dc:	01c12983          	lw	s3,28(sp)
    32e0:	01812a03          	lw	s4,24(sp)
    32e4:	01412a83          	lw	s5,20(sp)
    32e8:	01012b03          	lw	s6,16(sp)
    32ec:	00c12b83          	lw	s7,12(sp)
    32f0:	00812c03          	lw	s8,8(sp)
    32f4:	00412c83          	lw	s9,4(sp)
    32f8:	03010113          	addi	sp,sp,48
    32fc:	00008067          	ret
    3300:	00040593          	mv	a1,s0
    3304:	000a0513          	mv	a0,s4
    3308:	299010ef          	jal	ra,4da0 <_fflush_r>
    330c:	fa0502e3          	beqz	a0,32b0 <__sfvwrite_r+0x2a4>
    3310:	00c41783          	lh	a5,12(s0)
    3314:	0407e793          	ori	a5,a5,64
    3318:	00f41623          	sh	a5,12(s0)
    331c:	fff00513          	li	a0,-1
    3320:	fadff06f          	j	32cc <__sfvwrite_r+0x2c0>
    3324:	00000513          	li	a0,0
    3328:	00008067          	ret
    332c:	0044a983          	lw	s3,4(s1)
    3330:	00048793          	mv	a5,s1
    3334:	00848493          	addi	s1,s1,8
    3338:	fe098ae3          	beqz	s3,332c <__sfvwrite_r+0x320>
    333c:	0007ac03          	lw	s8,0(a5)
    3340:	00098613          	mv	a2,s3
    3344:	00a00593          	li	a1,10
    3348:	000c0513          	mv	a0,s8
    334c:	285000ef          	jal	ra,3dd0 <memchr>
    3350:	12050e63          	beqz	a0,348c <__sfvwrite_r+0x480>
    3354:	00150513          	addi	a0,a0,1
    3358:	41850ab3          	sub	s5,a0,s8
    335c:	efdff06f          	j	3258 <__sfvwrite_r+0x24c>
    3360:	000c0593          	mv	a1,s8
    3364:	00090613          	mv	a2,s2
    3368:	32d000ef          	jal	ra,3e94 <memmove>
    336c:	00042783          	lw	a5,0(s0)
    3370:	00040593          	mv	a1,s0
    3374:	000a0513          	mv	a0,s4
    3378:	012787b3          	add	a5,a5,s2
    337c:	00f42023          	sw	a5,0(s0)
    3380:	221010ef          	jal	ra,4da0 <_fflush_r>
    3384:	f20500e3          	beqz	a0,32a4 <__sfvwrite_r+0x298>
    3388:	f89ff06f          	j	3310 <__sfvwrite_r+0x304>
    338c:	01042683          	lw	a3,16(s0)
    3390:	04f6e263          	bltu	a3,a5,33d4 <__sfvwrite_r+0x3c8>
    3394:	01442603          	lw	a2,20(s0)
    3398:	02c9ee63          	bltu	s3,a2,33d4 <__sfvwrite_r+0x3c8>
    339c:	00098793          	mv	a5,s3
    33a0:	013af463          	bgeu	s5,s3,33a8 <__sfvwrite_r+0x39c>
    33a4:	000a8793          	mv	a5,s5
    33a8:	02c7e6b3          	rem	a3,a5,a2
    33ac:	02442703          	lw	a4,36(s0)
    33b0:	01c42583          	lw	a1,28(s0)
    33b4:	000b8613          	mv	a2,s7
    33b8:	000a0513          	mv	a0,s4
    33bc:	40d786b3          	sub	a3,a5,a3
    33c0:	000700e7          	jalr	a4
    33c4:	00050913          	mv	s2,a0
    33c8:	f4a054e3          	blez	a0,3310 <__sfvwrite_r+0x304>
    33cc:	412989b3          	sub	s3,s3,s2
    33d0:	e35ff06f          	j	3204 <__sfvwrite_r+0x1f8>
    33d4:	00070913          	mv	s2,a4
    33d8:	00e9f463          	bgeu	s3,a4,33e0 <__sfvwrite_r+0x3d4>
    33dc:	00098913          	mv	s2,s3
    33e0:	00078513          	mv	a0,a5
    33e4:	00090613          	mv	a2,s2
    33e8:	000b8593          	mv	a1,s7
    33ec:	2a9000ef          	jal	ra,3e94 <memmove>
    33f0:	00842703          	lw	a4,8(s0)
    33f4:	00042783          	lw	a5,0(s0)
    33f8:	41270733          	sub	a4,a4,s2
    33fc:	012787b3          	add	a5,a5,s2
    3400:	00e42423          	sw	a4,8(s0)
    3404:	00f42023          	sw	a5,0(s0)
    3408:	fc0712e3          	bnez	a4,33cc <__sfvwrite_r+0x3c0>
    340c:	00040593          	mv	a1,s0
    3410:	000a0513          	mv	a0,s4
    3414:	18d010ef          	jal	ra,4da0 <_fflush_r>
    3418:	ee051ce3          	bnez	a0,3310 <__sfvwrite_r+0x304>
    341c:	412989b3          	sub	s3,s3,s2
    3420:	de5ff06f          	j	3204 <__sfvwrite_r+0x1f8>
    3424:	00098c13          	mv	s8,s3
    3428:	00098c93          	mv	s9,s3
    342c:	dadff06f          	j	31d8 <__sfvwrite_r+0x1cc>
    3430:	000b8613          	mv	a2,s7
    3434:	000c0593          	mv	a1,s8
    3438:	25d000ef          	jal	ra,3e94 <memmove>
    343c:	00842703          	lw	a4,8(s0)
    3440:	00042783          	lw	a5,0(s0)
    3444:	000b8913          	mv	s2,s7
    3448:	41770733          	sub	a4,a4,s7
    344c:	017787b3          	add	a5,a5,s7
    3450:	00e42423          	sw	a4,8(s0)
    3454:	00f42023          	sw	a5,0(s0)
    3458:	e4dff06f          	j	32a4 <__sfvwrite_r+0x298>
    345c:	000a0513          	mv	a0,s4
    3460:	4a9000ef          	jal	ra,4108 <_realloc_r>
    3464:	00050c93          	mv	s9,a0
    3468:	d40518e3          	bnez	a0,31b8 <__sfvwrite_r+0x1ac>
    346c:	01042583          	lw	a1,16(s0)
    3470:	000a0513          	mv	a0,s4
    3474:	891ff0ef          	jal	ra,2d04 <_free_r>
    3478:	00c41783          	lh	a5,12(s0)
    347c:	00c00713          	li	a4,12
    3480:	00ea2023          	sw	a4,0(s4)
    3484:	f7f7f793          	andi	a5,a5,-129
    3488:	e8dff06f          	j	3314 <__sfvwrite_r+0x308>
    348c:	00198793          	addi	a5,s3,1
    3490:	00078a93          	mv	s5,a5
    3494:	dc9ff06f          	j	325c <__sfvwrite_r+0x250>
    3498:	00c00713          	li	a4,12
    349c:	00c41783          	lh	a5,12(s0)
    34a0:	00ea2023          	sw	a4,0(s4)
    34a4:	e71ff06f          	j	3314 <__sfvwrite_r+0x308>

000034a8 <_fwalk>:
    34a8:	fe010113          	addi	sp,sp,-32
    34ac:	01212823          	sw	s2,16(sp)
    34b0:	01312623          	sw	s3,12(sp)
    34b4:	01412423          	sw	s4,8(sp)
    34b8:	01512223          	sw	s5,4(sp)
    34bc:	01612023          	sw	s6,0(sp)
    34c0:	00112e23          	sw	ra,28(sp)
    34c4:	00812c23          	sw	s0,24(sp)
    34c8:	00912a23          	sw	s1,20(sp)
    34cc:	00058b13          	mv	s6,a1
    34d0:	2e050a93          	addi	s5,a0,736
    34d4:	00000a13          	li	s4,0
    34d8:	00100993          	li	s3,1
    34dc:	fff00913          	li	s2,-1
    34e0:	004aa483          	lw	s1,4(s5) # 80000004 <__alt_data_end+0x7fff0004>
    34e4:	008aa403          	lw	s0,8(s5)
    34e8:	fff48493          	addi	s1,s1,-1
    34ec:	0204c663          	bltz	s1,3518 <_fwalk+0x70>
    34f0:	00c45783          	lhu	a5,12(s0)
    34f4:	fff48493          	addi	s1,s1,-1
    34f8:	00f9fc63          	bgeu	s3,a5,3510 <_fwalk+0x68>
    34fc:	00e41783          	lh	a5,14(s0)
    3500:	00040513          	mv	a0,s0
    3504:	01278663          	beq	a5,s2,3510 <_fwalk+0x68>
    3508:	000b00e7          	jalr	s6
    350c:	00aa6a33          	or	s4,s4,a0
    3510:	06840413          	addi	s0,s0,104
    3514:	fd249ee3          	bne	s1,s2,34f0 <_fwalk+0x48>
    3518:	000aaa83          	lw	s5,0(s5)
    351c:	fc0a92e3          	bnez	s5,34e0 <_fwalk+0x38>
    3520:	01c12083          	lw	ra,28(sp)
    3524:	01812403          	lw	s0,24(sp)
    3528:	01412483          	lw	s1,20(sp)
    352c:	01012903          	lw	s2,16(sp)
    3530:	00c12983          	lw	s3,12(sp)
    3534:	00412a83          	lw	s5,4(sp)
    3538:	00012b03          	lw	s6,0(sp)
    353c:	000a0513          	mv	a0,s4
    3540:	00812a03          	lw	s4,8(sp)
    3544:	02010113          	addi	sp,sp,32
    3548:	00008067          	ret

0000354c <_fwalk_reent>:
    354c:	fd010113          	addi	sp,sp,-48
    3550:	03212023          	sw	s2,32(sp)
    3554:	01312e23          	sw	s3,28(sp)
    3558:	01412c23          	sw	s4,24(sp)
    355c:	01512a23          	sw	s5,20(sp)
    3560:	01612823          	sw	s6,16(sp)
    3564:	01712623          	sw	s7,12(sp)
    3568:	02112623          	sw	ra,44(sp)
    356c:	02812423          	sw	s0,40(sp)
    3570:	02912223          	sw	s1,36(sp)
    3574:	00050a93          	mv	s5,a0
    3578:	00058b93          	mv	s7,a1
    357c:	2e050b13          	addi	s6,a0,736
    3580:	00000a13          	li	s4,0
    3584:	00100993          	li	s3,1
    3588:	fff00913          	li	s2,-1
    358c:	004b2483          	lw	s1,4(s6)
    3590:	008b2403          	lw	s0,8(s6)
    3594:	fff48493          	addi	s1,s1,-1
    3598:	0204c863          	bltz	s1,35c8 <_fwalk_reent+0x7c>
    359c:	00c45783          	lhu	a5,12(s0)
    35a0:	fff48493          	addi	s1,s1,-1
    35a4:	00f9fe63          	bgeu	s3,a5,35c0 <_fwalk_reent+0x74>
    35a8:	00e41783          	lh	a5,14(s0)
    35ac:	00040593          	mv	a1,s0
    35b0:	000a8513          	mv	a0,s5
    35b4:	01278663          	beq	a5,s2,35c0 <_fwalk_reent+0x74>
    35b8:	000b80e7          	jalr	s7
    35bc:	00aa6a33          	or	s4,s4,a0
    35c0:	06840413          	addi	s0,s0,104
    35c4:	fd249ce3          	bne	s1,s2,359c <_fwalk_reent+0x50>
    35c8:	000b2b03          	lw	s6,0(s6)
    35cc:	fc0b10e3          	bnez	s6,358c <_fwalk_reent+0x40>
    35d0:	02c12083          	lw	ra,44(sp)
    35d4:	02812403          	lw	s0,40(sp)
    35d8:	02412483          	lw	s1,36(sp)
    35dc:	02012903          	lw	s2,32(sp)
    35e0:	01c12983          	lw	s3,28(sp)
    35e4:	01412a83          	lw	s5,20(sp)
    35e8:	01012b03          	lw	s6,16(sp)
    35ec:	00c12b83          	lw	s7,12(sp)
    35f0:	000a0513          	mv	a0,s4
    35f4:	01812a03          	lw	s4,24(sp)
    35f8:	03010113          	addi	sp,sp,48
    35fc:	00008067          	ret

00003600 <__retarget_lock_init>:
    3600:	00008067          	ret

00003604 <__retarget_lock_init_recursive>:
    3604:	00008067          	ret

00003608 <__retarget_lock_close>:
    3608:	00008067          	ret

0000360c <__retarget_lock_close_recursive>:
    360c:	00008067          	ret

00003610 <__retarget_lock_acquire>:
    3610:	00008067          	ret

00003614 <__retarget_lock_acquire_recursive>:
    3614:	00008067          	ret

00003618 <__retarget_lock_try_acquire>:
    3618:	00100513          	li	a0,1
    361c:	00008067          	ret

00003620 <__retarget_lock_try_acquire_recursive>:
    3620:	00100513          	li	a0,1
    3624:	00008067          	ret

00003628 <__retarget_lock_release>:
    3628:	00008067          	ret

0000362c <__retarget_lock_release_recursive>:
    362c:	00008067          	ret

00003630 <_malloc_r>:
    3630:	fd010113          	addi	sp,sp,-48
    3634:	03212023          	sw	s2,32(sp)
    3638:	02112623          	sw	ra,44(sp)
    363c:	02812423          	sw	s0,40(sp)
    3640:	02912223          	sw	s1,36(sp)
    3644:	01312e23          	sw	s3,28(sp)
    3648:	01412c23          	sw	s4,24(sp)
    364c:	01512a23          	sw	s5,20(sp)
    3650:	01612823          	sw	s6,16(sp)
    3654:	01712623          	sw	s7,12(sp)
    3658:	01812423          	sw	s8,8(sp)
    365c:	01912223          	sw	s9,4(sp)
    3660:	00b58793          	addi	a5,a1,11
    3664:	01600713          	li	a4,22
    3668:	00050913          	mv	s2,a0
    366c:	08f76e63          	bltu	a4,a5,3708 <_malloc_r+0xd8>
    3670:	01000793          	li	a5,16
    3674:	22b7e063          	bltu	a5,a1,3894 <_malloc_r+0x264>
    3678:	215000ef          	jal	ra,408c <__malloc_lock>
    367c:	01000493          	li	s1,16
    3680:	01800793          	li	a5,24
    3684:	00200593          	li	a1,2
    3688:	00005997          	auipc	s3,0x5
    368c:	95898993          	addi	s3,s3,-1704 # 7fe0 <__malloc_av_>
    3690:	00f987b3          	add	a5,s3,a5
    3694:	0047a403          	lw	s0,4(a5)
    3698:	ff878713          	addi	a4,a5,-8
    369c:	32e40263          	beq	s0,a4,39c0 <_malloc_r+0x390>
    36a0:	00442783          	lw	a5,4(s0)
    36a4:	00c42683          	lw	a3,12(s0)
    36a8:	00842603          	lw	a2,8(s0)
    36ac:	ffc7f793          	andi	a5,a5,-4
    36b0:	00f407b3          	add	a5,s0,a5
    36b4:	0047a703          	lw	a4,4(a5)
    36b8:	00d62623          	sw	a3,12(a2)
    36bc:	00c6a423          	sw	a2,8(a3)
    36c0:	00176713          	ori	a4,a4,1
    36c4:	00090513          	mv	a0,s2
    36c8:	00e7a223          	sw	a4,4(a5)
    36cc:	1cd000ef          	jal	ra,4098 <__malloc_unlock>
    36d0:	00840513          	addi	a0,s0,8
    36d4:	02c12083          	lw	ra,44(sp)
    36d8:	02812403          	lw	s0,40(sp)
    36dc:	02412483          	lw	s1,36(sp)
    36e0:	02012903          	lw	s2,32(sp)
    36e4:	01c12983          	lw	s3,28(sp)
    36e8:	01812a03          	lw	s4,24(sp)
    36ec:	01412a83          	lw	s5,20(sp)
    36f0:	01012b03          	lw	s6,16(sp)
    36f4:	00c12b83          	lw	s7,12(sp)
    36f8:	00812c03          	lw	s8,8(sp)
    36fc:	00412c83          	lw	s9,4(sp)
    3700:	03010113          	addi	sp,sp,48
    3704:	00008067          	ret
    3708:	ff87f493          	andi	s1,a5,-8
    370c:	1807c463          	bltz	a5,3894 <_malloc_r+0x264>
    3710:	18b4e263          	bltu	s1,a1,3894 <_malloc_r+0x264>
    3714:	179000ef          	jal	ra,408c <__malloc_lock>
    3718:	1f700793          	li	a5,503
    371c:	3a97fc63          	bgeu	a5,s1,3ad4 <_malloc_r+0x4a4>
    3720:	0094d793          	srli	a5,s1,0x9
    3724:	18078063          	beqz	a5,38a4 <_malloc_r+0x274>
    3728:	00400713          	li	a4,4
    372c:	30f76263          	bltu	a4,a5,3a30 <_malloc_r+0x400>
    3730:	0064d793          	srli	a5,s1,0x6
    3734:	03978593          	addi	a1,a5,57
    3738:	03878513          	addi	a0,a5,56
    373c:	00359693          	slli	a3,a1,0x3
    3740:	00005997          	auipc	s3,0x5
    3744:	8a098993          	addi	s3,s3,-1888 # 7fe0 <__malloc_av_>
    3748:	00d986b3          	add	a3,s3,a3
    374c:	0046a403          	lw	s0,4(a3)
    3750:	ff868693          	addi	a3,a3,-8
    3754:	02868663          	beq	a3,s0,3780 <_malloc_r+0x150>
    3758:	00f00613          	li	a2,15
    375c:	0100006f          	j	376c <_malloc_r+0x13c>
    3760:	24075a63          	bgez	a4,39b4 <_malloc_r+0x384>
    3764:	00c42403          	lw	s0,12(s0)
    3768:	00868c63          	beq	a3,s0,3780 <_malloc_r+0x150>
    376c:	00442783          	lw	a5,4(s0)
    3770:	ffc7f793          	andi	a5,a5,-4
    3774:	40978733          	sub	a4,a5,s1
    3778:	fee654e3          	bge	a2,a4,3760 <_malloc_r+0x130>
    377c:	00050593          	mv	a1,a0
    3780:	0109a403          	lw	s0,16(s3)
    3784:	00005897          	auipc	a7,0x5
    3788:	86488893          	addi	a7,a7,-1948 # 7fe8 <__malloc_av_+0x8>
    378c:	1f140c63          	beq	s0,a7,3984 <_malloc_r+0x354>
    3790:	00442783          	lw	a5,4(s0)
    3794:	00f00693          	li	a3,15
    3798:	ffc7f793          	andi	a5,a5,-4
    379c:	40978733          	sub	a4,a5,s1
    37a0:	34e6c063          	blt	a3,a4,3ae0 <_malloc_r+0x4b0>
    37a4:	0119aa23          	sw	a7,20(s3)
    37a8:	0119a823          	sw	a7,16(s3)
    37ac:	30075463          	bgez	a4,3ab4 <_malloc_r+0x484>
    37b0:	1ff00713          	li	a4,511
    37b4:	0049a503          	lw	a0,4(s3)
    37b8:	20f76c63          	bltu	a4,a5,39d0 <_malloc_r+0x3a0>
    37bc:	ff87f713          	andi	a4,a5,-8
    37c0:	00870713          	addi	a4,a4,8
    37c4:	00e98733          	add	a4,s3,a4
    37c8:	00072683          	lw	a3,0(a4)
    37cc:	0057d613          	srli	a2,a5,0x5
    37d0:	00100793          	li	a5,1
    37d4:	00c797b3          	sll	a5,a5,a2
    37d8:	00f56533          	or	a0,a0,a5
    37dc:	ff870793          	addi	a5,a4,-8
    37e0:	00f42623          	sw	a5,12(s0)
    37e4:	00d42423          	sw	a3,8(s0)
    37e8:	00a9a223          	sw	a0,4(s3)
    37ec:	00872023          	sw	s0,0(a4)
    37f0:	0086a623          	sw	s0,12(a3)
    37f4:	4025d793          	srai	a5,a1,0x2
    37f8:	00100613          	li	a2,1
    37fc:	00f61633          	sll	a2,a2,a5
    3800:	0ac56a63          	bltu	a0,a2,38b4 <_malloc_r+0x284>
    3804:	00a677b3          	and	a5,a2,a0
    3808:	02079463          	bnez	a5,3830 <_malloc_r+0x200>
    380c:	00161613          	slli	a2,a2,0x1
    3810:	ffc5f593          	andi	a1,a1,-4
    3814:	00a677b3          	and	a5,a2,a0
    3818:	00458593          	addi	a1,a1,4
    381c:	00079a63          	bnez	a5,3830 <_malloc_r+0x200>
    3820:	00161613          	slli	a2,a2,0x1
    3824:	00a677b3          	and	a5,a2,a0
    3828:	00458593          	addi	a1,a1,4
    382c:	fe078ae3          	beqz	a5,3820 <_malloc_r+0x1f0>
    3830:	00f00813          	li	a6,15
    3834:	00359313          	slli	t1,a1,0x3
    3838:	00698333          	add	t1,s3,t1
    383c:	00030513          	mv	a0,t1
    3840:	00c52783          	lw	a5,12(a0)
    3844:	00058e13          	mv	t3,a1
    3848:	20f50663          	beq	a0,a5,3a54 <_malloc_r+0x424>
    384c:	0047a703          	lw	a4,4(a5)
    3850:	00078413          	mv	s0,a5
    3854:	00c7a783          	lw	a5,12(a5)
    3858:	ffc77713          	andi	a4,a4,-4
    385c:	409706b3          	sub	a3,a4,s1
    3860:	20d84663          	blt	a6,a3,3a6c <_malloc_r+0x43c>
    3864:	fe06c2e3          	bltz	a3,3848 <_malloc_r+0x218>
    3868:	00e40733          	add	a4,s0,a4
    386c:	00472683          	lw	a3,4(a4)
    3870:	00842603          	lw	a2,8(s0)
    3874:	00090513          	mv	a0,s2
    3878:	0016e693          	ori	a3,a3,1
    387c:	00d72223          	sw	a3,4(a4)
    3880:	00f62623          	sw	a5,12(a2)
    3884:	00c7a423          	sw	a2,8(a5)
    3888:	011000ef          	jal	ra,4098 <__malloc_unlock>
    388c:	00840513          	addi	a0,s0,8
    3890:	e45ff06f          	j	36d4 <_malloc_r+0xa4>
    3894:	00c00793          	li	a5,12
    3898:	00f92023          	sw	a5,0(s2)
    389c:	00000513          	li	a0,0
    38a0:	e35ff06f          	j	36d4 <_malloc_r+0xa4>
    38a4:	20000693          	li	a3,512
    38a8:	04000593          	li	a1,64
    38ac:	03f00513          	li	a0,63
    38b0:	e91ff06f          	j	3740 <_malloc_r+0x110>
    38b4:	0089a403          	lw	s0,8(s3)
    38b8:	00442783          	lw	a5,4(s0)
    38bc:	ffc7fb13          	andi	s6,a5,-4
    38c0:	009b6863          	bltu	s6,s1,38d0 <_malloc_r+0x2a0>
    38c4:	409b0733          	sub	a4,s6,s1
    38c8:	00f00793          	li	a5,15
    38cc:	0ce7c063          	blt	a5,a4,398c <_malloc_r+0x35c>
    38d0:	82818c93          	addi	s9,gp,-2008 # 8410 <__malloc_sbrk_base>
    38d4:	000ca703          	lw	a4,0(s9)
    38d8:	00006a97          	auipc	s5,0x6
    38dc:	618aaa83          	lw	s5,1560(s5) # 9ef0 <__malloc_top_pad>
    38e0:	fff00793          	li	a5,-1
    38e4:	01640a33          	add	s4,s0,s6
    38e8:	01548ab3          	add	s5,s1,s5
    38ec:	3cf70063          	beq	a4,a5,3cac <_malloc_r+0x67c>
    38f0:	000017b7          	lui	a5,0x1
    38f4:	00f78793          	addi	a5,a5,15 # 100f <altera_avalon_jtag_uart_write+0xeb>
    38f8:	00fa8ab3          	add	s5,s5,a5
    38fc:	fffff7b7          	lui	a5,0xfffff
    3900:	00fafab3          	and	s5,s5,a5
    3904:	000a8593          	mv	a1,s5
    3908:	00090513          	mv	a0,s2
    390c:	555000ef          	jal	ra,4660 <_sbrk_r>
    3910:	fff00793          	li	a5,-1
    3914:	00050b93          	mv	s7,a0
    3918:	20f50e63          	beq	a0,a5,3b34 <_malloc_r+0x504>
    391c:	21456a63          	bltu	a0,s4,3b30 <_malloc_r+0x500>
    3920:	00006c17          	auipc	s8,0x6
    3924:	658c0c13          	addi	s8,s8,1624 # 9f78 <__malloc_current_mallinfo>
    3928:	000c2583          	lw	a1,0(s8)
    392c:	00ba85b3          	add	a1,s5,a1
    3930:	00bc2023          	sw	a1,0(s8)
    3934:	00058713          	mv	a4,a1
    3938:	2aaa1063          	bne	s4,a0,3bd8 <_malloc_r+0x5a8>
    393c:	01451793          	slli	a5,a0,0x14
    3940:	28079c63          	bnez	a5,3bd8 <_malloc_r+0x5a8>
    3944:	0089ab83          	lw	s7,8(s3)
    3948:	015b07b3          	add	a5,s6,s5
    394c:	0017e793          	ori	a5,a5,1
    3950:	00fba223          	sw	a5,4(s7)
    3954:	00006717          	auipc	a4,0x6
    3958:	59870713          	addi	a4,a4,1432 # 9eec <__malloc_max_sbrked_mem>
    395c:	00072683          	lw	a3,0(a4)
    3960:	00b6f463          	bgeu	a3,a1,3968 <_malloc_r+0x338>
    3964:	00b72023          	sw	a1,0(a4)
    3968:	00006717          	auipc	a4,0x6
    396c:	58070713          	addi	a4,a4,1408 # 9ee8 <__malloc_max_total_mem>
    3970:	00072683          	lw	a3,0(a4)
    3974:	00b6f463          	bgeu	a3,a1,397c <_malloc_r+0x34c>
    3978:	00b72023          	sw	a1,0(a4)
    397c:	000b8413          	mv	s0,s7
    3980:	1bc0006f          	j	3b3c <_malloc_r+0x50c>
    3984:	0049a503          	lw	a0,4(s3)
    3988:	e6dff06f          	j	37f4 <_malloc_r+0x1c4>
    398c:	0014e793          	ori	a5,s1,1
    3990:	00f42223          	sw	a5,4(s0)
    3994:	009404b3          	add	s1,s0,s1
    3998:	0099a423          	sw	s1,8(s3)
    399c:	00176713          	ori	a4,a4,1
    39a0:	00090513          	mv	a0,s2
    39a4:	00e4a223          	sw	a4,4(s1)
    39a8:	6f0000ef          	jal	ra,4098 <__malloc_unlock>
    39ac:	00840513          	addi	a0,s0,8
    39b0:	d25ff06f          	j	36d4 <_malloc_r+0xa4>
    39b4:	00c42683          	lw	a3,12(s0)
    39b8:	00842603          	lw	a2,8(s0)
    39bc:	cf5ff06f          	j	36b0 <_malloc_r+0x80>
    39c0:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfffef00c>
    39c4:	00258593          	addi	a1,a1,2
    39c8:	da878ce3          	beq	a5,s0,3780 <_malloc_r+0x150>
    39cc:	cd5ff06f          	j	36a0 <_malloc_r+0x70>
    39d0:	0097d713          	srli	a4,a5,0x9
    39d4:	00400693          	li	a3,4
    39d8:	14e6f263          	bgeu	a3,a4,3b1c <_malloc_r+0x4ec>
    39dc:	01400693          	li	a3,20
    39e0:	30e6ec63          	bltu	a3,a4,3cf8 <_malloc_r+0x6c8>
    39e4:	05c70613          	addi	a2,a4,92
    39e8:	05b70693          	addi	a3,a4,91
    39ec:	00361613          	slli	a2,a2,0x3
    39f0:	00c98633          	add	a2,s3,a2
    39f4:	00062703          	lw	a4,0(a2)
    39f8:	ff860613          	addi	a2,a2,-8
    39fc:	00e61863          	bne	a2,a4,3a0c <_malloc_r+0x3dc>
    3a00:	2b40006f          	j	3cb4 <_malloc_r+0x684>
    3a04:	00872703          	lw	a4,8(a4)
    3a08:	00e60863          	beq	a2,a4,3a18 <_malloc_r+0x3e8>
    3a0c:	00472683          	lw	a3,4(a4)
    3a10:	ffc6f693          	andi	a3,a3,-4
    3a14:	fed7e8e3          	bltu	a5,a3,3a04 <_malloc_r+0x3d4>
    3a18:	00c72603          	lw	a2,12(a4)
    3a1c:	00c42623          	sw	a2,12(s0)
    3a20:	00e42423          	sw	a4,8(s0)
    3a24:	00862423          	sw	s0,8(a2)
    3a28:	00872623          	sw	s0,12(a4)
    3a2c:	dc9ff06f          	j	37f4 <_malloc_r+0x1c4>
    3a30:	01400713          	li	a4,20
    3a34:	12f77663          	bgeu	a4,a5,3b60 <_malloc_r+0x530>
    3a38:	05400713          	li	a4,84
    3a3c:	2cf76c63          	bltu	a4,a5,3d14 <_malloc_r+0x6e4>
    3a40:	00c4d793          	srli	a5,s1,0xc
    3a44:	06f78593          	addi	a1,a5,111
    3a48:	06e78513          	addi	a0,a5,110
    3a4c:	00359693          	slli	a3,a1,0x3
    3a50:	cf1ff06f          	j	3740 <_malloc_r+0x110>
    3a54:	001e0e13          	addi	t3,t3,1
    3a58:	003e7793          	andi	a5,t3,3
    3a5c:	00850513          	addi	a0,a0,8
    3a60:	10078e63          	beqz	a5,3b7c <_malloc_r+0x54c>
    3a64:	00c52783          	lw	a5,12(a0)
    3a68:	de1ff06f          	j	3848 <_malloc_r+0x218>
    3a6c:	00842603          	lw	a2,8(s0)
    3a70:	0014e593          	ori	a1,s1,1
    3a74:	00b42223          	sw	a1,4(s0)
    3a78:	00f62623          	sw	a5,12(a2)
    3a7c:	00c7a423          	sw	a2,8(a5)
    3a80:	009404b3          	add	s1,s0,s1
    3a84:	0099aa23          	sw	s1,20(s3)
    3a88:	0099a823          	sw	s1,16(s3)
    3a8c:	0016e793          	ori	a5,a3,1
    3a90:	0114a623          	sw	a7,12(s1)
    3a94:	0114a423          	sw	a7,8(s1)
    3a98:	00f4a223          	sw	a5,4(s1)
    3a9c:	00e40733          	add	a4,s0,a4
    3aa0:	00090513          	mv	a0,s2
    3aa4:	00d72023          	sw	a3,0(a4)
    3aa8:	5f0000ef          	jal	ra,4098 <__malloc_unlock>
    3aac:	00840513          	addi	a0,s0,8
    3ab0:	c25ff06f          	j	36d4 <_malloc_r+0xa4>
    3ab4:	00f407b3          	add	a5,s0,a5
    3ab8:	0047a703          	lw	a4,4(a5)
    3abc:	00090513          	mv	a0,s2
    3ac0:	00176713          	ori	a4,a4,1
    3ac4:	00e7a223          	sw	a4,4(a5)
    3ac8:	5d0000ef          	jal	ra,4098 <__malloc_unlock>
    3acc:	00840513          	addi	a0,s0,8
    3ad0:	c05ff06f          	j	36d4 <_malloc_r+0xa4>
    3ad4:	0034d593          	srli	a1,s1,0x3
    3ad8:	00848793          	addi	a5,s1,8
    3adc:	badff06f          	j	3688 <_malloc_r+0x58>
    3ae0:	0014e693          	ori	a3,s1,1
    3ae4:	00d42223          	sw	a3,4(s0)
    3ae8:	009404b3          	add	s1,s0,s1
    3aec:	0099aa23          	sw	s1,20(s3)
    3af0:	0099a823          	sw	s1,16(s3)
    3af4:	00176693          	ori	a3,a4,1
    3af8:	0114a623          	sw	a7,12(s1)
    3afc:	0114a423          	sw	a7,8(s1)
    3b00:	00d4a223          	sw	a3,4(s1)
    3b04:	00f407b3          	add	a5,s0,a5
    3b08:	00090513          	mv	a0,s2
    3b0c:	00e7a023          	sw	a4,0(a5)
    3b10:	588000ef          	jal	ra,4098 <__malloc_unlock>
    3b14:	00840513          	addi	a0,s0,8
    3b18:	bbdff06f          	j	36d4 <_malloc_r+0xa4>
    3b1c:	0067d713          	srli	a4,a5,0x6
    3b20:	03970613          	addi	a2,a4,57
    3b24:	03870693          	addi	a3,a4,56
    3b28:	00361613          	slli	a2,a2,0x3
    3b2c:	ec5ff06f          	j	39f0 <_malloc_r+0x3c0>
    3b30:	09340a63          	beq	s0,s3,3bc4 <_malloc_r+0x594>
    3b34:	0089a403          	lw	s0,8(s3)
    3b38:	00442783          	lw	a5,4(s0)
    3b3c:	ffc7f793          	andi	a5,a5,-4
    3b40:	40978733          	sub	a4,a5,s1
    3b44:	0097e663          	bltu	a5,s1,3b50 <_malloc_r+0x520>
    3b48:	00f00793          	li	a5,15
    3b4c:	e4e7c0e3          	blt	a5,a4,398c <_malloc_r+0x35c>
    3b50:	00090513          	mv	a0,s2
    3b54:	544000ef          	jal	ra,4098 <__malloc_unlock>
    3b58:	00000513          	li	a0,0
    3b5c:	b79ff06f          	j	36d4 <_malloc_r+0xa4>
    3b60:	05c78593          	addi	a1,a5,92
    3b64:	05b78513          	addi	a0,a5,91
    3b68:	00359693          	slli	a3,a1,0x3
    3b6c:	bd5ff06f          	j	3740 <_malloc_r+0x110>
    3b70:	00832783          	lw	a5,8(t1)
    3b74:	fff58593          	addi	a1,a1,-1
    3b78:	24679863          	bne	a5,t1,3dc8 <_malloc_r+0x798>
    3b7c:	0035f793          	andi	a5,a1,3
    3b80:	ff830313          	addi	t1,t1,-8
    3b84:	fe0796e3          	bnez	a5,3b70 <_malloc_r+0x540>
    3b88:	0049a703          	lw	a4,4(s3)
    3b8c:	fff64793          	not	a5,a2
    3b90:	00e7f7b3          	and	a5,a5,a4
    3b94:	00f9a223          	sw	a5,4(s3)
    3b98:	00161613          	slli	a2,a2,0x1
    3b9c:	d0c7ece3          	bltu	a5,a2,38b4 <_malloc_r+0x284>
    3ba0:	d0060ae3          	beqz	a2,38b4 <_malloc_r+0x284>
    3ba4:	00f67733          	and	a4,a2,a5
    3ba8:	00071a63          	bnez	a4,3bbc <_malloc_r+0x58c>
    3bac:	00161613          	slli	a2,a2,0x1
    3bb0:	00f67733          	and	a4,a2,a5
    3bb4:	004e0e13          	addi	t3,t3,4
    3bb8:	fe070ae3          	beqz	a4,3bac <_malloc_r+0x57c>
    3bbc:	000e0593          	mv	a1,t3
    3bc0:	c75ff06f          	j	3834 <_malloc_r+0x204>
    3bc4:	00006c17          	auipc	s8,0x6
    3bc8:	3b4c0c13          	addi	s8,s8,948 # 9f78 <__malloc_current_mallinfo>
    3bcc:	000c2703          	lw	a4,0(s8)
    3bd0:	00ea8733          	add	a4,s5,a4
    3bd4:	00ec2023          	sw	a4,0(s8)
    3bd8:	000ca683          	lw	a3,0(s9)
    3bdc:	fff00793          	li	a5,-1
    3be0:	14f68863          	beq	a3,a5,3d30 <_malloc_r+0x700>
    3be4:	414b87b3          	sub	a5,s7,s4
    3be8:	00e787b3          	add	a5,a5,a4
    3bec:	00fc2023          	sw	a5,0(s8)
    3bf0:	007bfc93          	andi	s9,s7,7
    3bf4:	0c0c8c63          	beqz	s9,3ccc <_malloc_r+0x69c>
    3bf8:	00001737          	lui	a4,0x1
    3bfc:	419b8bb3          	sub	s7,s7,s9
    3c00:	00870593          	addi	a1,a4,8 # 1008 <altera_avalon_jtag_uart_write+0xe4>
    3c04:	008b8b93          	addi	s7,s7,8
    3c08:	419585b3          	sub	a1,a1,s9
    3c0c:	015b8ab3          	add	s5,s7,s5
    3c10:	415585b3          	sub	a1,a1,s5
    3c14:	fff70713          	addi	a4,a4,-1
    3c18:	00e5fa33          	and	s4,a1,a4
    3c1c:	000a0593          	mv	a1,s4
    3c20:	00090513          	mv	a0,s2
    3c24:	23d000ef          	jal	ra,4660 <_sbrk_r>
    3c28:	fff00793          	li	a5,-1
    3c2c:	14f50863          	beq	a0,a5,3d7c <_malloc_r+0x74c>
    3c30:	41750533          	sub	a0,a0,s7
    3c34:	01450ab3          	add	s5,a0,s4
    3c38:	000c2703          	lw	a4,0(s8)
    3c3c:	0179a423          	sw	s7,8(s3)
    3c40:	001ae793          	ori	a5,s5,1
    3c44:	00ea05b3          	add	a1,s4,a4
    3c48:	00bc2023          	sw	a1,0(s8)
    3c4c:	00fba223          	sw	a5,4(s7)
    3c50:	d13402e3          	beq	s0,s3,3954 <_malloc_r+0x324>
    3c54:	00f00693          	li	a3,15
    3c58:	0f66f063          	bgeu	a3,s6,3d38 <_malloc_r+0x708>
    3c5c:	00442703          	lw	a4,4(s0)
    3c60:	ff4b0793          	addi	a5,s6,-12
    3c64:	ff87f793          	andi	a5,a5,-8
    3c68:	00177713          	andi	a4,a4,1
    3c6c:	00f76733          	or	a4,a4,a5
    3c70:	00e42223          	sw	a4,4(s0)
    3c74:	00500613          	li	a2,5
    3c78:	00f40733          	add	a4,s0,a5
    3c7c:	00c72223          	sw	a2,4(a4)
    3c80:	00c72423          	sw	a2,8(a4)
    3c84:	00f6e663          	bltu	a3,a5,3c90 <_malloc_r+0x660>
    3c88:	004ba783          	lw	a5,4(s7)
    3c8c:	cc9ff06f          	j	3954 <_malloc_r+0x324>
    3c90:	00840593          	addi	a1,s0,8
    3c94:	00090513          	mv	a0,s2
    3c98:	86cff0ef          	jal	ra,2d04 <_free_r>
    3c9c:	0089ab83          	lw	s7,8(s3)
    3ca0:	000c2583          	lw	a1,0(s8)
    3ca4:	004ba783          	lw	a5,4(s7)
    3ca8:	cadff06f          	j	3954 <_malloc_r+0x324>
    3cac:	010a8a93          	addi	s5,s5,16
    3cb0:	c55ff06f          	j	3904 <_malloc_r+0x2d4>
    3cb4:	4026d693          	srai	a3,a3,0x2
    3cb8:	00100793          	li	a5,1
    3cbc:	00d797b3          	sll	a5,a5,a3
    3cc0:	00f56533          	or	a0,a0,a5
    3cc4:	00a9a223          	sw	a0,4(s3)
    3cc8:	d55ff06f          	j	3a1c <_malloc_r+0x3ec>
    3ccc:	015b85b3          	add	a1,s7,s5
    3cd0:	40b005b3          	neg	a1,a1
    3cd4:	01459593          	slli	a1,a1,0x14
    3cd8:	0145da13          	srli	s4,a1,0x14
    3cdc:	000a0593          	mv	a1,s4
    3ce0:	00090513          	mv	a0,s2
    3ce4:	17d000ef          	jal	ra,4660 <_sbrk_r>
    3ce8:	fff00793          	li	a5,-1
    3cec:	f4f512e3          	bne	a0,a5,3c30 <_malloc_r+0x600>
    3cf0:	00000a13          	li	s4,0
    3cf4:	f45ff06f          	j	3c38 <_malloc_r+0x608>
    3cf8:	05400693          	li	a3,84
    3cfc:	04e6e463          	bltu	a3,a4,3d44 <_malloc_r+0x714>
    3d00:	00c7d713          	srli	a4,a5,0xc
    3d04:	06f70613          	addi	a2,a4,111
    3d08:	06e70693          	addi	a3,a4,110
    3d0c:	00361613          	slli	a2,a2,0x3
    3d10:	ce1ff06f          	j	39f0 <_malloc_r+0x3c0>
    3d14:	15400713          	li	a4,340
    3d18:	04f76463          	bltu	a4,a5,3d60 <_malloc_r+0x730>
    3d1c:	00f4d793          	srli	a5,s1,0xf
    3d20:	07878593          	addi	a1,a5,120
    3d24:	07778513          	addi	a0,a5,119
    3d28:	00359693          	slli	a3,a1,0x3
    3d2c:	a15ff06f          	j	3740 <_malloc_r+0x110>
    3d30:	017ca023          	sw	s7,0(s9)
    3d34:	ebdff06f          	j	3bf0 <_malloc_r+0x5c0>
    3d38:	00100793          	li	a5,1
    3d3c:	00fba223          	sw	a5,4(s7)
    3d40:	e11ff06f          	j	3b50 <_malloc_r+0x520>
    3d44:	15400693          	li	a3,340
    3d48:	04e6e463          	bltu	a3,a4,3d90 <_malloc_r+0x760>
    3d4c:	00f7d713          	srli	a4,a5,0xf
    3d50:	07870613          	addi	a2,a4,120
    3d54:	07770693          	addi	a3,a4,119
    3d58:	00361613          	slli	a2,a2,0x3
    3d5c:	c95ff06f          	j	39f0 <_malloc_r+0x3c0>
    3d60:	55400713          	li	a4,1364
    3d64:	04f76463          	bltu	a4,a5,3dac <_malloc_r+0x77c>
    3d68:	0124d793          	srli	a5,s1,0x12
    3d6c:	07d78593          	addi	a1,a5,125
    3d70:	07c78513          	addi	a0,a5,124
    3d74:	00359693          	slli	a3,a1,0x3
    3d78:	9c9ff06f          	j	3740 <_malloc_r+0x110>
    3d7c:	ff8c8c93          	addi	s9,s9,-8
    3d80:	019a8ab3          	add	s5,s5,s9
    3d84:	417a8ab3          	sub	s5,s5,s7
    3d88:	00000a13          	li	s4,0
    3d8c:	eadff06f          	j	3c38 <_malloc_r+0x608>
    3d90:	55400693          	li	a3,1364
    3d94:	02e6e463          	bltu	a3,a4,3dbc <_malloc_r+0x78c>
    3d98:	0127d713          	srli	a4,a5,0x12
    3d9c:	07d70613          	addi	a2,a4,125
    3da0:	07c70693          	addi	a3,a4,124
    3da4:	00361613          	slli	a2,a2,0x3
    3da8:	c49ff06f          	j	39f0 <_malloc_r+0x3c0>
    3dac:	3f800693          	li	a3,1016
    3db0:	07f00593          	li	a1,127
    3db4:	07e00513          	li	a0,126
    3db8:	989ff06f          	j	3740 <_malloc_r+0x110>
    3dbc:	3f800613          	li	a2,1016
    3dc0:	07e00693          	li	a3,126
    3dc4:	c2dff06f          	j	39f0 <_malloc_r+0x3c0>
    3dc8:	0049a783          	lw	a5,4(s3)
    3dcc:	dcdff06f          	j	3b98 <_malloc_r+0x568>

00003dd0 <memchr>:
    3dd0:	00357793          	andi	a5,a0,3
    3dd4:	0ff5f693          	zext.b	a3,a1
    3dd8:	02078e63          	beqz	a5,3e14 <memchr+0x44>
    3ddc:	fff60793          	addi	a5,a2,-1
    3de0:	02060663          	beqz	a2,3e0c <memchr+0x3c>
    3de4:	fff00613          	li	a2,-1
    3de8:	0180006f          	j	3e00 <memchr+0x30>
    3dec:	00150513          	addi	a0,a0,1
    3df0:	00357713          	andi	a4,a0,3
    3df4:	02070263          	beqz	a4,3e18 <memchr+0x48>
    3df8:	fff78793          	addi	a5,a5,-1
    3dfc:	00c78863          	beq	a5,a2,3e0c <memchr+0x3c>
    3e00:	00054703          	lbu	a4,0(a0)
    3e04:	fed714e3          	bne	a4,a3,3dec <memchr+0x1c>
    3e08:	00008067          	ret
    3e0c:	00000513          	li	a0,0
    3e10:	00008067          	ret
    3e14:	00060793          	mv	a5,a2
    3e18:	00300713          	li	a4,3
    3e1c:	04f77c63          	bgeu	a4,a5,3e74 <memchr+0xa4>
    3e20:	0ff5f593          	zext.b	a1,a1
    3e24:	00859713          	slli	a4,a1,0x8
    3e28:	00b705b3          	add	a1,a4,a1
    3e2c:	01059713          	slli	a4,a1,0x10
    3e30:	feff08b7          	lui	a7,0xfeff0
    3e34:	80808837          	lui	a6,0x80808
    3e38:	00e585b3          	add	a1,a1,a4
    3e3c:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfefdfeff>
    3e40:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x807f8080>
    3e44:	00300313          	li	t1,3
    3e48:	0100006f          	j	3e58 <memchr+0x88>
    3e4c:	ffc78793          	addi	a5,a5,-4
    3e50:	00450513          	addi	a0,a0,4
    3e54:	02f37063          	bgeu	t1,a5,3e74 <memchr+0xa4>
    3e58:	00052703          	lw	a4,0(a0)
    3e5c:	00e5c733          	xor	a4,a1,a4
    3e60:	01170633          	add	a2,a4,a7
    3e64:	fff74713          	not	a4,a4
    3e68:	00e67733          	and	a4,a2,a4
    3e6c:	01077733          	and	a4,a4,a6
    3e70:	fc070ee3          	beqz	a4,3e4c <memchr+0x7c>
    3e74:	00f50733          	add	a4,a0,a5
    3e78:	00079863          	bnez	a5,3e88 <memchr+0xb8>
    3e7c:	f91ff06f          	j	3e0c <memchr+0x3c>
    3e80:	00150513          	addi	a0,a0,1
    3e84:	f8a704e3          	beq	a4,a0,3e0c <memchr+0x3c>
    3e88:	00054783          	lbu	a5,0(a0)
    3e8c:	fed79ae3          	bne	a5,a3,3e80 <memchr+0xb0>
    3e90:	00008067          	ret

00003e94 <memmove>:
    3e94:	02a5f663          	bgeu	a1,a0,3ec0 <memmove+0x2c>
    3e98:	00c58733          	add	a4,a1,a2
    3e9c:	02e57263          	bgeu	a0,a4,3ec0 <memmove+0x2c>
    3ea0:	00c507b3          	add	a5,a0,a2
    3ea4:	04060663          	beqz	a2,3ef0 <memmove+0x5c>
    3ea8:	fff74683          	lbu	a3,-1(a4)
    3eac:	fff78793          	addi	a5,a5,-1
    3eb0:	fff70713          	addi	a4,a4,-1
    3eb4:	00d78023          	sb	a3,0(a5)
    3eb8:	fef518e3          	bne	a0,a5,3ea8 <memmove+0x14>
    3ebc:	00008067          	ret
    3ec0:	00f00793          	li	a5,15
    3ec4:	02c7e863          	bltu	a5,a2,3ef4 <memmove+0x60>
    3ec8:	00050793          	mv	a5,a0
    3ecc:	fff60693          	addi	a3,a2,-1
    3ed0:	0c060a63          	beqz	a2,3fa4 <memmove+0x110>
    3ed4:	00168693          	addi	a3,a3,1
    3ed8:	00d786b3          	add	a3,a5,a3
    3edc:	0005c703          	lbu	a4,0(a1)
    3ee0:	00178793          	addi	a5,a5,1
    3ee4:	00158593          	addi	a1,a1,1
    3ee8:	fee78fa3          	sb	a4,-1(a5)
    3eec:	fed798e3          	bne	a5,a3,3edc <memmove+0x48>
    3ef0:	00008067          	ret
    3ef4:	00b567b3          	or	a5,a0,a1
    3ef8:	0037f793          	andi	a5,a5,3
    3efc:	08079e63          	bnez	a5,3f98 <memmove+0x104>
    3f00:	ff060893          	addi	a7,a2,-16
    3f04:	ff08f893          	andi	a7,a7,-16
    3f08:	01088893          	addi	a7,a7,16
    3f0c:	011507b3          	add	a5,a0,a7
    3f10:	00058693          	mv	a3,a1
    3f14:	00050713          	mv	a4,a0
    3f18:	0006a803          	lw	a6,0(a3)
    3f1c:	01068693          	addi	a3,a3,16
    3f20:	01070713          	addi	a4,a4,16
    3f24:	ff072823          	sw	a6,-16(a4)
    3f28:	ff46a803          	lw	a6,-12(a3)
    3f2c:	ff072a23          	sw	a6,-12(a4)
    3f30:	ff86a803          	lw	a6,-8(a3)
    3f34:	ff072c23          	sw	a6,-8(a4)
    3f38:	ffc6a803          	lw	a6,-4(a3)
    3f3c:	ff072e23          	sw	a6,-4(a4)
    3f40:	fcf71ce3          	bne	a4,a5,3f18 <memmove+0x84>
    3f44:	00c67713          	andi	a4,a2,12
    3f48:	011585b3          	add	a1,a1,a7
    3f4c:	00f67813          	andi	a6,a2,15
    3f50:	04070c63          	beqz	a4,3fa8 <memmove+0x114>
    3f54:	00058693          	mv	a3,a1
    3f58:	00078713          	mv	a4,a5
    3f5c:	01078eb3          	add	t4,a5,a6
    3f60:	00300e13          	li	t3,3
    3f64:	0006a303          	lw	t1,0(a3)
    3f68:	00470713          	addi	a4,a4,4
    3f6c:	40ee88b3          	sub	a7,t4,a4
    3f70:	fe672e23          	sw	t1,-4(a4)
    3f74:	00468693          	addi	a3,a3,4
    3f78:	ff1e66e3          	bltu	t3,a7,3f64 <memmove+0xd0>
    3f7c:	ffc80713          	addi	a4,a6,-4
    3f80:	ffc77713          	andi	a4,a4,-4
    3f84:	00470713          	addi	a4,a4,4
    3f88:	00367613          	andi	a2,a2,3
    3f8c:	00e787b3          	add	a5,a5,a4
    3f90:	00e585b3          	add	a1,a1,a4
    3f94:	f39ff06f          	j	3ecc <memmove+0x38>
    3f98:	fff60693          	addi	a3,a2,-1
    3f9c:	00050793          	mv	a5,a0
    3fa0:	f35ff06f          	j	3ed4 <memmove+0x40>
    3fa4:	00008067          	ret
    3fa8:	00080613          	mv	a2,a6
    3fac:	f21ff06f          	j	3ecc <memmove+0x38>

00003fb0 <memset>:
    3fb0:	00f00313          	li	t1,15
    3fb4:	00050713          	mv	a4,a0
    3fb8:	02c37e63          	bgeu	t1,a2,3ff4 <memset+0x44>
    3fbc:	00f77793          	andi	a5,a4,15
    3fc0:	0a079063          	bnez	a5,4060 <memset+0xb0>
    3fc4:	08059263          	bnez	a1,4048 <memset+0x98>
    3fc8:	ff067693          	andi	a3,a2,-16
    3fcc:	00f67613          	andi	a2,a2,15
    3fd0:	00e686b3          	add	a3,a3,a4
    3fd4:	00b72023          	sw	a1,0(a4)
    3fd8:	00b72223          	sw	a1,4(a4)
    3fdc:	00b72423          	sw	a1,8(a4)
    3fe0:	00b72623          	sw	a1,12(a4)
    3fe4:	01070713          	addi	a4,a4,16
    3fe8:	fed766e3          	bltu	a4,a3,3fd4 <memset+0x24>
    3fec:	00061463          	bnez	a2,3ff4 <memset+0x44>
    3ff0:	00008067          	ret
    3ff4:	40c306b3          	sub	a3,t1,a2
    3ff8:	00269693          	slli	a3,a3,0x2
    3ffc:	00000297          	auipc	t0,0x0
    4000:	005686b3          	add	a3,a3,t0
    4004:	00c68067          	jr	12(a3)
    4008:	00b70723          	sb	a1,14(a4)
    400c:	00b706a3          	sb	a1,13(a4)
    4010:	00b70623          	sb	a1,12(a4)
    4014:	00b705a3          	sb	a1,11(a4)
    4018:	00b70523          	sb	a1,10(a4)
    401c:	00b704a3          	sb	a1,9(a4)
    4020:	00b70423          	sb	a1,8(a4)
    4024:	00b703a3          	sb	a1,7(a4)
    4028:	00b70323          	sb	a1,6(a4)
    402c:	00b702a3          	sb	a1,5(a4)
    4030:	00b70223          	sb	a1,4(a4)
    4034:	00b701a3          	sb	a1,3(a4)
    4038:	00b70123          	sb	a1,2(a4)
    403c:	00b700a3          	sb	a1,1(a4)
    4040:	00b70023          	sb	a1,0(a4)
    4044:	00008067          	ret
    4048:	0ff5f593          	zext.b	a1,a1
    404c:	00859693          	slli	a3,a1,0x8
    4050:	00d5e5b3          	or	a1,a1,a3
    4054:	01059693          	slli	a3,a1,0x10
    4058:	00d5e5b3          	or	a1,a1,a3
    405c:	f6dff06f          	j	3fc8 <memset+0x18>
    4060:	00279693          	slli	a3,a5,0x2
    4064:	00000297          	auipc	t0,0x0
    4068:	005686b3          	add	a3,a3,t0
    406c:	00008293          	mv	t0,ra
    4070:	fa0680e7          	jalr	-96(a3)
    4074:	00028093          	mv	ra,t0
    4078:	ff078793          	addi	a5,a5,-16
    407c:	40f70733          	sub	a4,a4,a5
    4080:	00f60633          	add	a2,a2,a5
    4084:	f6c378e3          	bgeu	t1,a2,3ff4 <memset+0x44>
    4088:	f3dff06f          	j	3fc4 <memset+0x14>

0000408c <__malloc_lock>:
    408c:	00006517          	auipc	a0,0x6
    4090:	e4850513          	addi	a0,a0,-440 # 9ed4 <__lock___malloc_recursive_mutex>
    4094:	d80ff06f          	j	3614 <__retarget_lock_acquire_recursive>

00004098 <__malloc_unlock>:
    4098:	00006517          	auipc	a0,0x6
    409c:	e3c50513          	addi	a0,a0,-452 # 9ed4 <__lock___malloc_recursive_mutex>
    40a0:	d8cff06f          	j	362c <__retarget_lock_release_recursive>

000040a4 <_open_r>:
    40a4:	ff010113          	addi	sp,sp,-16
    40a8:	00058713          	mv	a4,a1
    40ac:	00812423          	sw	s0,8(sp)
    40b0:	00060593          	mv	a1,a2
    40b4:	00050413          	mv	s0,a0
    40b8:	00068613          	mv	a2,a3
    40bc:	00070513          	mv	a0,a4
    40c0:	00006797          	auipc	a5,0x6
    40c4:	e007a023          	sw	zero,-512(a5) # 9ec0 <errno>
    40c8:	00112623          	sw	ra,12(sp)
    40cc:	08d010ef          	jal	ra,5958 <_open>
    40d0:	fff00793          	li	a5,-1
    40d4:	00f50a63          	beq	a0,a5,40e8 <_open_r+0x44>
    40d8:	00c12083          	lw	ra,12(sp)
    40dc:	00812403          	lw	s0,8(sp)
    40e0:	01010113          	addi	sp,sp,16
    40e4:	00008067          	ret
    40e8:	00006797          	auipc	a5,0x6
    40ec:	dd87a783          	lw	a5,-552(a5) # 9ec0 <errno>
    40f0:	fe0784e3          	beqz	a5,40d8 <_open_r+0x34>
    40f4:	00c12083          	lw	ra,12(sp)
    40f8:	00f42023          	sw	a5,0(s0)
    40fc:	00812403          	lw	s0,8(sp)
    4100:	01010113          	addi	sp,sp,16
    4104:	00008067          	ret

00004108 <_realloc_r>:
    4108:	fd010113          	addi	sp,sp,-48
    410c:	02912223          	sw	s1,36(sp)
    4110:	02112623          	sw	ra,44(sp)
    4114:	02812423          	sw	s0,40(sp)
    4118:	03212023          	sw	s2,32(sp)
    411c:	01312e23          	sw	s3,28(sp)
    4120:	01412c23          	sw	s4,24(sp)
    4124:	01512a23          	sw	s5,20(sp)
    4128:	01612823          	sw	s6,16(sp)
    412c:	01712623          	sw	s7,12(sp)
    4130:	01812423          	sw	s8,8(sp)
    4134:	00060493          	mv	s1,a2
    4138:	1c058263          	beqz	a1,42fc <_realloc_r+0x1f4>
    413c:	00058413          	mv	s0,a1
    4140:	00050913          	mv	s2,a0
    4144:	f49ff0ef          	jal	ra,408c <__malloc_lock>
    4148:	ffc42703          	lw	a4,-4(s0)
    414c:	00b48793          	addi	a5,s1,11
    4150:	01600693          	li	a3,22
    4154:	ff840a93          	addi	s5,s0,-8
    4158:	ffc77993          	andi	s3,a4,-4
    415c:	0ef6f663          	bgeu	a3,a5,4248 <_realloc_r+0x140>
    4160:	ff87fa13          	andi	s4,a5,-8
    4164:	0e07c663          	bltz	a5,4250 <_realloc_r+0x148>
    4168:	0e9a6463          	bltu	s4,s1,4250 <_realloc_r+0x148>
    416c:	1149d463          	bge	s3,s4,4274 <_realloc_r+0x16c>
    4170:	00004c17          	auipc	s8,0x4
    4174:	e70c0c13          	addi	s8,s8,-400 # 7fe0 <__malloc_av_>
    4178:	008c2603          	lw	a2,8(s8)
    417c:	013a86b3          	add	a3,s5,s3
    4180:	0046a783          	lw	a5,4(a3)
    4184:	1cd60e63          	beq	a2,a3,4360 <_realloc_r+0x258>
    4188:	ffe7f613          	andi	a2,a5,-2
    418c:	00c68633          	add	a2,a3,a2
    4190:	00462603          	lw	a2,4(a2)
    4194:	00167613          	andi	a2,a2,1
    4198:	14061463          	bnez	a2,42e0 <_realloc_r+0x1d8>
    419c:	ffc7f793          	andi	a5,a5,-4
    41a0:	00f98633          	add	a2,s3,a5
    41a4:	0b465e63          	bge	a2,s4,4260 <_realloc_r+0x158>
    41a8:	00177713          	andi	a4,a4,1
    41ac:	02071463          	bnez	a4,41d4 <_realloc_r+0xcc>
    41b0:	ff842b83          	lw	s7,-8(s0)
    41b4:	417a8bb3          	sub	s7,s5,s7
    41b8:	004ba703          	lw	a4,4(s7)
    41bc:	ffc77713          	andi	a4,a4,-4
    41c0:	00e787b3          	add	a5,a5,a4
    41c4:	01378b33          	add	s6,a5,s3
    41c8:	334b5463          	bge	s6,s4,44f0 <_realloc_r+0x3e8>
    41cc:	00e98b33          	add	s6,s3,a4
    41d0:	294b5663          	bge	s6,s4,445c <_realloc_r+0x354>
    41d4:	00048593          	mv	a1,s1
    41d8:	00090513          	mv	a0,s2
    41dc:	c54ff0ef          	jal	ra,3630 <_malloc_r>
    41e0:	00050493          	mv	s1,a0
    41e4:	40050263          	beqz	a0,45e8 <_realloc_r+0x4e0>
    41e8:	ffc42783          	lw	a5,-4(s0)
    41ec:	ff850713          	addi	a4,a0,-8
    41f0:	ffe7f793          	andi	a5,a5,-2
    41f4:	00fa87b3          	add	a5,s5,a5
    41f8:	24e78a63          	beq	a5,a4,444c <_realloc_r+0x344>
    41fc:	ffc98613          	addi	a2,s3,-4
    4200:	02400793          	li	a5,36
    4204:	2ec7e063          	bltu	a5,a2,44e4 <_realloc_r+0x3dc>
    4208:	01300713          	li	a4,19
    420c:	20c76e63          	bltu	a4,a2,4428 <_realloc_r+0x320>
    4210:	00050793          	mv	a5,a0
    4214:	00040713          	mv	a4,s0
    4218:	00072683          	lw	a3,0(a4)
    421c:	00d7a023          	sw	a3,0(a5)
    4220:	00472683          	lw	a3,4(a4)
    4224:	00d7a223          	sw	a3,4(a5)
    4228:	00872703          	lw	a4,8(a4)
    422c:	00e7a423          	sw	a4,8(a5)
    4230:	00090513          	mv	a0,s2
    4234:	00040593          	mv	a1,s0
    4238:	acdfe0ef          	jal	ra,2d04 <_free_r>
    423c:	00090513          	mv	a0,s2
    4240:	e59ff0ef          	jal	ra,4098 <__malloc_unlock>
    4244:	0680006f          	j	42ac <_realloc_r+0x1a4>
    4248:	01000a13          	li	s4,16
    424c:	f29a70e3          	bgeu	s4,s1,416c <_realloc_r+0x64>
    4250:	00c00793          	li	a5,12
    4254:	00f92023          	sw	a5,0(s2)
    4258:	00000493          	li	s1,0
    425c:	0500006f          	j	42ac <_realloc_r+0x1a4>
    4260:	00c6a783          	lw	a5,12(a3)
    4264:	0086a703          	lw	a4,8(a3)
    4268:	00060993          	mv	s3,a2
    426c:	00f72623          	sw	a5,12(a4)
    4270:	00e7a423          	sw	a4,8(a5)
    4274:	004aa783          	lw	a5,4(s5)
    4278:	414986b3          	sub	a3,s3,s4
    427c:	00f00613          	li	a2,15
    4280:	0017f793          	andi	a5,a5,1
    4284:	013a8733          	add	a4,s5,s3
    4288:	0ad66463          	bltu	a2,a3,4330 <_realloc_r+0x228>
    428c:	0137e7b3          	or	a5,a5,s3
    4290:	00faa223          	sw	a5,4(s5)
    4294:	00472783          	lw	a5,4(a4)
    4298:	0017e793          	ori	a5,a5,1
    429c:	00f72223          	sw	a5,4(a4)
    42a0:	00090513          	mv	a0,s2
    42a4:	df5ff0ef          	jal	ra,4098 <__malloc_unlock>
    42a8:	00040493          	mv	s1,s0
    42ac:	02c12083          	lw	ra,44(sp)
    42b0:	02812403          	lw	s0,40(sp)
    42b4:	02012903          	lw	s2,32(sp)
    42b8:	01c12983          	lw	s3,28(sp)
    42bc:	01812a03          	lw	s4,24(sp)
    42c0:	01412a83          	lw	s5,20(sp)
    42c4:	01012b03          	lw	s6,16(sp)
    42c8:	00c12b83          	lw	s7,12(sp)
    42cc:	00812c03          	lw	s8,8(sp)
    42d0:	00048513          	mv	a0,s1
    42d4:	02412483          	lw	s1,36(sp)
    42d8:	03010113          	addi	sp,sp,48
    42dc:	00008067          	ret
    42e0:	00177713          	andi	a4,a4,1
    42e4:	ee0718e3          	bnez	a4,41d4 <_realloc_r+0xcc>
    42e8:	ff842b83          	lw	s7,-8(s0)
    42ec:	417a8bb3          	sub	s7,s5,s7
    42f0:	004ba703          	lw	a4,4(s7)
    42f4:	ffc77713          	andi	a4,a4,-4
    42f8:	ed5ff06f          	j	41cc <_realloc_r+0xc4>
    42fc:	02812403          	lw	s0,40(sp)
    4300:	02c12083          	lw	ra,44(sp)
    4304:	02412483          	lw	s1,36(sp)
    4308:	02012903          	lw	s2,32(sp)
    430c:	01c12983          	lw	s3,28(sp)
    4310:	01812a03          	lw	s4,24(sp)
    4314:	01412a83          	lw	s5,20(sp)
    4318:	01012b03          	lw	s6,16(sp)
    431c:	00c12b83          	lw	s7,12(sp)
    4320:	00812c03          	lw	s8,8(sp)
    4324:	00060593          	mv	a1,a2
    4328:	03010113          	addi	sp,sp,48
    432c:	b04ff06f          	j	3630 <_malloc_r>
    4330:	0147e7b3          	or	a5,a5,s4
    4334:	00faa223          	sw	a5,4(s5)
    4338:	014a85b3          	add	a1,s5,s4
    433c:	0016e693          	ori	a3,a3,1
    4340:	00d5a223          	sw	a3,4(a1)
    4344:	00472783          	lw	a5,4(a4)
    4348:	00858593          	addi	a1,a1,8
    434c:	00090513          	mv	a0,s2
    4350:	0017e793          	ori	a5,a5,1
    4354:	00f72223          	sw	a5,4(a4)
    4358:	9adfe0ef          	jal	ra,2d04 <_free_r>
    435c:	f45ff06f          	j	42a0 <_realloc_r+0x198>
    4360:	ffc7f793          	andi	a5,a5,-4
    4364:	013786b3          	add	a3,a5,s3
    4368:	010a0613          	addi	a2,s4,16
    436c:	22c6de63          	bge	a3,a2,45a8 <_realloc_r+0x4a0>
    4370:	00177713          	andi	a4,a4,1
    4374:	e60710e3          	bnez	a4,41d4 <_realloc_r+0xcc>
    4378:	ff842b83          	lw	s7,-8(s0)
    437c:	417a8bb3          	sub	s7,s5,s7
    4380:	004ba703          	lw	a4,4(s7)
    4384:	ffc77713          	andi	a4,a4,-4
    4388:	00e787b3          	add	a5,a5,a4
    438c:	01378b33          	add	s6,a5,s3
    4390:	e2cb4ee3          	blt	s6,a2,41cc <_realloc_r+0xc4>
    4394:	00cba783          	lw	a5,12(s7)
    4398:	008ba703          	lw	a4,8(s7)
    439c:	ffc98613          	addi	a2,s3,-4
    43a0:	02400693          	li	a3,36
    43a4:	00f72623          	sw	a5,12(a4)
    43a8:	00e7a423          	sw	a4,8(a5)
    43ac:	008b8493          	addi	s1,s7,8
    43b0:	26c6e263          	bltu	a3,a2,4614 <_realloc_r+0x50c>
    43b4:	01300713          	li	a4,19
    43b8:	00048793          	mv	a5,s1
    43bc:	02c77263          	bgeu	a4,a2,43e0 <_realloc_r+0x2d8>
    43c0:	00042703          	lw	a4,0(s0)
    43c4:	01b00793          	li	a5,27
    43c8:	00eba423          	sw	a4,8(s7)
    43cc:	00442703          	lw	a4,4(s0)
    43d0:	00eba623          	sw	a4,12(s7)
    43d4:	24c7e863          	bltu	a5,a2,4624 <_realloc_r+0x51c>
    43d8:	00840413          	addi	s0,s0,8
    43dc:	010b8793          	addi	a5,s7,16
    43e0:	00042703          	lw	a4,0(s0)
    43e4:	00e7a023          	sw	a4,0(a5)
    43e8:	00442703          	lw	a4,4(s0)
    43ec:	00e7a223          	sw	a4,4(a5)
    43f0:	00842703          	lw	a4,8(s0)
    43f4:	00e7a423          	sw	a4,8(a5)
    43f8:	014b8733          	add	a4,s7,s4
    43fc:	414b07b3          	sub	a5,s6,s4
    4400:	00ec2423          	sw	a4,8(s8)
    4404:	0017e793          	ori	a5,a5,1
    4408:	00f72223          	sw	a5,4(a4)
    440c:	004ba783          	lw	a5,4(s7)
    4410:	00090513          	mv	a0,s2
    4414:	0017f793          	andi	a5,a5,1
    4418:	0147e7b3          	or	a5,a5,s4
    441c:	00fba223          	sw	a5,4(s7)
    4420:	c79ff0ef          	jal	ra,4098 <__malloc_unlock>
    4424:	e89ff06f          	j	42ac <_realloc_r+0x1a4>
    4428:	00042683          	lw	a3,0(s0)
    442c:	01b00713          	li	a4,27
    4430:	00d52023          	sw	a3,0(a0)
    4434:	00442683          	lw	a3,4(s0)
    4438:	00d52223          	sw	a3,4(a0)
    443c:	14c76663          	bltu	a4,a2,4588 <_realloc_r+0x480>
    4440:	00840713          	addi	a4,s0,8
    4444:	00850793          	addi	a5,a0,8
    4448:	dd1ff06f          	j	4218 <_realloc_r+0x110>
    444c:	ffc52783          	lw	a5,-4(a0)
    4450:	ffc7f793          	andi	a5,a5,-4
    4454:	00f989b3          	add	s3,s3,a5
    4458:	e1dff06f          	j	4274 <_realloc_r+0x16c>
    445c:	00cba783          	lw	a5,12(s7)
    4460:	008ba703          	lw	a4,8(s7)
    4464:	ffc98613          	addi	a2,s3,-4
    4468:	02400693          	li	a3,36
    446c:	00f72623          	sw	a5,12(a4)
    4470:	00e7a423          	sw	a4,8(a5)
    4474:	008b8493          	addi	s1,s7,8
    4478:	10c6e063          	bltu	a3,a2,4578 <_realloc_r+0x470>
    447c:	01300713          	li	a4,19
    4480:	00048793          	mv	a5,s1
    4484:	02c77c63          	bgeu	a4,a2,44bc <_realloc_r+0x3b4>
    4488:	00042703          	lw	a4,0(s0)
    448c:	01b00793          	li	a5,27
    4490:	00eba423          	sw	a4,8(s7)
    4494:	00442703          	lw	a4,4(s0)
    4498:	00eba623          	sw	a4,12(s7)
    449c:	14c7f063          	bgeu	a5,a2,45dc <_realloc_r+0x4d4>
    44a0:	00842783          	lw	a5,8(s0)
    44a4:	00fba823          	sw	a5,16(s7)
    44a8:	00c42783          	lw	a5,12(s0)
    44ac:	00fbaa23          	sw	a5,20(s7)
    44b0:	0ad60663          	beq	a2,a3,455c <_realloc_r+0x454>
    44b4:	01040413          	addi	s0,s0,16
    44b8:	018b8793          	addi	a5,s7,24
    44bc:	00042703          	lw	a4,0(s0)
    44c0:	00e7a023          	sw	a4,0(a5)
    44c4:	00442703          	lw	a4,4(s0)
    44c8:	00e7a223          	sw	a4,4(a5)
    44cc:	00842703          	lw	a4,8(s0)
    44d0:	00e7a423          	sw	a4,8(a5)
    44d4:	00048413          	mv	s0,s1
    44d8:	000b0993          	mv	s3,s6
    44dc:	000b8a93          	mv	s5,s7
    44e0:	d95ff06f          	j	4274 <_realloc_r+0x16c>
    44e4:	00040593          	mv	a1,s0
    44e8:	9adff0ef          	jal	ra,3e94 <memmove>
    44ec:	d45ff06f          	j	4230 <_realloc_r+0x128>
    44f0:	00c6a783          	lw	a5,12(a3)
    44f4:	0086a703          	lw	a4,8(a3)
    44f8:	ffc98613          	addi	a2,s3,-4
    44fc:	02400693          	li	a3,36
    4500:	00f72623          	sw	a5,12(a4)
    4504:	00e7a423          	sw	a4,8(a5)
    4508:	008ba703          	lw	a4,8(s7)
    450c:	00cba783          	lw	a5,12(s7)
    4510:	008b8493          	addi	s1,s7,8
    4514:	00f72623          	sw	a5,12(a4)
    4518:	00e7a423          	sw	a4,8(a5)
    451c:	04c6ee63          	bltu	a3,a2,4578 <_realloc_r+0x470>
    4520:	01300713          	li	a4,19
    4524:	00048793          	mv	a5,s1
    4528:	f8c77ae3          	bgeu	a4,a2,44bc <_realloc_r+0x3b4>
    452c:	00042703          	lw	a4,0(s0)
    4530:	01b00793          	li	a5,27
    4534:	00eba423          	sw	a4,8(s7)
    4538:	00442703          	lw	a4,4(s0)
    453c:	00eba623          	sw	a4,12(s7)
    4540:	08c7fe63          	bgeu	a5,a2,45dc <_realloc_r+0x4d4>
    4544:	00842703          	lw	a4,8(s0)
    4548:	02400793          	li	a5,36
    454c:	00eba823          	sw	a4,16(s7)
    4550:	00c42703          	lw	a4,12(s0)
    4554:	00ebaa23          	sw	a4,20(s7)
    4558:	f4f61ee3          	bne	a2,a5,44b4 <_realloc_r+0x3ac>
    455c:	01042703          	lw	a4,16(s0)
    4560:	020b8793          	addi	a5,s7,32
    4564:	01840413          	addi	s0,s0,24
    4568:	00ebac23          	sw	a4,24(s7)
    456c:	ffc42703          	lw	a4,-4(s0)
    4570:	00ebae23          	sw	a4,28(s7)
    4574:	f49ff06f          	j	44bc <_realloc_r+0x3b4>
    4578:	00040593          	mv	a1,s0
    457c:	00048513          	mv	a0,s1
    4580:	915ff0ef          	jal	ra,3e94 <memmove>
    4584:	f51ff06f          	j	44d4 <_realloc_r+0x3cc>
    4588:	00842703          	lw	a4,8(s0)
    458c:	00e52423          	sw	a4,8(a0)
    4590:	00c42703          	lw	a4,12(s0)
    4594:	00e52623          	sw	a4,12(a0)
    4598:	06f60063          	beq	a2,a5,45f8 <_realloc_r+0x4f0>
    459c:	01040713          	addi	a4,s0,16
    45a0:	01050793          	addi	a5,a0,16
    45a4:	c75ff06f          	j	4218 <_realloc_r+0x110>
    45a8:	014a8ab3          	add	s5,s5,s4
    45ac:	414687b3          	sub	a5,a3,s4
    45b0:	015c2423          	sw	s5,8(s8)
    45b4:	0017e793          	ori	a5,a5,1
    45b8:	00faa223          	sw	a5,4(s5)
    45bc:	ffc42783          	lw	a5,-4(s0)
    45c0:	00090513          	mv	a0,s2
    45c4:	00040493          	mv	s1,s0
    45c8:	0017f793          	andi	a5,a5,1
    45cc:	0147e7b3          	or	a5,a5,s4
    45d0:	fef42e23          	sw	a5,-4(s0)
    45d4:	ac5ff0ef          	jal	ra,4098 <__malloc_unlock>
    45d8:	cd5ff06f          	j	42ac <_realloc_r+0x1a4>
    45dc:	00840413          	addi	s0,s0,8
    45e0:	010b8793          	addi	a5,s7,16
    45e4:	ed9ff06f          	j	44bc <_realloc_r+0x3b4>
    45e8:	00090513          	mv	a0,s2
    45ec:	aadff0ef          	jal	ra,4098 <__malloc_unlock>
    45f0:	00000493          	li	s1,0
    45f4:	cb9ff06f          	j	42ac <_realloc_r+0x1a4>
    45f8:	01042683          	lw	a3,16(s0)
    45fc:	01840713          	addi	a4,s0,24
    4600:	01850793          	addi	a5,a0,24
    4604:	00d52823          	sw	a3,16(a0)
    4608:	01442683          	lw	a3,20(s0)
    460c:	00d52a23          	sw	a3,20(a0)
    4610:	c09ff06f          	j	4218 <_realloc_r+0x110>
    4614:	00040593          	mv	a1,s0
    4618:	00048513          	mv	a0,s1
    461c:	879ff0ef          	jal	ra,3e94 <memmove>
    4620:	dd9ff06f          	j	43f8 <_realloc_r+0x2f0>
    4624:	00842783          	lw	a5,8(s0)
    4628:	00fba823          	sw	a5,16(s7)
    462c:	00c42783          	lw	a5,12(s0)
    4630:	00fbaa23          	sw	a5,20(s7)
    4634:	00d60863          	beq	a2,a3,4644 <_realloc_r+0x53c>
    4638:	01040413          	addi	s0,s0,16
    463c:	018b8793          	addi	a5,s7,24
    4640:	da1ff06f          	j	43e0 <_realloc_r+0x2d8>
    4644:	01042703          	lw	a4,16(s0)
    4648:	020b8793          	addi	a5,s7,32
    464c:	01840413          	addi	s0,s0,24
    4650:	00ebac23          	sw	a4,24(s7)
    4654:	ffc42703          	lw	a4,-4(s0)
    4658:	00ebae23          	sw	a4,28(s7)
    465c:	d85ff06f          	j	43e0 <_realloc_r+0x2d8>

00004660 <_sbrk_r>:
    4660:	ff010113          	addi	sp,sp,-16
    4664:	00812423          	sw	s0,8(sp)
    4668:	00050413          	mv	s0,a0
    466c:	00058513          	mv	a0,a1
    4670:	00006797          	auipc	a5,0x6
    4674:	8407a823          	sw	zero,-1968(a5) # 9ec0 <errno>
    4678:	00112623          	sw	ra,12(sp)
    467c:	598010ef          	jal	ra,5c14 <_sbrk>
    4680:	fff00793          	li	a5,-1
    4684:	00f50a63          	beq	a0,a5,4698 <_sbrk_r+0x38>
    4688:	00c12083          	lw	ra,12(sp)
    468c:	00812403          	lw	s0,8(sp)
    4690:	01010113          	addi	sp,sp,16
    4694:	00008067          	ret
    4698:	00006797          	auipc	a5,0x6
    469c:	8287a783          	lw	a5,-2008(a5) # 9ec0 <errno>
    46a0:	fe0784e3          	beqz	a5,4688 <_sbrk_r+0x28>
    46a4:	00c12083          	lw	ra,12(sp)
    46a8:	00f42023          	sw	a5,0(s0)
    46ac:	00812403          	lw	s0,8(sp)
    46b0:	01010113          	addi	sp,sp,16
    46b4:	00008067          	ret

000046b8 <__sread>:
    46b8:	ff010113          	addi	sp,sp,-16
    46bc:	00812423          	sw	s0,8(sp)
    46c0:	00058413          	mv	s0,a1
    46c4:	00e59583          	lh	a1,14(a1)
    46c8:	00112623          	sw	ra,12(sp)
    46cc:	34d000ef          	jal	ra,5218 <_read_r>
    46d0:	02054063          	bltz	a0,46f0 <__sread+0x38>
    46d4:	05042783          	lw	a5,80(s0)
    46d8:	00c12083          	lw	ra,12(sp)
    46dc:	00a787b3          	add	a5,a5,a0
    46e0:	04f42823          	sw	a5,80(s0)
    46e4:	00812403          	lw	s0,8(sp)
    46e8:	01010113          	addi	sp,sp,16
    46ec:	00008067          	ret
    46f0:	00c45783          	lhu	a5,12(s0)
    46f4:	fffff737          	lui	a4,0xfffff
    46f8:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    46fc:	00e7f7b3          	and	a5,a5,a4
    4700:	00c12083          	lw	ra,12(sp)
    4704:	00f41623          	sh	a5,12(s0)
    4708:	00812403          	lw	s0,8(sp)
    470c:	01010113          	addi	sp,sp,16
    4710:	00008067          	ret

00004714 <__seofread>:
    4714:	00000513          	li	a0,0
    4718:	00008067          	ret

0000471c <__swrite>:
    471c:	00c59783          	lh	a5,12(a1)
    4720:	fe010113          	addi	sp,sp,-32
    4724:	00812c23          	sw	s0,24(sp)
    4728:	00912a23          	sw	s1,20(sp)
    472c:	01212823          	sw	s2,16(sp)
    4730:	01312623          	sw	s3,12(sp)
    4734:	00112e23          	sw	ra,28(sp)
    4738:	1007f713          	andi	a4,a5,256
    473c:	00058413          	mv	s0,a1
    4740:	00050493          	mv	s1,a0
    4744:	00060913          	mv	s2,a2
    4748:	00068993          	mv	s3,a3
    474c:	04071063          	bnez	a4,478c <__swrite+0x70>
    4750:	fffff737          	lui	a4,0xfffff
    4754:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    4758:	00e7f7b3          	and	a5,a5,a4
    475c:	00e41583          	lh	a1,14(s0)
    4760:	00f41623          	sh	a5,12(s0)
    4764:	01812403          	lw	s0,24(sp)
    4768:	01c12083          	lw	ra,28(sp)
    476c:	00098693          	mv	a3,s3
    4770:	00090613          	mv	a2,s2
    4774:	00c12983          	lw	s3,12(sp)
    4778:	01012903          	lw	s2,16(sp)
    477c:	00048513          	mv	a0,s1
    4780:	01412483          	lw	s1,20(sp)
    4784:	02010113          	addi	sp,sp,32
    4788:	09c0006f          	j	4824 <_write_r>
    478c:	00e59583          	lh	a1,14(a1)
    4790:	00200693          	li	a3,2
    4794:	00000613          	li	a2,0
    4798:	7b4000ef          	jal	ra,4f4c <_lseek_r>
    479c:	00c41783          	lh	a5,12(s0)
    47a0:	fb1ff06f          	j	4750 <__swrite+0x34>

000047a4 <__sseek>:
    47a4:	ff010113          	addi	sp,sp,-16
    47a8:	00812423          	sw	s0,8(sp)
    47ac:	00058413          	mv	s0,a1
    47b0:	00e59583          	lh	a1,14(a1)
    47b4:	00112623          	sw	ra,12(sp)
    47b8:	794000ef          	jal	ra,4f4c <_lseek_r>
    47bc:	fff00793          	li	a5,-1
    47c0:	02f50863          	beq	a0,a5,47f0 <__sseek+0x4c>
    47c4:	00c45783          	lhu	a5,12(s0)
    47c8:	00001737          	lui	a4,0x1
    47cc:	00c12083          	lw	ra,12(sp)
    47d0:	00e7e7b3          	or	a5,a5,a4
    47d4:	01079793          	slli	a5,a5,0x10
    47d8:	4107d793          	srai	a5,a5,0x10
    47dc:	04a42823          	sw	a0,80(s0)
    47e0:	00f41623          	sh	a5,12(s0)
    47e4:	00812403          	lw	s0,8(sp)
    47e8:	01010113          	addi	sp,sp,16
    47ec:	00008067          	ret
    47f0:	00c45783          	lhu	a5,12(s0)
    47f4:	fffff737          	lui	a4,0xfffff
    47f8:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffeefff>
    47fc:	00e7f7b3          	and	a5,a5,a4
    4800:	01079793          	slli	a5,a5,0x10
    4804:	4107d793          	srai	a5,a5,0x10
    4808:	00c12083          	lw	ra,12(sp)
    480c:	00f41623          	sh	a5,12(s0)
    4810:	00812403          	lw	s0,8(sp)
    4814:	01010113          	addi	sp,sp,16
    4818:	00008067          	ret

0000481c <__sclose>:
    481c:	00e59583          	lh	a1,14(a1)
    4820:	e4dfd06f          	j	266c <_close_r>

00004824 <_write_r>:
    4824:	ff010113          	addi	sp,sp,-16
    4828:	00058713          	mv	a4,a1
    482c:	00812423          	sw	s0,8(sp)
    4830:	00060593          	mv	a1,a2
    4834:	00050413          	mv	s0,a0
    4838:	00068613          	mv	a2,a3
    483c:	00070513          	mv	a0,a4
    4840:	00005797          	auipc	a5,0x5
    4844:	6807a023          	sw	zero,1664(a5) # 9ec0 <errno>
    4848:	00112623          	sw	ra,12(sp)
    484c:	4c8010ef          	jal	ra,5d14 <_write>
    4850:	fff00793          	li	a5,-1
    4854:	00f50a63          	beq	a0,a5,4868 <_write_r+0x44>
    4858:	00c12083          	lw	ra,12(sp)
    485c:	00812403          	lw	s0,8(sp)
    4860:	01010113          	addi	sp,sp,16
    4864:	00008067          	ret
    4868:	00005797          	auipc	a5,0x5
    486c:	6587a783          	lw	a5,1624(a5) # 9ec0 <errno>
    4870:	fe0784e3          	beqz	a5,4858 <_write_r+0x34>
    4874:	00c12083          	lw	ra,12(sp)
    4878:	00f42023          	sw	a5,0(s0)
    487c:	00812403          	lw	s0,8(sp)
    4880:	01010113          	addi	sp,sp,16
    4884:	00008067          	ret

00004888 <__swsetup_r>:
    4888:	ff010113          	addi	sp,sp,-16
    488c:	00812423          	sw	s0,8(sp)
    4890:	00912223          	sw	s1,4(sp)
    4894:	00112623          	sw	ra,12(sp)
    4898:	00004797          	auipc	a5,0x4
    489c:	b707a783          	lw	a5,-1168(a5) # 8408 <_impure_ptr>
    48a0:	00050493          	mv	s1,a0
    48a4:	00058413          	mv	s0,a1
    48a8:	00078663          	beqz	a5,48b4 <__swsetup_r+0x2c>
    48ac:	0387a703          	lw	a4,56(a5)
    48b0:	08070063          	beqz	a4,4930 <__swsetup_r+0xa8>
    48b4:	00c41783          	lh	a5,12(s0)
    48b8:	0087f713          	andi	a4,a5,8
    48bc:	08070463          	beqz	a4,4944 <__swsetup_r+0xbc>
    48c0:	01042703          	lw	a4,16(s0)
    48c4:	0a070063          	beqz	a4,4964 <__swsetup_r+0xdc>
    48c8:	0017f693          	andi	a3,a5,1
    48cc:	02068863          	beqz	a3,48fc <__swsetup_r+0x74>
    48d0:	01442683          	lw	a3,20(s0)
    48d4:	00042423          	sw	zero,8(s0)
    48d8:	00000513          	li	a0,0
    48dc:	40d006b3          	neg	a3,a3
    48e0:	00d42c23          	sw	a3,24(s0)
    48e4:	02070a63          	beqz	a4,4918 <__swsetup_r+0x90>
    48e8:	00c12083          	lw	ra,12(sp)
    48ec:	00812403          	lw	s0,8(sp)
    48f0:	00412483          	lw	s1,4(sp)
    48f4:	01010113          	addi	sp,sp,16
    48f8:	00008067          	ret
    48fc:	0027f693          	andi	a3,a5,2
    4900:	00000613          	li	a2,0
    4904:	00069463          	bnez	a3,490c <__swsetup_r+0x84>
    4908:	01442603          	lw	a2,20(s0)
    490c:	00c42423          	sw	a2,8(s0)
    4910:	00000513          	li	a0,0
    4914:	fc071ae3          	bnez	a4,48e8 <__swsetup_r+0x60>
    4918:	0807f713          	andi	a4,a5,128
    491c:	fc0706e3          	beqz	a4,48e8 <__swsetup_r+0x60>
    4920:	0407e793          	ori	a5,a5,64
    4924:	00f41623          	sh	a5,12(s0)
    4928:	fff00513          	li	a0,-1
    492c:	fbdff06f          	j	48e8 <__swsetup_r+0x60>
    4930:	00078513          	mv	a0,a5
    4934:	e9dfd0ef          	jal	ra,27d0 <__sinit>
    4938:	00c41783          	lh	a5,12(s0)
    493c:	0087f713          	andi	a4,a5,8
    4940:	f80710e3          	bnez	a4,48c0 <__swsetup_r+0x38>
    4944:	0107f713          	andi	a4,a5,16
    4948:	06070a63          	beqz	a4,49bc <__swsetup_r+0x134>
    494c:	0047f713          	andi	a4,a5,4
    4950:	02071c63          	bnez	a4,4988 <__swsetup_r+0x100>
    4954:	01042703          	lw	a4,16(s0)
    4958:	0087e793          	ori	a5,a5,8
    495c:	00f41623          	sh	a5,12(s0)
    4960:	f60714e3          	bnez	a4,48c8 <__swsetup_r+0x40>
    4964:	2807f693          	andi	a3,a5,640
    4968:	20000613          	li	a2,512
    496c:	f4c68ee3          	beq	a3,a2,48c8 <__swsetup_r+0x40>
    4970:	00040593          	mv	a1,s0
    4974:	00048513          	mv	a0,s1
    4978:	638000ef          	jal	ra,4fb0 <__smakebuf_r>
    497c:	00c41783          	lh	a5,12(s0)
    4980:	01042703          	lw	a4,16(s0)
    4984:	f45ff06f          	j	48c8 <__swsetup_r+0x40>
    4988:	03042583          	lw	a1,48(s0)
    498c:	00058e63          	beqz	a1,49a8 <__swsetup_r+0x120>
    4990:	04040713          	addi	a4,s0,64
    4994:	00e58863          	beq	a1,a4,49a4 <__swsetup_r+0x11c>
    4998:	00048513          	mv	a0,s1
    499c:	b68fe0ef          	jal	ra,2d04 <_free_r>
    49a0:	00c41783          	lh	a5,12(s0)
    49a4:	02042823          	sw	zero,48(s0)
    49a8:	01042703          	lw	a4,16(s0)
    49ac:	fdb7f793          	andi	a5,a5,-37
    49b0:	00042223          	sw	zero,4(s0)
    49b4:	00e42023          	sw	a4,0(s0)
    49b8:	fa1ff06f          	j	4958 <__swsetup_r+0xd0>
    49bc:	00900713          	li	a4,9
    49c0:	00e4a023          	sw	a4,0(s1)
    49c4:	0407e793          	ori	a5,a5,64
    49c8:	f5dff06f          	j	4924 <__swsetup_r+0x9c>

000049cc <_fclose_r>:
    49cc:	ff010113          	addi	sp,sp,-16
    49d0:	00112623          	sw	ra,12(sp)
    49d4:	00812423          	sw	s0,8(sp)
    49d8:	00912223          	sw	s1,4(sp)
    49dc:	01212023          	sw	s2,0(sp)
    49e0:	0c058a63          	beqz	a1,4ab4 <_fclose_r+0xe8>
    49e4:	00058413          	mv	s0,a1
    49e8:	00050493          	mv	s1,a0
    49ec:	00050663          	beqz	a0,49f8 <_fclose_r+0x2c>
    49f0:	03852783          	lw	a5,56(a0)
    49f4:	0e078063          	beqz	a5,4ad4 <_fclose_r+0x108>
    49f8:	06442783          	lw	a5,100(s0)
    49fc:	00c41703          	lh	a4,12(s0)
    4a00:	0017f793          	andi	a5,a5,1
    4a04:	0a079663          	bnez	a5,4ab0 <_fclose_r+0xe4>
    4a08:	20077713          	andi	a4,a4,512
    4a0c:	10070063          	beqz	a4,4b0c <_fclose_r+0x140>
    4a10:	00040593          	mv	a1,s0
    4a14:	00048513          	mv	a0,s1
    4a18:	13c000ef          	jal	ra,4b54 <__sflush_r>
    4a1c:	02c42783          	lw	a5,44(s0)
    4a20:	00050913          	mv	s2,a0
    4a24:	00078a63          	beqz	a5,4a38 <_fclose_r+0x6c>
    4a28:	01c42583          	lw	a1,28(s0)
    4a2c:	00048513          	mv	a0,s1
    4a30:	000780e7          	jalr	a5
    4a34:	0a054c63          	bltz	a0,4aec <_fclose_r+0x120>
    4a38:	00c45783          	lhu	a5,12(s0)
    4a3c:	0807f793          	andi	a5,a5,128
    4a40:	0a079e63          	bnez	a5,4afc <_fclose_r+0x130>
    4a44:	03042583          	lw	a1,48(s0)
    4a48:	00058c63          	beqz	a1,4a60 <_fclose_r+0x94>
    4a4c:	04040793          	addi	a5,s0,64
    4a50:	00f58663          	beq	a1,a5,4a5c <_fclose_r+0x90>
    4a54:	00048513          	mv	a0,s1
    4a58:	aacfe0ef          	jal	ra,2d04 <_free_r>
    4a5c:	02042823          	sw	zero,48(s0)
    4a60:	04442583          	lw	a1,68(s0)
    4a64:	00058863          	beqz	a1,4a74 <_fclose_r+0xa8>
    4a68:	00048513          	mv	a0,s1
    4a6c:	a98fe0ef          	jal	ra,2d04 <_free_r>
    4a70:	04042223          	sw	zero,68(s0)
    4a74:	868fe0ef          	jal	ra,2adc <__sfp_lock_acquire>
    4a78:	06442783          	lw	a5,100(s0)
    4a7c:	00041623          	sh	zero,12(s0)
    4a80:	0017f793          	andi	a5,a5,1
    4a84:	0a078a63          	beqz	a5,4b38 <_fclose_r+0x16c>
    4a88:	05842503          	lw	a0,88(s0)
    4a8c:	b81fe0ef          	jal	ra,360c <__retarget_lock_close_recursive>
    4a90:	858fe0ef          	jal	ra,2ae8 <__sfp_lock_release>
    4a94:	00c12083          	lw	ra,12(sp)
    4a98:	00812403          	lw	s0,8(sp)
    4a9c:	00412483          	lw	s1,4(sp)
    4aa0:	00090513          	mv	a0,s2
    4aa4:	00012903          	lw	s2,0(sp)
    4aa8:	01010113          	addi	sp,sp,16
    4aac:	00008067          	ret
    4ab0:	f60710e3          	bnez	a4,4a10 <_fclose_r+0x44>
    4ab4:	00000913          	li	s2,0
    4ab8:	00c12083          	lw	ra,12(sp)
    4abc:	00812403          	lw	s0,8(sp)
    4ac0:	00412483          	lw	s1,4(sp)
    4ac4:	00090513          	mv	a0,s2
    4ac8:	00012903          	lw	s2,0(sp)
    4acc:	01010113          	addi	sp,sp,16
    4ad0:	00008067          	ret
    4ad4:	cfdfd0ef          	jal	ra,27d0 <__sinit>
    4ad8:	06442783          	lw	a5,100(s0)
    4adc:	00c41703          	lh	a4,12(s0)
    4ae0:	0017f793          	andi	a5,a5,1
    4ae4:	fc0796e3          	bnez	a5,4ab0 <_fclose_r+0xe4>
    4ae8:	f21ff06f          	j	4a08 <_fclose_r+0x3c>
    4aec:	00c45783          	lhu	a5,12(s0)
    4af0:	fff00913          	li	s2,-1
    4af4:	0807f793          	andi	a5,a5,128
    4af8:	f40786e3          	beqz	a5,4a44 <_fclose_r+0x78>
    4afc:	01042583          	lw	a1,16(s0)
    4b00:	00048513          	mv	a0,s1
    4b04:	a00fe0ef          	jal	ra,2d04 <_free_r>
    4b08:	f3dff06f          	j	4a44 <_fclose_r+0x78>
    4b0c:	05842503          	lw	a0,88(s0)
    4b10:	b05fe0ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    4b14:	00c41783          	lh	a5,12(s0)
    4b18:	ee079ce3          	bnez	a5,4a10 <_fclose_r+0x44>
    4b1c:	06442783          	lw	a5,100(s0)
    4b20:	0017f793          	andi	a5,a5,1
    4b24:	f80798e3          	bnez	a5,4ab4 <_fclose_r+0xe8>
    4b28:	05842503          	lw	a0,88(s0)
    4b2c:	00000913          	li	s2,0
    4b30:	afdfe0ef          	jal	ra,362c <__retarget_lock_release_recursive>
    4b34:	f85ff06f          	j	4ab8 <_fclose_r+0xec>
    4b38:	05842503          	lw	a0,88(s0)
    4b3c:	af1fe0ef          	jal	ra,362c <__retarget_lock_release_recursive>
    4b40:	f49ff06f          	j	4a88 <_fclose_r+0xbc>

00004b44 <fclose>:
    4b44:	00050593          	mv	a1,a0
    4b48:	00004517          	auipc	a0,0x4
    4b4c:	8c052503          	lw	a0,-1856(a0) # 8408 <_impure_ptr>
    4b50:	e7dff06f          	j	49cc <_fclose_r>

00004b54 <__sflush_r>:
    4b54:	00c59783          	lh	a5,12(a1)
    4b58:	fe010113          	addi	sp,sp,-32
    4b5c:	00812c23          	sw	s0,24(sp)
    4b60:	01312623          	sw	s3,12(sp)
    4b64:	00112e23          	sw	ra,28(sp)
    4b68:	00912a23          	sw	s1,20(sp)
    4b6c:	01212823          	sw	s2,16(sp)
    4b70:	0087f713          	andi	a4,a5,8
    4b74:	00058413          	mv	s0,a1
    4b78:	00050993          	mv	s3,a0
    4b7c:	12071263          	bnez	a4,4ca0 <__sflush_r+0x14c>
    4b80:	00001737          	lui	a4,0x1
    4b84:	80070713          	addi	a4,a4,-2048 # 800 <altera_avalon_jtag_uart_init+0x28>
    4b88:	0045a683          	lw	a3,4(a1)
    4b8c:	00e7e733          	or	a4,a5,a4
    4b90:	00e59623          	sh	a4,12(a1)
    4b94:	18d05863          	blez	a3,4d24 <__sflush_r+0x1d0>
    4b98:	02842803          	lw	a6,40(s0)
    4b9c:	0e080263          	beqz	a6,4c80 <__sflush_r+0x12c>
    4ba0:	00c7d793          	srli	a5,a5,0xc
    4ba4:	0009a483          	lw	s1,0(s3)
    4ba8:	0017f793          	andi	a5,a5,1
    4bac:	0009a023          	sw	zero,0(s3)
    4bb0:	01c42583          	lw	a1,28(s0)
    4bb4:	18079063          	bnez	a5,4d34 <__sflush_r+0x1e0>
    4bb8:	00000613          	li	a2,0
    4bbc:	00100693          	li	a3,1
    4bc0:	00098513          	mv	a0,s3
    4bc4:	000800e7          	jalr	a6
    4bc8:	fff00793          	li	a5,-1
    4bcc:	00050613          	mv	a2,a0
    4bd0:	1af50063          	beq	a0,a5,4d70 <__sflush_r+0x21c>
    4bd4:	00c41703          	lh	a4,12(s0)
    4bd8:	02842803          	lw	a6,40(s0)
    4bdc:	01c42583          	lw	a1,28(s0)
    4be0:	00477713          	andi	a4,a4,4
    4be4:	00070e63          	beqz	a4,4c00 <__sflush_r+0xac>
    4be8:	00442703          	lw	a4,4(s0)
    4bec:	03042783          	lw	a5,48(s0)
    4bf0:	40e60633          	sub	a2,a2,a4
    4bf4:	00078663          	beqz	a5,4c00 <__sflush_r+0xac>
    4bf8:	03c42783          	lw	a5,60(s0)
    4bfc:	40f60633          	sub	a2,a2,a5
    4c00:	00000693          	li	a3,0
    4c04:	00098513          	mv	a0,s3
    4c08:	000800e7          	jalr	a6
    4c0c:	fff00793          	li	a5,-1
    4c10:	12f51663          	bne	a0,a5,4d3c <__sflush_r+0x1e8>
    4c14:	0009a683          	lw	a3,0(s3)
    4c18:	01d00793          	li	a5,29
    4c1c:	0cd7ee63          	bltu	a5,a3,4cf8 <__sflush_r+0x1a4>
    4c20:	dfc00737          	lui	a4,0xdfc00
    4c24:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xdfbefffe>
    4c28:	40d75733          	sra	a4,a4,a3
    4c2c:	00177713          	andi	a4,a4,1
    4c30:	00c41783          	lh	a5,12(s0)
    4c34:	0c071463          	bnez	a4,4cfc <__sflush_r+0x1a8>
    4c38:	01042603          	lw	a2,16(s0)
    4c3c:	fffff737          	lui	a4,0xfffff
    4c40:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    4c44:	00e7f733          	and	a4,a5,a4
    4c48:	00c7d793          	srli	a5,a5,0xc
    4c4c:	00e41623          	sh	a4,12(s0)
    4c50:	00042223          	sw	zero,4(s0)
    4c54:	00c42023          	sw	a2,0(s0)
    4c58:	0017f793          	andi	a5,a5,1
    4c5c:	12079c63          	bnez	a5,4d94 <__sflush_r+0x240>
    4c60:	03042583          	lw	a1,48(s0)
    4c64:	0099a023          	sw	s1,0(s3)
    4c68:	00058c63          	beqz	a1,4c80 <__sflush_r+0x12c>
    4c6c:	04040793          	addi	a5,s0,64
    4c70:	00f58663          	beq	a1,a5,4c7c <__sflush_r+0x128>
    4c74:	00098513          	mv	a0,s3
    4c78:	88cfe0ef          	jal	ra,2d04 <_free_r>
    4c7c:	02042823          	sw	zero,48(s0)
    4c80:	00000513          	li	a0,0
    4c84:	01c12083          	lw	ra,28(sp)
    4c88:	01812403          	lw	s0,24(sp)
    4c8c:	01412483          	lw	s1,20(sp)
    4c90:	01012903          	lw	s2,16(sp)
    4c94:	00c12983          	lw	s3,12(sp)
    4c98:	02010113          	addi	sp,sp,32
    4c9c:	00008067          	ret
    4ca0:	0105a903          	lw	s2,16(a1)
    4ca4:	fc090ee3          	beqz	s2,4c80 <__sflush_r+0x12c>
    4ca8:	0005a483          	lw	s1,0(a1)
    4cac:	0037f793          	andi	a5,a5,3
    4cb0:	0125a023          	sw	s2,0(a1)
    4cb4:	412484b3          	sub	s1,s1,s2
    4cb8:	00000713          	li	a4,0
    4cbc:	00079463          	bnez	a5,4cc4 <__sflush_r+0x170>
    4cc0:	0145a703          	lw	a4,20(a1)
    4cc4:	00e42423          	sw	a4,8(s0)
    4cc8:	00904863          	bgtz	s1,4cd8 <__sflush_r+0x184>
    4ccc:	fb5ff06f          	j	4c80 <__sflush_r+0x12c>
    4cd0:	00a90933          	add	s2,s2,a0
    4cd4:	fa9056e3          	blez	s1,4c80 <__sflush_r+0x12c>
    4cd8:	02442783          	lw	a5,36(s0)
    4cdc:	01c42583          	lw	a1,28(s0)
    4ce0:	00048693          	mv	a3,s1
    4ce4:	00090613          	mv	a2,s2
    4ce8:	00098513          	mv	a0,s3
    4cec:	000780e7          	jalr	a5
    4cf0:	40a484b3          	sub	s1,s1,a0
    4cf4:	fca04ee3          	bgtz	a0,4cd0 <__sflush_r+0x17c>
    4cf8:	00c41783          	lh	a5,12(s0)
    4cfc:	0407e793          	ori	a5,a5,64
    4d00:	01c12083          	lw	ra,28(sp)
    4d04:	00f41623          	sh	a5,12(s0)
    4d08:	01812403          	lw	s0,24(sp)
    4d0c:	01412483          	lw	s1,20(sp)
    4d10:	01012903          	lw	s2,16(sp)
    4d14:	00c12983          	lw	s3,12(sp)
    4d18:	fff00513          	li	a0,-1
    4d1c:	02010113          	addi	sp,sp,32
    4d20:	00008067          	ret
    4d24:	03c5a683          	lw	a3,60(a1)
    4d28:	e6d048e3          	bgtz	a3,4b98 <__sflush_r+0x44>
    4d2c:	00000513          	li	a0,0
    4d30:	f55ff06f          	j	4c84 <__sflush_r+0x130>
    4d34:	05042603          	lw	a2,80(s0)
    4d38:	ea9ff06f          	j	4be0 <__sflush_r+0x8c>
    4d3c:	00c41783          	lh	a5,12(s0)
    4d40:	01042683          	lw	a3,16(s0)
    4d44:	fffff737          	lui	a4,0xfffff
    4d48:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffef7ff>
    4d4c:	00e7f733          	and	a4,a5,a4
    4d50:	00c7d793          	srli	a5,a5,0xc
    4d54:	00e41623          	sh	a4,12(s0)
    4d58:	00042223          	sw	zero,4(s0)
    4d5c:	00d42023          	sw	a3,0(s0)
    4d60:	0017f793          	andi	a5,a5,1
    4d64:	ee078ee3          	beqz	a5,4c60 <__sflush_r+0x10c>
    4d68:	04a42823          	sw	a0,80(s0)
    4d6c:	ef5ff06f          	j	4c60 <__sflush_r+0x10c>
    4d70:	0009a783          	lw	a5,0(s3)
    4d74:	e60780e3          	beqz	a5,4bd4 <__sflush_r+0x80>
    4d78:	01d00713          	li	a4,29
    4d7c:	00e78663          	beq	a5,a4,4d88 <__sflush_r+0x234>
    4d80:	01600713          	li	a4,22
    4d84:	f6e79ae3          	bne	a5,a4,4cf8 <__sflush_r+0x1a4>
    4d88:	0099a023          	sw	s1,0(s3)
    4d8c:	00000513          	li	a0,0
    4d90:	ef5ff06f          	j	4c84 <__sflush_r+0x130>
    4d94:	ec0696e3          	bnez	a3,4c60 <__sflush_r+0x10c>
    4d98:	04a42823          	sw	a0,80(s0)
    4d9c:	ec5ff06f          	j	4c60 <__sflush_r+0x10c>

00004da0 <_fflush_r>:
    4da0:	ff010113          	addi	sp,sp,-16
    4da4:	00812423          	sw	s0,8(sp)
    4da8:	00912223          	sw	s1,4(sp)
    4dac:	00112623          	sw	ra,12(sp)
    4db0:	01212023          	sw	s2,0(sp)
    4db4:	00050493          	mv	s1,a0
    4db8:	00058413          	mv	s0,a1
    4dbc:	00050663          	beqz	a0,4dc8 <_fflush_r+0x28>
    4dc0:	03852783          	lw	a5,56(a0)
    4dc4:	06078463          	beqz	a5,4e2c <_fflush_r+0x8c>
    4dc8:	00c41783          	lh	a5,12(s0)
    4dcc:	00000913          	li	s2,0
    4dd0:	04078063          	beqz	a5,4e10 <_fflush_r+0x70>
    4dd4:	06442703          	lw	a4,100(s0)
    4dd8:	00177713          	andi	a4,a4,1
    4ddc:	00071663          	bnez	a4,4de8 <_fflush_r+0x48>
    4de0:	2007f793          	andi	a5,a5,512
    4de4:	04078863          	beqz	a5,4e34 <_fflush_r+0x94>
    4de8:	00040593          	mv	a1,s0
    4dec:	00048513          	mv	a0,s1
    4df0:	d65ff0ef          	jal	ra,4b54 <__sflush_r>
    4df4:	06442783          	lw	a5,100(s0)
    4df8:	00050913          	mv	s2,a0
    4dfc:	0017f793          	andi	a5,a5,1
    4e00:	00079863          	bnez	a5,4e10 <_fflush_r+0x70>
    4e04:	00c45783          	lhu	a5,12(s0)
    4e08:	2007f793          	andi	a5,a5,512
    4e0c:	04078863          	beqz	a5,4e5c <_fflush_r+0xbc>
    4e10:	00c12083          	lw	ra,12(sp)
    4e14:	00812403          	lw	s0,8(sp)
    4e18:	00412483          	lw	s1,4(sp)
    4e1c:	00090513          	mv	a0,s2
    4e20:	00012903          	lw	s2,0(sp)
    4e24:	01010113          	addi	sp,sp,16
    4e28:	00008067          	ret
    4e2c:	9a5fd0ef          	jal	ra,27d0 <__sinit>
    4e30:	f99ff06f          	j	4dc8 <_fflush_r+0x28>
    4e34:	05842503          	lw	a0,88(s0)
    4e38:	fdcfe0ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    4e3c:	00040593          	mv	a1,s0
    4e40:	00048513          	mv	a0,s1
    4e44:	d11ff0ef          	jal	ra,4b54 <__sflush_r>
    4e48:	06442783          	lw	a5,100(s0)
    4e4c:	00050913          	mv	s2,a0
    4e50:	0017f793          	andi	a5,a5,1
    4e54:	fa079ee3          	bnez	a5,4e10 <_fflush_r+0x70>
    4e58:	fadff06f          	j	4e04 <_fflush_r+0x64>
    4e5c:	05842503          	lw	a0,88(s0)
    4e60:	fccfe0ef          	jal	ra,362c <__retarget_lock_release_recursive>
    4e64:	00c12083          	lw	ra,12(sp)
    4e68:	00812403          	lw	s0,8(sp)
    4e6c:	00412483          	lw	s1,4(sp)
    4e70:	00090513          	mv	a0,s2
    4e74:	00012903          	lw	s2,0(sp)
    4e78:	01010113          	addi	sp,sp,16
    4e7c:	00008067          	ret

00004e80 <fflush>:
    4e80:	0a050c63          	beqz	a0,4f38 <fflush+0xb8>
    4e84:	ff010113          	addi	sp,sp,-16
    4e88:	00812423          	sw	s0,8(sp)
    4e8c:	01212023          	sw	s2,0(sp)
    4e90:	00112623          	sw	ra,12(sp)
    4e94:	00912223          	sw	s1,4(sp)
    4e98:	00003917          	auipc	s2,0x3
    4e9c:	57092903          	lw	s2,1392(s2) # 8408 <_impure_ptr>
    4ea0:	00050413          	mv	s0,a0
    4ea4:	00090663          	beqz	s2,4eb0 <fflush+0x30>
    4ea8:	03892783          	lw	a5,56(s2)
    4eac:	06078463          	beqz	a5,4f14 <fflush+0x94>
    4eb0:	00c41783          	lh	a5,12(s0)
    4eb4:	00000493          	li	s1,0
    4eb8:	04078063          	beqz	a5,4ef8 <fflush+0x78>
    4ebc:	06442703          	lw	a4,100(s0)
    4ec0:	00177713          	andi	a4,a4,1
    4ec4:	00071663          	bnez	a4,4ed0 <fflush+0x50>
    4ec8:	2007f793          	andi	a5,a5,512
    4ecc:	04078a63          	beqz	a5,4f20 <fflush+0xa0>
    4ed0:	00040593          	mv	a1,s0
    4ed4:	00090513          	mv	a0,s2
    4ed8:	c7dff0ef          	jal	ra,4b54 <__sflush_r>
    4edc:	06442783          	lw	a5,100(s0)
    4ee0:	00050493          	mv	s1,a0
    4ee4:	0017f793          	andi	a5,a5,1
    4ee8:	00079863          	bnez	a5,4ef8 <fflush+0x78>
    4eec:	00c45783          	lhu	a5,12(s0)
    4ef0:	2007f793          	andi	a5,a5,512
    4ef4:	02078c63          	beqz	a5,4f2c <fflush+0xac>
    4ef8:	00c12083          	lw	ra,12(sp)
    4efc:	00812403          	lw	s0,8(sp)
    4f00:	00012903          	lw	s2,0(sp)
    4f04:	00048513          	mv	a0,s1
    4f08:	00412483          	lw	s1,4(sp)
    4f0c:	01010113          	addi	sp,sp,16
    4f10:	00008067          	ret
    4f14:	00090513          	mv	a0,s2
    4f18:	8b9fd0ef          	jal	ra,27d0 <__sinit>
    4f1c:	f95ff06f          	j	4eb0 <fflush+0x30>
    4f20:	05842503          	lw	a0,88(s0)
    4f24:	ef0fe0ef          	jal	ra,3614 <__retarget_lock_acquire_recursive>
    4f28:	fa9ff06f          	j	4ed0 <fflush+0x50>
    4f2c:	05842503          	lw	a0,88(s0)
    4f30:	efcfe0ef          	jal	ra,362c <__retarget_lock_release_recursive>
    4f34:	fc5ff06f          	j	4ef8 <fflush+0x78>
    4f38:	00000597          	auipc	a1,0x0
    4f3c:	e6858593          	addi	a1,a1,-408 # 4da0 <_fflush_r>
    4f40:	00002517          	auipc	a0,0x2
    4f44:	a6852503          	lw	a0,-1432(a0) # 69a8 <_global_impure_ptr>
    4f48:	e04fe06f          	j	354c <_fwalk_reent>

00004f4c <_lseek_r>:
    4f4c:	ff010113          	addi	sp,sp,-16
    4f50:	00058713          	mv	a4,a1
    4f54:	00812423          	sw	s0,8(sp)
    4f58:	00060593          	mv	a1,a2
    4f5c:	00050413          	mv	s0,a0
    4f60:	00068613          	mv	a2,a3
    4f64:	00070513          	mv	a0,a4
    4f68:	00005797          	auipc	a5,0x5
    4f6c:	f407ac23          	sw	zero,-168(a5) # 9ec0 <errno>
    4f70:	00112623          	sw	ra,12(sp)
    4f74:	7cc000ef          	jal	ra,5740 <_lseek>
    4f78:	fff00793          	li	a5,-1
    4f7c:	00f50a63          	beq	a0,a5,4f90 <_lseek_r+0x44>
    4f80:	00c12083          	lw	ra,12(sp)
    4f84:	00812403          	lw	s0,8(sp)
    4f88:	01010113          	addi	sp,sp,16
    4f8c:	00008067          	ret
    4f90:	00005797          	auipc	a5,0x5
    4f94:	f307a783          	lw	a5,-208(a5) # 9ec0 <errno>
    4f98:	fe0784e3          	beqz	a5,4f80 <_lseek_r+0x34>
    4f9c:	00c12083          	lw	ra,12(sp)
    4fa0:	00f42023          	sw	a5,0(s0)
    4fa4:	00812403          	lw	s0,8(sp)
    4fa8:	01010113          	addi	sp,sp,16
    4fac:	00008067          	ret

00004fb0 <__smakebuf_r>:
    4fb0:	00c59783          	lh	a5,12(a1)
    4fb4:	f8010113          	addi	sp,sp,-128
    4fb8:	06812c23          	sw	s0,120(sp)
    4fbc:	06112e23          	sw	ra,124(sp)
    4fc0:	06912a23          	sw	s1,116(sp)
    4fc4:	07212823          	sw	s2,112(sp)
    4fc8:	07312623          	sw	s3,108(sp)
    4fcc:	07412423          	sw	s4,104(sp)
    4fd0:	0027f713          	andi	a4,a5,2
    4fd4:	00058413          	mv	s0,a1
    4fd8:	02070c63          	beqz	a4,5010 <__smakebuf_r+0x60>
    4fdc:	04358793          	addi	a5,a1,67
    4fe0:	00f5a023          	sw	a5,0(a1)
    4fe4:	00f5a823          	sw	a5,16(a1)
    4fe8:	00100793          	li	a5,1
    4fec:	00f5aa23          	sw	a5,20(a1)
    4ff0:	07c12083          	lw	ra,124(sp)
    4ff4:	07812403          	lw	s0,120(sp)
    4ff8:	07412483          	lw	s1,116(sp)
    4ffc:	07012903          	lw	s2,112(sp)
    5000:	06c12983          	lw	s3,108(sp)
    5004:	06812a03          	lw	s4,104(sp)
    5008:	08010113          	addi	sp,sp,128
    500c:	00008067          	ret
    5010:	00e59583          	lh	a1,14(a1)
    5014:	00050493          	mv	s1,a0
    5018:	0805cc63          	bltz	a1,50b0 <__smakebuf_r+0x100>
    501c:	00810613          	addi	a2,sp,8
    5020:	25c000ef          	jal	ra,527c <_fstat_r>
    5024:	08054463          	bltz	a0,50ac <__smakebuf_r+0xfc>
    5028:	00c12783          	lw	a5,12(sp)
    502c:	0000f937          	lui	s2,0xf
    5030:	00001a37          	lui	s4,0x1
    5034:	00f97933          	and	s2,s2,a5
    5038:	ffffe7b7          	lui	a5,0xffffe
    503c:	00f90933          	add	s2,s2,a5
    5040:	00193913          	seqz	s2,s2
    5044:	40000993          	li	s3,1024
    5048:	800a0a13          	addi	s4,s4,-2048 # 800 <altera_avalon_jtag_uart_init+0x28>
    504c:	00098593          	mv	a1,s3
    5050:	00048513          	mv	a0,s1
    5054:	ddcfe0ef          	jal	ra,3630 <_malloc_r>
    5058:	00c41783          	lh	a5,12(s0)
    505c:	06050e63          	beqz	a0,50d8 <__smakebuf_r+0x128>
    5060:	ffffd717          	auipc	a4,0xffffd
    5064:	66470713          	addi	a4,a4,1636 # 26c4 <_cleanup_r>
    5068:	02e4ae23          	sw	a4,60(s1)
    506c:	0807e793          	ori	a5,a5,128
    5070:	00f41623          	sh	a5,12(s0)
    5074:	00a42023          	sw	a0,0(s0)
    5078:	00a42823          	sw	a0,16(s0)
    507c:	01342a23          	sw	s3,20(s0)
    5080:	08091863          	bnez	s2,5110 <__smakebuf_r+0x160>
    5084:	0147e7b3          	or	a5,a5,s4
    5088:	07c12083          	lw	ra,124(sp)
    508c:	00f41623          	sh	a5,12(s0)
    5090:	07812403          	lw	s0,120(sp)
    5094:	07412483          	lw	s1,116(sp)
    5098:	07012903          	lw	s2,112(sp)
    509c:	06c12983          	lw	s3,108(sp)
    50a0:	06812a03          	lw	s4,104(sp)
    50a4:	08010113          	addi	sp,sp,128
    50a8:	00008067          	ret
    50ac:	00c41783          	lh	a5,12(s0)
    50b0:	0807f793          	andi	a5,a5,128
    50b4:	00000913          	li	s2,0
    50b8:	04078663          	beqz	a5,5104 <__smakebuf_r+0x154>
    50bc:	04000993          	li	s3,64
    50c0:	00098593          	mv	a1,s3
    50c4:	00048513          	mv	a0,s1
    50c8:	d68fe0ef          	jal	ra,3630 <_malloc_r>
    50cc:	00c41783          	lh	a5,12(s0)
    50d0:	00000a13          	li	s4,0
    50d4:	f80516e3          	bnez	a0,5060 <__smakebuf_r+0xb0>
    50d8:	2007f713          	andi	a4,a5,512
    50dc:	f0071ae3          	bnez	a4,4ff0 <__smakebuf_r+0x40>
    50e0:	ffc7f793          	andi	a5,a5,-4
    50e4:	0027e793          	ori	a5,a5,2
    50e8:	04340713          	addi	a4,s0,67
    50ec:	00f41623          	sh	a5,12(s0)
    50f0:	00100793          	li	a5,1
    50f4:	00e42023          	sw	a4,0(s0)
    50f8:	00e42823          	sw	a4,16(s0)
    50fc:	00f42a23          	sw	a5,20(s0)
    5100:	ef1ff06f          	j	4ff0 <__smakebuf_r+0x40>
    5104:	40000993          	li	s3,1024
    5108:	00000a13          	li	s4,0
    510c:	f41ff06f          	j	504c <__smakebuf_r+0x9c>
    5110:	00e41583          	lh	a1,14(s0)
    5114:	00048513          	mv	a0,s1
    5118:	1c4000ef          	jal	ra,52dc <_isatty_r>
    511c:	00051663          	bnez	a0,5128 <__smakebuf_r+0x178>
    5120:	00c41783          	lh	a5,12(s0)
    5124:	f61ff06f          	j	5084 <__smakebuf_r+0xd4>
    5128:	00c45783          	lhu	a5,12(s0)
    512c:	ffc7f793          	andi	a5,a5,-4
    5130:	0017e793          	ori	a5,a5,1
    5134:	01079793          	slli	a5,a5,0x10
    5138:	4107d793          	srai	a5,a5,0x10
    513c:	f49ff06f          	j	5084 <__smakebuf_r+0xd4>

00005140 <__swhatbuf_r>:
    5140:	f9010113          	addi	sp,sp,-112
    5144:	06812423          	sw	s0,104(sp)
    5148:	00058413          	mv	s0,a1
    514c:	00e59583          	lh	a1,14(a1)
    5150:	06912223          	sw	s1,100(sp)
    5154:	07212023          	sw	s2,96(sp)
    5158:	06112623          	sw	ra,108(sp)
    515c:	00060493          	mv	s1,a2
    5160:	00068913          	mv	s2,a3
    5164:	0405ca63          	bltz	a1,51b8 <__swhatbuf_r+0x78>
    5168:	00810613          	addi	a2,sp,8
    516c:	110000ef          	jal	ra,527c <_fstat_r>
    5170:	04054463          	bltz	a0,51b8 <__swhatbuf_r+0x78>
    5174:	00c12703          	lw	a4,12(sp)
    5178:	0000f7b7          	lui	a5,0xf
    517c:	06c12083          	lw	ra,108(sp)
    5180:	00e7f7b3          	and	a5,a5,a4
    5184:	ffffe737          	lui	a4,0xffffe
    5188:	00e787b3          	add	a5,a5,a4
    518c:	06812403          	lw	s0,104(sp)
    5190:	0017b793          	seqz	a5,a5
    5194:	00f92023          	sw	a5,0(s2) # f000 <__alt_heap_start+0x5060>
    5198:	40000713          	li	a4,1024
    519c:	00e4a023          	sw	a4,0(s1)
    51a0:	00001537          	lui	a0,0x1
    51a4:	06412483          	lw	s1,100(sp)
    51a8:	06012903          	lw	s2,96(sp)
    51ac:	80050513          	addi	a0,a0,-2048 # 800 <altera_avalon_jtag_uart_init+0x28>
    51b0:	07010113          	addi	sp,sp,112
    51b4:	00008067          	ret
    51b8:	00c45783          	lhu	a5,12(s0)
    51bc:	0807f793          	andi	a5,a5,128
    51c0:	02078863          	beqz	a5,51f0 <__swhatbuf_r+0xb0>
    51c4:	06c12083          	lw	ra,108(sp)
    51c8:	06812403          	lw	s0,104(sp)
    51cc:	00000793          	li	a5,0
    51d0:	00f92023          	sw	a5,0(s2)
    51d4:	04000713          	li	a4,64
    51d8:	00e4a023          	sw	a4,0(s1)
    51dc:	06012903          	lw	s2,96(sp)
    51e0:	06412483          	lw	s1,100(sp)
    51e4:	00000513          	li	a0,0
    51e8:	07010113          	addi	sp,sp,112
    51ec:	00008067          	ret
    51f0:	06c12083          	lw	ra,108(sp)
    51f4:	06812403          	lw	s0,104(sp)
    51f8:	00f92023          	sw	a5,0(s2)
    51fc:	40000713          	li	a4,1024
    5200:	00e4a023          	sw	a4,0(s1)
    5204:	06012903          	lw	s2,96(sp)
    5208:	06412483          	lw	s1,100(sp)
    520c:	00000513          	li	a0,0
    5210:	07010113          	addi	sp,sp,112
    5214:	00008067          	ret

00005218 <_read_r>:
    5218:	ff010113          	addi	sp,sp,-16
    521c:	00058713          	mv	a4,a1
    5220:	00812423          	sw	s0,8(sp)
    5224:	00060593          	mv	a1,a2
    5228:	00050413          	mv	s0,a0
    522c:	00068613          	mv	a2,a3
    5230:	00070513          	mv	a0,a4
    5234:	00005797          	auipc	a5,0x5
    5238:	c807a623          	sw	zero,-884(a5) # 9ec0 <errno>
    523c:	00112623          	sw	ra,12(sp)
    5240:	0cd000ef          	jal	ra,5b0c <_read>
    5244:	fff00793          	li	a5,-1
    5248:	00f50a63          	beq	a0,a5,525c <_read_r+0x44>
    524c:	00c12083          	lw	ra,12(sp)
    5250:	00812403          	lw	s0,8(sp)
    5254:	01010113          	addi	sp,sp,16
    5258:	00008067          	ret
    525c:	00005797          	auipc	a5,0x5
    5260:	c647a783          	lw	a5,-924(a5) # 9ec0 <errno>
    5264:	fe0784e3          	beqz	a5,524c <_read_r+0x34>
    5268:	00c12083          	lw	ra,12(sp)
    526c:	00f42023          	sw	a5,0(s0)
    5270:	00812403          	lw	s0,8(sp)
    5274:	01010113          	addi	sp,sp,16
    5278:	00008067          	ret

0000527c <_fstat_r>:
    527c:	ff010113          	addi	sp,sp,-16
    5280:	00058713          	mv	a4,a1
    5284:	00812423          	sw	s0,8(sp)
    5288:	00060593          	mv	a1,a2
    528c:	00050413          	mv	s0,a0
    5290:	00070513          	mv	a0,a4
    5294:	00005797          	auipc	a5,0x5
    5298:	c207a623          	sw	zero,-980(a5) # 9ec0 <errno>
    529c:	00112623          	sw	ra,12(sp)
    52a0:	24c000ef          	jal	ra,54ec <_fstat>
    52a4:	fff00793          	li	a5,-1
    52a8:	00f50a63          	beq	a0,a5,52bc <_fstat_r+0x40>
    52ac:	00c12083          	lw	ra,12(sp)
    52b0:	00812403          	lw	s0,8(sp)
    52b4:	01010113          	addi	sp,sp,16
    52b8:	00008067          	ret
    52bc:	00005797          	auipc	a5,0x5
    52c0:	c047a783          	lw	a5,-1020(a5) # 9ec0 <errno>
    52c4:	fe0784e3          	beqz	a5,52ac <_fstat_r+0x30>
    52c8:	00c12083          	lw	ra,12(sp)
    52cc:	00f42023          	sw	a5,0(s0)
    52d0:	00812403          	lw	s0,8(sp)
    52d4:	01010113          	addi	sp,sp,16
    52d8:	00008067          	ret

000052dc <_isatty_r>:
    52dc:	ff010113          	addi	sp,sp,-16
    52e0:	00812423          	sw	s0,8(sp)
    52e4:	00050413          	mv	s0,a0
    52e8:	00058513          	mv	a0,a1
    52ec:	00005797          	auipc	a5,0x5
    52f0:	bc07aa23          	sw	zero,-1068(a5) # 9ec0 <errno>
    52f4:	00112623          	sw	ra,12(sp)
    52f8:	300000ef          	jal	ra,55f8 <_isatty>
    52fc:	fff00793          	li	a5,-1
    5300:	00f50a63          	beq	a0,a5,5314 <_isatty_r+0x38>
    5304:	00c12083          	lw	ra,12(sp)
    5308:	00812403          	lw	s0,8(sp)
    530c:	01010113          	addi	sp,sp,16
    5310:	00008067          	ret
    5314:	00005797          	auipc	a5,0x5
    5318:	bac7a783          	lw	a5,-1108(a5) # 9ec0 <errno>
    531c:	fe0784e3          	beqz	a5,5304 <_isatty_r+0x28>
    5320:	00c12083          	lw	ra,12(sp)
    5324:	00f42023          	sw	a5,0(s0)
    5328:	00812403          	lw	s0,8(sp)
    532c:	01010113          	addi	sp,sp,16
    5330:	00008067          	ret

00005334 <alt_get_errno>:
{
    5334:	ff010113          	addi	sp,sp,-16
    5338:	00112623          	sw	ra,12(sp)
    533c:	00812423          	sw	s0,8(sp)
    5340:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5344:	000087b7          	lui	a5,0x8
    5348:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    534c:	00078c63          	beqz	a5,5364 <alt_get_errno+0x30>
    5350:	000087b7          	lui	a5,0x8
    5354:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5358:	000780e7          	jalr	a5
    535c:	00050793          	mv	a5,a0
    5360:	00c0006f          	j	536c <alt_get_errno+0x38>
    5364:	0000a7b7          	lui	a5,0xa
    5368:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    536c:	00078513          	mv	a0,a5
    5370:	00c12083          	lw	ra,12(sp)
    5374:	00812403          	lw	s0,8(sp)
    5378:	01010113          	addi	sp,sp,16
    537c:	00008067          	ret

00005380 <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5380:	fd010113          	addi	sp,sp,-48
    5384:	02112623          	sw	ra,44(sp)
    5388:	02812423          	sw	s0,40(sp)
    538c:	03010413          	addi	s0,sp,48
    5390:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5394:	fdc42783          	lw	a5,-36(s0)
    5398:	0207c463          	bltz	a5,53c0 <_close+0x40>
    539c:	fdc42703          	lw	a4,-36(s0)
    53a0:	00070793          	mv	a5,a4
    53a4:	00179793          	slli	a5,a5,0x1
    53a8:	00e787b3          	add	a5,a5,a4
    53ac:	00279793          	slli	a5,a5,0x2
    53b0:	00008737          	lui	a4,0x8
    53b4:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    53b8:	00e787b3          	add	a5,a5,a4
    53bc:	0080006f          	j	53c4 <_close+0x44>
    53c0:	00000793          	li	a5,0
    53c4:	fef42423          	sw	a5,-24(s0)

  if (fd)
    53c8:	fe842783          	lw	a5,-24(s0)
    53cc:	06078663          	beqz	a5,5438 <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    53d0:	fe842783          	lw	a5,-24(s0)
    53d4:	0007a783          	lw	a5,0(a5)
    53d8:	0107a783          	lw	a5,16(a5)
    53dc:	02078063          	beqz	a5,53fc <_close+0x7c>
    53e0:	fe842783          	lw	a5,-24(s0)
    53e4:	0007a783          	lw	a5,0(a5)
    53e8:	0107a783          	lw	a5,16(a5)
    53ec:	fe842503          	lw	a0,-24(s0)
    53f0:	000780e7          	jalr	a5
    53f4:	00050793          	mv	a5,a0
    53f8:	0080006f          	j	5400 <_close+0x80>
    53fc:	00000793          	li	a5,0
    5400:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5404:	fdc42503          	lw	a0,-36(s0)
    5408:	ce4fc0ef          	jal	ra,18ec <alt_release_fd>
    if (rval < 0)
    540c:	fec42783          	lw	a5,-20(s0)
    5410:	0207d063          	bgez	a5,5430 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
    5414:	f21ff0ef          	jal	ra,5334 <alt_get_errno>
    5418:	00050713          	mv	a4,a0
    541c:	fec42783          	lw	a5,-20(s0)
    5420:	40f007b3          	neg	a5,a5
    5424:	00f72023          	sw	a5,0(a4)
      return -1;
    5428:	fff00793          	li	a5,-1
    542c:	0200006f          	j	544c <_close+0xcc>
    }
    return 0;
    5430:	00000793          	li	a5,0
    5434:	0180006f          	j	544c <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5438:	efdff0ef          	jal	ra,5334 <alt_get_errno>
    543c:	00050713          	mv	a4,a0
    5440:	05100793          	li	a5,81
    5444:	00f72023          	sw	a5,0(a4)
    return -1;
    5448:	fff00793          	li	a5,-1
  }
}
    544c:	00078513          	mv	a0,a5
    5450:	02c12083          	lw	ra,44(sp)
    5454:	02812403          	lw	s0,40(sp)
    5458:	03010113          	addi	sp,sp,48
    545c:	00008067          	ret

00005460 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5460:	fd010113          	addi	sp,sp,-48
    5464:	02812623          	sw	s0,44(sp)
    5468:	03010413          	addi	s0,sp,48
    546c:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5470:	00000013          	nop
    5474:	fdc42783          	lw	a5,-36(s0)
    5478:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
    547c:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
    5480:	00050793          	mv	a5,a0
    5484:	00078663          	beqz	a5,5490 <_exit+0x30>
    ALT_SIM_FAIL();
    5488:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    548c:	0080006f          	j	5494 <_exit+0x34>
    ALT_SIM_PASS();
    5490:	7c203013          	sltiu	zero,zero,1986
}
    5494:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5498:	00000013          	nop
    549c:	ffdff06f          	j	5498 <_exit+0x38>

000054a0 <alt_get_errno>:
{
    54a0:	ff010113          	addi	sp,sp,-16
    54a4:	00112623          	sw	ra,12(sp)
    54a8:	00812423          	sw	s0,8(sp)
    54ac:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    54b0:	000087b7          	lui	a5,0x8
    54b4:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    54b8:	00078c63          	beqz	a5,54d0 <alt_get_errno+0x30>
    54bc:	000087b7          	lui	a5,0x8
    54c0:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    54c4:	000780e7          	jalr	a5
    54c8:	00050793          	mv	a5,a0
    54cc:	00c0006f          	j	54d8 <alt_get_errno+0x38>
    54d0:	0000a7b7          	lui	a5,0xa
    54d4:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    54d8:	00078513          	mv	a0,a5
    54dc:	00c12083          	lw	ra,12(sp)
    54e0:	00812403          	lw	s0,8(sp)
    54e4:	01010113          	addi	sp,sp,16
    54e8:	00008067          	ret

000054ec <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    54ec:	fd010113          	addi	sp,sp,-48
    54f0:	02112623          	sw	ra,44(sp)
    54f4:	02812423          	sw	s0,40(sp)
    54f8:	03010413          	addi	s0,sp,48
    54fc:	fca42e23          	sw	a0,-36(s0)
    5500:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5504:	fdc42783          	lw	a5,-36(s0)
    5508:	0207c463          	bltz	a5,5530 <_fstat+0x44>
    550c:	fdc42703          	lw	a4,-36(s0)
    5510:	00070793          	mv	a5,a4
    5514:	00179793          	slli	a5,a5,0x1
    5518:	00e787b3          	add	a5,a5,a4
    551c:	00279793          	slli	a5,a5,0x2
    5520:	00008737          	lui	a4,0x8
    5524:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    5528:	00e787b3          	add	a5,a5,a4
    552c:	0080006f          	j	5534 <_fstat+0x48>
    5530:	00000793          	li	a5,0
    5534:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
    5538:	fec42783          	lw	a5,-20(s0)
    553c:	04078463          	beqz	a5,5584 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    5540:	fec42783          	lw	a5,-20(s0)
    5544:	0007a783          	lw	a5,0(a5)
    5548:	0207a783          	lw	a5,32(a5)
    554c:	02078263          	beqz	a5,5570 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
    5550:	fec42783          	lw	a5,-20(s0)
    5554:	0007a783          	lw	a5,0(a5)
    5558:	0207a783          	lw	a5,32(a5)
    555c:	fd842583          	lw	a1,-40(s0)
    5560:	fec42503          	lw	a0,-20(s0)
    5564:	000780e7          	jalr	a5
    5568:	00050793          	mv	a5,a0
    556c:	02c0006f          	j	5598 <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    5570:	fd842783          	lw	a5,-40(s0)
    5574:	00002737          	lui	a4,0x2
    5578:	00e7a223          	sw	a4,4(a5)
      return 0;
    557c:	00000793          	li	a5,0
    5580:	0180006f          	j	5598 <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5584:	f1dff0ef          	jal	ra,54a0 <alt_get_errno>
    5588:	00050713          	mv	a4,a0
    558c:	05100793          	li	a5,81
    5590:	00f72023          	sw	a5,0(a4) # 2000 <memcpy+0x14c>
    return -1;
    5594:	fff00793          	li	a5,-1
  }
}
    5598:	00078513          	mv	a0,a5
    559c:	02c12083          	lw	ra,44(sp)
    55a0:	02812403          	lw	s0,40(sp)
    55a4:	03010113          	addi	sp,sp,48
    55a8:	00008067          	ret

000055ac <alt_get_errno>:
{
    55ac:	ff010113          	addi	sp,sp,-16
    55b0:	00112623          	sw	ra,12(sp)
    55b4:	00812423          	sw	s0,8(sp)
    55b8:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    55bc:	000087b7          	lui	a5,0x8
    55c0:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    55c4:	00078c63          	beqz	a5,55dc <alt_get_errno+0x30>
    55c8:	000087b7          	lui	a5,0x8
    55cc:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    55d0:	000780e7          	jalr	a5
    55d4:	00050793          	mv	a5,a0
    55d8:	00c0006f          	j	55e4 <alt_get_errno+0x38>
    55dc:	0000a7b7          	lui	a5,0xa
    55e0:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    55e4:	00078513          	mv	a0,a5
    55e8:	00c12083          	lw	ra,12(sp)
    55ec:	00812403          	lw	s0,8(sp)
    55f0:	01010113          	addi	sp,sp,16
    55f4:	00008067          	ret

000055f8 <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    55f8:	f7010113          	addi	sp,sp,-144
    55fc:	08112623          	sw	ra,140(sp)
    5600:	08812423          	sw	s0,136(sp)
    5604:	09010413          	addi	s0,sp,144
    5608:	f6a42e23          	sw	a0,-132(s0)
    560c:	0000a7b7          	lui	a5,0xa
    5610:	ef47a703          	lw	a4,-268(a5) # 9ef4 <__stack_chk_guard>
    5614:	fee42623          	sw	a4,-20(s0)
    5618:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
    561c:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5620:	f7c42783          	lw	a5,-132(s0)
    5624:	0207c463          	bltz	a5,564c <_isatty+0x54>
    5628:	f7c42703          	lw	a4,-132(s0)
    562c:	00070793          	mv	a5,a4
    5630:	00179793          	slli	a5,a5,0x1
    5634:	00e787b3          	add	a5,a5,a4
    5638:	00279793          	slli	a5,a5,0x2
    563c:	00008737          	lui	a4,0x8
    5640:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    5644:	00e787b3          	add	a5,a5,a4
    5648:	0080006f          	j	5650 <_isatty+0x58>
    564c:	00000793          	li	a5,0
    5650:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
    5654:	f8c42783          	lw	a5,-116(s0)
    5658:	04078a63          	beqz	a5,56ac <_isatty+0xb4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    565c:	f8c42783          	lw	a5,-116(s0)
    5660:	0007a783          	lw	a5,0(a5)
    5664:	0207a783          	lw	a5,32(a5)
    5668:	00079663          	bnez	a5,5674 <_isatty+0x7c>
    {
      return 1;
    566c:	00100793          	li	a5,1
    5670:	0500006f          	j	56c0 <_isatty+0xc8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
    5674:	f9040793          	addi	a5,s0,-112
    5678:	00078593          	mv	a1,a5
    567c:	f7c42503          	lw	a0,-132(s0)
    5680:	37d000ef          	jal	ra,61fc <fstat>
    5684:	00050793          	mv	a5,a0
    5688:	0007d663          	bgez	a5,5694 <_isatty+0x9c>
        return 0;  // fstat will set ERRNO
    568c:	00000793          	li	a5,0
    5690:	0300006f          	j	56c0 <_isatty+0xc8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
    5694:	f9442703          	lw	a4,-108(s0)
    5698:	ffffe7b7          	lui	a5,0xffffe
    569c:	00f707b3          	add	a5,a4,a5
    56a0:	0017b793          	seqz	a5,a5
    56a4:	0ff7f793          	zext.b	a5,a5
    56a8:	0180006f          	j	56c0 <_isatty+0xc8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    56ac:	f01ff0ef          	jal	ra,55ac <alt_get_errno>
    56b0:	00050713          	mv	a4,a0
    56b4:	05100793          	li	a5,81
    56b8:	00f72023          	sw	a5,0(a4)
    return 0;
    56bc:	00000793          	li	a5,0
  }
}
    56c0:	00078713          	mv	a4,a5
    56c4:	0000a7b7          	lui	a5,0xa
    56c8:	fec42683          	lw	a3,-20(s0)
    56cc:	ef47a783          	lw	a5,-268(a5) # 9ef4 <__stack_chk_guard>
    56d0:	00f6c7b3          	xor	a5,a3,a5
    56d4:	00000693          	li	a3,0
    56d8:	00078463          	beqz	a5,56e0 <_isatty+0xe8>
    56dc:	261000ef          	jal	ra,613c <__stack_chk_fail>
    56e0:	00070513          	mv	a0,a4
    56e4:	08c12083          	lw	ra,140(sp)
    56e8:	08812403          	lw	s0,136(sp)
    56ec:	09010113          	addi	sp,sp,144
    56f0:	00008067          	ret

000056f4 <alt_get_errno>:
{
    56f4:	ff010113          	addi	sp,sp,-16
    56f8:	00112623          	sw	ra,12(sp)
    56fc:	00812423          	sw	s0,8(sp)
    5700:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5704:	000087b7          	lui	a5,0x8
    5708:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    570c:	00078c63          	beqz	a5,5724 <alt_get_errno+0x30>
    5710:	000087b7          	lui	a5,0x8
    5714:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5718:	000780e7          	jalr	a5
    571c:	00050793          	mv	a5,a0
    5720:	00c0006f          	j	572c <alt_get_errno+0x38>
    5724:	0000a7b7          	lui	a5,0xa
    5728:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    572c:	00078513          	mv	a0,a5
    5730:	00c12083          	lw	ra,12(sp)
    5734:	00812403          	lw	s0,8(sp)
    5738:	01010113          	addi	sp,sp,16
    573c:	00008067          	ret

00005740 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    5740:	fd010113          	addi	sp,sp,-48
    5744:	02112623          	sw	ra,44(sp)
    5748:	02812423          	sw	s0,40(sp)
    574c:	03010413          	addi	s0,sp,48
    5750:	fca42e23          	sw	a0,-36(s0)
    5754:	fcb42c23          	sw	a1,-40(s0)
    5758:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
    575c:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5760:	fdc42783          	lw	a5,-36(s0)
    5764:	0207c463          	bltz	a5,578c <_lseek+0x4c>
    5768:	fdc42703          	lw	a4,-36(s0)
    576c:	00070793          	mv	a5,a4
    5770:	00179793          	slli	a5,a5,0x1
    5774:	00e787b3          	add	a5,a5,a4
    5778:	00279793          	slli	a5,a5,0x2
    577c:	00008737          	lui	a4,0x8
    5780:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    5784:	00e787b3          	add	a5,a5,a4
    5788:	0080006f          	j	5790 <_lseek+0x50>
    578c:	00000793          	li	a5,0
    5790:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
    5794:	fec42783          	lw	a5,-20(s0)
    5798:	04078263          	beqz	a5,57dc <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    579c:	fec42783          	lw	a5,-20(s0)
    57a0:	0007a783          	lw	a5,0(a5)
    57a4:	01c7a783          	lw	a5,28(a5)
    57a8:	02078463          	beqz	a5,57d0 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    57ac:	fec42783          	lw	a5,-20(s0)
    57b0:	0007a783          	lw	a5,0(a5)
    57b4:	01c7a783          	lw	a5,28(a5)
    57b8:	fd442603          	lw	a2,-44(s0)
    57bc:	fd842583          	lw	a1,-40(s0)
    57c0:	fec42503          	lw	a0,-20(s0)
    57c4:	000780e7          	jalr	a5
    57c8:	fea42423          	sw	a0,-24(s0)
    57cc:	0180006f          	j	57e4 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    57d0:	f7a00793          	li	a5,-134
    57d4:	fef42423          	sw	a5,-24(s0)
    57d8:	00c0006f          	j	57e4 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    57dc:	faf00793          	li	a5,-81
    57e0:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
    57e4:	fe842783          	lw	a5,-24(s0)
    57e8:	0207d063          	bgez	a5,5808 <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    57ec:	f09ff0ef          	jal	ra,56f4 <alt_get_errno>
    57f0:	00050713          	mv	a4,a0
    57f4:	fe842783          	lw	a5,-24(s0)
    57f8:	40f007b3          	neg	a5,a5
    57fc:	00f72023          	sw	a5,0(a4)
    rc = -1;
    5800:	fff00793          	li	a5,-1
    5804:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
    5808:	fe842783          	lw	a5,-24(s0)
}
    580c:	00078513          	mv	a0,a5
    5810:	02c12083          	lw	ra,44(sp)
    5814:	02812403          	lw	s0,40(sp)
    5818:	03010113          	addi	sp,sp,48
    581c:	00008067          	ret

00005820 <alt_get_errno>:
{
    5820:	ff010113          	addi	sp,sp,-16
    5824:	00112623          	sw	ra,12(sp)
    5828:	00812423          	sw	s0,8(sp)
    582c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5830:	000087b7          	lui	a5,0x8
    5834:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5838:	00078c63          	beqz	a5,5850 <alt_get_errno+0x30>
    583c:	000087b7          	lui	a5,0x8
    5840:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5844:	000780e7          	jalr	a5
    5848:	00050793          	mv	a5,a0
    584c:	00c0006f          	j	5858 <alt_get_errno+0x38>
    5850:	0000a7b7          	lui	a5,0xa
    5854:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    5858:	00078513          	mv	a0,a5
    585c:	00c12083          	lw	ra,12(sp)
    5860:	00812403          	lw	s0,8(sp)
    5864:	01010113          	addi	sp,sp,16
    5868:	00008067          	ret

0000586c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    586c:	fd010113          	addi	sp,sp,-48
    5870:	02812623          	sw	s0,44(sp)
    5874:	03010413          	addi	s0,sp,48
    5878:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    587c:	fdc42783          	lw	a5,-36(s0)
    5880:	0087a703          	lw	a4,8(a5)
    5884:	400007b7          	lui	a5,0x40000
    5888:	00f76733          	or	a4,a4,a5
    588c:	fdc42783          	lw	a5,-36(s0)
    5890:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3fff0008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5894:	fe042623          	sw	zero,-20(s0)
    5898:	0980006f          	j	5930 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    589c:	000087b7          	lui	a5,0x8
    58a0:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    58a4:	fec42703          	lw	a4,-20(s0)
    58a8:	00070793          	mv	a5,a4
    58ac:	00179793          	slli	a5,a5,0x1
    58b0:	00e787b3          	add	a5,a5,a4
    58b4:	00279793          	slli	a5,a5,0x2
    58b8:	00f687b3          	add	a5,a3,a5
    58bc:	0007a703          	lw	a4,0(a5)
    58c0:	fdc42783          	lw	a5,-36(s0)
    58c4:	0007a783          	lw	a5,0(a5)
    58c8:	04f71e63          	bne	a4,a5,5924 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    58cc:	000087b7          	lui	a5,0x8
    58d0:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    58d4:	fec42703          	lw	a4,-20(s0)
    58d8:	00070793          	mv	a5,a4
    58dc:	00179793          	slli	a5,a5,0x1
    58e0:	00e787b3          	add	a5,a5,a4
    58e4:	00279793          	slli	a5,a5,0x2
    58e8:	00f687b3          	add	a5,a3,a5
    58ec:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
    58f0:	0207da63          	bgez	a5,5924 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
    58f4:	fec42703          	lw	a4,-20(s0)
    58f8:	00070793          	mv	a5,a4
    58fc:	00179793          	slli	a5,a5,0x1
    5900:	00e787b3          	add	a5,a5,a4
    5904:	00279793          	slli	a5,a5,0x2
    5908:	00008737          	lui	a4,0x8
    590c:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    5910:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5914:	fdc42703          	lw	a4,-36(s0)
    5918:	00f70663          	beq	a4,a5,5924 <alt_file_locked+0xb8>
    {
      return -EACCES;
    591c:	ff300793          	li	a5,-13
    5920:	0280006f          	j	5948 <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
    5924:	fec42783          	lw	a5,-20(s0)
    5928:	00178793          	addi	a5,a5,1
    592c:	fef42623          	sw	a5,-20(s0)
    5930:	000087b7          	lui	a5,0x8
    5934:	3f87a783          	lw	a5,1016(a5) # 83f8 <alt_max_fd>
    5938:	00078713          	mv	a4,a5
    593c:	fec42783          	lw	a5,-20(s0)
    5940:	f4f77ee3          	bgeu	a4,a5,589c <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5944:	00000793          	li	a5,0
}
    5948:	00078513          	mv	a0,a5
    594c:	02c12403          	lw	s0,44(sp)
    5950:	03010113          	addi	sp,sp,48
    5954:	00008067          	ret

00005958 <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5958:	fc010113          	addi	sp,sp,-64
    595c:	02112e23          	sw	ra,60(sp)
    5960:	02812c23          	sw	s0,56(sp)
    5964:	04010413          	addi	s0,sp,64
    5968:	fca42623          	sw	a0,-52(s0)
    596c:	fcb42423          	sw	a1,-56(s0)
    5970:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5974:	fff00793          	li	a5,-1
    5978:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
    597c:	fed00793          	li	a5,-19
    5980:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
    5984:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5988:	000087b7          	lui	a5,0x8
    598c:	3f078593          	addi	a1,a5,1008 # 83f0 <alt_dev_list>
    5990:	fcc42503          	lw	a0,-52(s0)
    5994:	484000ef          	jal	ra,5e18 <alt_find_dev>
    5998:	fca42e23          	sw	a0,-36(s0)
    599c:	fdc42783          	lw	a5,-36(s0)
    59a0:	00079c63          	bnez	a5,59b8 <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    59a4:	fcc42503          	lw	a0,-52(s0)
    59a8:	590000ef          	jal	ra,5f38 <alt_find_file>
    59ac:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
    59b0:	00100793          	li	a5,1
    59b4:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    59b8:	fdc42783          	lw	a5,-36(s0)
    59bc:	0a078c63          	beqz	a5,5a74 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    59c0:	fdc42503          	lw	a0,-36(s0)
    59c4:	6b0000ef          	jal	ra,6074 <alt_get_fd>
    59c8:	fea42023          	sw	a0,-32(s0)
    59cc:	fe042783          	lw	a5,-32(s0)
    59d0:	0007d863          	bgez	a5,59e0 <_open+0x88>
    {
      status = index;
    59d4:	fe042783          	lw	a5,-32(s0)
    59d8:	fef42223          	sw	a5,-28(s0)
    59dc:	0a00006f          	j	5a7c <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
    59e0:	fe042703          	lw	a4,-32(s0)
    59e4:	00070793          	mv	a5,a4
    59e8:	00179793          	slli	a5,a5,0x1
    59ec:	00e787b3          	add	a5,a5,a4
    59f0:	00279793          	slli	a5,a5,0x2
    59f4:	00008737          	lui	a4,0x8
    59f8:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    59fc:	00e787b3          	add	a5,a5,a4
    5a00:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5a04:	fc842703          	lw	a4,-56(s0)
    5a08:	400007b7          	lui	a5,0x40000
    5a0c:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffeffff>
    5a10:	00f77733          	and	a4,a4,a5
    5a14:	fec42783          	lw	a5,-20(s0)
    5a18:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5a1c:	fe842783          	lw	a5,-24(s0)
    5a20:	00079c63          	bnez	a5,5a38 <_open+0xe0>
    5a24:	fec42503          	lw	a0,-20(s0)
    5a28:	e45ff0ef          	jal	ra,586c <alt_file_locked>
    5a2c:	fea42223          	sw	a0,-28(s0)
    5a30:	fe442783          	lw	a5,-28(s0)
    5a34:	0407c463          	bltz	a5,5a7c <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5a38:	fdc42783          	lw	a5,-36(s0)
    5a3c:	00c7a783          	lw	a5,12(a5)
    5a40:	02078463          	beqz	a5,5a68 <_open+0x110>
    5a44:	fdc42783          	lw	a5,-36(s0)
    5a48:	00c7a783          	lw	a5,12(a5)
    5a4c:	fc442683          	lw	a3,-60(s0)
    5a50:	fc842603          	lw	a2,-56(s0)
    5a54:	fcc42583          	lw	a1,-52(s0)
    5a58:	fec42503          	lw	a0,-20(s0)
    5a5c:	000780e7          	jalr	a5
    5a60:	00050793          	mv	a5,a0
    5a64:	0080006f          	j	5a6c <_open+0x114>
    5a68:	00000793          	li	a5,0
    5a6c:	fef42223          	sw	a5,-28(s0)
    5a70:	00c0006f          	j	5a7c <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5a74:	fed00793          	li	a5,-19
    5a78:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5a7c:	fe442783          	lw	a5,-28(s0)
    5a80:	0207d463          	bgez	a5,5aa8 <_open+0x150>
  {
    alt_release_fd (index);  
    5a84:	fe042503          	lw	a0,-32(s0)
    5a88:	e65fb0ef          	jal	ra,18ec <alt_release_fd>
    ALT_ERRNO = -status;
    5a8c:	d95ff0ef          	jal	ra,5820 <alt_get_errno>
    5a90:	00050713          	mv	a4,a0
    5a94:	fe442783          	lw	a5,-28(s0)
    5a98:	40f007b3          	neg	a5,a5
    5a9c:	00f72023          	sw	a5,0(a4)
    return -1;
    5aa0:	fff00793          	li	a5,-1
    5aa4:	0080006f          	j	5aac <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
    5aa8:	fe042783          	lw	a5,-32(s0)
}
    5aac:	00078513          	mv	a0,a5
    5ab0:	03c12083          	lw	ra,60(sp)
    5ab4:	03812403          	lw	s0,56(sp)
    5ab8:	04010113          	addi	sp,sp,64
    5abc:	00008067          	ret

00005ac0 <alt_get_errno>:
{
    5ac0:	ff010113          	addi	sp,sp,-16
    5ac4:	00112623          	sw	ra,12(sp)
    5ac8:	00812423          	sw	s0,8(sp)
    5acc:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5ad0:	000087b7          	lui	a5,0x8
    5ad4:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5ad8:	00078c63          	beqz	a5,5af0 <alt_get_errno+0x30>
    5adc:	000087b7          	lui	a5,0x8
    5ae0:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5ae4:	000780e7          	jalr	a5
    5ae8:	00050793          	mv	a5,a0
    5aec:	00c0006f          	j	5af8 <alt_get_errno+0x38>
    5af0:	0000a7b7          	lui	a5,0xa
    5af4:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    5af8:	00078513          	mv	a0,a5
    5afc:	00c12083          	lw	ra,12(sp)
    5b00:	00812403          	lw	s0,8(sp)
    5b04:	01010113          	addi	sp,sp,16
    5b08:	00008067          	ret

00005b0c <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5b0c:	fd010113          	addi	sp,sp,-48
    5b10:	02112623          	sw	ra,44(sp)
    5b14:	02812423          	sw	s0,40(sp)
    5b18:	03010413          	addi	s0,sp,48
    5b1c:	fca42e23          	sw	a0,-36(s0)
    5b20:	fcb42c23          	sw	a1,-40(s0)
    5b24:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5b28:	fdc42783          	lw	a5,-36(s0)
    5b2c:	0207c463          	bltz	a5,5b54 <_read+0x48>
    5b30:	fdc42703          	lw	a4,-36(s0)
    5b34:	00070793          	mv	a5,a4
    5b38:	00179793          	slli	a5,a5,0x1
    5b3c:	00e787b3          	add	a5,a5,a4
    5b40:	00279793          	slli	a5,a5,0x2
    5b44:	00008737          	lui	a4,0x8
    5b48:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    5b4c:	00e787b3          	add	a5,a5,a4
    5b50:	0080006f          	j	5b58 <_read+0x4c>
    5b54:	00000793          	li	a5,0
    5b58:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    5b5c:	fe842783          	lw	a5,-24(s0)
    5b60:	08078663          	beqz	a5,5bec <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5b64:	fe842783          	lw	a5,-24(s0)
    5b68:	0087a783          	lw	a5,8(a5)
    5b6c:	0037f713          	andi	a4,a5,3
    5b70:	00100793          	li	a5,1
    5b74:	06f70263          	beq	a4,a5,5bd8 <_read+0xcc>
        (fd->dev->read))
    5b78:	fe842783          	lw	a5,-24(s0)
    5b7c:	0007a783          	lw	a5,0(a5)
    5b80:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5b84:	04078a63          	beqz	a5,5bd8 <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5b88:	fe842783          	lw	a5,-24(s0)
    5b8c:	0007a783          	lw	a5,0(a5)
    5b90:	0147a783          	lw	a5,20(a5)
    5b94:	fd442703          	lw	a4,-44(s0)
    5b98:	00070613          	mv	a2,a4
    5b9c:	fd842583          	lw	a1,-40(s0)
    5ba0:	fe842503          	lw	a0,-24(s0)
    5ba4:	000780e7          	jalr	a5
    5ba8:	fea42623          	sw	a0,-20(s0)
    5bac:	fec42783          	lw	a5,-20(s0)
    5bb0:	0207d063          	bgez	a5,5bd0 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
    5bb4:	f0dff0ef          	jal	ra,5ac0 <alt_get_errno>
    5bb8:	00050713          	mv	a4,a0
    5bbc:	fec42783          	lw	a5,-20(s0)
    5bc0:	40f007b3          	neg	a5,a5
    5bc4:	00f72023          	sw	a5,0(a4)
          return -1;
    5bc8:	fff00793          	li	a5,-1
    5bcc:	0340006f          	j	5c00 <_read+0xf4>
        }
        return rval;
    5bd0:	fec42783          	lw	a5,-20(s0)
    5bd4:	02c0006f          	j	5c00 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    5bd8:	ee9ff0ef          	jal	ra,5ac0 <alt_get_errno>
    5bdc:	00050713          	mv	a4,a0
    5be0:	00d00793          	li	a5,13
    5be4:	00f72023          	sw	a5,0(a4)
    5be8:	0140006f          	j	5bfc <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5bec:	ed5ff0ef          	jal	ra,5ac0 <alt_get_errno>
    5bf0:	00050713          	mv	a4,a0
    5bf4:	05100793          	li	a5,81
    5bf8:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    5bfc:	fff00793          	li	a5,-1
}
    5c00:	00078513          	mv	a0,a5
    5c04:	02c12083          	lw	ra,44(sp)
    5c08:	02812403          	lw	s0,40(sp)
    5c0c:	03010113          	addi	sp,sp,48
    5c10:	00008067          	ret

00005c14 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    5c14:	fc010113          	addi	sp,sp,-64
    5c18:	02812e23          	sw	s0,60(sp)
    5c1c:	04010413          	addi	s0,sp,64
    5c20:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    5c24:	00800793          	li	a5,8
    5c28:	3007b7f3          	csrrc	a5,mstatus,a5
    5c2c:	fef42223          	sw	a5,-28(s0)
    return context;
    5c30:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    5c34:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    5c38:	8301a783          	lw	a5,-2000(gp) # 8418 <heap_end>
    5c3c:	00378793          	addi	a5,a5,3
    5c40:	ffc7f793          	andi	a5,a5,-4
    5c44:	00078713          	mv	a4,a5
    5c48:	82e1a823          	sw	a4,-2000(gp) # 8418 <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5c4c:	8301a703          	lw	a4,-2000(gp) # 8418 <heap_end>
    5c50:	fcc42783          	lw	a5,-52(s0)
    5c54:	00f70733          	add	a4,a4,a5
    5c58:	000107b7          	lui	a5,0x10
    5c5c:	00078793          	mv	a5,a5
    5c60:	02e7f263          	bgeu	a5,a4,5c84 <_sbrk+0x70>
    5c64:	fdc42783          	lw	a5,-36(s0)
    5c68:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    5c6c:	fe842783          	lw	a5,-24(s0)
    5c70:	0087f793          	andi	a5,a5,8
    5c74:	3007a073          	csrs	mstatus,a5
}
    5c78:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5c7c:	fff00793          	li	a5,-1
    5c80:	0380006f          	j	5cb8 <_sbrk+0xa4>
  }
#endif

  prev_heap_end = heap_end; 
    5c84:	8301a783          	lw	a5,-2000(gp) # 8418 <heap_end>
    5c88:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
    5c8c:	8301a703          	lw	a4,-2000(gp) # 8418 <heap_end>
    5c90:	fcc42783          	lw	a5,-52(s0)
    5c94:	00f70733          	add	a4,a4,a5
    5c98:	82e1a823          	sw	a4,-2000(gp) # 8418 <heap_end>
    5c9c:	fdc42783          	lw	a5,-36(s0)
    5ca0:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    5ca4:	fec42783          	lw	a5,-20(s0)
    5ca8:	0087f793          	andi	a5,a5,8
    5cac:	3007a073          	csrs	mstatus,a5
}
    5cb0:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    5cb4:	fe042783          	lw	a5,-32(s0)
}
    5cb8:	00078513          	mv	a0,a5
    5cbc:	03c12403          	lw	s0,60(sp)
    5cc0:	04010113          	addi	sp,sp,64
    5cc4:	00008067          	ret

00005cc8 <alt_get_errno>:
{
    5cc8:	ff010113          	addi	sp,sp,-16
    5ccc:	00112623          	sw	ra,12(sp)
    5cd0:	00812423          	sw	s0,8(sp)
    5cd4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    5cd8:	000087b7          	lui	a5,0x8
    5cdc:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5ce0:	00078c63          	beqz	a5,5cf8 <alt_get_errno+0x30>
    5ce4:	000087b7          	lui	a5,0x8
    5ce8:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    5cec:	000780e7          	jalr	a5
    5cf0:	00050793          	mv	a5,a0
    5cf4:	00c0006f          	j	5d00 <alt_get_errno+0x38>
    5cf8:	0000a7b7          	lui	a5,0xa
    5cfc:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    5d00:	00078513          	mv	a0,a5
    5d04:	00c12083          	lw	ra,12(sp)
    5d08:	00812403          	lw	s0,8(sp)
    5d0c:	01010113          	addi	sp,sp,16
    5d10:	00008067          	ret

00005d14 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5d14:	fd010113          	addi	sp,sp,-48
    5d18:	02112623          	sw	ra,44(sp)
    5d1c:	02812423          	sw	s0,40(sp)
    5d20:	03010413          	addi	s0,sp,48
    5d24:	fca42e23          	sw	a0,-36(s0)
    5d28:	fcb42c23          	sw	a1,-40(s0)
    5d2c:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5d30:	fdc42783          	lw	a5,-36(s0)
    5d34:	0207c463          	bltz	a5,5d5c <_write+0x48>
    5d38:	fdc42703          	lw	a4,-36(s0)
    5d3c:	00070793          	mv	a5,a4
    5d40:	00179793          	slli	a5,a5,0x1
    5d44:	00e787b3          	add	a5,a5,a4
    5d48:	00279793          	slli	a5,a5,0x2
    5d4c:	00008737          	lui	a4,0x8
    5d50:	a3870713          	addi	a4,a4,-1480 # 7a38 <alt_fd_list>
    5d54:	00e787b3          	add	a5,a5,a4
    5d58:	0080006f          	j	5d60 <_write+0x4c>
    5d5c:	00000793          	li	a5,0
    5d60:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
    5d64:	fe842783          	lw	a5,-24(s0)
    5d68:	08078463          	beqz	a5,5df0 <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5d6c:	fe842783          	lw	a5,-24(s0)
    5d70:	0087a783          	lw	a5,8(a5)
    5d74:	0037f793          	andi	a5,a5,3
    5d78:	06078263          	beqz	a5,5ddc <_write+0xc8>
    5d7c:	fe842783          	lw	a5,-24(s0)
    5d80:	0007a783          	lw	a5,0(a5)
    5d84:	0187a783          	lw	a5,24(a5)
    5d88:	04078a63          	beqz	a5,5ddc <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    5d8c:	fe842783          	lw	a5,-24(s0)
    5d90:	0007a783          	lw	a5,0(a5)
    5d94:	0187a783          	lw	a5,24(a5)
    5d98:	fd442703          	lw	a4,-44(s0)
    5d9c:	00070613          	mv	a2,a4
    5da0:	fd842583          	lw	a1,-40(s0)
    5da4:	fe842503          	lw	a0,-24(s0)
    5da8:	000780e7          	jalr	a5
    5dac:	fea42623          	sw	a0,-20(s0)
    5db0:	fec42783          	lw	a5,-20(s0)
    5db4:	0207d063          	bgez	a5,5dd4 <_write+0xc0>
      {
        ALT_ERRNO = -rval;
    5db8:	f11ff0ef          	jal	ra,5cc8 <alt_get_errno>
    5dbc:	00050713          	mv	a4,a0
    5dc0:	fec42783          	lw	a5,-20(s0)
    5dc4:	40f007b3          	neg	a5,a5
    5dc8:	00f72023          	sw	a5,0(a4)
        return -1;
    5dcc:	fff00793          	li	a5,-1
    5dd0:	0340006f          	j	5e04 <_write+0xf0>
      }
      return rval;
    5dd4:	fec42783          	lw	a5,-20(s0)
    5dd8:	02c0006f          	j	5e04 <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5ddc:	eedff0ef          	jal	ra,5cc8 <alt_get_errno>
    5de0:	00050713          	mv	a4,a0
    5de4:	00d00793          	li	a5,13
    5de8:	00f72023          	sw	a5,0(a4)
    5dec:	0140006f          	j	5e00 <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5df0:	ed9ff0ef          	jal	ra,5cc8 <alt_get_errno>
    5df4:	00050713          	mv	a4,a0
    5df8:	05100793          	li	a5,81
    5dfc:	00f72023          	sw	a5,0(a4)
  }
  return -1;
    5e00:	fff00793          	li	a5,-1
}
    5e04:	00078513          	mv	a0,a5
    5e08:	02c12083          	lw	ra,44(sp)
    5e0c:	02812403          	lw	s0,40(sp)
    5e10:	03010113          	addi	sp,sp,48
    5e14:	00008067          	ret

00005e18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5e18:	fd010113          	addi	sp,sp,-48
    5e1c:	02812623          	sw	s0,44(sp)
    5e20:	03010413          	addi	s0,sp,48
    5e24:	fca42e23          	sw	a0,-36(s0)
    5e28:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
    5e2c:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
    5e30:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    5e34:	3e800793          	li	a5,1000
    5e38:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
    5e3c:	fd842783          	lw	a5,-40(s0)
    5e40:	00079663          	bnez	a5,5e4c <alt_find_dev+0x34>
    5e44:	00000793          	li	a5,0
    5e48:	0e00006f          	j	5f28 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
    5e4c:	fd842783          	lw	a5,-40(s0)
    5e50:	0007a783          	lw	a5,0(a5)
    5e54:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
    5e58:	0c00006f          	j	5f18 <alt_find_dev+0x100>
    {
        len=0;
    5e5c:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    5e60:	0380006f          	j	5e98 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
    5e64:	fe442783          	lw	a5,-28(s0)
    5e68:	0087a703          	lw	a4,8(a5)
    5e6c:	fe842783          	lw	a5,-24(s0)
    5e70:	00f707b3          	add	a5,a4,a5
    5e74:	0007c703          	lbu	a4,0(a5)
    5e78:	fe842783          	lw	a5,-24(s0)
    5e7c:	fdc42683          	lw	a3,-36(s0)
    5e80:	00f687b3          	add	a5,a3,a5
    5e84:	0007c783          	lbu	a5,0(a5)
    5e88:	04f71663          	bne	a4,a5,5ed4 <alt_find_dev+0xbc>
            len++;
    5e8c:	fe842783          	lw	a5,-24(s0)
    5e90:	00178793          	addi	a5,a5,1
    5e94:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
    5e98:	fe842783          	lw	a5,-24(s0)
    5e9c:	fdc42703          	lw	a4,-36(s0)
    5ea0:	00f707b3          	add	a5,a4,a5
    5ea4:	0007c783          	lbu	a5,0(a5)
    5ea8:	02078863          	beqz	a5,5ed8 <alt_find_dev+0xc0>
    5eac:	fe442783          	lw	a5,-28(s0)
    5eb0:	0087a703          	lw	a4,8(a5)
    5eb4:	fe842783          	lw	a5,-24(s0)
    5eb8:	00f707b3          	add	a5,a4,a5
    5ebc:	0007c783          	lbu	a5,0(a5)
    5ec0:	00078c63          	beqz	a5,5ed8 <alt_find_dev+0xc0>
    5ec4:	fe842703          	lw	a4,-24(s0)
    5ec8:	fec42783          	lw	a5,-20(s0)
    5ecc:	f8f74ce3          	blt	a4,a5,5e64 <alt_find_dev+0x4c>
    5ed0:	0080006f          	j	5ed8 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
    5ed4:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
    5ed8:	fe842783          	lw	a5,-24(s0)
    5edc:	fdc42703          	lw	a4,-36(s0)
    5ee0:	00f707b3          	add	a5,a4,a5
    5ee4:	0007c783          	lbu	a5,0(a5)
    5ee8:	02079263          	bnez	a5,5f0c <alt_find_dev+0xf4>
    5eec:	fe442783          	lw	a5,-28(s0)
    5ef0:	0087a703          	lw	a4,8(a5)
    5ef4:	fe842783          	lw	a5,-24(s0)
    5ef8:	00f707b3          	add	a5,a4,a5
    5efc:	0007c783          	lbu	a5,0(a5)
    5f00:	00079663          	bnez	a5,5f0c <alt_find_dev+0xf4>
    5f04:	fe442783          	lw	a5,-28(s0)
    5f08:	0200006f          	j	5f28 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
    5f0c:	fe442783          	lw	a5,-28(s0)
    5f10:	0007a783          	lw	a5,0(a5)
    5f14:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
    5f18:	fe442703          	lw	a4,-28(s0)
    5f1c:	fd842783          	lw	a5,-40(s0)
    5f20:	f2f71ee3          	bne	a4,a5,5e5c <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
    5f24:	00000793          	li	a5,0
}
    5f28:	00078513          	mv	a0,a5
    5f2c:	02c12403          	lw	s0,44(sp)
    5f30:	03010113          	addi	sp,sp,48
    5f34:	00008067          	ret

00005f38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5f38:	fd010113          	addi	sp,sp,-48
    5f3c:	02812623          	sw	s0,44(sp)
    5f40:	03010413          	addi	s0,sp,48
    5f44:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5f48:	000087b7          	lui	a5,0x8
    5f4c:	3e878793          	addi	a5,a5,1000 # 83e8 <alt_fs_list>
    5f50:	0007a783          	lw	a5,0(a5)
    5f54:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
    5f58:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
    5f5c:	3e800793          	li	a5,1000
    5f60:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
    5f64:	0ec0006f          	j	6050 <alt_find_file+0x118>
    {
        len=0;
    5f68:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    5f6c:	0bc0006f          	j	6028 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
    5f70:	fe442783          	lw	a5,-28(s0)
    5f74:	0087a703          	lw	a4,8(a5)
    5f78:	fe842783          	lw	a5,-24(s0)
    5f7c:	00f707b3          	add	a5,a4,a5
    5f80:	0007c703          	lbu	a4,0(a5)
    5f84:	02f00793          	li	a5,47
    5f88:	02f71063          	bne	a4,a5,5fa8 <alt_find_file+0x70>
    5f8c:	fe442783          	lw	a5,-28(s0)
    5f90:	0087a703          	lw	a4,8(a5)
    5f94:	fe842783          	lw	a5,-24(s0)
    5f98:	00178793          	addi	a5,a5,1
    5f9c:	00f707b3          	add	a5,a4,a5
    5fa0:	0007c783          	lbu	a5,0(a5)
    5fa4:	00078e63          	beqz	a5,5fc0 <alt_find_file+0x88>
    5fa8:	fe442783          	lw	a5,-28(s0)
    5fac:	0087a703          	lw	a4,8(a5)
    5fb0:	fe842783          	lw	a5,-24(s0)
    5fb4:	00f707b3          	add	a5,a4,a5
    5fb8:	0007c783          	lbu	a5,0(a5)
    5fbc:	02079c63          	bnez	a5,5ff4 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
    5fc0:	fe842783          	lw	a5,-24(s0)
    5fc4:	fdc42703          	lw	a4,-36(s0)
    5fc8:	00f707b3          	add	a5,a4,a5
    5fcc:	0007c703          	lbu	a4,0(a5)
    5fd0:	02f00793          	li	a5,47
    5fd4:	00f70c63          	beq	a4,a5,5fec <alt_find_file+0xb4>
    5fd8:	fe842783          	lw	a5,-24(s0)
    5fdc:	fdc42703          	lw	a4,-36(s0)
    5fe0:	00f707b3          	add	a5,a4,a5
    5fe4:	0007c783          	lbu	a5,0(a5)
    5fe8:	04079863          	bnez	a5,6038 <alt_find_file+0x100>
                {
                    return next;
    5fec:	fe442783          	lw	a5,-28(s0)
    5ff0:	0740006f          	j	6064 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
    5ff4:	fe442783          	lw	a5,-28(s0)
    5ff8:	0087a703          	lw	a4,8(a5)
    5ffc:	fe842783          	lw	a5,-24(s0)
    6000:	00f707b3          	add	a5,a4,a5
    6004:	0007c703          	lbu	a4,0(a5)
    6008:	fe842783          	lw	a5,-24(s0)
    600c:	fdc42683          	lw	a3,-36(s0)
    6010:	00f687b3          	add	a5,a3,a5
    6014:	0007c783          	lbu	a5,0(a5)
    6018:	02f71463          	bne	a4,a5,6040 <alt_find_file+0x108>
            len++;
    601c:	fe842783          	lw	a5,-24(s0)
    6020:	00178793          	addi	a5,a5,1
    6024:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
    6028:	fe842703          	lw	a4,-24(s0)
    602c:	fec42783          	lw	a5,-20(s0)
    6030:	f4f740e3          	blt	a4,a5,5f70 <alt_find_file+0x38>
    6034:	0100006f          	j	6044 <alt_find_file+0x10c>
                break;
    6038:	00000013          	nop
    603c:	0080006f          	j	6044 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
    6040:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
    6044:	fe442783          	lw	a5,-28(s0)
    6048:	0007a783          	lw	a5,0(a5)
    604c:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
    6050:	fe442703          	lw	a4,-28(s0)
    6054:	000087b7          	lui	a5,0x8
    6058:	3e878793          	addi	a5,a5,1000 # 83e8 <alt_fs_list>
    605c:	f0f716e3          	bne	a4,a5,5f68 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
    6060:	00000793          	li	a5,0
}
    6064:	00078513          	mv	a0,a5
    6068:	02c12403          	lw	s0,44(sp)
    606c:	03010113          	addi	sp,sp,48
    6070:	00008067          	ret

00006074 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6074:	fd010113          	addi	sp,sp,-48
    6078:	02812623          	sw	s0,44(sp)
    607c:	03010413          	addi	s0,sp,48
    6080:	fca42e23          	sw	a0,-36(s0)
  alt_32 i;
  int rc = -EMFILE;
    6084:	fe800793          	li	a5,-24
    6088:	fef42623          	sw	a5,-20(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    608c:	fe042423          	sw	zero,-24(s0)
    6090:	0880006f          	j	6118 <alt_get_fd+0xa4>
  {
    if (!alt_fd_list[i].dev)
    6094:	000087b7          	lui	a5,0x8
    6098:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    609c:	fe842703          	lw	a4,-24(s0)
    60a0:	00070793          	mv	a5,a4
    60a4:	00179793          	slli	a5,a5,0x1
    60a8:	00e787b3          	add	a5,a5,a4
    60ac:	00279793          	slli	a5,a5,0x2
    60b0:	00f687b3          	add	a5,a3,a5
    60b4:	0007a783          	lw	a5,0(a5)
    60b8:	04079a63          	bnez	a5,610c <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
    60bc:	000087b7          	lui	a5,0x8
    60c0:	a3878693          	addi	a3,a5,-1480 # 7a38 <alt_fd_list>
    60c4:	fe842703          	lw	a4,-24(s0)
    60c8:	00070793          	mv	a5,a4
    60cc:	00179793          	slli	a5,a5,0x1
    60d0:	00e787b3          	add	a5,a5,a4
    60d4:	00279793          	slli	a5,a5,0x2
    60d8:	00f687b3          	add	a5,a3,a5
    60dc:	fdc42703          	lw	a4,-36(s0)
    60e0:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
    60e4:	000087b7          	lui	a5,0x8
    60e8:	3f87a783          	lw	a5,1016(a5) # 83f8 <alt_max_fd>
    60ec:	fe842703          	lw	a4,-24(s0)
    60f0:	00e7d863          	bge	a5,a4,6100 <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
    60f4:	000087b7          	lui	a5,0x8
    60f8:	fe842703          	lw	a4,-24(s0)
    60fc:	3ee7ac23          	sw	a4,1016(a5) # 83f8 <alt_max_fd>
      }
      rc = i;
    6100:	fe842783          	lw	a5,-24(s0)
    6104:	fef42623          	sw	a5,-20(s0)
      goto alt_get_fd_exit;
    6108:	0200006f          	j	6128 <alt_get_fd+0xb4>
  for (i = 0; i < ALT_MAX_FD; i++)
    610c:	fe842783          	lw	a5,-24(s0)
    6110:	00178793          	addi	a5,a5,1
    6114:	fef42423          	sw	a5,-24(s0)
    6118:	fe842703          	lw	a4,-24(s0)
    611c:	01f00793          	li	a5,31
    6120:	f6e7dae3          	bge	a5,a4,6094 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    6124:	00000013          	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6128:	fec42783          	lw	a5,-20(s0)
}
    612c:	00078513          	mv	a0,a5
    6130:	02c12403          	lw	s0,44(sp)
    6134:	03010113          	addi	sp,sp,48
    6138:	00008067          	ret

0000613c <__stack_chk_fail>:
    613c:	00001797          	auipc	a5,0x1
    6140:	83c78793          	addi	a5,a5,-1988 # 6978 <__fini_array_end+0x58>
    6144:	0007af83          	lw	t6,0(a5)
    6148:	0047af03          	lw	t5,4(a5)
    614c:	0087ae83          	lw	t4,8(a5)
    6150:	00c7ae03          	lw	t3,12(a5)
    6154:	0107a303          	lw	t1,16(a5)
    6158:	0147a883          	lw	a7,20(a5)
    615c:	0187a803          	lw	a6,24(a5)
    6160:	0247a683          	lw	a3,36(a5)
    6164:	0287a703          	lw	a4,40(a5)
    6168:	01c7a583          	lw	a1,28(a5)
    616c:	0207a603          	lw	a2,32(a5)
    6170:	02c7c783          	lbu	a5,44(a5)
    6174:	fc010113          	addi	sp,sp,-64
    6178:	00010513          	mv	a0,sp
    617c:	02112e23          	sw	ra,60(sp)
    6180:	01f12023          	sw	t6,0(sp)
    6184:	01e12223          	sw	t5,4(sp)
    6188:	01d12423          	sw	t4,8(sp)
    618c:	01c12623          	sw	t3,12(sp)
    6190:	00612823          	sw	t1,16(sp)
    6194:	01112a23          	sw	a7,20(sp)
    6198:	01012c23          	sw	a6,24(sp)
    619c:	02d12223          	sw	a3,36(sp)
    61a0:	02e12423          	sw	a4,40(sp)
    61a4:	02f10623          	sb	a5,44(sp)
    61a8:	00b12e23          	sw	a1,28(sp)
    61ac:	02c12023          	sw	a2,32(sp)
    61b0:	998fc0ef          	jal	ra,2348 <strlen>
    61b4:	00050613          	mv	a2,a0
    61b8:	00010593          	mv	a1,sp
    61bc:	00200513          	li	a0,2
    61c0:	050000ef          	jal	ra,6210 <write>
    61c4:	00600513          	li	a0,6
    61c8:	2f0000ef          	jal	ra,64b8 <raise>
    61cc:	07f00513          	li	a0,127
    61d0:	a90ff0ef          	jal	ra,5460 <_exit>

000061d4 <__stack_chk_fail_local>:
    61d4:	ff010113          	addi	sp,sp,-16
    61d8:	00112623          	sw	ra,12(sp)
    61dc:	f61ff0ef          	jal	ra,613c <__stack_chk_fail>

000061e0 <__stack_chk_init>:
    61e0:	00004797          	auipc	a5,0x4
    61e4:	d1478793          	addi	a5,a5,-748 # 9ef4 <__stack_chk_guard>
    61e8:	0007a703          	lw	a4,0(a5)
    61ec:	00071663          	bnez	a4,61f8 <__stack_chk_init+0x18>
    61f0:	ff0a0737          	lui	a4,0xff0a0
    61f4:	00e7a023          	sw	a4,0(a5)
    61f8:	00008067          	ret

000061fc <fstat>:
    61fc:	00058613          	mv	a2,a1
    6200:	00050593          	mv	a1,a0
    6204:	00002517          	auipc	a0,0x2
    6208:	20452503          	lw	a0,516(a0) # 8408 <_impure_ptr>
    620c:	870ff06f          	j	527c <_fstat_r>

00006210 <write>:
    6210:	00060693          	mv	a3,a2
    6214:	00058613          	mv	a2,a1
    6218:	00050593          	mv	a1,a0
    621c:	00002517          	auipc	a0,0x2
    6220:	1ec52503          	lw	a0,492(a0) # 8408 <_impure_ptr>
    6224:	e00fe06f          	j	4824 <_write_r>

00006228 <_init_signal_r>:
    6228:	2dc52783          	lw	a5,732(a0)
    622c:	00078663          	beqz	a5,6238 <_init_signal_r+0x10>
    6230:	00000513          	li	a0,0
    6234:	00008067          	ret
    6238:	ff010113          	addi	sp,sp,-16
    623c:	08000593          	li	a1,128
    6240:	00812423          	sw	s0,8(sp)
    6244:	00112623          	sw	ra,12(sp)
    6248:	00050413          	mv	s0,a0
    624c:	be4fd0ef          	jal	ra,3630 <_malloc_r>
    6250:	2ca42e23          	sw	a0,732(s0)
    6254:	02050463          	beqz	a0,627c <_init_signal_r+0x54>
    6258:	08050793          	addi	a5,a0,128
    625c:	00052023          	sw	zero,0(a0)
    6260:	00450513          	addi	a0,a0,4
    6264:	fef51ce3          	bne	a0,a5,625c <_init_signal_r+0x34>
    6268:	00000513          	li	a0,0
    626c:	00c12083          	lw	ra,12(sp)
    6270:	00812403          	lw	s0,8(sp)
    6274:	01010113          	addi	sp,sp,16
    6278:	00008067          	ret
    627c:	fff00513          	li	a0,-1
    6280:	fedff06f          	j	626c <_init_signal_r+0x44>

00006284 <_signal_r>:
    6284:	fe010113          	addi	sp,sp,-32
    6288:	00912a23          	sw	s1,20(sp)
    628c:	00112e23          	sw	ra,28(sp)
    6290:	00812c23          	sw	s0,24(sp)
    6294:	01f00793          	li	a5,31
    6298:	00050493          	mv	s1,a0
    629c:	02b7ea63          	bltu	a5,a1,62d0 <_signal_r+0x4c>
    62a0:	2dc52783          	lw	a5,732(a0)
    62a4:	00058413          	mv	s0,a1
    62a8:	02078c63          	beqz	a5,62e0 <_signal_r+0x5c>
    62ac:	00241413          	slli	s0,s0,0x2
    62b0:	008787b3          	add	a5,a5,s0
    62b4:	0007a503          	lw	a0,0(a5)
    62b8:	00c7a023          	sw	a2,0(a5)
    62bc:	01c12083          	lw	ra,28(sp)
    62c0:	01812403          	lw	s0,24(sp)
    62c4:	01412483          	lw	s1,20(sp)
    62c8:	02010113          	addi	sp,sp,32
    62cc:	00008067          	ret
    62d0:	01600793          	li	a5,22
    62d4:	00f52023          	sw	a5,0(a0)
    62d8:	fff00513          	li	a0,-1
    62dc:	fe1ff06f          	j	62bc <_signal_r+0x38>
    62e0:	08000593          	li	a1,128
    62e4:	00c12623          	sw	a2,12(sp)
    62e8:	b48fd0ef          	jal	ra,3630 <_malloc_r>
    62ec:	2ca4ae23          	sw	a0,732(s1)
    62f0:	00c12603          	lw	a2,12(sp)
    62f4:	00050793          	mv	a5,a0
    62f8:	00050713          	mv	a4,a0
    62fc:	08050693          	addi	a3,a0,128
    6300:	fc050ce3          	beqz	a0,62d8 <_signal_r+0x54>
    6304:	00072023          	sw	zero,0(a4) # ff0a0000 <__alt_data_end+0xff090000>
    6308:	00470713          	addi	a4,a4,4
    630c:	fed71ce3          	bne	a4,a3,6304 <_signal_r+0x80>
    6310:	f9dff06f          	j	62ac <_signal_r+0x28>

00006314 <_raise_r>:
    6314:	ff010113          	addi	sp,sp,-16
    6318:	00912223          	sw	s1,4(sp)
    631c:	00112623          	sw	ra,12(sp)
    6320:	00812423          	sw	s0,8(sp)
    6324:	01f00793          	li	a5,31
    6328:	00050493          	mv	s1,a0
    632c:	08b7ee63          	bltu	a5,a1,63c8 <_raise_r+0xb4>
    6330:	2dc52783          	lw	a5,732(a0)
    6334:	00058413          	mv	s0,a1
    6338:	04078463          	beqz	a5,6380 <_raise_r+0x6c>
    633c:	00259713          	slli	a4,a1,0x2
    6340:	00e787b3          	add	a5,a5,a4
    6344:	0007a703          	lw	a4,0(a5)
    6348:	02070c63          	beqz	a4,6380 <_raise_r+0x6c>
    634c:	00100693          	li	a3,1
    6350:	00d70c63          	beq	a4,a3,6368 <_raise_r+0x54>
    6354:	fff00693          	li	a3,-1
    6358:	04d70863          	beq	a4,a3,63a8 <_raise_r+0x94>
    635c:	0007a023          	sw	zero,0(a5)
    6360:	00058513          	mv	a0,a1
    6364:	000700e7          	jalr	a4
    6368:	00000513          	li	a0,0
    636c:	00c12083          	lw	ra,12(sp)
    6370:	00812403          	lw	s0,8(sp)
    6374:	00412483          	lw	s1,4(sp)
    6378:	01010113          	addi	sp,sp,16
    637c:	00008067          	ret
    6380:	00048513          	mv	a0,s1
    6384:	430000ef          	jal	ra,67b4 <_getpid_r>
    6388:	00040613          	mv	a2,s0
    638c:	00812403          	lw	s0,8(sp)
    6390:	00c12083          	lw	ra,12(sp)
    6394:	00050593          	mv	a1,a0
    6398:	00048513          	mv	a0,s1
    639c:	00412483          	lw	s1,4(sp)
    63a0:	01010113          	addi	sp,sp,16
    63a4:	3b00006f          	j	6754 <_kill_r>
    63a8:	00c12083          	lw	ra,12(sp)
    63ac:	00812403          	lw	s0,8(sp)
    63b0:	01600793          	li	a5,22
    63b4:	00f52023          	sw	a5,0(a0)
    63b8:	00412483          	lw	s1,4(sp)
    63bc:	00100513          	li	a0,1
    63c0:	01010113          	addi	sp,sp,16
    63c4:	00008067          	ret
    63c8:	01600793          	li	a5,22
    63cc:	00f52023          	sw	a5,0(a0)
    63d0:	fff00513          	li	a0,-1
    63d4:	f99ff06f          	j	636c <_raise_r+0x58>

000063d8 <__sigtramp_r>:
    63d8:	01f00793          	li	a5,31
    63dc:	0cb7ea63          	bltu	a5,a1,64b0 <__sigtramp_r+0xd8>
    63e0:	2dc52783          	lw	a5,732(a0)
    63e4:	ff010113          	addi	sp,sp,-16
    63e8:	00812423          	sw	s0,8(sp)
    63ec:	00912223          	sw	s1,4(sp)
    63f0:	00112623          	sw	ra,12(sp)
    63f4:	00058413          	mv	s0,a1
    63f8:	00050493          	mv	s1,a0
    63fc:	08078063          	beqz	a5,647c <__sigtramp_r+0xa4>
    6400:	00241713          	slli	a4,s0,0x2
    6404:	00e787b3          	add	a5,a5,a4
    6408:	0007a703          	lw	a4,0(a5)
    640c:	02070c63          	beqz	a4,6444 <__sigtramp_r+0x6c>
    6410:	fff00693          	li	a3,-1
    6414:	06d70063          	beq	a4,a3,6474 <__sigtramp_r+0x9c>
    6418:	00100693          	li	a3,1
    641c:	04d70063          	beq	a4,a3,645c <__sigtramp_r+0x84>
    6420:	00040513          	mv	a0,s0
    6424:	0007a023          	sw	zero,0(a5)
    6428:	000700e7          	jalr	a4
    642c:	00000513          	li	a0,0
    6430:	00c12083          	lw	ra,12(sp)
    6434:	00812403          	lw	s0,8(sp)
    6438:	00412483          	lw	s1,4(sp)
    643c:	01010113          	addi	sp,sp,16
    6440:	00008067          	ret
    6444:	00c12083          	lw	ra,12(sp)
    6448:	00812403          	lw	s0,8(sp)
    644c:	00412483          	lw	s1,4(sp)
    6450:	00100513          	li	a0,1
    6454:	01010113          	addi	sp,sp,16
    6458:	00008067          	ret
    645c:	00c12083          	lw	ra,12(sp)
    6460:	00812403          	lw	s0,8(sp)
    6464:	00412483          	lw	s1,4(sp)
    6468:	00300513          	li	a0,3
    646c:	01010113          	addi	sp,sp,16
    6470:	00008067          	ret
    6474:	00200513          	li	a0,2
    6478:	fb9ff06f          	j	6430 <__sigtramp_r+0x58>
    647c:	08000593          	li	a1,128
    6480:	9b0fd0ef          	jal	ra,3630 <_malloc_r>
    6484:	2ca4ae23          	sw	a0,732(s1)
    6488:	00050793          	mv	a5,a0
    648c:	00050e63          	beqz	a0,64a8 <__sigtramp_r+0xd0>
    6490:	00050713          	mv	a4,a0
    6494:	08050693          	addi	a3,a0,128
    6498:	00072023          	sw	zero,0(a4)
    649c:	00470713          	addi	a4,a4,4
    64a0:	fee69ce3          	bne	a3,a4,6498 <__sigtramp_r+0xc0>
    64a4:	f5dff06f          	j	6400 <__sigtramp_r+0x28>
    64a8:	fff00513          	li	a0,-1
    64ac:	f85ff06f          	j	6430 <__sigtramp_r+0x58>
    64b0:	fff00513          	li	a0,-1
    64b4:	00008067          	ret

000064b8 <raise>:
    64b8:	ff010113          	addi	sp,sp,-16
    64bc:	00912223          	sw	s1,4(sp)
    64c0:	00112623          	sw	ra,12(sp)
    64c4:	00812423          	sw	s0,8(sp)
    64c8:	01f00793          	li	a5,31
    64cc:	00002497          	auipc	s1,0x2
    64d0:	f3c4a483          	lw	s1,-196(s1) # 8408 <_impure_ptr>
    64d4:	08a7ec63          	bltu	a5,a0,656c <raise+0xb4>
    64d8:	2dc4a783          	lw	a5,732(s1)
    64dc:	00050413          	mv	s0,a0
    64e0:	04078263          	beqz	a5,6524 <raise+0x6c>
    64e4:	00251713          	slli	a4,a0,0x2
    64e8:	00e787b3          	add	a5,a5,a4
    64ec:	0007a703          	lw	a4,0(a5)
    64f0:	02070a63          	beqz	a4,6524 <raise+0x6c>
    64f4:	00100693          	li	a3,1
    64f8:	00d70a63          	beq	a4,a3,650c <raise+0x54>
    64fc:	fff00693          	li	a3,-1
    6500:	04d70663          	beq	a4,a3,654c <raise+0x94>
    6504:	0007a023          	sw	zero,0(a5)
    6508:	000700e7          	jalr	a4
    650c:	00000513          	li	a0,0
    6510:	00c12083          	lw	ra,12(sp)
    6514:	00812403          	lw	s0,8(sp)
    6518:	00412483          	lw	s1,4(sp)
    651c:	01010113          	addi	sp,sp,16
    6520:	00008067          	ret
    6524:	00048513          	mv	a0,s1
    6528:	28c000ef          	jal	ra,67b4 <_getpid_r>
    652c:	00040613          	mv	a2,s0
    6530:	00812403          	lw	s0,8(sp)
    6534:	00c12083          	lw	ra,12(sp)
    6538:	00050593          	mv	a1,a0
    653c:	00048513          	mv	a0,s1
    6540:	00412483          	lw	s1,4(sp)
    6544:	01010113          	addi	sp,sp,16
    6548:	20c0006f          	j	6754 <_kill_r>
    654c:	00c12083          	lw	ra,12(sp)
    6550:	00812403          	lw	s0,8(sp)
    6554:	01600793          	li	a5,22
    6558:	00f4a023          	sw	a5,0(s1)
    655c:	00100513          	li	a0,1
    6560:	00412483          	lw	s1,4(sp)
    6564:	01010113          	addi	sp,sp,16
    6568:	00008067          	ret
    656c:	01600793          	li	a5,22
    6570:	00f4a023          	sw	a5,0(s1)
    6574:	fff00513          	li	a0,-1
    6578:	f99ff06f          	j	6510 <raise+0x58>

0000657c <signal>:
    657c:	ff010113          	addi	sp,sp,-16
    6580:	01212023          	sw	s2,0(sp)
    6584:	00112623          	sw	ra,12(sp)
    6588:	00812423          	sw	s0,8(sp)
    658c:	00912223          	sw	s1,4(sp)
    6590:	01f00793          	li	a5,31
    6594:	00002917          	auipc	s2,0x2
    6598:	e7492903          	lw	s2,-396(s2) # 8408 <_impure_ptr>
    659c:	02a7ee63          	bltu	a5,a0,65d8 <signal+0x5c>
    65a0:	00050413          	mv	s0,a0
    65a4:	2dc92503          	lw	a0,732(s2)
    65a8:	00058493          	mv	s1,a1
    65ac:	02050e63          	beqz	a0,65e8 <signal+0x6c>
    65b0:	00241413          	slli	s0,s0,0x2
    65b4:	008507b3          	add	a5,a0,s0
    65b8:	0007a503          	lw	a0,0(a5)
    65bc:	0097a023          	sw	s1,0(a5)
    65c0:	00c12083          	lw	ra,12(sp)
    65c4:	00812403          	lw	s0,8(sp)
    65c8:	00412483          	lw	s1,4(sp)
    65cc:	00012903          	lw	s2,0(sp)
    65d0:	01010113          	addi	sp,sp,16
    65d4:	00008067          	ret
    65d8:	01600793          	li	a5,22
    65dc:	00f92023          	sw	a5,0(s2)
    65e0:	fff00513          	li	a0,-1
    65e4:	fddff06f          	j	65c0 <signal+0x44>
    65e8:	08000593          	li	a1,128
    65ec:	00090513          	mv	a0,s2
    65f0:	840fd0ef          	jal	ra,3630 <_malloc_r>
    65f4:	2ca92e23          	sw	a0,732(s2)
    65f8:	00050793          	mv	a5,a0
    65fc:	08050713          	addi	a4,a0,128
    6600:	fe0500e3          	beqz	a0,65e0 <signal+0x64>
    6604:	0007a023          	sw	zero,0(a5)
    6608:	00478793          	addi	a5,a5,4
    660c:	fee79ce3          	bne	a5,a4,6604 <signal+0x88>
    6610:	fa1ff06f          	j	65b0 <signal+0x34>

00006614 <_init_signal>:
    6614:	ff010113          	addi	sp,sp,-16
    6618:	00812423          	sw	s0,8(sp)
    661c:	00002417          	auipc	s0,0x2
    6620:	dec42403          	lw	s0,-532(s0) # 8408 <_impure_ptr>
    6624:	2dc42783          	lw	a5,732(s0)
    6628:	00112623          	sw	ra,12(sp)
    662c:	00078c63          	beqz	a5,6644 <_init_signal+0x30>
    6630:	00000513          	li	a0,0
    6634:	00c12083          	lw	ra,12(sp)
    6638:	00812403          	lw	s0,8(sp)
    663c:	01010113          	addi	sp,sp,16
    6640:	00008067          	ret
    6644:	08000593          	li	a1,128
    6648:	00040513          	mv	a0,s0
    664c:	fe5fc0ef          	jal	ra,3630 <_malloc_r>
    6650:	2ca42e23          	sw	a0,732(s0)
    6654:	00050c63          	beqz	a0,666c <_init_signal+0x58>
    6658:	08050793          	addi	a5,a0,128
    665c:	00052023          	sw	zero,0(a0)
    6660:	00450513          	addi	a0,a0,4
    6664:	fef51ce3          	bne	a0,a5,665c <_init_signal+0x48>
    6668:	fc9ff06f          	j	6630 <_init_signal+0x1c>
    666c:	fff00513          	li	a0,-1
    6670:	fc5ff06f          	j	6634 <_init_signal+0x20>

00006674 <__sigtramp>:
    6674:	ff010113          	addi	sp,sp,-16
    6678:	00912223          	sw	s1,4(sp)
    667c:	00112623          	sw	ra,12(sp)
    6680:	00812423          	sw	s0,8(sp)
    6684:	01f00793          	li	a5,31
    6688:	00002497          	auipc	s1,0x2
    668c:	d804a483          	lw	s1,-640(s1) # 8408 <_impure_ptr>
    6690:	0aa7ee63          	bltu	a5,a0,674c <__sigtramp+0xd8>
    6694:	2dc4a783          	lw	a5,732(s1)
    6698:	00050413          	mv	s0,a0
    669c:	08078063          	beqz	a5,671c <__sigtramp+0xa8>
    66a0:	00241713          	slli	a4,s0,0x2
    66a4:	00e787b3          	add	a5,a5,a4
    66a8:	0007a703          	lw	a4,0(a5)
    66ac:	02070c63          	beqz	a4,66e4 <__sigtramp+0x70>
    66b0:	fff00693          	li	a3,-1
    66b4:	06d70063          	beq	a4,a3,6714 <__sigtramp+0xa0>
    66b8:	00100693          	li	a3,1
    66bc:	04d70063          	beq	a4,a3,66fc <__sigtramp+0x88>
    66c0:	00040513          	mv	a0,s0
    66c4:	0007a023          	sw	zero,0(a5)
    66c8:	000700e7          	jalr	a4
    66cc:	00000513          	li	a0,0
    66d0:	00c12083          	lw	ra,12(sp)
    66d4:	00812403          	lw	s0,8(sp)
    66d8:	00412483          	lw	s1,4(sp)
    66dc:	01010113          	addi	sp,sp,16
    66e0:	00008067          	ret
    66e4:	00c12083          	lw	ra,12(sp)
    66e8:	00812403          	lw	s0,8(sp)
    66ec:	00412483          	lw	s1,4(sp)
    66f0:	00100513          	li	a0,1
    66f4:	01010113          	addi	sp,sp,16
    66f8:	00008067          	ret
    66fc:	00c12083          	lw	ra,12(sp)
    6700:	00812403          	lw	s0,8(sp)
    6704:	00412483          	lw	s1,4(sp)
    6708:	00300513          	li	a0,3
    670c:	01010113          	addi	sp,sp,16
    6710:	00008067          	ret
    6714:	00200513          	li	a0,2
    6718:	fb9ff06f          	j	66d0 <__sigtramp+0x5c>
    671c:	08000593          	li	a1,128
    6720:	00048513          	mv	a0,s1
    6724:	f0dfc0ef          	jal	ra,3630 <_malloc_r>
    6728:	2ca4ae23          	sw	a0,732(s1)
    672c:	00050793          	mv	a5,a0
    6730:	00050e63          	beqz	a0,674c <__sigtramp+0xd8>
    6734:	00050713          	mv	a4,a0
    6738:	08050693          	addi	a3,a0,128
    673c:	00072023          	sw	zero,0(a4)
    6740:	00470713          	addi	a4,a4,4
    6744:	fee69ce3          	bne	a3,a4,673c <__sigtramp+0xc8>
    6748:	f59ff06f          	j	66a0 <__sigtramp+0x2c>
    674c:	fff00513          	li	a0,-1
    6750:	f81ff06f          	j	66d0 <__sigtramp+0x5c>

00006754 <_kill_r>:
    6754:	ff010113          	addi	sp,sp,-16
    6758:	00058713          	mv	a4,a1
    675c:	00812423          	sw	s0,8(sp)
    6760:	00060593          	mv	a1,a2
    6764:	00050413          	mv	s0,a0
    6768:	00070513          	mv	a0,a4
    676c:	00003797          	auipc	a5,0x3
    6770:	7407aa23          	sw	zero,1876(a5) # 9ec0 <errno>
    6774:	00112623          	sw	ra,12(sp)
    6778:	0ac000ef          	jal	ra,6824 <_kill>
    677c:	fff00793          	li	a5,-1
    6780:	00f50a63          	beq	a0,a5,6794 <_kill_r+0x40>
    6784:	00c12083          	lw	ra,12(sp)
    6788:	00812403          	lw	s0,8(sp)
    678c:	01010113          	addi	sp,sp,16
    6790:	00008067          	ret
    6794:	00003797          	auipc	a5,0x3
    6798:	72c7a783          	lw	a5,1836(a5) # 9ec0 <errno>
    679c:	fe0784e3          	beqz	a5,6784 <_kill_r+0x30>
    67a0:	00c12083          	lw	ra,12(sp)
    67a4:	00f42023          	sw	a5,0(s0)
    67a8:	00812403          	lw	s0,8(sp)
    67ac:	01010113          	addi	sp,sp,16
    67b0:	00008067          	ret

000067b4 <_getpid_r>:
    67b4:	0040006f          	j	67b8 <_getpid>

000067b8 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
    67b8:	ff010113          	addi	sp,sp,-16
    67bc:	00812623          	sw	s0,12(sp)
    67c0:	01010413          	addi	s0,sp,16
  return 0;
    67c4:	00000793          	li	a5,0
}
    67c8:	00078513          	mv	a0,a5
    67cc:	00c12403          	lw	s0,12(sp)
    67d0:	01010113          	addi	sp,sp,16
    67d4:	00008067          	ret

000067d8 <alt_get_errno>:
{
    67d8:	ff010113          	addi	sp,sp,-16
    67dc:	00112623          	sw	ra,12(sp)
    67e0:	00812423          	sw	s0,8(sp)
    67e4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    67e8:	000087b7          	lui	a5,0x8
    67ec:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    67f0:	00078c63          	beqz	a5,6808 <alt_get_errno+0x30>
    67f4:	000087b7          	lui	a5,0x8
    67f8:	3fc7a783          	lw	a5,1020(a5) # 83fc <alt_errno>
    67fc:	000780e7          	jalr	a5
    6800:	00050793          	mv	a5,a0
    6804:	00c0006f          	j	6810 <alt_get_errno+0x38>
    6808:	0000a7b7          	lui	a5,0xa
    680c:	ec078793          	addi	a5,a5,-320 # 9ec0 <errno>
}
    6810:	00078513          	mv	a0,a5
    6814:	00c12083          	lw	ra,12(sp)
    6818:	00812403          	lw	s0,8(sp)
    681c:	01010113          	addi	sp,sp,16
    6820:	00008067          	ret

00006824 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
    6824:	fd010113          	addi	sp,sp,-48
    6828:	02112623          	sw	ra,44(sp)
    682c:	02812423          	sw	s0,40(sp)
    6830:	03010413          	addi	s0,sp,48
    6834:	fca42e23          	sw	a0,-36(s0)
    6838:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
    683c:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
    6840:	fdc42783          	lw	a5,-36(s0)
    6844:	06f04e63          	bgtz	a5,68c0 <_kill+0x9c>
  {
    switch (sig)
    6848:	fd842783          	lw	a5,-40(s0)
    684c:	08078463          	beqz	a5,68d4 <_kill+0xb0>
    6850:	fd842783          	lw	a5,-40(s0)
    6854:	0607c063          	bltz	a5,68b4 <_kill+0x90>
    6858:	fd842703          	lw	a4,-40(s0)
    685c:	01f00793          	li	a5,31
    6860:	04e7ca63          	blt	a5,a4,68b4 <_kill+0x90>
    6864:	fd842703          	lw	a4,-40(s0)
    6868:	00300793          	li	a5,3
    686c:	04f74463          	blt	a4,a5,68b4 <_kill+0x90>
    6870:	fd842783          	lw	a5,-40(s0)
    6874:	00100713          	li	a4,1
    6878:	00f717b3          	sll	a5,a4,a5
    687c:	cf810737          	lui	a4,0xcf810
    6880:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcf7fff78>
    6884:	00e7f733          	and	a4,a5,a4
    6888:	00e03733          	snez	a4,a4
    688c:	0ff77713          	zext.b	a4,a4
    6890:	00071e63          	bnez	a4,68ac <_kill+0x88>
    6894:	00110737          	lui	a4,0x110
    6898:	00e7f7b3          	and	a5,a5,a4
    689c:	00f037b3          	snez	a5,a5
    68a0:	0ff7f793          	zext.b	a5,a5
    68a4:	02079c63          	bnez	a5,68dc <_kill+0xb8>
    68a8:	00c0006f          	j	68b4 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
    68ac:	00000513          	li	a0,0
    68b0:	bb1fe0ef          	jal	ra,5460 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
    68b4:	01600793          	li	a5,22
    68b8:	fef42623          	sw	a5,-20(s0)
    68bc:	0240006f          	j	68e0 <_kill+0xbc>
    }
  }

  else if (pid > 0)
    68c0:	fdc42783          	lw	a5,-36(s0)
    68c4:	00f05e63          	blez	a5,68e0 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
    68c8:	00300793          	li	a5,3
    68cc:	fef42623          	sw	a5,-20(s0)
    68d0:	0100006f          	j	68e0 <_kill+0xbc>
      break;
    68d4:	00000013          	nop
    68d8:	0080006f          	j	68e0 <_kill+0xbc>
      break;
    68dc:	00000013          	nop
  }

  if (status)
    68e0:	fec42783          	lw	a5,-20(s0)
    68e4:	00078e63          	beqz	a5,6900 <_kill+0xdc>
  {
    ALT_ERRNO = status;
    68e8:	ef1ff0ef          	jal	ra,67d8 <alt_get_errno>
    68ec:	00050713          	mv	a4,a0
    68f0:	fec42783          	lw	a5,-20(s0)
    68f4:	00f72023          	sw	a5,0(a4) # 110000 <__alt_data_end+0x100000>
    return -1;
    68f8:	fff00793          	li	a5,-1
    68fc:	0080006f          	j	6904 <_kill+0xe0>
  }

  return 0;
    6900:	00000793          	li	a5,0
}
    6904:	00078513          	mv	a0,a5
    6908:	02c12083          	lw	ra,44(sp)
    690c:	02812403          	lw	s0,40(sp)
    6910:	03010113          	addi	sp,sp,48
    6914:	00008067          	ret
    6918:	2654                	.2byte	0x2654
    691a:	0000                	.2byte	0x0
    691c:	61e0                	.2byte	0x61e0
	...
