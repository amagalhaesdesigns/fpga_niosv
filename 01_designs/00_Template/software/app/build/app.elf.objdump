
app.elf:     file format elf32-littleriscv
app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000003c8

Program Header:
0x70000003 off    0x00027062 vaddr 0x00000000 paddr 0x00000000 align 2**0
         filesz 0x00000034 memsz 0x00000000 flags r--
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00024430 memsz 0x00024430 flags r-x
    LOAD off    0x00025450 vaddr 0x00024450 paddr 0x00026050 align 2**12
         filesz 0x00001c00 memsz 0x00001c00 flags rw-
    LOAD off    0x00000c50 vaddr 0x00027c50 paddr 0x00027c50 align 2**12
         filesz 0x00000000 memsz 0x00013b84 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000029c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0002314c  00000300  00000300  00001300  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001000  00023450  00023450  00024450  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c00  00024450  00026050  00025450  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00013b84  00027c50  00027c50  00027c50  2**3
                  ALLOC
  6 .onchip_memory2 00000000  0003b7d4  0003b7d4  00027050  2**0
                  CONTENTS
  7 .comment      00000012  00000000  00000000  00027050  2**0
                  CONTENTS, READONLY
  8 .riscv.attributes 00000034  00000000  00000000  00027062  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000860  00000000  00000000  00027098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00013006  00000000  00000000  000278f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057cf  00000000  00000000  0003a8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00013e49  00000000  00000000  000400cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00002a8c  00000000  00000000  00053f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00003f49  00000000  00000000  000569a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00001cce  00000000  00000000  0005a8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  0005c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001efb  00000000  00000000  0005c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 0000e363  00000000  00000000  0005e513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000300 l    d  .text	00000000 .text
00023450 l    d  .rodata	00000000 .rodata
00024450 l    d  .rwdata	00000000 .rwdata
00027c50 l    d  .bss	00000000 .bss
0003b7d4 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.S.obj
00000480 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 machine_trap.S.obj
00000020 l       .exceptions	00000000 save_registers
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000300 l     F .text	00000030 Task1
00000330 l     F .text	00000030 Task2
00000000 l    df *ABS*	00000000 tasks.c
00027ce4 l     O .bss	0000008c pxReadyTasksLists
00027d70 l     O .bss	00000014 xDelayedTaskList1
00027d84 l     O .bss	00000014 xDelayedTaskList2
00027d98 l     O .bss	00000004 pxDelayedTaskList
00027d9c l     O .bss	00000004 pxOverflowDelayedTaskList
00027da0 l     O .bss	00000014 xPendingReadyList
00027db4 l     O .bss	00000014 xTasksWaitingTermination
00027dc8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
00027dcc l     O .bss	00000014 xSuspendedTaskList
00027de0 l     O .bss	00000004 uxCurrentNumberOfTasks
00027de4 l     O .bss	00000004 xTickCount
00027de8 l     O .bss	00000004 uxTopReadyPriority
00027dec l     O .bss	00000004 xSchedulerRunning
00027df0 l     O .bss	00000004 xPendedTicks
00027df4 l     O .bss	00000004 xYieldPending
00027df8 l     O .bss	00000004 xNumOfOverflows
00027dfc l     O .bss	00000004 uxTaskNumber
00027e00 l     O .bss	00000004 xNextTaskUnblockTime
00027e04 l     O .bss	00000004 xIdleTaskHandle
00027e08 l     O .bss	00000004 uxSchedulerSuspended
00000570 l     F .text	000002b4 prvInitialiseNewTask
00000824 l     F .text	0000022c prvAddNewTaskToReadyList
00003688 l     F .text	000000c8 prvInitialiseTaskLists
00003b6c l     F .text	00000054 prvResetNextTaskUnblockTime
00003b18 l     F .text	00000054 prvDeleteTCB
0000545c l     F .text	000001c4 prvAddCurrentTaskToDelayedList
0000153c l     F .text	00000084 prvTaskIsTaskSuspended
0000366c l     F .text	0000001c prvIdleTask
00001ef4 l     F .text	00000180 prvSearchForNameWithinSingleList
00003978 l     F .text	00000138 prvListTasksWithinSingleList
00003750 l     F .text	000000c8 prvCheckTasksWaitingTermination
00003ab0 l     F .text	00000068 prvTaskCheckFreeStackSpace
00000000 l    df *ABS*	00000000 timers.c
00027e0c l     O .bss	00000014 xActiveTimerList1
00027e20 l     O .bss	00000014 xActiveTimerList2
00027e34 l     O .bss	00000004 pxCurrentTimerList
00027e38 l     O .bss	00000004 pxOverflowTimerList
00027e3c l     O .bss	00000004 xTimerQueue
00027e40 l     O .bss	00000004 xTimerTaskHandle
00006304 l     F .text	000000e4 prvCheckForValidListAndQueue
00005cdc l     F .text	00000050 prvTimerTask
00005714 l     F .text	000000b8 prvInitialiseNewTimer
00005bb8 l     F .text	00000088 prvReloadTimer
00005f08 l     F .text	000000e4 prvInsertTimerInActiveList
00005c40 l     F .text	0000009c prvProcessExpiredTimer
00005e2c l     F .text	00000070 prvGetNextExpireTime
00005d2c l     F .text	00000100 prvProcessTimerOrBlockTask
00005fec l     F .text	00000298 prvProcessReceivedCommands
00005e9c l     F .text	0000006c prvSampleTimeNow
00027e44 l     O .bss	00000004 xLastTime.0
00006284 l     F .text	00000080 prvSwitchTimerLists
00000000 l    df *ABS*	00000000 alt_load.c
0000676c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tls.c
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00024450 l     O .rwdata	00001070 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00006f24 l     F .text	000003d8 altera_avalon_jtag_uart_irq
000072fc l     F .text	000001b4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00026008 l     O .rwdata	00000004 lockid
00027ec8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002600c l     O .rwdata	00000004 lockid
00027ecc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 heap_wrapper.c
00027ed0 l     O .bss	00013880 ucHeap
00024420 l     O .rodata	00000004 xHeapStructSize
0003b750 l     O .bss	00000008 xStart
0003b758 l     O .bss	00000004 pxEnd
0003b75c l     O .bss	00000004 xFreeBytesRemaining
0003b760 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
0003b764 l     O .bss	00000004 xNumberOfSuccessfulAllocations
0003b768 l     O .bss	00000004 xNumberOfSuccessfulFrees
0000865c l     F .text	00000134 prvHeapInit
00008790 l     F .text	0000013c prvInsertBlockIntoFreeList
00000000 l    df *ABS*	00000000 event_groups.c
00009348 l     F .text	00000070 prvTestWaitCondition
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 port.c
00000000 l    df *ABS*	00000000 portASM.S.obj
00009930 l       .text	00000000 chip_specific_stack_frame
00009b6c l       .text	00000000 other_exception
00009e5c l       .text	00000000 exit_without_context_switch
00009fb0 l       .text	00000000 synchronous_exception
00009fa0 l       .text	00000000 asynchronous_interrupt
00009fc4 l       .text	00000000 handle_interrupt
0000a030 l       .text	00000000 handle_exception
00009fc4 l       .text	00000000 test_if_mtimer
0000a028 l       .text	00000000 application_interrupt_handler
0000a048 l       .text	00000000 processed_source
0000a040 l       .text	00000000 application_exception_handler
00000000 l    df *ABS*	00000000 queue.c
0000a3a8 l     F .text	00000098 prvInitialiseNewQueue
0000a440 l     F .text	0000005c prvInitialiseMutex
0000be10 l     F .text	0000018c prvCopyDataToQueue
0000c92c l     F .text	00000138 prvNotifyQueueSetContainer
0000c29c l     F .text	00000084 prvIsQueueFull
0000c034 l     F .text	0000018c prvUnlockQueue
0000bf9c l     F .text	00000098 prvCopyDataFromQueue
0000c1c0 l     F .text	0000007c prvIsQueueEmpty
0000bdc0 l     F .text	00000050 prvGetDisinheritPriorityAfterTimeout
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000cc18 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000cc80 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d024 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 intel_niosv_irq.c
00000000 l    df *ABS*	00000000 mtimer.c
00000000 l    df *ABS*	00000000 lib_a-atexit.o
00000000 l    df *ABS*	00000000 lib_a-exit.o
00000000 l    df *ABS*	00000000 lib_a-impure.o
00025668 l     O .rwdata	00000428 impure_data
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 lib_a-memset.o
00000000 l    df *ABS*	00000000 lib_a-printf.o
00000000 l    df *ABS*	00000000 lib_a-puts.o
00000000 l    df *ABS*	00000000 lib_a-reent.o
00000000 l    df *ABS*	00000000 lib_a-stack_protector.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-sysclose.o
00000000 l    df *ABS*	00000000 lib_a-sysopen.o
00000000 l    df *ABS*	00000000 lib_a-syswrite.o
00000000 l    df *ABS*	00000000 lib_a-vfprintf.o
00010a84 l     F .text	000000f8 __sbprintf
000237d8 l     O .rodata	00000010 blanks.1
000237e8 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-writer.o
00000000 l    df *ABS*	00000000 lib_a-wsetup.o
00000000 l    df *ABS*	00000000 lib_a-__atexit.o
00000000 l    df *ABS*	00000000 lib_a-__call_atexit.o
00010f50 l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 lib_a-closer.o
00000000 l    df *ABS*	00000000 lib_a-fflush.o
00000000 l    df *ABS*	00000000 lib_a-findfp.o
000113c4 l     F .text	00000040 __fp_lock
00011404 l     F .text	00000040 __fp_unlock
00000000 l    df *ABS*	00000000 lib_a-fini.o
00000000 l    df *ABS*	00000000 lib_a-freer.o
00000000 l    df *ABS*	00000000 lib_a-fvwrite.o
00000000 l    df *ABS*	00000000 lib_a-fwalk.o
00000000 l    df *ABS*	00000000 lib_a-ldtoa.o
000122fc l     F .text	00000054 eshdn1
00012350 l     F .text	00000054 eshup1
000123a4 l     F .text	0000008c m16m
00012430 l     F .text	000000bc emovo.constprop.0
000124ec l     F .text	00000174 enormlz
00012660 l     F .text	000001bc eshift.part.0
0001281c l     F .text	000000b4 emovi
000128d0 l     F .text	0000014c ecmp
00012a1c l     F .text	0000049c emdnorm
00012eb8 l     F .text	00000164 eiremain
0001301c l     F .text	00000154 e113toe.isra.0
00013170 l     F .text	00000594 ediv
00013704 l     F .text	000004d0 emul
000238a0 l     O .rodata	00000014 ezero
000238b4 l     O .rodata	00000104 etens
000239b8 l     O .rodata	00000104 emtens
00023abc l     O .rodata	00000014 eone
00023ad0 l     O .rodata	00000022 bmask
00000000 l    df *ABS*	00000000 lib_a-localeconv.o
00000000 l    df *ABS*	00000000 lib_a-lock.o
00000000 l    df *ABS*	00000000 lib_a-makebuf.o
00000000 l    df *ABS*	00000000 lib_a-mallocr.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memmove-stub.o
00000000 l    df *ABS*	00000000 lib_a-mprec.o
00023b28 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 lib_a-openr.o
00000000 l    df *ABS*	00000000 lib_a-reallocr.o
00000000 l    df *ABS*	00000000 lib_a-s_frexp.o
00000000 l    df *ABS*	00000000 lib_a-sbrkr.o
00000000 l    df *ABS*	00000000 lib_a-signal.o
00000000 l    df *ABS*	00000000 lib_a-signalr.o
00000000 l    df *ABS*	00000000 lib_a-sprintf.o
00000000 l    df *ABS*	00000000 lib_a-stdio.o
00000000 l    df *ABS*	00000000 lib_a-strcpy.o
00000000 l    df *ABS*	00000000 lib_a-strncpy.o
00000000 l    df *ABS*	00000000 lib_a-svfprintf.o
00023e54 l     O .rodata	00000010 blanks.1
00023e64 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-vfiprintf.o
0001a7e4 l     F .text	000000f4 __sprint_r.part.0
0001bd2c l     F .text	000000f8 __sbprintf
00023fe0 l     O .rodata	00000010 blanks.1
00023ff0 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-assert.o
00000000 l    df *ABS*	00000000 lib_a-callocr.o
00000000 l    df *ABS*	00000000 lib_a-errno.o
00000000 l    df *ABS*	00000000 lib_a-fclose.o
00000000 l    df *ABS*	00000000 lib_a-fiprintf.o
00000000 l    df *ABS*	00000000 lib_a-fputwc.o
00000000 l    df *ABS*	00000000 lib_a-fstatr.o
00000000 l    df *ABS*	00000000 lib_a-isattyr.o
00000000 l    df *ABS*	00000000 lib_a-locale.o
00000000 l    df *ABS*	00000000 lib_a-lseekr.o
00000000 l    df *ABS*	00000000 lib_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 lib_a-readr.o
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-svfiprintf.o
000241bc l     O .rodata	00000010 blanks.1
000241cc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 lib_a-wbuf.o
00000000 l    df *ABS*	00000000 lib_a-wcrtomb.o
00000000 l    df *ABS*	00000000 lib_a-wctomb_r.o
00000000 l    df *ABS*	00000000 lib_a-abort.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 eqtf2.c
00000000 l    df *ABS*	00000000 getf2.c
00000000 l    df *ABS*	00000000 letf2.c
00000000 l    df *ABS*	00000000 multf3.c
00000000 l    df *ABS*	00000000 subtf3.c
00000000 l    df *ABS*	00000000 fixtfsi.c
00000000 l    df *ABS*	00000000 floatsitf.c
00000000 l    df *ABS*	00000000 extenddftf2.c
00000000 l    df *ABS*	00000000 trunctfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00022388 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000224f4 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00022620 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00022768 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
000228a8 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_open.c
000229d4 l     F .text	0000004c alt_get_errno
00022a20 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00022c74 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002604c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00022e94 l     F .text	0000004c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 lib_a-sysfstat.o
0000dd34 g     F .text	0000000c .hidden __stack_chk_fail_local
00016c34 g     F .text	000000ac _mprec_log10
000093b8 g     F .text	00000050 xEventGroupSetBitsFromISR
00016d48 g     F .text	00000064 __any_on
0001c4a4 g     F .text	00000058 _isatty_r
00023c00 g     O .rodata	00000028 __mprec_tinytens
000085c0 g     F .text	0000009c pvPortCalloc
00006844 g     F .text	000000f0 alt_main
00017c54 g     F .text	000000b0 strcpy
0000dae8 g     F .text	00000094 cleanup_glue
00022600 g     F .text	00000020 _getpid
0000d9ac g     F .text	0000012c _puts_r
00027e48 g     O .bss	00000080 alt_irq
0001c600 g     F .text	00000064 _lseek_r
00002bfc g     F .text	00000108 vTaskPlaceOnUnorderedEventList
0000855c g     F .text	00000024 xPortGetFreeHeapSize
0000902c g     F .text	0000003c xEventGroupGetBitsFromISR
00026050 g       *ABS*	00000000 __flash_rwdata_start
0001ef20 g     F .text	00000158 .hidden __getf2
0003b7d4 g       *ABS*	00000000 __alt_heap_start
00000f50 g     F .text	00000088 uxTaskPriorityGet
000056a0 g     F .text	00000074 xTimerCreate
0001799c g     F .text	00000060 _kill_r
0001ee50 g     F .text	000000d0 .hidden __eqtf2
0000d95c g     F .text	00000050 printf
00026804 g       *ABS*	00000000 __global_pointer$
00027cc8 g     O .bss	00000001 __lock___atexit_recursive_mutex
0001ddc4 g     F .text	00000078 _wcrtomb_r
000174cc g     F .text	00000090 _signal_r
0000243c g     F .text	00000218 xTaskAbortDelay
00017bd4 g     F .text	00000078 __sseek
000114c4 g     F .text	000001b0 __sinit
00003818 g     F .text	00000160 vTaskGetInfo
0001dc3c g     F .text	00000174 __swbuf_r
0000c5d8 g     F .text	000000e0 vQueueWaitForMessageRestricted
0001c4fc g     F .text	0000007c _setlocale_r
00011444 g     F .text	0000006c __sfmoreglue
00024450 g       *ABS*	00000000 __tls_base
000080f4 g     F .text	00000124 __malloc_unlock
00000c18 g     F .text	00000140 xTaskDelayUntil
00021bf0 g     F .text	00000194 .hidden __floatsitf
00026014 g     O .rwdata	00000004 xCriticalNesting
00027cb0 g     O .bss	00000001 __lock___arc4random_mutex
00008a7c g     F .text	00000228 xEventGroupSync
00015a84 g     F .text	0000011c memmove
00005380 g     F .text	000000dc ulTaskGenericNotifyValueClear
00026010 g     O .rwdata	00000004 pullNextTime
000114b0 g     F .text	00000014 _cleanup
0000ab78 g     F .text	00000200 xQueueGenericSendFromISR
00001e98 g     F .text	0000005c pcTaskGetName
00015ba0 g     F .text	000000a8 _Balloc
00027cac g     O .bss	00000004 __stack_chk_guard
00026040 g     O .rwdata	00000004 __atexit_recursive_mutex
0001bf78 g     F .text	0000000c __errno
00014f8c g     F .text	00000004 __retarget_lock_close
0000c840 g     F .text	00000078 xQueueSelectFromSet
00000000 g     F .entry	00000004 __reset
0000a5f4 g     F .text	000000ac xQueueGiveMutexRecursive
00014f64 g     F .text	00000008 __localeconv_l
00027c50 g     O .bss	00000004 pxCurrentTCB
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001c444 g     F .text	00000060 _fstat_r
00027ca8 g     O .bss	00000004 errno
00017b44 g     F .text	00000008 __seofread
00009408 g     F .text	00000048 uxEventGroupGetNumber
00027c60 g     O .bss	00000004 alt_argv
00001028 g     F .text	000002f8 vTaskPrioritySet
00027c70 g     O .bss	00000004 alt_heapsem
00003400 g     F .text	00000040 vTaskInternalSetTimeOutState
00008ca4 g     F .text	00000274 xEventGroupWaitBits
000254e8 g     O .rwdata	00000180 alt_fd_list
0000c8b8 g     F .text	00000074 xQueueSelectFromSetFromISR
00009880 g     F .text	0000005c xPortStartScheduler
00001a58 g     F .text	00000034 vTaskEndScheduler
00022fe4 g     F .text	00000120 alt_find_dev
0000d69c g     F .text	000001a4 memcpy
00002b94 g     F .text	00000068 vTaskPlaceOnEventList
000030e4 g     F .text	00000288 vTaskRemoveFromUnorderedEventList
000113b8 g     F .text	0000000c _cleanup_r
00017db0 g     F .text	00002a34 _svfprintf_r
00009700  w    F .text	00000180 vPortSetupTimerInterrupt
0000d610 g     F .text	00000028 alt_niosv_timer_sc_isr
0000d100 g     F .text	00000078 alt_io_redirect
0000ba98 g     F .text	000000e4 xQueuePeekFromISR
0000dad8 g     F .text	00000010 puts
00008450 g     F .text	0000010c vPortFree
0002344c g       *ABS*	00000000 __fini_array_end
00005b70 g     F .text	00000048 pcTimerGetName
00009d64 g       .text	00000000 freertos_risc_v_mtimer_interrupt_handler
00016b8c g     F .text	000000a8 __ratio
0000c798 g     F .text	000000a8 xQueueRemoveFromSet
0000b23c g     F .text	000003dc xQueueSemaphoreTake
0000bd40 g     F .text	00000028 uxQueueGetQueueNumber
0000664c g     F .text	000000c8 xTimerPendFunctionCall
0000761c g     F .text	000003ec altera_avalon_jtag_uart_read
0000d91c g     F .text	00000040 _printf_r
0001f078 g     F .text	00000154 .hidden __letf2
0001755c g     F .text	000000c4 _raise_r
00022540 g     F .text	000000c0 _fstat
0001be24 g     F .text	00000058 __assert_func
00009450 g     F .text	00000030 vEventGroupSetNumber
00023b38 g     O .rodata	000000c8 __mprec_tens
000001b4 g     F .exceptions	00000108 handle_trap
0000a4f8 g     F .text	000000a0 xQueueGetMutexHolder
0000950c g     F .text	00000088 vListInsertEnd
00027cdc g     O .bss	00000004 __malloc_top_pad
000043c0 g     F .text	0000019c ulTaskGenericNotifyTake
000179fc g     F .text	00000004 _getpid_r
00027c88 g     O .bss	00000004 alt_fd_list_lock
00008a28 g     F .text	00000054 xEventGroupCreate
00027c8c g     O .bss	00000004 __dso_handle
00014f6c g     F .text	0000000c _localeconv_r
00016044 g     F .text	000000b0 __i2b
00011d08 g     F .text	0000049c __sfvwrite_r
00017620 g     F .text	000000e0 __sigtramp_r
00017418 g     F .text	00000058 _sbrk_r
000092d8 g     F .text	00000038 vEventGroupSetBitsCallback
000017a0 g     F .text	000001d0 xTaskResumeFromISR
0001c6d8 g     F .text	00000064 _read_r
000094e4 g     F .text	00000028 vListInitialiseItem
0002602c g     O .rwdata	00000004 alt_max_fd
00002074 g     F .text	0000012c xTaskGetHandle
0001bf84 g     F .text	00000178 _fclose_r
0000af30 g     F .text	0000030c xQueueReceive
0003b76c g     O .bss	00000040 xQueueRegistry
000112ec g     F .text	000000cc fflush
00027cd8 g     O .bss	00000004 __malloc_max_sbrked_mem
00000fd8 g     F .text	00000050 uxTaskPriorityGetFromISR
0000dd40 g     F .text	0000001c __stack_chk_init
00016918 g     F .text	0000011c __b2d
0000c488 g     F .text	000000a0 pcQueueGetName
00005aec g     F .text	00000034 uxTimerGetReloadMode
00027cbc g     O .bss	00000001 __lock___env_recursive_mutex
0002266c g     F .text	000000fc _isatty
00027cd0 g     O .bss	00000001 __lock___sinit_recursive_mutex
00005948 g     F .text	00000048 xTimerGetPeriod
00024430 g     O .rodata	00000004 _global_impure_ptr
00009068 g     F .text	000001c4 xEventGroupSetBits
00016e10 g     F .text	00000558 _realloc_r
0003b7d4 g       *ABS*	00000000 __bss_end
0000cea8 g     F .text	0000017c alt_iic_isr_register
0000c6b8 g     F .text	00000040 xQueueCreateSet
0000d284 g     F .text	00000160 alt_tick
0001c284 g     F .text	000000cc _fputwc_r
00023c28 g     O .rodata	00000028 __mprec_bigtens
00015db8 g     F .text	00000134 __s2b
0001df0c g     F .text	00000018 abort
00022b0c g     F .text	00000168 _open
00022dc8 g     F .text	000000cc _sbrk
00016608 g     F .text	00000058 __mcmp
0000dc9c g     F .text	00000098 __stack_chk_fail
00008218 g     F .text	00000238 pvPortMalloc
00024450 g       *ABS*	00000000 __tbss_start
0000d638 g     F .text	0000001c alt_niosv_mtimecmp_interrupt_init
00011800 g     F .text	00000030 __fp_lock_all
0000bce8 g     F .text	00000058 vQueueDelete
000098dc g     F .text	00000014 vPortEndScheduler
00009480 g     F .text	00000064 vListInitialise
0000d1ec g     F .text	00000098 alt_alarm_stop
000000c0 g     F .exceptions	000000f4 alt_irq_handler
000254c0 g     O .rwdata	00000028 alt_dev_null
00001e18 g     F .text	0000002c xTaskGetTickCount
0000a7e4 g     F .text	00000394 xQueueGenericSend
00011860 g     F .text	0000005c __libc_fini_array
0000d4c4 g     F .text	00000084 alt_niosv_mtime_get
0000db7c g     F .text	00000120 _reclaim_reent
0000cbd0 g     F .text	00000048 alt_dcache_flush_all
00015eec g     F .text	00000078 __hi0bits
000021a0 g     F .text	000001f4 uxTaskGetSystemState
00004f84 g     F .text	00000328 vTaskGenericNotifyGiveFromISR
00003e90 g     F .text	00000228 xTaskPriorityDisinherit
00027cc0 g     O .bss	00000001 __lock___malloc_recursive_mutex
00000000 g       *ABS*	00000000 __tdata_size
00026050 g       *ABS*	00000000 __ram_rwdata_end
00009f00 g       .text	00000000 freertos_risc_v_trap_handler
00006a9c g     F .text	00000080 freertos_risc_v_application_interrupt_handler
00009a10 g       .text	00000000 freertos_risc_v_exception_handler
00026024 g     O .rwdata	00000008 alt_dev_list
0000de44 g     F .text	00000018 write
0000d4a0 g     F .text	00000024 alt_timestamp_freq
00000000 g       *ABS*	00000000 __tbss_size
00006a80 g     F .text	0000001c vApplicationMallocFailedHook
00002de8 g     F .text	000002fc xTaskRemoveFromEventList
00024450 g       *ABS*	00000000 __ram_rodata_end
00023430 g     F .text	00000014 fstat
00008f18 g     F .text	000000c8 xEventGroupClearBits
000069dc g     F .text	00000050 vApplicationTickHook
0000b618 g     F .text	00000314 xQueuePeek
00021af4 g     F .text	000000fc .hidden __fixtfsi
00016328 g     F .text	00000150 __pow5mult
0003b7d4 g       *ABS*	00000000 end
00024424 g     O .rodata	00000004 xISRStackTop
00000a50 g     F .text	000001c8 vTaskDelete
0000cc44 g     F .text	0000003c alt_dev_reg
00014fb0 g     F .text	00000004 __retarget_lock_release_recursive
0000c528 g     F .text	000000b0 vQueueUnregisterQueue
00014fa4 g     F .text	00000008 __retarget_lock_try_acquire_recursive
00006de4 g     F .text	00000140 altera_avalon_jtag_uart_init
00006b1c g     F .text	00000080 freertos_risc_v_application_exception_handler
0000437c g     F .text	00000044 pvTaskIncrementMutexHeldCount
00040000 g       *ABS*	00000000 __alt_stack_pointer
0001df24 g     F .text	00000088 .hidden __clzsi2
00007a08 g     F .text	000003fc altera_avalon_jtag_uart_write
000117d0 g     F .text	0000000c __sfp_lock_acquire
000159c0 g     F .text	000000c4 memchr
00017a00 g     F .text	0000006c _sprintf_r
00003440 g     F .text	0000017c xTaskCheckForTimeOut
000119fc g     F .text	0000030c _free_r
00003c40 g     F .text	00000250 xTaskPriorityInherit
00006714 g     F .text	00000028 uxTimerGetTimerNumber
0001c578 g     F .text	0000000c __locale_mb_cur_max
00010e10 g     F .text	00000140 __call_exitprocs
0000455c g     F .text	00000204 xTaskGenericNotifyWait
00026044 g     O .rwdata	00000004 __malloc_sbrk_base
000003c8 g     F .text	000000bc _start
00027c90 g     O .bss	00000004 _alt_tick_rate
00001a8c g     F .text	00000030 vTaskSuspendAll
00000dcc g     F .text	00000184 eTaskGetState
00014f9c g     F .text	00000008 __retarget_lock_try_acquire
00001e44 g     F .text	00000030 xTaskGetTickCountFromISR
000069b4 g     F .text	00000028 alt_set_thread_pointer
000228f4 g     F .text	000000e0 _lseek
00016478 g     F .text	00000190 __lshift
0001f078 g     F .text	00000154 .hidden __lttf2
00027c98 g     O .bss	00000008 _alt_nticks
000177c4 g     F .text	00000098 signal
0001ee50 g     F .text	000000d0 .hidden __netf2
0000d5a4 g     F .text	0000006c alt_niosv_mtimecmp_get
00006bd4 g     F .text	0000009c alt_sys_init
0001c8b8 g     F .text	000001c8 __ssprint_r
00009668 g     F .text	00000098 uxListRemove
00016dac g     F .text	00000064 _open_r
00024450 g       *ABS*	00000000 __tdata_source
00010d24 g     F .text	000000ec __register_exitproc
00014eec g     F .text	00000078 _ldcheck
00009c14 g       .text	00000000 freertos_risc_v_interrupt_handler
000160f4 g     F .text	00000234 __multiply
000074b0 g     F .text	0000006c altera_avalon_jtag_uart_close
00026018 g     O .rwdata	00000004 pxCriticalNesting
00024450 g       *ABS*	00000000 __ram_rwdata_start
00017d04 g     F .text	000000ac strncpy
00023450 g       *ABS*	00000000 __ram_rodata_start
0003b7ac g     O .bss	00000028 __malloc_current_mallinfo
000015c0 g     F .text	000001e0 vTaskResume
00016a34 g     F .text	00000158 __d2b
00002a18 g     F .text	0000017c vTaskSwitchContext
00027ca0 g     O .bss	00000008 alt_niosv_timestamp_offset
00005990 g     F .text	000000bc vTimerSetReloadMode
00027c58 g     O .bss	00000004 alt_niosv_timer_interrupt_handler
00006c70 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
00023240 g     F .text	000001f0 alt_get_fd
00002d04 g     F .text	000000e4 vTaskPlaceOnEventListRestricted
00021d84 g     F .text	00000260 .hidden __extenddftf2
00010f68 g     F .text	00000058 _close_r
00006d38 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
0003b7d4 g       *ABS*	00000000 __alt_stack_base
00006d8c g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
00014f90 g     F .text	00000004 __retarget_lock_close_recursive
000057cc g     F .text	0000013c xTimerGenericCommand
0000362c g     F .text	00000040 vTaskSetTaskNumber
00010be0 g     F .text	00000144 __swsetup_r
00006a48 g     F .text	00000038 vApplicationStackOverflowHook
00001320 g     F .text	0000021c vTaskSuspend
0001dfac g     F .text	00000780 .hidden __divdf3
00011674 g     F .text	0000015c __sfp
00016ce0 g     F .text	00000068 __copybits
00002394 g     F .text	000000a8 xTaskCatchUpTicks
00001e74 g     F .text	00000024 uxTaskGetNumberOfTasks
00025a90 g     O .rwdata	00000408 __malloc_av_
000117f4 g     F .text	0000000c __sinit_lock_release
0001e72c g     F .text	00000724 .hidden __muldf3
000065a0 g     F .text	000000ac xTimerPendFunctionCallFromISR
00017ae8 g     F .text	0000005c __sread
00023104 g     F .text	0000013c alt_find_file
0000cccc g     F .text	000000a8 alt_dev_llist_insert
00007f98 g     F .text	0000015c __malloc_lock
0002344c g       *ABS*	00000000 __fini_array_start
0000a6a0 g     F .text	000000b8 xQueueTakeMutexRecursive
0001120c g     F .text	000000e0 _fflush_r
0000922c g     F .text	000000ac vEventGroupDelete
0001be90 g     F .text	000000e8 _calloc_r
00004760 g     F .text	000003d8 xTaskGenericNotify
00014f98 g     F .text	00000004 __retarget_lock_acquire_recursive
00027c50 g       *ABS*	00000000 __bss_start
00024450 g       *ABS*	00000000 __tdata_start
00024450 g       *ABS*	00000000 __tdata_end
000035e4 g     F .text	00000048 uxTaskGetTaskNumber
0000d840 g     F .text	000000dc memset
00000360 g     F .text	00000068 main
00027c64 g     O .bss	00000004 alt_envp
00027cd4 g     O .bss	00000004 __malloc_max_total_mem
00006cd4 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
00014f88 g     F .text	00000004 __retarget_lock_init_recursive
0001ddb0 g     F .text	00000014 __swbuf
00009594 g     F .text	000000d4 vListInsert
00008fe0 g     F .text	0000004c xEventGroupClearBitsFromISR
00017c4c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0001c0fc g     F .text	00000010 fclose
00005620 g     F .text	00000080 xTimerCreateTimerTask
0000d408 g     F .text	00000040 alt_timestamp_start
0002344c g       *ABS*	00000000 __init_array_end
0001521c g     F .text	000007a4 _malloc_r
0001dedc g     F .text	00000030 __ascii_wctomb
0000bd98 g     F .text	00000028 ucQueueGetQueueType
00026030 g     O .rwdata	00000004 alt_errno
0001c10c g     F .text	00000038 _fiprintf_r
0001785c g     F .text	00000060 _init_signal
00007f00 g     F .text	00000098 __env_unlock
000121a4 g     F .text	000000a4 _fwalk
0000b92c g     F .text	0000016c xQueueReceiveFromISR
0001c664 g     F .text	0000000c _mbtowc_r
00003bc0 g     F .text	0000002c xTaskGetCurrentTaskHandle
0000a2b8 g     F .text	000000f0 xQueueGenericCreate
000118bc g     F .text	00000140 _malloc_trim_r
0001c73c g     F .text	0000017c strcmp
0000a758 g     F .text	0000008c xQueueCreateCountingSemaphore
00023450 g       *ABS*	00000000 __flash_rodata_start
00027c68 g     O .bss	00000004 ulHalNestedInterruptCounter
0001bd14 g     F .text	00000018 vfiprintf
00014f84 g     F .text	00000004 __retarget_lock_init
0001f1cc g     F .text	000011ac .hidden __multf3
00004b38 g     F .text	0000044c xTaskGenericNotifyFromISR
0000bd68 g     F .text	00000030 vQueueSetQueueNumber
00006b9c g     F .text	00000038 alt_irq_init
0000d178 g     F .text	00000074 alt_release_fd
00001abc g     F .text	0000035c xTaskResumeAll
00026004 g     O .rwdata	00000004 uxTopUsedPriority
0000bc00 g     F .text	00000098 uxQueueSpacesAvailable
00017a6c g     F .text	0000007c sprintf
00024320 g     O .rodata	00000100 .hidden __clz_tab
00001970 g     F .text	000000e8 vTaskStartScheduler
00027ce0 g     O .bss	00000004 _PathLocale
0000d654 g     F .text	00000014 atexit
00010b7c g     F .text	00000064 _write_r
00009950 g       .text	00000000 xPortStartFirstTask
0001c584 g     F .text	0000007c setlocale
0000c320 g     F .text	00000068 xQueueIsQueueFullFromISR
00006934 g     F .text	00000080 alt_init_tls_block
00006488 g     F .text	0000008c pvTimerGetTimerID
0002603c g     O .rwdata	00000004 _impure_ptr
00027c5c g     O .bss	00000004 alt_argc
00005b20 g     F .text	00000050 xTimerGetExpiryTime
00010fc0 g     F .text	0000024c __sflush_r
00027c84 g     O .bss	00000004 xTaskReturnAddress
0000cdd4 g     F .text	00000060 _do_dtors
0001ef20 g     F .text	00000158 .hidden __gttf2
0001ca80 g     F .text	000011bc _svfiprintf_r
0001c670 g     F .text	00000068 __ascii_mbtowc
00020378 g     F .text	0000177c .hidden __subtf3
000168b0 g     F .text	00000068 __ulp
00011830 g     F .text	00000030 __fp_unlock_all
000035bc g     F .text	00000028 vTaskMissedYield
0002601c g     O .rwdata	00000008 alt_fs_list
0000bb7c g     F .text	00000084 uxQueueMessagesWaiting
0000c388 g     F .text	00000100 vQueueAddToRegistry
00002654 g     F .text	000003c4 xTaskIncrementTick
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f78 g     F .text	0000000c localeconv
0000d448 g     F .text	00000058 alt_timestamp
00027c80 g     O .bss	00000004 pullMachineTimerCompareRegister
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00015144 g     F .text	000000d8 __swhatbuf_r
0000ce54 g     F .text	00000054 alt_ic_isr_register
00000020 g       .exceptions	00000000 trap_vector
0000a0f0 g     F .text	000001c8 xQueueGenericReset
00006514 g     F .text	0000008c vTimerSetTimerID
00022ee0 g     F .text	00000104 _write
00026050 g       *ABS*	00000000 _edata
0003b7d4 g       *ABS*	00000000 _end
0001c190 g     F .text	000000f4 __fputwc
000002bc g       *ABS*	00000000 __ram_exceptions_end
00027cc4 g     O .bss	00000001 __lock___at_quick_exit_mutex
0000751c g     F .text	00000100 altera_avalon_jtag_uart_ioctl
0000d3e4 g     F .text	00000024 intel_niosv_irq_init
00000484 g     F .text	000000ec xTaskCreate
000085a4 g     F .text	0000001c vPortInitialiseBlocks
000052ac g     F .text	000000d4 xTaskGenericNotifyStateClear
000063e8 g     F .text	000000a0 xTimerIsTimerActive
00017b4c g     F .text	00000088 __swrite
00026048 g     O .rwdata	00000004 __malloc_trim_threshold
0000d668 g     F .text	00000034 exit
0001c144 g     F .text	0000004c fiprintf
0001a8f0 g     F .text	00001424 _vfiprintf_r
00012248 g     F .text	000000b4 _fwalk_reent
00024428 g     O .rodata	00000004 uxTimerIncrementsForOneTick
00016660 g     F .text	00000250 __mdiff
000227b4 g     F .text	000000f4 _kill
00000d58 g     F .text	00000074 vTaskDelay
00040000 g       *ABS*	00000000 __alt_data_end
00024450 g       *ABS*	00000000 __tbss_end
000117dc g     F .text	0000000c __sfp_lock_release
00013bd4 g     F .text	00001318 _ldtoa_r
00005a4c g     F .text	000000a0 xTimerGetReloadMode
00003bec g     F .text	00000054 xTaskGetSchedulerState
000241dc g     O .rodata	00000101 _ctype_
000040b8 g     F .text	00000274 vTaskPriorityDisinheritAfterTimeout
00022cc0 g     F .text	00000108 _read
00023444 g       *ABS*	00000000 __init_array_start
00014f94 g     F .text	00000004 __retarget_lock_acquire
00014fac g     F .text	00000004 __retarget_lock_release
000224b4 g     F .text	00000040 _exit
0000ca64 g     F .text	0000016c alt_alarm_start
00027cb4 g     O .bss	00000001 __lock___dd_hash_mutex
00014fb4 g     F .text	00000190 __smakebuf_r
00027cb8 g     O .bss	00000001 __lock___tz_mutex
0000dd5c g     F .text	0000008c strlen
000098f0 g       .text	00000000 pxPortInitialiseStack
00017470 g     F .text	0000005c _init_signal_r
0000ddf8 g     F .text	0000004c open
0000a598 g     F .text	0000005c xQueueGetMutexHolderFromISR
0000c6f8 g     F .text	000000a0 xQueueAddToSet
0001be7c g     F .text	00000014 __assert
000088cc g     F .text	0000015c vPortGetHeapStats
0001a8d8 g     F .text	00000018 __sprint_r
0000ce34 g     F .text	00000020 alt_icache_flush_all
0000336c g     F .text	00000094 vTaskSetTimeOutState
00005908 g     F .text	00000040 xTimerGetTimerDaemonTaskHandle
0000d548 g     F .text	0000005c alt_niosv_mtimecmp_set
0000673c g     F .text	00000030 vTimerSetTimerNumber
0001ded0 g     F .text	0000000c _wctomb_r
0000bc98 g     F .text	00000050 uxQueueMessagesWaitingFromISR
00007e04 g     F .text	000000fc __env_lock
0000c23c g     F .text	00000060 xQueueIsQueueEmptyFromISR
00027c78 g     O .bss	00000008 ullNextTime
0000de5c g     F .text	00002c10 _vfprintf_r
0002442c g     O .rodata	00000004 ullMachineTimerCompareRegisterBase
00015f64 g     F .text	000000e0 __lo0bits
00026034 g     O .rwdata	00000008 alt_alarm_list
0000cd74 g     F .text	00000060 _do_ctors
000178bc g     F .text	000000e0 __sigtramp
0000432c g     F .text	00000050 uxTaskResetEventItemValue
0001de3c g     F .text	00000094 wcrtomb
0000a49c g     F .text	0000005c xQueueCreateMutex
00017368 g     F .text	000000b0 frexp
0000dde8 g     F .text	00000010 close
00027c6c g     O .bss	00000004 alt_envsem
00025e98 g     O .rwdata	0000016c __global_locale
000067d0 g     F .text	00000074 alt_load
00010a6c g     F .text	00000018 vfprintf
00027c54 g     O .bss	00000004 alt_niosv_software_interrupt_handler
00021fe4 g     F .text	000003a4 .hidden __trunctfdf2
00027ccc g     O .bss	00000001 __lock___sfp_recursive_mutex
00009310 g     F .text	00000038 vEventGroupClearBitsCallback
00008580 g     F .text	00000024 xPortGetMinimumEverFreeHeapSize
0000ad78 g     F .text	000001b8 xQueueGiveFromISR
0001c350 g     F .text	000000f4 fputwc
000223d4 g     F .text	000000e0 _close
00017700 g     F .text	000000c4 raise
000117e8 g     F .text	0000000c __sinit_lock_acquire
00015c6c g     F .text	0000014c __multadd
00015c48 g     F .text	00000024 _Bfree
00006a2c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */

    /* Jump to the _start entry point in the .text section. */
    tail _start
   0:	3c80006f          	j	3c8 <_start>
	...

Disassembly of section .exceptions:

00000020 <trap_vector>:
    /* Save caller-saved registers on the stack */

#if __riscv_flen == 32 // rv32if
    addi sp, sp, -36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
    addi sp, sp, -16 * 4
  20:	fc010113          	addi	sp,sp,-64
#else // rv32e (16-bit)
    addi sp, sp, -10 * 4
#endif

    /* rv32e (16-bit), rv32i and rv32if */
    sw ra,  0 * 4(sp)
  24:	00112023          	sw	ra,0(sp)
    sw t0,  1 * 4(sp)
  28:	00512223          	sw	t0,4(sp)
    sw t1,  2 * 4(sp)
  2c:	00612423          	sw	t1,8(sp)
    sw t2,  3 * 4(sp)
  30:	00712623          	sw	t2,12(sp)
    sw a0,  4 * 4(sp)
  34:	00a12823          	sw	a0,16(sp)
    sw a1,  5 * 4(sp)
  38:	00b12a23          	sw	a1,20(sp)
    sw a2,  6 * 4(sp)
  3c:	00c12c23          	sw	a2,24(sp)
    sw a3,  7 * 4(sp)
  40:	00d12e23          	sw	a3,28(sp)
    sw a4,  8 * 4(sp)
  44:	02e12023          	sw	a4,32(sp)
    sw a5,  9 * 4(sp)
  48:	02f12223          	sw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32 
    sw a6, 10 * 4(sp)
  4c:	03012423          	sw	a6,40(sp)
    sw a7, 11 * 4(sp)
  50:	03112623          	sw	a7,44(sp)
    sw t3, 12 * 4(sp)
  54:	03c12823          	sw	t3,48(sp)
    sw t4, 13 * 4(sp)
  58:	03d12a23          	sw	t4,52(sp)
    sw t5, 14 * 4(sp)
  5c:	03e12c23          	sw	t5,56(sp)
    sw t6, 15 * 4(sp)
  60:	03f12e23          	sw	t6,60(sp)
    fsw fa6, 34 * 4(sp)
    fsw fa7, 35 * 4(sp)
#endif
    
    /* Call handle_trap to dispatch the correct handler, if available */
    csrr a0, mcause
  64:	34202573          	csrr	a0,mcause
    csrr a1, mepc
  68:	341025f3          	csrr	a1,mepc
    csrr a2, mtval
  6c:	34302673          	csrr	a2,mtval
    jal handle_trap
  70:	144000ef          	jal	ra,1b4 <handle_trap>
    csrw mepc, a0
  74:	34151073          	csrw	mepc,a0

    /* Restore caller-saved registers */

    /* rv32e (16-bit), rv32i and rv32if */
    lw ra,  0 * 4(sp)
  78:	00012083          	lw	ra,0(sp)
    lw t0,  1 * 4(sp)
  7c:	00412283          	lw	t0,4(sp)
    lw t1,  2 * 4(sp)
  80:	00812303          	lw	t1,8(sp)
    lw t2,  3 * 4(sp)
  84:	00c12383          	lw	t2,12(sp)
    lw a0,  4 * 4(sp)
  88:	01012503          	lw	a0,16(sp)
    lw a1,  5 * 4(sp)
  8c:	01412583          	lw	a1,20(sp)
    lw a2,  6 * 4(sp)
  90:	01812603          	lw	a2,24(sp)
    lw a3,  7 * 4(sp)
  94:	01c12683          	lw	a3,28(sp)
    lw a4,  8 * 4(sp)
  98:	02012703          	lw	a4,32(sp)
    lw a5,  9 * 4(sp)
  9c:	02412783          	lw	a5,36(sp)

    /* rv32i and rv32if */
#if ALT_CPU_NUM_GPR == 32	
    lw a6, 10 * 4(sp)
  a0:	02812803          	lw	a6,40(sp)
    lw a7, 11 * 4(sp)
  a4:	02c12883          	lw	a7,44(sp)
    lw t3, 12 * 4(sp)
  a8:	03012e03          	lw	t3,48(sp)
    lw t4, 13 * 4(sp)
  ac:	03412e83          	lw	t4,52(sp)
    lw t5, 14 * 4(sp)
  b0:	03812f03          	lw	t5,56(sp)
    lw t6, 15 * 4(sp)
  b4:	03c12f83          	lw	t6,60(sp)
#endif

#if __riscv_flen == 32 // rv32if
    addi sp, sp, 36 * 4
#elif ALT_CPU_NUM_GPR == 32 // rv32i
	addi sp, sp, 16 * 4
  b8:	04010113          	addi	sp,sp,64
    lw s0, 0(sp)
    lw s1, 4(sp)
    addi sp, sp, 8
#endif

    mret
  bc:	30200073          	mret

000000c0 <alt_irq_handler>:
 * This means that if there is never a call to alt_irq_register() then
 * this function will not get linked in to the executable. This is acceptable
 * since if no handler is ever registered, then an interrupt can never occur.
 */
void alt_irq_handler (void)
{
  c0:	fd010113          	addi	sp,sp,-48
  c4:	02112623          	sw	ra,44(sp)
  c8:	02812423          	sw	s0,40(sp)
  cc:	03010413          	addi	s0,sp,48
    alt_u32 i;

    /*
     * Notify the operating system that we are at interrupt level.
     */  
    ALT_OS_INT_ENTER();
  d0:	00000013          	nop
{
#if ALT_HAS_IRQ_SUPPORT
    alt_u32 active;
    alt_u32 enabled;

    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
  d4:	344027f3          	csrr	a5,mip
  d8:	fef42023          	sw	a5,-32(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
  dc:	304027f3          	csrr	a5,mie
  e0:	fef42223          	sw	a5,-28(s0)

    // Since this is used by alt_irq_handler, we want to only process the upper 16-bits
    // --> the interrupt lines connected via Platform Designer...
    return (active & enabled) >> 16;
  e4:	fe042703          	lw	a4,-32(s0)
  e8:	fe442783          	lw	a5,-28(s0)
  ec:	00f777b3          	and	a5,a4,a5
  f0:	0107d793          	srli	a5,a5,0x10
     * reduced by finding out which interrupts are pending as late as possible.
     * Consider the case where the high priority interupt is asserted during
     * the interrupt entry sequence for a lower priority interrupt to see why
     * this is the case.
     */
    active = alt_irq_pending();
  f4:	fcf42a23          	sw	a5,-44(s0)

    do
    {
        i = 0;
  f8:	fc042e23          	sw	zero,-36(s0)
        mask = 1;
  fc:	00100793          	li	a5,1
 100:	fcf42c23          	sw	a5,-40(s0)
         * called to clear the interrupt condition.
         */

        do
        {
            if (active & mask)
 104:	fd442703          	lw	a4,-44(s0)
 108:	fd842783          	lw	a5,-40(s0)
 10c:	00f777b3          	and	a5,a4,a5
 110:	06078263          	beqz	a5,174 <alt_irq_handler+0xb4>
            {
                alt_irq[i].handler(alt_irq[i].context); 
 114:	000287b7          	lui	a5,0x28
 118:	e4878713          	addi	a4,a5,-440 # 27e48 <alt_irq>
 11c:	fdc42783          	lw	a5,-36(s0)
 120:	00379793          	slli	a5,a5,0x3
 124:	00f707b3          	add	a5,a4,a5
 128:	0007a703          	lw	a4,0(a5)
 12c:	000287b7          	lui	a5,0x28
 130:	e4878693          	addi	a3,a5,-440 # 27e48 <alt_irq>
 134:	fdc42783          	lw	a5,-36(s0)
 138:	00379793          	slli	a5,a5,0x3
 13c:	00f687b3          	add	a5,a3,a5
 140:	0047a783          	lw	a5,4(a5)
 144:	00078513          	mv	a0,a5
 148:	000700e7          	jalr	a4
                break;
 14c:	00000013          	nop
    NIOSV_READ_CSR(NIOSV_MIP_CSR, active);
 150:	344027f3          	csrr	a5,mip
 154:	fef42423          	sw	a5,-24(s0)
    NIOSV_READ_CSR(NIOSV_MIE_CSR, enabled);
 158:	304027f3          	csrr	a5,mie
 15c:	fef42623          	sw	a5,-20(s0)
    return (active & enabled) >> 16;
 160:	fe842703          	lw	a4,-24(s0)
 164:	fec42783          	lw	a5,-20(s0)
 168:	00f777b3          	and	a5,a4,a5
 16c:	0107d793          	srli	a5,a5,0x10
 170:	0200006f          	j	190 <alt_irq_handler+0xd0>
            }
            
            mask <<= 1;
 174:	fd842783          	lw	a5,-40(s0)
 178:	00179793          	slli	a5,a5,0x1
 17c:	fcf42c23          	sw	a5,-40(s0)
            i++;
 180:	fdc42783          	lw	a5,-36(s0)
 184:	00178793          	addi	a5,a5,1
 188:	fcf42e23          	sw	a5,-36(s0)
            if (active & mask)
 18c:	f79ff06f          	j	104 <alt_irq_handler+0x44>
            
        } while (1);

        active = alt_irq_pending();
 190:	fcf42a23          	sw	a5,-44(s0)
    
    } while (active);
 194:	fd442783          	lw	a5,-44(s0)
 198:	f60790e3          	bnez	a5,f8 <alt_irq_handler+0x38>

    /*
     * Notify the operating system that interrupt processing is complete.
     */ 

    ALT_OS_INT_EXIT();
 19c:	00000013          	nop
}
 1a0:	00000013          	nop
 1a4:	02c12083          	lw	ra,44(sp)
 1a8:	02812403          	lw	s0,40(sp)
 1ac:	03010113          	addi	sp,sp,48
 1b0:	00008067          	ret

000001b4 <handle_trap>:
{
 1b4:	fd010113          	addi	sp,sp,-48
 1b8:	02112623          	sw	ra,44(sp)
 1bc:	02812423          	sw	s0,40(sp)
 1c0:	03010413          	addi	s0,sp,48
 1c4:	fca42e23          	sw	a0,-36(s0)
 1c8:	fcb42c23          	sw	a1,-40(s0)
 1cc:	fcc42a23          	sw	a2,-44(s0)
    is_irq = (cause & NIOSV_MCAUSE_INTERRUPT_MASK);
 1d0:	fdc42703          	lw	a4,-36(s0)
 1d4:	800007b7          	lui	a5,0x80000
 1d8:	00f777b3          	and	a5,a4,a5
 1dc:	fef42423          	sw	a5,-24(s0)
    exception_code = (cause & ~NIOSV_MCAUSE_INTERRUPT_MASK);
 1e0:	fdc42703          	lw	a4,-36(s0)
 1e4:	800007b7          	lui	a5,0x80000
 1e8:	fff7c793          	not	a5,a5
 1ec:	00f777b3          	and	a5,a4,a5
 1f0:	fef42623          	sw	a5,-20(s0)
    if (is_irq) {
 1f4:	fe842783          	lw	a5,-24(s0)
 1f8:	08078863          	beqz	a5,288 <handle_trap+0xd4>
        switch (exception_code) {
 1fc:	fec42703          	lw	a4,-20(s0)
 200:	00300793          	li	a5,3
 204:	04f70063          	beq	a4,a5,244 <handle_trap+0x90>
 208:	fec42703          	lw	a4,-20(s0)
 20c:	00700793          	li	a5,7
 210:	06f71263          	bne	a4,a5,274 <handle_trap+0xc0>
                if (alt_niosv_timer_interrupt_handler) {
 214:	000287b7          	lui	a5,0x28
 218:	c587a783          	lw	a5,-936(a5) # 27c58 <alt_niosv_timer_interrupt_handler>
 21c:	06078a63          	beqz	a5,290 <handle_trap+0xdc>
                    ALT_OS_INT_ENTER();
 220:	00000013          	nop
                    alt_niosv_timer_interrupt_handler(cause, epc, tval);
 224:	000287b7          	lui	a5,0x28
 228:	c587a783          	lw	a5,-936(a5) # 27c58 <alt_niosv_timer_interrupt_handler>
 22c:	fd442603          	lw	a2,-44(s0)
 230:	fd842583          	lw	a1,-40(s0)
 234:	fdc42503          	lw	a0,-36(s0)
 238:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 23c:	00000013          	nop
                break;
 240:	0500006f          	j	290 <handle_trap+0xdc>
                if (alt_niosv_software_interrupt_handler) {
 244:	000287b7          	lui	a5,0x28
 248:	c547a783          	lw	a5,-940(a5) # 27c54 <alt_niosv_software_interrupt_handler>
 24c:	04078663          	beqz	a5,298 <handle_trap+0xe4>
                    ALT_OS_INT_ENTER();
 250:	00000013          	nop
                    alt_niosv_software_interrupt_handler(cause, epc, tval);
 254:	000287b7          	lui	a5,0x28
 258:	c547a783          	lw	a5,-940(a5) # 27c54 <alt_niosv_software_interrupt_handler>
 25c:	fd442603          	lw	a2,-44(s0)
 260:	fd842583          	lw	a1,-40(s0)
 264:	fdc42503          	lw	a0,-36(s0)
 268:	000780e7          	jalr	a5
                    ALT_OS_INT_EXIT();
 26c:	00000013          	nop
                break;
 270:	0280006f          	j	298 <handle_trap+0xe4>
                if (exception_code >= 16) {
 274:	fec42703          	lw	a4,-20(s0)
 278:	00f00793          	li	a5,15
 27c:	02e7f263          	bgeu	a5,a4,2a0 <handle_trap+0xec>
                    alt_irq_handler();
 280:	e41ff0ef          	jal	ra,c0 <alt_irq_handler>
                break;
 284:	01c0006f          	j	2a0 <handle_trap+0xec>
            NIOSV_EBREAK();
 288:	00100073          	ebreak
 28c:	0180006f          	j	2a4 <handle_trap+0xf0>
                break;
 290:	00000013          	nop
 294:	0100006f          	j	2a4 <handle_trap+0xf0>
                break;
 298:	00000013          	nop
 29c:	0080006f          	j	2a4 <handle_trap+0xf0>
                break;
 2a0:	00000013          	nop
    return epc;
 2a4:	fd842783          	lw	a5,-40(s0)
}
 2a8:	00078513          	mv	a0,a5
 2ac:	02c12083          	lw	ra,44(sp)
 2b0:	02812403          	lw	s0,40(sp)
 2b4:	03010113          	addi	sp,sp,48
 2b8:	00008067          	ret

Disassembly of section .text:

00000300 <Task1>:
/**
 * @brief Task 1 implementation. Prints a status message and delays.
 * @param parameters Unused pointer.
 */
static void Task1 (void *parameters)
{
     300:	fe010113          	addi	sp,sp,-32
     304:	00112e23          	sw	ra,28(sp)
     308:	00812c23          	sw	s0,24(sp)
     30c:	02010413          	addi	s0,sp,32
     310:	fea42623          	sw	a0,-20(s0)
    (void) parameters;

    while (1)
    {
        // Print message to the console
        printf("Running task 1 \r\n");
     314:	000237b7          	lui	a5,0x23
     318:	45078513          	addi	a0,a5,1104 # 23450 <__flash_rodata_start>
     31c:	7bc0d0ef          	jal	ra,dad8 <puts>

        // Delay the task for 1000 milliseconds (1 second)
        vTaskDelay(1000 / portTICK_PERIOD_MS);
     320:	3e800513          	li	a0,1000
     324:	235000ef          	jal	ra,d58 <vTaskDelay>
        printf("Running task 1 \r\n");
     328:	00000013          	nop
     32c:	fe9ff06f          	j	314 <Task1+0x14>

00000330 <Task2>:
/**
 * @brief Task 2 implementation. Prints a status message and delays.
 * @param parameters Unused pointer.
 */
static void Task2 (void *parameters)
{
     330:	fe010113          	addi	sp,sp,-32
     334:	00112e23          	sw	ra,28(sp)
     338:	00812c23          	sw	s0,24(sp)
     33c:	02010413          	addi	s0,sp,32
     340:	fea42623          	sw	a0,-20(s0)
    (void) parameters;
    
    while (1)
    {
        // Print message to the console
        printf("Running task 2 \r\n");
     344:	000237b7          	lui	a5,0x23
     348:	46478513          	addi	a0,a5,1124 # 23464 <__flash_rodata_start+0x14>
     34c:	78c0d0ef          	jal	ra,dad8 <puts>

        // Delay the task for 1000 milliseconds (1 second)
        vTaskDelay(1000 / portTICK_PERIOD_MS);
     350:	3e800513          	li	a0,1000
     354:	205000ef          	jal	ra,d58 <vTaskDelay>
        printf("Running task 2 \r\n");
     358:	00000013          	nop
     35c:	fe9ff06f          	j	344 <Task2+0x14>

00000360 <main>:
 * the scheduler.
 *
 * @return Returns 0 (unreachable in a typical embedded FreeRTOS application).
 */
int main (void)
{
     360:	ff010113          	addi	sp,sp,-16
     364:	00112623          	sw	ra,12(sp)
     368:	00812423          	sw	s0,8(sp)
     36c:	01010413          	addi	s0,sp,16
    // Initial message printed upon application start
    printf("Starting NIOS V - FreeRTOS... \r\n");
     370:	000237b7          	lui	a5,0x23
     374:	47878513          	addi	a0,a5,1144 # 23478 <__flash_rodata_start+0x28>
     378:	7600d0ef          	jal	ra,dad8 <puts>
     * @param 1024 Stack depth in words
     * @param NULL Task parameter (unused)
     * @param 2 Priority (higher number means higher priority)
     * @param NULL Task handle (unused)
     */
    xTaskCreate(Task1, "Task1", 1024, NULL, 2, NULL);
     37c:	00000793          	li	a5,0
     380:	00200713          	li	a4,2
     384:	00000693          	li	a3,0
     388:	40000613          	li	a2,1024
     38c:	000235b7          	lui	a1,0x23
     390:	49858593          	addi	a1,a1,1176 # 23498 <__flash_rodata_start+0x48>
     394:	30000513          	li	a0,768
     398:	0ec000ef          	jal	ra,484 <xTaskCreate>
     * @param 1024 Stack depth in words
     * @param NULL Task parameter (unused)
     * @param 2 Priority (same as Task1 for round-robin scheduling)
     * @param NULL Task handle (unused)
     */
    xTaskCreate(Task2, "Task2", 1024, NULL, 2, NULL);
     39c:	00000793          	li	a5,0
     3a0:	00200713          	li	a4,2
     3a4:	00000693          	li	a3,0
     3a8:	40000613          	li	a2,1024
     3ac:	000235b7          	lui	a1,0x23
     3b0:	4a058593          	addi	a1,a1,1184 # 234a0 <__flash_rodata_start+0x50>
     3b4:	33000513          	li	a0,816
     3b8:	0cc000ef          	jal	ra,484 <xTaskCreate>

    // Start the FreeRTOS scheduler. This function will not return.
    vTaskStartScheduler();
     3bc:	5b4010ef          	jal	ra,1970 <vTaskStartScheduler>

    // Loop forever in case the scheduler fails to start (should not happen)
    for( ;; );
     3c0:	00000013          	nop
     3c4:	ffdff06f          	j	3c0 <main+0x60>

000003c8 <_start>:
    .type _start, @function
_start:
#if ALT_CPU_HAS_CSR_SUPPORT
    /* assume that we are in machine mode on startup */
    /* setup trap to catch anything that goes wrong early in the boot process */
    la t0, trap_vector
     3c8:	00000297          	auipc	t0,0x0
     3cc:	c5828293          	addi	t0,t0,-936 # 20 <__flash_exceptions_start>
    csrw mtvec, t0
     3d0:	30529073          	csrw	mtvec,t0

    /* disable all interrupt */
    li t0, 0x88
     3d4:	08800293          	li	t0,136
    csrc mstatus, t0
     3d8:	3002b073          	csrc	mstatus,t0
    csrw mie, zero
     3dc:	30401073          	csrw	mie,zero
    csrw mip, zero
     3e0:	34401073          	csrw	mip,zero
 * RTL simulations can ensure the data cache tag RAM is already
 * initialized so skipping this speeds up RTL simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
#if ALT_CPU_DCACHE_SIZE > 0
    li t0, ALT_CPU_DCACHE_SIZE
     3e4:	000012b7          	lui	t0,0x1
0:
    /* cbo.inval.ix */
    .insn i 0x0F, 0x2, zero, t0, 0x080
     3e8:	0802a00f          	.4byte	0x802a00f
    addi t0, t0, -ALT_CPU_DCACHE_LINE_SIZE
     3ec:	fe028293          	addi	t0,t0,-32 # fe0 <uxTaskPriorityGetFromISR+0x8>
    bnez t0, 0b
     3f0:	fe029ce3          	bnez	t0,3e8 <_start+0x20>
#endif /* Initialize Data Cache */
#endif /* ALT_SIM_OPTIMIZE */

    .option push
    .option norelax
    la gp, __global_pointer$
     3f4:	00026197          	auipc	gp,0x26
     3f8:	41018193          	addi	gp,gp,1040 # 26804 <__global_pointer$>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    la sp, __alt_stack_pointer
     3fc:	00040117          	auipc	sp,0x40
     400:	c0410113          	addi	sp,sp,-1020 # 40000 <__alt_data_end>
    /* Log that the BSS is about to be cleared. */
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_bss)
#endif /* ALT_LOG_ENABLE */

    la t1, __bss_start
     404:	00028317          	auipc	t1,0x28
     408:	84c30313          	addi	t1,t1,-1972 # 27c50 <pxCurrentTCB>
    la t2, __bss_end
     40c:	0003b397          	auipc	t2,0x3b
     410:	3c838393          	addi	t2,t2,968 # 3b7d4 <__alt_heap_start>
0:
    sw zero, (t1)
     414:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     418:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     41c:	fe736ce3          	bltu	t1,t2,414 <_start+0x4c>
/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD
    call alt_load
     420:	3b0060ef          	jal	ra,67d0 <alt_load>
 */
#ifndef ALT_SIM_OPTIMIZE
.globl __tbss_start
.globl __tbss_end

    la t1, __tbss_start
     424:	00024317          	auipc	t1,0x24
     428:	02c30313          	addi	t1,t1,44 # 24450 <jtag_uart>
    la t2, __tbss_end
     42c:	00024397          	auipc	t2,0x24
     430:	02438393          	addi	t2,t2,36 # 24450 <jtag_uart>
    
    // Check if we need to skip this (if .tbss is empty)
    bgeu t1, t2, 1f
     434:	00737863          	bgeu	t1,t2,444 <_start+0x7c>
0:
    sw zero, (t1)
     438:	00032023          	sw	zero,0(t1)
    addi t1, t1, 4
     43c:	00430313          	addi	t1,t1,4
    bltu t1, t2, 0b
     440:	fe736ce3          	bltu	t1,t2,438 <_start+0x70>
// Copy tdata to tdata golden source location
.globl __tdata_start
.globl __tdata_end
.globl __tdata_source

    la t0, __tdata_start
     444:	00024297          	auipc	t0,0x24
     448:	00c28293          	addi	t0,t0,12 # 24450 <jtag_uart>
    la t1, __tdata_end
     44c:	00024317          	auipc	t1,0x24
     450:	00430313          	addi	t1,t1,4 # 24450 <jtag_uart>
    la t2, __tdata_source
     454:	00024397          	auipc	t2,0x24
     458:	ffc38393          	addi	t2,t2,-4 # 24450 <jtag_uart>

    // Check if we need to skip this (if .tdata is empty)
    bgeu t0, t1, 1f
     45c:	0062fc63          	bgeu	t0,t1,474 <_start+0xac>
0:
    lw s1, (t0)
     460:	0002a483          	lw	s1,0(t0)
    sw s1, (t2)
     464:	0093a023          	sw	s1,0(t2)
    addi t0, t0, 4
     468:	00428293          	addi	t0,t0,4
    addi t2, t2, 4
     46c:	00438393          	addi	t2,t2,4
    bltu t0, t1, 0b
     470:	fe62e8e3          	bltu	t0,t1,460 <_start+0x98>
1:

// Assign thread pointer register (tp) to main thread tls base
.globl __tls_base
    la tp, __tls_base
     474:	00024217          	auipc	tp,0x24
     478:	fdc20213          	addi	tp,tp,-36 # 24450 <jtag_uart>
#ifdef ALT_LOG_ENABLE
    ALT_LOG_PUTS(alt_log_msg_alt_main)
#endif /* ALT_LOG_ENABLE */

    /* Call the C entry point. It should never return. */
    call alt_main
     47c:	3c8060ef          	jal	ra,6844 <alt_main>

00000480 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    j alt_after_alt_main
     480:	0000006f          	j	480 <alt_after_alt_main>

00000484 <xTaskCreate>:
     484:	fc010113          	addi	sp,sp,-64
     488:	02112e23          	sw	ra,60(sp)
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
     48c:	02812c23          	sw	s0,56(sp)
     490:	04010413          	addi	s0,sp,64
     494:	fca42e23          	sw	a0,-36(s0)
     498:	fcb42c23          	sw	a1,-40(s0)
     49c:	fcd42823          	sw	a3,-48(s0)
     4a0:	fce42623          	sw	a4,-52(s0)
     4a4:	fcf42423          	sw	a5,-56(s0)
     4a8:	00060793          	mv	a5,a2
     4ac:	fcf41b23          	sh	a5,-42(s0)
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
     4b0:	fd645783          	lhu	a5,-42(s0)
     4b4:	00279793          	slli	a5,a5,0x2
     4b8:	00078513          	mv	a0,a5
     4bc:	55d070ef          	jal	ra,8218 <pvPortMalloc>
     4c0:	fea42623          	sw	a0,-20(s0)

            if( pxStack != NULL )
     4c4:	fec42783          	lw	a5,-20(s0)
     4c8:	04078263          	beqz	a5,50c <xTaskCreate+0x88>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
     4cc:	58800513          	li	a0,1416
     4d0:	549070ef          	jal	ra,8218 <pvPortMalloc>
     4d4:	fea42223          	sw	a0,-28(s0)

                if( pxNewTCB != NULL )
     4d8:	fe442783          	lw	a5,-28(s0)
     4dc:	02078263          	beqz	a5,500 <xTaskCreate+0x7c>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
     4e0:	58800613          	li	a2,1416
     4e4:	00000593          	li	a1,0
     4e8:	fe442503          	lw	a0,-28(s0)
     4ec:	3540d0ef          	jal	ra,d840 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
     4f0:	fe442783          	lw	a5,-28(s0)
     4f4:	fec42703          	lw	a4,-20(s0)
     4f8:	02e7a823          	sw	a4,48(a5)
     4fc:	0140006f          	j	510 <xTaskCreate+0x8c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
     500:	fec42503          	lw	a0,-20(s0)
     504:	74d070ef          	jal	ra,8450 <vPortFree>
     508:	0080006f          	j	510 <xTaskCreate+0x8c>
                }
            }
            else
            {
                pxNewTCB = NULL;
     50c:	fe042223          	sw	zero,-28(s0)
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
     510:	fe442783          	lw	a5,-28(s0)
     514:	02078e63          	beqz	a5,550 <xTaskCreate+0xcc>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
     518:	fd645603          	lhu	a2,-42(s0)
     51c:	00000893          	li	a7,0
     520:	fe442803          	lw	a6,-28(s0)
     524:	fc842783          	lw	a5,-56(s0)
     528:	fcc42703          	lw	a4,-52(s0)
     52c:	fd042683          	lw	a3,-48(s0)
     530:	fd842583          	lw	a1,-40(s0)
     534:	fdc42503          	lw	a0,-36(s0)
     538:	038000ef          	jal	ra,570 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
     53c:	fe442503          	lw	a0,-28(s0)
     540:	2e4000ef          	jal	ra,824 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
     544:	00100793          	li	a5,1
     548:	fef42423          	sw	a5,-24(s0)
     54c:	00c0006f          	j	558 <xTaskCreate+0xd4>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     550:	fff00793          	li	a5,-1
     554:	fef42423          	sw	a5,-24(s0)
        }

        return xReturn;
     558:	fe842783          	lw	a5,-24(s0)
    }
     55c:	00078513          	mv	a0,a5
     560:	03c12083          	lw	ra,60(sp)
     564:	03812403          	lw	s0,56(sp)
     568:	04010113          	addi	sp,sp,64
     56c:	00008067          	ret

00000570 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
     570:	fc010113          	addi	sp,sp,-64
     574:	02112e23          	sw	ra,60(sp)
     578:	02812c23          	sw	s0,56(sp)
     57c:	04010413          	addi	s0,sp,64
     580:	fca42e23          	sw	a0,-36(s0)
     584:	fcb42c23          	sw	a1,-40(s0)
     588:	fcc42a23          	sw	a2,-44(s0)
     58c:	fcd42823          	sw	a3,-48(s0)
     590:	fce42623          	sw	a4,-52(s0)
     594:	fcf42423          	sw	a5,-56(s0)
     598:	fd042223          	sw	a6,-60(s0)
     59c:	fd142023          	sw	a7,-64(s0)

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
     5a0:	fc442783          	lw	a5,-60(s0)
     5a4:	0307a703          	lw	a4,48(a5)
     5a8:	fd442783          	lw	a5,-44(s0)
     5ac:	00279793          	slli	a5,a5,0x2
     5b0:	00078613          	mv	a2,a5
     5b4:	0a500593          	li	a1,165
     5b8:	00070513          	mv	a0,a4
     5bc:	2840d0ef          	jal	ra,d840 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
     5c0:	fc442783          	lw	a5,-60(s0)
     5c4:	0307a703          	lw	a4,48(a5)
     5c8:	fd442683          	lw	a3,-44(s0)
     5cc:	400007b7          	lui	a5,0x40000
     5d0:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffbffff>
     5d4:	00f687b3          	add	a5,a3,a5
     5d8:	00279793          	slli	a5,a5,0x2
     5dc:	00f707b3          	add	a5,a4,a5
     5e0:	fef42623          	sw	a5,-20(s0)
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
     5e4:	fec42783          	lw	a5,-20(s0)
     5e8:	ff07f793          	andi	a5,a5,-16
     5ec:	fef42623          	sw	a5,-20(s0)

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     5f0:	fec42783          	lw	a5,-20(s0)
     5f4:	00f7f793          	andi	a5,a5,15
     5f8:	00078a63          	beqz	a5,60c <prvInitialiseNewTask+0x9c>
     5fc:	30047073          	csrci	mstatus,8
     600:	00100073          	ebreak
     604:	00000013          	nop
     608:	ffdff06f          	j	604 <prvInitialiseNewTask+0x94>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
     60c:	fd842783          	lw	a5,-40(s0)
     610:	06078463          	beqz	a5,678 <prvInitialiseNewTask+0x108>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     614:	fe042423          	sw	zero,-24(s0)
     618:	0440006f          	j	65c <prvInitialiseNewTask+0xec>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
     61c:	fd842703          	lw	a4,-40(s0)
     620:	fe842783          	lw	a5,-24(s0)
     624:	00f707b3          	add	a5,a4,a5
     628:	0007c703          	lbu	a4,0(a5)
     62c:	fc442683          	lw	a3,-60(s0)
     630:	fe842783          	lw	a5,-24(s0)
     634:	00f687b3          	add	a5,a3,a5
     638:	02e78a23          	sb	a4,52(a5)

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
     63c:	fd842703          	lw	a4,-40(s0)
     640:	fe842783          	lw	a5,-24(s0)
     644:	00f707b3          	add	a5,a4,a5
     648:	0007c783          	lbu	a5,0(a5)
     64c:	02078063          	beqz	a5,66c <prvInitialiseNewTask+0xfc>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
     650:	fe842783          	lw	a5,-24(s0)
     654:	00178793          	addi	a5,a5,1
     658:	fef42423          	sw	a5,-24(s0)
     65c:	fe842703          	lw	a4,-24(s0)
     660:	00f00793          	li	a5,15
     664:	fae7fce3          	bgeu	a5,a4,61c <prvInitialiseNewTask+0xac>
     668:	0080006f          	j	670 <prvInitialiseNewTask+0x100>
            {
                break;
     66c:	00000013          	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
     670:	fc442783          	lw	a5,-60(s0)
     674:	040781a3          	sb	zero,67(a5)
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
     678:	fcc42703          	lw	a4,-52(s0)
     67c:	00600793          	li	a5,6
     680:	00e7fa63          	bgeu	a5,a4,694 <prvInitialiseNewTask+0x124>
     684:	30047073          	csrci	mstatus,8
     688:	00100073          	ebreak
     68c:	00000013          	nop
     690:	ffdff06f          	j	68c <prvInitialiseNewTask+0x11c>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
     694:	fcc42703          	lw	a4,-52(s0)
     698:	00600793          	li	a5,6
     69c:	00e7f663          	bgeu	a5,a4,6a8 <prvInitialiseNewTask+0x138>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
     6a0:	00600793          	li	a5,6
     6a4:	fcf42623          	sw	a5,-52(s0)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
     6a8:	fc442783          	lw	a5,-60(s0)
     6ac:	fcc42703          	lw	a4,-52(s0)
     6b0:	02e7a623          	sw	a4,44(a5)
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
     6b4:	fc442783          	lw	a5,-60(s0)
     6b8:	fcc42703          	lw	a4,-52(s0)
     6bc:	04e7a623          	sw	a4,76(a5)
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
     6c0:	fc442783          	lw	a5,-60(s0)
     6c4:	00478793          	addi	a5,a5,4
     6c8:	00078513          	mv	a0,a5
     6cc:	619080ef          	jal	ra,94e4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
     6d0:	fc442783          	lw	a5,-60(s0)
     6d4:	01878793          	addi	a5,a5,24
     6d8:	00078513          	mv	a0,a5
     6dc:	609080ef          	jal	ra,94e4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
     6e0:	fc442783          	lw	a5,-60(s0)
     6e4:	fc442703          	lw	a4,-60(s0)
     6e8:	00e7a823          	sw	a4,16(a5)

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     6ec:	00700713          	li	a4,7
     6f0:	fcc42783          	lw	a5,-52(s0)
     6f4:	40f70733          	sub	a4,a4,a5
     6f8:	fc442783          	lw	a5,-60(s0)
     6fc:	00e7ac23          	sw	a4,24(a5)
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
     700:	fc442783          	lw	a5,-60(s0)
     704:	fc442703          	lw	a4,-60(s0)
     708:	02e7a223          	sw	a4,36(a5)
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
     70c:	fc442783          	lw	a5,-60(s0)
     710:	05878793          	addi	a5,a5,88
     714:	00078513          	mv	a0,a5
     718:	21c060ef          	jal	ra,6934 <alt_init_tls_block>
     71c:	fc442783          	lw	a5,-60(s0)
     720:	15878793          	addi	a5,a5,344
     724:	42800613          	li	a2,1064
     728:	00000593          	li	a1,0
     72c:	00078513          	mv	a0,a5
     730:	1100d0ef          	jal	ra,d840 <memset>
     734:	fc442783          	lw	a5,-60(s0)
     738:	44478713          	addi	a4,a5,1092
     73c:	fc442783          	lw	a5,-60(s0)
     740:	14e7ae23          	sw	a4,348(a5)
     744:	fc442783          	lw	a5,-60(s0)
     748:	4ac78713          	addi	a4,a5,1196
     74c:	fc442783          	lw	a5,-60(s0)
     750:	16e7a023          	sw	a4,352(a5)
     754:	fc442783          	lw	a5,-60(s0)
     758:	51478713          	addi	a4,a5,1300
     75c:	fc442783          	lw	a5,-60(s0)
     760:	16e7a223          	sw	a4,356(a5)
     764:	fc442683          	lw	a3,-60(s0)
     768:	00100713          	li	a4,1
     76c:	00000793          	li	a5,0
     770:	20e6a023          	sw	a4,512(a3)
     774:	20f6a223          	sw	a5,516(a3)
     778:	fc442783          	lw	a5,-60(s0)
     77c:	00003737          	lui	a4,0x3
     780:	30e70713          	addi	a4,a4,782 # 330e <vTaskRemoveFromUnorderedEventList+0x22a>
     784:	20e79423          	sh	a4,520(a5)
     788:	fc442783          	lw	a5,-60(s0)
     78c:	ffffb737          	lui	a4,0xffffb
     790:	bcd70713          	addi	a4,a4,-1075 # ffffabcd <__alt_data_end+0xfffbabcd>
     794:	20e79523          	sh	a4,522(a5)
     798:	fc442783          	lw	a5,-60(s0)
     79c:	00001737          	lui	a4,0x1
     7a0:	23470713          	addi	a4,a4,564 # 1234 <vTaskPrioritySet+0x20c>
     7a4:	20e79623          	sh	a4,524(a5)
     7a8:	fc442783          	lw	a5,-60(s0)
     7ac:	ffffe737          	lui	a4,0xffffe
     7b0:	66d70713          	addi	a4,a4,1645 # ffffe66d <__alt_data_end+0xfffbe66d>
     7b4:	20e79723          	sh	a4,526(a5)
     7b8:	fc442783          	lw	a5,-60(s0)
     7bc:	ffffe737          	lui	a4,0xffffe
     7c0:	eec70713          	addi	a4,a4,-276 # ffffdeec <__alt_data_end+0xfffbdeec>
     7c4:	20e79823          	sh	a4,528(a5)
     7c8:	fc442783          	lw	a5,-60(s0)
     7cc:	00500713          	li	a4,5
     7d0:	20e79923          	sh	a4,530(a5)
     7d4:	fc442783          	lw	a5,-60(s0)
     7d8:	00b00713          	li	a4,11
     7dc:	20e79a23          	sh	a4,532(a5)
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     7e0:	fd042603          	lw	a2,-48(s0)
     7e4:	fdc42583          	lw	a1,-36(s0)
     7e8:	fec42503          	lw	a0,-20(s0)
     7ec:	104090ef          	jal	ra,98f0 <pxPortInitialiseStack>
     7f0:	00050713          	mv	a4,a0
     7f4:	fc442783          	lw	a5,-60(s0)
     7f8:	00e7a023          	sw	a4,0(a5)
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
     7fc:	fc842783          	lw	a5,-56(s0)
     800:	00078863          	beqz	a5,810 <prvInitialiseNewTask+0x2a0>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
     804:	fc842783          	lw	a5,-56(s0)
     808:	fc442703          	lw	a4,-60(s0)
     80c:	00e7a023          	sw	a4,0(a5)
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     810:	00000013          	nop
     814:	03c12083          	lw	ra,60(sp)
     818:	03812403          	lw	s0,56(sp)
     81c:	04010113          	addi	sp,sp,64
     820:	00008067          	ret

00000824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
     824:	fd010113          	addi	sp,sp,-48
     828:	02112623          	sw	ra,44(sp)
     82c:	02812423          	sw	s0,40(sp)
     830:	03010413          	addi	s0,sp,48
     834:	fca42e23          	sw	a0,-36(s0)
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
     838:	30047073          	csrci	mstatus,8
     83c:	000267b7          	lui	a5,0x26
     840:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     844:	00178713          	addi	a4,a5,1
     848:	000267b7          	lui	a5,0x26
     84c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        uxCurrentNumberOfTasks++;
     850:	000287b7          	lui	a5,0x28
     854:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
     858:	00178713          	addi	a4,a5,1
     85c:	000287b7          	lui	a5,0x28
     860:	dee7a023          	sw	a4,-544(a5) # 27de0 <uxCurrentNumberOfTasks>

        if( pxCurrentTCB == NULL )
     864:	000287b7          	lui	a5,0x28
     868:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     86c:	02079463          	bnez	a5,894 <prvAddNewTaskToReadyList+0x70>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
     870:	000287b7          	lui	a5,0x28
     874:	fdc42703          	lw	a4,-36(s0)
     878:	c4e7a823          	sw	a4,-944(a5) # 27c50 <pxCurrentTCB>

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
     87c:	000287b7          	lui	a5,0x28
     880:	de07a703          	lw	a4,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
     884:	00100793          	li	a5,1
     888:	02f71e63          	bne	a4,a5,8c4 <prvAddNewTaskToReadyList+0xa0>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
     88c:	5fd020ef          	jal	ra,3688 <prvInitialiseTaskLists>
     890:	0340006f          	j	8c4 <prvAddNewTaskToReadyList+0xa0>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
     894:	000287b7          	lui	a5,0x28
     898:	dec7a783          	lw	a5,-532(a5) # 27dec <xSchedulerRunning>
     89c:	02079463          	bnez	a5,8c4 <prvAddNewTaskToReadyList+0xa0>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
     8a0:	000287b7          	lui	a5,0x28
     8a4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     8a8:	02c7a703          	lw	a4,44(a5)
     8ac:	fdc42783          	lw	a5,-36(s0)
     8b0:	02c7a783          	lw	a5,44(a5)
     8b4:	00e7e863          	bltu	a5,a4,8c4 <prvAddNewTaskToReadyList+0xa0>
                {
                    pxCurrentTCB = pxNewTCB;
     8b8:	000287b7          	lui	a5,0x28
     8bc:	fdc42703          	lw	a4,-36(s0)
     8c0:	c4e7a823          	sw	a4,-944(a5) # 27c50 <pxCurrentTCB>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
     8c4:	000287b7          	lui	a5,0x28
     8c8:	dfc7a783          	lw	a5,-516(a5) # 27dfc <uxTaskNumber>
     8cc:	00178713          	addi	a4,a5,1
     8d0:	000287b7          	lui	a5,0x28
     8d4:	dee7ae23          	sw	a4,-516(a5) # 27dfc <uxTaskNumber>

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
     8d8:	000287b7          	lui	a5,0x28
     8dc:	dfc7a703          	lw	a4,-516(a5) # 27dfc <uxTaskNumber>
     8e0:	fdc42783          	lw	a5,-36(s0)
     8e4:	04e7a223          	sw	a4,68(a5)
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
     8e8:	fdc42783          	lw	a5,-36(s0)
     8ec:	02c7a783          	lw	a5,44(a5)
     8f0:	00100713          	li	a4,1
     8f4:	00f71733          	sll	a4,a4,a5
     8f8:	000287b7          	lui	a5,0x28
     8fc:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
     900:	00f76733          	or	a4,a4,a5
     904:	000287b7          	lui	a5,0x28
     908:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
     90c:	fdc42783          	lw	a5,-36(s0)
     910:	02c7a703          	lw	a4,44(a5)
     914:	000287b7          	lui	a5,0x28
     918:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
     91c:	00070793          	mv	a5,a4
     920:	00279793          	slli	a5,a5,0x2
     924:	00e787b3          	add	a5,a5,a4
     928:	00279793          	slli	a5,a5,0x2
     92c:	00f687b3          	add	a5,a3,a5
     930:	0047a783          	lw	a5,4(a5)
     934:	fef42623          	sw	a5,-20(s0)
     938:	fdc42783          	lw	a5,-36(s0)
     93c:	fec42703          	lw	a4,-20(s0)
     940:	00e7a423          	sw	a4,8(a5)
     944:	fec42783          	lw	a5,-20(s0)
     948:	0087a703          	lw	a4,8(a5)
     94c:	fdc42783          	lw	a5,-36(s0)
     950:	00e7a623          	sw	a4,12(a5)
     954:	fec42783          	lw	a5,-20(s0)
     958:	0087a783          	lw	a5,8(a5)
     95c:	fdc42703          	lw	a4,-36(s0)
     960:	00470713          	addi	a4,a4,4
     964:	00e7a223          	sw	a4,4(a5)
     968:	fdc42783          	lw	a5,-36(s0)
     96c:	00478713          	addi	a4,a5,4
     970:	fec42783          	lw	a5,-20(s0)
     974:	00e7a423          	sw	a4,8(a5)
     978:	fdc42783          	lw	a5,-36(s0)
     97c:	02c7a703          	lw	a4,44(a5)
     980:	00070793          	mv	a5,a4
     984:	00279793          	slli	a5,a5,0x2
     988:	00e787b3          	add	a5,a5,a4
     98c:	00279793          	slli	a5,a5,0x2
     990:	00028737          	lui	a4,0x28
     994:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
     998:	00e78733          	add	a4,a5,a4
     99c:	fdc42783          	lw	a5,-36(s0)
     9a0:	00e7aa23          	sw	a4,20(a5)
     9a4:	fdc42783          	lw	a5,-36(s0)
     9a8:	02c7a703          	lw	a4,44(a5)
     9ac:	000287b7          	lui	a5,0x28
     9b0:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
     9b4:	00070793          	mv	a5,a4
     9b8:	00279793          	slli	a5,a5,0x2
     9bc:	00e787b3          	add	a5,a5,a4
     9c0:	00279793          	slli	a5,a5,0x2
     9c4:	00f687b3          	add	a5,a3,a5
     9c8:	0007a783          	lw	a5,0(a5)
     9cc:	00178693          	addi	a3,a5,1
     9d0:	000287b7          	lui	a5,0x28
     9d4:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
     9d8:	00070793          	mv	a5,a4
     9dc:	00279793          	slli	a5,a5,0x2
     9e0:	00e787b3          	add	a5,a5,a4
     9e4:	00279793          	slli	a5,a5,0x2
     9e8:	00f607b3          	add	a5,a2,a5
     9ec:	00d7a023          	sw	a3,0(a5)

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
     9f0:	000267b7          	lui	a5,0x26
     9f4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     9f8:	fff78713          	addi	a4,a5,-1
     9fc:	000267b7          	lui	a5,0x26
     a00:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
     a04:	000267b7          	lui	a5,0x26
     a08:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     a0c:	00079463          	bnez	a5,a14 <prvAddNewTaskToReadyList+0x1f0>
     a10:	30046073          	csrsi	mstatus,8

    if( xSchedulerRunning != pdFALSE )
     a14:	000287b7          	lui	a5,0x28
     a18:	dec7a783          	lw	a5,-532(a5) # 27dec <xSchedulerRunning>
     a1c:	02078063          	beqz	a5,a3c <prvAddNewTaskToReadyList+0x218>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
     a20:	000287b7          	lui	a5,0x28
     a24:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     a28:	02c7a703          	lw	a4,44(a5)
     a2c:	fdc42783          	lw	a5,-36(s0)
     a30:	02c7a783          	lw	a5,44(a5)
     a34:	00f77463          	bgeu	a4,a5,a3c <prvAddNewTaskToReadyList+0x218>
        {
            taskYIELD_IF_USING_PREEMPTION();
     a38:	00000073          	ecall
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     a3c:	00000013          	nop
     a40:	02c12083          	lw	ra,44(sp)
     a44:	02812403          	lw	s0,40(sp)
     a48:	03010113          	addi	sp,sp,48
     a4c:	00008067          	ret

00000a50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
     a50:	fd010113          	addi	sp,sp,-48
     a54:	02112623          	sw	ra,44(sp)
     a58:	02812423          	sw	s0,40(sp)
     a5c:	03010413          	addi	s0,sp,48
     a60:	fca42e23          	sw	a0,-36(s0)
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
     a64:	30047073          	csrci	mstatus,8
     a68:	000267b7          	lui	a5,0x26
     a6c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     a70:	00178713          	addi	a4,a5,1
     a74:	000267b7          	lui	a5,0x26
     a78:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
     a7c:	fdc42783          	lw	a5,-36(s0)
     a80:	00079863          	bnez	a5,a90 <vTaskDelete+0x40>
     a84:	000287b7          	lui	a5,0x28
     a88:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     a8c:	0080006f          	j	a94 <vTaskDelete+0x44>
     a90:	fdc42783          	lw	a5,-36(s0)
     a94:	fef42623          	sw	a5,-20(s0)

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     a98:	fec42783          	lw	a5,-20(s0)
     a9c:	00478793          	addi	a5,a5,4
     aa0:	00078513          	mv	a0,a5
     aa4:	3c5080ef          	jal	ra,9668 <uxListRemove>
     aa8:	00050793          	mv	a5,a0
     aac:	04079c63          	bnez	a5,b04 <vTaskDelete+0xb4>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
     ab0:	fec42783          	lw	a5,-20(s0)
     ab4:	02c7a703          	lw	a4,44(a5)
     ab8:	000287b7          	lui	a5,0x28
     abc:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
     ac0:	00070793          	mv	a5,a4
     ac4:	00279793          	slli	a5,a5,0x2
     ac8:	00e787b3          	add	a5,a5,a4
     acc:	00279793          	slli	a5,a5,0x2
     ad0:	00f687b3          	add	a5,a3,a5
     ad4:	0007a783          	lw	a5,0(a5)
     ad8:	02079663          	bnez	a5,b04 <vTaskDelete+0xb4>
     adc:	fec42783          	lw	a5,-20(s0)
     ae0:	02c7a783          	lw	a5,44(a5)
     ae4:	00100713          	li	a4,1
     ae8:	00f717b3          	sll	a5,a4,a5
     aec:	fff7c713          	not	a4,a5
     af0:	000287b7          	lui	a5,0x28
     af4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
     af8:	00f77733          	and	a4,a4,a5
     afc:	000287b7          	lui	a5,0x28
     b00:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     b04:	fec42783          	lw	a5,-20(s0)
     b08:	0287a783          	lw	a5,40(a5)
     b0c:	00078a63          	beqz	a5,b20 <vTaskDelete+0xd0>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     b10:	fec42783          	lw	a5,-20(s0)
     b14:	01878793          	addi	a5,a5,24
     b18:	00078513          	mv	a0,a5
     b1c:	34d080ef          	jal	ra,9668 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
     b20:	000287b7          	lui	a5,0x28
     b24:	dfc7a783          	lw	a5,-516(a5) # 27dfc <uxTaskNumber>
     b28:	00178713          	addi	a4,a5,1
     b2c:	000287b7          	lui	a5,0x28
     b30:	dee7ae23          	sw	a4,-516(a5) # 27dfc <uxTaskNumber>

            if( pxTCB == pxCurrentTCB )
     b34:	000287b7          	lui	a5,0x28
     b38:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     b3c:	fec42703          	lw	a4,-20(s0)
     b40:	02f71a63          	bne	a4,a5,b74 <vTaskDelete+0x124>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
     b44:	fec42783          	lw	a5,-20(s0)
     b48:	00478793          	addi	a5,a5,4
     b4c:	00078593          	mv	a1,a5
     b50:	000287b7          	lui	a5,0x28
     b54:	db478513          	addi	a0,a5,-588 # 27db4 <xTasksWaitingTermination>
     b58:	1b5080ef          	jal	ra,950c <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
     b5c:	000287b7          	lui	a5,0x28
     b60:	dc87a783          	lw	a5,-568(a5) # 27dc8 <uxDeletedTasksWaitingCleanUp>
     b64:	00178713          	addi	a4,a5,1
     b68:	000287b7          	lui	a5,0x28
     b6c:	dce7a423          	sw	a4,-568(a5) # 27dc8 <uxDeletedTasksWaitingCleanUp>
     b70:	01c0006f          	j	b8c <vTaskDelete+0x13c>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
     b74:	000287b7          	lui	a5,0x28
     b78:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
     b7c:	fff78713          	addi	a4,a5,-1
     b80:	000287b7          	lui	a5,0x28
     b84:	dee7a023          	sw	a4,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
     b88:	7e5020ef          	jal	ra,3b6c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
     b8c:	000267b7          	lui	a5,0x26
     b90:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     b94:	fff78713          	addi	a4,a5,-1
     b98:	000267b7          	lui	a5,0x26
     b9c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
     ba0:	000267b7          	lui	a5,0x26
     ba4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     ba8:	00079463          	bnez	a5,bb0 <vTaskDelete+0x160>
     bac:	30046073          	csrsi	mstatus,8

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
     bb0:	000287b7          	lui	a5,0x28
     bb4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     bb8:	fec42703          	lw	a4,-20(s0)
     bbc:	00f70663          	beq	a4,a5,bc8 <vTaskDelete+0x178>
        {
            prvDeleteTCB( pxTCB );
     bc0:	fec42503          	lw	a0,-20(s0)
     bc4:	755020ef          	jal	ra,3b18 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
     bc8:	000287b7          	lui	a5,0x28
     bcc:	dec7a783          	lw	a5,-532(a5) # 27dec <xSchedulerRunning>
     bd0:	02078a63          	beqz	a5,c04 <vTaskDelete+0x1b4>
        {
            if( pxTCB == pxCurrentTCB )
     bd4:	000287b7          	lui	a5,0x28
     bd8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     bdc:	fec42703          	lw	a4,-20(s0)
     be0:	02f71263          	bne	a4,a5,c04 <vTaskDelete+0x1b4>
            {
                configASSERT( uxSchedulerSuspended == 0 );
     be4:	000287b7          	lui	a5,0x28
     be8:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
     bec:	00078a63          	beqz	a5,c00 <vTaskDelete+0x1b0>
     bf0:	30047073          	csrci	mstatus,8
     bf4:	00100073          	ebreak
     bf8:	00000013          	nop
     bfc:	ffdff06f          	j	bf8 <vTaskDelete+0x1a8>
                portYIELD_WITHIN_API();
     c00:	00000073          	ecall
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
     c04:	00000013          	nop
     c08:	02c12083          	lw	ra,44(sp)
     c0c:	02812403          	lw	s0,40(sp)
     c10:	03010113          	addi	sp,sp,48
     c14:	00008067          	ret

00000c18 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
     c18:	fd010113          	addi	sp,sp,-48
     c1c:	02112623          	sw	ra,44(sp)
     c20:	02812423          	sw	s0,40(sp)
     c24:	03010413          	addi	s0,sp,48
     c28:	fca42e23          	sw	a0,-36(s0)
     c2c:	fcb42c23          	sw	a1,-40(s0)
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
     c30:	fe042023          	sw	zero,-32(s0)

        configASSERT( pxPreviousWakeTime );
     c34:	fdc42783          	lw	a5,-36(s0)
     c38:	00079a63          	bnez	a5,c4c <xTaskDelayUntil+0x34>
     c3c:	30047073          	csrci	mstatus,8
     c40:	00100073          	ebreak
     c44:	00000013          	nop
     c48:	ffdff06f          	j	c44 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
     c4c:	fd842783          	lw	a5,-40(s0)
     c50:	00079a63          	bnez	a5,c64 <xTaskDelayUntil+0x4c>
     c54:	30047073          	csrci	mstatus,8
     c58:	00100073          	ebreak
     c5c:	00000013          	nop
     c60:	ffdff06f          	j	c5c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
     c64:	000287b7          	lui	a5,0x28
     c68:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
     c6c:	00078a63          	beqz	a5,c80 <xTaskDelayUntil+0x68>
     c70:	30047073          	csrci	mstatus,8
     c74:	00100073          	ebreak
     c78:	00000013          	nop
     c7c:	ffdff06f          	j	c78 <xTaskDelayUntil+0x60>

        vTaskSuspendAll();
     c80:	60d000ef          	jal	ra,1a8c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
     c84:	000287b7          	lui	a5,0x28
     c88:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
     c8c:	fef42223          	sw	a5,-28(s0)

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
     c90:	fdc42783          	lw	a5,-36(s0)
     c94:	0007a783          	lw	a5,0(a5)
     c98:	fd842703          	lw	a4,-40(s0)
     c9c:	00f707b3          	add	a5,a4,a5
     ca0:	fef42423          	sw	a5,-24(s0)

            if( xConstTickCount < *pxPreviousWakeTime )
     ca4:	fdc42783          	lw	a5,-36(s0)
     ca8:	0007a783          	lw	a5,0(a5)
     cac:	fe442703          	lw	a4,-28(s0)
     cb0:	02f77663          	bgeu	a4,a5,cdc <xTaskDelayUntil+0xc4>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
     cb4:	fdc42783          	lw	a5,-36(s0)
     cb8:	0007a783          	lw	a5,0(a5)
     cbc:	fe842703          	lw	a4,-24(s0)
     cc0:	04f77063          	bgeu	a4,a5,d00 <xTaskDelayUntil+0xe8>
     cc4:	fe842703          	lw	a4,-24(s0)
     cc8:	fe442783          	lw	a5,-28(s0)
     ccc:	02e7fa63          	bgeu	a5,a4,d00 <xTaskDelayUntil+0xe8>
                {
                    xShouldDelay = pdTRUE;
     cd0:	00100793          	li	a5,1
     cd4:	fef42023          	sw	a5,-32(s0)
     cd8:	0280006f          	j	d00 <xTaskDelayUntil+0xe8>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
     cdc:	fdc42783          	lw	a5,-36(s0)
     ce0:	0007a783          	lw	a5,0(a5)
     ce4:	fe842703          	lw	a4,-24(s0)
     ce8:	00f76863          	bltu	a4,a5,cf8 <xTaskDelayUntil+0xe0>
     cec:	fe842703          	lw	a4,-24(s0)
     cf0:	fe442783          	lw	a5,-28(s0)
     cf4:	00e7f663          	bgeu	a5,a4,d00 <xTaskDelayUntil+0xe8>
                {
                    xShouldDelay = pdTRUE;
     cf8:	00100793          	li	a5,1
     cfc:	fef42023          	sw	a5,-32(s0)
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
     d00:	fdc42783          	lw	a5,-36(s0)
     d04:	fe842703          	lw	a4,-24(s0)
     d08:	00e7a023          	sw	a4,0(a5)

            if( xShouldDelay != pdFALSE )
     d0c:	fe042783          	lw	a5,-32(s0)
     d10:	00078e63          	beqz	a5,d2c <xTaskDelayUntil+0x114>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
     d14:	fe842703          	lw	a4,-24(s0)
     d18:	fe442783          	lw	a5,-28(s0)
     d1c:	40f707b3          	sub	a5,a4,a5
     d20:	00000593          	li	a1,0
     d24:	00078513          	mv	a0,a5
     d28:	734040ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
     d2c:	591000ef          	jal	ra,1abc <xTaskResumeAll>
     d30:	fea42623          	sw	a0,-20(s0)

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
     d34:	fec42783          	lw	a5,-20(s0)
     d38:	00079463          	bnez	a5,d40 <xTaskDelayUntil+0x128>
        {
            portYIELD_WITHIN_API();
     d3c:	00000073          	ecall
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
     d40:	fe042783          	lw	a5,-32(s0)
    }
     d44:	00078513          	mv	a0,a5
     d48:	02c12083          	lw	ra,44(sp)
     d4c:	02812403          	lw	s0,40(sp)
     d50:	03010113          	addi	sp,sp,48
     d54:	00008067          	ret

00000d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
     d58:	fd010113          	addi	sp,sp,-48
     d5c:	02112623          	sw	ra,44(sp)
     d60:	02812423          	sw	s0,40(sp)
     d64:	03010413          	addi	s0,sp,48
     d68:	fca42e23          	sw	a0,-36(s0)
        BaseType_t xAlreadyYielded = pdFALSE;
     d6c:	fe042623          	sw	zero,-20(s0)

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
     d70:	fdc42783          	lw	a5,-36(s0)
     d74:	02078c63          	beqz	a5,dac <vTaskDelay+0x54>
        {
            configASSERT( uxSchedulerSuspended == 0 );
     d78:	000287b7          	lui	a5,0x28
     d7c:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
     d80:	00078a63          	beqz	a5,d94 <vTaskDelay+0x3c>
     d84:	30047073          	csrci	mstatus,8
     d88:	00100073          	ebreak
     d8c:	00000013          	nop
     d90:	ffdff06f          	j	d8c <vTaskDelay+0x34>
            vTaskSuspendAll();
     d94:	4f9000ef          	jal	ra,1a8c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
     d98:	00000593          	li	a1,0
     d9c:	fdc42503          	lw	a0,-36(s0)
     da0:	6bc040ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
     da4:	519000ef          	jal	ra,1abc <xTaskResumeAll>
     da8:	fea42623          	sw	a0,-20(s0)
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
     dac:	fec42783          	lw	a5,-20(s0)
     db0:	00079463          	bnez	a5,db8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
     db4:	00000073          	ecall
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
     db8:	00000013          	nop
     dbc:	02c12083          	lw	ra,44(sp)
     dc0:	02812403          	lw	s0,40(sp)
     dc4:	03010113          	addi	sp,sp,48
     dc8:	00008067          	ret

00000dcc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

    eTaskState eTaskGetState( TaskHandle_t xTask )
    {
     dcc:	fc010113          	addi	sp,sp,-64
     dd0:	02812e23          	sw	s0,60(sp)
     dd4:	04010413          	addi	s0,sp,64
     dd8:	fca42623          	sw	a0,-52(s0)
        eTaskState eReturn;
        List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
        const TCB_t * const pxTCB = xTask;
     ddc:	fcc42783          	lw	a5,-52(s0)
     de0:	fef42023          	sw	a5,-32(s0)

        configASSERT( pxTCB );
     de4:	fe042783          	lw	a5,-32(s0)
     de8:	00079a63          	bnez	a5,dfc <eTaskGetState+0x30>
     dec:	30047073          	csrci	mstatus,8
     df0:	00100073          	ebreak
     df4:	00000013          	nop
     df8:	ffdff06f          	j	df4 <eTaskGetState+0x28>

        if( pxTCB == pxCurrentTCB )
     dfc:	000287b7          	lui	a5,0x28
     e00:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     e04:	fe042703          	lw	a4,-32(s0)
     e08:	00f71663          	bne	a4,a5,e14 <eTaskGetState+0x48>
        {
            /* The task calling this function is querying its own state. */
            eReturn = eRunning;
     e0c:	fc042c23          	sw	zero,-40(s0)
     e10:	12c0006f          	j	f3c <eTaskGetState+0x170>
        }
        else
        {
            taskENTER_CRITICAL();
     e14:	30047073          	csrci	mstatus,8
     e18:	000267b7          	lui	a5,0x26
     e1c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     e20:	00178713          	addi	a4,a5,1
     e24:	000267b7          	lui	a5,0x26
     e28:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
     e2c:	fe042783          	lw	a5,-32(s0)
     e30:	0147a783          	lw	a5,20(a5)
     e34:	fef42223          	sw	a5,-28(s0)
                pxDelayedList = pxDelayedTaskList;
     e38:	000287b7          	lui	a5,0x28
     e3c:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
     e40:	fef42423          	sw	a5,-24(s0)
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
     e44:	000287b7          	lui	a5,0x28
     e48:	d9c7a783          	lw	a5,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
     e4c:	fef42623          	sw	a5,-20(s0)
            }
            taskEXIT_CRITICAL();
     e50:	000267b7          	lui	a5,0x26
     e54:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     e58:	fff78713          	addi	a4,a5,-1
     e5c:	000267b7          	lui	a5,0x26
     e60:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
     e64:	000267b7          	lui	a5,0x26
     e68:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     e6c:	00079463          	bnez	a5,e74 <eTaskGetState+0xa8>
     e70:	30046073          	csrsi	mstatus,8

            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
     e74:	fe442703          	lw	a4,-28(s0)
     e78:	fe842783          	lw	a5,-24(s0)
     e7c:	00f70863          	beq	a4,a5,e8c <eTaskGetState+0xc0>
     e80:	fe442703          	lw	a4,-28(s0)
     e84:	fec42783          	lw	a5,-20(s0)
     e88:	00f71863          	bne	a4,a5,e98 <eTaskGetState+0xcc>
            {
                /* The task being queried is referenced from one of the Blocked
                 * lists. */
                eReturn = eBlocked;
     e8c:	00200793          	li	a5,2
     e90:	fcf42c23          	sw	a5,-40(s0)
     e94:	0a80006f          	j	f3c <eTaskGetState+0x170>
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                else if( pxStateList == &xSuspendedTaskList )
     e98:	fe442703          	lw	a4,-28(s0)
     e9c:	000287b7          	lui	a5,0x28
     ea0:	dcc78793          	addi	a5,a5,-564 # 27dcc <xSuspendedTaskList>
     ea4:	06f71663          	bne	a4,a5,f10 <eTaskGetState+0x144>
                {
                    /* The task being queried is referenced from the suspended
                     * list.  Is it genuinely suspended or is it blocked
                     * indefinitely? */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
     ea8:	fe042783          	lw	a5,-32(s0)
     eac:	0287a783          	lw	a5,40(a5)
     eb0:	04079a63          	bnez	a5,f04 <eTaskGetState+0x138>
                            /* The task does not appear on the event list item of
                             * and of the RTOS objects, but could still be in the
                             * blocked state if it is waiting on its notification
                             * rather than waiting on an object.  If not, is
                             * suspended. */
                            eReturn = eSuspended;
     eb4:	00300793          	li	a5,3
     eb8:	fcf42c23          	sw	a5,-40(s0)

                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
     ebc:	fc042e23          	sw	zero,-36(s0)
     ec0:	0380006f          	j	ef8 <eTaskGetState+0x12c>
                            {
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
     ec4:	fe042703          	lw	a4,-32(s0)
     ec8:	fdc42783          	lw	a5,-36(s0)
     ecc:	00f707b3          	add	a5,a4,a5
     ed0:	5847c783          	lbu	a5,1412(a5)
     ed4:	0ff7f713          	zext.b	a4,a5
     ed8:	00100793          	li	a5,1
     edc:	00f71863          	bne	a4,a5,eec <eTaskGetState+0x120>
                                {
                                    eReturn = eBlocked;
     ee0:	00200793          	li	a5,2
     ee4:	fcf42c23          	sw	a5,-40(s0)
                                    break;
     ee8:	0540006f          	j	f3c <eTaskGetState+0x170>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
     eec:	fdc42783          	lw	a5,-36(s0)
     ef0:	00178793          	addi	a5,a5,1
     ef4:	fcf42e23          	sw	a5,-36(s0)
     ef8:	fdc42783          	lw	a5,-36(s0)
     efc:	fcf054e3          	blez	a5,ec4 <eTaskGetState+0xf8>
     f00:	03c0006f          	j	f3c <eTaskGetState+0x170>
                        }
                        #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
                    }
                    else
                    {
                        eReturn = eBlocked;
     f04:	00200793          	li	a5,2
     f08:	fcf42c23          	sw	a5,-40(s0)
     f0c:	0300006f          	j	f3c <eTaskGetState+0x170>
                    }
                }
            #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */

            #if ( INCLUDE_vTaskDelete == 1 )
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
     f10:	fe442703          	lw	a4,-28(s0)
     f14:	000287b7          	lui	a5,0x28
     f18:	db478793          	addi	a5,a5,-588 # 27db4 <xTasksWaitingTermination>
     f1c:	00f70663          	beq	a4,a5,f28 <eTaskGetState+0x15c>
     f20:	fe442783          	lw	a5,-28(s0)
     f24:	00079863          	bnez	a5,f34 <eTaskGetState+0x168>
                {
                    /* The task being queried is referenced from the deleted
                     * tasks list, or it is not referenced from any lists at
                     * all. */
                    eReturn = eDeleted;
     f28:	00400793          	li	a5,4
     f2c:	fcf42c23          	sw	a5,-40(s0)
     f30:	00c0006f          	j	f3c <eTaskGetState+0x170>

            else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
            {
                /* If the task is not in any other state, it must be in the
                 * Ready (including pending ready) state. */
                eReturn = eReady;
     f34:	00100793          	li	a5,1
     f38:	fcf42c23          	sw	a5,-40(s0)
            }
        }

        return eReturn;
     f3c:	fd842783          	lw	a5,-40(s0)
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
     f40:	00078513          	mv	a0,a5
     f44:	03c12403          	lw	s0,60(sp)
     f48:	04010113          	addi	sp,sp,64
     f4c:	00008067          	ret

00000f50 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
     f50:	fd010113          	addi	sp,sp,-48
     f54:	02812623          	sw	s0,44(sp)
     f58:	03010413          	addi	s0,sp,48
     f5c:	fca42e23          	sw	a0,-36(s0)
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
     f60:	30047073          	csrci	mstatus,8
     f64:	000267b7          	lui	a5,0x26
     f68:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     f6c:	00178713          	addi	a4,a5,1
     f70:	000267b7          	lui	a5,0x26
     f74:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
     f78:	fdc42783          	lw	a5,-36(s0)
     f7c:	00079863          	bnez	a5,f8c <uxTaskPriorityGet+0x3c>
     f80:	000287b7          	lui	a5,0x28
     f84:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     f88:	0080006f          	j	f90 <uxTaskPriorityGet+0x40>
     f8c:	fdc42783          	lw	a5,-36(s0)
     f90:	fef42423          	sw	a5,-24(s0)
            uxReturn = pxTCB->uxPriority;
     f94:	fe842783          	lw	a5,-24(s0)
     f98:	02c7a783          	lw	a5,44(a5)
     f9c:	fef42623          	sw	a5,-20(s0)
        }
        taskEXIT_CRITICAL();
     fa0:	000267b7          	lui	a5,0x26
     fa4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     fa8:	fff78713          	addi	a4,a5,-1
     fac:	000267b7          	lui	a5,0x26
     fb0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
     fb4:	000267b7          	lui	a5,0x26
     fb8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
     fbc:	00079463          	bnez	a5,fc4 <uxTaskPriorityGet+0x74>
     fc0:	30046073          	csrsi	mstatus,8

        return uxReturn;
     fc4:	fec42783          	lw	a5,-20(s0)
    }
     fc8:	00078513          	mv	a0,a5
     fcc:	02c12403          	lw	s0,44(sp)
     fd0:	03010113          	addi	sp,sp,48
     fd4:	00008067          	ret

00000fd8 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
    {
     fd8:	fd010113          	addi	sp,sp,-48
     fdc:	02812623          	sw	s0,44(sp)
     fe0:	03010413          	addi	s0,sp,48
     fe4:	fca42e23          	sw	a0,-36(s0)
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
     fe8:	fe042223          	sw	zero,-28(s0)
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
     fec:	fdc42783          	lw	a5,-36(s0)
     ff0:	00079863          	bnez	a5,1000 <uxTaskPriorityGetFromISR+0x28>
     ff4:	000287b7          	lui	a5,0x28
     ff8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
     ffc:	0080006f          	j	1004 <uxTaskPriorityGetFromISR+0x2c>
    1000:	fdc42783          	lw	a5,-36(s0)
    1004:	fef42423          	sw	a5,-24(s0)
            uxReturn = pxTCB->uxPriority;
    1008:	fe842783          	lw	a5,-24(s0)
    100c:	02c7a783          	lw	a5,44(a5)
    1010:	fef42623          	sw	a5,-20(s0)
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

        return uxReturn;
    1014:	fec42783          	lw	a5,-20(s0)
    }
    1018:	00078513          	mv	a0,a5
    101c:	02c12403          	lw	s0,44(sp)
    1020:	03010113          	addi	sp,sp,48
    1024:	00008067          	ret

00001028 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
    1028:	fc010113          	addi	sp,sp,-64
    102c:	02112e23          	sw	ra,60(sp)
    1030:	02812c23          	sw	s0,56(sp)
    1034:	04010413          	addi	s0,sp,64
    1038:	fca42623          	sw	a0,-52(s0)
    103c:	fcb42423          	sw	a1,-56(s0)
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
    1040:	fc042e23          	sw	zero,-36(s0)

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
    1044:	fc842703          	lw	a4,-56(s0)
    1048:	00600793          	li	a5,6
    104c:	00e7fa63          	bgeu	a5,a4,1060 <vTaskPrioritySet+0x38>
    1050:	30047073          	csrci	mstatus,8
    1054:	00100073          	ebreak
    1058:	00000013          	nop
    105c:	ffdff06f          	j	1058 <vTaskPrioritySet+0x30>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    1060:	fc842703          	lw	a4,-56(s0)
    1064:	00600793          	li	a5,6
    1068:	00e7f663          	bgeu	a5,a4,1074 <vTaskPrioritySet+0x4c>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    106c:	00600793          	li	a5,6
    1070:	fcf42423          	sw	a5,-56(s0)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
    1074:	30047073          	csrci	mstatus,8
    1078:	000267b7          	lui	a5,0x26
    107c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1080:	00178713          	addi	a4,a5,1
    1084:	000267b7          	lui	a5,0x26
    1088:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
    108c:	fcc42783          	lw	a5,-52(s0)
    1090:	00079863          	bnez	a5,10a0 <vTaskPrioritySet+0x78>
    1094:	000287b7          	lui	a5,0x28
    1098:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    109c:	0080006f          	j	10a4 <vTaskPrioritySet+0x7c>
    10a0:	fcc42783          	lw	a5,-52(s0)
    10a4:	fef42023          	sw	a5,-32(s0)

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
    10a8:	fe042783          	lw	a5,-32(s0)
    10ac:	04c7a783          	lw	a5,76(a5)
    10b0:	fef42223          	sw	a5,-28(s0)
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
    10b4:	fe442703          	lw	a4,-28(s0)
    10b8:	fc842783          	lw	a5,-56(s0)
    10bc:	22f70663          	beq	a4,a5,12e8 <vTaskPrioritySet+0x2c0>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
    10c0:	fc842703          	lw	a4,-56(s0)
    10c4:	fe442783          	lw	a5,-28(s0)
    10c8:	02e7fa63          	bgeu	a5,a4,10fc <vTaskPrioritySet+0xd4>
                {
                    if( pxTCB != pxCurrentTCB )
    10cc:	000287b7          	lui	a5,0x28
    10d0:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    10d4:	fe042703          	lw	a4,-32(s0)
    10d8:	02f70e63          	beq	a4,a5,1114 <vTaskPrioritySet+0xec>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
    10dc:	000287b7          	lui	a5,0x28
    10e0:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    10e4:	02c7a783          	lw	a5,44(a5)
    10e8:	fc842703          	lw	a4,-56(s0)
    10ec:	02f76463          	bltu	a4,a5,1114 <vTaskPrioritySet+0xec>
                        {
                            xYieldRequired = pdTRUE;
    10f0:	00100793          	li	a5,1
    10f4:	fcf42e23          	sw	a5,-36(s0)
    10f8:	01c0006f          	j	1114 <vTaskPrioritySet+0xec>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
    10fc:	000287b7          	lui	a5,0x28
    1100:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    1104:	fe042703          	lw	a4,-32(s0)
    1108:	00f71663          	bne	a4,a5,1114 <vTaskPrioritySet+0xec>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
    110c:	00100793          	li	a5,1
    1110:	fcf42e23          	sw	a5,-36(s0)
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
    1114:	fe042783          	lw	a5,-32(s0)
    1118:	02c7a783          	lw	a5,44(a5)
    111c:	fef42423          	sw	a5,-24(s0)

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    1120:	fe042783          	lw	a5,-32(s0)
    1124:	04c7a703          	lw	a4,76(a5)
    1128:	fe042783          	lw	a5,-32(s0)
    112c:	02c7a783          	lw	a5,44(a5)
    1130:	00f71863          	bne	a4,a5,1140 <vTaskPrioritySet+0x118>
                    {
                        pxTCB->uxPriority = uxNewPriority;
    1134:	fe042783          	lw	a5,-32(s0)
    1138:	fc842703          	lw	a4,-56(s0)
    113c:	02e7a623          	sw	a4,44(a5)
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
    1140:	fe042783          	lw	a5,-32(s0)
    1144:	fc842703          	lw	a4,-56(s0)
    1148:	04e7a623          	sw	a4,76(a5)
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    114c:	fe042783          	lw	a5,-32(s0)
    1150:	0187a783          	lw	a5,24(a5)
    1154:	0007cc63          	bltz	a5,116c <vTaskPrioritySet+0x144>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1158:	00700713          	li	a4,7
    115c:	fc842783          	lw	a5,-56(s0)
    1160:	40f70733          	sub	a4,a4,a5
    1164:	fe042783          	lw	a5,-32(s0)
    1168:	00e7ac23          	sw	a4,24(a5)

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    116c:	fe042783          	lw	a5,-32(s0)
    1170:	0147a683          	lw	a3,20(a5)
    1174:	fe842703          	lw	a4,-24(s0)
    1178:	00070793          	mv	a5,a4
    117c:	00279793          	slli	a5,a5,0x2
    1180:	00e787b3          	add	a5,a5,a4
    1184:	00279793          	slli	a5,a5,0x2
    1188:	00028737          	lui	a4,0x28
    118c:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    1190:	00e787b3          	add	a5,a5,a4
    1194:	14f69463          	bne	a3,a5,12dc <vTaskPrioritySet+0x2b4>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1198:	fe042783          	lw	a5,-32(s0)
    119c:	00478793          	addi	a5,a5,4
    11a0:	00078513          	mv	a0,a5
    11a4:	4c4080ef          	jal	ra,9668 <uxListRemove>
    11a8:	00050793          	mv	a5,a0
    11ac:	02079463          	bnez	a5,11d4 <vTaskPrioritySet+0x1ac>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
    11b0:	fe842783          	lw	a5,-24(s0)
    11b4:	00100713          	li	a4,1
    11b8:	00f717b3          	sll	a5,a4,a5
    11bc:	fff7c713          	not	a4,a5
    11c0:	000287b7          	lui	a5,0x28
    11c4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    11c8:	00f77733          	and	a4,a4,a5
    11cc:	000287b7          	lui	a5,0x28
    11d0:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
    11d4:	fe042783          	lw	a5,-32(s0)
    11d8:	02c7a783          	lw	a5,44(a5)
    11dc:	00100713          	li	a4,1
    11e0:	00f71733          	sll	a4,a4,a5
    11e4:	000287b7          	lui	a5,0x28
    11e8:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    11ec:	00f76733          	or	a4,a4,a5
    11f0:	000287b7          	lui	a5,0x28
    11f4:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    11f8:	fe042783          	lw	a5,-32(s0)
    11fc:	02c7a703          	lw	a4,44(a5)
    1200:	000287b7          	lui	a5,0x28
    1204:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1208:	00070793          	mv	a5,a4
    120c:	00279793          	slli	a5,a5,0x2
    1210:	00e787b3          	add	a5,a5,a4
    1214:	00279793          	slli	a5,a5,0x2
    1218:	00f687b3          	add	a5,a3,a5
    121c:	0047a783          	lw	a5,4(a5)
    1220:	fef42623          	sw	a5,-20(s0)
    1224:	fe042783          	lw	a5,-32(s0)
    1228:	fec42703          	lw	a4,-20(s0)
    122c:	00e7a423          	sw	a4,8(a5)
    1230:	fec42783          	lw	a5,-20(s0)
    1234:	0087a703          	lw	a4,8(a5)
    1238:	fe042783          	lw	a5,-32(s0)
    123c:	00e7a623          	sw	a4,12(a5)
    1240:	fec42783          	lw	a5,-20(s0)
    1244:	0087a783          	lw	a5,8(a5)
    1248:	fe042703          	lw	a4,-32(s0)
    124c:	00470713          	addi	a4,a4,4
    1250:	00e7a223          	sw	a4,4(a5)
    1254:	fe042783          	lw	a5,-32(s0)
    1258:	00478713          	addi	a4,a5,4
    125c:	fec42783          	lw	a5,-20(s0)
    1260:	00e7a423          	sw	a4,8(a5)
    1264:	fe042783          	lw	a5,-32(s0)
    1268:	02c7a703          	lw	a4,44(a5)
    126c:	00070793          	mv	a5,a4
    1270:	00279793          	slli	a5,a5,0x2
    1274:	00e787b3          	add	a5,a5,a4
    1278:	00279793          	slli	a5,a5,0x2
    127c:	00028737          	lui	a4,0x28
    1280:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    1284:	00e78733          	add	a4,a5,a4
    1288:	fe042783          	lw	a5,-32(s0)
    128c:	00e7aa23          	sw	a4,20(a5)
    1290:	fe042783          	lw	a5,-32(s0)
    1294:	02c7a703          	lw	a4,44(a5)
    1298:	000287b7          	lui	a5,0x28
    129c:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    12a0:	00070793          	mv	a5,a4
    12a4:	00279793          	slli	a5,a5,0x2
    12a8:	00e787b3          	add	a5,a5,a4
    12ac:	00279793          	slli	a5,a5,0x2
    12b0:	00f687b3          	add	a5,a3,a5
    12b4:	0007a783          	lw	a5,0(a5)
    12b8:	00178693          	addi	a3,a5,1
    12bc:	000287b7          	lui	a5,0x28
    12c0:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    12c4:	00070793          	mv	a5,a4
    12c8:	00279793          	slli	a5,a5,0x2
    12cc:	00e787b3          	add	a5,a5,a4
    12d0:	00279793          	slli	a5,a5,0x2
    12d4:	00f607b3          	add	a5,a2,a5
    12d8:	00d7a023          	sw	a3,0(a5)
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
    12dc:	fdc42783          	lw	a5,-36(s0)
    12e0:	00078463          	beqz	a5,12e8 <vTaskPrioritySet+0x2c0>
                {
                    taskYIELD_IF_USING_PREEMPTION();
    12e4:	00000073          	ecall
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
    12e8:	000267b7          	lui	a5,0x26
    12ec:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    12f0:	fff78713          	addi	a4,a5,-1
    12f4:	000267b7          	lui	a5,0x26
    12f8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    12fc:	000267b7          	lui	a5,0x26
    1300:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1304:	00079463          	bnez	a5,130c <vTaskPrioritySet+0x2e4>
    1308:	30046073          	csrsi	mstatus,8
    }
    130c:	00000013          	nop
    1310:	03c12083          	lw	ra,60(sp)
    1314:	03812403          	lw	s0,56(sp)
    1318:	04010113          	addi	sp,sp,64
    131c:	00008067          	ret

00001320 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
    1320:	fd010113          	addi	sp,sp,-48
    1324:	02112623          	sw	ra,44(sp)
    1328:	02812423          	sw	s0,40(sp)
    132c:	03010413          	addi	s0,sp,48
    1330:	fca42e23          	sw	a0,-36(s0)
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
    1334:	30047073          	csrci	mstatus,8
    1338:	000267b7          	lui	a5,0x26
    133c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1340:	00178713          	addi	a4,a5,1
    1344:	000267b7          	lui	a5,0x26
    1348:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    134c:	fdc42783          	lw	a5,-36(s0)
    1350:	00079863          	bnez	a5,1360 <vTaskSuspend+0x40>
    1354:	000287b7          	lui	a5,0x28
    1358:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    135c:	0080006f          	j	1364 <vTaskSuspend+0x44>
    1360:	fdc42783          	lw	a5,-36(s0)
    1364:	fef42623          	sw	a5,-20(s0)

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1368:	fec42783          	lw	a5,-20(s0)
    136c:	00478793          	addi	a5,a5,4
    1370:	00078513          	mv	a0,a5
    1374:	2f4080ef          	jal	ra,9668 <uxListRemove>
    1378:	00050793          	mv	a5,a0
    137c:	04079c63          	bnez	a5,13d4 <vTaskSuspend+0xb4>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
    1380:	fec42783          	lw	a5,-20(s0)
    1384:	02c7a703          	lw	a4,44(a5)
    1388:	000287b7          	lui	a5,0x28
    138c:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1390:	00070793          	mv	a5,a4
    1394:	00279793          	slli	a5,a5,0x2
    1398:	00e787b3          	add	a5,a5,a4
    139c:	00279793          	slli	a5,a5,0x2
    13a0:	00f687b3          	add	a5,a3,a5
    13a4:	0007a783          	lw	a5,0(a5)
    13a8:	02079663          	bnez	a5,13d4 <vTaskSuspend+0xb4>
    13ac:	fec42783          	lw	a5,-20(s0)
    13b0:	02c7a783          	lw	a5,44(a5)
    13b4:	00100713          	li	a4,1
    13b8:	00f717b3          	sll	a5,a4,a5
    13bc:	fff7c713          	not	a4,a5
    13c0:	000287b7          	lui	a5,0x28
    13c4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    13c8:	00f77733          	and	a4,a4,a5
    13cc:	000287b7          	lui	a5,0x28
    13d0:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    13d4:	fec42783          	lw	a5,-20(s0)
    13d8:	0287a783          	lw	a5,40(a5)
    13dc:	00078a63          	beqz	a5,13f0 <vTaskSuspend+0xd0>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    13e0:	fec42783          	lw	a5,-20(s0)
    13e4:	01878793          	addi	a5,a5,24
    13e8:	00078513          	mv	a0,a5
    13ec:	27c080ef          	jal	ra,9668 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    13f0:	fec42783          	lw	a5,-20(s0)
    13f4:	00478793          	addi	a5,a5,4
    13f8:	00078593          	mv	a1,a5
    13fc:	000287b7          	lui	a5,0x28
    1400:	dcc78513          	addi	a0,a5,-564 # 27dcc <xSuspendedTaskList>
    1404:	108080ef          	jal	ra,950c <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
    1408:	fe042423          	sw	zero,-24(s0)
    140c:	03c0006f          	j	1448 <vTaskSuspend+0x128>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
    1410:	fec42703          	lw	a4,-20(s0)
    1414:	fe842783          	lw	a5,-24(s0)
    1418:	00f707b3          	add	a5,a4,a5
    141c:	5847c783          	lbu	a5,1412(a5)
    1420:	0ff7f713          	zext.b	a4,a5
    1424:	00100793          	li	a5,1
    1428:	00f71a63          	bne	a4,a5,143c <vTaskSuspend+0x11c>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
    142c:	fec42703          	lw	a4,-20(s0)
    1430:	fe842783          	lw	a5,-24(s0)
    1434:	00f707b3          	add	a5,a4,a5
    1438:	58078223          	sb	zero,1412(a5)
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
    143c:	fe842783          	lw	a5,-24(s0)
    1440:	00178793          	addi	a5,a5,1
    1444:	fef42423          	sw	a5,-24(s0)
    1448:	fe842783          	lw	a5,-24(s0)
    144c:	fcf052e3          	blez	a5,1410 <vTaskSuspend+0xf0>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
    1450:	000267b7          	lui	a5,0x26
    1454:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1458:	fff78713          	addi	a4,a5,-1
    145c:	000267b7          	lui	a5,0x26
    1460:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    1464:	000267b7          	lui	a5,0x26
    1468:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    146c:	00079463          	bnez	a5,1474 <vTaskSuspend+0x154>
    1470:	30046073          	csrsi	mstatus,8

        if( xSchedulerRunning != pdFALSE )
    1474:	000287b7          	lui	a5,0x28
    1478:	dec7a783          	lw	a5,-532(a5) # 27dec <xSchedulerRunning>
    147c:	04078263          	beqz	a5,14c0 <vTaskSuspend+0x1a0>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
    1480:	30047073          	csrci	mstatus,8
    1484:	000267b7          	lui	a5,0x26
    1488:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    148c:	00178713          	addi	a4,a5,1
    1490:	000267b7          	lui	a5,0x26
    1494:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                prvResetNextTaskUnblockTime();
    1498:	6d4020ef          	jal	ra,3b6c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
    149c:	000267b7          	lui	a5,0x26
    14a0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    14a4:	fff78713          	addi	a4,a5,-1
    14a8:	000267b7          	lui	a5,0x26
    14ac:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    14b0:	000267b7          	lui	a5,0x26
    14b4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    14b8:	00079463          	bnez	a5,14c0 <vTaskSuspend+0x1a0>
    14bc:	30046073          	csrsi	mstatus,8
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
    14c0:	000287b7          	lui	a5,0x28
    14c4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    14c8:	fec42703          	lw	a4,-20(s0)
    14cc:	04f71e63          	bne	a4,a5,1528 <vTaskSuspend+0x208>
        {
            if( xSchedulerRunning != pdFALSE )
    14d0:	000287b7          	lui	a5,0x28
    14d4:	dec7a783          	lw	a5,-532(a5) # 27dec <xSchedulerRunning>
    14d8:	02078463          	beqz	a5,1500 <vTaskSuspend+0x1e0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
    14dc:	000287b7          	lui	a5,0x28
    14e0:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    14e4:	00078a63          	beqz	a5,14f8 <vTaskSuspend+0x1d8>
    14e8:	30047073          	csrci	mstatus,8
    14ec:	00100073          	ebreak
    14f0:	00000013          	nop
    14f4:	ffdff06f          	j	14f0 <vTaskSuspend+0x1d0>
                portYIELD_WITHIN_API();
    14f8:	00000073          	ecall
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    14fc:	02c0006f          	j	1528 <vTaskSuspend+0x208>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
    1500:	000287b7          	lui	a5,0x28
    1504:	dcc78793          	addi	a5,a5,-564 # 27dcc <xSuspendedTaskList>
    1508:	0007a703          	lw	a4,0(a5)
    150c:	000287b7          	lui	a5,0x28
    1510:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
    1514:	00f71863          	bne	a4,a5,1524 <vTaskSuspend+0x204>
                    pxCurrentTCB = NULL;
    1518:	000287b7          	lui	a5,0x28
    151c:	c407a823          	sw	zero,-944(a5) # 27c50 <pxCurrentTCB>
    }
    1520:	0080006f          	j	1528 <vTaskSuspend+0x208>
                    vTaskSwitchContext();
    1524:	4f4010ef          	jal	ra,2a18 <vTaskSwitchContext>
    }
    1528:	00000013          	nop
    152c:	02c12083          	lw	ra,44(sp)
    1530:	02812403          	lw	s0,40(sp)
    1534:	03010113          	addi	sp,sp,48
    1538:	00008067          	ret

0000153c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
    153c:	fd010113          	addi	sp,sp,-48
    1540:	02812623          	sw	s0,44(sp)
    1544:	03010413          	addi	s0,sp,48
    1548:	fca42e23          	sw	a0,-36(s0)
        BaseType_t xReturn = pdFALSE;
    154c:	fe042423          	sw	zero,-24(s0)
        const TCB_t * const pxTCB = xTask;
    1550:	fdc42783          	lw	a5,-36(s0)
    1554:	fef42623          	sw	a5,-20(s0)

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
    1558:	fdc42783          	lw	a5,-36(s0)
    155c:	00079a63          	bnez	a5,1570 <prvTaskIsTaskSuspended+0x34>
    1560:	30047073          	csrci	mstatus,8
    1564:	00100073          	ebreak
    1568:	00000013          	nop
    156c:	ffdff06f          	j	1568 <prvTaskIsTaskSuspended+0x2c>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    1570:	fec42783          	lw	a5,-20(s0)
    1574:	0147a703          	lw	a4,20(a5)
    1578:	000287b7          	lui	a5,0x28
    157c:	dcc78793          	addi	a5,a5,-564 # 27dcc <xSuspendedTaskList>
    1580:	02f71663          	bne	a4,a5,15ac <prvTaskIsTaskSuspended+0x70>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    1584:	fec42783          	lw	a5,-20(s0)
    1588:	0287a703          	lw	a4,40(a5)
    158c:	000287b7          	lui	a5,0x28
    1590:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    1594:	00f70c63          	beq	a4,a5,15ac <prvTaskIsTaskSuspended+0x70>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    1598:	fec42783          	lw	a5,-20(s0)
    159c:	0287a783          	lw	a5,40(a5)
    15a0:	00079663          	bnez	a5,15ac <prvTaskIsTaskSuspended+0x70>
                {
                    xReturn = pdTRUE;
    15a4:	00100793          	li	a5,1
    15a8:	fef42423          	sw	a5,-24(s0)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    15ac:	fe842783          	lw	a5,-24(s0)
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    15b0:	00078513          	mv	a0,a5
    15b4:	02c12403          	lw	s0,44(sp)
    15b8:	03010113          	addi	sp,sp,48
    15bc:	00008067          	ret

000015c0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
    15c0:	fd010113          	addi	sp,sp,-48
    15c4:	02112623          	sw	ra,44(sp)
    15c8:	02812423          	sw	s0,40(sp)
    15cc:	03010413          	addi	s0,sp,48
    15d0:	fca42e23          	sw	a0,-36(s0)
        TCB_t * const pxTCB = xTaskToResume;
    15d4:	fdc42783          	lw	a5,-36(s0)
    15d8:	fef42423          	sw	a5,-24(s0)

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
    15dc:	fdc42783          	lw	a5,-36(s0)
    15e0:	00079a63          	bnez	a5,15f4 <vTaskResume+0x34>
    15e4:	30047073          	csrci	mstatus,8
    15e8:	00100073          	ebreak
    15ec:	00000013          	nop
    15f0:	ffdff06f          	j	15ec <vTaskResume+0x2c>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
    15f4:	000287b7          	lui	a5,0x28
    15f8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    15fc:	fe842703          	lw	a4,-24(s0)
    1600:	18f70663          	beq	a4,a5,178c <vTaskResume+0x1cc>
    1604:	fe842783          	lw	a5,-24(s0)
    1608:	18078263          	beqz	a5,178c <vTaskResume+0x1cc>
        {
            taskENTER_CRITICAL();
    160c:	30047073          	csrci	mstatus,8
    1610:	000267b7          	lui	a5,0x26
    1614:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1618:	00178713          	addi	a4,a5,1
    161c:	000267b7          	lui	a5,0x26
    1620:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    1624:	fe842503          	lw	a0,-24(s0)
    1628:	f15ff0ef          	jal	ra,153c <prvTaskIsTaskSuspended>
    162c:	00050793          	mv	a5,a0
    1630:	12078c63          	beqz	a5,1768 <vTaskResume+0x1a8>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1634:	fe842783          	lw	a5,-24(s0)
    1638:	00478793          	addi	a5,a5,4
    163c:	00078513          	mv	a0,a5
    1640:	028080ef          	jal	ra,9668 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
    1644:	fe842783          	lw	a5,-24(s0)
    1648:	02c7a783          	lw	a5,44(a5)
    164c:	00100713          	li	a4,1
    1650:	00f71733          	sll	a4,a4,a5
    1654:	000287b7          	lui	a5,0x28
    1658:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    165c:	00f76733          	or	a4,a4,a5
    1660:	000287b7          	lui	a5,0x28
    1664:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    1668:	fe842783          	lw	a5,-24(s0)
    166c:	02c7a703          	lw	a4,44(a5)
    1670:	000287b7          	lui	a5,0x28
    1674:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1678:	00070793          	mv	a5,a4
    167c:	00279793          	slli	a5,a5,0x2
    1680:	00e787b3          	add	a5,a5,a4
    1684:	00279793          	slli	a5,a5,0x2
    1688:	00f687b3          	add	a5,a3,a5
    168c:	0047a783          	lw	a5,4(a5)
    1690:	fef42623          	sw	a5,-20(s0)
    1694:	fe842783          	lw	a5,-24(s0)
    1698:	fec42703          	lw	a4,-20(s0)
    169c:	00e7a423          	sw	a4,8(a5)
    16a0:	fec42783          	lw	a5,-20(s0)
    16a4:	0087a703          	lw	a4,8(a5)
    16a8:	fe842783          	lw	a5,-24(s0)
    16ac:	00e7a623          	sw	a4,12(a5)
    16b0:	fec42783          	lw	a5,-20(s0)
    16b4:	0087a783          	lw	a5,8(a5)
    16b8:	fe842703          	lw	a4,-24(s0)
    16bc:	00470713          	addi	a4,a4,4
    16c0:	00e7a223          	sw	a4,4(a5)
    16c4:	fe842783          	lw	a5,-24(s0)
    16c8:	00478713          	addi	a4,a5,4
    16cc:	fec42783          	lw	a5,-20(s0)
    16d0:	00e7a423          	sw	a4,8(a5)
    16d4:	fe842783          	lw	a5,-24(s0)
    16d8:	02c7a703          	lw	a4,44(a5)
    16dc:	00070793          	mv	a5,a4
    16e0:	00279793          	slli	a5,a5,0x2
    16e4:	00e787b3          	add	a5,a5,a4
    16e8:	00279793          	slli	a5,a5,0x2
    16ec:	00028737          	lui	a4,0x28
    16f0:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    16f4:	00e78733          	add	a4,a5,a4
    16f8:	fe842783          	lw	a5,-24(s0)
    16fc:	00e7aa23          	sw	a4,20(a5)
    1700:	fe842783          	lw	a5,-24(s0)
    1704:	02c7a703          	lw	a4,44(a5)
    1708:	000287b7          	lui	a5,0x28
    170c:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1710:	00070793          	mv	a5,a4
    1714:	00279793          	slli	a5,a5,0x2
    1718:	00e787b3          	add	a5,a5,a4
    171c:	00279793          	slli	a5,a5,0x2
    1720:	00f687b3          	add	a5,a3,a5
    1724:	0007a783          	lw	a5,0(a5)
    1728:	00178693          	addi	a3,a5,1
    172c:	000287b7          	lui	a5,0x28
    1730:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    1734:	00070793          	mv	a5,a4
    1738:	00279793          	slli	a5,a5,0x2
    173c:	00e787b3          	add	a5,a5,a4
    1740:	00279793          	slli	a5,a5,0x2
    1744:	00f607b3          	add	a5,a2,a5
    1748:	00d7a023          	sw	a3,0(a5)

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    174c:	fe842783          	lw	a5,-24(s0)
    1750:	02c7a703          	lw	a4,44(a5)
    1754:	000287b7          	lui	a5,0x28
    1758:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    175c:	02c7a783          	lw	a5,44(a5)
    1760:	00f76463          	bltu	a4,a5,1768 <vTaskResume+0x1a8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
    1764:	00000073          	ecall
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    1768:	000267b7          	lui	a5,0x26
    176c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1770:	fff78713          	addi	a4,a5,-1
    1774:	000267b7          	lui	a5,0x26
    1778:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    177c:	000267b7          	lui	a5,0x26
    1780:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1784:	00079463          	bnez	a5,178c <vTaskResume+0x1cc>
    1788:	30046073          	csrsi	mstatus,8
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    178c:	00000013          	nop
    1790:	02c12083          	lw	ra,44(sp)
    1794:	02812403          	lw	s0,40(sp)
    1798:	03010113          	addi	sp,sp,48
    179c:	00008067          	ret

000017a0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

    BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
    {
    17a0:	fd010113          	addi	sp,sp,-48
    17a4:	02112623          	sw	ra,44(sp)
    17a8:	02812423          	sw	s0,40(sp)
    17ac:	03010413          	addi	s0,sp,48
    17b0:	fca42e23          	sw	a0,-36(s0)
        BaseType_t xYieldRequired = pdFALSE;
    17b4:	fe042023          	sw	zero,-32(s0)
        TCB_t * const pxTCB = xTaskToResume;
    17b8:	fdc42783          	lw	a5,-36(s0)
    17bc:	fef42223          	sw	a5,-28(s0)
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToResume );
    17c0:	fdc42783          	lw	a5,-36(s0)
    17c4:	00079a63          	bnez	a5,17d8 <xTaskResumeFromISR+0x38>
    17c8:	30047073          	csrci	mstatus,8
    17cc:	00100073          	ebreak
    17d0:	00000013          	nop
    17d4:	ffdff06f          	j	17d0 <xTaskResumeFromISR+0x30>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    17d8:	fe042423          	sw	zero,-24(s0)
        {
            if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    17dc:	fe442503          	lw	a0,-28(s0)
    17e0:	d5dff0ef          	jal	ra,153c <prvTaskIsTaskSuspended>
    17e4:	00050793          	mv	a5,a0
    17e8:	16078863          	beqz	a5,1958 <xTaskResumeFromISR+0x1b8>
            {
                traceTASK_RESUME_FROM_ISR( pxTCB );

                /* Check the ready lists can be accessed. */
                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    17ec:	000287b7          	lui	a5,0x28
    17f0:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    17f4:	14079663          	bnez	a5,1940 <xTaskResumeFromISR+0x1a0>
                {
                    /* Ready lists can be accessed so move the task from the
                     * suspended list to the ready list directly. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    17f8:	fe442783          	lw	a5,-28(s0)
    17fc:	02c7a703          	lw	a4,44(a5)
    1800:	000287b7          	lui	a5,0x28
    1804:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    1808:	02c7a783          	lw	a5,44(a5)
    180c:	00f76c63          	bltu	a4,a5,1824 <xTaskResumeFromISR+0x84>
                    {
                        xYieldRequired = pdTRUE;
    1810:	00100793          	li	a5,1
    1814:	fef42023          	sw	a5,-32(s0)

                        /* Mark that a yield is pending in case the user is not
                         * using the return value to initiate a context switch
                         * from the ISR using portYIELD_FROM_ISR. */
                        xYieldPending = pdTRUE;
    1818:	000287b7          	lui	a5,0x28
    181c:	00100713          	li	a4,1
    1820:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1824:	fe442783          	lw	a5,-28(s0)
    1828:	00478793          	addi	a5,a5,4
    182c:	00078513          	mv	a0,a5
    1830:	639070ef          	jal	ra,9668 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
    1834:	fe442783          	lw	a5,-28(s0)
    1838:	02c7a783          	lw	a5,44(a5)
    183c:	00100713          	li	a4,1
    1840:	00f71733          	sll	a4,a4,a5
    1844:	000287b7          	lui	a5,0x28
    1848:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    184c:	00f76733          	or	a4,a4,a5
    1850:	000287b7          	lui	a5,0x28
    1854:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    1858:	fe442783          	lw	a5,-28(s0)
    185c:	02c7a703          	lw	a4,44(a5)
    1860:	000287b7          	lui	a5,0x28
    1864:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1868:	00070793          	mv	a5,a4
    186c:	00279793          	slli	a5,a5,0x2
    1870:	00e787b3          	add	a5,a5,a4
    1874:	00279793          	slli	a5,a5,0x2
    1878:	00f687b3          	add	a5,a3,a5
    187c:	0047a783          	lw	a5,4(a5)
    1880:	fef42623          	sw	a5,-20(s0)
    1884:	fe442783          	lw	a5,-28(s0)
    1888:	fec42703          	lw	a4,-20(s0)
    188c:	00e7a423          	sw	a4,8(a5)
    1890:	fec42783          	lw	a5,-20(s0)
    1894:	0087a703          	lw	a4,8(a5)
    1898:	fe442783          	lw	a5,-28(s0)
    189c:	00e7a623          	sw	a4,12(a5)
    18a0:	fec42783          	lw	a5,-20(s0)
    18a4:	0087a783          	lw	a5,8(a5)
    18a8:	fe442703          	lw	a4,-28(s0)
    18ac:	00470713          	addi	a4,a4,4
    18b0:	00e7a223          	sw	a4,4(a5)
    18b4:	fe442783          	lw	a5,-28(s0)
    18b8:	00478713          	addi	a4,a5,4
    18bc:	fec42783          	lw	a5,-20(s0)
    18c0:	00e7a423          	sw	a4,8(a5)
    18c4:	fe442783          	lw	a5,-28(s0)
    18c8:	02c7a703          	lw	a4,44(a5)
    18cc:	00070793          	mv	a5,a4
    18d0:	00279793          	slli	a5,a5,0x2
    18d4:	00e787b3          	add	a5,a5,a4
    18d8:	00279793          	slli	a5,a5,0x2
    18dc:	00028737          	lui	a4,0x28
    18e0:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    18e4:	00e78733          	add	a4,a5,a4
    18e8:	fe442783          	lw	a5,-28(s0)
    18ec:	00e7aa23          	sw	a4,20(a5)
    18f0:	fe442783          	lw	a5,-28(s0)
    18f4:	02c7a703          	lw	a4,44(a5)
    18f8:	000287b7          	lui	a5,0x28
    18fc:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1900:	00070793          	mv	a5,a4
    1904:	00279793          	slli	a5,a5,0x2
    1908:	00e787b3          	add	a5,a5,a4
    190c:	00279793          	slli	a5,a5,0x2
    1910:	00f687b3          	add	a5,a3,a5
    1914:	0007a783          	lw	a5,0(a5)
    1918:	00178693          	addi	a3,a5,1
    191c:	000287b7          	lui	a5,0x28
    1920:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    1924:	00070793          	mv	a5,a4
    1928:	00279793          	slli	a5,a5,0x2
    192c:	00e787b3          	add	a5,a5,a4
    1930:	00279793          	slli	a5,a5,0x2
    1934:	00f607b3          	add	a5,a2,a5
    1938:	00d7a023          	sw	a3,0(a5)
    193c:	01c0006f          	j	1958 <xTaskResumeFromISR+0x1b8>
                else
                {
                    /* The delayed or ready lists cannot be accessed so the task
                     * is held in the pending ready list until the scheduler is
                     * unsuspended. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    1940:	fe442783          	lw	a5,-28(s0)
    1944:	01878793          	addi	a5,a5,24
    1948:	00078593          	mv	a1,a5
    194c:	000287b7          	lui	a5,0x28
    1950:	da078513          	addi	a0,a5,-608 # 27da0 <xPendingReadyList>
    1954:	3b9070ef          	jal	ra,950c <vListInsertEnd>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xYieldRequired;
    1958:	fe042783          	lw	a5,-32(s0)
    }
    195c:	00078513          	mv	a0,a5
    1960:	02c12083          	lw	ra,44(sp)
    1964:	02812403          	lw	s0,40(sp)
    1968:	03010113          	addi	sp,sp,48
    196c:	00008067          	ret

00001970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1970:	fe010113          	addi	sp,sp,-32
    1974:	00112e23          	sw	ra,28(sp)
    1978:	00812c23          	sw	s0,24(sp)
    197c:	02010413          	addi	s0,sp,32
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
    1980:	000287b7          	lui	a5,0x28
    1984:	e0478793          	addi	a5,a5,-508 # 27e04 <xIdleTaskHandle>
    1988:	00000713          	li	a4,0
    198c:	00000693          	li	a3,0
    1990:	12c00613          	li	a2,300
    1994:	000235b7          	lui	a1,0x23
    1998:	4a858593          	addi	a1,a1,1192 # 234a8 <__flash_rodata_start+0x58>
    199c:	00003537          	lui	a0,0x3
    19a0:	66c50513          	addi	a0,a0,1644 # 366c <prvIdleTask>
    19a4:	ae1fe0ef          	jal	ra,484 <xTaskCreate>
    19a8:	fea42623          	sw	a0,-20(s0)
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
    19ac:	fec42703          	lw	a4,-20(s0)
    19b0:	00100793          	li	a5,1
    19b4:	00f71663          	bne	a4,a5,19c0 <vTaskStartScheduler+0x50>
        {
            xReturn = xTimerCreateTimerTask();
    19b8:	469030ef          	jal	ra,5620 <xTimerCreateTimerTask>
    19bc:	fea42623          	sw	a0,-20(s0)
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
    19c0:	fec42703          	lw	a4,-20(s0)
    19c4:	00100793          	li	a5,1
    19c8:	04f71c63          	bne	a4,a5,1a20 <vTaskStartScheduler+0xb0>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
    19cc:	30047073          	csrci	mstatus,8

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
    19d0:	000287b7          	lui	a5,0x28
    19d4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    19d8:	05878793          	addi	a5,a5,88
    19dc:	00078513          	mv	a0,a5
    19e0:	7d5040ef          	jal	ra,69b4 <alt_set_thread_pointer>
    19e4:	000287b7          	lui	a5,0x28
    19e8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    19ec:	15878713          	addi	a4,a5,344
    19f0:	000267b7          	lui	a5,0x26
    19f4:	02e7ae23          	sw	a4,60(a5) # 2603c <_impure_ptr>
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
    19f8:	000287b7          	lui	a5,0x28
    19fc:	fff00713          	li	a4,-1
    1a00:	e0e7a023          	sw	a4,-512(a5) # 27e00 <xNextTaskUnblockTime>
        xSchedulerRunning = pdTRUE;
    1a04:	000287b7          	lui	a5,0x28
    1a08:	00100713          	li	a4,1
    1a0c:	dee7a623          	sw	a4,-532(a5) # 27dec <xSchedulerRunning>
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    1a10:	000287b7          	lui	a5,0x28
    1a14:	de07a223          	sw	zero,-540(a5) # 27de4 <xTickCount>

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
    1a18:	669070ef          	jal	ra,9880 <xPortStartScheduler>
    1a1c:	0200006f          	j	1a3c <vTaskStartScheduler+0xcc>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    1a20:	fec42703          	lw	a4,-20(s0)
    1a24:	fff00793          	li	a5,-1
    1a28:	00f71a63          	bne	a4,a5,1a3c <vTaskStartScheduler+0xcc>
    1a2c:	30047073          	csrci	mstatus,8
    1a30:	00100073          	ebreak
    1a34:	00000013          	nop
    1a38:	ffdff06f          	j	1a34 <vTaskStartScheduler+0xc4>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
    1a3c:	000267b7          	lui	a5,0x26
    1a40:	0047a783          	lw	a5,4(a5) # 26004 <uxTopUsedPriority>
}
    1a44:	00000013          	nop
    1a48:	01c12083          	lw	ra,28(sp)
    1a4c:	01812403          	lw	s0,24(sp)
    1a50:	02010113          	addi	sp,sp,32
    1a54:	00008067          	ret

00001a58 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    1a58:	ff010113          	addi	sp,sp,-16
    1a5c:	00112623          	sw	ra,12(sp)
    1a60:	00812423          	sw	s0,8(sp)
    1a64:	01010413          	addi	s0,sp,16
    /* Stop the scheduler interrupts and call the portable scheduler end
     * routine so the original ISRs can be restored if necessary.  The port
     * layer must ensure interrupts enable  bit is left in the correct state. */
    portDISABLE_INTERRUPTS();
    1a68:	30047073          	csrci	mstatus,8
    xSchedulerRunning = pdFALSE;
    1a6c:	000287b7          	lui	a5,0x28
    1a70:	de07a623          	sw	zero,-532(a5) # 27dec <xSchedulerRunning>
    vPortEndScheduler();
    1a74:	669070ef          	jal	ra,98dc <vPortEndScheduler>
}
    1a78:	00000013          	nop
    1a7c:	00c12083          	lw	ra,12(sp)
    1a80:	00812403          	lw	s0,8(sp)
    1a84:	01010113          	addi	sp,sp,16
    1a88:	00008067          	ret

00001a8c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1a8c:	ff010113          	addi	sp,sp,-16
    1a90:	00812623          	sw	s0,12(sp)
    1a94:	01010413          	addi	s0,sp,16
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
    1a98:	000287b7          	lui	a5,0x28
    1a9c:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    1aa0:	00178713          	addi	a4,a5,1
    1aa4:	000287b7          	lui	a5,0x28
    1aa8:	e0e7a423          	sw	a4,-504(a5) # 27e08 <uxSchedulerSuspended>

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
    1aac:	00000013          	nop
    1ab0:	00c12403          	lw	s0,12(sp)
    1ab4:	01010113          	addi	sp,sp,16
    1ab8:	00008067          	ret

00001abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    1abc:	fd010113          	addi	sp,sp,-48
    1ac0:	02112623          	sw	ra,44(sp)
    1ac4:	02812423          	sw	s0,40(sp)
    1ac8:	03010413          	addi	s0,sp,48
    TCB_t * pxTCB = NULL;
    1acc:	fc042c23          	sw	zero,-40(s0)
    BaseType_t xAlreadyYielded = pdFALSE;
    1ad0:	fc042e23          	sw	zero,-36(s0)

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
    1ad4:	000287b7          	lui	a5,0x28
    1ad8:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    1adc:	00079a63          	bnez	a5,1af0 <xTaskResumeAll+0x34>
    1ae0:	30047073          	csrci	mstatus,8
    1ae4:	00100073          	ebreak
    1ae8:	00000013          	nop
    1aec:	ffdff06f          	j	1ae8 <xTaskResumeAll+0x2c>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
    1af0:	30047073          	csrci	mstatus,8
    1af4:	000267b7          	lui	a5,0x26
    1af8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1afc:	00178713          	addi	a4,a5,1
    1b00:	000267b7          	lui	a5,0x26
    1b04:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        --uxSchedulerSuspended;
    1b08:	000287b7          	lui	a5,0x28
    1b0c:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    1b10:	fff78713          	addi	a4,a5,-1
    1b14:	000287b7          	lui	a5,0x28
    1b18:	e0e7a423          	sw	a4,-504(a5) # 27e08 <uxSchedulerSuspended>

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1b1c:	000287b7          	lui	a5,0x28
    1b20:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    1b24:	2a079c63          	bnez	a5,1ddc <xTaskResumeAll+0x320>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1b28:	000287b7          	lui	a5,0x28
    1b2c:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
    1b30:	2a078663          	beqz	a5,1ddc <xTaskResumeAll+0x320>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1b34:	22c0006f          	j	1d60 <xTaskResumeAll+0x2a4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1b38:	000287b7          	lui	a5,0x28
    1b3c:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    1b40:	00c7a783          	lw	a5,12(a5)
    1b44:	00c7a783          	lw	a5,12(a5)
    1b48:	fcf42c23          	sw	a5,-40(s0)
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    1b4c:	fd842783          	lw	a5,-40(s0)
    1b50:	0287a783          	lw	a5,40(a5)
    1b54:	fef42223          	sw	a5,-28(s0)
    1b58:	fd842783          	lw	a5,-40(s0)
    1b5c:	01c7a783          	lw	a5,28(a5)
    1b60:	fd842703          	lw	a4,-40(s0)
    1b64:	02072703          	lw	a4,32(a4)
    1b68:	00e7a423          	sw	a4,8(a5)
    1b6c:	fd842783          	lw	a5,-40(s0)
    1b70:	0207a783          	lw	a5,32(a5)
    1b74:	fd842703          	lw	a4,-40(s0)
    1b78:	01c72703          	lw	a4,28(a4)
    1b7c:	00e7a223          	sw	a4,4(a5)
    1b80:	fe442783          	lw	a5,-28(s0)
    1b84:	0047a703          	lw	a4,4(a5)
    1b88:	fd842783          	lw	a5,-40(s0)
    1b8c:	01878793          	addi	a5,a5,24
    1b90:	00f71a63          	bne	a4,a5,1ba4 <xTaskResumeAll+0xe8>
    1b94:	fd842783          	lw	a5,-40(s0)
    1b98:	0207a703          	lw	a4,32(a5)
    1b9c:	fe442783          	lw	a5,-28(s0)
    1ba0:	00e7a223          	sw	a4,4(a5)
    1ba4:	fd842783          	lw	a5,-40(s0)
    1ba8:	0207a423          	sw	zero,40(a5)
    1bac:	fe442783          	lw	a5,-28(s0)
    1bb0:	0007a783          	lw	a5,0(a5)
    1bb4:	fff78713          	addi	a4,a5,-1
    1bb8:	fe442783          	lw	a5,-28(s0)
    1bbc:	00e7a023          	sw	a4,0(a5)
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    1bc0:	fd842783          	lw	a5,-40(s0)
    1bc4:	0147a783          	lw	a5,20(a5)
    1bc8:	fef42423          	sw	a5,-24(s0)
    1bcc:	fd842783          	lw	a5,-40(s0)
    1bd0:	0087a783          	lw	a5,8(a5)
    1bd4:	fd842703          	lw	a4,-40(s0)
    1bd8:	00c72703          	lw	a4,12(a4)
    1bdc:	00e7a423          	sw	a4,8(a5)
    1be0:	fd842783          	lw	a5,-40(s0)
    1be4:	00c7a783          	lw	a5,12(a5)
    1be8:	fd842703          	lw	a4,-40(s0)
    1bec:	00872703          	lw	a4,8(a4)
    1bf0:	00e7a223          	sw	a4,4(a5)
    1bf4:	fe842783          	lw	a5,-24(s0)
    1bf8:	0047a703          	lw	a4,4(a5)
    1bfc:	fd842783          	lw	a5,-40(s0)
    1c00:	00478793          	addi	a5,a5,4
    1c04:	00f71a63          	bne	a4,a5,1c18 <xTaskResumeAll+0x15c>
    1c08:	fd842783          	lw	a5,-40(s0)
    1c0c:	00c7a703          	lw	a4,12(a5)
    1c10:	fe842783          	lw	a5,-24(s0)
    1c14:	00e7a223          	sw	a4,4(a5)
    1c18:	fd842783          	lw	a5,-40(s0)
    1c1c:	0007aa23          	sw	zero,20(a5)
    1c20:	fe842783          	lw	a5,-24(s0)
    1c24:	0007a783          	lw	a5,0(a5)
    1c28:	fff78713          	addi	a4,a5,-1
    1c2c:	fe842783          	lw	a5,-24(s0)
    1c30:	00e7a023          	sw	a4,0(a5)
                    prvAddTaskToReadyList( pxTCB );
    1c34:	fd842783          	lw	a5,-40(s0)
    1c38:	02c7a783          	lw	a5,44(a5)
    1c3c:	00100713          	li	a4,1
    1c40:	00f71733          	sll	a4,a4,a5
    1c44:	000287b7          	lui	a5,0x28
    1c48:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    1c4c:	00f76733          	or	a4,a4,a5
    1c50:	000287b7          	lui	a5,0x28
    1c54:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    1c58:	fd842783          	lw	a5,-40(s0)
    1c5c:	02c7a703          	lw	a4,44(a5)
    1c60:	000287b7          	lui	a5,0x28
    1c64:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1c68:	00070793          	mv	a5,a4
    1c6c:	00279793          	slli	a5,a5,0x2
    1c70:	00e787b3          	add	a5,a5,a4
    1c74:	00279793          	slli	a5,a5,0x2
    1c78:	00f687b3          	add	a5,a3,a5
    1c7c:	0047a783          	lw	a5,4(a5)
    1c80:	fef42623          	sw	a5,-20(s0)
    1c84:	fd842783          	lw	a5,-40(s0)
    1c88:	fec42703          	lw	a4,-20(s0)
    1c8c:	00e7a423          	sw	a4,8(a5)
    1c90:	fec42783          	lw	a5,-20(s0)
    1c94:	0087a703          	lw	a4,8(a5)
    1c98:	fd842783          	lw	a5,-40(s0)
    1c9c:	00e7a623          	sw	a4,12(a5)
    1ca0:	fec42783          	lw	a5,-20(s0)
    1ca4:	0087a783          	lw	a5,8(a5)
    1ca8:	fd842703          	lw	a4,-40(s0)
    1cac:	00470713          	addi	a4,a4,4
    1cb0:	00e7a223          	sw	a4,4(a5)
    1cb4:	fd842783          	lw	a5,-40(s0)
    1cb8:	00478713          	addi	a4,a5,4
    1cbc:	fec42783          	lw	a5,-20(s0)
    1cc0:	00e7a423          	sw	a4,8(a5)
    1cc4:	fd842783          	lw	a5,-40(s0)
    1cc8:	02c7a703          	lw	a4,44(a5)
    1ccc:	00070793          	mv	a5,a4
    1cd0:	00279793          	slli	a5,a5,0x2
    1cd4:	00e787b3          	add	a5,a5,a4
    1cd8:	00279793          	slli	a5,a5,0x2
    1cdc:	00028737          	lui	a4,0x28
    1ce0:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    1ce4:	00e78733          	add	a4,a5,a4
    1ce8:	fd842783          	lw	a5,-40(s0)
    1cec:	00e7aa23          	sw	a4,20(a5)
    1cf0:	fd842783          	lw	a5,-40(s0)
    1cf4:	02c7a703          	lw	a4,44(a5)
    1cf8:	000287b7          	lui	a5,0x28
    1cfc:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    1d00:	00070793          	mv	a5,a4
    1d04:	00279793          	slli	a5,a5,0x2
    1d08:	00e787b3          	add	a5,a5,a4
    1d0c:	00279793          	slli	a5,a5,0x2
    1d10:	00f687b3          	add	a5,a3,a5
    1d14:	0007a783          	lw	a5,0(a5)
    1d18:	00178693          	addi	a3,a5,1
    1d1c:	000287b7          	lui	a5,0x28
    1d20:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    1d24:	00070793          	mv	a5,a4
    1d28:	00279793          	slli	a5,a5,0x2
    1d2c:	00e787b3          	add	a5,a5,a4
    1d30:	00279793          	slli	a5,a5,0x2
    1d34:	00f607b3          	add	a5,a2,a5
    1d38:	00d7a023          	sw	a3,0(a5)

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1d3c:	fd842783          	lw	a5,-40(s0)
    1d40:	02c7a703          	lw	a4,44(a5)
    1d44:	000287b7          	lui	a5,0x28
    1d48:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    1d4c:	02c7a783          	lw	a5,44(a5)
    1d50:	00f76863          	bltu	a4,a5,1d60 <xTaskResumeAll+0x2a4>
                    {
                        xYieldPending = pdTRUE;
    1d54:	000287b7          	lui	a5,0x28
    1d58:	00100713          	li	a4,1
    1d5c:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    1d60:	000287b7          	lui	a5,0x28
    1d64:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    1d68:	0007a783          	lw	a5,0(a5)
    1d6c:	dc0796e3          	bnez	a5,1b38 <xTaskResumeAll+0x7c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
    1d70:	fd842783          	lw	a5,-40(s0)
    1d74:	00078463          	beqz	a5,1d7c <xTaskResumeAll+0x2c0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
    1d78:	5f5010ef          	jal	ra,3b6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
    1d7c:	000287b7          	lui	a5,0x28
    1d80:	df07a783          	lw	a5,-528(a5) # 27df0 <xPendedTicks>
    1d84:	fef42023          	sw	a5,-32(s0)

                    if( xPendedCounts > ( TickType_t ) 0U )
    1d88:	fe042783          	lw	a5,-32(s0)
    1d8c:	02078c63          	beqz	a5,1dc4 <xTaskResumeAll+0x308>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
    1d90:	0c5000ef          	jal	ra,2654 <xTaskIncrementTick>
    1d94:	00050793          	mv	a5,a0
    1d98:	00078863          	beqz	a5,1da8 <xTaskResumeAll+0x2ec>
                            {
                                xYieldPending = pdTRUE;
    1d9c:	000287b7          	lui	a5,0x28
    1da0:	00100713          	li	a4,1
    1da4:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
    1da8:	fe042783          	lw	a5,-32(s0)
    1dac:	fff78793          	addi	a5,a5,-1
    1db0:	fef42023          	sw	a5,-32(s0)
                        } while( xPendedCounts > ( TickType_t ) 0U );
    1db4:	fe042783          	lw	a5,-32(s0)
    1db8:	fc079ce3          	bnez	a5,1d90 <xTaskResumeAll+0x2d4>

                        xPendedTicks = 0;
    1dbc:	000287b7          	lui	a5,0x28
    1dc0:	de07a823          	sw	zero,-528(a5) # 27df0 <xPendedTicks>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
    1dc4:	000287b7          	lui	a5,0x28
    1dc8:	df47a783          	lw	a5,-524(a5) # 27df4 <xYieldPending>
    1dcc:	00078863          	beqz	a5,1ddc <xTaskResumeAll+0x320>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
    1dd0:	00100793          	li	a5,1
    1dd4:	fcf42e23          	sw	a5,-36(s0)
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
    1dd8:	00000073          	ecall
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    1ddc:	000267b7          	lui	a5,0x26
    1de0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1de4:	fff78713          	addi	a4,a5,-1
    1de8:	000267b7          	lui	a5,0x26
    1dec:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    1df0:	000267b7          	lui	a5,0x26
    1df4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    1df8:	00079463          	bnez	a5,1e00 <xTaskResumeAll+0x344>
    1dfc:	30046073          	csrsi	mstatus,8

    return xAlreadyYielded;
    1e00:	fdc42783          	lw	a5,-36(s0)
}
    1e04:	00078513          	mv	a0,a5
    1e08:	02c12083          	lw	ra,44(sp)
    1e0c:	02812403          	lw	s0,40(sp)
    1e10:	03010113          	addi	sp,sp,48
    1e14:	00008067          	ret

00001e18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    1e18:	fe010113          	addi	sp,sp,-32
    1e1c:	00812e23          	sw	s0,28(sp)
    1e20:	02010413          	addi	s0,sp,32
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
    1e24:	000287b7          	lui	a5,0x28
    1e28:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    1e2c:	fef42623          	sw	a5,-20(s0)
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
    1e30:	fec42783          	lw	a5,-20(s0)
}
    1e34:	00078513          	mv	a0,a5
    1e38:	01c12403          	lw	s0,28(sp)
    1e3c:	02010113          	addi	sp,sp,32
    1e40:	00008067          	ret

00001e44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    1e44:	fe010113          	addi	sp,sp,-32
    1e48:	00812e23          	sw	s0,28(sp)
    1e4c:	02010413          	addi	s0,sp,32
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    1e50:	fe042423          	sw	zero,-24(s0)
    {
        xReturn = xTickCount;
    1e54:	000287b7          	lui	a5,0x28
    1e58:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    1e5c:	fef42623          	sw	a5,-20(s0)
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
    1e60:	fec42783          	lw	a5,-20(s0)
}
    1e64:	00078513          	mv	a0,a5
    1e68:	01c12403          	lw	s0,28(sp)
    1e6c:	02010113          	addi	sp,sp,32
    1e70:	00008067          	ret

00001e74 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    1e74:	ff010113          	addi	sp,sp,-16
    1e78:	00812623          	sw	s0,12(sp)
    1e7c:	01010413          	addi	s0,sp,16
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
    1e80:	000287b7          	lui	a5,0x28
    1e84:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
}
    1e88:	00078513          	mv	a0,a5
    1e8c:	00c12403          	lw	s0,12(sp)
    1e90:	01010113          	addi	sp,sp,16
    1e94:	00008067          	ret

00001e98 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    1e98:	fd010113          	addi	sp,sp,-48
    1e9c:	02812623          	sw	s0,44(sp)
    1ea0:	03010413          	addi	s0,sp,48
    1ea4:	fca42e23          	sw	a0,-36(s0)
    TCB_t * pxTCB;

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    1ea8:	fdc42783          	lw	a5,-36(s0)
    1eac:	00079863          	bnez	a5,1ebc <pcTaskGetName+0x24>
    1eb0:	000287b7          	lui	a5,0x28
    1eb4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    1eb8:	0080006f          	j	1ec0 <pcTaskGetName+0x28>
    1ebc:	fdc42783          	lw	a5,-36(s0)
    1ec0:	fef42623          	sw	a5,-20(s0)
    configASSERT( pxTCB );
    1ec4:	fec42783          	lw	a5,-20(s0)
    1ec8:	00079a63          	bnez	a5,1edc <pcTaskGetName+0x44>
    1ecc:	30047073          	csrci	mstatus,8
    1ed0:	00100073          	ebreak
    1ed4:	00000013          	nop
    1ed8:	ffdff06f          	j	1ed4 <pcTaskGetName+0x3c>
    return &( pxTCB->pcTaskName[ 0 ] );
    1edc:	fec42783          	lw	a5,-20(s0)
    1ee0:	03478793          	addi	a5,a5,52
}
    1ee4:	00078513          	mv	a0,a5
    1ee8:	02c12403          	lw	s0,44(sp)
    1eec:	03010113          	addi	sp,sp,48
    1ef0:	00008067          	ret

00001ef4 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
    1ef4:	fc010113          	addi	sp,sp,-64
    1ef8:	02812e23          	sw	s0,60(sp)
    1efc:	04010413          	addi	s0,sp,64
    1f00:	fca42623          	sw	a0,-52(s0)
    1f04:	fcb42423          	sw	a1,-56(s0)
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
    1f08:	fc042a23          	sw	zero,-44(s0)
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    1f0c:	fcc42783          	lw	a5,-52(s0)
    1f10:	0007a783          	lw	a5,0(a5)
    1f14:	14078663          	beqz	a5,2060 <prvSearchForNameWithinSingleList+0x16c>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f18:	fcc42783          	lw	a5,-52(s0)
    1f1c:	fef42023          	sw	a5,-32(s0)
    1f20:	fe042783          	lw	a5,-32(s0)
    1f24:	0047a783          	lw	a5,4(a5)
    1f28:	0047a703          	lw	a4,4(a5)
    1f2c:	fe042783          	lw	a5,-32(s0)
    1f30:	00e7a223          	sw	a4,4(a5)
    1f34:	fe042783          	lw	a5,-32(s0)
    1f38:	0047a703          	lw	a4,4(a5)
    1f3c:	fe042783          	lw	a5,-32(s0)
    1f40:	00878793          	addi	a5,a5,8
    1f44:	00f71c63          	bne	a4,a5,1f5c <prvSearchForNameWithinSingleList+0x68>
    1f48:	fe042783          	lw	a5,-32(s0)
    1f4c:	0047a783          	lw	a5,4(a5)
    1f50:	0047a703          	lw	a4,4(a5)
    1f54:	fe042783          	lw	a5,-32(s0)
    1f58:	00e7a223          	sw	a4,4(a5)
    1f5c:	fe042783          	lw	a5,-32(s0)
    1f60:	0047a783          	lw	a5,4(a5)
    1f64:	00c7a783          	lw	a5,12(a5)
    1f68:	fef42223          	sw	a5,-28(s0)

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f6c:	fcc42783          	lw	a5,-52(s0)
    1f70:	fef42423          	sw	a5,-24(s0)
    1f74:	fe842783          	lw	a5,-24(s0)
    1f78:	0047a783          	lw	a5,4(a5)
    1f7c:	0047a703          	lw	a4,4(a5)
    1f80:	fe842783          	lw	a5,-24(s0)
    1f84:	00e7a223          	sw	a4,4(a5)
    1f88:	fe842783          	lw	a5,-24(s0)
    1f8c:	0047a703          	lw	a4,4(a5)
    1f90:	fe842783          	lw	a5,-24(s0)
    1f94:	00878793          	addi	a5,a5,8
    1f98:	00f71c63          	bne	a4,a5,1fb0 <prvSearchForNameWithinSingleList+0xbc>
    1f9c:	fe842783          	lw	a5,-24(s0)
    1fa0:	0047a783          	lw	a5,4(a5)
    1fa4:	0047a703          	lw	a4,4(a5)
    1fa8:	fe842783          	lw	a5,-24(s0)
    1fac:	00e7a223          	sw	a4,4(a5)
    1fb0:	fe842783          	lw	a5,-24(s0)
    1fb4:	0047a783          	lw	a5,4(a5)
    1fb8:	00c7a783          	lw	a5,12(a5)
    1fbc:	fef42623          	sw	a5,-20(s0)

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
    1fc0:	fc042e23          	sw	zero,-36(s0)

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    1fc4:	fc042c23          	sw	zero,-40(s0)
    1fc8:	0680006f          	j	2030 <prvSearchForNameWithinSingleList+0x13c>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
    1fcc:	fec42703          	lw	a4,-20(s0)
    1fd0:	fd842783          	lw	a5,-40(s0)
    1fd4:	00f707b3          	add	a5,a4,a5
    1fd8:	0347c783          	lbu	a5,52(a5)
    1fdc:	fcf409a3          	sb	a5,-45(s0)

                    if( cNextChar != pcNameToQuery[ x ] )
    1fe0:	fc842703          	lw	a4,-56(s0)
    1fe4:	fd842783          	lw	a5,-40(s0)
    1fe8:	00f707b3          	add	a5,a4,a5
    1fec:	0007c783          	lbu	a5,0(a5)
    1ff0:	fd344703          	lbu	a4,-45(s0)
    1ff4:	00f70863          	beq	a4,a5,2004 <prvSearchForNameWithinSingleList+0x110>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
    1ff8:	00100793          	li	a5,1
    1ffc:	fcf42e23          	sw	a5,-36(s0)
    2000:	01c0006f          	j	201c <prvSearchForNameWithinSingleList+0x128>
                    }
                    else if( cNextChar == ( char ) 0x00 )
    2004:	fd344783          	lbu	a5,-45(s0)
    2008:	00079a63          	bnez	a5,201c <prvSearchForNameWithinSingleList+0x128>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
    200c:	fec42783          	lw	a5,-20(s0)
    2010:	fcf42a23          	sw	a5,-44(s0)
                        xBreakLoop = pdTRUE;
    2014:	00100793          	li	a5,1
    2018:	fcf42e23          	sw	a5,-36(s0)
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
    201c:	fdc42783          	lw	a5,-36(s0)
    2020:	02079063          	bnez	a5,2040 <prvSearchForNameWithinSingleList+0x14c>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2024:	fd842783          	lw	a5,-40(s0)
    2028:	00178793          	addi	a5,a5,1
    202c:	fcf42c23          	sw	a5,-40(s0)
    2030:	fd842703          	lw	a4,-40(s0)
    2034:	00f00793          	li	a5,15
    2038:	f8e7fae3          	bgeu	a5,a4,1fcc <prvSearchForNameWithinSingleList+0xd8>
    203c:	0080006f          	j	2044 <prvSearchForNameWithinSingleList+0x150>
                    {
                        break;
    2040:	00000013          	nop
                    }
                }

                if( pxReturn != NULL )
    2044:	fd442783          	lw	a5,-44(s0)
    2048:	00079a63          	bnez	a5,205c <prvSearchForNameWithinSingleList+0x168>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
    204c:	fec42703          	lw	a4,-20(s0)
    2050:	fe442783          	lw	a5,-28(s0)
    2054:	f0f71ce3          	bne	a4,a5,1f6c <prvSearchForNameWithinSingleList+0x78>
    2058:	0080006f          	j	2060 <prvSearchForNameWithinSingleList+0x16c>
                    break;
    205c:	00000013          	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
    2060:	fd442783          	lw	a5,-44(s0)
    }
    2064:	00078513          	mv	a0,a5
    2068:	03c12403          	lw	s0,60(sp)
    206c:	04010113          	addi	sp,sp,64
    2070:	00008067          	ret

00002074 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
    2074:	fd010113          	addi	sp,sp,-48
    2078:	02112623          	sw	ra,44(sp)
    207c:	02812423          	sw	s0,40(sp)
    2080:	03010413          	addi	s0,sp,48
    2084:	fca42e23          	sw	a0,-36(s0)
        UBaseType_t uxQueue = configMAX_PRIORITIES;
    2088:	00700793          	li	a5,7
    208c:	fef42423          	sw	a5,-24(s0)
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
    2090:	fdc42503          	lw	a0,-36(s0)
    2094:	4c90b0ef          	jal	ra,dd5c <strlen>
    2098:	00050713          	mv	a4,a0
    209c:	00f00793          	li	a5,15
    20a0:	00e7fa63          	bgeu	a5,a4,20b4 <xTaskGetHandle+0x40>
    20a4:	30047073          	csrci	mstatus,8
    20a8:	00100073          	ebreak
    20ac:	00000013          	nop
    20b0:	ffdff06f          	j	20ac <xTaskGetHandle+0x38>

        vTaskSuspendAll();
    20b4:	9d9ff0ef          	jal	ra,1a8c <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
    20b8:	fe842783          	lw	a5,-24(s0)
    20bc:	fff78793          	addi	a5,a5,-1
    20c0:	fef42423          	sw	a5,-24(s0)
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
    20c4:	fe842703          	lw	a4,-24(s0)
    20c8:	00070793          	mv	a5,a4
    20cc:	00279793          	slli	a5,a5,0x2
    20d0:	00e787b3          	add	a5,a5,a4
    20d4:	00279793          	slli	a5,a5,0x2
    20d8:	00028737          	lui	a4,0x28
    20dc:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    20e0:	00e787b3          	add	a5,a5,a4
    20e4:	fdc42583          	lw	a1,-36(s0)
    20e8:	00078513          	mv	a0,a5
    20ec:	e09ff0ef          	jal	ra,1ef4 <prvSearchForNameWithinSingleList>
    20f0:	fea42623          	sw	a0,-20(s0)

                if( pxTCB != NULL )
    20f4:	fec42783          	lw	a5,-20(s0)
    20f8:	00079863          	bnez	a5,2108 <xTaskGetHandle+0x94>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    20fc:	fe842783          	lw	a5,-24(s0)
    2100:	fa079ce3          	bnez	a5,20b8 <xTaskGetHandle+0x44>
    2104:	0080006f          	j	210c <xTaskGetHandle+0x98>
                    break;
    2108:	00000013          	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
    210c:	fec42783          	lw	a5,-20(s0)
    2110:	00079e63          	bnez	a5,212c <xTaskGetHandle+0xb8>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
    2114:	000287b7          	lui	a5,0x28
    2118:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    211c:	fdc42583          	lw	a1,-36(s0)
    2120:	00078513          	mv	a0,a5
    2124:	dd1ff0ef          	jal	ra,1ef4 <prvSearchForNameWithinSingleList>
    2128:	fea42623          	sw	a0,-20(s0)
            }

            if( pxTCB == NULL )
    212c:	fec42783          	lw	a5,-20(s0)
    2130:	00079e63          	bnez	a5,214c <xTaskGetHandle+0xd8>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
    2134:	000287b7          	lui	a5,0x28
    2138:	d9c7a783          	lw	a5,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
    213c:	fdc42583          	lw	a1,-36(s0)
    2140:	00078513          	mv	a0,a5
    2144:	db1ff0ef          	jal	ra,1ef4 <prvSearchForNameWithinSingleList>
    2148:	fea42623          	sw	a0,-20(s0)
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
            {
                if( pxTCB == NULL )
    214c:	fec42783          	lw	a5,-20(s0)
    2150:	00079c63          	bnez	a5,2168 <xTaskGetHandle+0xf4>
                {
                    /* Search the suspended list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
    2154:	fdc42583          	lw	a1,-36(s0)
    2158:	000287b7          	lui	a5,0x28
    215c:	dcc78513          	addi	a0,a5,-564 # 27dcc <xSuspendedTaskList>
    2160:	d95ff0ef          	jal	ra,1ef4 <prvSearchForNameWithinSingleList>
    2164:	fea42623          	sw	a0,-20(s0)
            }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
            {
                if( pxTCB == NULL )
    2168:	fec42783          	lw	a5,-20(s0)
    216c:	00079c63          	bnez	a5,2184 <xTaskGetHandle+0x110>
                {
                    /* Search the deleted list. */
                    pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
    2170:	fdc42583          	lw	a1,-36(s0)
    2174:	000287b7          	lui	a5,0x28
    2178:	db478513          	addi	a0,a5,-588 # 27db4 <xTasksWaitingTermination>
    217c:	d79ff0ef          	jal	ra,1ef4 <prvSearchForNameWithinSingleList>
    2180:	fea42623          	sw	a0,-20(s0)
                }
            }
            #endif
        }
        ( void ) xTaskResumeAll();
    2184:	939ff0ef          	jal	ra,1abc <xTaskResumeAll>

        return pxTCB;
    2188:	fec42783          	lw	a5,-20(s0)
    }
    218c:	00078513          	mv	a0,a5
    2190:	02c12083          	lw	ra,44(sp)
    2194:	02812403          	lw	s0,40(sp)
    2198:	03010113          	addi	sp,sp,48
    219c:	00008067          	ret

000021a0 <uxTaskGetSystemState>:
#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                      const UBaseType_t uxArraySize,
                                      configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
    {
    21a0:	fd010113          	addi	sp,sp,-48
    21a4:	02112623          	sw	ra,44(sp)
    21a8:	02812423          	sw	s0,40(sp)
    21ac:	03010413          	addi	s0,sp,48
    21b0:	fca42e23          	sw	a0,-36(s0)
    21b4:	fcb42c23          	sw	a1,-40(s0)
    21b8:	fcc42a23          	sw	a2,-44(s0)
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
    21bc:	fe042423          	sw	zero,-24(s0)
    21c0:	00700793          	li	a5,7
    21c4:	fef42623          	sw	a5,-20(s0)

        vTaskSuspendAll();
    21c8:	8c5ff0ef          	jal	ra,1a8c <vTaskSuspendAll>
        {
            /* Is there a space in the array for each task in the system? */
            if( uxArraySize >= uxCurrentNumberOfTasks )
    21cc:	000287b7          	lui	a5,0x28
    21d0:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
    21d4:	fd842703          	lw	a4,-40(s0)
    21d8:	1af76063          	bltu	a4,a5,2378 <uxTaskGetSystemState+0x1d8>
            {
                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Ready state. */
                do
                {
                    uxQueue--;
    21dc:	fec42783          	lw	a5,-20(s0)
    21e0:	fff78793          	addi	a5,a5,-1
    21e4:	fef42623          	sw	a5,-20(s0)
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
    21e8:	fe842703          	lw	a4,-24(s0)
    21ec:	00070793          	mv	a5,a4
    21f0:	00379793          	slli	a5,a5,0x3
    21f4:	00e787b3          	add	a5,a5,a4
    21f8:	00279793          	slli	a5,a5,0x2
    21fc:	00078713          	mv	a4,a5
    2200:	fdc42783          	lw	a5,-36(s0)
    2204:	00e786b3          	add	a3,a5,a4
    2208:	fec42703          	lw	a4,-20(s0)
    220c:	00070793          	mv	a5,a4
    2210:	00279793          	slli	a5,a5,0x2
    2214:	00e787b3          	add	a5,a5,a4
    2218:	00279793          	slli	a5,a5,0x2
    221c:	00028737          	lui	a4,0x28
    2220:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    2224:	00e787b3          	add	a5,a5,a4
    2228:	00100613          	li	a2,1
    222c:	00078593          	mv	a1,a5
    2230:	00068513          	mv	a0,a3
    2234:	744010ef          	jal	ra,3978 <prvListTasksWithinSingleList>
    2238:	00050713          	mv	a4,a0
    223c:	fe842783          	lw	a5,-24(s0)
    2240:	00e787b3          	add	a5,a5,a4
    2244:	fef42423          	sw	a5,-24(s0)
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2248:	fec42783          	lw	a5,-20(s0)
    224c:	f80798e3          	bnez	a5,21dc <uxTaskGetSystemState+0x3c>

                /* Fill in an TaskStatus_t structure with information on each
                 * task in the Blocked state. */
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
    2250:	fe842703          	lw	a4,-24(s0)
    2254:	00070793          	mv	a5,a4
    2258:	00379793          	slli	a5,a5,0x3
    225c:	00e787b3          	add	a5,a5,a4
    2260:	00279793          	slli	a5,a5,0x2
    2264:	00078713          	mv	a4,a5
    2268:	fdc42783          	lw	a5,-36(s0)
    226c:	00e78733          	add	a4,a5,a4
    2270:	000287b7          	lui	a5,0x28
    2274:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    2278:	00200613          	li	a2,2
    227c:	00078593          	mv	a1,a5
    2280:	00070513          	mv	a0,a4
    2284:	6f4010ef          	jal	ra,3978 <prvListTasksWithinSingleList>
    2288:	00050713          	mv	a4,a0
    228c:	fe842783          	lw	a5,-24(s0)
    2290:	00e787b3          	add	a5,a5,a4
    2294:	fef42423          	sw	a5,-24(s0)
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
    2298:	fe842703          	lw	a4,-24(s0)
    229c:	00070793          	mv	a5,a4
    22a0:	00379793          	slli	a5,a5,0x3
    22a4:	00e787b3          	add	a5,a5,a4
    22a8:	00279793          	slli	a5,a5,0x2
    22ac:	00078713          	mv	a4,a5
    22b0:	fdc42783          	lw	a5,-36(s0)
    22b4:	00e78733          	add	a4,a5,a4
    22b8:	000287b7          	lui	a5,0x28
    22bc:	d9c7a783          	lw	a5,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
    22c0:	00200613          	li	a2,2
    22c4:	00078593          	mv	a1,a5
    22c8:	00070513          	mv	a0,a4
    22cc:	6ac010ef          	jal	ra,3978 <prvListTasksWithinSingleList>
    22d0:	00050713          	mv	a4,a0
    22d4:	fe842783          	lw	a5,-24(s0)
    22d8:	00e787b3          	add	a5,a5,a4
    22dc:	fef42423          	sw	a5,-24(s0)

                #if ( INCLUDE_vTaskDelete == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task that has been deleted but not yet cleaned up. */
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
    22e0:	fe842703          	lw	a4,-24(s0)
    22e4:	00070793          	mv	a5,a4
    22e8:	00379793          	slli	a5,a5,0x3
    22ec:	00e787b3          	add	a5,a5,a4
    22f0:	00279793          	slli	a5,a5,0x2
    22f4:	00078713          	mv	a4,a5
    22f8:	fdc42783          	lw	a5,-36(s0)
    22fc:	00e78733          	add	a4,a5,a4
    2300:	00400613          	li	a2,4
    2304:	000287b7          	lui	a5,0x28
    2308:	db478593          	addi	a1,a5,-588 # 27db4 <xTasksWaitingTermination>
    230c:	00070513          	mv	a0,a4
    2310:	668010ef          	jal	ra,3978 <prvListTasksWithinSingleList>
    2314:	00050713          	mv	a4,a0
    2318:	fe842783          	lw	a5,-24(s0)
    231c:	00e787b3          	add	a5,a5,a4
    2320:	fef42423          	sw	a5,-24(s0)

                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* Fill in an TaskStatus_t structure with information on
                     * each task in the Suspended state. */
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
    2324:	fe842703          	lw	a4,-24(s0)
    2328:	00070793          	mv	a5,a4
    232c:	00379793          	slli	a5,a5,0x3
    2330:	00e787b3          	add	a5,a5,a4
    2334:	00279793          	slli	a5,a5,0x2
    2338:	00078713          	mv	a4,a5
    233c:	fdc42783          	lw	a5,-36(s0)
    2340:	00e78733          	add	a4,a5,a4
    2344:	00300613          	li	a2,3
    2348:	000287b7          	lui	a5,0x28
    234c:	dcc78593          	addi	a1,a5,-564 # 27dcc <xSuspendedTaskList>
    2350:	00070513          	mv	a0,a4
    2354:	624010ef          	jal	ra,3978 <prvListTasksWithinSingleList>
    2358:	00050713          	mv	a4,a0
    235c:	fe842783          	lw	a5,-24(s0)
    2360:	00e787b3          	add	a5,a5,a4
    2364:	fef42423          	sw	a5,-24(s0)
                        #endif
                    }
                }
                #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
                {
                    if( pulTotalRunTime != NULL )
    2368:	fd442783          	lw	a5,-44(s0)
    236c:	00078663          	beqz	a5,2378 <uxTaskGetSystemState+0x1d8>
                    {
                        *pulTotalRunTime = 0;
    2370:	fd442783          	lw	a5,-44(s0)
    2374:	0007a023          	sw	zero,0(a5)
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        ( void ) xTaskResumeAll();
    2378:	f44ff0ef          	jal	ra,1abc <xTaskResumeAll>

        return uxTask;
    237c:	fe842783          	lw	a5,-24(s0)
    }
    2380:	00078513          	mv	a0,a5
    2384:	02c12083          	lw	ra,44(sp)
    2388:	02812403          	lw	s0,40(sp)
    238c:	03010113          	addi	sp,sp,48
    2390:	00008067          	ret

00002394 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
    2394:	fd010113          	addi	sp,sp,-48
    2398:	02112623          	sw	ra,44(sp)
    239c:	02812423          	sw	s0,40(sp)
    23a0:	03010413          	addi	s0,sp,48
    23a4:	fca42e23          	sw	a0,-36(s0)
    BaseType_t xYieldOccurred;

    /* Must not be called with the scheduler suspended as the implementation
     * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
    configASSERT( uxSchedulerSuspended == 0 );
    23a8:	000287b7          	lui	a5,0x28
    23ac:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    23b0:	00078a63          	beqz	a5,23c4 <xTaskCatchUpTicks+0x30>
    23b4:	30047073          	csrci	mstatus,8
    23b8:	00100073          	ebreak
    23bc:	00000013          	nop
    23c0:	ffdff06f          	j	23bc <xTaskCatchUpTicks+0x28>

    /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
     * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
    vTaskSuspendAll();
    23c4:	ec8ff0ef          	jal	ra,1a8c <vTaskSuspendAll>

    /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
    taskENTER_CRITICAL();
    23c8:	30047073          	csrci	mstatus,8
    23cc:	000267b7          	lui	a5,0x26
    23d0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    23d4:	00178713          	addi	a4,a5,1
    23d8:	000267b7          	lui	a5,0x26
    23dc:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        xPendedTicks += xTicksToCatchUp;
    23e0:	000287b7          	lui	a5,0x28
    23e4:	df07a703          	lw	a4,-528(a5) # 27df0 <xPendedTicks>
    23e8:	fdc42783          	lw	a5,-36(s0)
    23ec:	00f70733          	add	a4,a4,a5
    23f0:	000287b7          	lui	a5,0x28
    23f4:	dee7a823          	sw	a4,-528(a5) # 27df0 <xPendedTicks>
    }
    taskEXIT_CRITICAL();
    23f8:	000267b7          	lui	a5,0x26
    23fc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    2400:	fff78713          	addi	a4,a5,-1
    2404:	000267b7          	lui	a5,0x26
    2408:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    240c:	000267b7          	lui	a5,0x26
    2410:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    2414:	00079463          	bnez	a5,241c <xTaskCatchUpTicks+0x88>
    2418:	30046073          	csrsi	mstatus,8
    xYieldOccurred = xTaskResumeAll();
    241c:	ea0ff0ef          	jal	ra,1abc <xTaskResumeAll>
    2420:	fea42623          	sw	a0,-20(s0)

    return xYieldOccurred;
    2424:	fec42783          	lw	a5,-20(s0)
}
    2428:	00078513          	mv	a0,a5
    242c:	02c12083          	lw	ra,44(sp)
    2430:	02812403          	lw	s0,40(sp)
    2434:	03010113          	addi	sp,sp,48
    2438:	00008067          	ret

0000243c <xTaskAbortDelay>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskAbortDelay == 1 )

    BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
    {
    243c:	fd010113          	addi	sp,sp,-48
    2440:	02112623          	sw	ra,44(sp)
    2444:	02812423          	sw	s0,40(sp)
    2448:	03010413          	addi	s0,sp,48
    244c:	fca42e23          	sw	a0,-36(s0)
        TCB_t * pxTCB = xTask;
    2450:	fdc42783          	lw	a5,-36(s0)
    2454:	fef42423          	sw	a5,-24(s0)
        BaseType_t xReturn;

        configASSERT( pxTCB );
    2458:	fe842783          	lw	a5,-24(s0)
    245c:	00079a63          	bnez	a5,2470 <xTaskAbortDelay+0x34>
    2460:	30047073          	csrci	mstatus,8
    2464:	00100073          	ebreak
    2468:	00000013          	nop
    246c:	ffdff06f          	j	2468 <xTaskAbortDelay+0x2c>

        vTaskSuspendAll();
    2470:	e1cff0ef          	jal	ra,1a8c <vTaskSuspendAll>
        {
            /* A task can only be prematurely removed from the Blocked state if
             * it is actually in the Blocked state. */
            if( eTaskGetState( xTask ) == eBlocked )
    2474:	fdc42503          	lw	a0,-36(s0)
    2478:	955fe0ef          	jal	ra,dcc <eTaskGetState>
    247c:	00050713          	mv	a4,a0
    2480:	00200793          	li	a5,2
    2484:	1af71863          	bne	a4,a5,2634 <xTaskAbortDelay+0x1f8>
            {
                xReturn = pdPASS;
    2488:	00100793          	li	a5,1
    248c:	fef42223          	sw	a5,-28(s0)

                /* Remove the reference to the task from the blocked list.  An
                 * interrupt won't touch the xStateListItem because the
                 * scheduler is suspended. */
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    2490:	fe842783          	lw	a5,-24(s0)
    2494:	00478793          	addi	a5,a5,4
    2498:	00078513          	mv	a0,a5
    249c:	1cc070ef          	jal	ra,9668 <uxListRemove>

                /* Is the task waiting on an event also?  If so remove it from
                 * the event list too.  Interrupts can touch the event list item,
                 * even though the scheduler is suspended, so a critical section
                 * is used. */
                taskENTER_CRITICAL();
    24a0:	30047073          	csrci	mstatus,8
    24a4:	000267b7          	lui	a5,0x26
    24a8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    24ac:	00178713          	addi	a4,a5,1
    24b0:	000267b7          	lui	a5,0x26
    24b4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
                {
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    24b8:	fe842783          	lw	a5,-24(s0)
    24bc:	0287a783          	lw	a5,40(a5)
    24c0:	02078063          	beqz	a5,24e0 <xTaskAbortDelay+0xa4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    24c4:	fe842783          	lw	a5,-24(s0)
    24c8:	01878793          	addi	a5,a5,24
    24cc:	00078513          	mv	a0,a5
    24d0:	198070ef          	jal	ra,9668 <uxListRemove>

                        /* This lets the task know it was forcibly removed from the
                         * blocked state so it should not re-evaluate its block time and
                         * then block again. */
                        pxTCB->ucDelayAborted = pdTRUE;
    24d4:	fe842783          	lw	a5,-24(s0)
    24d8:	00100713          	li	a4,1
    24dc:	58e782a3          	sb	a4,1413(a5)
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
    24e0:	000267b7          	lui	a5,0x26
    24e4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    24e8:	fff78713          	addi	a4,a5,-1
    24ec:	000267b7          	lui	a5,0x26
    24f0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    24f4:	000267b7          	lui	a5,0x26
    24f8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    24fc:	00079463          	bnez	a5,2504 <xTaskAbortDelay+0xc8>
    2500:	30046073          	csrsi	mstatus,8

                /* Place the unblocked task into the appropriate ready list. */
                prvAddTaskToReadyList( pxTCB );
    2504:	fe842783          	lw	a5,-24(s0)
    2508:	02c7a783          	lw	a5,44(a5)
    250c:	00100713          	li	a4,1
    2510:	00f71733          	sll	a4,a4,a5
    2514:	000287b7          	lui	a5,0x28
    2518:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    251c:	00f76733          	or	a4,a4,a5
    2520:	000287b7          	lui	a5,0x28
    2524:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    2528:	fe842783          	lw	a5,-24(s0)
    252c:	02c7a703          	lw	a4,44(a5)
    2530:	000287b7          	lui	a5,0x28
    2534:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    2538:	00070793          	mv	a5,a4
    253c:	00279793          	slli	a5,a5,0x2
    2540:	00e787b3          	add	a5,a5,a4
    2544:	00279793          	slli	a5,a5,0x2
    2548:	00f687b3          	add	a5,a3,a5
    254c:	0047a783          	lw	a5,4(a5)
    2550:	fef42623          	sw	a5,-20(s0)
    2554:	fe842783          	lw	a5,-24(s0)
    2558:	fec42703          	lw	a4,-20(s0)
    255c:	00e7a423          	sw	a4,8(a5)
    2560:	fec42783          	lw	a5,-20(s0)
    2564:	0087a703          	lw	a4,8(a5)
    2568:	fe842783          	lw	a5,-24(s0)
    256c:	00e7a623          	sw	a4,12(a5)
    2570:	fec42783          	lw	a5,-20(s0)
    2574:	0087a783          	lw	a5,8(a5)
    2578:	fe842703          	lw	a4,-24(s0)
    257c:	00470713          	addi	a4,a4,4
    2580:	00e7a223          	sw	a4,4(a5)
    2584:	fe842783          	lw	a5,-24(s0)
    2588:	00478713          	addi	a4,a5,4
    258c:	fec42783          	lw	a5,-20(s0)
    2590:	00e7a423          	sw	a4,8(a5)
    2594:	fe842783          	lw	a5,-24(s0)
    2598:	02c7a703          	lw	a4,44(a5)
    259c:	00070793          	mv	a5,a4
    25a0:	00279793          	slli	a5,a5,0x2
    25a4:	00e787b3          	add	a5,a5,a4
    25a8:	00279793          	slli	a5,a5,0x2
    25ac:	00028737          	lui	a4,0x28
    25b0:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    25b4:	00e78733          	add	a4,a5,a4
    25b8:	fe842783          	lw	a5,-24(s0)
    25bc:	00e7aa23          	sw	a4,20(a5)
    25c0:	fe842783          	lw	a5,-24(s0)
    25c4:	02c7a703          	lw	a4,44(a5)
    25c8:	000287b7          	lui	a5,0x28
    25cc:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    25d0:	00070793          	mv	a5,a4
    25d4:	00279793          	slli	a5,a5,0x2
    25d8:	00e787b3          	add	a5,a5,a4
    25dc:	00279793          	slli	a5,a5,0x2
    25e0:	00f687b3          	add	a5,a3,a5
    25e4:	0007a783          	lw	a5,0(a5)
    25e8:	00178693          	addi	a3,a5,1
    25ec:	000287b7          	lui	a5,0x28
    25f0:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    25f4:	00070793          	mv	a5,a4
    25f8:	00279793          	slli	a5,a5,0x2
    25fc:	00e787b3          	add	a5,a5,a4
    2600:	00279793          	slli	a5,a5,0x2
    2604:	00f607b3          	add	a5,a2,a5
    2608:	00d7a023          	sw	a3,0(a5)
                #if ( configUSE_PREEMPTION == 1 )
                {
                    /* Preemption is on, but a context switch should only be
                     * performed if the unblocked task has a priority that is
                     * higher than the currently executing task. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    260c:	fe842783          	lw	a5,-24(s0)
    2610:	02c7a703          	lw	a4,44(a5)
    2614:	000287b7          	lui	a5,0x28
    2618:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    261c:	02c7a783          	lw	a5,44(a5)
    2620:	00e7fc63          	bgeu	a5,a4,2638 <xTaskAbortDelay+0x1fc>
                    {
                        /* Pend the yield to be performed when the scheduler
                         * is unsuspended. */
                        xYieldPending = pdTRUE;
    2624:	000287b7          	lui	a5,0x28
    2628:	00100713          	li	a4,1
    262c:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
    2630:	0080006f          	j	2638 <xTaskAbortDelay+0x1fc>
                }
                #endif /* configUSE_PREEMPTION */
            }
            else
            {
                xReturn = pdFAIL;
    2634:	fe042223          	sw	zero,-28(s0)
            }
        }
        ( void ) xTaskResumeAll();
    2638:	c84ff0ef          	jal	ra,1abc <xTaskResumeAll>

        return xReturn;
    263c:	fe442783          	lw	a5,-28(s0)
    }
    2640:	00078513          	mv	a0,a5
    2644:	02c12083          	lw	ra,44(sp)
    2648:	02812403          	lw	s0,40(sp)
    264c:	03010113          	addi	sp,sp,48
    2650:	00008067          	ret

00002654 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    2654:	fd010113          	addi	sp,sp,-48
    2658:	02112623          	sw	ra,44(sp)
    265c:	02812423          	sw	s0,40(sp)
    2660:	03010413          	addi	s0,sp,48
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
    2664:	fc042823          	sw	zero,-48(s0)
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2668:	000287b7          	lui	a5,0x28
    266c:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    2670:	36079c63          	bnez	a5,29e8 <xTaskIncrementTick+0x394>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    2674:	000287b7          	lui	a5,0x28
    2678:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    267c:	00178793          	addi	a5,a5,1
    2680:	fcf42a23          	sw	a5,-44(s0)

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
    2684:	000287b7          	lui	a5,0x28
    2688:	fd442703          	lw	a4,-44(s0)
    268c:	dee7a223          	sw	a4,-540(a5) # 27de4 <xTickCount>

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    2690:	fd442783          	lw	a5,-44(s0)
    2694:	06079263          	bnez	a5,26f8 <xTaskIncrementTick+0xa4>
        {
            taskSWITCH_DELAYED_LISTS();
    2698:	000287b7          	lui	a5,0x28
    269c:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    26a0:	0007a783          	lw	a5,0(a5)
    26a4:	00078a63          	beqz	a5,26b8 <xTaskIncrementTick+0x64>
    26a8:	30047073          	csrci	mstatus,8
    26ac:	00100073          	ebreak
    26b0:	00000013          	nop
    26b4:	ffdff06f          	j	26b0 <xTaskIncrementTick+0x5c>
    26b8:	000287b7          	lui	a5,0x28
    26bc:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    26c0:	fcf42c23          	sw	a5,-40(s0)
    26c4:	000287b7          	lui	a5,0x28
    26c8:	d9c7a703          	lw	a4,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
    26cc:	000287b7          	lui	a5,0x28
    26d0:	d8e7ac23          	sw	a4,-616(a5) # 27d98 <pxDelayedTaskList>
    26d4:	000287b7          	lui	a5,0x28
    26d8:	fd842703          	lw	a4,-40(s0)
    26dc:	d8e7ae23          	sw	a4,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
    26e0:	000287b7          	lui	a5,0x28
    26e4:	df87a783          	lw	a5,-520(a5) # 27df8 <xNumOfOverflows>
    26e8:	00178713          	addi	a4,a5,1
    26ec:	000287b7          	lui	a5,0x28
    26f0:	dee7ac23          	sw	a4,-520(a5) # 27df8 <xNumOfOverflows>
    26f4:	478010ef          	jal	ra,3b6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
    26f8:	000287b7          	lui	a5,0x28
    26fc:	e007a783          	lw	a5,-512(a5) # 27e00 <xNextTaskUnblockTime>
    2700:	fd442703          	lw	a4,-44(s0)
    2704:	28f76063          	bltu	a4,a5,2984 <xTaskIncrementTick+0x330>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2708:	000287b7          	lui	a5,0x28
    270c:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    2710:	0007a783          	lw	a5,0(a5)
    2714:	00079a63          	bnez	a5,2728 <xTaskIncrementTick+0xd4>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2718:	000287b7          	lui	a5,0x28
    271c:	fff00713          	li	a4,-1
    2720:	e0e7a023          	sw	a4,-512(a5) # 27e00 <xNextTaskUnblockTime>
                    break;
    2724:	2600006f          	j	2984 <xTaskIncrementTick+0x330>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2728:	000287b7          	lui	a5,0x28
    272c:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    2730:	00c7a783          	lw	a5,12(a5)
    2734:	00c7a783          	lw	a5,12(a5)
    2738:	fcf42e23          	sw	a5,-36(s0)
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    273c:	fdc42783          	lw	a5,-36(s0)
    2740:	0047a783          	lw	a5,4(a5)
    2744:	fef42023          	sw	a5,-32(s0)

                    if( xConstTickCount < xItemValue )
    2748:	fd442703          	lw	a4,-44(s0)
    274c:	fe042783          	lw	a5,-32(s0)
    2750:	00f77a63          	bgeu	a4,a5,2764 <xTaskIncrementTick+0x110>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
    2754:	000287b7          	lui	a5,0x28
    2758:	fe042703          	lw	a4,-32(s0)
    275c:	e0e7a023          	sw	a4,-512(a5) # 27e00 <xNextTaskUnblockTime>
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
    2760:	2240006f          	j	2984 <xTaskIncrementTick+0x330>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    2764:	fdc42783          	lw	a5,-36(s0)
    2768:	0147a783          	lw	a5,20(a5)
    276c:	fef42223          	sw	a5,-28(s0)
    2770:	fdc42783          	lw	a5,-36(s0)
    2774:	0087a783          	lw	a5,8(a5)
    2778:	fdc42703          	lw	a4,-36(s0)
    277c:	00c72703          	lw	a4,12(a4)
    2780:	00e7a423          	sw	a4,8(a5)
    2784:	fdc42783          	lw	a5,-36(s0)
    2788:	00c7a783          	lw	a5,12(a5)
    278c:	fdc42703          	lw	a4,-36(s0)
    2790:	00872703          	lw	a4,8(a4)
    2794:	00e7a223          	sw	a4,4(a5)
    2798:	fe442783          	lw	a5,-28(s0)
    279c:	0047a703          	lw	a4,4(a5)
    27a0:	fdc42783          	lw	a5,-36(s0)
    27a4:	00478793          	addi	a5,a5,4
    27a8:	00f71a63          	bne	a4,a5,27bc <xTaskIncrementTick+0x168>
    27ac:	fdc42783          	lw	a5,-36(s0)
    27b0:	00c7a703          	lw	a4,12(a5)
    27b4:	fe442783          	lw	a5,-28(s0)
    27b8:	00e7a223          	sw	a4,4(a5)
    27bc:	fdc42783          	lw	a5,-36(s0)
    27c0:	0007aa23          	sw	zero,20(a5)
    27c4:	fe442783          	lw	a5,-28(s0)
    27c8:	0007a783          	lw	a5,0(a5)
    27cc:	fff78713          	addi	a4,a5,-1
    27d0:	fe442783          	lw	a5,-28(s0)
    27d4:	00e7a023          	sw	a4,0(a5)

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    27d8:	fdc42783          	lw	a5,-36(s0)
    27dc:	0287a783          	lw	a5,40(a5)
    27e0:	06078c63          	beqz	a5,2858 <xTaskIncrementTick+0x204>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
    27e4:	fdc42783          	lw	a5,-36(s0)
    27e8:	0287a783          	lw	a5,40(a5)
    27ec:	fef42423          	sw	a5,-24(s0)
    27f0:	fdc42783          	lw	a5,-36(s0)
    27f4:	01c7a783          	lw	a5,28(a5)
    27f8:	fdc42703          	lw	a4,-36(s0)
    27fc:	02072703          	lw	a4,32(a4)
    2800:	00e7a423          	sw	a4,8(a5)
    2804:	fdc42783          	lw	a5,-36(s0)
    2808:	0207a783          	lw	a5,32(a5)
    280c:	fdc42703          	lw	a4,-36(s0)
    2810:	01c72703          	lw	a4,28(a4)
    2814:	00e7a223          	sw	a4,4(a5)
    2818:	fe842783          	lw	a5,-24(s0)
    281c:	0047a703          	lw	a4,4(a5)
    2820:	fdc42783          	lw	a5,-36(s0)
    2824:	01878793          	addi	a5,a5,24
    2828:	00f71a63          	bne	a4,a5,283c <xTaskIncrementTick+0x1e8>
    282c:	fdc42783          	lw	a5,-36(s0)
    2830:	0207a703          	lw	a4,32(a5)
    2834:	fe842783          	lw	a5,-24(s0)
    2838:	00e7a223          	sw	a4,4(a5)
    283c:	fdc42783          	lw	a5,-36(s0)
    2840:	0207a423          	sw	zero,40(a5)
    2844:	fe842783          	lw	a5,-24(s0)
    2848:	0007a783          	lw	a5,0(a5)
    284c:	fff78713          	addi	a4,a5,-1
    2850:	fe842783          	lw	a5,-24(s0)
    2854:	00e7a023          	sw	a4,0(a5)
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
    2858:	fdc42783          	lw	a5,-36(s0)
    285c:	02c7a783          	lw	a5,44(a5)
    2860:	00100713          	li	a4,1
    2864:	00f71733          	sll	a4,a4,a5
    2868:	000287b7          	lui	a5,0x28
    286c:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    2870:	00f76733          	or	a4,a4,a5
    2874:	000287b7          	lui	a5,0x28
    2878:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    287c:	fdc42783          	lw	a5,-36(s0)
    2880:	02c7a703          	lw	a4,44(a5)
    2884:	000287b7          	lui	a5,0x28
    2888:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    288c:	00070793          	mv	a5,a4
    2890:	00279793          	slli	a5,a5,0x2
    2894:	00e787b3          	add	a5,a5,a4
    2898:	00279793          	slli	a5,a5,0x2
    289c:	00f687b3          	add	a5,a3,a5
    28a0:	0047a783          	lw	a5,4(a5)
    28a4:	fef42623          	sw	a5,-20(s0)
    28a8:	fdc42783          	lw	a5,-36(s0)
    28ac:	fec42703          	lw	a4,-20(s0)
    28b0:	00e7a423          	sw	a4,8(a5)
    28b4:	fec42783          	lw	a5,-20(s0)
    28b8:	0087a703          	lw	a4,8(a5)
    28bc:	fdc42783          	lw	a5,-36(s0)
    28c0:	00e7a623          	sw	a4,12(a5)
    28c4:	fec42783          	lw	a5,-20(s0)
    28c8:	0087a783          	lw	a5,8(a5)
    28cc:	fdc42703          	lw	a4,-36(s0)
    28d0:	00470713          	addi	a4,a4,4
    28d4:	00e7a223          	sw	a4,4(a5)
    28d8:	fdc42783          	lw	a5,-36(s0)
    28dc:	00478713          	addi	a4,a5,4
    28e0:	fec42783          	lw	a5,-20(s0)
    28e4:	00e7a423          	sw	a4,8(a5)
    28e8:	fdc42783          	lw	a5,-36(s0)
    28ec:	02c7a703          	lw	a4,44(a5)
    28f0:	00070793          	mv	a5,a4
    28f4:	00279793          	slli	a5,a5,0x2
    28f8:	00e787b3          	add	a5,a5,a4
    28fc:	00279793          	slli	a5,a5,0x2
    2900:	00028737          	lui	a4,0x28
    2904:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    2908:	00e78733          	add	a4,a5,a4
    290c:	fdc42783          	lw	a5,-36(s0)
    2910:	00e7aa23          	sw	a4,20(a5)
    2914:	fdc42783          	lw	a5,-36(s0)
    2918:	02c7a703          	lw	a4,44(a5)
    291c:	000287b7          	lui	a5,0x28
    2920:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    2924:	00070793          	mv	a5,a4
    2928:	00279793          	slli	a5,a5,0x2
    292c:	00e787b3          	add	a5,a5,a4
    2930:	00279793          	slli	a5,a5,0x2
    2934:	00f687b3          	add	a5,a3,a5
    2938:	0007a783          	lw	a5,0(a5)
    293c:	00178693          	addi	a3,a5,1
    2940:	000287b7          	lui	a5,0x28
    2944:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    2948:	00070793          	mv	a5,a4
    294c:	00279793          	slli	a5,a5,0x2
    2950:	00e787b3          	add	a5,a5,a4
    2954:	00279793          	slli	a5,a5,0x2
    2958:	00f607b3          	add	a5,a2,a5
    295c:	00d7a023          	sw	a3,0(a5)
                    {
                        /* Preemption is on, but a context switch should
                         * only be performed if the unblocked task has a
                         * priority that is equal to or higher than the
                         * currently executing task. */
                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2960:	fdc42783          	lw	a5,-36(s0)
    2964:	02c7a703          	lw	a4,44(a5)
    2968:	000287b7          	lui	a5,0x28
    296c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2970:	02c7a783          	lw	a5,44(a5)
    2974:	d8f76ae3          	bltu	a4,a5,2708 <xTaskIncrementTick+0xb4>
                        {
                            xSwitchRequired = pdTRUE;
    2978:	00100793          	li	a5,1
    297c:	fcf42823          	sw	a5,-48(s0)
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2980:	d89ff06f          	j	2708 <xTaskIncrementTick+0xb4>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    2984:	000287b7          	lui	a5,0x28
    2988:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    298c:	02c7a703          	lw	a4,44(a5)
    2990:	000287b7          	lui	a5,0x28
    2994:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    2998:	00070793          	mv	a5,a4
    299c:	00279793          	slli	a5,a5,0x2
    29a0:	00e787b3          	add	a5,a5,a4
    29a4:	00279793          	slli	a5,a5,0x2
    29a8:	00f687b3          	add	a5,a3,a5
    29ac:	0007a703          	lw	a4,0(a5)
    29b0:	00100793          	li	a5,1
    29b4:	00e7f663          	bgeu	a5,a4,29c0 <xTaskIncrementTick+0x36c>
            {
                xSwitchRequired = pdTRUE;
    29b8:	00100793          	li	a5,1
    29bc:	fcf42823          	sw	a5,-48(s0)

        #if ( configUSE_TICK_HOOK == 1 )
        {
            /* Guard against the tick hook being called when the pended tick
             * count is being unwound (when the scheduler is being unlocked). */
            if( xPendedTicks == ( TickType_t ) 0 )
    29c0:	000287b7          	lui	a5,0x28
    29c4:	df07a783          	lw	a5,-528(a5) # 27df0 <xPendedTicks>
    29c8:	00079463          	bnez	a5,29d0 <xTaskIncrementTick+0x37c>
            {
                vApplicationTickHook();
    29cc:	010040ef          	jal	ra,69dc <vApplicationTickHook>
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
    29d0:	000287b7          	lui	a5,0x28
    29d4:	df47a783          	lw	a5,-524(a5) # 27df4 <xYieldPending>
    29d8:	02078463          	beqz	a5,2a00 <xTaskIncrementTick+0x3ac>
            {
                xSwitchRequired = pdTRUE;
    29dc:	00100793          	li	a5,1
    29e0:	fcf42823          	sw	a5,-48(s0)
    29e4:	01c0006f          	j	2a00 <xTaskIncrementTick+0x3ac>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
    29e8:	000287b7          	lui	a5,0x28
    29ec:	df07a783          	lw	a5,-528(a5) # 27df0 <xPendedTicks>
    29f0:	00178713          	addi	a4,a5,1
    29f4:	000287b7          	lui	a5,0x28
    29f8:	dee7a823          	sw	a4,-528(a5) # 27df0 <xPendedTicks>

        /* The tick hook gets called at regular intervals, even if the
         * scheduler is locked. */
        #if ( configUSE_TICK_HOOK == 1 )
        {
            vApplicationTickHook();
    29fc:	7e1030ef          	jal	ra,69dc <vApplicationTickHook>
        }
        #endif
    }

    return xSwitchRequired;
    2a00:	fd042783          	lw	a5,-48(s0)
}
    2a04:	00078513          	mv	a0,a5
    2a08:	02c12083          	lw	ra,44(sp)
    2a0c:	02812403          	lw	s0,40(sp)
    2a10:	03010113          	addi	sp,sp,48
    2a14:	00008067          	ret

00002a18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2a18:	fe010113          	addi	sp,sp,-32
    2a1c:	00112e23          	sw	ra,28(sp)
    2a20:	00812c23          	sw	s0,24(sp)
    2a24:	02010413          	addi	s0,sp,32
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2a28:	000287b7          	lui	a5,0x28
    2a2c:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    2a30:	00078a63          	beqz	a5,2a44 <vTaskSwitchContext+0x2c>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
    2a34:	000287b7          	lui	a5,0x28
    2a38:	00100713          	li	a4,1
    2a3c:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
    2a40:	1400006f          	j	2b80 <vTaskSwitchContext+0x168>
        xYieldPending = pdFALSE;
    2a44:	000287b7          	lui	a5,0x28
    2a48:	de07aa23          	sw	zero,-524(a5) # 27df4 <xYieldPending>
        taskCHECK_FOR_STACK_OVERFLOW();
    2a4c:	000287b7          	lui	a5,0x28
    2a50:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2a54:	0007a703          	lw	a4,0(a5)
    2a58:	000287b7          	lui	a5,0x28
    2a5c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2a60:	0307a783          	lw	a5,48(a5)
    2a64:	02e7e263          	bltu	a5,a4,2a88 <vTaskSwitchContext+0x70>
    2a68:	000287b7          	lui	a5,0x28
    2a6c:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    2a70:	000287b7          	lui	a5,0x28
    2a74:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2a78:	03478793          	addi	a5,a5,52
    2a7c:	00078593          	mv	a1,a5
    2a80:	00070513          	mv	a0,a4
    2a84:	7c5030ef          	jal	ra,6a48 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2a88:	000287b7          	lui	a5,0x28
    2a8c:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    2a90:	00078513          	mv	a0,a5
    2a94:	4901b0ef          	jal	ra,1df24 <__clzsi2>
    2a98:	00050793          	mv	a5,a0
    2a9c:	00078713          	mv	a4,a5
    2aa0:	01f00793          	li	a5,31
    2aa4:	40e787b3          	sub	a5,a5,a4
    2aa8:	fef42423          	sw	a5,-24(s0)
    2aac:	000287b7          	lui	a5,0x28
    2ab0:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    2ab4:	fe842703          	lw	a4,-24(s0)
    2ab8:	00070793          	mv	a5,a4
    2abc:	00279793          	slli	a5,a5,0x2
    2ac0:	00e787b3          	add	a5,a5,a4
    2ac4:	00279793          	slli	a5,a5,0x2
    2ac8:	00f687b3          	add	a5,a3,a5
    2acc:	0007a783          	lw	a5,0(a5)
    2ad0:	00079a63          	bnez	a5,2ae4 <vTaskSwitchContext+0xcc>
    2ad4:	30047073          	csrci	mstatus,8
    2ad8:	00100073          	ebreak
    2adc:	00000013          	nop
    2ae0:	ffdff06f          	j	2adc <vTaskSwitchContext+0xc4>
    2ae4:	fe842703          	lw	a4,-24(s0)
    2ae8:	00070793          	mv	a5,a4
    2aec:	00279793          	slli	a5,a5,0x2
    2af0:	00e787b3          	add	a5,a5,a4
    2af4:	00279793          	slli	a5,a5,0x2
    2af8:	00028737          	lui	a4,0x28
    2afc:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    2b00:	00e787b3          	add	a5,a5,a4
    2b04:	fef42623          	sw	a5,-20(s0)
    2b08:	fec42783          	lw	a5,-20(s0)
    2b0c:	0047a783          	lw	a5,4(a5)
    2b10:	0047a703          	lw	a4,4(a5)
    2b14:	fec42783          	lw	a5,-20(s0)
    2b18:	00e7a223          	sw	a4,4(a5)
    2b1c:	fec42783          	lw	a5,-20(s0)
    2b20:	0047a703          	lw	a4,4(a5)
    2b24:	fec42783          	lw	a5,-20(s0)
    2b28:	00878793          	addi	a5,a5,8
    2b2c:	00f71c63          	bne	a4,a5,2b44 <vTaskSwitchContext+0x12c>
    2b30:	fec42783          	lw	a5,-20(s0)
    2b34:	0047a783          	lw	a5,4(a5)
    2b38:	0047a703          	lw	a4,4(a5)
    2b3c:	fec42783          	lw	a5,-20(s0)
    2b40:	00e7a223          	sw	a4,4(a5)
    2b44:	fec42783          	lw	a5,-20(s0)
    2b48:	0047a783          	lw	a5,4(a5)
    2b4c:	00c7a703          	lw	a4,12(a5)
    2b50:	000287b7          	lui	a5,0x28
    2b54:	c4e7a823          	sw	a4,-944(a5) # 27c50 <pxCurrentTCB>
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
    2b58:	000287b7          	lui	a5,0x28
    2b5c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2b60:	05878793          	addi	a5,a5,88
    2b64:	00078513          	mv	a0,a5
    2b68:	64d030ef          	jal	ra,69b4 <alt_set_thread_pointer>
    2b6c:	000287b7          	lui	a5,0x28
    2b70:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2b74:	15878713          	addi	a4,a5,344
    2b78:	000267b7          	lui	a5,0x26
    2b7c:	02e7ae23          	sw	a4,60(a5) # 2603c <_impure_ptr>
}
    2b80:	00000013          	nop
    2b84:	01c12083          	lw	ra,28(sp)
    2b88:	01812403          	lw	s0,24(sp)
    2b8c:	02010113          	addi	sp,sp,32
    2b90:	00008067          	ret

00002b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
    2b94:	fe010113          	addi	sp,sp,-32
    2b98:	00112e23          	sw	ra,28(sp)
    2b9c:	00812c23          	sw	s0,24(sp)
    2ba0:	02010413          	addi	s0,sp,32
    2ba4:	fea42623          	sw	a0,-20(s0)
    2ba8:	feb42423          	sw	a1,-24(s0)
    configASSERT( pxEventList );
    2bac:	fec42783          	lw	a5,-20(s0)
    2bb0:	00079a63          	bnez	a5,2bc4 <vTaskPlaceOnEventList+0x30>
    2bb4:	30047073          	csrci	mstatus,8
    2bb8:	00100073          	ebreak
    2bbc:	00000013          	nop
    2bc0:	ffdff06f          	j	2bbc <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2bc4:	000287b7          	lui	a5,0x28
    2bc8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2bcc:	01878793          	addi	a5,a5,24
    2bd0:	00078593          	mv	a1,a5
    2bd4:	fec42503          	lw	a0,-20(s0)
    2bd8:	1bd060ef          	jal	ra,9594 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2bdc:	00100593          	li	a1,1
    2be0:	fe842503          	lw	a0,-24(s0)
    2be4:	079020ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>
}
    2be8:	00000013          	nop
    2bec:	01c12083          	lw	ra,28(sp)
    2bf0:	01812403          	lw	s0,24(sp)
    2bf4:	02010113          	addi	sp,sp,32
    2bf8:	00008067          	ret

00002bfc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
    2bfc:	fd010113          	addi	sp,sp,-48
    2c00:	02112623          	sw	ra,44(sp)
    2c04:	02812423          	sw	s0,40(sp)
    2c08:	03010413          	addi	s0,sp,48
    2c0c:	fca42e23          	sw	a0,-36(s0)
    2c10:	fcb42c23          	sw	a1,-40(s0)
    2c14:	fcc42a23          	sw	a2,-44(s0)
    configASSERT( pxEventList );
    2c18:	fdc42783          	lw	a5,-36(s0)
    2c1c:	00079a63          	bnez	a5,2c30 <vTaskPlaceOnUnorderedEventList+0x34>
    2c20:	30047073          	csrci	mstatus,8
    2c24:	00100073          	ebreak
    2c28:	00000013          	nop
    2c2c:	ffdff06f          	j	2c28 <vTaskPlaceOnUnorderedEventList+0x2c>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
    2c30:	000287b7          	lui	a5,0x28
    2c34:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    2c38:	00079a63          	bnez	a5,2c4c <vTaskPlaceOnUnorderedEventList+0x50>
    2c3c:	30047073          	csrci	mstatus,8
    2c40:	00100073          	ebreak
    2c44:	00000013          	nop
    2c48:	ffdff06f          	j	2c44 <vTaskPlaceOnUnorderedEventList+0x48>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    2c4c:	000287b7          	lui	a5,0x28
    2c50:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2c54:	fd842683          	lw	a3,-40(s0)
    2c58:	80000737          	lui	a4,0x80000
    2c5c:	00e6e733          	or	a4,a3,a4
    2c60:	00e7ac23          	sw	a4,24(a5)
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2c64:	fdc42783          	lw	a5,-36(s0)
    2c68:	0047a783          	lw	a5,4(a5)
    2c6c:	fef42623          	sw	a5,-20(s0)
    2c70:	000287b7          	lui	a5,0x28
    2c74:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2c78:	fec42703          	lw	a4,-20(s0)
    2c7c:	00e7ae23          	sw	a4,28(a5)
    2c80:	000287b7          	lui	a5,0x28
    2c84:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2c88:	fec42703          	lw	a4,-20(s0)
    2c8c:	00872703          	lw	a4,8(a4) # 80000008 <__alt_data_end+0x7ffc0008>
    2c90:	02e7a023          	sw	a4,32(a5)
    2c94:	000287b7          	lui	a5,0x28
    2c98:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    2c9c:	fec42783          	lw	a5,-20(s0)
    2ca0:	0087a783          	lw	a5,8(a5)
    2ca4:	01870713          	addi	a4,a4,24
    2ca8:	00e7a223          	sw	a4,4(a5)
    2cac:	000287b7          	lui	a5,0x28
    2cb0:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2cb4:	01878713          	addi	a4,a5,24
    2cb8:	fec42783          	lw	a5,-20(s0)
    2cbc:	00e7a423          	sw	a4,8(a5)
    2cc0:	000287b7          	lui	a5,0x28
    2cc4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2cc8:	fdc42703          	lw	a4,-36(s0)
    2ccc:	02e7a423          	sw	a4,40(a5)
    2cd0:	fdc42783          	lw	a5,-36(s0)
    2cd4:	0007a783          	lw	a5,0(a5)
    2cd8:	00178713          	addi	a4,a5,1
    2cdc:	fdc42783          	lw	a5,-36(s0)
    2ce0:	00e7a023          	sw	a4,0(a5)

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    2ce4:	00100593          	li	a1,1
    2ce8:	fd442503          	lw	a0,-44(s0)
    2cec:	770020ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>
}
    2cf0:	00000013          	nop
    2cf4:	02c12083          	lw	ra,44(sp)
    2cf8:	02812403          	lw	s0,40(sp)
    2cfc:	03010113          	addi	sp,sp,48
    2d00:	00008067          	ret

00002d04 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
    2d04:	fd010113          	addi	sp,sp,-48
    2d08:	02112623          	sw	ra,44(sp)
    2d0c:	02812423          	sw	s0,40(sp)
    2d10:	03010413          	addi	s0,sp,48
    2d14:	fca42e23          	sw	a0,-36(s0)
    2d18:	fcb42c23          	sw	a1,-40(s0)
    2d1c:	fcc42a23          	sw	a2,-44(s0)
        configASSERT( pxEventList );
    2d20:	fdc42783          	lw	a5,-36(s0)
    2d24:	00079a63          	bnez	a5,2d38 <vTaskPlaceOnEventListRestricted+0x34>
    2d28:	30047073          	csrci	mstatus,8
    2d2c:	00100073          	ebreak
    2d30:	00000013          	nop
    2d34:	ffdff06f          	j	2d30 <vTaskPlaceOnEventListRestricted+0x2c>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    2d38:	fdc42783          	lw	a5,-36(s0)
    2d3c:	0047a783          	lw	a5,4(a5)
    2d40:	fef42623          	sw	a5,-20(s0)
    2d44:	000287b7          	lui	a5,0x28
    2d48:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2d4c:	fec42703          	lw	a4,-20(s0)
    2d50:	00e7ae23          	sw	a4,28(a5)
    2d54:	000287b7          	lui	a5,0x28
    2d58:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2d5c:	fec42703          	lw	a4,-20(s0)
    2d60:	00872703          	lw	a4,8(a4)
    2d64:	02e7a023          	sw	a4,32(a5)
    2d68:	000287b7          	lui	a5,0x28
    2d6c:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    2d70:	fec42783          	lw	a5,-20(s0)
    2d74:	0087a783          	lw	a5,8(a5)
    2d78:	01870713          	addi	a4,a4,24
    2d7c:	00e7a223          	sw	a4,4(a5)
    2d80:	000287b7          	lui	a5,0x28
    2d84:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2d88:	01878713          	addi	a4,a5,24
    2d8c:	fec42783          	lw	a5,-20(s0)
    2d90:	00e7a423          	sw	a4,8(a5)
    2d94:	000287b7          	lui	a5,0x28
    2d98:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    2d9c:	fdc42703          	lw	a4,-36(s0)
    2da0:	02e7a423          	sw	a4,40(a5)
    2da4:	fdc42783          	lw	a5,-36(s0)
    2da8:	0007a783          	lw	a5,0(a5)
    2dac:	00178713          	addi	a4,a5,1
    2db0:	fdc42783          	lw	a5,-36(s0)
    2db4:	00e7a023          	sw	a4,0(a5)

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
    2db8:	fd442783          	lw	a5,-44(s0)
    2dbc:	00078663          	beqz	a5,2dc8 <vTaskPlaceOnEventListRestricted+0xc4>
        {
            xTicksToWait = portMAX_DELAY;
    2dc0:	fff00793          	li	a5,-1
    2dc4:	fcf42c23          	sw	a5,-40(s0)
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    2dc8:	fd442583          	lw	a1,-44(s0)
    2dcc:	fd842503          	lw	a0,-40(s0)
    2dd0:	68c020ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>
    }
    2dd4:	00000013          	nop
    2dd8:	02c12083          	lw	ra,44(sp)
    2ddc:	02812403          	lw	s0,40(sp)
    2de0:	03010113          	addi	sp,sp,48
    2de4:	00008067          	ret

00002de8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    2de8:	fc010113          	addi	sp,sp,-64
    2dec:	02812e23          	sw	s0,60(sp)
    2df0:	04010413          	addi	s0,sp,64
    2df4:	fca42623          	sw	a0,-52(s0)
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2df8:	fcc42783          	lw	a5,-52(s0)
    2dfc:	00c7a783          	lw	a5,12(a5)
    2e00:	00c7a783          	lw	a5,12(a5)
    2e04:	fcf42e23          	sw	a5,-36(s0)
    configASSERT( pxUnblockedTCB );
    2e08:	fdc42783          	lw	a5,-36(s0)
    2e0c:	00079a63          	bnez	a5,2e20 <xTaskRemoveFromEventList+0x38>
    2e10:	30047073          	csrci	mstatus,8
    2e14:	00100073          	ebreak
    2e18:	00000013          	nop
    2e1c:	ffdff06f          	j	2e18 <xTaskRemoveFromEventList+0x30>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
    2e20:	fdc42783          	lw	a5,-36(s0)
    2e24:	0287a783          	lw	a5,40(a5)
    2e28:	fef42023          	sw	a5,-32(s0)
    2e2c:	fdc42783          	lw	a5,-36(s0)
    2e30:	01c7a783          	lw	a5,28(a5)
    2e34:	fdc42703          	lw	a4,-36(s0)
    2e38:	02072703          	lw	a4,32(a4)
    2e3c:	00e7a423          	sw	a4,8(a5)
    2e40:	fdc42783          	lw	a5,-36(s0)
    2e44:	0207a783          	lw	a5,32(a5)
    2e48:	fdc42703          	lw	a4,-36(s0)
    2e4c:	01c72703          	lw	a4,28(a4)
    2e50:	00e7a223          	sw	a4,4(a5)
    2e54:	fe042783          	lw	a5,-32(s0)
    2e58:	0047a703          	lw	a4,4(a5)
    2e5c:	fdc42783          	lw	a5,-36(s0)
    2e60:	01878793          	addi	a5,a5,24
    2e64:	00f71a63          	bne	a4,a5,2e78 <xTaskRemoveFromEventList+0x90>
    2e68:	fdc42783          	lw	a5,-36(s0)
    2e6c:	0207a703          	lw	a4,32(a5)
    2e70:	fe042783          	lw	a5,-32(s0)
    2e74:	00e7a223          	sw	a4,4(a5)
    2e78:	fdc42783          	lw	a5,-36(s0)
    2e7c:	0207a423          	sw	zero,40(a5)
    2e80:	fe042783          	lw	a5,-32(s0)
    2e84:	0007a783          	lw	a5,0(a5)
    2e88:	fff78713          	addi	a4,a5,-1
    2e8c:	fe042783          	lw	a5,-32(s0)
    2e90:	00e7a023          	sw	a4,0(a5)

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    2e94:	000287b7          	lui	a5,0x28
    2e98:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    2e9c:	18079263          	bnez	a5,3020 <xTaskRemoveFromEventList+0x238>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    2ea0:	fdc42783          	lw	a5,-36(s0)
    2ea4:	0147a783          	lw	a5,20(a5)
    2ea8:	fef42423          	sw	a5,-24(s0)
    2eac:	fdc42783          	lw	a5,-36(s0)
    2eb0:	0087a783          	lw	a5,8(a5)
    2eb4:	fdc42703          	lw	a4,-36(s0)
    2eb8:	00c72703          	lw	a4,12(a4)
    2ebc:	00e7a423          	sw	a4,8(a5)
    2ec0:	fdc42783          	lw	a5,-36(s0)
    2ec4:	00c7a783          	lw	a5,12(a5)
    2ec8:	fdc42703          	lw	a4,-36(s0)
    2ecc:	00872703          	lw	a4,8(a4)
    2ed0:	00e7a223          	sw	a4,4(a5)
    2ed4:	fe842783          	lw	a5,-24(s0)
    2ed8:	0047a703          	lw	a4,4(a5)
    2edc:	fdc42783          	lw	a5,-36(s0)
    2ee0:	00478793          	addi	a5,a5,4
    2ee4:	00f71a63          	bne	a4,a5,2ef8 <xTaskRemoveFromEventList+0x110>
    2ee8:	fdc42783          	lw	a5,-36(s0)
    2eec:	00c7a703          	lw	a4,12(a5)
    2ef0:	fe842783          	lw	a5,-24(s0)
    2ef4:	00e7a223          	sw	a4,4(a5)
    2ef8:	fdc42783          	lw	a5,-36(s0)
    2efc:	0007aa23          	sw	zero,20(a5)
    2f00:	fe842783          	lw	a5,-24(s0)
    2f04:	0007a783          	lw	a5,0(a5)
    2f08:	fff78713          	addi	a4,a5,-1
    2f0c:	fe842783          	lw	a5,-24(s0)
    2f10:	00e7a023          	sw	a4,0(a5)
        prvAddTaskToReadyList( pxUnblockedTCB );
    2f14:	fdc42783          	lw	a5,-36(s0)
    2f18:	02c7a783          	lw	a5,44(a5)
    2f1c:	00100713          	li	a4,1
    2f20:	00f71733          	sll	a4,a4,a5
    2f24:	000287b7          	lui	a5,0x28
    2f28:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    2f2c:	00f76733          	or	a4,a4,a5
    2f30:	000287b7          	lui	a5,0x28
    2f34:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    2f38:	fdc42783          	lw	a5,-36(s0)
    2f3c:	02c7a703          	lw	a4,44(a5)
    2f40:	000287b7          	lui	a5,0x28
    2f44:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    2f48:	00070793          	mv	a5,a4
    2f4c:	00279793          	slli	a5,a5,0x2
    2f50:	00e787b3          	add	a5,a5,a4
    2f54:	00279793          	slli	a5,a5,0x2
    2f58:	00f687b3          	add	a5,a3,a5
    2f5c:	0047a783          	lw	a5,4(a5)
    2f60:	fef42623          	sw	a5,-20(s0)
    2f64:	fdc42783          	lw	a5,-36(s0)
    2f68:	fec42703          	lw	a4,-20(s0)
    2f6c:	00e7a423          	sw	a4,8(a5)
    2f70:	fec42783          	lw	a5,-20(s0)
    2f74:	0087a703          	lw	a4,8(a5)
    2f78:	fdc42783          	lw	a5,-36(s0)
    2f7c:	00e7a623          	sw	a4,12(a5)
    2f80:	fec42783          	lw	a5,-20(s0)
    2f84:	0087a783          	lw	a5,8(a5)
    2f88:	fdc42703          	lw	a4,-36(s0)
    2f8c:	00470713          	addi	a4,a4,4
    2f90:	00e7a223          	sw	a4,4(a5)
    2f94:	fdc42783          	lw	a5,-36(s0)
    2f98:	00478713          	addi	a4,a5,4
    2f9c:	fec42783          	lw	a5,-20(s0)
    2fa0:	00e7a423          	sw	a4,8(a5)
    2fa4:	fdc42783          	lw	a5,-36(s0)
    2fa8:	02c7a703          	lw	a4,44(a5)
    2fac:	00070793          	mv	a5,a4
    2fb0:	00279793          	slli	a5,a5,0x2
    2fb4:	00e787b3          	add	a5,a5,a4
    2fb8:	00279793          	slli	a5,a5,0x2
    2fbc:	00028737          	lui	a4,0x28
    2fc0:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    2fc4:	00e78733          	add	a4,a5,a4
    2fc8:	fdc42783          	lw	a5,-36(s0)
    2fcc:	00e7aa23          	sw	a4,20(a5)
    2fd0:	fdc42783          	lw	a5,-36(s0)
    2fd4:	02c7a703          	lw	a4,44(a5)
    2fd8:	000287b7          	lui	a5,0x28
    2fdc:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    2fe0:	00070793          	mv	a5,a4
    2fe4:	00279793          	slli	a5,a5,0x2
    2fe8:	00e787b3          	add	a5,a5,a4
    2fec:	00279793          	slli	a5,a5,0x2
    2ff0:	00f687b3          	add	a5,a3,a5
    2ff4:	0007a783          	lw	a5,0(a5)
    2ff8:	00178693          	addi	a3,a5,1
    2ffc:	000287b7          	lui	a5,0x28
    3000:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    3004:	00070793          	mv	a5,a4
    3008:	00279793          	slli	a5,a5,0x2
    300c:	00e787b3          	add	a5,a5,a4
    3010:	00279793          	slli	a5,a5,0x2
    3014:	00f607b3          	add	a5,a2,a5
    3018:	00d7a023          	sw	a3,0(a5)
    301c:	0800006f          	j	309c <xTaskRemoveFromEventList+0x2b4>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3020:	000287b7          	lui	a5,0x28
    3024:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    3028:	0047a783          	lw	a5,4(a5)
    302c:	fef42223          	sw	a5,-28(s0)
    3030:	fdc42783          	lw	a5,-36(s0)
    3034:	fe442703          	lw	a4,-28(s0)
    3038:	00e7ae23          	sw	a4,28(a5)
    303c:	fe442783          	lw	a5,-28(s0)
    3040:	0087a703          	lw	a4,8(a5)
    3044:	fdc42783          	lw	a5,-36(s0)
    3048:	02e7a023          	sw	a4,32(a5)
    304c:	fe442783          	lw	a5,-28(s0)
    3050:	0087a783          	lw	a5,8(a5)
    3054:	fdc42703          	lw	a4,-36(s0)
    3058:	01870713          	addi	a4,a4,24
    305c:	00e7a223          	sw	a4,4(a5)
    3060:	fdc42783          	lw	a5,-36(s0)
    3064:	01878713          	addi	a4,a5,24
    3068:	fe442783          	lw	a5,-28(s0)
    306c:	00e7a423          	sw	a4,8(a5)
    3070:	fdc42783          	lw	a5,-36(s0)
    3074:	00028737          	lui	a4,0x28
    3078:	da070713          	addi	a4,a4,-608 # 27da0 <xPendingReadyList>
    307c:	02e7a423          	sw	a4,40(a5)
    3080:	000287b7          	lui	a5,0x28
    3084:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    3088:	0007a783          	lw	a5,0(a5)
    308c:	00178713          	addi	a4,a5,1
    3090:	000287b7          	lui	a5,0x28
    3094:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    3098:	00e7a023          	sw	a4,0(a5)
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    309c:	fdc42783          	lw	a5,-36(s0)
    30a0:	02c7a703          	lw	a4,44(a5)
    30a4:	000287b7          	lui	a5,0x28
    30a8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    30ac:	02c7a783          	lw	a5,44(a5)
    30b0:	00e7fe63          	bgeu	a5,a4,30cc <xTaskRemoveFromEventList+0x2e4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
    30b4:	00100793          	li	a5,1
    30b8:	fcf42c23          	sw	a5,-40(s0)

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
    30bc:	000287b7          	lui	a5,0x28
    30c0:	00100713          	li	a4,1
    30c4:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
    30c8:	0080006f          	j	30d0 <xTaskRemoveFromEventList+0x2e8>
    }
    else
    {
        xReturn = pdFALSE;
    30cc:	fc042c23          	sw	zero,-40(s0)
    }

    return xReturn;
    30d0:	fd842783          	lw	a5,-40(s0)
}
    30d4:	00078513          	mv	a0,a5
    30d8:	03c12403          	lw	s0,60(sp)
    30dc:	04010113          	addi	sp,sp,64
    30e0:	00008067          	ret

000030e4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
    30e4:	fd010113          	addi	sp,sp,-48
    30e8:	02812623          	sw	s0,44(sp)
    30ec:	03010413          	addi	s0,sp,48
    30f0:	fca42e23          	sw	a0,-36(s0)
    30f4:	fcb42c23          	sw	a1,-40(s0)
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
    30f8:	000287b7          	lui	a5,0x28
    30fc:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    3100:	00079a63          	bnez	a5,3114 <vTaskRemoveFromUnorderedEventList+0x30>
    3104:	30047073          	csrci	mstatus,8
    3108:	00100073          	ebreak
    310c:	00000013          	nop
    3110:	ffdff06f          	j	310c <vTaskRemoveFromUnorderedEventList+0x28>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3114:	fd842703          	lw	a4,-40(s0)
    3118:	800007b7          	lui	a5,0x80000
    311c:	00f76733          	or	a4,a4,a5
    3120:	fdc42783          	lw	a5,-36(s0)
    3124:	00e7a023          	sw	a4,0(a5) # 80000000 <__alt_data_end+0x7ffc0000>

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3128:	fdc42783          	lw	a5,-36(s0)
    312c:	00c7a783          	lw	a5,12(a5)
    3130:	fef42023          	sw	a5,-32(s0)
    configASSERT( pxUnblockedTCB );
    3134:	fe042783          	lw	a5,-32(s0)
    3138:	00079a63          	bnez	a5,314c <vTaskRemoveFromUnorderedEventList+0x68>
    313c:	30047073          	csrci	mstatus,8
    3140:	00100073          	ebreak
    3144:	00000013          	nop
    3148:	ffdff06f          	j	3144 <vTaskRemoveFromUnorderedEventList+0x60>
    listREMOVE_ITEM( pxEventListItem );
    314c:	fdc42783          	lw	a5,-36(s0)
    3150:	0107a783          	lw	a5,16(a5)
    3154:	fef42223          	sw	a5,-28(s0)
    3158:	fdc42783          	lw	a5,-36(s0)
    315c:	0047a783          	lw	a5,4(a5)
    3160:	fdc42703          	lw	a4,-36(s0)
    3164:	00872703          	lw	a4,8(a4)
    3168:	00e7a423          	sw	a4,8(a5)
    316c:	fdc42783          	lw	a5,-36(s0)
    3170:	0087a783          	lw	a5,8(a5)
    3174:	fdc42703          	lw	a4,-36(s0)
    3178:	00472703          	lw	a4,4(a4)
    317c:	00e7a223          	sw	a4,4(a5)
    3180:	fe442783          	lw	a5,-28(s0)
    3184:	0047a783          	lw	a5,4(a5)
    3188:	fdc42703          	lw	a4,-36(s0)
    318c:	00f71a63          	bne	a4,a5,31a0 <vTaskRemoveFromUnorderedEventList+0xbc>
    3190:	fdc42783          	lw	a5,-36(s0)
    3194:	0087a703          	lw	a4,8(a5)
    3198:	fe442783          	lw	a5,-28(s0)
    319c:	00e7a223          	sw	a4,4(a5)
    31a0:	fdc42783          	lw	a5,-36(s0)
    31a4:	0007a823          	sw	zero,16(a5)
    31a8:	fe442783          	lw	a5,-28(s0)
    31ac:	0007a783          	lw	a5,0(a5)
    31b0:	fff78713          	addi	a4,a5,-1
    31b4:	fe442783          	lw	a5,-28(s0)
    31b8:	00e7a023          	sw	a4,0(a5)
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
    31bc:	fe042783          	lw	a5,-32(s0)
    31c0:	0147a783          	lw	a5,20(a5)
    31c4:	fef42423          	sw	a5,-24(s0)
    31c8:	fe042783          	lw	a5,-32(s0)
    31cc:	0087a783          	lw	a5,8(a5)
    31d0:	fe042703          	lw	a4,-32(s0)
    31d4:	00c72703          	lw	a4,12(a4)
    31d8:	00e7a423          	sw	a4,8(a5)
    31dc:	fe042783          	lw	a5,-32(s0)
    31e0:	00c7a783          	lw	a5,12(a5)
    31e4:	fe042703          	lw	a4,-32(s0)
    31e8:	00872703          	lw	a4,8(a4)
    31ec:	00e7a223          	sw	a4,4(a5)
    31f0:	fe842783          	lw	a5,-24(s0)
    31f4:	0047a703          	lw	a4,4(a5)
    31f8:	fe042783          	lw	a5,-32(s0)
    31fc:	00478793          	addi	a5,a5,4
    3200:	00f71a63          	bne	a4,a5,3214 <vTaskRemoveFromUnorderedEventList+0x130>
    3204:	fe042783          	lw	a5,-32(s0)
    3208:	00c7a703          	lw	a4,12(a5)
    320c:	fe842783          	lw	a5,-24(s0)
    3210:	00e7a223          	sw	a4,4(a5)
    3214:	fe042783          	lw	a5,-32(s0)
    3218:	0007aa23          	sw	zero,20(a5)
    321c:	fe842783          	lw	a5,-24(s0)
    3220:	0007a783          	lw	a5,0(a5)
    3224:	fff78713          	addi	a4,a5,-1
    3228:	fe842783          	lw	a5,-24(s0)
    322c:	00e7a023          	sw	a4,0(a5)
    prvAddTaskToReadyList( pxUnblockedTCB );
    3230:	fe042783          	lw	a5,-32(s0)
    3234:	02c7a783          	lw	a5,44(a5)
    3238:	00100713          	li	a4,1
    323c:	00f71733          	sll	a4,a4,a5
    3240:	000287b7          	lui	a5,0x28
    3244:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    3248:	00f76733          	or	a4,a4,a5
    324c:	000287b7          	lui	a5,0x28
    3250:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    3254:	fe042783          	lw	a5,-32(s0)
    3258:	02c7a703          	lw	a4,44(a5)
    325c:	000287b7          	lui	a5,0x28
    3260:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    3264:	00070793          	mv	a5,a4
    3268:	00279793          	slli	a5,a5,0x2
    326c:	00e787b3          	add	a5,a5,a4
    3270:	00279793          	slli	a5,a5,0x2
    3274:	00f687b3          	add	a5,a3,a5
    3278:	0047a783          	lw	a5,4(a5)
    327c:	fef42623          	sw	a5,-20(s0)
    3280:	fe042783          	lw	a5,-32(s0)
    3284:	fec42703          	lw	a4,-20(s0)
    3288:	00e7a423          	sw	a4,8(a5)
    328c:	fec42783          	lw	a5,-20(s0)
    3290:	0087a703          	lw	a4,8(a5)
    3294:	fe042783          	lw	a5,-32(s0)
    3298:	00e7a623          	sw	a4,12(a5)
    329c:	fec42783          	lw	a5,-20(s0)
    32a0:	0087a783          	lw	a5,8(a5)
    32a4:	fe042703          	lw	a4,-32(s0)
    32a8:	00470713          	addi	a4,a4,4
    32ac:	00e7a223          	sw	a4,4(a5)
    32b0:	fe042783          	lw	a5,-32(s0)
    32b4:	00478713          	addi	a4,a5,4
    32b8:	fec42783          	lw	a5,-20(s0)
    32bc:	00e7a423          	sw	a4,8(a5)
    32c0:	fe042783          	lw	a5,-32(s0)
    32c4:	02c7a703          	lw	a4,44(a5)
    32c8:	00070793          	mv	a5,a4
    32cc:	00279793          	slli	a5,a5,0x2
    32d0:	00e787b3          	add	a5,a5,a4
    32d4:	00279793          	slli	a5,a5,0x2
    32d8:	00028737          	lui	a4,0x28
    32dc:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    32e0:	00e78733          	add	a4,a5,a4
    32e4:	fe042783          	lw	a5,-32(s0)
    32e8:	00e7aa23          	sw	a4,20(a5)
    32ec:	fe042783          	lw	a5,-32(s0)
    32f0:	02c7a703          	lw	a4,44(a5)
    32f4:	000287b7          	lui	a5,0x28
    32f8:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    32fc:	00070793          	mv	a5,a4
    3300:	00279793          	slli	a5,a5,0x2
    3304:	00e787b3          	add	a5,a5,a4
    3308:	00279793          	slli	a5,a5,0x2
    330c:	00f687b3          	add	a5,a3,a5
    3310:	0007a783          	lw	a5,0(a5)
    3314:	00178693          	addi	a3,a5,1
    3318:	000287b7          	lui	a5,0x28
    331c:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    3320:	00070793          	mv	a5,a4
    3324:	00279793          	slli	a5,a5,0x2
    3328:	00e787b3          	add	a5,a5,a4
    332c:	00279793          	slli	a5,a5,0x2
    3330:	00f607b3          	add	a5,a2,a5
    3334:	00d7a023          	sw	a3,0(a5)

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3338:	fe042783          	lw	a5,-32(s0)
    333c:	02c7a703          	lw	a4,44(a5)
    3340:	000287b7          	lui	a5,0x28
    3344:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3348:	02c7a783          	lw	a5,44(a5)
    334c:	00e7f863          	bgeu	a5,a4,335c <vTaskRemoveFromUnorderedEventList+0x278>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
    3350:	000287b7          	lui	a5,0x28
    3354:	00100713          	li	a4,1
    3358:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
    }
}
    335c:	00000013          	nop
    3360:	02c12403          	lw	s0,44(sp)
    3364:	03010113          	addi	sp,sp,48
    3368:	00008067          	ret

0000336c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    336c:	fe010113          	addi	sp,sp,-32
    3370:	00812e23          	sw	s0,28(sp)
    3374:	02010413          	addi	s0,sp,32
    3378:	fea42623          	sw	a0,-20(s0)
    configASSERT( pxTimeOut );
    337c:	fec42783          	lw	a5,-20(s0)
    3380:	00079a63          	bnez	a5,3394 <vTaskSetTimeOutState+0x28>
    3384:	30047073          	csrci	mstatus,8
    3388:	00100073          	ebreak
    338c:	00000013          	nop
    3390:	ffdff06f          	j	338c <vTaskSetTimeOutState+0x20>
    taskENTER_CRITICAL();
    3394:	30047073          	csrci	mstatus,8
    3398:	000267b7          	lui	a5,0x26
    339c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    33a0:	00178713          	addi	a4,a5,1
    33a4:	000267b7          	lui	a5,0x26
    33a8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
    33ac:	000287b7          	lui	a5,0x28
    33b0:	df87a703          	lw	a4,-520(a5) # 27df8 <xNumOfOverflows>
    33b4:	fec42783          	lw	a5,-20(s0)
    33b8:	00e7a023          	sw	a4,0(a5)
        pxTimeOut->xTimeOnEntering = xTickCount;
    33bc:	000287b7          	lui	a5,0x28
    33c0:	de47a703          	lw	a4,-540(a5) # 27de4 <xTickCount>
    33c4:	fec42783          	lw	a5,-20(s0)
    33c8:	00e7a223          	sw	a4,4(a5)
    }
    taskEXIT_CRITICAL();
    33cc:	000267b7          	lui	a5,0x26
    33d0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    33d4:	fff78713          	addi	a4,a5,-1
    33d8:	000267b7          	lui	a5,0x26
    33dc:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    33e0:	000267b7          	lui	a5,0x26
    33e4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    33e8:	00079463          	bnez	a5,33f0 <vTaskSetTimeOutState+0x84>
    33ec:	30046073          	csrsi	mstatus,8
}
    33f0:	00000013          	nop
    33f4:	01c12403          	lw	s0,28(sp)
    33f8:	02010113          	addi	sp,sp,32
    33fc:	00008067          	ret

00003400 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3400:	fe010113          	addi	sp,sp,-32
    3404:	00812e23          	sw	s0,28(sp)
    3408:	02010413          	addi	s0,sp,32
    340c:	fea42623          	sw	a0,-20(s0)
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    3410:	000287b7          	lui	a5,0x28
    3414:	df87a703          	lw	a4,-520(a5) # 27df8 <xNumOfOverflows>
    3418:	fec42783          	lw	a5,-20(s0)
    341c:	00e7a023          	sw	a4,0(a5)
    pxTimeOut->xTimeOnEntering = xTickCount;
    3420:	000287b7          	lui	a5,0x28
    3424:	de47a703          	lw	a4,-540(a5) # 27de4 <xTickCount>
    3428:	fec42783          	lw	a5,-20(s0)
    342c:	00e7a223          	sw	a4,4(a5)
}
    3430:	00000013          	nop
    3434:	01c12403          	lw	s0,28(sp)
    3438:	02010113          	addi	sp,sp,32
    343c:	00008067          	ret

00003440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    3440:	fd010113          	addi	sp,sp,-48
    3444:	02112623          	sw	ra,44(sp)
    3448:	02812423          	sw	s0,40(sp)
    344c:	03010413          	addi	s0,sp,48
    3450:	fca42e23          	sw	a0,-36(s0)
    3454:	fcb42c23          	sw	a1,-40(s0)
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    3458:	fdc42783          	lw	a5,-36(s0)
    345c:	00079a63          	bnez	a5,3470 <xTaskCheckForTimeOut+0x30>
    3460:	30047073          	csrci	mstatus,8
    3464:	00100073          	ebreak
    3468:	00000013          	nop
    346c:	ffdff06f          	j	3468 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
    3470:	fd842783          	lw	a5,-40(s0)
    3474:	00079a63          	bnez	a5,3488 <xTaskCheckForTimeOut+0x48>
    3478:	30047073          	csrci	mstatus,8
    347c:	00100073          	ebreak
    3480:	00000013          	nop
    3484:	ffdff06f          	j	3480 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
    3488:	30047073          	csrci	mstatus,8
    348c:	000267b7          	lui	a5,0x26
    3490:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    3494:	00178713          	addi	a4,a5,1
    3498:	000267b7          	lui	a5,0x26
    349c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    34a0:	000287b7          	lui	a5,0x28
    34a4:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    34a8:	fef42423          	sw	a5,-24(s0)
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    34ac:	fdc42783          	lw	a5,-36(s0)
    34b0:	0047a783          	lw	a5,4(a5)
    34b4:	fe842703          	lw	a4,-24(s0)
    34b8:	40f707b3          	sub	a5,a4,a5
    34bc:	fef42623          	sw	a5,-20(s0)

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
    34c0:	000287b7          	lui	a5,0x28
    34c4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    34c8:	5857c783          	lbu	a5,1413(a5)
    34cc:	00078e63          	beqz	a5,34e8 <xTaskCheckForTimeOut+0xa8>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
    34d0:	000287b7          	lui	a5,0x28
    34d4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    34d8:	580782a3          	sb	zero,1413(a5)
                xReturn = pdTRUE;
    34dc:	00100793          	li	a5,1
    34e0:	fef42223          	sw	a5,-28(s0)
    34e4:	09c0006f          	j	3580 <xTaskCheckForTimeOut+0x140>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    34e8:	fd842783          	lw	a5,-40(s0)
    34ec:	0007a703          	lw	a4,0(a5)
    34f0:	fff00793          	li	a5,-1
    34f4:	00f71663          	bne	a4,a5,3500 <xTaskCheckForTimeOut+0xc0>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    34f8:	fe042223          	sw	zero,-28(s0)
    34fc:	0840006f          	j	3580 <xTaskCheckForTimeOut+0x140>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3500:	fdc42783          	lw	a5,-36(s0)
    3504:	0007a703          	lw	a4,0(a5)
    3508:	000287b7          	lui	a5,0x28
    350c:	df87a783          	lw	a5,-520(a5) # 27df8 <xNumOfOverflows>
    3510:	02f70463          	beq	a4,a5,3538 <xTaskCheckForTimeOut+0xf8>
    3514:	fdc42783          	lw	a5,-36(s0)
    3518:	0047a783          	lw	a5,4(a5)
    351c:	fe842703          	lw	a4,-24(s0)
    3520:	00f76c63          	bltu	a4,a5,3538 <xTaskCheckForTimeOut+0xf8>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    3524:	00100793          	li	a5,1
    3528:	fef42223          	sw	a5,-28(s0)
            *pxTicksToWait = ( TickType_t ) 0;
    352c:	fd842783          	lw	a5,-40(s0)
    3530:	0007a023          	sw	zero,0(a5)
    3534:	04c0006f          	j	3580 <xTaskCheckForTimeOut+0x140>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3538:	fd842783          	lw	a5,-40(s0)
    353c:	0007a783          	lw	a5,0(a5)
    3540:	fec42703          	lw	a4,-20(s0)
    3544:	02f77663          	bgeu	a4,a5,3570 <xTaskCheckForTimeOut+0x130>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    3548:	fd842783          	lw	a5,-40(s0)
    354c:	0007a703          	lw	a4,0(a5)
    3550:	fec42783          	lw	a5,-20(s0)
    3554:	40f70733          	sub	a4,a4,a5
    3558:	fd842783          	lw	a5,-40(s0)
    355c:	00e7a023          	sw	a4,0(a5)
            vTaskInternalSetTimeOutState( pxTimeOut );
    3560:	fdc42503          	lw	a0,-36(s0)
    3564:	e9dff0ef          	jal	ra,3400 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    3568:	fe042223          	sw	zero,-28(s0)
    356c:	0140006f          	j	3580 <xTaskCheckForTimeOut+0x140>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    3570:	fd842783          	lw	a5,-40(s0)
    3574:	0007a023          	sw	zero,0(a5)
            xReturn = pdTRUE;
    3578:	00100793          	li	a5,1
    357c:	fef42223          	sw	a5,-28(s0)
        }
    }
    taskEXIT_CRITICAL();
    3580:	000267b7          	lui	a5,0x26
    3584:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    3588:	fff78713          	addi	a4,a5,-1
    358c:	000267b7          	lui	a5,0x26
    3590:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    3594:	000267b7          	lui	a5,0x26
    3598:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    359c:	00079463          	bnez	a5,35a4 <xTaskCheckForTimeOut+0x164>
    35a0:	30046073          	csrsi	mstatus,8

    return xReturn;
    35a4:	fe442783          	lw	a5,-28(s0)
}
    35a8:	00078513          	mv	a0,a5
    35ac:	02c12083          	lw	ra,44(sp)
    35b0:	02812403          	lw	s0,40(sp)
    35b4:	03010113          	addi	sp,sp,48
    35b8:	00008067          	ret

000035bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    35bc:	ff010113          	addi	sp,sp,-16
    35c0:	00812623          	sw	s0,12(sp)
    35c4:	01010413          	addi	s0,sp,16
    xYieldPending = pdTRUE;
    35c8:	000287b7          	lui	a5,0x28
    35cc:	00100713          	li	a4,1
    35d0:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
}
    35d4:	00000013          	nop
    35d8:	00c12403          	lw	s0,12(sp)
    35dc:	01010113          	addi	sp,sp,16
    35e0:	00008067          	ret

000035e4 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
    35e4:	fd010113          	addi	sp,sp,-48
    35e8:	02812623          	sw	s0,44(sp)
    35ec:	03010413          	addi	s0,sp,48
    35f0:	fca42e23          	sw	a0,-36(s0)
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
    35f4:	fdc42783          	lw	a5,-36(s0)
    35f8:	00078e63          	beqz	a5,3614 <uxTaskGetTaskNumber+0x30>
        {
            pxTCB = xTask;
    35fc:	fdc42783          	lw	a5,-36(s0)
    3600:	fef42623          	sw	a5,-20(s0)
            uxReturn = pxTCB->uxTaskNumber;
    3604:	fec42783          	lw	a5,-20(s0)
    3608:	0487a783          	lw	a5,72(a5)
    360c:	fef42423          	sw	a5,-24(s0)
    3610:	0080006f          	j	3618 <uxTaskGetTaskNumber+0x34>
        }
        else
        {
            uxReturn = 0U;
    3614:	fe042423          	sw	zero,-24(s0)
        }

        return uxReturn;
    3618:	fe842783          	lw	a5,-24(s0)
    }
    361c:	00078513          	mv	a0,a5
    3620:	02c12403          	lw	s0,44(sp)
    3624:	03010113          	addi	sp,sp,48
    3628:	00008067          	ret

0000362c <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
    362c:	fd010113          	addi	sp,sp,-48
    3630:	02812623          	sw	s0,44(sp)
    3634:	03010413          	addi	s0,sp,48
    3638:	fca42e23          	sw	a0,-36(s0)
    363c:	fcb42c23          	sw	a1,-40(s0)
        TCB_t * pxTCB;

        if( xTask != NULL )
    3640:	fdc42783          	lw	a5,-36(s0)
    3644:	00078c63          	beqz	a5,365c <vTaskSetTaskNumber+0x30>
        {
            pxTCB = xTask;
    3648:	fdc42783          	lw	a5,-36(s0)
    364c:	fef42623          	sw	a5,-20(s0)
            pxTCB->uxTaskNumber = uxHandle;
    3650:	fec42783          	lw	a5,-20(s0)
    3654:	fd842703          	lw	a4,-40(s0)
    3658:	04e7a423          	sw	a4,72(a5)
        }
    }
    365c:	00000013          	nop
    3660:	02c12403          	lw	s0,44(sp)
    3664:	03010113          	addi	sp,sp,48
    3668:	00008067          	ret

0000366c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    366c:	fe010113          	addi	sp,sp,-32
    3670:	00112e23          	sw	ra,28(sp)
    3674:	00812c23          	sw	s0,24(sp)
    3678:	02010413          	addi	s0,sp,32
    367c:	fea42623          	sw	a0,-20(s0)

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
    3680:	0d0000ef          	jal	ra,3750 <prvCheckTasksWaitingTermination>
    3684:	ffdff06f          	j	3680 <prvIdleTask+0x14>

00003688 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3688:	fe010113          	addi	sp,sp,-32
    368c:	00112e23          	sw	ra,28(sp)
    3690:	00812c23          	sw	s0,24(sp)
    3694:	02010413          	addi	s0,sp,32
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3698:	fe042623          	sw	zero,-20(s0)
    369c:	0380006f          	j	36d4 <prvInitialiseTaskLists+0x4c>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    36a0:	fec42703          	lw	a4,-20(s0)
    36a4:	00070793          	mv	a5,a4
    36a8:	00279793          	slli	a5,a5,0x2
    36ac:	00e787b3          	add	a5,a5,a4
    36b0:	00279793          	slli	a5,a5,0x2
    36b4:	00028737          	lui	a4,0x28
    36b8:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    36bc:	00e787b3          	add	a5,a5,a4
    36c0:	00078513          	mv	a0,a5
    36c4:	5bd050ef          	jal	ra,9480 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    36c8:	fec42783          	lw	a5,-20(s0)
    36cc:	00178793          	addi	a5,a5,1
    36d0:	fef42623          	sw	a5,-20(s0)
    36d4:	fec42703          	lw	a4,-20(s0)
    36d8:	00600793          	li	a5,6
    36dc:	fce7f2e3          	bgeu	a5,a4,36a0 <prvInitialiseTaskLists+0x18>
    }

    vListInitialise( &xDelayedTaskList1 );
    36e0:	000287b7          	lui	a5,0x28
    36e4:	d7078513          	addi	a0,a5,-656 # 27d70 <xDelayedTaskList1>
    36e8:	599050ef          	jal	ra,9480 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
    36ec:	000287b7          	lui	a5,0x28
    36f0:	d8478513          	addi	a0,a5,-636 # 27d84 <xDelayedTaskList2>
    36f4:	58d050ef          	jal	ra,9480 <vListInitialise>
    vListInitialise( &xPendingReadyList );
    36f8:	000287b7          	lui	a5,0x28
    36fc:	da078513          	addi	a0,a5,-608 # 27da0 <xPendingReadyList>
    3700:	581050ef          	jal	ra,9480 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
    3704:	000287b7          	lui	a5,0x28
    3708:	db478513          	addi	a0,a5,-588 # 27db4 <xTasksWaitingTermination>
    370c:	575050ef          	jal	ra,9480 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
    3710:	000287b7          	lui	a5,0x28
    3714:	dcc78513          	addi	a0,a5,-564 # 27dcc <xSuspendedTaskList>
    3718:	569050ef          	jal	ra,9480 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
    371c:	000287b7          	lui	a5,0x28
    3720:	00028737          	lui	a4,0x28
    3724:	d7070713          	addi	a4,a4,-656 # 27d70 <xDelayedTaskList1>
    3728:	d8e7ac23          	sw	a4,-616(a5) # 27d98 <pxDelayedTaskList>
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
    372c:	000287b7          	lui	a5,0x28
    3730:	00028737          	lui	a4,0x28
    3734:	d8470713          	addi	a4,a4,-636 # 27d84 <xDelayedTaskList2>
    3738:	d8e7ae23          	sw	a4,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
}
    373c:	00000013          	nop
    3740:	01c12083          	lw	ra,28(sp)
    3744:	01812403          	lw	s0,24(sp)
    3748:	02010113          	addi	sp,sp,32
    374c:	00008067          	ret

00003750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3750:	fe010113          	addi	sp,sp,-32
    3754:	00112e23          	sw	ra,28(sp)
    3758:	00812c23          	sw	s0,24(sp)
    375c:	02010413          	addi	s0,sp,32
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3760:	0940006f          	j	37f4 <prvCheckTasksWaitingTermination+0xa4>
        {
            taskENTER_CRITICAL();
    3764:	30047073          	csrci	mstatus,8
    3768:	000267b7          	lui	a5,0x26
    376c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    3770:	00178713          	addi	a4,a5,1
    3774:	000267b7          	lui	a5,0x26
    3778:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    377c:	000287b7          	lui	a5,0x28
    3780:	db478793          	addi	a5,a5,-588 # 27db4 <xTasksWaitingTermination>
    3784:	00c7a783          	lw	a5,12(a5)
    3788:	00c7a783          	lw	a5,12(a5)
    378c:	fef42623          	sw	a5,-20(s0)
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3790:	fec42783          	lw	a5,-20(s0)
    3794:	00478793          	addi	a5,a5,4
    3798:	00078513          	mv	a0,a5
    379c:	6cd050ef          	jal	ra,9668 <uxListRemove>
                --uxCurrentNumberOfTasks;
    37a0:	000287b7          	lui	a5,0x28
    37a4:	de07a783          	lw	a5,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
    37a8:	fff78713          	addi	a4,a5,-1
    37ac:	000287b7          	lui	a5,0x28
    37b0:	dee7a023          	sw	a4,-544(a5) # 27de0 <uxCurrentNumberOfTasks>
                --uxDeletedTasksWaitingCleanUp;
    37b4:	000287b7          	lui	a5,0x28
    37b8:	dc87a783          	lw	a5,-568(a5) # 27dc8 <uxDeletedTasksWaitingCleanUp>
    37bc:	fff78713          	addi	a4,a5,-1
    37c0:	000287b7          	lui	a5,0x28
    37c4:	dce7a423          	sw	a4,-568(a5) # 27dc8 <uxDeletedTasksWaitingCleanUp>
            }
            taskEXIT_CRITICAL();
    37c8:	000267b7          	lui	a5,0x26
    37cc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    37d0:	fff78713          	addi	a4,a5,-1
    37d4:	000267b7          	lui	a5,0x26
    37d8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    37dc:	000267b7          	lui	a5,0x26
    37e0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    37e4:	00079463          	bnez	a5,37ec <prvCheckTasksWaitingTermination+0x9c>
    37e8:	30046073          	csrsi	mstatus,8

            prvDeleteTCB( pxTCB );
    37ec:	fec42503          	lw	a0,-20(s0)
    37f0:	328000ef          	jal	ra,3b18 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    37f4:	000287b7          	lui	a5,0x28
    37f8:	dc87a783          	lw	a5,-568(a5) # 27dc8 <uxDeletedTasksWaitingCleanUp>
    37fc:	f60794e3          	bnez	a5,3764 <prvCheckTasksWaitingTermination+0x14>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
    3800:	00000013          	nop
    3804:	00000013          	nop
    3808:	01c12083          	lw	ra,28(sp)
    380c:	01812403          	lw	s0,24(sp)
    3810:	02010113          	addi	sp,sp,32
    3814:	00008067          	ret

00003818 <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
    3818:	fd010113          	addi	sp,sp,-48
    381c:	02112623          	sw	ra,44(sp)
    3820:	02812423          	sw	s0,40(sp)
    3824:	03010413          	addi	s0,sp,48
    3828:	fca42e23          	sw	a0,-36(s0)
    382c:	fcb42c23          	sw	a1,-40(s0)
    3830:	fcc42a23          	sw	a2,-44(s0)
    3834:	fcd42823          	sw	a3,-48(s0)
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
    3838:	fdc42783          	lw	a5,-36(s0)
    383c:	00079863          	bnez	a5,384c <vTaskGetInfo+0x34>
    3840:	000287b7          	lui	a5,0x28
    3844:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3848:	0080006f          	j	3850 <vTaskGetInfo+0x38>
    384c:	fdc42783          	lw	a5,-36(s0)
    3850:	fef42623          	sw	a5,-20(s0)

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
    3854:	fd842783          	lw	a5,-40(s0)
    3858:	fec42703          	lw	a4,-20(s0)
    385c:	00e7a023          	sw	a4,0(a5)
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
    3860:	fec42783          	lw	a5,-20(s0)
    3864:	03478713          	addi	a4,a5,52
    3868:	fd842783          	lw	a5,-40(s0)
    386c:	00e7a223          	sw	a4,4(a5)
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
    3870:	fec42783          	lw	a5,-20(s0)
    3874:	02c7a703          	lw	a4,44(a5)
    3878:	fd842783          	lw	a5,-40(s0)
    387c:	00e7a823          	sw	a4,16(a5)
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
    3880:	fec42783          	lw	a5,-20(s0)
    3884:	0307a703          	lw	a4,48(a5)
    3888:	fd842783          	lw	a5,-40(s0)
    388c:	00e7ae23          	sw	a4,28(a5)
        #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
    3890:	fec42783          	lw	a5,-20(s0)
    3894:	0447a703          	lw	a4,68(a5)
    3898:	fd842783          	lw	a5,-40(s0)
    389c:	00e7a423          	sw	a4,8(a5)

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
    38a0:	fec42783          	lw	a5,-20(s0)
    38a4:	04c7a703          	lw	a4,76(a5)
    38a8:	fd842783          	lw	a5,-40(s0)
    38ac:	00e7aa23          	sw	a4,20(a5)
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
    38b0:	fd842783          	lw	a5,-40(s0)
    38b4:	0007ac23          	sw	zero,24(a5)
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
    38b8:	fd042703          	lw	a4,-48(s0)
    38bc:	00500793          	li	a5,5
    38c0:	04f70e63          	beq	a4,a5,391c <vTaskGetInfo+0x104>
        {
            if( pxTCB == pxCurrentTCB )
    38c4:	000287b7          	lui	a5,0x28
    38c8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    38cc:	fec42703          	lw	a4,-20(s0)
    38d0:	00f71863          	bne	a4,a5,38e0 <vTaskGetInfo+0xc8>
            {
                pxTaskStatus->eCurrentState = eRunning;
    38d4:	fd842783          	lw	a5,-40(s0)
    38d8:	0007a623          	sw	zero,12(a5)
    38dc:	0540006f          	j	3930 <vTaskGetInfo+0x118>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
    38e0:	fd842783          	lw	a5,-40(s0)
    38e4:	fd042703          	lw	a4,-48(s0)
    38e8:	00e7a623          	sw	a4,12(a5)
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
    38ec:	fd042703          	lw	a4,-48(s0)
    38f0:	00300793          	li	a5,3
    38f4:	02f71e63          	bne	a4,a5,3930 <vTaskGetInfo+0x118>
                    {
                        vTaskSuspendAll();
    38f8:	994fe0ef          	jal	ra,1a8c <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    38fc:	fec42783          	lw	a5,-20(s0)
    3900:	0287a783          	lw	a5,40(a5)
    3904:	00078863          	beqz	a5,3914 <vTaskGetInfo+0xfc>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
    3908:	fd842783          	lw	a5,-40(s0)
    390c:	00200713          	li	a4,2
    3910:	00e7a623          	sw	a4,12(a5)
                            }
                        }
                        ( void ) xTaskResumeAll();
    3914:	9a8fe0ef          	jal	ra,1abc <xTaskResumeAll>
    3918:	0180006f          	j	3930 <vTaskGetInfo+0x118>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
    391c:	fec42503          	lw	a0,-20(s0)
    3920:	cacfd0ef          	jal	ra,dcc <eTaskGetState>
    3924:	00050713          	mv	a4,a0
    3928:	fd842783          	lw	a5,-40(s0)
    392c:	00e7a623          	sw	a4,12(a5)
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
    3930:	fd442783          	lw	a5,-44(s0)
    3934:	02078463          	beqz	a5,395c <vTaskGetInfo+0x144>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    3938:	fec42783          	lw	a5,-20(s0)
    393c:	0307a783          	lw	a5,48(a5)
    3940:	00078513          	mv	a0,a5
    3944:	16c000ef          	jal	ra,3ab0 <prvTaskCheckFreeStackSpace>
    3948:	00050793          	mv	a5,a0
    394c:	00078713          	mv	a4,a5
    3950:	fd842783          	lw	a5,-40(s0)
    3954:	02e79023          	sh	a4,32(a5)
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
    3958:	00c0006f          	j	3964 <vTaskGetInfo+0x14c>
            pxTaskStatus->usStackHighWaterMark = 0;
    395c:	fd842783          	lw	a5,-40(s0)
    3960:	02079023          	sh	zero,32(a5)
    }
    3964:	00000013          	nop
    3968:	02c12083          	lw	ra,44(sp)
    396c:	02812403          	lw	s0,40(sp)
    3970:	03010113          	addi	sp,sp,48
    3974:	00008067          	ret

00003978 <prvListTasksWithinSingleList>:
#if ( configUSE_TRACE_FACILITY == 1 )

    static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
                                                     List_t * pxList,
                                                     eTaskState eState )
    {
    3978:	fc010113          	addi	sp,sp,-64
    397c:	02112e23          	sw	ra,60(sp)
    3980:	02812c23          	sw	s0,56(sp)
    3984:	04010413          	addi	s0,sp,64
    3988:	fca42623          	sw	a0,-52(s0)
    398c:	fcb42423          	sw	a1,-56(s0)
    3990:	fcc42223          	sw	a2,-60(s0)
        configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
        UBaseType_t uxTask = 0;
    3994:	fc042e23          	sw	zero,-36(s0)

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    3998:	fc842783          	lw	a5,-56(s0)
    399c:	0007a783          	lw	a5,0(a5)
    39a0:	0e078c63          	beqz	a5,3a98 <prvListTasksWithinSingleList+0x120>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    39a4:	fc842783          	lw	a5,-56(s0)
    39a8:	fef42023          	sw	a5,-32(s0)
    39ac:	fe042783          	lw	a5,-32(s0)
    39b0:	0047a783          	lw	a5,4(a5)
    39b4:	0047a703          	lw	a4,4(a5)
    39b8:	fe042783          	lw	a5,-32(s0)
    39bc:	00e7a223          	sw	a4,4(a5)
    39c0:	fe042783          	lw	a5,-32(s0)
    39c4:	0047a703          	lw	a4,4(a5)
    39c8:	fe042783          	lw	a5,-32(s0)
    39cc:	00878793          	addi	a5,a5,8
    39d0:	00f71c63          	bne	a4,a5,39e8 <prvListTasksWithinSingleList+0x70>
    39d4:	fe042783          	lw	a5,-32(s0)
    39d8:	0047a783          	lw	a5,4(a5)
    39dc:	0047a703          	lw	a4,4(a5)
    39e0:	fe042783          	lw	a5,-32(s0)
    39e4:	00e7a223          	sw	a4,4(a5)
    39e8:	fe042783          	lw	a5,-32(s0)
    39ec:	0047a783          	lw	a5,4(a5)
    39f0:	00c7a783          	lw	a5,12(a5)
    39f4:	fef42223          	sw	a5,-28(s0)
             * pxTaskStatusArray array for each task that is referenced from
             * pxList.  See the definition of TaskStatus_t in task.h for the
             * meaning of each TaskStatus_t structure member. */
            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    39f8:	fc842783          	lw	a5,-56(s0)
    39fc:	fef42423          	sw	a5,-24(s0)
    3a00:	fe842783          	lw	a5,-24(s0)
    3a04:	0047a783          	lw	a5,4(a5)
    3a08:	0047a703          	lw	a4,4(a5)
    3a0c:	fe842783          	lw	a5,-24(s0)
    3a10:	00e7a223          	sw	a4,4(a5)
    3a14:	fe842783          	lw	a5,-24(s0)
    3a18:	0047a703          	lw	a4,4(a5)
    3a1c:	fe842783          	lw	a5,-24(s0)
    3a20:	00878793          	addi	a5,a5,8
    3a24:	00f71c63          	bne	a4,a5,3a3c <prvListTasksWithinSingleList+0xc4>
    3a28:	fe842783          	lw	a5,-24(s0)
    3a2c:	0047a783          	lw	a5,4(a5)
    3a30:	0047a703          	lw	a4,4(a5)
    3a34:	fe842783          	lw	a5,-24(s0)
    3a38:	00e7a223          	sw	a4,4(a5)
    3a3c:	fe842783          	lw	a5,-24(s0)
    3a40:	0047a783          	lw	a5,4(a5)
    3a44:	00c7a783          	lw	a5,12(a5)
    3a48:	fef42623          	sw	a5,-20(s0)
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
    3a4c:	fdc42703          	lw	a4,-36(s0)
    3a50:	00070793          	mv	a5,a4
    3a54:	00379793          	slli	a5,a5,0x3
    3a58:	00e787b3          	add	a5,a5,a4
    3a5c:	00279793          	slli	a5,a5,0x2
    3a60:	00078713          	mv	a4,a5
    3a64:	fcc42783          	lw	a5,-52(s0)
    3a68:	00e787b3          	add	a5,a5,a4
    3a6c:	fc442683          	lw	a3,-60(s0)
    3a70:	00100613          	li	a2,1
    3a74:	00078593          	mv	a1,a5
    3a78:	fec42503          	lw	a0,-20(s0)
    3a7c:	d9dff0ef          	jal	ra,3818 <vTaskGetInfo>
                uxTask++;
    3a80:	fdc42783          	lw	a5,-36(s0)
    3a84:	00178793          	addi	a5,a5,1
    3a88:	fcf42e23          	sw	a5,-36(s0)
            } while( pxNextTCB != pxFirstTCB );
    3a8c:	fec42703          	lw	a4,-20(s0)
    3a90:	fe442783          	lw	a5,-28(s0)
    3a94:	f6f712e3          	bne	a4,a5,39f8 <prvListTasksWithinSingleList+0x80>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return uxTask;
    3a98:	fdc42783          	lw	a5,-36(s0)
    }
    3a9c:	00078513          	mv	a0,a5
    3aa0:	03c12083          	lw	ra,60(sp)
    3aa4:	03812403          	lw	s0,56(sp)
    3aa8:	04010113          	addi	sp,sp,64
    3aac:	00008067          	ret

00003ab0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
    3ab0:	fd010113          	addi	sp,sp,-48
    3ab4:	02812623          	sw	s0,44(sp)
    3ab8:	03010413          	addi	s0,sp,48
    3abc:	fca42e23          	sw	a0,-36(s0)
        uint32_t ulCount = 0U;
    3ac0:	fe042623          	sw	zero,-20(s0)

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3ac4:	01c0006f          	j	3ae0 <prvTaskCheckFreeStackSpace+0x30>
        {
            pucStackByte -= portSTACK_GROWTH;
    3ac8:	fdc42783          	lw	a5,-36(s0)
    3acc:	00178793          	addi	a5,a5,1
    3ad0:	fcf42e23          	sw	a5,-36(s0)
            ulCount++;
    3ad4:	fec42783          	lw	a5,-20(s0)
    3ad8:	00178793          	addi	a5,a5,1
    3adc:	fef42623          	sw	a5,-20(s0)
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    3ae0:	fdc42783          	lw	a5,-36(s0)
    3ae4:	0007c703          	lbu	a4,0(a5)
    3ae8:	0a500793          	li	a5,165
    3aec:	fcf70ee3          	beq	a4,a5,3ac8 <prvTaskCheckFreeStackSpace+0x18>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    3af0:	fec42783          	lw	a5,-20(s0)
    3af4:	0027d793          	srli	a5,a5,0x2
    3af8:	fef42623          	sw	a5,-20(s0)

        return ( configSTACK_DEPTH_TYPE ) ulCount;
    3afc:	fec42783          	lw	a5,-20(s0)
    3b00:	01079793          	slli	a5,a5,0x10
    3b04:	0107d793          	srli	a5,a5,0x10
    }
    3b08:	00078513          	mv	a0,a5
    3b0c:	02c12403          	lw	s0,44(sp)
    3b10:	03010113          	addi	sp,sp,48
    3b14:	00008067          	ret

00003b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
    3b18:	fe010113          	addi	sp,sp,-32
    3b1c:	00112e23          	sw	ra,28(sp)
    3b20:	00812c23          	sw	s0,24(sp)
    3b24:	02010413          	addi	s0,sp,32
    3b28:	fea42623          	sw	a0,-20(s0)
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
    3b2c:	000287b7          	lui	a5,0x28
    3b30:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3b34:	15878793          	addi	a5,a5,344
    3b38:	00078513          	mv	a0,a5
    3b3c:	0400a0ef          	jal	ra,db7c <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
    3b40:	fec42783          	lw	a5,-20(s0)
    3b44:	0307a783          	lw	a5,48(a5)
    3b48:	00078513          	mv	a0,a5
    3b4c:	105040ef          	jal	ra,8450 <vPortFree>
            vPortFree( pxTCB );
    3b50:	fec42503          	lw	a0,-20(s0)
    3b54:	0fd040ef          	jal	ra,8450 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
    3b58:	00000013          	nop
    3b5c:	01c12083          	lw	ra,28(sp)
    3b60:	01812403          	lw	s0,24(sp)
    3b64:	02010113          	addi	sp,sp,32
    3b68:	00008067          	ret

00003b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3b6c:	ff010113          	addi	sp,sp,-16
    3b70:	00812623          	sw	s0,12(sp)
    3b74:	01010413          	addi	s0,sp,16
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3b78:	000287b7          	lui	a5,0x28
    3b7c:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    3b80:	0007a783          	lw	a5,0(a5)
    3b84:	00079a63          	bnez	a5,3b98 <prvResetNextTaskUnblockTime+0x2c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
    3b88:	000287b7          	lui	a5,0x28
    3b8c:	fff00713          	li	a4,-1
    3b90:	e0e7a023          	sw	a4,-512(a5) # 27e00 <xNextTaskUnblockTime>
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
    3b94:	01c0006f          	j	3bb0 <prvResetNextTaskUnblockTime+0x44>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    3b98:	000287b7          	lui	a5,0x28
    3b9c:	d987a783          	lw	a5,-616(a5) # 27d98 <pxDelayedTaskList>
    3ba0:	00c7a783          	lw	a5,12(a5)
    3ba4:	0007a703          	lw	a4,0(a5)
    3ba8:	000287b7          	lui	a5,0x28
    3bac:	e0e7a023          	sw	a4,-512(a5) # 27e00 <xNextTaskUnblockTime>
}
    3bb0:	00000013          	nop
    3bb4:	00c12403          	lw	s0,12(sp)
    3bb8:	01010113          	addi	sp,sp,16
    3bbc:	00008067          	ret

00003bc0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
    3bc0:	fe010113          	addi	sp,sp,-32
    3bc4:	00812e23          	sw	s0,28(sp)
    3bc8:	02010413          	addi	s0,sp,32
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
    3bcc:	000287b7          	lui	a5,0x28
    3bd0:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3bd4:	fef42623          	sw	a5,-20(s0)

        return xReturn;
    3bd8:	fec42783          	lw	a5,-20(s0)
    }
    3bdc:	00078513          	mv	a0,a5
    3be0:	01c12403          	lw	s0,28(sp)
    3be4:	02010113          	addi	sp,sp,32
    3be8:	00008067          	ret

00003bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
    3bec:	fe010113          	addi	sp,sp,-32
    3bf0:	00812e23          	sw	s0,28(sp)
    3bf4:	02010413          	addi	s0,sp,32
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    3bf8:	000287b7          	lui	a5,0x28
    3bfc:	dec7a783          	lw	a5,-532(a5) # 27dec <xSchedulerRunning>
    3c00:	00079863          	bnez	a5,3c10 <xTaskGetSchedulerState+0x24>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    3c04:	00100793          	li	a5,1
    3c08:	fef42623          	sw	a5,-20(s0)
    3c0c:	0200006f          	j	3c2c <xTaskGetSchedulerState+0x40>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3c10:	000287b7          	lui	a5,0x28
    3c14:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    3c18:	00079863          	bnez	a5,3c28 <xTaskGetSchedulerState+0x3c>
            {
                xReturn = taskSCHEDULER_RUNNING;
    3c1c:	00200793          	li	a5,2
    3c20:	fef42623          	sw	a5,-20(s0)
    3c24:	0080006f          	j	3c2c <xTaskGetSchedulerState+0x40>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    3c28:	fe042623          	sw	zero,-20(s0)
            }
        }

        return xReturn;
    3c2c:	fec42783          	lw	a5,-20(s0)
    }
    3c30:	00078513          	mv	a0,a5
    3c34:	01c12403          	lw	s0,28(sp)
    3c38:	02010113          	addi	sp,sp,32
    3c3c:	00008067          	ret

00003c40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
    3c40:	fd010113          	addi	sp,sp,-48
    3c44:	02112623          	sw	ra,44(sp)
    3c48:	02812423          	sw	s0,40(sp)
    3c4c:	03010413          	addi	s0,sp,48
    3c50:	fca42e23          	sw	a0,-36(s0)
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
    3c54:	fdc42783          	lw	a5,-36(s0)
    3c58:	fef42423          	sw	a5,-24(s0)
        BaseType_t xReturn = pdFALSE;
    3c5c:	fe042223          	sw	zero,-28(s0)

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
    3c60:	fdc42783          	lw	a5,-36(s0)
    3c64:	20078a63          	beqz	a5,3e78 <xTaskPriorityInherit+0x238>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    3c68:	fe842783          	lw	a5,-24(s0)
    3c6c:	02c7a703          	lw	a4,44(a5)
    3c70:	000287b7          	lui	a5,0x28
    3c74:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3c78:	02c7a783          	lw	a5,44(a5)
    3c7c:	1cf77e63          	bgeu	a4,a5,3e58 <xTaskPriorityInherit+0x218>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    3c80:	fe842783          	lw	a5,-24(s0)
    3c84:	0187a783          	lw	a5,24(a5)
    3c88:	0207c063          	bltz	a5,3ca8 <xTaskPriorityInherit+0x68>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3c8c:	000287b7          	lui	a5,0x28
    3c90:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3c94:	02c7a783          	lw	a5,44(a5)
    3c98:	00700713          	li	a4,7
    3c9c:	40f70733          	sub	a4,a4,a5
    3ca0:	fe842783          	lw	a5,-24(s0)
    3ca4:	00e7ac23          	sw	a4,24(a5)
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    3ca8:	fe842783          	lw	a5,-24(s0)
    3cac:	0147a683          	lw	a3,20(a5)
    3cb0:	fe842783          	lw	a5,-24(s0)
    3cb4:	02c7a703          	lw	a4,44(a5)
    3cb8:	00070793          	mv	a5,a4
    3cbc:	00279793          	slli	a5,a5,0x2
    3cc0:	00e787b3          	add	a5,a5,a4
    3cc4:	00279793          	slli	a5,a5,0x2
    3cc8:	00028737          	lui	a4,0x28
    3ccc:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    3cd0:	00e787b3          	add	a5,a5,a4
    3cd4:	16f69263          	bne	a3,a5,3e38 <xTaskPriorityInherit+0x1f8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3cd8:	fe842783          	lw	a5,-24(s0)
    3cdc:	00478793          	addi	a5,a5,4
    3ce0:	00078513          	mv	a0,a5
    3ce4:	185050ef          	jal	ra,9668 <uxListRemove>
    3ce8:	00050793          	mv	a5,a0
    3cec:	02079663          	bnez	a5,3d18 <xTaskPriorityInherit+0xd8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
    3cf0:	fe842783          	lw	a5,-24(s0)
    3cf4:	02c7a783          	lw	a5,44(a5)
    3cf8:	00100713          	li	a4,1
    3cfc:	00f717b3          	sll	a5,a4,a5
    3d00:	fff7c713          	not	a4,a5
    3d04:	000287b7          	lui	a5,0x28
    3d08:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    3d0c:	00f77733          	and	a4,a4,a5
    3d10:	000287b7          	lui	a5,0x28
    3d14:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    3d18:	000287b7          	lui	a5,0x28
    3d1c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3d20:	02c7a703          	lw	a4,44(a5)
    3d24:	fe842783          	lw	a5,-24(s0)
    3d28:	02e7a623          	sw	a4,44(a5)
                    prvAddTaskToReadyList( pxMutexHolderTCB );
    3d2c:	fe842783          	lw	a5,-24(s0)
    3d30:	02c7a783          	lw	a5,44(a5)
    3d34:	00100713          	li	a4,1
    3d38:	00f71733          	sll	a4,a4,a5
    3d3c:	000287b7          	lui	a5,0x28
    3d40:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    3d44:	00f76733          	or	a4,a4,a5
    3d48:	000287b7          	lui	a5,0x28
    3d4c:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    3d50:	fe842783          	lw	a5,-24(s0)
    3d54:	02c7a703          	lw	a4,44(a5)
    3d58:	000287b7          	lui	a5,0x28
    3d5c:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    3d60:	00070793          	mv	a5,a4
    3d64:	00279793          	slli	a5,a5,0x2
    3d68:	00e787b3          	add	a5,a5,a4
    3d6c:	00279793          	slli	a5,a5,0x2
    3d70:	00f687b3          	add	a5,a3,a5
    3d74:	0047a783          	lw	a5,4(a5)
    3d78:	fef42623          	sw	a5,-20(s0)
    3d7c:	fe842783          	lw	a5,-24(s0)
    3d80:	fec42703          	lw	a4,-20(s0)
    3d84:	00e7a423          	sw	a4,8(a5)
    3d88:	fec42783          	lw	a5,-20(s0)
    3d8c:	0087a703          	lw	a4,8(a5)
    3d90:	fe842783          	lw	a5,-24(s0)
    3d94:	00e7a623          	sw	a4,12(a5)
    3d98:	fec42783          	lw	a5,-20(s0)
    3d9c:	0087a783          	lw	a5,8(a5)
    3da0:	fe842703          	lw	a4,-24(s0)
    3da4:	00470713          	addi	a4,a4,4
    3da8:	00e7a223          	sw	a4,4(a5)
    3dac:	fe842783          	lw	a5,-24(s0)
    3db0:	00478713          	addi	a4,a5,4
    3db4:	fec42783          	lw	a5,-20(s0)
    3db8:	00e7a423          	sw	a4,8(a5)
    3dbc:	fe842783          	lw	a5,-24(s0)
    3dc0:	02c7a703          	lw	a4,44(a5)
    3dc4:	00070793          	mv	a5,a4
    3dc8:	00279793          	slli	a5,a5,0x2
    3dcc:	00e787b3          	add	a5,a5,a4
    3dd0:	00279793          	slli	a5,a5,0x2
    3dd4:	00028737          	lui	a4,0x28
    3dd8:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    3ddc:	00e78733          	add	a4,a5,a4
    3de0:	fe842783          	lw	a5,-24(s0)
    3de4:	00e7aa23          	sw	a4,20(a5)
    3de8:	fe842783          	lw	a5,-24(s0)
    3dec:	02c7a703          	lw	a4,44(a5)
    3df0:	000287b7          	lui	a5,0x28
    3df4:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    3df8:	00070793          	mv	a5,a4
    3dfc:	00279793          	slli	a5,a5,0x2
    3e00:	00e787b3          	add	a5,a5,a4
    3e04:	00279793          	slli	a5,a5,0x2
    3e08:	00f687b3          	add	a5,a3,a5
    3e0c:	0007a783          	lw	a5,0(a5)
    3e10:	00178693          	addi	a3,a5,1
    3e14:	000287b7          	lui	a5,0x28
    3e18:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    3e1c:	00070793          	mv	a5,a4
    3e20:	00279793          	slli	a5,a5,0x2
    3e24:	00e787b3          	add	a5,a5,a4
    3e28:	00279793          	slli	a5,a5,0x2
    3e2c:	00f607b3          	add	a5,a2,a5
    3e30:	00d7a023          	sw	a3,0(a5)
    3e34:	0180006f          	j	3e4c <xTaskPriorityInherit+0x20c>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    3e38:	000287b7          	lui	a5,0x28
    3e3c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3e40:	02c7a703          	lw	a4,44(a5)
    3e44:	fe842783          	lw	a5,-24(s0)
    3e48:	02e7a623          	sw	a4,44(a5)
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
    3e4c:	00100793          	li	a5,1
    3e50:	fef42223          	sw	a5,-28(s0)
    3e54:	0240006f          	j	3e78 <xTaskPriorityInherit+0x238>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    3e58:	fe842783          	lw	a5,-24(s0)
    3e5c:	04c7a703          	lw	a4,76(a5)
    3e60:	000287b7          	lui	a5,0x28
    3e64:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3e68:	02c7a783          	lw	a5,44(a5)
    3e6c:	00f77663          	bgeu	a4,a5,3e78 <xTaskPriorityInherit+0x238>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
    3e70:	00100793          	li	a5,1
    3e74:	fef42223          	sw	a5,-28(s0)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    3e78:	fe442783          	lw	a5,-28(s0)
    }
    3e7c:	00078513          	mv	a0,a5
    3e80:	02c12083          	lw	ra,44(sp)
    3e84:	02812403          	lw	s0,40(sp)
    3e88:	03010113          	addi	sp,sp,48
    3e8c:	00008067          	ret

00003e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    3e90:	fd010113          	addi	sp,sp,-48
    3e94:	02112623          	sw	ra,44(sp)
    3e98:	02812423          	sw	s0,40(sp)
    3e9c:	03010413          	addi	s0,sp,48
    3ea0:	fca42e23          	sw	a0,-36(s0)
        TCB_t * const pxTCB = pxMutexHolder;
    3ea4:	fdc42783          	lw	a5,-36(s0)
    3ea8:	fef42423          	sw	a5,-24(s0)
        BaseType_t xReturn = pdFALSE;
    3eac:	fe042223          	sw	zero,-28(s0)

        if( pxMutexHolder != NULL )
    3eb0:	fdc42783          	lw	a5,-36(s0)
    3eb4:	1e078663          	beqz	a5,40a0 <xTaskPriorityDisinherit+0x210>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
    3eb8:	000287b7          	lui	a5,0x28
    3ebc:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    3ec0:	fe842703          	lw	a4,-24(s0)
    3ec4:	00f70a63          	beq	a4,a5,3ed8 <xTaskPriorityDisinherit+0x48>
    3ec8:	30047073          	csrci	mstatus,8
    3ecc:	00100073          	ebreak
    3ed0:	00000013          	nop
    3ed4:	ffdff06f          	j	3ed0 <xTaskPriorityDisinherit+0x40>
            configASSERT( pxTCB->uxMutexesHeld );
    3ed8:	fe842783          	lw	a5,-24(s0)
    3edc:	0507a783          	lw	a5,80(a5)
    3ee0:	00079a63          	bnez	a5,3ef4 <xTaskPriorityDisinherit+0x64>
    3ee4:	30047073          	csrci	mstatus,8
    3ee8:	00100073          	ebreak
    3eec:	00000013          	nop
    3ef0:	ffdff06f          	j	3eec <xTaskPriorityDisinherit+0x5c>
            ( pxTCB->uxMutexesHeld )--;
    3ef4:	fe842783          	lw	a5,-24(s0)
    3ef8:	0507a783          	lw	a5,80(a5)
    3efc:	fff78713          	addi	a4,a5,-1
    3f00:	fe842783          	lw	a5,-24(s0)
    3f04:	04e7a823          	sw	a4,80(a5)

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    3f08:	fe842783          	lw	a5,-24(s0)
    3f0c:	02c7a703          	lw	a4,44(a5)
    3f10:	fe842783          	lw	a5,-24(s0)
    3f14:	04c7a783          	lw	a5,76(a5)
    3f18:	18f70463          	beq	a4,a5,40a0 <xTaskPriorityDisinherit+0x210>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    3f1c:	fe842783          	lw	a5,-24(s0)
    3f20:	0507a783          	lw	a5,80(a5)
    3f24:	16079e63          	bnez	a5,40a0 <xTaskPriorityDisinherit+0x210>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3f28:	fe842783          	lw	a5,-24(s0)
    3f2c:	00478793          	addi	a5,a5,4
    3f30:	00078513          	mv	a0,a5
    3f34:	734050ef          	jal	ra,9668 <uxListRemove>
    3f38:	00050793          	mv	a5,a0
    3f3c:	02079663          	bnez	a5,3f68 <xTaskPriorityDisinherit+0xd8>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
    3f40:	fe842783          	lw	a5,-24(s0)
    3f44:	02c7a783          	lw	a5,44(a5)
    3f48:	00100713          	li	a4,1
    3f4c:	00f717b3          	sll	a5,a4,a5
    3f50:	fff7c713          	not	a4,a5
    3f54:	000287b7          	lui	a5,0x28
    3f58:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    3f5c:	00f77733          	and	a4,a4,a5
    3f60:	000287b7          	lui	a5,0x28
    3f64:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    3f68:	fe842783          	lw	a5,-24(s0)
    3f6c:	04c7a703          	lw	a4,76(a5)
    3f70:	fe842783          	lw	a5,-24(s0)
    3f74:	02e7a623          	sw	a4,44(a5)

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3f78:	fe842783          	lw	a5,-24(s0)
    3f7c:	02c7a783          	lw	a5,44(a5)
    3f80:	00700713          	li	a4,7
    3f84:	40f70733          	sub	a4,a4,a5
    3f88:	fe842783          	lw	a5,-24(s0)
    3f8c:	00e7ac23          	sw	a4,24(a5)
                    prvAddTaskToReadyList( pxTCB );
    3f90:	fe842783          	lw	a5,-24(s0)
    3f94:	02c7a783          	lw	a5,44(a5)
    3f98:	00100713          	li	a4,1
    3f9c:	00f71733          	sll	a4,a4,a5
    3fa0:	000287b7          	lui	a5,0x28
    3fa4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    3fa8:	00f76733          	or	a4,a4,a5
    3fac:	000287b7          	lui	a5,0x28
    3fb0:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    3fb4:	fe842783          	lw	a5,-24(s0)
    3fb8:	02c7a703          	lw	a4,44(a5)
    3fbc:	000287b7          	lui	a5,0x28
    3fc0:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    3fc4:	00070793          	mv	a5,a4
    3fc8:	00279793          	slli	a5,a5,0x2
    3fcc:	00e787b3          	add	a5,a5,a4
    3fd0:	00279793          	slli	a5,a5,0x2
    3fd4:	00f687b3          	add	a5,a3,a5
    3fd8:	0047a783          	lw	a5,4(a5)
    3fdc:	fef42623          	sw	a5,-20(s0)
    3fe0:	fe842783          	lw	a5,-24(s0)
    3fe4:	fec42703          	lw	a4,-20(s0)
    3fe8:	00e7a423          	sw	a4,8(a5)
    3fec:	fec42783          	lw	a5,-20(s0)
    3ff0:	0087a703          	lw	a4,8(a5)
    3ff4:	fe842783          	lw	a5,-24(s0)
    3ff8:	00e7a623          	sw	a4,12(a5)
    3ffc:	fec42783          	lw	a5,-20(s0)
    4000:	0087a783          	lw	a5,8(a5)
    4004:	fe842703          	lw	a4,-24(s0)
    4008:	00470713          	addi	a4,a4,4
    400c:	00e7a223          	sw	a4,4(a5)
    4010:	fe842783          	lw	a5,-24(s0)
    4014:	00478713          	addi	a4,a5,4
    4018:	fec42783          	lw	a5,-20(s0)
    401c:	00e7a423          	sw	a4,8(a5)
    4020:	fe842783          	lw	a5,-24(s0)
    4024:	02c7a703          	lw	a4,44(a5)
    4028:	00070793          	mv	a5,a4
    402c:	00279793          	slli	a5,a5,0x2
    4030:	00e787b3          	add	a5,a5,a4
    4034:	00279793          	slli	a5,a5,0x2
    4038:	00028737          	lui	a4,0x28
    403c:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    4040:	00e78733          	add	a4,a5,a4
    4044:	fe842783          	lw	a5,-24(s0)
    4048:	00e7aa23          	sw	a4,20(a5)
    404c:	fe842783          	lw	a5,-24(s0)
    4050:	02c7a703          	lw	a4,44(a5)
    4054:	000287b7          	lui	a5,0x28
    4058:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    405c:	00070793          	mv	a5,a4
    4060:	00279793          	slli	a5,a5,0x2
    4064:	00e787b3          	add	a5,a5,a4
    4068:	00279793          	slli	a5,a5,0x2
    406c:	00f687b3          	add	a5,a3,a5
    4070:	0007a783          	lw	a5,0(a5)
    4074:	00178693          	addi	a3,a5,1
    4078:	000287b7          	lui	a5,0x28
    407c:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    4080:	00070793          	mv	a5,a4
    4084:	00279793          	slli	a5,a5,0x2
    4088:	00e787b3          	add	a5,a5,a4
    408c:	00279793          	slli	a5,a5,0x2
    4090:	00f607b3          	add	a5,a2,a5
    4094:	00d7a023          	sw	a3,0(a5)
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    4098:	00100793          	li	a5,1
    409c:	fef42223          	sw	a5,-28(s0)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    40a0:	fe442783          	lw	a5,-28(s0)
    }
    40a4:	00078513          	mv	a0,a5
    40a8:	02c12083          	lw	ra,44(sp)
    40ac:	02812403          	lw	s0,40(sp)
    40b0:	03010113          	addi	sp,sp,48
    40b4:	00008067          	ret

000040b8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
    40b8:	fc010113          	addi	sp,sp,-64
    40bc:	02112e23          	sw	ra,60(sp)
    40c0:	02812c23          	sw	s0,56(sp)
    40c4:	04010413          	addi	s0,sp,64
    40c8:	fca42623          	sw	a0,-52(s0)
    40cc:	fcb42423          	sw	a1,-56(s0)
        TCB_t * const pxTCB = pxMutexHolder;
    40d0:	fcc42783          	lw	a5,-52(s0)
    40d4:	fef42023          	sw	a5,-32(s0)
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
    40d8:	00100793          	li	a5,1
    40dc:	fef42223          	sw	a5,-28(s0)

        if( pxMutexHolder != NULL )
    40e0:	fcc42783          	lw	a5,-52(s0)
    40e4:	22078a63          	beqz	a5,4318 <vTaskPriorityDisinheritAfterTimeout+0x260>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
    40e8:	fe042783          	lw	a5,-32(s0)
    40ec:	0507a783          	lw	a5,80(a5)
    40f0:	00079a63          	bnez	a5,4104 <vTaskPriorityDisinheritAfterTimeout+0x4c>
    40f4:	30047073          	csrci	mstatus,8
    40f8:	00100073          	ebreak
    40fc:	00000013          	nop
    4100:	ffdff06f          	j	40fc <vTaskPriorityDisinheritAfterTimeout+0x44>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    4104:	fe042783          	lw	a5,-32(s0)
    4108:	04c7a783          	lw	a5,76(a5)
    410c:	fc842703          	lw	a4,-56(s0)
    4110:	00e7f863          	bgeu	a5,a4,4120 <vTaskPriorityDisinheritAfterTimeout+0x68>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
    4114:	fc842783          	lw	a5,-56(s0)
    4118:	fcf42e23          	sw	a5,-36(s0)
    411c:	0100006f          	j	412c <vTaskPriorityDisinheritAfterTimeout+0x74>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
    4120:	fe042783          	lw	a5,-32(s0)
    4124:	04c7a783          	lw	a5,76(a5)
    4128:	fcf42e23          	sw	a5,-36(s0)
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
    412c:	fe042783          	lw	a5,-32(s0)
    4130:	02c7a783          	lw	a5,44(a5)
    4134:	fdc42703          	lw	a4,-36(s0)
    4138:	1ef70063          	beq	a4,a5,4318 <vTaskPriorityDisinheritAfterTimeout+0x260>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    413c:	fe042783          	lw	a5,-32(s0)
    4140:	0507a783          	lw	a5,80(a5)
    4144:	fe442703          	lw	a4,-28(s0)
    4148:	1cf71863          	bne	a4,a5,4318 <vTaskPriorityDisinheritAfterTimeout+0x260>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
    414c:	000287b7          	lui	a5,0x28
    4150:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    4154:	fe042703          	lw	a4,-32(s0)
    4158:	00f71a63          	bne	a4,a5,416c <vTaskPriorityDisinheritAfterTimeout+0xb4>
    415c:	30047073          	csrci	mstatus,8
    4160:	00100073          	ebreak
    4164:	00000013          	nop
    4168:	ffdff06f          	j	4164 <vTaskPriorityDisinheritAfterTimeout+0xac>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
    416c:	fe042783          	lw	a5,-32(s0)
    4170:	02c7a783          	lw	a5,44(a5)
    4174:	fef42423          	sw	a5,-24(s0)
                    pxTCB->uxPriority = uxPriorityToUse;
    4178:	fe042783          	lw	a5,-32(s0)
    417c:	fdc42703          	lw	a4,-36(s0)
    4180:	02e7a623          	sw	a4,44(a5)

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4184:	fe042783          	lw	a5,-32(s0)
    4188:	0187a783          	lw	a5,24(a5)
    418c:	0007cc63          	bltz	a5,41a4 <vTaskPriorityDisinheritAfterTimeout+0xec>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4190:	00700713          	li	a4,7
    4194:	fdc42783          	lw	a5,-36(s0)
    4198:	40f70733          	sub	a4,a4,a5
    419c:	fe042783          	lw	a5,-32(s0)
    41a0:	00e7ac23          	sw	a4,24(a5)
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    41a4:	fe042783          	lw	a5,-32(s0)
    41a8:	0147a683          	lw	a3,20(a5)
    41ac:	fe842703          	lw	a4,-24(s0)
    41b0:	00070793          	mv	a5,a4
    41b4:	00279793          	slli	a5,a5,0x2
    41b8:	00e787b3          	add	a5,a5,a4
    41bc:	00279793          	slli	a5,a5,0x2
    41c0:	00028737          	lui	a4,0x28
    41c4:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    41c8:	00e787b3          	add	a5,a5,a4
    41cc:	14f69663          	bne	a3,a5,4318 <vTaskPriorityDisinheritAfterTimeout+0x260>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    41d0:	fe042783          	lw	a5,-32(s0)
    41d4:	00478793          	addi	a5,a5,4
    41d8:	00078513          	mv	a0,a5
    41dc:	48c050ef          	jal	ra,9668 <uxListRemove>
    41e0:	00050793          	mv	a5,a0
    41e4:	02079663          	bnez	a5,4210 <vTaskPriorityDisinheritAfterTimeout+0x158>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
    41e8:	fe042783          	lw	a5,-32(s0)
    41ec:	02c7a783          	lw	a5,44(a5)
    41f0:	00100713          	li	a4,1
    41f4:	00f717b3          	sll	a5,a4,a5
    41f8:	fff7c713          	not	a4,a5
    41fc:	000287b7          	lui	a5,0x28
    4200:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    4204:	00f77733          	and	a4,a4,a5
    4208:	000287b7          	lui	a5,0x28
    420c:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
    4210:	fe042783          	lw	a5,-32(s0)
    4214:	02c7a783          	lw	a5,44(a5)
    4218:	00100713          	li	a4,1
    421c:	00f71733          	sll	a4,a4,a5
    4220:	000287b7          	lui	a5,0x28
    4224:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    4228:	00f76733          	or	a4,a4,a5
    422c:	000287b7          	lui	a5,0x28
    4230:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    4234:	fe042783          	lw	a5,-32(s0)
    4238:	02c7a703          	lw	a4,44(a5)
    423c:	000287b7          	lui	a5,0x28
    4240:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    4244:	00070793          	mv	a5,a4
    4248:	00279793          	slli	a5,a5,0x2
    424c:	00e787b3          	add	a5,a5,a4
    4250:	00279793          	slli	a5,a5,0x2
    4254:	00f687b3          	add	a5,a3,a5
    4258:	0047a783          	lw	a5,4(a5)
    425c:	fef42623          	sw	a5,-20(s0)
    4260:	fe042783          	lw	a5,-32(s0)
    4264:	fec42703          	lw	a4,-20(s0)
    4268:	00e7a423          	sw	a4,8(a5)
    426c:	fec42783          	lw	a5,-20(s0)
    4270:	0087a703          	lw	a4,8(a5)
    4274:	fe042783          	lw	a5,-32(s0)
    4278:	00e7a623          	sw	a4,12(a5)
    427c:	fec42783          	lw	a5,-20(s0)
    4280:	0087a783          	lw	a5,8(a5)
    4284:	fe042703          	lw	a4,-32(s0)
    4288:	00470713          	addi	a4,a4,4
    428c:	00e7a223          	sw	a4,4(a5)
    4290:	fe042783          	lw	a5,-32(s0)
    4294:	00478713          	addi	a4,a5,4
    4298:	fec42783          	lw	a5,-20(s0)
    429c:	00e7a423          	sw	a4,8(a5)
    42a0:	fe042783          	lw	a5,-32(s0)
    42a4:	02c7a703          	lw	a4,44(a5)
    42a8:	00070793          	mv	a5,a4
    42ac:	00279793          	slli	a5,a5,0x2
    42b0:	00e787b3          	add	a5,a5,a4
    42b4:	00279793          	slli	a5,a5,0x2
    42b8:	00028737          	lui	a4,0x28
    42bc:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    42c0:	00e78733          	add	a4,a5,a4
    42c4:	fe042783          	lw	a5,-32(s0)
    42c8:	00e7aa23          	sw	a4,20(a5)
    42cc:	fe042783          	lw	a5,-32(s0)
    42d0:	02c7a703          	lw	a4,44(a5)
    42d4:	000287b7          	lui	a5,0x28
    42d8:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    42dc:	00070793          	mv	a5,a4
    42e0:	00279793          	slli	a5,a5,0x2
    42e4:	00e787b3          	add	a5,a5,a4
    42e8:	00279793          	slli	a5,a5,0x2
    42ec:	00f687b3          	add	a5,a3,a5
    42f0:	0007a783          	lw	a5,0(a5)
    42f4:	00178693          	addi	a3,a5,1
    42f8:	000287b7          	lui	a5,0x28
    42fc:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    4300:	00070793          	mv	a5,a4
    4304:	00279793          	slli	a5,a5,0x2
    4308:	00e787b3          	add	a5,a5,a4
    430c:	00279793          	slli	a5,a5,0x2
    4310:	00f607b3          	add	a5,a2,a5
    4314:	00d7a023          	sw	a3,0(a5)
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    4318:	00000013          	nop
    431c:	03c12083          	lw	ra,60(sp)
    4320:	03812403          	lw	s0,56(sp)
    4324:	04010113          	addi	sp,sp,64
    4328:	00008067          	ret

0000432c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    432c:	fe010113          	addi	sp,sp,-32
    4330:	00812e23          	sw	s0,28(sp)
    4334:	02010413          	addi	s0,sp,32
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4338:	000287b7          	lui	a5,0x28
    433c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    4340:	0187a783          	lw	a5,24(a5)
    4344:	fef42623          	sw	a5,-20(s0)

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4348:	000287b7          	lui	a5,0x28
    434c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    4350:	02c7a703          	lw	a4,44(a5)
    4354:	000287b7          	lui	a5,0x28
    4358:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    435c:	00700693          	li	a3,7
    4360:	40e68733          	sub	a4,a3,a4
    4364:	00e7ac23          	sw	a4,24(a5)

    return uxReturn;
    4368:	fec42783          	lw	a5,-20(s0)
}
    436c:	00078513          	mv	a0,a5
    4370:	01c12403          	lw	s0,28(sp)
    4374:	02010113          	addi	sp,sp,32
    4378:	00008067          	ret

0000437c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
    437c:	ff010113          	addi	sp,sp,-16
    4380:	00812623          	sw	s0,12(sp)
    4384:	01010413          	addi	s0,sp,16
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    4388:	000287b7          	lui	a5,0x28
    438c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    4390:	00078c63          	beqz	a5,43a8 <pvTaskIncrementMutexHeldCount+0x2c>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    4394:	000287b7          	lui	a5,0x28
    4398:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    439c:	0507a703          	lw	a4,80(a5)
    43a0:	00170713          	addi	a4,a4,1
    43a4:	04e7a823          	sw	a4,80(a5)
        }

        return pxCurrentTCB;
    43a8:	000287b7          	lui	a5,0x28
    43ac:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    }
    43b0:	00078513          	mv	a0,a5
    43b4:	00c12403          	lw	s0,12(sp)
    43b8:	01010113          	addi	sp,sp,16
    43bc:	00008067          	ret

000043c0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
    43c0:	fd010113          	addi	sp,sp,-48
    43c4:	02112623          	sw	ra,44(sp)
    43c8:	02812423          	sw	s0,40(sp)
    43cc:	03010413          	addi	s0,sp,48
    43d0:	fca42e23          	sw	a0,-36(s0)
    43d4:	fcb42c23          	sw	a1,-40(s0)
    43d8:	fcc42a23          	sw	a2,-44(s0)
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
    43dc:	fdc42783          	lw	a5,-36(s0)
    43e0:	00078a63          	beqz	a5,43f4 <ulTaskGenericNotifyTake+0x34>
    43e4:	30047073          	csrci	mstatus,8
    43e8:	00100073          	ebreak
    43ec:	00000013          	nop
    43f0:	ffdff06f          	j	43ec <ulTaskGenericNotifyTake+0x2c>

        taskENTER_CRITICAL();
    43f4:	30047073          	csrci	mstatus,8
    43f8:	000267b7          	lui	a5,0x26
    43fc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4400:	00178713          	addi	a4,a5,1
    4404:	000267b7          	lui	a5,0x26
    4408:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
    440c:	000287b7          	lui	a5,0x28
    4410:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    4414:	fdc42783          	lw	a5,-36(s0)
    4418:	16078793          	addi	a5,a5,352
    441c:	00279793          	slli	a5,a5,0x2
    4420:	00f707b3          	add	a5,a4,a5
    4424:	0007a783          	lw	a5,0(a5)
    4428:	02079a63          	bnez	a5,445c <ulTaskGenericNotifyTake+0x9c>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
    442c:	000287b7          	lui	a5,0x28
    4430:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    4434:	fdc42783          	lw	a5,-36(s0)
    4438:	00f707b3          	add	a5,a4,a5
    443c:	00100713          	li	a4,1
    4440:	58e78223          	sb	a4,1412(a5)

                if( xTicksToWait > ( TickType_t ) 0 )
    4444:	fd442783          	lw	a5,-44(s0)
    4448:	00078a63          	beqz	a5,445c <ulTaskGenericNotifyTake+0x9c>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    444c:	00100593          	li	a1,1
    4450:	fd442503          	lw	a0,-44(s0)
    4454:	008010ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
    4458:	00000073          	ecall
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    445c:	000267b7          	lui	a5,0x26
    4460:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4464:	fff78713          	addi	a4,a5,-1
    4468:	000267b7          	lui	a5,0x26
    446c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    4470:	000267b7          	lui	a5,0x26
    4474:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4478:	00079463          	bnez	a5,4480 <ulTaskGenericNotifyTake+0xc0>
    447c:	30046073          	csrsi	mstatus,8

        taskENTER_CRITICAL();
    4480:	30047073          	csrci	mstatus,8
    4484:	000267b7          	lui	a5,0x26
    4488:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    448c:	00178713          	addi	a4,a5,1
    4490:	000267b7          	lui	a5,0x26
    4494:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
    4498:	000287b7          	lui	a5,0x28
    449c:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    44a0:	fdc42783          	lw	a5,-36(s0)
    44a4:	16078793          	addi	a5,a5,352
    44a8:	00279793          	slli	a5,a5,0x2
    44ac:	00f707b3          	add	a5,a4,a5
    44b0:	0007a783          	lw	a5,0(a5)
    44b4:	fef42623          	sw	a5,-20(s0)

            if( ulReturn != 0UL )
    44b8:	fec42783          	lw	a5,-20(s0)
    44bc:	04078863          	beqz	a5,450c <ulTaskGenericNotifyTake+0x14c>
            {
                if( xClearCountOnExit != pdFALSE )
    44c0:	fd842783          	lw	a5,-40(s0)
    44c4:	02078263          	beqz	a5,44e8 <ulTaskGenericNotifyTake+0x128>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
    44c8:	000287b7          	lui	a5,0x28
    44cc:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    44d0:	fdc42783          	lw	a5,-36(s0)
    44d4:	16078793          	addi	a5,a5,352
    44d8:	00279793          	slli	a5,a5,0x2
    44dc:	00f707b3          	add	a5,a4,a5
    44e0:	0007a023          	sw	zero,0(a5)
    44e4:	0280006f          	j	450c <ulTaskGenericNotifyTake+0x14c>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
    44e8:	000287b7          	lui	a5,0x28
    44ec:	c507a683          	lw	a3,-944(a5) # 27c50 <pxCurrentTCB>
    44f0:	fec42783          	lw	a5,-20(s0)
    44f4:	fff78713          	addi	a4,a5,-1
    44f8:	fdc42783          	lw	a5,-36(s0)
    44fc:	16078793          	addi	a5,a5,352
    4500:	00279793          	slli	a5,a5,0x2
    4504:	00f687b3          	add	a5,a3,a5
    4508:	00e7a023          	sw	a4,0(a5)
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
    450c:	000287b7          	lui	a5,0x28
    4510:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    4514:	fdc42783          	lw	a5,-36(s0)
    4518:	00f707b3          	add	a5,a4,a5
    451c:	58078223          	sb	zero,1412(a5)
        }
        taskEXIT_CRITICAL();
    4520:	000267b7          	lui	a5,0x26
    4524:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4528:	fff78713          	addi	a4,a5,-1
    452c:	000267b7          	lui	a5,0x26
    4530:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    4534:	000267b7          	lui	a5,0x26
    4538:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    453c:	00079463          	bnez	a5,4544 <ulTaskGenericNotifyTake+0x184>
    4540:	30046073          	csrsi	mstatus,8

        return ulReturn;
    4544:	fec42783          	lw	a5,-20(s0)
    }
    4548:	00078513          	mv	a0,a5
    454c:	02c12083          	lw	ra,44(sp)
    4550:	02812403          	lw	s0,40(sp)
    4554:	03010113          	addi	sp,sp,48
    4558:	00008067          	ret

0000455c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
    455c:	fc010113          	addi	sp,sp,-64
    4560:	02112e23          	sw	ra,60(sp)
    4564:	02812c23          	sw	s0,56(sp)
    4568:	04010413          	addi	s0,sp,64
    456c:	fca42e23          	sw	a0,-36(s0)
    4570:	fcb42c23          	sw	a1,-40(s0)
    4574:	fcc42a23          	sw	a2,-44(s0)
    4578:	fcd42823          	sw	a3,-48(s0)
    457c:	fce42623          	sw	a4,-52(s0)
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
    4580:	fdc42783          	lw	a5,-36(s0)
    4584:	00078a63          	beqz	a5,4598 <xTaskGenericNotifyWait+0x3c>
    4588:	30047073          	csrci	mstatus,8
    458c:	00100073          	ebreak
    4590:	00000013          	nop
    4594:	ffdff06f          	j	4590 <xTaskGenericNotifyWait+0x34>

        taskENTER_CRITICAL();
    4598:	30047073          	csrci	mstatus,8
    459c:	000267b7          	lui	a5,0x26
    45a0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    45a4:	00178713          	addi	a4,a5,1
    45a8:	000267b7          	lui	a5,0x26
    45ac:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
    45b0:	000287b7          	lui	a5,0x28
    45b4:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    45b8:	fdc42783          	lw	a5,-36(s0)
    45bc:	00f707b3          	add	a5,a4,a5
    45c0:	5847c783          	lbu	a5,1412(a5)
    45c4:	0ff7f713          	zext.b	a4,a5
    45c8:	00200793          	li	a5,2
    45cc:	06f70863          	beq	a4,a5,463c <xTaskGenericNotifyWait+0xe0>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
    45d0:	000287b7          	lui	a5,0x28
    45d4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    45d8:	fdc42703          	lw	a4,-36(s0)
    45dc:	16070713          	addi	a4,a4,352
    45e0:	00271713          	slli	a4,a4,0x2
    45e4:	00e78733          	add	a4,a5,a4
    45e8:	00072683          	lw	a3,0(a4)
    45ec:	fd842703          	lw	a4,-40(s0)
    45f0:	fff74713          	not	a4,a4
    45f4:	00e6f733          	and	a4,a3,a4
    45f8:	fdc42683          	lw	a3,-36(s0)
    45fc:	16068693          	addi	a3,a3,352
    4600:	00269693          	slli	a3,a3,0x2
    4604:	00d787b3          	add	a5,a5,a3
    4608:	00e7a023          	sw	a4,0(a5)

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
    460c:	000287b7          	lui	a5,0x28
    4610:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    4614:	fdc42783          	lw	a5,-36(s0)
    4618:	00f707b3          	add	a5,a4,a5
    461c:	00100713          	li	a4,1
    4620:	58e78223          	sb	a4,1412(a5)

                if( xTicksToWait > ( TickType_t ) 0 )
    4624:	fcc42783          	lw	a5,-52(s0)
    4628:	00078a63          	beqz	a5,463c <xTaskGenericNotifyWait+0xe0>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    462c:	00100593          	li	a1,1
    4630:	fcc42503          	lw	a0,-52(s0)
    4634:	629000ef          	jal	ra,545c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
    4638:	00000073          	ecall
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    463c:	000267b7          	lui	a5,0x26
    4640:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4644:	fff78713          	addi	a4,a5,-1
    4648:	000267b7          	lui	a5,0x26
    464c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    4650:	000267b7          	lui	a5,0x26
    4654:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4658:	00079463          	bnez	a5,4660 <xTaskGenericNotifyWait+0x104>
    465c:	30046073          	csrsi	mstatus,8

        taskENTER_CRITICAL();
    4660:	30047073          	csrci	mstatus,8
    4664:	000267b7          	lui	a5,0x26
    4668:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    466c:	00178713          	addi	a4,a5,1
    4670:	000267b7          	lui	a5,0x26
    4674:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
    4678:	fd042783          	lw	a5,-48(s0)
    467c:	02078463          	beqz	a5,46a4 <xTaskGenericNotifyWait+0x148>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
    4680:	000287b7          	lui	a5,0x28
    4684:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    4688:	fdc42783          	lw	a5,-36(s0)
    468c:	16078793          	addi	a5,a5,352
    4690:	00279793          	slli	a5,a5,0x2
    4694:	00f707b3          	add	a5,a4,a5
    4698:	0007a703          	lw	a4,0(a5)
    469c:	fd042783          	lw	a5,-48(s0)
    46a0:	00e7a023          	sw	a4,0(a5)

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
    46a4:	000287b7          	lui	a5,0x28
    46a8:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    46ac:	fdc42783          	lw	a5,-36(s0)
    46b0:	00f707b3          	add	a5,a4,a5
    46b4:	5847c783          	lbu	a5,1412(a5)
    46b8:	0ff7f713          	zext.b	a4,a5
    46bc:	00200793          	li	a5,2
    46c0:	00f70663          	beq	a4,a5,46cc <xTaskGenericNotifyWait+0x170>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
    46c4:	fe042623          	sw	zero,-20(s0)
    46c8:	0480006f          	j	4710 <xTaskGenericNotifyWait+0x1b4>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
    46cc:	000287b7          	lui	a5,0x28
    46d0:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    46d4:	fdc42703          	lw	a4,-36(s0)
    46d8:	16070713          	addi	a4,a4,352
    46dc:	00271713          	slli	a4,a4,0x2
    46e0:	00e78733          	add	a4,a5,a4
    46e4:	00072683          	lw	a3,0(a4)
    46e8:	fd442703          	lw	a4,-44(s0)
    46ec:	fff74713          	not	a4,a4
    46f0:	00e6f733          	and	a4,a3,a4
    46f4:	fdc42683          	lw	a3,-36(s0)
    46f8:	16068693          	addi	a3,a3,352
    46fc:	00269693          	slli	a3,a3,0x2
    4700:	00d787b3          	add	a5,a5,a3
    4704:	00e7a023          	sw	a4,0(a5)
                xReturn = pdTRUE;
    4708:	00100793          	li	a5,1
    470c:	fef42623          	sw	a5,-20(s0)
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
    4710:	000287b7          	lui	a5,0x28
    4714:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    4718:	fdc42783          	lw	a5,-36(s0)
    471c:	00f707b3          	add	a5,a4,a5
    4720:	58078223          	sb	zero,1412(a5)
        }
        taskEXIT_CRITICAL();
    4724:	000267b7          	lui	a5,0x26
    4728:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    472c:	fff78713          	addi	a4,a5,-1
    4730:	000267b7          	lui	a5,0x26
    4734:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    4738:	000267b7          	lui	a5,0x26
    473c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4740:	00079463          	bnez	a5,4748 <xTaskGenericNotifyWait+0x1ec>
    4744:	30046073          	csrsi	mstatus,8

        return xReturn;
    4748:	fec42783          	lw	a5,-20(s0)
    }
    474c:	00078513          	mv	a0,a5
    4750:	03c12083          	lw	ra,60(sp)
    4754:	03812403          	lw	s0,56(sp)
    4758:	04010113          	addi	sp,sp,64
    475c:	00008067          	ret

00004760 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
    4760:	fb010113          	addi	sp,sp,-80
    4764:	04812623          	sw	s0,76(sp)
    4768:	05010413          	addi	s0,sp,80
    476c:	fca42623          	sw	a0,-52(s0)
    4770:	fcb42423          	sw	a1,-56(s0)
    4774:	fcc42223          	sw	a2,-60(s0)
    4778:	fcd42023          	sw	a3,-64(s0)
    477c:	fae42e23          	sw	a4,-68(s0)
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
    4780:	00100793          	li	a5,1
    4784:	fef42023          	sw	a5,-32(s0)
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
    4788:	fc842783          	lw	a5,-56(s0)
    478c:	00078a63          	beqz	a5,47a0 <xTaskGenericNotify+0x40>
    4790:	30047073          	csrci	mstatus,8
    4794:	00100073          	ebreak
    4798:	00000013          	nop
    479c:	ffdff06f          	j	4798 <xTaskGenericNotify+0x38>
        configASSERT( xTaskToNotify );
    47a0:	fcc42783          	lw	a5,-52(s0)
    47a4:	00079a63          	bnez	a5,47b8 <xTaskGenericNotify+0x58>
    47a8:	30047073          	csrci	mstatus,8
    47ac:	00100073          	ebreak
    47b0:	00000013          	nop
    47b4:	ffdff06f          	j	47b0 <xTaskGenericNotify+0x50>
        pxTCB = xTaskToNotify;
    47b8:	fcc42783          	lw	a5,-52(s0)
    47bc:	fef42223          	sw	a5,-28(s0)

        taskENTER_CRITICAL();
    47c0:	30047073          	csrci	mstatus,8
    47c4:	000267b7          	lui	a5,0x26
    47c8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    47cc:	00178713          	addi	a4,a5,1
    47d0:	000267b7          	lui	a5,0x26
    47d4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( pulPreviousNotificationValue != NULL )
    47d8:	fbc42783          	lw	a5,-68(s0)
    47dc:	02078263          	beqz	a5,4800 <xTaskGenericNotify+0xa0>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    47e0:	fe442703          	lw	a4,-28(s0)
    47e4:	fc842783          	lw	a5,-56(s0)
    47e8:	16078793          	addi	a5,a5,352
    47ec:	00279793          	slli	a5,a5,0x2
    47f0:	00f707b3          	add	a5,a4,a5
    47f4:	0007a703          	lw	a4,0(a5)
    47f8:	fbc42783          	lw	a5,-68(s0)
    47fc:	00e7a023          	sw	a4,0(a5)
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4800:	fe442703          	lw	a4,-28(s0)
    4804:	fc842783          	lw	a5,-56(s0)
    4808:	00f707b3          	add	a5,a4,a5
    480c:	5847c783          	lbu	a5,1412(a5)
    4810:	fcf40fa3          	sb	a5,-33(s0)

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    4814:	fe442703          	lw	a4,-28(s0)
    4818:	fc842783          	lw	a5,-56(s0)
    481c:	00f707b3          	add	a5,a4,a5
    4820:	00200713          	li	a4,2
    4824:	58e78223          	sb	a4,1412(a5)

            switch( eAction )
    4828:	fc042703          	lw	a4,-64(s0)
    482c:	00400793          	li	a5,4
    4830:	0ee7e463          	bltu	a5,a4,4918 <xTaskGenericNotify+0x1b8>
    4834:	fc042783          	lw	a5,-64(s0)
    4838:	00279713          	slli	a4,a5,0x2
    483c:	000237b7          	lui	a5,0x23
    4840:	4b078793          	addi	a5,a5,1200 # 234b0 <__flash_rodata_start+0x60>
    4844:	00f707b3          	add	a5,a4,a5
    4848:	0007a783          	lw	a5,0(a5)
    484c:	00078067          	jr	a5
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    4850:	fe442703          	lw	a4,-28(s0)
    4854:	fc842783          	lw	a5,-56(s0)
    4858:	16078793          	addi	a5,a5,352
    485c:	00279793          	slli	a5,a5,0x2
    4860:	00f707b3          	add	a5,a4,a5
    4864:	0007a703          	lw	a4,0(a5)
    4868:	fc442783          	lw	a5,-60(s0)
    486c:	00f76733          	or	a4,a4,a5
    4870:	fe442683          	lw	a3,-28(s0)
    4874:	fc842783          	lw	a5,-56(s0)
    4878:	16078793          	addi	a5,a5,352
    487c:	00279793          	slli	a5,a5,0x2
    4880:	00f687b3          	add	a5,a3,a5
    4884:	00e7a023          	sw	a4,0(a5)
                    break;
    4888:	0b80006f          	j	4940 <xTaskGenericNotify+0x1e0>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    488c:	fe442703          	lw	a4,-28(s0)
    4890:	fc842783          	lw	a5,-56(s0)
    4894:	16078793          	addi	a5,a5,352
    4898:	00279793          	slli	a5,a5,0x2
    489c:	00f707b3          	add	a5,a4,a5
    48a0:	0007a783          	lw	a5,0(a5)
    48a4:	00178713          	addi	a4,a5,1
    48a8:	fe442683          	lw	a3,-28(s0)
    48ac:	fc842783          	lw	a5,-56(s0)
    48b0:	16078793          	addi	a5,a5,352
    48b4:	00279793          	slli	a5,a5,0x2
    48b8:	00f687b3          	add	a5,a3,a5
    48bc:	00e7a023          	sw	a4,0(a5)
                    break;
    48c0:	0800006f          	j	4940 <xTaskGenericNotify+0x1e0>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    48c4:	fe442703          	lw	a4,-28(s0)
    48c8:	fc842783          	lw	a5,-56(s0)
    48cc:	16078793          	addi	a5,a5,352
    48d0:	00279793          	slli	a5,a5,0x2
    48d4:	00f707b3          	add	a5,a4,a5
    48d8:	fc442703          	lw	a4,-60(s0)
    48dc:	00e7a023          	sw	a4,0(a5)
                    break;
    48e0:	0600006f          	j	4940 <xTaskGenericNotify+0x1e0>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    48e4:	fdf44703          	lbu	a4,-33(s0)
    48e8:	00200793          	li	a5,2
    48ec:	02f70263          	beq	a4,a5,4910 <xTaskGenericNotify+0x1b0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    48f0:	fe442703          	lw	a4,-28(s0)
    48f4:	fc842783          	lw	a5,-56(s0)
    48f8:	16078793          	addi	a5,a5,352
    48fc:	00279793          	slli	a5,a5,0x2
    4900:	00f707b3          	add	a5,a4,a5
    4904:	fc442703          	lw	a4,-60(s0)
    4908:	00e7a023          	sw	a4,0(a5)
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
    490c:	0340006f          	j	4940 <xTaskGenericNotify+0x1e0>
                        xReturn = pdFAIL;
    4910:	fe042023          	sw	zero,-32(s0)
                    break;
    4914:	02c0006f          	j	4940 <xTaskGenericNotify+0x1e0>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
    4918:	000287b7          	lui	a5,0x28
    491c:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    4920:	00078e63          	beqz	a5,493c <xTaskGenericNotify+0x1dc>
    4924:	30047073          	csrci	mstatus,8
    4928:	00100073          	ebreak
    492c:	00000013          	nop
    4930:	ffdff06f          	j	492c <xTaskGenericNotify+0x1cc>
                    break;
    4934:	00000013          	nop
    4938:	0080006f          	j	4940 <xTaskGenericNotify+0x1e0>

                    break;
    493c:	00000013          	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4940:	fdf44703          	lbu	a4,-33(s0)
    4944:	00100793          	li	a5,1
    4948:	1af71c63          	bne	a4,a5,4b00 <xTaskGenericNotify+0x3a0>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    494c:	fe442783          	lw	a5,-28(s0)
    4950:	0147a783          	lw	a5,20(a5)
    4954:	fef42423          	sw	a5,-24(s0)
    4958:	fe442783          	lw	a5,-28(s0)
    495c:	0087a783          	lw	a5,8(a5)
    4960:	fe442703          	lw	a4,-28(s0)
    4964:	00c72703          	lw	a4,12(a4)
    4968:	00e7a423          	sw	a4,8(a5)
    496c:	fe442783          	lw	a5,-28(s0)
    4970:	00c7a783          	lw	a5,12(a5)
    4974:	fe442703          	lw	a4,-28(s0)
    4978:	00872703          	lw	a4,8(a4)
    497c:	00e7a223          	sw	a4,4(a5)
    4980:	fe842783          	lw	a5,-24(s0)
    4984:	0047a703          	lw	a4,4(a5)
    4988:	fe442783          	lw	a5,-28(s0)
    498c:	00478793          	addi	a5,a5,4
    4990:	00f71a63          	bne	a4,a5,49a4 <xTaskGenericNotify+0x244>
    4994:	fe442783          	lw	a5,-28(s0)
    4998:	00c7a703          	lw	a4,12(a5)
    499c:	fe842783          	lw	a5,-24(s0)
    49a0:	00e7a223          	sw	a4,4(a5)
    49a4:	fe442783          	lw	a5,-28(s0)
    49a8:	0007aa23          	sw	zero,20(a5)
    49ac:	fe842783          	lw	a5,-24(s0)
    49b0:	0007a783          	lw	a5,0(a5)
    49b4:	fff78713          	addi	a4,a5,-1
    49b8:	fe842783          	lw	a5,-24(s0)
    49bc:	00e7a023          	sw	a4,0(a5)
                prvAddTaskToReadyList( pxTCB );
    49c0:	fe442783          	lw	a5,-28(s0)
    49c4:	02c7a783          	lw	a5,44(a5)
    49c8:	00100713          	li	a4,1
    49cc:	00f71733          	sll	a4,a4,a5
    49d0:	000287b7          	lui	a5,0x28
    49d4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    49d8:	00f76733          	or	a4,a4,a5
    49dc:	000287b7          	lui	a5,0x28
    49e0:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    49e4:	fe442783          	lw	a5,-28(s0)
    49e8:	02c7a703          	lw	a4,44(a5)
    49ec:	000287b7          	lui	a5,0x28
    49f0:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    49f4:	00070793          	mv	a5,a4
    49f8:	00279793          	slli	a5,a5,0x2
    49fc:	00e787b3          	add	a5,a5,a4
    4a00:	00279793          	slli	a5,a5,0x2
    4a04:	00f687b3          	add	a5,a3,a5
    4a08:	0047a783          	lw	a5,4(a5)
    4a0c:	fef42623          	sw	a5,-20(s0)
    4a10:	fe442783          	lw	a5,-28(s0)
    4a14:	fec42703          	lw	a4,-20(s0)
    4a18:	00e7a423          	sw	a4,8(a5)
    4a1c:	fec42783          	lw	a5,-20(s0)
    4a20:	0087a703          	lw	a4,8(a5)
    4a24:	fe442783          	lw	a5,-28(s0)
    4a28:	00e7a623          	sw	a4,12(a5)
    4a2c:	fec42783          	lw	a5,-20(s0)
    4a30:	0087a783          	lw	a5,8(a5)
    4a34:	fe442703          	lw	a4,-28(s0)
    4a38:	00470713          	addi	a4,a4,4
    4a3c:	00e7a223          	sw	a4,4(a5)
    4a40:	fe442783          	lw	a5,-28(s0)
    4a44:	00478713          	addi	a4,a5,4
    4a48:	fec42783          	lw	a5,-20(s0)
    4a4c:	00e7a423          	sw	a4,8(a5)
    4a50:	fe442783          	lw	a5,-28(s0)
    4a54:	02c7a703          	lw	a4,44(a5)
    4a58:	00070793          	mv	a5,a4
    4a5c:	00279793          	slli	a5,a5,0x2
    4a60:	00e787b3          	add	a5,a5,a4
    4a64:	00279793          	slli	a5,a5,0x2
    4a68:	00028737          	lui	a4,0x28
    4a6c:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    4a70:	00e78733          	add	a4,a5,a4
    4a74:	fe442783          	lw	a5,-28(s0)
    4a78:	00e7aa23          	sw	a4,20(a5)
    4a7c:	fe442783          	lw	a5,-28(s0)
    4a80:	02c7a703          	lw	a4,44(a5)
    4a84:	000287b7          	lui	a5,0x28
    4a88:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    4a8c:	00070793          	mv	a5,a4
    4a90:	00279793          	slli	a5,a5,0x2
    4a94:	00e787b3          	add	a5,a5,a4
    4a98:	00279793          	slli	a5,a5,0x2
    4a9c:	00f687b3          	add	a5,a3,a5
    4aa0:	0007a783          	lw	a5,0(a5)
    4aa4:	00178693          	addi	a3,a5,1
    4aa8:	000287b7          	lui	a5,0x28
    4aac:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    4ab0:	00070793          	mv	a5,a4
    4ab4:	00279793          	slli	a5,a5,0x2
    4ab8:	00e787b3          	add	a5,a5,a4
    4abc:	00279793          	slli	a5,a5,0x2
    4ac0:	00f607b3          	add	a5,a2,a5
    4ac4:	00d7a023          	sw	a3,0(a5)

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    4ac8:	fe442783          	lw	a5,-28(s0)
    4acc:	0287a783          	lw	a5,40(a5)
    4ad0:	00078a63          	beqz	a5,4ae4 <xTaskGenericNotify+0x384>
    4ad4:	30047073          	csrci	mstatus,8
    4ad8:	00100073          	ebreak
    4adc:	00000013          	nop
    4ae0:	ffdff06f          	j	4adc <xTaskGenericNotify+0x37c>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4ae4:	fe442783          	lw	a5,-28(s0)
    4ae8:	02c7a703          	lw	a4,44(a5)
    4aec:	000287b7          	lui	a5,0x28
    4af0:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    4af4:	02c7a783          	lw	a5,44(a5)
    4af8:	00e7f463          	bgeu	a5,a4,4b00 <xTaskGenericNotify+0x3a0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
    4afc:	00000073          	ecall
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    4b00:	000267b7          	lui	a5,0x26
    4b04:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4b08:	fff78713          	addi	a4,a5,-1
    4b0c:	000267b7          	lui	a5,0x26
    4b10:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    4b14:	000267b7          	lui	a5,0x26
    4b18:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    4b1c:	00079463          	bnez	a5,4b24 <xTaskGenericNotify+0x3c4>
    4b20:	30046073          	csrsi	mstatus,8

        return xReturn;
    4b24:	fe042783          	lw	a5,-32(s0)
    }
    4b28:	00078513          	mv	a0,a5
    4b2c:	04c12403          	lw	s0,76(sp)
    4b30:	05010113          	addi	sp,sp,80
    4b34:	00008067          	ret

00004b38 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    4b38:	fb010113          	addi	sp,sp,-80
    4b3c:	04812623          	sw	s0,76(sp)
    4b40:	05010413          	addi	s0,sp,80
    4b44:	fca42623          	sw	a0,-52(s0)
    4b48:	fcb42423          	sw	a1,-56(s0)
    4b4c:	fcc42223          	sw	a2,-60(s0)
    4b50:	fcd42023          	sw	a3,-64(s0)
    4b54:	fae42e23          	sw	a4,-68(s0)
    4b58:	faf42c23          	sw	a5,-72(s0)
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
    4b5c:	00100793          	li	a5,1
    4b60:	fcf42c23          	sw	a5,-40(s0)
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
    4b64:	fcc42783          	lw	a5,-52(s0)
    4b68:	00079a63          	bnez	a5,4b7c <xTaskGenericNotifyFromISR+0x44>
    4b6c:	30047073          	csrci	mstatus,8
    4b70:	00100073          	ebreak
    4b74:	00000013          	nop
    4b78:	ffdff06f          	j	4b74 <xTaskGenericNotifyFromISR+0x3c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
    4b7c:	fc842783          	lw	a5,-56(s0)
    4b80:	00078a63          	beqz	a5,4b94 <xTaskGenericNotifyFromISR+0x5c>
    4b84:	30047073          	csrci	mstatus,8
    4b88:	00100073          	ebreak
    4b8c:	00000013          	nop
    4b90:	ffdff06f          	j	4b8c <xTaskGenericNotifyFromISR+0x54>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
    4b94:	fcc42783          	lw	a5,-52(s0)
    4b98:	fcf42e23          	sw	a5,-36(s0)

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4b9c:	fe042023          	sw	zero,-32(s0)
        {
            if( pulPreviousNotificationValue != NULL )
    4ba0:	fbc42783          	lw	a5,-68(s0)
    4ba4:	02078263          	beqz	a5,4bc8 <xTaskGenericNotifyFromISR+0x90>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
    4ba8:	fdc42703          	lw	a4,-36(s0)
    4bac:	fc842783          	lw	a5,-56(s0)
    4bb0:	16078793          	addi	a5,a5,352
    4bb4:	00279793          	slli	a5,a5,0x2
    4bb8:	00f707b3          	add	a5,a4,a5
    4bbc:	0007a703          	lw	a4,0(a5)
    4bc0:	fbc42783          	lw	a5,-68(s0)
    4bc4:	00e7a023          	sw	a4,0(a5)
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4bc8:	fdc42703          	lw	a4,-36(s0)
    4bcc:	fc842783          	lw	a5,-56(s0)
    4bd0:	00f707b3          	add	a5,a4,a5
    4bd4:	5847c783          	lbu	a5,1412(a5)
    4bd8:	fcf40ba3          	sb	a5,-41(s0)
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    4bdc:	fdc42703          	lw	a4,-36(s0)
    4be0:	fc842783          	lw	a5,-56(s0)
    4be4:	00f707b3          	add	a5,a4,a5
    4be8:	00200713          	li	a4,2
    4bec:	58e78223          	sb	a4,1412(a5)

            switch( eAction )
    4bf0:	fc042703          	lw	a4,-64(s0)
    4bf4:	00400793          	li	a5,4
    4bf8:	0ee7e463          	bltu	a5,a4,4ce0 <xTaskGenericNotifyFromISR+0x1a8>
    4bfc:	fc042783          	lw	a5,-64(s0)
    4c00:	00279713          	slli	a4,a5,0x2
    4c04:	000237b7          	lui	a5,0x23
    4c08:	4c478793          	addi	a5,a5,1220 # 234c4 <__flash_rodata_start+0x74>
    4c0c:	00f707b3          	add	a5,a4,a5
    4c10:	0007a783          	lw	a5,0(a5)
    4c14:	00078067          	jr	a5
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
    4c18:	fdc42703          	lw	a4,-36(s0)
    4c1c:	fc842783          	lw	a5,-56(s0)
    4c20:	16078793          	addi	a5,a5,352
    4c24:	00279793          	slli	a5,a5,0x2
    4c28:	00f707b3          	add	a5,a4,a5
    4c2c:	0007a703          	lw	a4,0(a5)
    4c30:	fc442783          	lw	a5,-60(s0)
    4c34:	00f76733          	or	a4,a4,a5
    4c38:	fdc42683          	lw	a3,-36(s0)
    4c3c:	fc842783          	lw	a5,-56(s0)
    4c40:	16078793          	addi	a5,a5,352
    4c44:	00279793          	slli	a5,a5,0x2
    4c48:	00f687b3          	add	a5,a3,a5
    4c4c:	00e7a023          	sw	a4,0(a5)
                    break;
    4c50:	0b80006f          	j	4d08 <xTaskGenericNotifyFromISR+0x1d0>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    4c54:	fdc42703          	lw	a4,-36(s0)
    4c58:	fc842783          	lw	a5,-56(s0)
    4c5c:	16078793          	addi	a5,a5,352
    4c60:	00279793          	slli	a5,a5,0x2
    4c64:	00f707b3          	add	a5,a4,a5
    4c68:	0007a783          	lw	a5,0(a5)
    4c6c:	00178713          	addi	a4,a5,1
    4c70:	fdc42683          	lw	a3,-36(s0)
    4c74:	fc842783          	lw	a5,-56(s0)
    4c78:	16078793          	addi	a5,a5,352
    4c7c:	00279793          	slli	a5,a5,0x2
    4c80:	00f687b3          	add	a5,a3,a5
    4c84:	00e7a023          	sw	a4,0(a5)
                    break;
    4c88:	0800006f          	j	4d08 <xTaskGenericNotifyFromISR+0x1d0>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    4c8c:	fdc42703          	lw	a4,-36(s0)
    4c90:	fc842783          	lw	a5,-56(s0)
    4c94:	16078793          	addi	a5,a5,352
    4c98:	00279793          	slli	a5,a5,0x2
    4c9c:	00f707b3          	add	a5,a4,a5
    4ca0:	fc442703          	lw	a4,-60(s0)
    4ca4:	00e7a023          	sw	a4,0(a5)
                    break;
    4ca8:	0600006f          	j	4d08 <xTaskGenericNotifyFromISR+0x1d0>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4cac:	fd744703          	lbu	a4,-41(s0)
    4cb0:	00200793          	li	a5,2
    4cb4:	02f70263          	beq	a4,a5,4cd8 <xTaskGenericNotifyFromISR+0x1a0>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
    4cb8:	fdc42703          	lw	a4,-36(s0)
    4cbc:	fc842783          	lw	a5,-56(s0)
    4cc0:	16078793          	addi	a5,a5,352
    4cc4:	00279793          	slli	a5,a5,0x2
    4cc8:	00f707b3          	add	a5,a4,a5
    4ccc:	fc442703          	lw	a4,-60(s0)
    4cd0:	00e7a023          	sw	a4,0(a5)
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
    4cd4:	0340006f          	j	4d08 <xTaskGenericNotifyFromISR+0x1d0>
                        xReturn = pdFAIL;
    4cd8:	fc042c23          	sw	zero,-40(s0)
                    break;
    4cdc:	02c0006f          	j	4d08 <xTaskGenericNotifyFromISR+0x1d0>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
    4ce0:	000287b7          	lui	a5,0x28
    4ce4:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    4ce8:	00078e63          	beqz	a5,4d04 <xTaskGenericNotifyFromISR+0x1cc>
    4cec:	30047073          	csrci	mstatus,8
    4cf0:	00100073          	ebreak
    4cf4:	00000013          	nop
    4cf8:	ffdff06f          	j	4cf4 <xTaskGenericNotifyFromISR+0x1bc>
                    break;
    4cfc:	00000013          	nop
    4d00:	0080006f          	j	4d08 <xTaskGenericNotifyFromISR+0x1d0>
                    break;
    4d04:	00000013          	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    4d08:	fd744703          	lbu	a4,-41(s0)
    4d0c:	00100793          	li	a5,1
    4d10:	26f71063          	bne	a4,a5,4f70 <xTaskGenericNotifyFromISR+0x438>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    4d14:	fdc42783          	lw	a5,-36(s0)
    4d18:	0287a783          	lw	a5,40(a5)
    4d1c:	00078a63          	beqz	a5,4d30 <xTaskGenericNotifyFromISR+0x1f8>
    4d20:	30047073          	csrci	mstatus,8
    4d24:	00100073          	ebreak
    4d28:	00000013          	nop
    4d2c:	ffdff06f          	j	4d28 <xTaskGenericNotifyFromISR+0x1f0>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4d30:	000287b7          	lui	a5,0x28
    4d34:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    4d38:	18079263          	bnez	a5,4ebc <xTaskGenericNotifyFromISR+0x384>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    4d3c:	fdc42783          	lw	a5,-36(s0)
    4d40:	0147a783          	lw	a5,20(a5)
    4d44:	fef42423          	sw	a5,-24(s0)
    4d48:	fdc42783          	lw	a5,-36(s0)
    4d4c:	0087a783          	lw	a5,8(a5)
    4d50:	fdc42703          	lw	a4,-36(s0)
    4d54:	00c72703          	lw	a4,12(a4)
    4d58:	00e7a423          	sw	a4,8(a5)
    4d5c:	fdc42783          	lw	a5,-36(s0)
    4d60:	00c7a783          	lw	a5,12(a5)
    4d64:	fdc42703          	lw	a4,-36(s0)
    4d68:	00872703          	lw	a4,8(a4)
    4d6c:	00e7a223          	sw	a4,4(a5)
    4d70:	fe842783          	lw	a5,-24(s0)
    4d74:	0047a703          	lw	a4,4(a5)
    4d78:	fdc42783          	lw	a5,-36(s0)
    4d7c:	00478793          	addi	a5,a5,4
    4d80:	00f71a63          	bne	a4,a5,4d94 <xTaskGenericNotifyFromISR+0x25c>
    4d84:	fdc42783          	lw	a5,-36(s0)
    4d88:	00c7a703          	lw	a4,12(a5)
    4d8c:	fe842783          	lw	a5,-24(s0)
    4d90:	00e7a223          	sw	a4,4(a5)
    4d94:	fdc42783          	lw	a5,-36(s0)
    4d98:	0007aa23          	sw	zero,20(a5)
    4d9c:	fe842783          	lw	a5,-24(s0)
    4da0:	0007a783          	lw	a5,0(a5)
    4da4:	fff78713          	addi	a4,a5,-1
    4da8:	fe842783          	lw	a5,-24(s0)
    4dac:	00e7a023          	sw	a4,0(a5)
                    prvAddTaskToReadyList( pxTCB );
    4db0:	fdc42783          	lw	a5,-36(s0)
    4db4:	02c7a783          	lw	a5,44(a5)
    4db8:	00100713          	li	a4,1
    4dbc:	00f71733          	sll	a4,a4,a5
    4dc0:	000287b7          	lui	a5,0x28
    4dc4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    4dc8:	00f76733          	or	a4,a4,a5
    4dcc:	000287b7          	lui	a5,0x28
    4dd0:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    4dd4:	fdc42783          	lw	a5,-36(s0)
    4dd8:	02c7a703          	lw	a4,44(a5)
    4ddc:	000287b7          	lui	a5,0x28
    4de0:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    4de4:	00070793          	mv	a5,a4
    4de8:	00279793          	slli	a5,a5,0x2
    4dec:	00e787b3          	add	a5,a5,a4
    4df0:	00279793          	slli	a5,a5,0x2
    4df4:	00f687b3          	add	a5,a3,a5
    4df8:	0047a783          	lw	a5,4(a5)
    4dfc:	fef42623          	sw	a5,-20(s0)
    4e00:	fdc42783          	lw	a5,-36(s0)
    4e04:	fec42703          	lw	a4,-20(s0)
    4e08:	00e7a423          	sw	a4,8(a5)
    4e0c:	fec42783          	lw	a5,-20(s0)
    4e10:	0087a703          	lw	a4,8(a5)
    4e14:	fdc42783          	lw	a5,-36(s0)
    4e18:	00e7a623          	sw	a4,12(a5)
    4e1c:	fec42783          	lw	a5,-20(s0)
    4e20:	0087a783          	lw	a5,8(a5)
    4e24:	fdc42703          	lw	a4,-36(s0)
    4e28:	00470713          	addi	a4,a4,4
    4e2c:	00e7a223          	sw	a4,4(a5)
    4e30:	fdc42783          	lw	a5,-36(s0)
    4e34:	00478713          	addi	a4,a5,4
    4e38:	fec42783          	lw	a5,-20(s0)
    4e3c:	00e7a423          	sw	a4,8(a5)
    4e40:	fdc42783          	lw	a5,-36(s0)
    4e44:	02c7a703          	lw	a4,44(a5)
    4e48:	00070793          	mv	a5,a4
    4e4c:	00279793          	slli	a5,a5,0x2
    4e50:	00e787b3          	add	a5,a5,a4
    4e54:	00279793          	slli	a5,a5,0x2
    4e58:	00028737          	lui	a4,0x28
    4e5c:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    4e60:	00e78733          	add	a4,a5,a4
    4e64:	fdc42783          	lw	a5,-36(s0)
    4e68:	00e7aa23          	sw	a4,20(a5)
    4e6c:	fdc42783          	lw	a5,-36(s0)
    4e70:	02c7a703          	lw	a4,44(a5)
    4e74:	000287b7          	lui	a5,0x28
    4e78:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    4e7c:	00070793          	mv	a5,a4
    4e80:	00279793          	slli	a5,a5,0x2
    4e84:	00e787b3          	add	a5,a5,a4
    4e88:	00279793          	slli	a5,a5,0x2
    4e8c:	00f687b3          	add	a5,a3,a5
    4e90:	0007a783          	lw	a5,0(a5)
    4e94:	00178693          	addi	a3,a5,1
    4e98:	000287b7          	lui	a5,0x28
    4e9c:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    4ea0:	00070793          	mv	a5,a4
    4ea4:	00279793          	slli	a5,a5,0x2
    4ea8:	00e787b3          	add	a5,a5,a4
    4eac:	00279793          	slli	a5,a5,0x2
    4eb0:	00f607b3          	add	a5,a2,a5
    4eb4:	00d7a023          	sw	a3,0(a5)
    4eb8:	0800006f          	j	4f38 <xTaskGenericNotifyFromISR+0x400>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4ebc:	000287b7          	lui	a5,0x28
    4ec0:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    4ec4:	0047a783          	lw	a5,4(a5)
    4ec8:	fef42223          	sw	a5,-28(s0)
    4ecc:	fdc42783          	lw	a5,-36(s0)
    4ed0:	fe442703          	lw	a4,-28(s0)
    4ed4:	00e7ae23          	sw	a4,28(a5)
    4ed8:	fe442783          	lw	a5,-28(s0)
    4edc:	0087a703          	lw	a4,8(a5)
    4ee0:	fdc42783          	lw	a5,-36(s0)
    4ee4:	02e7a023          	sw	a4,32(a5)
    4ee8:	fe442783          	lw	a5,-28(s0)
    4eec:	0087a783          	lw	a5,8(a5)
    4ef0:	fdc42703          	lw	a4,-36(s0)
    4ef4:	01870713          	addi	a4,a4,24
    4ef8:	00e7a223          	sw	a4,4(a5)
    4efc:	fdc42783          	lw	a5,-36(s0)
    4f00:	01878713          	addi	a4,a5,24
    4f04:	fe442783          	lw	a5,-28(s0)
    4f08:	00e7a423          	sw	a4,8(a5)
    4f0c:	fdc42783          	lw	a5,-36(s0)
    4f10:	00028737          	lui	a4,0x28
    4f14:	da070713          	addi	a4,a4,-608 # 27da0 <xPendingReadyList>
    4f18:	02e7a423          	sw	a4,40(a5)
    4f1c:	000287b7          	lui	a5,0x28
    4f20:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    4f24:	0007a783          	lw	a5,0(a5)
    4f28:	00178713          	addi	a4,a5,1
    4f2c:	000287b7          	lui	a5,0x28
    4f30:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    4f34:	00e7a023          	sw	a4,0(a5)
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4f38:	fdc42783          	lw	a5,-36(s0)
    4f3c:	02c7a703          	lw	a4,44(a5)
    4f40:	000287b7          	lui	a5,0x28
    4f44:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    4f48:	02c7a783          	lw	a5,44(a5)
    4f4c:	02e7f263          	bgeu	a5,a4,4f70 <xTaskGenericNotifyFromISR+0x438>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
    4f50:	fb842783          	lw	a5,-72(s0)
    4f54:	00078863          	beqz	a5,4f64 <xTaskGenericNotifyFromISR+0x42c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
    4f58:	fb842783          	lw	a5,-72(s0)
    4f5c:	00100713          	li	a4,1
    4f60:	00e7a023          	sw	a4,0(a5)
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
    4f64:	000287b7          	lui	a5,0x28
    4f68:	00100713          	li	a4,1
    4f6c:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
    4f70:	fd842783          	lw	a5,-40(s0)
    }
    4f74:	00078513          	mv	a0,a5
    4f78:	04c12403          	lw	s0,76(sp)
    4f7c:	05010113          	addi	sp,sp,80
    4f80:	00008067          	ret

00004f84 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
    4f84:	fc010113          	addi	sp,sp,-64
    4f88:	02812e23          	sw	s0,60(sp)
    4f8c:	04010413          	addi	s0,sp,64
    4f90:	fca42623          	sw	a0,-52(s0)
    4f94:	fcb42423          	sw	a1,-56(s0)
    4f98:	fcc42223          	sw	a2,-60(s0)
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
    4f9c:	fcc42783          	lw	a5,-52(s0)
    4fa0:	00079a63          	bnez	a5,4fb4 <vTaskGenericNotifyGiveFromISR+0x30>
    4fa4:	30047073          	csrci	mstatus,8
    4fa8:	00100073          	ebreak
    4fac:	00000013          	nop
    4fb0:	ffdff06f          	j	4fac <vTaskGenericNotifyGiveFromISR+0x28>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
    4fb4:	fc842783          	lw	a5,-56(s0)
    4fb8:	00078a63          	beqz	a5,4fcc <vTaskGenericNotifyGiveFromISR+0x48>
    4fbc:	30047073          	csrci	mstatus,8
    4fc0:	00100073          	ebreak
    4fc4:	00000013          	nop
    4fc8:	ffdff06f          	j	4fc4 <vTaskGenericNotifyGiveFromISR+0x40>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
    4fcc:	fcc42783          	lw	a5,-52(s0)
    4fd0:	fcf42e23          	sw	a5,-36(s0)

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4fd4:	fe042023          	sw	zero,-32(s0)
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
    4fd8:	fdc42703          	lw	a4,-36(s0)
    4fdc:	fc842783          	lw	a5,-56(s0)
    4fe0:	00f707b3          	add	a5,a4,a5
    4fe4:	5847c783          	lbu	a5,1412(a5)
    4fe8:	fcf40da3          	sb	a5,-37(s0)
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
    4fec:	fdc42703          	lw	a4,-36(s0)
    4ff0:	fc842783          	lw	a5,-56(s0)
    4ff4:	00f707b3          	add	a5,a4,a5
    4ff8:	00200713          	li	a4,2
    4ffc:	58e78223          	sb	a4,1412(a5)

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
    5000:	fdc42703          	lw	a4,-36(s0)
    5004:	fc842783          	lw	a5,-56(s0)
    5008:	16078793          	addi	a5,a5,352
    500c:	00279793          	slli	a5,a5,0x2
    5010:	00f707b3          	add	a5,a4,a5
    5014:	0007a783          	lw	a5,0(a5)
    5018:	00178713          	addi	a4,a5,1
    501c:	fdc42683          	lw	a3,-36(s0)
    5020:	fc842783          	lw	a5,-56(s0)
    5024:	16078793          	addi	a5,a5,352
    5028:	00279793          	slli	a5,a5,0x2
    502c:	00f687b3          	add	a5,a3,a5
    5030:	00e7a023          	sw	a4,0(a5)

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    5034:	fdb44703          	lbu	a4,-37(s0)
    5038:	00100793          	li	a5,1
    503c:	26f71063          	bne	a4,a5,529c <vTaskGenericNotifyGiveFromISR+0x318>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    5040:	fdc42783          	lw	a5,-36(s0)
    5044:	0287a783          	lw	a5,40(a5)
    5048:	00078a63          	beqz	a5,505c <vTaskGenericNotifyGiveFromISR+0xd8>
    504c:	30047073          	csrci	mstatus,8
    5050:	00100073          	ebreak
    5054:	00000013          	nop
    5058:	ffdff06f          	j	5054 <vTaskGenericNotifyGiveFromISR+0xd0>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    505c:	000287b7          	lui	a5,0x28
    5060:	e087a783          	lw	a5,-504(a5) # 27e08 <uxSchedulerSuspended>
    5064:	18079263          	bnez	a5,51e8 <vTaskGenericNotifyGiveFromISR+0x264>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
    5068:	fdc42783          	lw	a5,-36(s0)
    506c:	0147a783          	lw	a5,20(a5)
    5070:	fef42423          	sw	a5,-24(s0)
    5074:	fdc42783          	lw	a5,-36(s0)
    5078:	0087a783          	lw	a5,8(a5)
    507c:	fdc42703          	lw	a4,-36(s0)
    5080:	00c72703          	lw	a4,12(a4)
    5084:	00e7a423          	sw	a4,8(a5)
    5088:	fdc42783          	lw	a5,-36(s0)
    508c:	00c7a783          	lw	a5,12(a5)
    5090:	fdc42703          	lw	a4,-36(s0)
    5094:	00872703          	lw	a4,8(a4)
    5098:	00e7a223          	sw	a4,4(a5)
    509c:	fe842783          	lw	a5,-24(s0)
    50a0:	0047a703          	lw	a4,4(a5)
    50a4:	fdc42783          	lw	a5,-36(s0)
    50a8:	00478793          	addi	a5,a5,4
    50ac:	00f71a63          	bne	a4,a5,50c0 <vTaskGenericNotifyGiveFromISR+0x13c>
    50b0:	fdc42783          	lw	a5,-36(s0)
    50b4:	00c7a703          	lw	a4,12(a5)
    50b8:	fe842783          	lw	a5,-24(s0)
    50bc:	00e7a223          	sw	a4,4(a5)
    50c0:	fdc42783          	lw	a5,-36(s0)
    50c4:	0007aa23          	sw	zero,20(a5)
    50c8:	fe842783          	lw	a5,-24(s0)
    50cc:	0007a783          	lw	a5,0(a5)
    50d0:	fff78713          	addi	a4,a5,-1
    50d4:	fe842783          	lw	a5,-24(s0)
    50d8:	00e7a023          	sw	a4,0(a5)
                    prvAddTaskToReadyList( pxTCB );
    50dc:	fdc42783          	lw	a5,-36(s0)
    50e0:	02c7a783          	lw	a5,44(a5)
    50e4:	00100713          	li	a4,1
    50e8:	00f71733          	sll	a4,a4,a5
    50ec:	000287b7          	lui	a5,0x28
    50f0:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    50f4:	00f76733          	or	a4,a4,a5
    50f8:	000287b7          	lui	a5,0x28
    50fc:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
    5100:	fdc42783          	lw	a5,-36(s0)
    5104:	02c7a703          	lw	a4,44(a5)
    5108:	000287b7          	lui	a5,0x28
    510c:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    5110:	00070793          	mv	a5,a4
    5114:	00279793          	slli	a5,a5,0x2
    5118:	00e787b3          	add	a5,a5,a4
    511c:	00279793          	slli	a5,a5,0x2
    5120:	00f687b3          	add	a5,a3,a5
    5124:	0047a783          	lw	a5,4(a5)
    5128:	fef42623          	sw	a5,-20(s0)
    512c:	fdc42783          	lw	a5,-36(s0)
    5130:	fec42703          	lw	a4,-20(s0)
    5134:	00e7a423          	sw	a4,8(a5)
    5138:	fec42783          	lw	a5,-20(s0)
    513c:	0087a703          	lw	a4,8(a5)
    5140:	fdc42783          	lw	a5,-36(s0)
    5144:	00e7a623          	sw	a4,12(a5)
    5148:	fec42783          	lw	a5,-20(s0)
    514c:	0087a783          	lw	a5,8(a5)
    5150:	fdc42703          	lw	a4,-36(s0)
    5154:	00470713          	addi	a4,a4,4
    5158:	00e7a223          	sw	a4,4(a5)
    515c:	fdc42783          	lw	a5,-36(s0)
    5160:	00478713          	addi	a4,a5,4
    5164:	fec42783          	lw	a5,-20(s0)
    5168:	00e7a423          	sw	a4,8(a5)
    516c:	fdc42783          	lw	a5,-36(s0)
    5170:	02c7a703          	lw	a4,44(a5)
    5174:	00070793          	mv	a5,a4
    5178:	00279793          	slli	a5,a5,0x2
    517c:	00e787b3          	add	a5,a5,a4
    5180:	00279793          	slli	a5,a5,0x2
    5184:	00028737          	lui	a4,0x28
    5188:	ce470713          	addi	a4,a4,-796 # 27ce4 <pxReadyTasksLists>
    518c:	00e78733          	add	a4,a5,a4
    5190:	fdc42783          	lw	a5,-36(s0)
    5194:	00e7aa23          	sw	a4,20(a5)
    5198:	fdc42783          	lw	a5,-36(s0)
    519c:	02c7a703          	lw	a4,44(a5)
    51a0:	000287b7          	lui	a5,0x28
    51a4:	ce478693          	addi	a3,a5,-796 # 27ce4 <pxReadyTasksLists>
    51a8:	00070793          	mv	a5,a4
    51ac:	00279793          	slli	a5,a5,0x2
    51b0:	00e787b3          	add	a5,a5,a4
    51b4:	00279793          	slli	a5,a5,0x2
    51b8:	00f687b3          	add	a5,a3,a5
    51bc:	0007a783          	lw	a5,0(a5)
    51c0:	00178693          	addi	a3,a5,1
    51c4:	000287b7          	lui	a5,0x28
    51c8:	ce478613          	addi	a2,a5,-796 # 27ce4 <pxReadyTasksLists>
    51cc:	00070793          	mv	a5,a4
    51d0:	00279793          	slli	a5,a5,0x2
    51d4:	00e787b3          	add	a5,a5,a4
    51d8:	00279793          	slli	a5,a5,0x2
    51dc:	00f607b3          	add	a5,a2,a5
    51e0:	00d7a023          	sw	a3,0(a5)
    51e4:	0800006f          	j	5264 <vTaskGenericNotifyGiveFromISR+0x2e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    51e8:	000287b7          	lui	a5,0x28
    51ec:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    51f0:	0047a783          	lw	a5,4(a5)
    51f4:	fef42223          	sw	a5,-28(s0)
    51f8:	fdc42783          	lw	a5,-36(s0)
    51fc:	fe442703          	lw	a4,-28(s0)
    5200:	00e7ae23          	sw	a4,28(a5)
    5204:	fe442783          	lw	a5,-28(s0)
    5208:	0087a703          	lw	a4,8(a5)
    520c:	fdc42783          	lw	a5,-36(s0)
    5210:	02e7a023          	sw	a4,32(a5)
    5214:	fe442783          	lw	a5,-28(s0)
    5218:	0087a783          	lw	a5,8(a5)
    521c:	fdc42703          	lw	a4,-36(s0)
    5220:	01870713          	addi	a4,a4,24
    5224:	00e7a223          	sw	a4,4(a5)
    5228:	fdc42783          	lw	a5,-36(s0)
    522c:	01878713          	addi	a4,a5,24
    5230:	fe442783          	lw	a5,-28(s0)
    5234:	00e7a423          	sw	a4,8(a5)
    5238:	fdc42783          	lw	a5,-36(s0)
    523c:	00028737          	lui	a4,0x28
    5240:	da070713          	addi	a4,a4,-608 # 27da0 <xPendingReadyList>
    5244:	02e7a423          	sw	a4,40(a5)
    5248:	000287b7          	lui	a5,0x28
    524c:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    5250:	0007a783          	lw	a5,0(a5)
    5254:	00178713          	addi	a4,a5,1
    5258:	000287b7          	lui	a5,0x28
    525c:	da078793          	addi	a5,a5,-608 # 27da0 <xPendingReadyList>
    5260:	00e7a023          	sw	a4,0(a5)
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    5264:	fdc42783          	lw	a5,-36(s0)
    5268:	02c7a703          	lw	a4,44(a5)
    526c:	000287b7          	lui	a5,0x28
    5270:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5274:	02c7a783          	lw	a5,44(a5)
    5278:	02e7f263          	bgeu	a5,a4,529c <vTaskGenericNotifyGiveFromISR+0x318>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
    527c:	fc442783          	lw	a5,-60(s0)
    5280:	00078863          	beqz	a5,5290 <vTaskGenericNotifyGiveFromISR+0x30c>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
    5284:	fc442783          	lw	a5,-60(s0)
    5288:	00100713          	li	a4,1
    528c:	00e7a023          	sw	a4,0(a5)
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
    5290:	000287b7          	lui	a5,0x28
    5294:	00100713          	li	a4,1
    5298:	dee7aa23          	sw	a4,-524(a5) # 27df4 <xYieldPending>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
    529c:	00000013          	nop
    52a0:	03c12403          	lw	s0,60(sp)
    52a4:	04010113          	addi	sp,sp,64
    52a8:	00008067          	ret

000052ac <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
    52ac:	fd010113          	addi	sp,sp,-48
    52b0:	02812623          	sw	s0,44(sp)
    52b4:	03010413          	addi	s0,sp,48
    52b8:	fca42e23          	sw	a0,-36(s0)
    52bc:	fcb42c23          	sw	a1,-40(s0)
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
    52c0:	fd842783          	lw	a5,-40(s0)
    52c4:	00078a63          	beqz	a5,52d8 <xTaskGenericNotifyStateClear+0x2c>
    52c8:	30047073          	csrci	mstatus,8
    52cc:	00100073          	ebreak
    52d0:	00000013          	nop
    52d4:	ffdff06f          	j	52d0 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    52d8:	fdc42783          	lw	a5,-36(s0)
    52dc:	00079863          	bnez	a5,52ec <xTaskGenericNotifyStateClear+0x40>
    52e0:	000287b7          	lui	a5,0x28
    52e4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    52e8:	0080006f          	j	52f0 <xTaskGenericNotifyStateClear+0x44>
    52ec:	fdc42783          	lw	a5,-36(s0)
    52f0:	fef42623          	sw	a5,-20(s0)

        taskENTER_CRITICAL();
    52f4:	30047073          	csrci	mstatus,8
    52f8:	000267b7          	lui	a5,0x26
    52fc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5300:	00178713          	addi	a4,a5,1
    5304:	000267b7          	lui	a5,0x26
    5308:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    530c:	fec42703          	lw	a4,-20(s0)
    5310:	fd842783          	lw	a5,-40(s0)
    5314:	00f707b3          	add	a5,a4,a5
    5318:	5847c783          	lbu	a5,1412(a5)
    531c:	0ff7f713          	zext.b	a4,a5
    5320:	00200793          	li	a5,2
    5324:	02f71063          	bne	a4,a5,5344 <xTaskGenericNotifyStateClear+0x98>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    5328:	fec42703          	lw	a4,-20(s0)
    532c:	fd842783          	lw	a5,-40(s0)
    5330:	00f707b3          	add	a5,a4,a5
    5334:	58078223          	sb	zero,1412(a5)
                xReturn = pdPASS;
    5338:	00100793          	li	a5,1
    533c:	fef42423          	sw	a5,-24(s0)
    5340:	0080006f          	j	5348 <xTaskGenericNotifyStateClear+0x9c>
            }
            else
            {
                xReturn = pdFAIL;
    5344:	fe042423          	sw	zero,-24(s0)
            }
        }
        taskEXIT_CRITICAL();
    5348:	000267b7          	lui	a5,0x26
    534c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5350:	fff78713          	addi	a4,a5,-1
    5354:	000267b7          	lui	a5,0x26
    5358:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    535c:	000267b7          	lui	a5,0x26
    5360:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5364:	00079463          	bnez	a5,536c <xTaskGenericNotifyStateClear+0xc0>
    5368:	30046073          	csrsi	mstatus,8

        return xReturn;
    536c:	fe842783          	lw	a5,-24(s0)
    }
    5370:	00078513          	mv	a0,a5
    5374:	02c12403          	lw	s0,44(sp)
    5378:	03010113          	addi	sp,sp,48
    537c:	00008067          	ret

00005380 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
    5380:	fd010113          	addi	sp,sp,-48
    5384:	02812623          	sw	s0,44(sp)
    5388:	03010413          	addi	s0,sp,48
    538c:	fca42e23          	sw	a0,-36(s0)
    5390:	fcb42c23          	sw	a1,-40(s0)
    5394:	fcc42a23          	sw	a2,-44(s0)
        TCB_t * pxTCB;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    5398:	fdc42783          	lw	a5,-36(s0)
    539c:	00079863          	bnez	a5,53ac <ulTaskGenericNotifyValueClear+0x2c>
    53a0:	000287b7          	lui	a5,0x28
    53a4:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    53a8:	0080006f          	j	53b0 <ulTaskGenericNotifyValueClear+0x30>
    53ac:	fdc42783          	lw	a5,-36(s0)
    53b0:	fef42423          	sw	a5,-24(s0)

        taskENTER_CRITICAL();
    53b4:	30047073          	csrci	mstatus,8
    53b8:	000267b7          	lui	a5,0x26
    53bc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    53c0:	00178713          	addi	a4,a5,1
    53c4:	000267b7          	lui	a5,0x26
    53c8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
    53cc:	fe842703          	lw	a4,-24(s0)
    53d0:	fd842783          	lw	a5,-40(s0)
    53d4:	16078793          	addi	a5,a5,352
    53d8:	00279793          	slli	a5,a5,0x2
    53dc:	00f707b3          	add	a5,a4,a5
    53e0:	0007a783          	lw	a5,0(a5)
    53e4:	fef42623          	sw	a5,-20(s0)
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
    53e8:	fe842703          	lw	a4,-24(s0)
    53ec:	fd842783          	lw	a5,-40(s0)
    53f0:	16078793          	addi	a5,a5,352
    53f4:	00279793          	slli	a5,a5,0x2
    53f8:	00f707b3          	add	a5,a4,a5
    53fc:	0007a703          	lw	a4,0(a5)
    5400:	fd442783          	lw	a5,-44(s0)
    5404:	fff7c793          	not	a5,a5
    5408:	00f77733          	and	a4,a4,a5
    540c:	fe842683          	lw	a3,-24(s0)
    5410:	fd842783          	lw	a5,-40(s0)
    5414:	16078793          	addi	a5,a5,352
    5418:	00279793          	slli	a5,a5,0x2
    541c:	00f687b3          	add	a5,a3,a5
    5420:	00e7a023          	sw	a4,0(a5)
        }
        taskEXIT_CRITICAL();
    5424:	000267b7          	lui	a5,0x26
    5428:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    542c:	fff78713          	addi	a4,a5,-1
    5430:	000267b7          	lui	a5,0x26
    5434:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    5438:	000267b7          	lui	a5,0x26
    543c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5440:	00079463          	bnez	a5,5448 <ulTaskGenericNotifyValueClear+0xc8>
    5444:	30046073          	csrsi	mstatus,8

        return ulReturn;
    5448:	fec42783          	lw	a5,-20(s0)
    }
    544c:	00078513          	mv	a0,a5
    5450:	02c12403          	lw	s0,44(sp)
    5454:	03010113          	addi	sp,sp,48
    5458:	00008067          	ret

0000545c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
    545c:	fd010113          	addi	sp,sp,-48
    5460:	02112623          	sw	ra,44(sp)
    5464:	02812423          	sw	s0,40(sp)
    5468:	03010413          	addi	s0,sp,48
    546c:	fca42e23          	sw	a0,-36(s0)
    5470:	fcb42c23          	sw	a1,-40(s0)
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    5474:	000287b7          	lui	a5,0x28
    5478:	de47a783          	lw	a5,-540(a5) # 27de4 <xTickCount>
    547c:	fef42223          	sw	a5,-28(s0)
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = pdFALSE;
    5480:	000287b7          	lui	a5,0x28
    5484:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5488:	580782a3          	sb	zero,1413(a5)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    548c:	000287b7          	lui	a5,0x28
    5490:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5494:	00478793          	addi	a5,a5,4
    5498:	00078513          	mv	a0,a5
    549c:	1cc040ef          	jal	ra,9668 <uxListRemove>
    54a0:	00050793          	mv	a5,a0
    54a4:	02079863          	bnez	a5,54d4 <prvAddCurrentTaskToDelayedList+0x78>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
    54a8:	000287b7          	lui	a5,0x28
    54ac:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    54b0:	02c7a783          	lw	a5,44(a5)
    54b4:	00100713          	li	a4,1
    54b8:	00f717b3          	sll	a5,a4,a5
    54bc:	fff7c713          	not	a4,a5
    54c0:	000287b7          	lui	a5,0x28
    54c4:	de87a783          	lw	a5,-536(a5) # 27de8 <uxTopReadyPriority>
    54c8:	00f77733          	and	a4,a4,a5
    54cc:	000287b7          	lui	a5,0x28
    54d0:	dee7a423          	sw	a4,-536(a5) # 27de8 <uxTopReadyPriority>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    54d4:	fdc42703          	lw	a4,-36(s0)
    54d8:	fff00793          	li	a5,-1
    54dc:	0af71263          	bne	a4,a5,5580 <prvAddCurrentTaskToDelayedList+0x124>
    54e0:	fd842783          	lw	a5,-40(s0)
    54e4:	08078e63          	beqz	a5,5580 <prvAddCurrentTaskToDelayedList+0x124>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    54e8:	000287b7          	lui	a5,0x28
    54ec:	dcc78793          	addi	a5,a5,-564 # 27dcc <xSuspendedTaskList>
    54f0:	0047a783          	lw	a5,4(a5)
    54f4:	fef42423          	sw	a5,-24(s0)
    54f8:	000287b7          	lui	a5,0x28
    54fc:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5500:	fe842703          	lw	a4,-24(s0)
    5504:	00e7a423          	sw	a4,8(a5)
    5508:	000287b7          	lui	a5,0x28
    550c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5510:	fe842703          	lw	a4,-24(s0)
    5514:	00872703          	lw	a4,8(a4)
    5518:	00e7a623          	sw	a4,12(a5)
    551c:	000287b7          	lui	a5,0x28
    5520:	c507a703          	lw	a4,-944(a5) # 27c50 <pxCurrentTCB>
    5524:	fe842783          	lw	a5,-24(s0)
    5528:	0087a783          	lw	a5,8(a5)
    552c:	00470713          	addi	a4,a4,4
    5530:	00e7a223          	sw	a4,4(a5)
    5534:	000287b7          	lui	a5,0x28
    5538:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    553c:	00478713          	addi	a4,a5,4
    5540:	fe842783          	lw	a5,-24(s0)
    5544:	00e7a423          	sw	a4,8(a5)
    5548:	000287b7          	lui	a5,0x28
    554c:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5550:	00028737          	lui	a4,0x28
    5554:	dcc70713          	addi	a4,a4,-564 # 27dcc <xSuspendedTaskList>
    5558:	00e7aa23          	sw	a4,20(a5)
    555c:	000287b7          	lui	a5,0x28
    5560:	dcc78793          	addi	a5,a5,-564 # 27dcc <xSuspendedTaskList>
    5564:	0007a783          	lw	a5,0(a5)
    5568:	00178713          	addi	a4,a5,1
    556c:	000287b7          	lui	a5,0x28
    5570:	dcc78793          	addi	a5,a5,-564 # 27dcc <xSuspendedTaskList>
    5574:	00e7a023          	sw	a4,0(a5)
    5578:	00000013          	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    557c:	0900006f          	j	560c <prvAddCurrentTaskToDelayedList+0x1b0>
            xTimeToWake = xConstTickCount + xTicksToWait;
    5580:	fe442703          	lw	a4,-28(s0)
    5584:	fdc42783          	lw	a5,-36(s0)
    5588:	00f707b3          	add	a5,a4,a5
    558c:	fef42623          	sw	a5,-20(s0)
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    5590:	000287b7          	lui	a5,0x28
    5594:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    5598:	fec42703          	lw	a4,-20(s0)
    559c:	00e7a223          	sw	a4,4(a5)
            if( xTimeToWake < xConstTickCount )
    55a0:	fec42703          	lw	a4,-20(s0)
    55a4:	fe442783          	lw	a5,-28(s0)
    55a8:	02f77463          	bgeu	a4,a5,55d0 <prvAddCurrentTaskToDelayedList+0x174>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    55ac:	000287b7          	lui	a5,0x28
    55b0:	d9c7a703          	lw	a4,-612(a5) # 27d9c <pxOverflowDelayedTaskList>
    55b4:	000287b7          	lui	a5,0x28
    55b8:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    55bc:	00478793          	addi	a5,a5,4
    55c0:	00078593          	mv	a1,a5
    55c4:	00070513          	mv	a0,a4
    55c8:	7cd030ef          	jal	ra,9594 <vListInsert>
}
    55cc:	0400006f          	j	560c <prvAddCurrentTaskToDelayedList+0x1b0>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    55d0:	000287b7          	lui	a5,0x28
    55d4:	d987a703          	lw	a4,-616(a5) # 27d98 <pxDelayedTaskList>
    55d8:	000287b7          	lui	a5,0x28
    55dc:	c507a783          	lw	a5,-944(a5) # 27c50 <pxCurrentTCB>
    55e0:	00478793          	addi	a5,a5,4
    55e4:	00078593          	mv	a1,a5
    55e8:	00070513          	mv	a0,a4
    55ec:	7a9030ef          	jal	ra,9594 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
    55f0:	000287b7          	lui	a5,0x28
    55f4:	e007a783          	lw	a5,-512(a5) # 27e00 <xNextTaskUnblockTime>
    55f8:	fec42703          	lw	a4,-20(s0)
    55fc:	00f77863          	bgeu	a4,a5,560c <prvAddCurrentTaskToDelayedList+0x1b0>
                    xNextTaskUnblockTime = xTimeToWake;
    5600:	000287b7          	lui	a5,0x28
    5604:	fec42703          	lw	a4,-20(s0)
    5608:	e0e7a023          	sw	a4,-512(a5) # 27e00 <xNextTaskUnblockTime>
}
    560c:	00000013          	nop
    5610:	02c12083          	lw	ra,44(sp)
    5614:	02812403          	lw	s0,40(sp)
    5618:	03010113          	addi	sp,sp,48
    561c:	00008067          	ret

00005620 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    5620:	fe010113          	addi	sp,sp,-32
    5624:	00112e23          	sw	ra,28(sp)
    5628:	00812c23          	sw	s0,24(sp)
    562c:	02010413          	addi	s0,sp,32
        BaseType_t xReturn = pdFAIL;
    5630:	fe042623          	sw	zero,-20(s0)

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    5634:	4d1000ef          	jal	ra,6304 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    5638:	000287b7          	lui	a5,0x28
    563c:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    5640:	02078863          	beqz	a5,5670 <xTimerCreateTimerTask+0x50>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
    5644:	000287b7          	lui	a5,0x28
    5648:	e4078793          	addi	a5,a5,-448 # 27e40 <xTimerTaskHandle>
    564c:	00600713          	li	a4,6
    5650:	00000693          	li	a3,0
    5654:	0a000613          	li	a2,160
    5658:	000235b7          	lui	a1,0x23
    565c:	4d858593          	addi	a1,a1,1240 # 234d8 <__flash_rodata_start+0x88>
    5660:	00006537          	lui	a0,0x6
    5664:	cdc50513          	addi	a0,a0,-804 # 5cdc <prvTimerTask>
    5668:	e1dfa0ef          	jal	ra,484 <xTaskCreate>
    566c:	fea42623          	sw	a0,-20(s0)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
    5670:	fec42783          	lw	a5,-20(s0)
    5674:	00079a63          	bnez	a5,5688 <xTimerCreateTimerTask+0x68>
    5678:	30047073          	csrci	mstatus,8
    567c:	00100073          	ebreak
    5680:	00000013          	nop
    5684:	ffdff06f          	j	5680 <xTimerCreateTimerTask+0x60>
        return xReturn;
    5688:	fec42783          	lw	a5,-20(s0)
    }
    568c:	00078513          	mv	a0,a5
    5690:	01c12083          	lw	ra,28(sp)
    5694:	01812403          	lw	s0,24(sp)
    5698:	02010113          	addi	sp,sp,32
    569c:	00008067          	ret

000056a0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    56a0:	fc010113          	addi	sp,sp,-64
    56a4:	02112e23          	sw	ra,60(sp)
    56a8:	02812c23          	sw	s0,56(sp)
    56ac:	04010413          	addi	s0,sp,64
    56b0:	fca42e23          	sw	a0,-36(s0)
    56b4:	fcb42c23          	sw	a1,-40(s0)
    56b8:	fcc42a23          	sw	a2,-44(s0)
    56bc:	fcd42823          	sw	a3,-48(s0)
    56c0:	fce42623          	sw	a4,-52(s0)
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    56c4:	02c00513          	li	a0,44
    56c8:	351020ef          	jal	ra,8218 <pvPortMalloc>
    56cc:	fea42623          	sw	a0,-20(s0)

            if( pxNewTimer != NULL )
    56d0:	fec42783          	lw	a5,-20(s0)
    56d4:	02078463          	beqz	a5,56fc <xTimerCreate+0x5c>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    56d8:	fec42783          	lw	a5,-20(s0)
    56dc:	02078423          	sb	zero,40(a5)
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    56e0:	fec42783          	lw	a5,-20(s0)
    56e4:	fcc42703          	lw	a4,-52(s0)
    56e8:	fd042683          	lw	a3,-48(s0)
    56ec:	fd442603          	lw	a2,-44(s0)
    56f0:	fd842583          	lw	a1,-40(s0)
    56f4:	fdc42503          	lw	a0,-36(s0)
    56f8:	01c000ef          	jal	ra,5714 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
    56fc:	fec42783          	lw	a5,-20(s0)
        }
    5700:	00078513          	mv	a0,a5
    5704:	03c12083          	lw	ra,60(sp)
    5708:	03812403          	lw	s0,56(sp)
    570c:	04010113          	addi	sp,sp,64
    5710:	00008067          	ret

00005714 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
    5714:	fd010113          	addi	sp,sp,-48
    5718:	02112623          	sw	ra,44(sp)
    571c:	02812423          	sw	s0,40(sp)
    5720:	03010413          	addi	s0,sp,48
    5724:	fea42623          	sw	a0,-20(s0)
    5728:	feb42423          	sw	a1,-24(s0)
    572c:	fec42223          	sw	a2,-28(s0)
    5730:	fed42023          	sw	a3,-32(s0)
    5734:	fce42e23          	sw	a4,-36(s0)
    5738:	fcf42c23          	sw	a5,-40(s0)
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
    573c:	fe842783          	lw	a5,-24(s0)
    5740:	00079a63          	bnez	a5,5754 <prvInitialiseNewTimer+0x40>
    5744:	30047073          	csrci	mstatus,8
    5748:	00100073          	ebreak
    574c:	00000013          	nop
    5750:	ffdff06f          	j	574c <prvInitialiseNewTimer+0x38>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    5754:	3b1000ef          	jal	ra,6304 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    5758:	fd842783          	lw	a5,-40(s0)
    575c:	fec42703          	lw	a4,-20(s0)
    5760:	00e7a023          	sw	a4,0(a5)
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    5764:	fd842783          	lw	a5,-40(s0)
    5768:	fe842703          	lw	a4,-24(s0)
    576c:	00e7ac23          	sw	a4,24(a5)
        pxNewTimer->pvTimerID = pvTimerID;
    5770:	fd842783          	lw	a5,-40(s0)
    5774:	fe042703          	lw	a4,-32(s0)
    5778:	00e7ae23          	sw	a4,28(a5)
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    577c:	fd842783          	lw	a5,-40(s0)
    5780:	fdc42703          	lw	a4,-36(s0)
    5784:	02e7a023          	sw	a4,32(a5)
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    5788:	fd842783          	lw	a5,-40(s0)
    578c:	00478793          	addi	a5,a5,4
    5790:	00078513          	mv	a0,a5
    5794:	551030ef          	jal	ra,94e4 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    5798:	fe442783          	lw	a5,-28(s0)
    579c:	00078e63          	beqz	a5,57b8 <prvInitialiseNewTimer+0xa4>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    57a0:	fd842783          	lw	a5,-40(s0)
    57a4:	0287c783          	lbu	a5,40(a5)
    57a8:	0047e793          	ori	a5,a5,4
    57ac:	0ff7f713          	zext.b	a4,a5
    57b0:	fd842783          	lw	a5,-40(s0)
    57b4:	02e78423          	sb	a4,40(a5)
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    57b8:	00000013          	nop
    57bc:	02c12083          	lw	ra,44(sp)
    57c0:	02812403          	lw	s0,40(sp)
    57c4:	03010113          	addi	sp,sp,48
    57c8:	00008067          	ret

000057cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    57cc:	fb010113          	addi	sp,sp,-80
    57d0:	04112623          	sw	ra,76(sp)
    57d4:	04812423          	sw	s0,72(sp)
    57d8:	05010413          	addi	s0,sp,80
    57dc:	fca42623          	sw	a0,-52(s0)
    57e0:	fcb42423          	sw	a1,-56(s0)
    57e4:	fcc42223          	sw	a2,-60(s0)
    57e8:	fcd42023          	sw	a3,-64(s0)
    57ec:	fae42e23          	sw	a4,-68(s0)
    57f0:	000287b7          	lui	a5,0x28
    57f4:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    57f8:	fee42623          	sw	a4,-20(s0)
    57fc:	00000713          	li	a4,0
        BaseType_t xReturn = pdFAIL;
    5800:	fc042c23          	sw	zero,-40(s0)
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
    5804:	fcc42783          	lw	a5,-52(s0)
    5808:	00079a63          	bnez	a5,581c <xTimerGenericCommand+0x50>
    580c:	30047073          	csrci	mstatus,8
    5810:	00100073          	ebreak
    5814:	00000013          	nop
    5818:	ffdff06f          	j	5814 <xTimerGenericCommand+0x48>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    581c:	000287b7          	lui	a5,0x28
    5820:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    5824:	0a078663          	beqz	a5,58d0 <xTimerGenericCommand+0x104>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    5828:	fc842783          	lw	a5,-56(s0)
    582c:	fcf42e23          	sw	a5,-36(s0)
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5830:	fc442783          	lw	a5,-60(s0)
    5834:	fef42023          	sw	a5,-32(s0)
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    5838:	fcc42783          	lw	a5,-52(s0)
    583c:	fef42223          	sw	a5,-28(s0)

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    5840:	fc842703          	lw	a4,-56(s0)
    5844:	00500793          	li	a5,5
    5848:	06e7c263          	blt	a5,a4,58ac <xTimerGenericCommand+0xe0>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    584c:	ba0fe0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    5850:	00050713          	mv	a4,a0
    5854:	00200793          	li	a5,2
    5858:	02f71663          	bne	a4,a5,5884 <xTimerGenericCommand+0xb8>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    585c:	000287b7          	lui	a5,0x28
    5860:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    5864:	fdc40713          	addi	a4,s0,-36
    5868:	00000693          	li	a3,0
    586c:	fbc42603          	lw	a2,-68(s0)
    5870:	00070593          	mv	a1,a4
    5874:	00078513          	mv	a0,a5
    5878:	76d040ef          	jal	ra,a7e4 <xQueueGenericSend>
    587c:	fca42c23          	sw	a0,-40(s0)
    5880:	0500006f          	j	58d0 <xTimerGenericCommand+0x104>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    5884:	000287b7          	lui	a5,0x28
    5888:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    588c:	fdc40713          	addi	a4,s0,-36
    5890:	00000693          	li	a3,0
    5894:	00000613          	li	a2,0
    5898:	00070593          	mv	a1,a4
    589c:	00078513          	mv	a0,a5
    58a0:	745040ef          	jal	ra,a7e4 <xQueueGenericSend>
    58a4:	fca42c23          	sw	a0,-40(s0)
    58a8:	0280006f          	j	58d0 <xTimerGenericCommand+0x104>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    58ac:	000287b7          	lui	a5,0x28
    58b0:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    58b4:	fdc40713          	addi	a4,s0,-36
    58b8:	00000693          	li	a3,0
    58bc:	fc042603          	lw	a2,-64(s0)
    58c0:	00070593          	mv	a1,a4
    58c4:	00078513          	mv	a0,a5
    58c8:	2b0050ef          	jal	ra,ab78 <xQueueGenericSendFromISR>
    58cc:	fca42c23          	sw	a0,-40(s0)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    58d0:	fd842783          	lw	a5,-40(s0)
    58d4:	00078713          	mv	a4,a5
    }
    58d8:	000287b7          	lui	a5,0x28
    58dc:	fec42683          	lw	a3,-20(s0)
    58e0:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    58e4:	00f6c7b3          	xor	a5,a3,a5
    58e8:	00000693          	li	a3,0
    58ec:	00078463          	beqz	a5,58f4 <xTimerGenericCommand+0x128>
    58f0:	3ac080ef          	jal	ra,dc9c <__stack_chk_fail>
    58f4:	00070513          	mv	a0,a4
    58f8:	04c12083          	lw	ra,76(sp)
    58fc:	04812403          	lw	s0,72(sp)
    5900:	05010113          	addi	sp,sp,80
    5904:	00008067          	ret

00005908 <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

    TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
    {
    5908:	ff010113          	addi	sp,sp,-16
    590c:	00812623          	sw	s0,12(sp)
    5910:	01010413          	addi	s0,sp,16
        /* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
         * started, then xTimerTaskHandle will be NULL. */
        configASSERT( ( xTimerTaskHandle != NULL ) );
    5914:	000287b7          	lui	a5,0x28
    5918:	e407a783          	lw	a5,-448(a5) # 27e40 <xTimerTaskHandle>
    591c:	00079a63          	bnez	a5,5930 <xTimerGetTimerDaemonTaskHandle+0x28>
    5920:	30047073          	csrci	mstatus,8
    5924:	00100073          	ebreak
    5928:	00000013          	nop
    592c:	ffdff06f          	j	5928 <xTimerGetTimerDaemonTaskHandle+0x20>
        return xTimerTaskHandle;
    5930:	000287b7          	lui	a5,0x28
    5934:	e407a783          	lw	a5,-448(a5) # 27e40 <xTimerTaskHandle>
    }
    5938:	00078513          	mv	a0,a5
    593c:	00c12403          	lw	s0,12(sp)
    5940:	01010113          	addi	sp,sp,16
    5944:	00008067          	ret

00005948 <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

    TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
    {
    5948:	fd010113          	addi	sp,sp,-48
    594c:	02812623          	sw	s0,44(sp)
    5950:	03010413          	addi	s0,sp,48
    5954:	fca42e23          	sw	a0,-36(s0)
        Timer_t * pxTimer = xTimer;
    5958:	fdc42783          	lw	a5,-36(s0)
    595c:	fef42623          	sw	a5,-20(s0)

        configASSERT( xTimer );
    5960:	fdc42783          	lw	a5,-36(s0)
    5964:	00079a63          	bnez	a5,5978 <xTimerGetPeriod+0x30>
    5968:	30047073          	csrci	mstatus,8
    596c:	00100073          	ebreak
    5970:	00000013          	nop
    5974:	ffdff06f          	j	5970 <xTimerGetPeriod+0x28>
        return pxTimer->xTimerPeriodInTicks;
    5978:	fec42783          	lw	a5,-20(s0)
    597c:	0187a783          	lw	a5,24(a5)
    }
    5980:	00078513          	mv	a0,a5
    5984:	02c12403          	lw	s0,44(sp)
    5988:	03010113          	addi	sp,sp,48
    598c:	00008067          	ret

00005990 <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

    void vTimerSetReloadMode( TimerHandle_t xTimer,
                              const BaseType_t xAutoReload )
    {
    5990:	fd010113          	addi	sp,sp,-48
    5994:	02812623          	sw	s0,44(sp)
    5998:	03010413          	addi	s0,sp,48
    599c:	fca42e23          	sw	a0,-36(s0)
    59a0:	fcb42c23          	sw	a1,-40(s0)
        Timer_t * pxTimer = xTimer;
    59a4:	fdc42783          	lw	a5,-36(s0)
    59a8:	fef42623          	sw	a5,-20(s0)

        configASSERT( xTimer );
    59ac:	fdc42783          	lw	a5,-36(s0)
    59b0:	00079a63          	bnez	a5,59c4 <vTimerSetReloadMode+0x34>
    59b4:	30047073          	csrci	mstatus,8
    59b8:	00100073          	ebreak
    59bc:	00000013          	nop
    59c0:	ffdff06f          	j	59bc <vTimerSetReloadMode+0x2c>
        taskENTER_CRITICAL();
    59c4:	30047073          	csrci	mstatus,8
    59c8:	000267b7          	lui	a5,0x26
    59cc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    59d0:	00178713          	addi	a4,a5,1
    59d4:	000267b7          	lui	a5,0x26
    59d8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( xAutoReload != pdFALSE )
    59dc:	fd842783          	lw	a5,-40(s0)
    59e0:	02078063          	beqz	a5,5a00 <vTimerSetReloadMode+0x70>
            {
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    59e4:	fec42783          	lw	a5,-20(s0)
    59e8:	0287c783          	lbu	a5,40(a5)
    59ec:	0047e793          	ori	a5,a5,4
    59f0:	0ff7f713          	zext.b	a4,a5
    59f4:	fec42783          	lw	a5,-20(s0)
    59f8:	02e78423          	sb	a4,40(a5)
    59fc:	01c0006f          	j	5a18 <vTimerSetReloadMode+0x88>
            }
            else
            {
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
    5a00:	fec42783          	lw	a5,-20(s0)
    5a04:	0287c783          	lbu	a5,40(a5)
    5a08:	ffb7f793          	andi	a5,a5,-5
    5a0c:	0ff7f713          	zext.b	a4,a5
    5a10:	fec42783          	lw	a5,-20(s0)
    5a14:	02e78423          	sb	a4,40(a5)
            }
        }
        taskEXIT_CRITICAL();
    5a18:	000267b7          	lui	a5,0x26
    5a1c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5a20:	fff78713          	addi	a4,a5,-1
    5a24:	000267b7          	lui	a5,0x26
    5a28:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    5a2c:	000267b7          	lui	a5,0x26
    5a30:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5a34:	00079463          	bnez	a5,5a3c <vTimerSetReloadMode+0xac>
    5a38:	30046073          	csrsi	mstatus,8
    }
    5a3c:	00000013          	nop
    5a40:	02c12403          	lw	s0,44(sp)
    5a44:	03010113          	addi	sp,sp,48
    5a48:	00008067          	ret

00005a4c <xTimerGetReloadMode>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerGetReloadMode( TimerHandle_t xTimer )
    {
    5a4c:	fd010113          	addi	sp,sp,-48
    5a50:	02812623          	sw	s0,44(sp)
    5a54:	03010413          	addi	s0,sp,48
    5a58:	fca42e23          	sw	a0,-36(s0)
        Timer_t * pxTimer = xTimer;
    5a5c:	fdc42783          	lw	a5,-36(s0)
    5a60:	fef42623          	sw	a5,-20(s0)
        BaseType_t xReturn;

        configASSERT( xTimer );
    5a64:	fdc42783          	lw	a5,-36(s0)
    5a68:	00079a63          	bnez	a5,5a7c <xTimerGetReloadMode+0x30>
    5a6c:	30047073          	csrci	mstatus,8
    5a70:	00100073          	ebreak
    5a74:	00000013          	nop
    5a78:	ffdff06f          	j	5a74 <xTimerGetReloadMode+0x28>
        taskENTER_CRITICAL();
    5a7c:	30047073          	csrci	mstatus,8
    5a80:	000267b7          	lui	a5,0x26
    5a84:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5a88:	00178713          	addi	a4,a5,1
    5a8c:	000267b7          	lui	a5,0x26
    5a90:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
    5a94:	fec42783          	lw	a5,-20(s0)
    5a98:	0287c783          	lbu	a5,40(a5)
    5a9c:	0047f793          	andi	a5,a5,4
    5aa0:	00079663          	bnez	a5,5aac <xTimerGetReloadMode+0x60>
            {
                /* Not an auto-reload timer. */
                xReturn = pdFALSE;
    5aa4:	fe042423          	sw	zero,-24(s0)
    5aa8:	00c0006f          	j	5ab4 <xTimerGetReloadMode+0x68>
            }
            else
            {
                /* Is an auto-reload timer. */
                xReturn = pdTRUE;
    5aac:	00100793          	li	a5,1
    5ab0:	fef42423          	sw	a5,-24(s0)
            }
        }
        taskEXIT_CRITICAL();
    5ab4:	000267b7          	lui	a5,0x26
    5ab8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5abc:	fff78713          	addi	a4,a5,-1
    5ac0:	000267b7          	lui	a5,0x26
    5ac4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    5ac8:	000267b7          	lui	a5,0x26
    5acc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    5ad0:	00079463          	bnez	a5,5ad8 <xTimerGetReloadMode+0x8c>
    5ad4:	30046073          	csrsi	mstatus,8

        return xReturn;
    5ad8:	fe842783          	lw	a5,-24(s0)
    }
    5adc:	00078513          	mv	a0,a5
    5ae0:	02c12403          	lw	s0,44(sp)
    5ae4:	03010113          	addi	sp,sp,48
    5ae8:	00008067          	ret

00005aec <uxTimerGetReloadMode>:

    UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer )
    {
    5aec:	fe010113          	addi	sp,sp,-32
    5af0:	00112e23          	sw	ra,28(sp)
    5af4:	00812c23          	sw	s0,24(sp)
    5af8:	02010413          	addi	s0,sp,32
    5afc:	fea42623          	sw	a0,-20(s0)
        return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
    5b00:	fec42503          	lw	a0,-20(s0)
    5b04:	f49ff0ef          	jal	ra,5a4c <xTimerGetReloadMode>
    5b08:	00050793          	mv	a5,a0
    }
    5b0c:	00078513          	mv	a0,a5
    5b10:	01c12083          	lw	ra,28(sp)
    5b14:	01812403          	lw	s0,24(sp)
    5b18:	02010113          	addi	sp,sp,32
    5b1c:	00008067          	ret

00005b20 <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

    TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
    {
    5b20:	fd010113          	addi	sp,sp,-48
    5b24:	02812623          	sw	s0,44(sp)
    5b28:	03010413          	addi	s0,sp,48
    5b2c:	fca42e23          	sw	a0,-36(s0)
        Timer_t * pxTimer = xTimer;
    5b30:	fdc42783          	lw	a5,-36(s0)
    5b34:	fef42423          	sw	a5,-24(s0)
        TickType_t xReturn;

        configASSERT( xTimer );
    5b38:	fdc42783          	lw	a5,-36(s0)
    5b3c:	00079a63          	bnez	a5,5b50 <xTimerGetExpiryTime+0x30>
    5b40:	30047073          	csrci	mstatus,8
    5b44:	00100073          	ebreak
    5b48:	00000013          	nop
    5b4c:	ffdff06f          	j	5b48 <xTimerGetExpiryTime+0x28>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
    5b50:	fe842783          	lw	a5,-24(s0)
    5b54:	0047a783          	lw	a5,4(a5)
    5b58:	fef42623          	sw	a5,-20(s0)
        return xReturn;
    5b5c:	fec42783          	lw	a5,-20(s0)
    }
    5b60:	00078513          	mv	a0,a5
    5b64:	02c12403          	lw	s0,44(sp)
    5b68:	03010113          	addi	sp,sp,48
    5b6c:	00008067          	ret

00005b70 <pcTimerGetName>:
/*-----------------------------------------------------------*/

    const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
    5b70:	fd010113          	addi	sp,sp,-48
    5b74:	02812623          	sw	s0,44(sp)
    5b78:	03010413          	addi	s0,sp,48
    5b7c:	fca42e23          	sw	a0,-36(s0)
        Timer_t * pxTimer = xTimer;
    5b80:	fdc42783          	lw	a5,-36(s0)
    5b84:	fef42623          	sw	a5,-20(s0)

        configASSERT( xTimer );
    5b88:	fdc42783          	lw	a5,-36(s0)
    5b8c:	00079a63          	bnez	a5,5ba0 <pcTimerGetName+0x30>
    5b90:	30047073          	csrci	mstatus,8
    5b94:	00100073          	ebreak
    5b98:	00000013          	nop
    5b9c:	ffdff06f          	j	5b98 <pcTimerGetName+0x28>
        return pxTimer->pcTimerName;
    5ba0:	fec42783          	lw	a5,-20(s0)
    5ba4:	0007a783          	lw	a5,0(a5)
    }
    5ba8:	00078513          	mv	a0,a5
    5bac:	02c12403          	lw	s0,44(sp)
    5bb0:	03010113          	addi	sp,sp,48
    5bb4:	00008067          	ret

00005bb8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    5bb8:	fe010113          	addi	sp,sp,-32
    5bbc:	00112e23          	sw	ra,28(sp)
    5bc0:	00812c23          	sw	s0,24(sp)
    5bc4:	02010413          	addi	s0,sp,32
    5bc8:	fea42623          	sw	a0,-20(s0)
    5bcc:	feb42423          	sw	a1,-24(s0)
    5bd0:	fec42223          	sw	a2,-28(s0)
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    5bd4:	0280006f          	j	5bfc <prvReloadTimer+0x44>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    5bd8:	fec42783          	lw	a5,-20(s0)
    5bdc:	0187a783          	lw	a5,24(a5)
    5be0:	fe842703          	lw	a4,-24(s0)
    5be4:	00f707b3          	add	a5,a4,a5
    5be8:	fef42423          	sw	a5,-24(s0)

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5bec:	fec42783          	lw	a5,-20(s0)
    5bf0:	0207a783          	lw	a5,32(a5)
    5bf4:	fec42503          	lw	a0,-20(s0)
    5bf8:	000780e7          	jalr	a5
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    5bfc:	fec42783          	lw	a5,-20(s0)
    5c00:	0187a703          	lw	a4,24(a5)
    5c04:	fe842783          	lw	a5,-24(s0)
    5c08:	00f707b3          	add	a5,a4,a5
    5c0c:	fe842683          	lw	a3,-24(s0)
    5c10:	fe442603          	lw	a2,-28(s0)
    5c14:	00078593          	mv	a1,a5
    5c18:	fec42503          	lw	a0,-20(s0)
    5c1c:	2ec000ef          	jal	ra,5f08 <prvInsertTimerInActiveList>
    5c20:	00050793          	mv	a5,a0
    5c24:	fa079ae3          	bnez	a5,5bd8 <prvReloadTimer+0x20>
        }
    }
    5c28:	00000013          	nop
    5c2c:	00000013          	nop
    5c30:	01c12083          	lw	ra,28(sp)
    5c34:	01812403          	lw	s0,24(sp)
    5c38:	02010113          	addi	sp,sp,32
    5c3c:	00008067          	ret

00005c40 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    5c40:	fd010113          	addi	sp,sp,-48
    5c44:	02112623          	sw	ra,44(sp)
    5c48:	02812423          	sw	s0,40(sp)
    5c4c:	03010413          	addi	s0,sp,48
    5c50:	fca42e23          	sw	a0,-36(s0)
    5c54:	fcb42c23          	sw	a1,-40(s0)
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5c58:	000287b7          	lui	a5,0x28
    5c5c:	e347a783          	lw	a5,-460(a5) # 27e34 <pxCurrentTimerList>
    5c60:	00c7a783          	lw	a5,12(a5)
    5c64:	00c7a783          	lw	a5,12(a5)
    5c68:	fef42623          	sw	a5,-20(s0)

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5c6c:	fec42783          	lw	a5,-20(s0)
    5c70:	00478793          	addi	a5,a5,4
    5c74:	00078513          	mv	a0,a5
    5c78:	1f1030ef          	jal	ra,9668 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5c7c:	fec42783          	lw	a5,-20(s0)
    5c80:	0287c783          	lbu	a5,40(a5)
    5c84:	0047f793          	andi	a5,a5,4
    5c88:	00078c63          	beqz	a5,5ca0 <prvProcessExpiredTimer+0x60>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    5c8c:	fd842603          	lw	a2,-40(s0)
    5c90:	fdc42583          	lw	a1,-36(s0)
    5c94:	fec42503          	lw	a0,-20(s0)
    5c98:	f21ff0ef          	jal	ra,5bb8 <prvReloadTimer>
    5c9c:	01c0006f          	j	5cb8 <prvProcessExpiredTimer+0x78>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    5ca0:	fec42783          	lw	a5,-20(s0)
    5ca4:	0287c783          	lbu	a5,40(a5)
    5ca8:	ffe7f793          	andi	a5,a5,-2
    5cac:	0ff7f713          	zext.b	a4,a5
    5cb0:	fec42783          	lw	a5,-20(s0)
    5cb4:	02e78423          	sb	a4,40(a5)
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5cb8:	fec42783          	lw	a5,-20(s0)
    5cbc:	0207a783          	lw	a5,32(a5)
    5cc0:	fec42503          	lw	a0,-20(s0)
    5cc4:	000780e7          	jalr	a5
    }
    5cc8:	00000013          	nop
    5ccc:	02c12083          	lw	ra,44(sp)
    5cd0:	02812403          	lw	s0,40(sp)
    5cd4:	03010113          	addi	sp,sp,48
    5cd8:	00008067          	ret

00005cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    5cdc:	fd010113          	addi	sp,sp,-48
    5ce0:	02112623          	sw	ra,44(sp)
    5ce4:	02812423          	sw	s0,40(sp)
    5ce8:	03010413          	addi	s0,sp,48
    5cec:	fca42e23          	sw	a0,-36(s0)
    5cf0:	000287b7          	lui	a5,0x28
    5cf4:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    5cf8:	fee42623          	sw	a4,-20(s0)
    5cfc:	00000713          	li	a4,0

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    5d00:	fe440793          	addi	a5,s0,-28
    5d04:	00078513          	mv	a0,a5
    5d08:	124000ef          	jal	ra,5e2c <prvGetNextExpireTime>
    5d0c:	fea42423          	sw	a0,-24(s0)

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    5d10:	fe442783          	lw	a5,-28(s0)
    5d14:	00078593          	mv	a1,a5
    5d18:	fe842503          	lw	a0,-24(s0)
    5d1c:	010000ef          	jal	ra,5d2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
    5d20:	2cc000ef          	jal	ra,5fec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    5d24:	00000013          	nop
    5d28:	fd9ff06f          	j	5d00 <prvTimerTask+0x24>

00005d2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    5d2c:	fd010113          	addi	sp,sp,-48
    5d30:	02112623          	sw	ra,44(sp)
    5d34:	02812423          	sw	s0,40(sp)
    5d38:	03010413          	addi	s0,sp,48
    5d3c:	fca42e23          	sw	a0,-36(s0)
    5d40:	fcb42c23          	sw	a1,-40(s0)
    5d44:	000287b7          	lui	a5,0x28
    5d48:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    5d4c:	fee42623          	sw	a4,-20(s0)
    5d50:	00000713          	li	a4,0
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    5d54:	d39fb0ef          	jal	ra,1a8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5d58:	fe440793          	addi	a5,s0,-28
    5d5c:	00078513          	mv	a0,a5
    5d60:	13c000ef          	jal	ra,5e9c <prvSampleTimeNow>
    5d64:	fea42423          	sw	a0,-24(s0)

            if( xTimerListsWereSwitched == pdFALSE )
    5d68:	fe442783          	lw	a5,-28(s0)
    5d6c:	08079663          	bnez	a5,5df8 <prvProcessTimerOrBlockTask+0xcc>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5d70:	fd842783          	lw	a5,-40(s0)
    5d74:	02079263          	bnez	a5,5d98 <prvProcessTimerOrBlockTask+0x6c>
    5d78:	fdc42703          	lw	a4,-36(s0)
    5d7c:	fe842783          	lw	a5,-24(s0)
    5d80:	00e7ec63          	bltu	a5,a4,5d98 <prvProcessTimerOrBlockTask+0x6c>
                {
                    ( void ) xTaskResumeAll();
    5d84:	d39fb0ef          	jal	ra,1abc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5d88:	fe842583          	lw	a1,-24(s0)
    5d8c:	fdc42503          	lw	a0,-36(s0)
    5d90:	eb1ff0ef          	jal	ra,5c40 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
    5d94:	0680006f          	j	5dfc <prvProcessTimerOrBlockTask+0xd0>
                    if( xListWasEmpty != pdFALSE )
    5d98:	fd842783          	lw	a5,-40(s0)
    5d9c:	02078263          	beqz	a5,5dc0 <prvProcessTimerOrBlockTask+0x94>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5da0:	000287b7          	lui	a5,0x28
    5da4:	e387a783          	lw	a5,-456(a5) # 27e38 <pxOverflowTimerList>
    5da8:	0007a783          	lw	a5,0(a5)
    5dac:	00079663          	bnez	a5,5db8 <prvProcessTimerOrBlockTask+0x8c>
    5db0:	00100793          	li	a5,1
    5db4:	0080006f          	j	5dbc <prvProcessTimerOrBlockTask+0x90>
    5db8:	00000793          	li	a5,0
    5dbc:	fcf42c23          	sw	a5,-40(s0)
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5dc0:	000287b7          	lui	a5,0x28
    5dc4:	e3c7a683          	lw	a3,-452(a5) # 27e3c <xTimerQueue>
    5dc8:	fdc42703          	lw	a4,-36(s0)
    5dcc:	fe842783          	lw	a5,-24(s0)
    5dd0:	40f707b3          	sub	a5,a4,a5
    5dd4:	fd842603          	lw	a2,-40(s0)
    5dd8:	00078593          	mv	a1,a5
    5ddc:	00068513          	mv	a0,a3
    5de0:	7f8060ef          	jal	ra,c5d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
    5de4:	cd9fb0ef          	jal	ra,1abc <xTaskResumeAll>
    5de8:	00050793          	mv	a5,a0
    5dec:	00079863          	bnez	a5,5dfc <prvProcessTimerOrBlockTask+0xd0>
                        portYIELD_WITHIN_API();
    5df0:	00000073          	ecall
    }
    5df4:	0080006f          	j	5dfc <prvProcessTimerOrBlockTask+0xd0>
                ( void ) xTaskResumeAll();
    5df8:	cc5fb0ef          	jal	ra,1abc <xTaskResumeAll>
    }
    5dfc:	00000013          	nop
    5e00:	000287b7          	lui	a5,0x28
    5e04:	fec42703          	lw	a4,-20(s0)
    5e08:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    5e0c:	00f747b3          	xor	a5,a4,a5
    5e10:	00000713          	li	a4,0
    5e14:	00078463          	beqz	a5,5e1c <prvProcessTimerOrBlockTask+0xf0>
    5e18:	685070ef          	jal	ra,dc9c <__stack_chk_fail>
    5e1c:	02c12083          	lw	ra,44(sp)
    5e20:	02812403          	lw	s0,40(sp)
    5e24:	03010113          	addi	sp,sp,48
    5e28:	00008067          	ret

00005e2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    5e2c:	fd010113          	addi	sp,sp,-48
    5e30:	02812623          	sw	s0,44(sp)
    5e34:	03010413          	addi	s0,sp,48
    5e38:	fca42e23          	sw	a0,-36(s0)
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5e3c:	000287b7          	lui	a5,0x28
    5e40:	e347a783          	lw	a5,-460(a5) # 27e34 <pxCurrentTimerList>
    5e44:	0007a783          	lw	a5,0(a5)
    5e48:	00079663          	bnez	a5,5e54 <prvGetNextExpireTime+0x28>
    5e4c:	00100793          	li	a5,1
    5e50:	0080006f          	j	5e58 <prvGetNextExpireTime+0x2c>
    5e54:	00000793          	li	a5,0
    5e58:	fdc42703          	lw	a4,-36(s0)
    5e5c:	00f72023          	sw	a5,0(a4)

        if( *pxListWasEmpty == pdFALSE )
    5e60:	fdc42783          	lw	a5,-36(s0)
    5e64:	0007a783          	lw	a5,0(a5)
    5e68:	00079e63          	bnez	a5,5e84 <prvGetNextExpireTime+0x58>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5e6c:	000287b7          	lui	a5,0x28
    5e70:	e347a783          	lw	a5,-460(a5) # 27e34 <pxCurrentTimerList>
    5e74:	00c7a783          	lw	a5,12(a5)
    5e78:	0007a783          	lw	a5,0(a5)
    5e7c:	fef42623          	sw	a5,-20(s0)
    5e80:	0080006f          	j	5e88 <prvGetNextExpireTime+0x5c>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    5e84:	fe042623          	sw	zero,-20(s0)
        }

        return xNextExpireTime;
    5e88:	fec42783          	lw	a5,-20(s0)
    }
    5e8c:	00078513          	mv	a0,a5
    5e90:	02c12403          	lw	s0,44(sp)
    5e94:	03010113          	addi	sp,sp,48
    5e98:	00008067          	ret

00005e9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    5e9c:	fd010113          	addi	sp,sp,-48
    5ea0:	02112623          	sw	ra,44(sp)
    5ea4:	02812423          	sw	s0,40(sp)
    5ea8:	03010413          	addi	s0,sp,48
    5eac:	fca42e23          	sw	a0,-36(s0)
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    5eb0:	f69fb0ef          	jal	ra,1e18 <xTaskGetTickCount>
    5eb4:	fea42623          	sw	a0,-20(s0)

        if( xTimeNow < xLastTime )
    5eb8:	000287b7          	lui	a5,0x28
    5ebc:	e447a783          	lw	a5,-444(a5) # 27e44 <xLastTime.0>
    5ec0:	fec42703          	lw	a4,-20(s0)
    5ec4:	00f77c63          	bgeu	a4,a5,5edc <prvSampleTimeNow+0x40>
        {
            prvSwitchTimerLists();
    5ec8:	3bc000ef          	jal	ra,6284 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    5ecc:	fdc42783          	lw	a5,-36(s0)
    5ed0:	00100713          	li	a4,1
    5ed4:	00e7a023          	sw	a4,0(a5)
    5ed8:	00c0006f          	j	5ee4 <prvSampleTimeNow+0x48>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    5edc:	fdc42783          	lw	a5,-36(s0)
    5ee0:	0007a023          	sw	zero,0(a5)
        }

        xLastTime = xTimeNow;
    5ee4:	000287b7          	lui	a5,0x28
    5ee8:	fec42703          	lw	a4,-20(s0)
    5eec:	e4e7a223          	sw	a4,-444(a5) # 27e44 <xLastTime.0>

        return xTimeNow;
    5ef0:	fec42783          	lw	a5,-20(s0)
    }
    5ef4:	00078513          	mv	a0,a5
    5ef8:	02c12083          	lw	ra,44(sp)
    5efc:	02812403          	lw	s0,40(sp)
    5f00:	03010113          	addi	sp,sp,48
    5f04:	00008067          	ret

00005f08 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    5f08:	fd010113          	addi	sp,sp,-48
    5f0c:	02112623          	sw	ra,44(sp)
    5f10:	02812423          	sw	s0,40(sp)
    5f14:	03010413          	addi	s0,sp,48
    5f18:	fca42e23          	sw	a0,-36(s0)
    5f1c:	fcb42c23          	sw	a1,-40(s0)
    5f20:	fcc42a23          	sw	a2,-44(s0)
    5f24:	fcd42823          	sw	a3,-48(s0)
        BaseType_t xProcessTimerNow = pdFALSE;
    5f28:	fe042623          	sw	zero,-20(s0)

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5f2c:	fdc42783          	lw	a5,-36(s0)
    5f30:	fd842703          	lw	a4,-40(s0)
    5f34:	00e7a223          	sw	a4,4(a5)
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5f38:	fdc42783          	lw	a5,-36(s0)
    5f3c:	fdc42703          	lw	a4,-36(s0)
    5f40:	00e7a823          	sw	a4,16(a5)

        if( xNextExpiryTime <= xTimeNow )
    5f44:	fd842703          	lw	a4,-40(s0)
    5f48:	fd442783          	lw	a5,-44(s0)
    5f4c:	04e7e463          	bltu	a5,a4,5f94 <prvInsertTimerInActiveList+0x8c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5f50:	fd442703          	lw	a4,-44(s0)
    5f54:	fd042783          	lw	a5,-48(s0)
    5f58:	40f70733          	sub	a4,a4,a5
    5f5c:	fdc42783          	lw	a5,-36(s0)
    5f60:	0187a783          	lw	a5,24(a5)
    5f64:	00f76863          	bltu	a4,a5,5f74 <prvInsertTimerInActiveList+0x6c>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    5f68:	00100793          	li	a5,1
    5f6c:	fef42623          	sw	a5,-20(s0)
    5f70:	0640006f          	j	5fd4 <prvInsertTimerInActiveList+0xcc>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5f74:	000287b7          	lui	a5,0x28
    5f78:	e387a703          	lw	a4,-456(a5) # 27e38 <pxOverflowTimerList>
    5f7c:	fdc42783          	lw	a5,-36(s0)
    5f80:	00478793          	addi	a5,a5,4
    5f84:	00078593          	mv	a1,a5
    5f88:	00070513          	mv	a0,a4
    5f8c:	608030ef          	jal	ra,9594 <vListInsert>
    5f90:	0440006f          	j	5fd4 <prvInsertTimerInActiveList+0xcc>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5f94:	fd442703          	lw	a4,-44(s0)
    5f98:	fd042783          	lw	a5,-48(s0)
    5f9c:	00f77e63          	bgeu	a4,a5,5fb8 <prvInsertTimerInActiveList+0xb0>
    5fa0:	fd842703          	lw	a4,-40(s0)
    5fa4:	fd042783          	lw	a5,-48(s0)
    5fa8:	00f76863          	bltu	a4,a5,5fb8 <prvInsertTimerInActiveList+0xb0>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    5fac:	00100793          	li	a5,1
    5fb0:	fef42623          	sw	a5,-20(s0)
    5fb4:	0200006f          	j	5fd4 <prvInsertTimerInActiveList+0xcc>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5fb8:	000287b7          	lui	a5,0x28
    5fbc:	e347a703          	lw	a4,-460(a5) # 27e34 <pxCurrentTimerList>
    5fc0:	fdc42783          	lw	a5,-36(s0)
    5fc4:	00478793          	addi	a5,a5,4
    5fc8:	00078593          	mv	a1,a5
    5fcc:	00070513          	mv	a0,a4
    5fd0:	5c4030ef          	jal	ra,9594 <vListInsert>
            }
        }

        return xProcessTimerNow;
    5fd4:	fec42783          	lw	a5,-20(s0)
    }
    5fd8:	00078513          	mv	a0,a5
    5fdc:	02c12083          	lw	ra,44(sp)
    5fe0:	02812403          	lw	s0,40(sp)
    5fe4:	03010113          	addi	sp,sp,48
    5fe8:	00008067          	ret

00005fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    5fec:	fc010113          	addi	sp,sp,-64
    5ff0:	02112e23          	sw	ra,60(sp)
    5ff4:	02812c23          	sw	s0,56(sp)
    5ff8:	04010413          	addi	s0,sp,64
    5ffc:	000287b7          	lui	a5,0x28
    6000:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    6004:	fee42623          	sw	a4,-20(s0)
    6008:	00000713          	li	a4,0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    600c:	2240006f          	j	6230 <prvProcessReceivedCommands+0x244>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
    6010:	fdc42783          	lw	a5,-36(s0)
    6014:	0407d663          	bgez	a5,6060 <prvProcessReceivedCommands+0x74>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    6018:	fdc40793          	addi	a5,s0,-36
    601c:	00478793          	addi	a5,a5,4
    6020:	fcf42823          	sw	a5,-48(s0)

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
    6024:	fd042783          	lw	a5,-48(s0)
    6028:	00079a63          	bnez	a5,603c <prvProcessReceivedCommands+0x50>
    602c:	30047073          	csrci	mstatus,8
    6030:	00100073          	ebreak
    6034:	00000013          	nop
    6038:	ffdff06f          	j	6034 <prvProcessReceivedCommands+0x48>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    603c:	fd042783          	lw	a5,-48(s0)
    6040:	0007a783          	lw	a5,0(a5)
    6044:	fd042703          	lw	a4,-48(s0)
    6048:	00472683          	lw	a3,4(a4)
    604c:	fd042703          	lw	a4,-48(s0)
    6050:	00872703          	lw	a4,8(a4)
    6054:	00070593          	mv	a1,a4
    6058:	00068513          	mv	a0,a3
    605c:	000780e7          	jalr	a5
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    6060:	fdc42783          	lw	a5,-36(s0)
    6064:	1c07c663          	bltz	a5,6230 <prvProcessReceivedCommands+0x244>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6068:	fe442783          	lw	a5,-28(s0)
    606c:	fcf42a23          	sw	a5,-44(s0)

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    6070:	fd442783          	lw	a5,-44(s0)
    6074:	0147a783          	lw	a5,20(a5)
    6078:	00078a63          	beqz	a5,608c <prvProcessReceivedCommands+0xa0>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    607c:	fd442783          	lw	a5,-44(s0)
    6080:	00478793          	addi	a5,a5,4
    6084:	00078513          	mv	a0,a5
    6088:	5e0030ef          	jal	ra,9668 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    608c:	fcc40793          	addi	a5,s0,-52
    6090:	00078513          	mv	a0,a5
    6094:	e09ff0ef          	jal	ra,5e9c <prvSampleTimeNow>
    6098:	fca42c23          	sw	a0,-40(s0)

                switch( xMessage.xMessageID )
    609c:	fdc42783          	lw	a5,-36(s0)
    60a0:	00900713          	li	a4,9
    60a4:	18f76063          	bltu	a4,a5,6224 <prvProcessReceivedCommands+0x238>
    60a8:	00279713          	slli	a4,a5,0x2
    60ac:	000237b7          	lui	a5,0x23
    60b0:	4e078793          	addi	a5,a5,1248 # 234e0 <__flash_rodata_start+0x90>
    60b4:	00f707b3          	add	a5,a4,a5
    60b8:	0007a783          	lw	a5,0(a5)
    60bc:	00078067          	jr	a5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    60c0:	fd442783          	lw	a5,-44(s0)
    60c4:	0287c783          	lbu	a5,40(a5)
    60c8:	0017e793          	ori	a5,a5,1
    60cc:	0ff7f713          	zext.b	a4,a5
    60d0:	fd442783          	lw	a5,-44(s0)
    60d4:	02e78423          	sb	a4,40(a5)

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    60d8:	fe042703          	lw	a4,-32(s0)
    60dc:	fd442783          	lw	a5,-44(s0)
    60e0:	0187a783          	lw	a5,24(a5)
    60e4:	00f707b3          	add	a5,a4,a5
    60e8:	fe042703          	lw	a4,-32(s0)
    60ec:	00070693          	mv	a3,a4
    60f0:	fd842603          	lw	a2,-40(s0)
    60f4:	00078593          	mv	a1,a5
    60f8:	fd442503          	lw	a0,-44(s0)
    60fc:	e0dff0ef          	jal	ra,5f08 <prvInsertTimerInActiveList>
    6100:	00050793          	mv	a5,a0
    6104:	12078463          	beqz	a5,622c <prvProcessReceivedCommands+0x240>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    6108:	fd442783          	lw	a5,-44(s0)
    610c:	0287c783          	lbu	a5,40(a5)
    6110:	0047f793          	andi	a5,a5,4
    6114:	02078463          	beqz	a5,613c <prvProcessReceivedCommands+0x150>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    6118:	fe042703          	lw	a4,-32(s0)
    611c:	fd442783          	lw	a5,-44(s0)
    6120:	0187a783          	lw	a5,24(a5)
    6124:	00f707b3          	add	a5,a4,a5
    6128:	fd842603          	lw	a2,-40(s0)
    612c:	00078593          	mv	a1,a5
    6130:	fd442503          	lw	a0,-44(s0)
    6134:	a85ff0ef          	jal	ra,5bb8 <prvReloadTimer>
    6138:	01c0006f          	j	6154 <prvProcessReceivedCommands+0x168>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    613c:	fd442783          	lw	a5,-44(s0)
    6140:	0287c783          	lbu	a5,40(a5)
    6144:	ffe7f793          	andi	a5,a5,-2
    6148:	0ff7f713          	zext.b	a4,a5
    614c:	fd442783          	lw	a5,-44(s0)
    6150:	02e78423          	sb	a4,40(a5)
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6154:	fd442783          	lw	a5,-44(s0)
    6158:	0207a783          	lw	a5,32(a5)
    615c:	fd442503          	lw	a0,-44(s0)
    6160:	000780e7          	jalr	a5
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
    6164:	0c80006f          	j	622c <prvProcessReceivedCommands+0x240>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    6168:	fd442783          	lw	a5,-44(s0)
    616c:	0287c783          	lbu	a5,40(a5)
    6170:	ffe7f793          	andi	a5,a5,-2
    6174:	0ff7f713          	zext.b	a4,a5
    6178:	fd442783          	lw	a5,-44(s0)
    617c:	02e78423          	sb	a4,40(a5)
                        break;
    6180:	0b00006f          	j	6230 <prvProcessReceivedCommands+0x244>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    6184:	fd442783          	lw	a5,-44(s0)
    6188:	0287c783          	lbu	a5,40(a5)
    618c:	0017e793          	ori	a5,a5,1
    6190:	0ff7f713          	zext.b	a4,a5
    6194:	fd442783          	lw	a5,-44(s0)
    6198:	02e78423          	sb	a4,40(a5)
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    619c:	fe042703          	lw	a4,-32(s0)
    61a0:	fd442783          	lw	a5,-44(s0)
    61a4:	00e7ac23          	sw	a4,24(a5)
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    61a8:	fd442783          	lw	a5,-44(s0)
    61ac:	0187a783          	lw	a5,24(a5)
    61b0:	00079a63          	bnez	a5,61c4 <prvProcessReceivedCommands+0x1d8>
    61b4:	30047073          	csrci	mstatus,8
    61b8:	00100073          	ebreak
    61bc:	00000013          	nop
    61c0:	ffdff06f          	j	61bc <prvProcessReceivedCommands+0x1d0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    61c4:	fd442783          	lw	a5,-44(s0)
    61c8:	0187a703          	lw	a4,24(a5)
    61cc:	fd842783          	lw	a5,-40(s0)
    61d0:	00f707b3          	add	a5,a4,a5
    61d4:	fd842683          	lw	a3,-40(s0)
    61d8:	fd842603          	lw	a2,-40(s0)
    61dc:	00078593          	mv	a1,a5
    61e0:	fd442503          	lw	a0,-44(s0)
    61e4:	d25ff0ef          	jal	ra,5f08 <prvInsertTimerInActiveList>
                        break;
    61e8:	0480006f          	j	6230 <prvProcessReceivedCommands+0x244>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    61ec:	fd442783          	lw	a5,-44(s0)
    61f0:	0287c783          	lbu	a5,40(a5)
    61f4:	0027f793          	andi	a5,a5,2
    61f8:	00079863          	bnez	a5,6208 <prvProcessReceivedCommands+0x21c>
                            {
                                vPortFree( pxTimer );
    61fc:	fd442503          	lw	a0,-44(s0)
    6200:	250020ef          	jal	ra,8450 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
    6204:	02c0006f          	j	6230 <prvProcessReceivedCommands+0x244>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    6208:	fd442783          	lw	a5,-44(s0)
    620c:	0287c783          	lbu	a5,40(a5)
    6210:	ffe7f793          	andi	a5,a5,-2
    6214:	0ff7f713          	zext.b	a4,a5
    6218:	fd442783          	lw	a5,-44(s0)
    621c:	02e78423          	sb	a4,40(a5)
                        break;
    6220:	0100006f          	j	6230 <prvProcessReceivedCommands+0x244>

                    default:
                        /* Don't expect to get here. */
                        break;
    6224:	00000013          	nop
    6228:	0080006f          	j	6230 <prvProcessReceivedCommands+0x244>
                        break;
    622c:	00000013          	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6230:	000287b7          	lui	a5,0x28
    6234:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    6238:	fdc40713          	addi	a4,s0,-36
    623c:	00000613          	li	a2,0
    6240:	00070593          	mv	a1,a4
    6244:	00078513          	mv	a0,a5
    6248:	4e9040ef          	jal	ra,af30 <xQueueReceive>
    624c:	00050793          	mv	a5,a0
    6250:	dc0790e3          	bnez	a5,6010 <prvProcessReceivedCommands+0x24>
                }
            }
        }
    }
    6254:	00000013          	nop
    6258:	000287b7          	lui	a5,0x28
    625c:	fec42703          	lw	a4,-20(s0)
    6260:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    6264:	00f747b3          	xor	a5,a4,a5
    6268:	00000713          	li	a4,0
    626c:	00078463          	beqz	a5,6274 <prvProcessReceivedCommands+0x288>
    6270:	22d070ef          	jal	ra,dc9c <__stack_chk_fail>
    6274:	03c12083          	lw	ra,60(sp)
    6278:	03812403          	lw	s0,56(sp)
    627c:	04010113          	addi	sp,sp,64
    6280:	00008067          	ret

00006284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    6284:	fe010113          	addi	sp,sp,-32
    6288:	00112e23          	sw	ra,28(sp)
    628c:	00812c23          	sw	s0,24(sp)
    6290:	02010413          	addi	s0,sp,32

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    6294:	0240006f          	j	62b8 <prvSwitchTimerLists+0x34>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6298:	000287b7          	lui	a5,0x28
    629c:	e347a783          	lw	a5,-460(a5) # 27e34 <pxCurrentTimerList>
    62a0:	00c7a783          	lw	a5,12(a5)
    62a4:	0007a783          	lw	a5,0(a5)
    62a8:	fef42623          	sw	a5,-20(s0)

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    62ac:	fff00593          	li	a1,-1
    62b0:	fec42503          	lw	a0,-20(s0)
    62b4:	98dff0ef          	jal	ra,5c40 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    62b8:	000287b7          	lui	a5,0x28
    62bc:	e347a783          	lw	a5,-460(a5) # 27e34 <pxCurrentTimerList>
    62c0:	0007a783          	lw	a5,0(a5)
    62c4:	fc079ae3          	bnez	a5,6298 <prvSwitchTimerLists+0x14>
        }

        pxTemp = pxCurrentTimerList;
    62c8:	000287b7          	lui	a5,0x28
    62cc:	e347a783          	lw	a5,-460(a5) # 27e34 <pxCurrentTimerList>
    62d0:	fef42423          	sw	a5,-24(s0)
        pxCurrentTimerList = pxOverflowTimerList;
    62d4:	000287b7          	lui	a5,0x28
    62d8:	e387a703          	lw	a4,-456(a5) # 27e38 <pxOverflowTimerList>
    62dc:	000287b7          	lui	a5,0x28
    62e0:	e2e7aa23          	sw	a4,-460(a5) # 27e34 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    62e4:	000287b7          	lui	a5,0x28
    62e8:	fe842703          	lw	a4,-24(s0)
    62ec:	e2e7ac23          	sw	a4,-456(a5) # 27e38 <pxOverflowTimerList>
    }
    62f0:	00000013          	nop
    62f4:	01c12083          	lw	ra,28(sp)
    62f8:	01812403          	lw	s0,24(sp)
    62fc:	02010113          	addi	sp,sp,32
    6300:	00008067          	ret

00006304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
    6304:	ff010113          	addi	sp,sp,-16
    6308:	00112623          	sw	ra,12(sp)
    630c:	00812423          	sw	s0,8(sp)
    6310:	01010413          	addi	s0,sp,16
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    6314:	30047073          	csrci	mstatus,8
    6318:	000267b7          	lui	a5,0x26
    631c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    6320:	00178713          	addi	a4,a5,1
    6324:	000267b7          	lui	a5,0x26
    6328:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( xTimerQueue == NULL )
    632c:	000287b7          	lui	a5,0x28
    6330:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    6334:	06079e63          	bnez	a5,63b0 <prvCheckForValidListAndQueue+0xac>
            {
                vListInitialise( &xActiveTimerList1 );
    6338:	000287b7          	lui	a5,0x28
    633c:	e0c78513          	addi	a0,a5,-500 # 27e0c <xActiveTimerList1>
    6340:	140030ef          	jal	ra,9480 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    6344:	000287b7          	lui	a5,0x28
    6348:	e2078513          	addi	a0,a5,-480 # 27e20 <xActiveTimerList2>
    634c:	134030ef          	jal	ra,9480 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    6350:	000287b7          	lui	a5,0x28
    6354:	00028737          	lui	a4,0x28
    6358:	e0c70713          	addi	a4,a4,-500 # 27e0c <xActiveTimerList1>
    635c:	e2e7aa23          	sw	a4,-460(a5) # 27e34 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    6360:	000287b7          	lui	a5,0x28
    6364:	00028737          	lui	a4,0x28
    6368:	e2070713          	addi	a4,a4,-480 # 27e20 <xActiveTimerList2>
    636c:	e2e7ac23          	sw	a4,-456(a5) # 27e38 <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6370:	00000613          	li	a2,0
    6374:	01000593          	li	a1,16
    6378:	00800513          	li	a0,8
    637c:	73d030ef          	jal	ra,a2b8 <xQueueGenericCreate>
    6380:	00050713          	mv	a4,a0
    6384:	000287b7          	lui	a5,0x28
    6388:	e2e7ae23          	sw	a4,-452(a5) # 27e3c <xTimerQueue>
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
    638c:	000287b7          	lui	a5,0x28
    6390:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    6394:	00078e63          	beqz	a5,63b0 <prvCheckForValidListAndQueue+0xac>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    6398:	000287b7          	lui	a5,0x28
    639c:	e3c7a703          	lw	a4,-452(a5) # 27e3c <xTimerQueue>
    63a0:	000237b7          	lui	a5,0x23
    63a4:	50878593          	addi	a1,a5,1288 # 23508 <__flash_rodata_start+0xb8>
    63a8:	00070513          	mv	a0,a4
    63ac:	7dd050ef          	jal	ra,c388 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    63b0:	000267b7          	lui	a5,0x26
    63b4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    63b8:	fff78713          	addi	a4,a5,-1
    63bc:	000267b7          	lui	a5,0x26
    63c0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    63c4:	000267b7          	lui	a5,0x26
    63c8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    63cc:	00079463          	bnez	a5,63d4 <prvCheckForValidListAndQueue+0xd0>
    63d0:	30046073          	csrsi	mstatus,8
    }
    63d4:	00000013          	nop
    63d8:	00c12083          	lw	ra,12(sp)
    63dc:	00812403          	lw	s0,8(sp)
    63e0:	01010113          	addi	sp,sp,16
    63e4:	00008067          	ret

000063e8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
    63e8:	fd010113          	addi	sp,sp,-48
    63ec:	02812623          	sw	s0,44(sp)
    63f0:	03010413          	addi	s0,sp,48
    63f4:	fca42e23          	sw	a0,-36(s0)
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
    63f8:	fdc42783          	lw	a5,-36(s0)
    63fc:	fef42623          	sw	a5,-20(s0)

        configASSERT( xTimer );
    6400:	fdc42783          	lw	a5,-36(s0)
    6404:	00079a63          	bnez	a5,6418 <xTimerIsTimerActive+0x30>
    6408:	30047073          	csrci	mstatus,8
    640c:	00100073          	ebreak
    6410:	00000013          	nop
    6414:	ffdff06f          	j	6410 <xTimerIsTimerActive+0x28>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
    6418:	30047073          	csrci	mstatus,8
    641c:	000267b7          	lui	a5,0x26
    6420:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    6424:	00178713          	addi	a4,a5,1
    6428:	000267b7          	lui	a5,0x26
    642c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
    6430:	fec42783          	lw	a5,-20(s0)
    6434:	0287c783          	lbu	a5,40(a5)
    6438:	0017f793          	andi	a5,a5,1
    643c:	00079663          	bnez	a5,6448 <xTimerIsTimerActive+0x60>
            {
                xReturn = pdFALSE;
    6440:	fe042423          	sw	zero,-24(s0)
    6444:	00c0006f          	j	6450 <xTimerIsTimerActive+0x68>
            }
            else
            {
                xReturn = pdTRUE;
    6448:	00100793          	li	a5,1
    644c:	fef42423          	sw	a5,-24(s0)
            }
        }
        taskEXIT_CRITICAL();
    6450:	000267b7          	lui	a5,0x26
    6454:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    6458:	fff78713          	addi	a4,a5,-1
    645c:	000267b7          	lui	a5,0x26
    6460:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    6464:	000267b7          	lui	a5,0x26
    6468:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    646c:	00079463          	bnez	a5,6474 <xTimerIsTimerActive+0x8c>
    6470:	30046073          	csrsi	mstatus,8

        return xReturn;
    6474:	fe842783          	lw	a5,-24(s0)
    } /*lint !e818 Can't be pointer to const due to the typedef. */
    6478:	00078513          	mv	a0,a5
    647c:	02c12403          	lw	s0,44(sp)
    6480:	03010113          	addi	sp,sp,48
    6484:	00008067          	ret

00006488 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
    6488:	fd010113          	addi	sp,sp,-48
    648c:	02812623          	sw	s0,44(sp)
    6490:	03010413          	addi	s0,sp,48
    6494:	fca42e23          	sw	a0,-36(s0)
        Timer_t * const pxTimer = xTimer;
    6498:	fdc42783          	lw	a5,-36(s0)
    649c:	fef42423          	sw	a5,-24(s0)
        void * pvReturn;

        configASSERT( xTimer );
    64a0:	fdc42783          	lw	a5,-36(s0)
    64a4:	00079a63          	bnez	a5,64b8 <pvTimerGetTimerID+0x30>
    64a8:	30047073          	csrci	mstatus,8
    64ac:	00100073          	ebreak
    64b0:	00000013          	nop
    64b4:	ffdff06f          	j	64b0 <pvTimerGetTimerID+0x28>

        taskENTER_CRITICAL();
    64b8:	30047073          	csrci	mstatus,8
    64bc:	000267b7          	lui	a5,0x26
    64c0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    64c4:	00178713          	addi	a4,a5,1
    64c8:	000267b7          	lui	a5,0x26
    64cc:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            pvReturn = pxTimer->pvTimerID;
    64d0:	fe842783          	lw	a5,-24(s0)
    64d4:	01c7a783          	lw	a5,28(a5)
    64d8:	fef42623          	sw	a5,-20(s0)
        }
        taskEXIT_CRITICAL();
    64dc:	000267b7          	lui	a5,0x26
    64e0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    64e4:	fff78713          	addi	a4,a5,-1
    64e8:	000267b7          	lui	a5,0x26
    64ec:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    64f0:	000267b7          	lui	a5,0x26
    64f4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    64f8:	00079463          	bnez	a5,6500 <pvTimerGetTimerID+0x78>
    64fc:	30046073          	csrsi	mstatus,8

        return pvReturn;
    6500:	fec42783          	lw	a5,-20(s0)
    }
    6504:	00078513          	mv	a0,a5
    6508:	02c12403          	lw	s0,44(sp)
    650c:	03010113          	addi	sp,sp,48
    6510:	00008067          	ret

00006514 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
    6514:	fd010113          	addi	sp,sp,-48
    6518:	02812623          	sw	s0,44(sp)
    651c:	03010413          	addi	s0,sp,48
    6520:	fca42e23          	sw	a0,-36(s0)
    6524:	fcb42c23          	sw	a1,-40(s0)
        Timer_t * const pxTimer = xTimer;
    6528:	fdc42783          	lw	a5,-36(s0)
    652c:	fef42623          	sw	a5,-20(s0)

        configASSERT( xTimer );
    6530:	fdc42783          	lw	a5,-36(s0)
    6534:	00079a63          	bnez	a5,6548 <vTimerSetTimerID+0x34>
    6538:	30047073          	csrci	mstatus,8
    653c:	00100073          	ebreak
    6540:	00000013          	nop
    6544:	ffdff06f          	j	6540 <vTimerSetTimerID+0x2c>

        taskENTER_CRITICAL();
    6548:	30047073          	csrci	mstatus,8
    654c:	000267b7          	lui	a5,0x26
    6550:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    6554:	00178713          	addi	a4,a5,1
    6558:	000267b7          	lui	a5,0x26
    655c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            pxTimer->pvTimerID = pvNewID;
    6560:	fec42783          	lw	a5,-20(s0)
    6564:	fd842703          	lw	a4,-40(s0)
    6568:	00e7ae23          	sw	a4,28(a5)
        }
        taskEXIT_CRITICAL();
    656c:	000267b7          	lui	a5,0x26
    6570:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    6574:	fff78713          	addi	a4,a5,-1
    6578:	000267b7          	lui	a5,0x26
    657c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    6580:	000267b7          	lui	a5,0x26
    6584:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    6588:	00079463          	bnez	a5,6590 <vTimerSetTimerID+0x7c>
    658c:	30046073          	csrsi	mstatus,8
    }
    6590:	00000013          	nop
    6594:	02c12403          	lw	s0,44(sp)
    6598:	03010113          	addi	sp,sp,48
    659c:	00008067          	ret

000065a0 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
    65a0:	fc010113          	addi	sp,sp,-64
    65a4:	02112e23          	sw	ra,60(sp)
    65a8:	02812c23          	sw	s0,56(sp)
    65ac:	04010413          	addi	s0,sp,64
    65b0:	fca42623          	sw	a0,-52(s0)
    65b4:	fcb42423          	sw	a1,-56(s0)
    65b8:	fcc42223          	sw	a2,-60(s0)
    65bc:	fcd42023          	sw	a3,-64(s0)
    65c0:	000287b7          	lui	a5,0x28
    65c4:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    65c8:	fee42623          	sw	a4,-20(s0)
    65cc:	00000713          	li	a4,0
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    65d0:	ffe00793          	li	a5,-2
    65d4:	fcf42e23          	sw	a5,-36(s0)
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    65d8:	fcc42783          	lw	a5,-52(s0)
    65dc:	fef42023          	sw	a5,-32(s0)
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    65e0:	fc842783          	lw	a5,-56(s0)
    65e4:	fef42223          	sw	a5,-28(s0)
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    65e8:	fc442783          	lw	a5,-60(s0)
    65ec:	fef42423          	sw	a5,-24(s0)

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    65f0:	000287b7          	lui	a5,0x28
    65f4:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    65f8:	fdc40713          	addi	a4,s0,-36
    65fc:	00000693          	li	a3,0
    6600:	fc042603          	lw	a2,-64(s0)
    6604:	00070593          	mv	a1,a4
    6608:	00078513          	mv	a0,a5
    660c:	56c040ef          	jal	ra,ab78 <xQueueGenericSendFromISR>
    6610:	fca42c23          	sw	a0,-40(s0)

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
    6614:	fd842783          	lw	a5,-40(s0)
    6618:	00078713          	mv	a4,a5
        }
    661c:	000287b7          	lui	a5,0x28
    6620:	fec42683          	lw	a3,-20(s0)
    6624:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    6628:	00f6c7b3          	xor	a5,a3,a5
    662c:	00000693          	li	a3,0
    6630:	00078463          	beqz	a5,6638 <xTimerPendFunctionCallFromISR+0x98>
    6634:	668070ef          	jal	ra,dc9c <__stack_chk_fail>
    6638:	00070513          	mv	a0,a4
    663c:	03c12083          	lw	ra,60(sp)
    6640:	03812403          	lw	s0,56(sp)
    6644:	04010113          	addi	sp,sp,64
    6648:	00008067          	ret

0000664c <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
    664c:	fc010113          	addi	sp,sp,-64
    6650:	02112e23          	sw	ra,60(sp)
    6654:	02812c23          	sw	s0,56(sp)
    6658:	04010413          	addi	s0,sp,64
    665c:	fca42623          	sw	a0,-52(s0)
    6660:	fcb42423          	sw	a1,-56(s0)
    6664:	fcc42223          	sw	a2,-60(s0)
    6668:	fcd42023          	sw	a3,-64(s0)
    666c:	000287b7          	lui	a5,0x28
    6670:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    6674:	fee42623          	sw	a4,-20(s0)
    6678:	00000713          	li	a4,0
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
    667c:	000287b7          	lui	a5,0x28
    6680:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    6684:	00079a63          	bnez	a5,6698 <xTimerPendFunctionCall+0x4c>
    6688:	30047073          	csrci	mstatus,8
    668c:	00100073          	ebreak
    6690:	00000013          	nop
    6694:	ffdff06f          	j	6690 <xTimerPendFunctionCall+0x44>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
    6698:	fff00793          	li	a5,-1
    669c:	fcf42e23          	sw	a5,-36(s0)
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    66a0:	fcc42783          	lw	a5,-52(s0)
    66a4:	fef42023          	sw	a5,-32(s0)
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    66a8:	fc842783          	lw	a5,-56(s0)
    66ac:	fef42223          	sw	a5,-28(s0)
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    66b0:	fc442783          	lw	a5,-60(s0)
    66b4:	fef42423          	sw	a5,-24(s0)

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    66b8:	000287b7          	lui	a5,0x28
    66bc:	e3c7a783          	lw	a5,-452(a5) # 27e3c <xTimerQueue>
    66c0:	fdc40713          	addi	a4,s0,-36
    66c4:	00000693          	li	a3,0
    66c8:	fc042603          	lw	a2,-64(s0)
    66cc:	00070593          	mv	a1,a4
    66d0:	00078513          	mv	a0,a5
    66d4:	110040ef          	jal	ra,a7e4 <xQueueGenericSend>
    66d8:	fca42c23          	sw	a0,-40(s0)

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
    66dc:	fd842783          	lw	a5,-40(s0)
    66e0:	00078713          	mv	a4,a5
        }
    66e4:	000287b7          	lui	a5,0x28
    66e8:	fec42683          	lw	a3,-20(s0)
    66ec:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    66f0:	00f6c7b3          	xor	a5,a3,a5
    66f4:	00000693          	li	a3,0
    66f8:	00078463          	beqz	a5,6700 <xTimerPendFunctionCall+0xb4>
    66fc:	5a0070ef          	jal	ra,dc9c <__stack_chk_fail>
    6700:	00070513          	mv	a0,a4
    6704:	03c12083          	lw	ra,60(sp)
    6708:	03812403          	lw	s0,56(sp)
    670c:	04010113          	addi	sp,sp,64
    6710:	00008067          	ret

00006714 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

    #if ( configUSE_TRACE_FACILITY == 1 )

        UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
        {
    6714:	fe010113          	addi	sp,sp,-32
    6718:	00812e23          	sw	s0,28(sp)
    671c:	02010413          	addi	s0,sp,32
    6720:	fea42623          	sw	a0,-20(s0)
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
    6724:	fec42783          	lw	a5,-20(s0)
    6728:	0247a783          	lw	a5,36(a5)
        }
    672c:	00078513          	mv	a0,a5
    6730:	01c12403          	lw	s0,28(sp)
    6734:	02010113          	addi	sp,sp,32
    6738:	00008067          	ret

0000673c <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
    673c:	fe010113          	addi	sp,sp,-32
    6740:	00812e23          	sw	s0,28(sp)
    6744:	02010413          	addi	s0,sp,32
    6748:	fea42623          	sw	a0,-20(s0)
    674c:	feb42423          	sw	a1,-24(s0)
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
    6750:	fec42783          	lw	a5,-20(s0)
    6754:	fe842703          	lw	a4,-24(s0)
    6758:	02e7a223          	sw	a4,36(a5)
        }
    675c:	00000013          	nop
    6760:	01c12403          	lw	s0,28(sp)
    6764:	02010113          	addi	sp,sp,32
    6768:	00008067          	ret

0000676c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    676c:	fe010113          	addi	sp,sp,-32
    6770:	00812e23          	sw	s0,28(sp)
    6774:	02010413          	addi	s0,sp,32
    6778:	fea42623          	sw	a0,-20(s0)
    677c:	feb42423          	sw	a1,-24(s0)
    6780:	fec42223          	sw	a2,-28(s0)
  if (to != from)
    6784:	fe842703          	lw	a4,-24(s0)
    6788:	fec42783          	lw	a5,-20(s0)
    678c:	02f70a63          	beq	a4,a5,67c0 <alt_load_section+0x54>
  {
    while( to != end )
    6790:	0240006f          	j	67b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    6794:	fec42703          	lw	a4,-20(s0)
    6798:	00470793          	addi	a5,a4,4
    679c:	fef42623          	sw	a5,-20(s0)
    67a0:	fe842783          	lw	a5,-24(s0)
    67a4:	00478693          	addi	a3,a5,4
    67a8:	fed42423          	sw	a3,-24(s0)
    67ac:	00072703          	lw	a4,0(a4)
    67b0:	00e7a023          	sw	a4,0(a5)
    while( to != end )
    67b4:	fe842703          	lw	a4,-24(s0)
    67b8:	fe442783          	lw	a5,-28(s0)
    67bc:	fcf71ce3          	bne	a4,a5,6794 <alt_load_section+0x28>
    }
  }
}
    67c0:	00000013          	nop
    67c4:	01c12403          	lw	s0,28(sp)
    67c8:	02010113          	addi	sp,sp,32
    67cc:	00008067          	ret

000067d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    67d0:	ff010113          	addi	sp,sp,-16
    67d4:	00112623          	sw	ra,12(sp)
    67d8:	00812423          	sw	s0,8(sp)
    67dc:	01010413          	addi	s0,sp,16
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    67e0:	000267b7          	lui	a5,0x26
    67e4:	05078613          	addi	a2,a5,80 # 26050 <__flash_rwdata_start>
    67e8:	000247b7          	lui	a5,0x24
    67ec:	45078593          	addi	a1,a5,1104 # 24450 <jtag_uart>
    67f0:	000267b7          	lui	a5,0x26
    67f4:	05078513          	addi	a0,a5,80 # 26050 <__flash_rwdata_start>
    67f8:	f75ff0ef          	jal	ra,676c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    67fc:	2bc00613          	li	a2,700
    6800:	02000593          	li	a1,32
    6804:	02000513          	li	a0,32
    6808:	f65ff0ef          	jal	ra,676c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    680c:	000247b7          	lui	a5,0x24
    6810:	45078613          	addi	a2,a5,1104 # 24450 <jtag_uart>
    6814:	000237b7          	lui	a5,0x23
    6818:	45078593          	addi	a1,a5,1104 # 23450 <__flash_rodata_start>
    681c:	000237b7          	lui	a5,0x23
    6820:	45078513          	addi	a0,a5,1104 # 23450 <__flash_rodata_start>
    6824:	f49ff0ef          	jal	ra,676c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    6828:	3a8060ef          	jal	ra,cbd0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    682c:	608060ef          	jal	ra,ce34 <alt_icache_flush_all>
}
    6830:	00000013          	nop
    6834:	00c12083          	lw	ra,12(sp)
    6838:	00812403          	lw	s0,8(sp)
    683c:	01010113          	addi	sp,sp,16
    6840:	00008067          	ret

00006844 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    6844:	fe010113          	addi	sp,sp,-32
    6848:	00112e23          	sw	ra,28(sp)
    684c:	00812c23          	sw	s0,24(sp)
    6850:	02010413          	addi	s0,sp,32
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    6854:	00000513          	li	a0,0
    6858:	344000ef          	jal	ra,6b9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    685c:	00100593          	li	a1,1
    6860:	00100513          	li	a0,1
    6864:	6f5030ef          	jal	ra,a758 <xQueueCreateCountingSemaphore>
    6868:	00050713          	mv	a4,a0
    686c:	000287b7          	lui	a5,0x28
    6870:	c6e7a623          	sw	a4,-916(a5) # 27c6c <alt_envsem>
    6874:	00100593          	li	a1,1
    6878:	00100513          	li	a0,1
    687c:	6dd030ef          	jal	ra,a758 <xQueueCreateCountingSemaphore>
    6880:	00050713          	mv	a4,a0
    6884:	000287b7          	lui	a5,0x28
    6888:	c6e7a823          	sw	a4,-912(a5) # 27c70 <alt_heapsem>
    688c:	0000a7b7          	lui	a5,0xa
    6890:	f0078793          	addi	a5,a5,-256 # 9f00 <freertos_risc_v_trap_handler>
    6894:	30579073          	csrw	mtvec,a5
    6898:	000287b7          	lui	a5,0x28
    689c:	c8878793          	addi	a5,a5,-888 # 27c88 <alt_fd_list_lock>
    68a0:	fef42423          	sw	a5,-24(s0)
    68a4:	00100793          	li	a5,1
    68a8:	fef42623          	sw	a5,-20(s0)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (SemaphoreHandle_t* sem, 
              UBaseType_t value)
{
  *sem = xSemaphoreCreateCounting(value, value);
    68ac:	fec42583          	lw	a1,-20(s0)
    68b0:	fec42503          	lw	a0,-20(s0)
    68b4:	6a5030ef          	jal	ra,a758 <xQueueCreateCountingSemaphore>
    68b8:	00050713          	mv	a4,a0
    68bc:	fe842783          	lw	a5,-24(s0)
    68c0:	00e7a023          	sw	a4,0(a5)
  return *sem ? 0 : -1;
    68c4:	00000013          	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    68c8:	30c000ef          	jal	ra,6bd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    68cc:	000237b7          	lui	a5,0x23
    68d0:	51078613          	addi	a2,a5,1296 # 23510 <__flash_rodata_start+0xc0>
    68d4:	000237b7          	lui	a5,0x23
    68d8:	51078593          	addi	a1,a5,1296 # 23510 <__flash_rodata_start+0xc0>
    68dc:	000237b7          	lui	a5,0x23
    68e0:	51078513          	addi	a0,a5,1296 # 23510 <__flash_rodata_start+0xc0>
    68e4:	01d060ef          	jal	ra,d100 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    68e8:	48c060ef          	jal	ra,cd74 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    68ec:	0000d7b7          	lui	a5,0xd
    68f0:	dd478513          	addi	a0,a5,-556 # cdd4 <_do_dtors>
    68f4:	561060ef          	jal	ra,d654 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    68f8:	000287b7          	lui	a5,0x28
    68fc:	c5c7a703          	lw	a4,-932(a5) # 27c5c <alt_argc>
    6900:	000287b7          	lui	a5,0x28
    6904:	c607a683          	lw	a3,-928(a5) # 27c60 <alt_argv>
    6908:	000287b7          	lui	a5,0x28
    690c:	c647a783          	lw	a5,-924(a5) # 27c64 <alt_envp>
    6910:	00078613          	mv	a2,a5
    6914:	00068593          	mv	a1,a3
    6918:	00070513          	mv	a0,a4
    691c:	a45f90ef          	jal	ra,360 <main>
    6920:	fea42223          	sw	a0,-28(s0)
  close(STDOUT_FILENO);
    6924:	00100513          	li	a0,1
    6928:	4c0070ef          	jal	ra,dde8 <close>
  exit (result);
    692c:	fe442503          	lw	a0,-28(s0)
    6930:	539060ef          	jal	ra,d668 <exit>

00006934 <alt_init_tls_block>:

/*
 * alt_init_tls_block() is called to prepare a new threads thread-local storage.
 */
void alt_init_tls_block(void *tls_block_ptr)
{
    6934:	fd010113          	addi	sp,sp,-48
    6938:	02112623          	sw	ra,44(sp)
    693c:	02812423          	sw	s0,40(sp)
    6940:	03010413          	addi	s0,sp,48
    6944:	fca42e23          	sw	a0,-36(s0)
    char *tdata_ptr = (char *)tls_block_ptr;
    6948:	fdc42783          	lw	a5,-36(s0)
    694c:	fef42423          	sw	a5,-24(s0)
    char *tbss_ptr = tdata_ptr + TBSS_BLOCK_OFFSET;
    6950:	000247b7          	lui	a5,0x24
    6954:	45078713          	addi	a4,a5,1104 # 24450 <jtag_uart>
    6958:	000247b7          	lui	a5,0x24
    695c:	45078793          	addi	a5,a5,1104 # 24450 <jtag_uart>
    6960:	40f707b3          	sub	a5,a4,a5
    6964:	00078713          	mv	a4,a5
    6968:	fe842783          	lw	a5,-24(s0)
    696c:	00e787b3          	add	a5,a5,a4
    6970:	fef42623          	sw	a5,-20(s0)
    
    /* Zero out the thread local BSS data (*.tbss) */
	memset(tbss_ptr, '\0', (uintptr_t) __tbss_size);
    6974:	00000793          	li	a5,0
    6978:	00078613          	mv	a2,a5
    697c:	00000593          	li	a1,0
    6980:	fec42503          	lw	a0,-20(s0)
    6984:	6bd060ef          	jal	ra,d840 <memset>

	/* Create a copy of the intialized thread local data (*.tdata) */
	memcpy(tdata_ptr, __tdata_source, (uintptr_t) __tdata_size);
    6988:	00000793          	li	a5,0
    698c:	00078613          	mv	a2,a5
    6990:	000247b7          	lui	a5,0x24
    6994:	45078593          	addi	a1,a5,1104 # 24450 <jtag_uart>
    6998:	fe842503          	lw	a0,-24(s0)
    699c:	501060ef          	jal	ra,d69c <memcpy>
}
    69a0:	00000013          	nop
    69a4:	02c12083          	lw	ra,44(sp)
    69a8:	02812403          	lw	s0,40(sp)
    69ac:	03010113          	addi	sp,sp,48
    69b0:	00008067          	ret

000069b4 <alt_set_thread_pointer>:
/*
 * alt_set_thread_pointer() is called to set the thread pointer to a specific
 * thread local storage block.  Useful when switching tasks.
 */
void alt_set_thread_pointer(void *tls_block_ptr)
{
    69b4:	fe010113          	addi	sp,sp,-32
    69b8:	00812e23          	sw	s0,28(sp)
    69bc:	02010413          	addi	s0,sp,32
    69c0:	fea42623          	sw	a0,-20(s0)
    __asm__ volatile("mv tp, %[tls_reg]" :: [tls_reg] "r"(tls_block_ptr));
    69c4:	fec42783          	lw	a5,-20(s0)
    69c8:	00078213          	mv	tp,a5
}
    69cc:	00000013          	nop
    69d0:	01c12403          	lw	s0,28(sp)
    69d4:	02010113          	addi	sp,sp,32
    69d8:	00008067          	ret

000069dc <vApplicationTickHook>:
                            handle_trap(ulMCAUSE, ulMEPC, ulMTVAL);                  \
                            ulHalNestedInterruptCounter--;                           \

/* Hook for tick. To use this, configUSE_TICK_HOOK must set to 1 */
void vApplicationTickHook( void )
{
    69dc:	ff010113          	addi	sp,sp,-16
    69e0:	00112623          	sw	ra,12(sp)
    69e4:	00812423          	sw	s0,8(sp)
    69e8:	01010413          	addi	s0,sp,16
    /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
    ALT_LOG_SYS_CLK_HEARTBEAT();

    ulHalNestedInterruptCounter++;
    69ec:	000287b7          	lui	a5,0x28
    69f0:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    69f4:	00178713          	addi	a4,a5,1
    69f8:	000287b7          	lui	a5,0x28
    69fc:	c6e7a423          	sw	a4,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    alt_tick();
    6a00:	085060ef          	jal	ra,d284 <alt_tick>
    ulHalNestedInterruptCounter--;
    6a04:	000287b7          	lui	a5,0x28
    6a08:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6a0c:	fff78713          	addi	a4,a5,-1
    6a10:	000287b7          	lui	a5,0x28
    6a14:	c6e7a423          	sw	a4,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
}
    6a18:	00000013          	nop
    6a1c:	00c12083          	lw	ra,12(sp)
    6a20:	00812403          	lw	s0,8(sp)
    6a24:	01010113          	addi	sp,sp,16
    6a28:	00008067          	ret

00006a2c <vApplicationIdleHook>:

/* Hook for idle task. To use this, configUSE_IDLE_HOOK must set to 1. */
void vApplicationIdleHook( void )
{
    6a2c:	ff010113          	addi	sp,sp,-16
    6a30:	00812623          	sw	s0,12(sp)
    6a34:	01010413          	addi	s0,sp,16

}
    6a38:	00000013          	nop
    6a3c:	00c12403          	lw	s0,12(sp)
    6a40:	01010113          	addi	sp,sp,16
    6a44:	00008067          	ret

00006a48 <vApplicationStackOverflowHook>:

/* Hook for stack overflow. To use this, configCHECK_FOR_STACK_OVERFLOW must set
 * 1 or 2. 
 */
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    6a48:	fe010113          	addi	sp,sp,-32
    6a4c:	00112e23          	sw	ra,28(sp)
    6a50:	00812c23          	sw	s0,24(sp)
    6a54:	02010413          	addi	s0,sp,32
    6a58:	fea42623          	sw	a0,-20(s0)
    6a5c:	feb42423          	sw	a1,-24(s0)
    /*  To suspress unused argument warning. */
	( void ) xTask;

    printf("Stack overflow task is %s \r\n",pcTaskName);
    6a60:	fe842583          	lw	a1,-24(s0)
    6a64:	000237b7          	lui	a5,0x23
    6a68:	52078513          	addi	a0,a5,1312 # 23520 <__flash_rodata_start+0xd0>
    6a6c:	6f1060ef          	jal	ra,d95c <printf>
    taskDISABLE_INTERRUPTS();
    6a70:	30047073          	csrci	mstatus,8
    __asm volatile( "ebreak" );
    6a74:	00100073          	ebreak
    for( ;; );
    6a78:	00000013          	nop
    6a7c:	ffdff06f          	j	6a78 <vApplicationStackOverflowHook+0x30>

00006a80 <vApplicationMallocFailedHook>:

/* Hook for malloc failure. To use this, configUSE_MALLOC_FAILED_HOOK must set
 * to 1. 
 */
void vApplicationMallocFailedHook( void )
{
    6a80:	ff010113          	addi	sp,sp,-16
    6a84:	00812623          	sw	s0,12(sp)
    6a88:	01010413          	addi	s0,sp,16

}
    6a8c:	00000013          	nop
    6a90:	00c12403          	lw	s0,12(sp)
    6a94:	01010113          	addi	sp,sp,16
    6a98:	00008067          	ret

00006a9c <freertos_risc_v_application_interrupt_handler>:

/* Override weak function defined in portASM.S */
void freertos_risc_v_application_interrupt_handler( void )
{
    6a9c:	fe010113          	addi	sp,sp,-32
    6aa0:	00112e23          	sw	ra,28(sp)
    6aa4:	00812c23          	sw	s0,24(sp)
    6aa8:	02010413          	addi	s0,sp,32
   HAL_HANDLE_TRAP();
    6aac:	fe042223          	sw	zero,-28(s0)
    6ab0:	fe042423          	sw	zero,-24(s0)
    6ab4:	fe042623          	sw	zero,-20(s0)
    6ab8:	342027f3          	csrr	a5,mcause
    6abc:	fef42223          	sw	a5,-28(s0)
    6ac0:	341027f3          	csrr	a5,mepc
    6ac4:	fef42423          	sw	a5,-24(s0)
    6ac8:	343027f3          	csrr	a5,mtval
    6acc:	fef42623          	sw	a5,-20(s0)
    6ad0:	000287b7          	lui	a5,0x28
    6ad4:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6ad8:	00178713          	addi	a4,a5,1
    6adc:	000287b7          	lui	a5,0x28
    6ae0:	c6e7a423          	sw	a4,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6ae4:	fec42603          	lw	a2,-20(s0)
    6ae8:	fe842583          	lw	a1,-24(s0)
    6aec:	fe442503          	lw	a0,-28(s0)
    6af0:	ec4f90ef          	jal	ra,1b4 <handle_trap>
    6af4:	000287b7          	lui	a5,0x28
    6af8:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6afc:	fff78713          	addi	a4,a5,-1
    6b00:	000287b7          	lui	a5,0x28
    6b04:	c6e7a423          	sw	a4,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
}
    6b08:	00000013          	nop
    6b0c:	01c12083          	lw	ra,28(sp)
    6b10:	01812403          	lw	s0,24(sp)
    6b14:	02010113          	addi	sp,sp,32
    6b18:	00008067          	ret

00006b1c <freertos_risc_v_application_exception_handler>:

/* Override weak function defined in portASM.S */
void freertos_risc_v_application_exception_handler( void )
{
    6b1c:	fe010113          	addi	sp,sp,-32
    6b20:	00112e23          	sw	ra,28(sp)
    6b24:	00812c23          	sw	s0,24(sp)
    6b28:	02010413          	addi	s0,sp,32
   HAL_HANDLE_TRAP();
    6b2c:	fe042223          	sw	zero,-28(s0)
    6b30:	fe042423          	sw	zero,-24(s0)
    6b34:	fe042623          	sw	zero,-20(s0)
    6b38:	342027f3          	csrr	a5,mcause
    6b3c:	fef42223          	sw	a5,-28(s0)
    6b40:	341027f3          	csrr	a5,mepc
    6b44:	fef42423          	sw	a5,-24(s0)
    6b48:	343027f3          	csrr	a5,mtval
    6b4c:	fef42623          	sw	a5,-20(s0)
    6b50:	000287b7          	lui	a5,0x28
    6b54:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6b58:	00178713          	addi	a4,a5,1
    6b5c:	000287b7          	lui	a5,0x28
    6b60:	c6e7a423          	sw	a4,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6b64:	fec42603          	lw	a2,-20(s0)
    6b68:	fe842583          	lw	a1,-24(s0)
    6b6c:	fe442503          	lw	a0,-28(s0)
    6b70:	e44f90ef          	jal	ra,1b4 <handle_trap>
    6b74:	000287b7          	lui	a5,0x28
    6b78:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    6b7c:	fff78713          	addi	a4,a5,-1
    6b80:	000287b7          	lui	a5,0x28
    6b84:	c6e7a423          	sw	a4,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
}
    6b88:	00000013          	nop
    6b8c:	01c12083          	lw	ra,28(sp)
    6b90:	01812403          	lw	s0,24(sp)
    6b94:	02010113          	addi	sp,sp,32
    6b98:	00008067          	ret

00006b9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    6b9c:	fe010113          	addi	sp,sp,-32
    6ba0:	00112e23          	sw	ra,28(sp)
    6ba4:	00812c23          	sw	s0,24(sp)
    6ba8:	02010413          	addi	s0,sp,32
    6bac:	fea42623          	sw	a0,-20(s0)
    INTEL_NIOSV_G_IRQ_INIT ( NIOSV, niosv);
    6bb0:	035060ef          	jal	ra,d3e4 <intel_niosv_irq_init>
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, NIOSV_MSTATUS_MIE_MASK);
    6bb4:	00800793          	li	a5,8
    6bb8:	3007a073          	csrs	mstatus,a5
}
    6bbc:	00000013          	nop
    alt_irq_cpu_enable_interrupts();
}
    6bc0:	00000013          	nop
    6bc4:	01c12083          	lw	ra,28(sp)
    6bc8:	01812403          	lw	s0,24(sp)
    6bcc:	02010113          	addi	sp,sp,32
    6bd0:	00008067          	ret

00006bd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    6bd4:	fe010113          	addi	sp,sp,-32
    6bd8:	00112e23          	sw	ra,28(sp)
    6bdc:	00812c23          	sw	s0,24(sp)
    6be0:	02010413          	addi	s0,sp,32
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    6be4:	00100613          	li	a2,1
    6be8:	00000593          	li	a1,0
    6bec:	000247b7          	lui	a5,0x24
    6bf0:	47878513          	addi	a0,a5,1144 # 24478 <jtag_uart+0x28>
    6bf4:	1f0000ef          	jal	ra,6de4 <altera_avalon_jtag_uart_init>
    6bf8:	000247b7          	lui	a5,0x24
    6bfc:	45078513          	addi	a0,a5,1104 # 24450 <jtag_uart>
    6c00:	044060ef          	jal	ra,cc44 <alt_dev_reg>
    6c04:	3e800793          	li	a5,1000
    6c08:	fef42623          	sw	a5,-20(s0)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    6c0c:	000287b7          	lui	a5,0x28
    6c10:	c907a783          	lw	a5,-880(a5) # 27c90 <_alt_tick_rate>
    6c14:	00079a63          	bnez	a5,6c28 <alt_sys_init+0x54>
  {
    _alt_tick_rate = nticks;
    6c18:	000287b7          	lui	a5,0x28
    6c1c:	fec42703          	lw	a4,-20(s0)
    6c20:	c8e7a823          	sw	a4,-880(a5) # 27c90 <_alt_tick_rate>
    return 0;
    6c24:	0080006f          	j	6c2c <alt_sys_init+0x58>
  }
  else
  {
    return -1;
    6c28:	00000013          	nop
    6c2c:	0000d7b7          	lui	a5,0xd
    6c30:	61078793          	addi	a5,a5,1552 # d610 <alt_niosv_timer_sc_isr>
    6c34:	fef42423          	sw	a5,-24(s0)
alt_u64 alt_niosv_mtimecmp_get();
void alt_niosv_mtimecmp_interrupt_init();
extern alt_niosv_timer_isr_t alt_niosv_timer_interrupt_handler;

static ALT_INLINE void ALT_ALWAYS_INLINE alt_niosv_register_mtimecmp_interrupt_handle(alt_niosv_timer_isr_t handle) {
    alt_niosv_timer_interrupt_handler = handle;
    6c38:	000287b7          	lui	a5,0x28
    6c3c:	fe842703          	lw	a4,-24(s0)
    6c40:	c4e7ac23          	sw	a4,-936(a5) # 27c58 <alt_niosv_timer_interrupt_handler>
}
    6c44:	00000013          	nop
    INTEL_NIOSV_G_INIT ( NIOSV, niosv);
    6c48:	1f1060ef          	jal	ra,d638 <alt_niosv_mtimecmp_interrupt_init>
    6c4c:	00000613          	li	a2,0
    6c50:	00000593          	li	a1,0
    6c54:	00000513          	li	a0,0
    6c58:	1b9060ef          	jal	ra,d610 <alt_niosv_timer_sc_isr>
}
    6c5c:	00000013          	nop
    6c60:	01c12083          	lw	ra,28(sp)
    6c64:	01812403          	lw	s0,24(sp)
    6c68:	02010113          	addi	sp,sp,32
    6c6c:	00008067          	ret

00006c70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    6c70:	fd010113          	addi	sp,sp,-48
    6c74:	02112623          	sw	ra,44(sp)
    6c78:	02812423          	sw	s0,40(sp)
    6c7c:	03010413          	addi	s0,sp,48
    6c80:	fca42e23          	sw	a0,-36(s0)
    6c84:	fcb42c23          	sw	a1,-40(s0)
    6c88:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    6c8c:	fdc42783          	lw	a5,-36(s0)
    6c90:	0007a783          	lw	a5,0(a5)
    6c94:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    6c98:	fec42783          	lw	a5,-20(s0)
    6c9c:	02878713          	addi	a4,a5,40
    6ca0:	fdc42783          	lw	a5,-36(s0)
    6ca4:	0087a783          	lw	a5,8(a5)
    6ca8:	00078693          	mv	a3,a5
    6cac:	fd442603          	lw	a2,-44(s0)
    6cb0:	fd842583          	lw	a1,-40(s0)
    6cb4:	00070513          	mv	a0,a4
    6cb8:	165000ef          	jal	ra,761c <altera_avalon_jtag_uart_read>
    6cbc:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    6cc0:	00078513          	mv	a0,a5
    6cc4:	02c12083          	lw	ra,44(sp)
    6cc8:	02812403          	lw	s0,40(sp)
    6ccc:	03010113          	addi	sp,sp,48
    6cd0:	00008067          	ret

00006cd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    6cd4:	fd010113          	addi	sp,sp,-48
    6cd8:	02112623          	sw	ra,44(sp)
    6cdc:	02812423          	sw	s0,40(sp)
    6ce0:	03010413          	addi	s0,sp,48
    6ce4:	fca42e23          	sw	a0,-36(s0)
    6ce8:	fcb42c23          	sw	a1,-40(s0)
    6cec:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    6cf0:	fdc42783          	lw	a5,-36(s0)
    6cf4:	0007a783          	lw	a5,0(a5)
    6cf8:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    6cfc:	fec42783          	lw	a5,-20(s0)
    6d00:	02878713          	addi	a4,a5,40
    6d04:	fdc42783          	lw	a5,-36(s0)
    6d08:	0087a783          	lw	a5,8(a5)
    6d0c:	00078693          	mv	a3,a5
    6d10:	fd442603          	lw	a2,-44(s0)
    6d14:	fd842583          	lw	a1,-40(s0)
    6d18:	00070513          	mv	a0,a4
    6d1c:	4ed000ef          	jal	ra,7a08 <altera_avalon_jtag_uart_write>
    6d20:	00050793          	mv	a5,a0
      fd->fd_flags);
}
    6d24:	00078513          	mv	a0,a5
    6d28:	02c12083          	lw	ra,44(sp)
    6d2c:	02812403          	lw	s0,40(sp)
    6d30:	03010113          	addi	sp,sp,48
    6d34:	00008067          	ret

00006d38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    6d38:	fd010113          	addi	sp,sp,-48
    6d3c:	02112623          	sw	ra,44(sp)
    6d40:	02812423          	sw	s0,40(sp)
    6d44:	03010413          	addi	s0,sp,48
    6d48:	fca42e23          	sw	a0,-36(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    6d4c:	fdc42783          	lw	a5,-36(s0)
    6d50:	0007a783          	lw	a5,0(a5)
    6d54:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    6d58:	fec42783          	lw	a5,-20(s0)
    6d5c:	02878713          	addi	a4,a5,40
    6d60:	fdc42783          	lw	a5,-36(s0)
    6d64:	0087a783          	lw	a5,8(a5)
    6d68:	00078593          	mv	a1,a5
    6d6c:	00070513          	mv	a0,a4
    6d70:	740000ef          	jal	ra,74b0 <altera_avalon_jtag_uart_close>
    6d74:	00050793          	mv	a5,a0
}
    6d78:	00078513          	mv	a0,a5
    6d7c:	02c12083          	lw	ra,44(sp)
    6d80:	02812403          	lw	s0,40(sp)
    6d84:	03010113          	addi	sp,sp,48
    6d88:	00008067          	ret

00006d8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    6d8c:	fd010113          	addi	sp,sp,-48
    6d90:	02112623          	sw	ra,44(sp)
    6d94:	02812423          	sw	s0,40(sp)
    6d98:	03010413          	addi	s0,sp,48
    6d9c:	fca42e23          	sw	a0,-36(s0)
    6da0:	fcb42c23          	sw	a1,-40(s0)
    6da4:	fcc42a23          	sw	a2,-44(s0)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    6da8:	fdc42783          	lw	a5,-36(s0)
    6dac:	0007a783          	lw	a5,0(a5)
    6db0:	fef42623          	sw	a5,-20(s0)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    6db4:	fec42783          	lw	a5,-20(s0)
    6db8:	02878793          	addi	a5,a5,40
    6dbc:	fd442603          	lw	a2,-44(s0)
    6dc0:	fd842583          	lw	a1,-40(s0)
    6dc4:	00078513          	mv	a0,a5
    6dc8:	754000ef          	jal	ra,751c <altera_avalon_jtag_uart_ioctl>
    6dcc:	00050793          	mv	a5,a0
}
    6dd0:	00078513          	mv	a0,a5
    6dd4:	02c12083          	lw	ra,44(sp)
    6dd8:	02812403          	lw	s0,40(sp)
    6ddc:	03010113          	addi	sp,sp,48
    6de0:	00008067          	ret

00006de4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    6de4:	fc010113          	addi	sp,sp,-64
    6de8:	02112e23          	sw	ra,60(sp)
    6dec:	02812c23          	sw	s0,56(sp)
    6df0:	04010413          	addi	s0,sp,64
    6df4:	fca42623          	sw	a0,-52(s0)
    6df8:	fcb42423          	sw	a1,-56(s0)
    6dfc:	fcc42223          	sw	a2,-60(s0)
  ALT_FLAG_CREATE(&sp->events, 0);
    6e00:	fcc42783          	lw	a5,-52(s0)
    6e04:	03078793          	addi	a5,a5,48
    6e08:	fef42623          	sw	a5,-20(s0)
 * converted into the functions return value.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (EventGroupHandle_t* pgroup)
{
  *pgroup = xEventGroupCreate();
    6e0c:	41d010ef          	jal	ra,8a28 <xEventGroupCreate>
    6e10:	00050713          	mv	a4,a0
    6e14:	fec42783          	lw	a5,-20(s0)
    6e18:	00e7a023          	sw	a4,0(a5)
  return *pgroup != NULL? 0 : -1;
    6e1c:	00000013          	nop
  ALT_SEM_CREATE(&sp->read_lock, 1);
    6e20:	fcc42783          	lw	a5,-52(s0)
    6e24:	02878793          	addi	a5,a5,40
    6e28:	fef42223          	sw	a5,-28(s0)
    6e2c:	00100793          	li	a5,1
    6e30:	fef42423          	sw	a5,-24(s0)
  *sem = xSemaphoreCreateCounting(value, value);
    6e34:	fe842583          	lw	a1,-24(s0)
    6e38:	fe842503          	lw	a0,-24(s0)
    6e3c:	11d030ef          	jal	ra,a758 <xQueueCreateCountingSemaphore>
    6e40:	00050713          	mv	a4,a0
    6e44:	fe442783          	lw	a5,-28(s0)
    6e48:	00e7a023          	sw	a4,0(a5)
  return *sem ? 0 : -1;
    6e4c:	00000013          	nop
  ALT_SEM_CREATE(&sp->write_lock, 1);
    6e50:	fcc42783          	lw	a5,-52(s0)
    6e54:	02c78793          	addi	a5,a5,44
    6e58:	fcf42e23          	sw	a5,-36(s0)
    6e5c:	00100793          	li	a5,1
    6e60:	fef42023          	sw	a5,-32(s0)
  *sem = xSemaphoreCreateCounting(value, value);
    6e64:	fe042583          	lw	a1,-32(s0)
    6e68:	fe042503          	lw	a0,-32(s0)
    6e6c:	0ed030ef          	jal	ra,a758 <xQueueCreateCountingSemaphore>
    6e70:	00050713          	mv	a4,a0
    6e74:	fdc42783          	lw	a5,-36(s0)
    6e78:	00e7a023          	sw	a4,0(a5)
  return *sem ? 0 : -1;
    6e7c:	00000013          	nop

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    6e80:	fcc42783          	lw	a5,-52(s0)
    6e84:	00100713          	li	a4,1
    6e88:	02e7a023          	sw	a4,32(a5)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    6e8c:	fcc42783          	lw	a5,-52(s0)
    6e90:	0207a783          	lw	a5,32(a5)
    6e94:	fcf42c23          	sw	a5,-40(s0)
    6e98:	fcc42783          	lw	a5,-52(s0)
    6e9c:	0007a783          	lw	a5,0(a5)
    6ea0:	00478793          	addi	a5,a5,4
    6ea4:	00078713          	mv	a4,a5
    6ea8:	fd842783          	lw	a5,-40(s0)
    6eac:	00f72023          	sw	a5,0(a4)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    6eb0:	fc842503          	lw	a0,-56(s0)
    6eb4:	fc442583          	lw	a1,-60(s0)
    6eb8:	00000713          	li	a4,0
    6ebc:	fcc42683          	lw	a3,-52(s0)
    6ec0:	000077b7          	lui	a5,0x7
    6ec4:	f2478613          	addi	a2,a5,-220 # 6f24 <altera_avalon_jtag_uart_irq>
    6ec8:	78d050ef          	jal	ra,ce54 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    6ecc:	fcc42783          	lw	a5,-52(s0)
    6ed0:	0207a223          	sw	zero,36(a5)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    6ed4:	fcc42783          	lw	a5,-52(s0)
    6ed8:	00878713          	addi	a4,a5,8
  return _alt_tick_rate;
    6edc:	000287b7          	lui	a5,0x28
    6ee0:	c907a583          	lw	a1,-880(a5) # 27c90 <_alt_tick_rate>
    6ee4:	fcc42683          	lw	a3,-52(s0)
    6ee8:	000077b7          	lui	a5,0x7
    6eec:	2fc78613          	addi	a2,a5,764 # 72fc <altera_avalon_jtag_uart_timeout>
    6ef0:	00070513          	mv	a0,a4
    6ef4:	371050ef          	jal	ra,ca64 <alt_alarm_start>
    6ef8:	00050793          	mv	a5,a0
    6efc:	0007da63          	bgez	a5,6f10 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    6f00:	fcc42783          	lw	a5,-52(s0)
    6f04:	80000737          	lui	a4,0x80000
    6f08:	fff74713          	not	a4,a4
    6f0c:	00e7a223          	sw	a4,4(a5)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    6f10:	00000013          	nop
    6f14:	03c12083          	lw	ra,60(sp)
    6f18:	03812403          	lw	s0,56(sp)
    6f1c:	04010113          	addi	sp,sp,64
    6f20:	00008067          	ret

00006f24 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    6f24:	f8010113          	addi	sp,sp,-128
    6f28:	06112e23          	sw	ra,124(sp)
    6f2c:	06812c23          	sw	s0,120(sp)
    6f30:	08010413          	addi	s0,sp,128
    6f34:	f8a42623          	sw	a0,-116(s0)
    6f38:	000287b7          	lui	a5,0x28
    6f3c:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    6f40:	fee42623          	sw	a4,-20(s0)
    6f44:	00000713          	li	a4,0
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    6f48:	f8c42783          	lw	a5,-116(s0)
    6f4c:	faf42823          	sw	a5,-80(s0)
  unsigned int base = sp->base;
    6f50:	fb042783          	lw	a5,-80(s0)
    6f54:	0007a783          	lw	a5,0(a5)
    6f58:	faf42a23          	sw	a5,-76(s0)
  unsigned int postflag=0;
    6f5c:	fa042223          	sw	zero,-92(s0)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    6f60:	fb442783          	lw	a5,-76(s0)
    6f64:	00478793          	addi	a5,a5,4
    6f68:	0007a783          	lw	a5,0(a5)
    6f6c:	faf42c23          	sw	a5,-72(s0)
    6f70:	fb842783          	lw	a5,-72(s0)
    6f74:	faf42e23          	sw	a5,-68(s0)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    6f78:	fbc42783          	lw	a5,-68(s0)
    6f7c:	3007f793          	andi	a5,a5,768
    6f80:	34078463          	beqz	a5,72c8 <altera_avalon_jtag_uart_irq+0x3a4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    6f84:	fbc42783          	lw	a5,-68(s0)
    6f88:	1007f793          	andi	a5,a5,256
    6f8c:	18078e63          	beqz	a5,7128 <altera_avalon_jtag_uart_irq+0x204>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    6f90:	000107b7          	lui	a5,0x10
    6f94:	faf42423          	sw	a5,-88(s0)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    6f98:	fb042783          	lw	a5,-80(s0)
    6f9c:	0347a783          	lw	a5,52(a5) # 10034 <_vfprintf_r+0x21d8>
    6fa0:	00178793          	addi	a5,a5,1
    6fa4:	7ff7f793          	andi	a5,a5,2047
    6fa8:	fcf42023          	sw	a5,-64(s0)
        if (next == sp->rx_out)
    6fac:	fb042783          	lw	a5,-80(s0)
    6fb0:	0387a783          	lw	a5,56(a5)
    6fb4:	fc042703          	lw	a4,-64(s0)
    6fb8:	10f70a63          	beq	a4,a5,70cc <altera_avalon_jtag_uart_irq+0x1a8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    6fbc:	fb442783          	lw	a5,-76(s0)
    6fc0:	0007a783          	lw	a5,0(a5)
    6fc4:	fcf42223          	sw	a5,-60(s0)
    6fc8:	fc442783          	lw	a5,-60(s0)
    6fcc:	faf42423          	sw	a5,-88(s0)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    6fd0:	fa842703          	lw	a4,-88(s0)
    6fd4:	000087b7          	lui	a5,0x8
    6fd8:	00f777b3          	and	a5,a4,a5
    6fdc:	0e078c63          	beqz	a5,70d4 <altera_avalon_jtag_uart_irq+0x1b0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    6fe0:	fb042783          	lw	a5,-80(s0)
    6fe4:	0347a783          	lw	a5,52(a5) # 8034 <__malloc_lock+0x9c>
    6fe8:	fa842703          	lw	a4,-88(s0)
    6fec:	0ff77713          	zext.b	a4,a4
    6ff0:	fb042683          	lw	a3,-80(s0)
    6ff4:	00f687b3          	add	a5,a3,a5
    6ff8:	04e78223          	sb	a4,68(a5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    6ffc:	fb042783          	lw	a5,-80(s0)
    7000:	0347a783          	lw	a5,52(a5)
    7004:	00178793          	addi	a5,a5,1
    7008:	7ff7f713          	andi	a4,a5,2047
    700c:	fb042783          	lw	a5,-80(s0)
    7010:	02e7aa23          	sw	a4,52(a5)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
    7014:	fb042783          	lw	a5,-80(s0)
    7018:	0307a783          	lw	a5,48(a5)
    701c:	fcf42e23          	sw	a5,-36(s0)
    7020:	00100793          	li	a5,1
    7024:	fef42023          	sw	a5,-32(s0)
    7028:	00100793          	li	a5,1
    702c:	f8f40f23          	sb	a5,-98(s0)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_post (EventGroupHandle_t group, 
                   EventBits_t     flags, 
                   uint8_t        opt)
{
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    7030:	fa042023          	sw	zero,-96(s0)
  if (taskSCHEDULER_RUNNING == xTaskGetSchedulerState())
    7034:	bb9fc0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    7038:	00050713          	mv	a4,a0
    703c:	00200793          	li	a5,2
    7040:	08f71263          	bne	a4,a5,70c4 <altera_avalon_jtag_uart_irq+0x1a0>
  {
    if (IS_IN_ISR_CONTEXT()){
    7044:	000287b7          	lui	a5,0x28
    7048:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    704c:	04078863          	beqz	a5,709c <altera_avalon_jtag_uart_irq+0x178>
      if (opt == 1){ 
    7050:	f9e44703          	lbu	a4,-98(s0)
    7054:	00100793          	li	a5,1
    7058:	02f71a63          	bne	a4,a5,708c <altera_avalon_jtag_uart_irq+0x168>
        if ( pdTRUE == xEventGroupSetBitsFromISR(group, flags, &xHigherPriorityTaskWoken)){
    705c:	fa040793          	addi	a5,s0,-96
    7060:	00078613          	mv	a2,a5
    7064:	fe042583          	lw	a1,-32(s0)
    7068:	fdc42503          	lw	a0,-36(s0)
    706c:	34c020ef          	jal	ra,93b8 <xEventGroupSetBitsFromISR>
    7070:	00050713          	mv	a4,a0
    7074:	00100793          	li	a5,1
    7078:	04f71663          	bne	a4,a5,70c4 <altera_avalon_jtag_uart_irq+0x1a0>
          portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    707c:	fa042783          	lw	a5,-96(s0)
    7080:	04078263          	beqz	a5,70c4 <altera_avalon_jtag_uart_irq+0x1a0>
    7084:	995fb0ef          	jal	ra,2a18 <vTaskSwitchContext>
      } else {
        xEventGroupClearBits(group, flags);     
      }      
    }
  }
  return 0;
    7088:	03c0006f          	j	70c4 <altera_avalon_jtag_uart_irq+0x1a0>
        xEventGroupClearBitsFromISR(group, flags);     
    708c:	fe042583          	lw	a1,-32(s0)
    7090:	fdc42503          	lw	a0,-36(s0)
    7094:	74d010ef          	jal	ra,8fe0 <xEventGroupClearBitsFromISR>
  return 0;
    7098:	02c0006f          	j	70c4 <altera_avalon_jtag_uart_irq+0x1a0>
      if (opt == 1){ 
    709c:	f9e44703          	lbu	a4,-98(s0)
    70a0:	00100793          	li	a5,1
    70a4:	00f71a63          	bne	a4,a5,70b8 <altera_avalon_jtag_uart_irq+0x194>
        xEventGroupSetBits(group, flags);
    70a8:	fe042583          	lw	a1,-32(s0)
    70ac:	fdc42503          	lw	a0,-36(s0)
    70b0:	7b9010ef          	jal	ra,9068 <xEventGroupSetBits>
  return 0;
    70b4:	0100006f          	j	70c4 <altera_avalon_jtag_uart_irq+0x1a0>
        xEventGroupClearBits(group, flags);     
    70b8:	fe042583          	lw	a1,-32(s0)
    70bc:	fdc42503          	lw	a0,-36(s0)
    70c0:	659010ef          	jal	ra,8f18 <xEventGroupClearBits>
  return 0;
    70c4:	00000013          	nop
      {
    70c8:	ed1ff06f          	j	6f98 <altera_avalon_jtag_uart_irq+0x74>
          break;
    70cc:	00000013          	nop
    70d0:	0080006f          	j	70d8 <altera_avalon_jtag_uart_irq+0x1b4>
          break;
    70d4:	00000013          	nop
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    70d8:	fa842703          	lw	a4,-88(s0)
    70dc:	000107b7          	lui	a5,0x10
    70e0:	04f76463          	bltu	a4,a5,7128 <altera_avalon_jtag_uart_irq+0x204>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    70e4:	fb042783          	lw	a5,-80(s0)
    70e8:	0207a783          	lw	a5,32(a5) # 10020 <_vfprintf_r+0x21c4>
    70ec:	ffe7f713          	andi	a4,a5,-2
    70f0:	fb042783          	lw	a5,-80(s0)
    70f4:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    70f8:	fb042783          	lw	a5,-80(s0)
    70fc:	0207a783          	lw	a5,32(a5)
    7100:	fcf42423          	sw	a5,-56(s0)
    7104:	fb442783          	lw	a5,-76(s0)
    7108:	00478793          	addi	a5,a5,4
    710c:	00078713          	mv	a4,a5
    7110:	fc842783          	lw	a5,-56(s0)
    7114:	00f72023          	sw	a5,0(a4) # 80000000 <__alt_data_end+0x7ffc0000>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    7118:	fb442783          	lw	a5,-76(s0)
    711c:	00478793          	addi	a5,a5,4
    7120:	0007a783          	lw	a5,0(a5)
    7124:	fcf42623          	sw	a5,-52(s0)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    7128:	fbc42783          	lw	a5,-68(s0)
    712c:	2007f793          	andi	a5,a5,512
    7130:	e20788e3          	beqz	a5,6f60 <altera_avalon_jtag_uart_irq+0x3c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    7134:	fbc42783          	lw	a5,-68(s0)
    7138:	0107d793          	srli	a5,a5,0x10
    713c:	faf42623          	sw	a5,-84(s0)

      while (space > 0 && sp->tx_out != sp->tx_in)
    7140:	05c0006f          	j	719c <altera_avalon_jtag_uart_irq+0x278>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    7144:	fb042783          	lw	a5,-80(s0)
    7148:	0407a783          	lw	a5,64(a5)
    714c:	fb042703          	lw	a4,-80(s0)
    7150:	00f707b3          	add	a5,a4,a5
    7154:	00001737          	lui	a4,0x1
    7158:	00f707b3          	add	a5,a4,a5
    715c:	8447c783          	lbu	a5,-1980(a5)
    7160:	fcf42823          	sw	a5,-48(s0)
    7164:	fb442783          	lw	a5,-76(s0)
    7168:	fd042703          	lw	a4,-48(s0)
    716c:	00e7a023          	sw	a4,0(a5)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7170:	fb042783          	lw	a5,-80(s0)
    7174:	0407a783          	lw	a5,64(a5)
    7178:	00178793          	addi	a5,a5,1
    717c:	7ff7f713          	andi	a4,a5,2047
    7180:	fb042783          	lw	a5,-80(s0)
    7184:	04e7a023          	sw	a4,64(a5)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
    7188:	00100793          	li	a5,1
    718c:	faf42223          	sw	a5,-92(s0)

        space--;
    7190:	fac42783          	lw	a5,-84(s0)
    7194:	fff78793          	addi	a5,a5,-1
    7198:	faf42623          	sw	a5,-84(s0)
      while (space > 0 && sp->tx_out != sp->tx_in)
    719c:	fac42783          	lw	a5,-84(s0)
    71a0:	00078c63          	beqz	a5,71b8 <altera_avalon_jtag_uart_irq+0x294>
    71a4:	fb042783          	lw	a5,-80(s0)
    71a8:	0407a703          	lw	a4,64(a5)
    71ac:	fb042783          	lw	a5,-80(s0)
    71b0:	03c7a783          	lw	a5,60(a5)
    71b4:	f8f718e3          	bne	a4,a5,7144 <altera_avalon_jtag_uart_irq+0x220>
      }
      
      if (postflag)
    71b8:	fa442783          	lw	a5,-92(s0)
    71bc:	0a078c63          	beqz	a5,7274 <altera_avalon_jtag_uart_irq+0x350>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
    71c0:	fb042783          	lw	a5,-80(s0)
    71c4:	0307a783          	lw	a5,48(a5)
    71c8:	fef42223          	sw	a5,-28(s0)
    71cc:	00200793          	li	a5,2
    71d0:	fef42423          	sw	a5,-24(s0)
    71d4:	00100793          	li	a5,1
    71d8:	f8f40fa3          	sb	a5,-97(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    71dc:	fa042023          	sw	zero,-96(s0)
  if (taskSCHEDULER_RUNNING == xTaskGetSchedulerState())
    71e0:	a0dfc0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    71e4:	00050713          	mv	a4,a0
    71e8:	00200793          	li	a5,2
    71ec:	08f71263          	bne	a4,a5,7270 <altera_avalon_jtag_uart_irq+0x34c>
    if (IS_IN_ISR_CONTEXT()){
    71f0:	000287b7          	lui	a5,0x28
    71f4:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    71f8:	04078863          	beqz	a5,7248 <altera_avalon_jtag_uart_irq+0x324>
      if (opt == 1){ 
    71fc:	f9f44703          	lbu	a4,-97(s0)
    7200:	00100793          	li	a5,1
    7204:	02f71a63          	bne	a4,a5,7238 <altera_avalon_jtag_uart_irq+0x314>
        if ( pdTRUE == xEventGroupSetBitsFromISR(group, flags, &xHigherPriorityTaskWoken)){
    7208:	fa040793          	addi	a5,s0,-96
    720c:	00078613          	mv	a2,a5
    7210:	fe842583          	lw	a1,-24(s0)
    7214:	fe442503          	lw	a0,-28(s0)
    7218:	1a0020ef          	jal	ra,93b8 <xEventGroupSetBitsFromISR>
    721c:	00050713          	mv	a4,a0
    7220:	00100793          	li	a5,1
    7224:	04f71663          	bne	a4,a5,7270 <altera_avalon_jtag_uart_irq+0x34c>
          portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    7228:	fa042783          	lw	a5,-96(s0)
    722c:	04078263          	beqz	a5,7270 <altera_avalon_jtag_uart_irq+0x34c>
    7230:	fe8fb0ef          	jal	ra,2a18 <vTaskSwitchContext>
  return 0;
    7234:	03c0006f          	j	7270 <altera_avalon_jtag_uart_irq+0x34c>
        xEventGroupClearBitsFromISR(group, flags);     
    7238:	fe842583          	lw	a1,-24(s0)
    723c:	fe442503          	lw	a0,-28(s0)
    7240:	5a1010ef          	jal	ra,8fe0 <xEventGroupClearBitsFromISR>
  return 0;
    7244:	02c0006f          	j	7270 <altera_avalon_jtag_uart_irq+0x34c>
      if (opt == 1){ 
    7248:	f9f44703          	lbu	a4,-97(s0)
    724c:	00100793          	li	a5,1
    7250:	00f71a63          	bne	a4,a5,7264 <altera_avalon_jtag_uart_irq+0x340>
        xEventGroupSetBits(group, flags);
    7254:	fe842583          	lw	a1,-24(s0)
    7258:	fe442503          	lw	a0,-28(s0)
    725c:	60d010ef          	jal	ra,9068 <xEventGroupSetBits>
  return 0;
    7260:	0100006f          	j	7270 <altera_avalon_jtag_uart_irq+0x34c>
        xEventGroupClearBits(group, flags);     
    7264:	fe842583          	lw	a1,-24(s0)
    7268:	fe442503          	lw	a0,-28(s0)
    726c:	4ad010ef          	jal	ra,8f18 <xEventGroupClearBits>
  return 0;
    7270:	00000013          	nop
      }

      if (space > 0)
    7274:	fac42783          	lw	a5,-84(s0)
    7278:	ce0784e3          	beqz	a5,6f60 <altera_avalon_jtag_uart_irq+0x3c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    727c:	fb042783          	lw	a5,-80(s0)
    7280:	0207a783          	lw	a5,32(a5)
    7284:	ffd7f713          	andi	a4,a5,-3
    7288:	fb042783          	lw	a5,-80(s0)
    728c:	02e7a023          	sw	a4,32(a5)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    7290:	fb042783          	lw	a5,-80(s0)
    7294:	0207a783          	lw	a5,32(a5)
    7298:	fcf42a23          	sw	a5,-44(s0)
    729c:	fb042783          	lw	a5,-80(s0)
    72a0:	0007a783          	lw	a5,0(a5)
    72a4:	00478793          	addi	a5,a5,4
    72a8:	00078713          	mv	a4,a5
    72ac:	fd442783          	lw	a5,-44(s0)
    72b0:	00f72023          	sw	a5,0(a4) # 1000 <uxTaskPriorityGetFromISR+0x28>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    72b4:	fb442783          	lw	a5,-76(s0)
    72b8:	00478793          	addi	a5,a5,4
    72bc:	0007a783          	lw	a5,0(a5)
    72c0:	fcf42c23          	sw	a5,-40(s0)
  {
    72c4:	c9dff06f          	j	6f60 <altera_avalon_jtag_uart_irq+0x3c>
      break;
    72c8:	00000013          	nop
      }
    }
  }
}
    72cc:	00000013          	nop
    72d0:	000287b7          	lui	a5,0x28
    72d4:	fec42703          	lw	a4,-20(s0)
    72d8:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    72dc:	00f747b3          	xor	a5,a4,a5
    72e0:	00000713          	li	a4,0
    72e4:	00078463          	beqz	a5,72ec <altera_avalon_jtag_uart_irq+0x3c8>
    72e8:	1b5060ef          	jal	ra,dc9c <__stack_chk_fail>
    72ec:	07c12083          	lw	ra,124(sp)
    72f0:	07812403          	lw	s0,120(sp)
    72f4:	08010113          	addi	sp,sp,128
    72f8:	00008067          	ret

000072fc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    72fc:	fb010113          	addi	sp,sp,-80
    7300:	04112623          	sw	ra,76(sp)
    7304:	04812423          	sw	s0,72(sp)
    7308:	05010413          	addi	s0,sp,80
    730c:	faa42e23          	sw	a0,-68(s0)
    7310:	000287b7          	lui	a5,0x28
    7314:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    7318:	fee42623          	sw	a4,-20(s0)
    731c:	00000713          	li	a4,0
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    7320:	fbc42783          	lw	a5,-68(s0)
    7324:	fcf42a23          	sw	a5,-44(s0)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    7328:	fd442783          	lw	a5,-44(s0)
    732c:	0007a783          	lw	a5,0(a5)
    7330:	00478793          	addi	a5,a5,4
    7334:	0007a783          	lw	a5,0(a5)
    7338:	fcf42c23          	sw	a5,-40(s0)
    733c:	fd842783          	lw	a5,-40(s0)
    7340:	fcf42e23          	sw	a5,-36(s0)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    7344:	fdc42783          	lw	a5,-36(s0)
    7348:	4007f793          	andi	a5,a5,1024
    734c:	02078c63          	beqz	a5,7384 <altera_avalon_jtag_uart_timeout+0x88>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    7350:	fd442783          	lw	a5,-44(s0)
    7354:	0207a783          	lw	a5,32(a5)
    7358:	4007e793          	ori	a5,a5,1024
    735c:	fef42023          	sw	a5,-32(s0)
    7360:	fd442783          	lw	a5,-44(s0)
    7364:	0007a783          	lw	a5,0(a5)
    7368:	00478793          	addi	a5,a5,4
    736c:	00078713          	mv	a4,a5
    7370:	fe042783          	lw	a5,-32(s0)
    7374:	00f72023          	sw	a5,0(a4)
    sp->host_inactive = 0;
    7378:	fd442783          	lw	a5,-44(s0)
    737c:	0207a223          	sw	zero,36(a5)
    7380:	0f40006f          	j	7474 <altera_avalon_jtag_uart_timeout+0x178>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    7384:	fd442783          	lw	a5,-44(s0)
    7388:	0247a703          	lw	a4,36(a5)
    738c:	800007b7          	lui	a5,0x80000
    7390:	ffc7c793          	xori	a5,a5,-4
    7394:	0ee7e063          	bltu	a5,a4,7474 <altera_avalon_jtag_uart_timeout+0x178>
    sp->host_inactive++;
    7398:	fd442783          	lw	a5,-44(s0)
    739c:	0247a783          	lw	a5,36(a5) # 80000024 <__alt_data_end+0x7ffc0024>
    73a0:	00178713          	addi	a4,a5,1
    73a4:	fd442783          	lw	a5,-44(s0)
    73a8:	02e7a223          	sw	a4,36(a5)
    
    if (sp->host_inactive >= sp->timeout) {
    73ac:	fd442783          	lw	a5,-44(s0)
    73b0:	0247a703          	lw	a4,36(a5)
    73b4:	fd442783          	lw	a5,-44(s0)
    73b8:	0047a783          	lw	a5,4(a5)
    73bc:	0af76c63          	bltu	a4,a5,7474 <altera_avalon_jtag_uart_timeout+0x178>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    73c0:	fd442783          	lw	a5,-44(s0)
    73c4:	0307a783          	lw	a5,48(a5)
    73c8:	fef42223          	sw	a5,-28(s0)
    73cc:	00400793          	li	a5,4
    73d0:	fef42423          	sw	a5,-24(s0)
    73d4:	00100793          	li	a5,1
    73d8:	fcf407a3          	sb	a5,-49(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    73dc:	fc042823          	sw	zero,-48(s0)
  if (taskSCHEDULER_RUNNING == xTaskGetSchedulerState())
    73e0:	80dfc0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    73e4:	00050713          	mv	a4,a0
    73e8:	00200793          	li	a5,2
    73ec:	08f71263          	bne	a4,a5,7470 <altera_avalon_jtag_uart_timeout+0x174>
    if (IS_IN_ISR_CONTEXT()){
    73f0:	000287b7          	lui	a5,0x28
    73f4:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    73f8:	04078863          	beqz	a5,7448 <altera_avalon_jtag_uart_timeout+0x14c>
      if (opt == 1){ 
    73fc:	fcf44703          	lbu	a4,-49(s0)
    7400:	00100793          	li	a5,1
    7404:	02f71a63          	bne	a4,a5,7438 <altera_avalon_jtag_uart_timeout+0x13c>
        if ( pdTRUE == xEventGroupSetBitsFromISR(group, flags, &xHigherPriorityTaskWoken)){
    7408:	fd040793          	addi	a5,s0,-48
    740c:	00078613          	mv	a2,a5
    7410:	fe842583          	lw	a1,-24(s0)
    7414:	fe442503          	lw	a0,-28(s0)
    7418:	7a1010ef          	jal	ra,93b8 <xEventGroupSetBitsFromISR>
    741c:	00050713          	mv	a4,a0
    7420:	00100793          	li	a5,1
    7424:	04f71663          	bne	a4,a5,7470 <altera_avalon_jtag_uart_timeout+0x174>
          portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    7428:	fd042783          	lw	a5,-48(s0)
    742c:	04078263          	beqz	a5,7470 <altera_avalon_jtag_uart_timeout+0x174>
    7430:	de8fb0ef          	jal	ra,2a18 <vTaskSwitchContext>
  return 0;
    7434:	03c0006f          	j	7470 <altera_avalon_jtag_uart_timeout+0x174>
        xEventGroupClearBitsFromISR(group, flags);     
    7438:	fe842583          	lw	a1,-24(s0)
    743c:	fe442503          	lw	a0,-28(s0)
    7440:	3a1010ef          	jal	ra,8fe0 <xEventGroupClearBitsFromISR>
  return 0;
    7444:	02c0006f          	j	7470 <altera_avalon_jtag_uart_timeout+0x174>
      if (opt == 1){ 
    7448:	fcf44703          	lbu	a4,-49(s0)
    744c:	00100793          	li	a5,1
    7450:	00f71a63          	bne	a4,a5,7464 <altera_avalon_jtag_uart_timeout+0x168>
        xEventGroupSetBits(group, flags);
    7454:	fe842583          	lw	a1,-24(s0)
    7458:	fe442503          	lw	a0,-28(s0)
    745c:	40d010ef          	jal	ra,9068 <xEventGroupSetBits>
  return 0;
    7460:	0100006f          	j	7470 <altera_avalon_jtag_uart_timeout+0x174>
        xEventGroupClearBits(group, flags);     
    7464:	fe842583          	lw	a1,-24(s0)
    7468:	fe442503          	lw	a0,-28(s0)
    746c:	2ad010ef          	jal	ra,8f18 <xEventGroupClearBits>
  return 0;
    7470:	00000013          	nop
    7474:	000287b7          	lui	a5,0x28
    7478:	c907a783          	lw	a5,-880(a5) # 27c90 <_alt_tick_rate>
    }
  }

  return alt_ticks_per_second();
    747c:	00078713          	mv	a4,a5
}
    7480:	000287b7          	lui	a5,0x28
    7484:	fec42683          	lw	a3,-20(s0)
    7488:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    748c:	00f6c7b3          	xor	a5,a3,a5
    7490:	00000693          	li	a3,0
    7494:	00078463          	beqz	a5,749c <altera_avalon_jtag_uart_timeout+0x1a0>
    7498:	005060ef          	jal	ra,dc9c <__stack_chk_fail>
    749c:	00070513          	mv	a0,a4
    74a0:	04c12083          	lw	ra,76(sp)
    74a4:	04812403          	lw	s0,72(sp)
    74a8:	05010113          	addi	sp,sp,80
    74ac:	00008067          	ret

000074b0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    74b0:	fe010113          	addi	sp,sp,-32
    74b4:	00812e23          	sw	s0,28(sp)
    74b8:	02010413          	addi	s0,sp,32
    74bc:	fea42623          	sw	a0,-20(s0)
    74c0:	feb42423          	sw	a1,-24(s0)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    74c4:	01c0006f          	j	74e0 <altera_avalon_jtag_uart_close+0x30>
    if (flags & O_NONBLOCK) {
    74c8:	fe842703          	lw	a4,-24(s0)
    74cc:	000047b7          	lui	a5,0x4
    74d0:	00f777b3          	and	a5,a4,a5
    74d4:	00078663          	beqz	a5,74e0 <altera_avalon_jtag_uart_close+0x30>
      return -EWOULDBLOCK; 
    74d8:	ff500793          	li	a5,-11
    74dc:	0300006f          	j	750c <altera_avalon_jtag_uart_close+0x5c>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    74e0:	fec42783          	lw	a5,-20(s0)
    74e4:	0407a703          	lw	a4,64(a5) # 4040 <xTaskPriorityDisinherit+0x1b0>
    74e8:	fec42783          	lw	a5,-20(s0)
    74ec:	03c7a783          	lw	a5,60(a5)
    74f0:	00f70c63          	beq	a4,a5,7508 <altera_avalon_jtag_uart_close+0x58>
    74f4:	fec42783          	lw	a5,-20(s0)
    74f8:	0247a703          	lw	a4,36(a5)
    74fc:	fec42783          	lw	a5,-20(s0)
    7500:	0047a783          	lw	a5,4(a5)
    7504:	fcf762e3          	bltu	a4,a5,74c8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    7508:	00000793          	li	a5,0
}
    750c:	00078513          	mv	a0,a5
    7510:	01c12403          	lw	s0,28(sp)
    7514:	02010113          	addi	sp,sp,32
    7518:	00008067          	ret

0000751c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    751c:	fd010113          	addi	sp,sp,-48
    7520:	02812623          	sw	s0,44(sp)
    7524:	03010413          	addi	s0,sp,48
    7528:	fca42e23          	sw	a0,-36(s0)
    752c:	fcb42c23          	sw	a1,-40(s0)
    7530:	fcc42a23          	sw	a2,-44(s0)
  int rc = -ENOTTY;
    7534:	fe700793          	li	a5,-25
    7538:	fef42423          	sw	a5,-24(s0)

  switch (req)
    753c:	fd842703          	lw	a4,-40(s0)
    7540:	000077b7          	lui	a5,0x7
    7544:	a0178793          	addi	a5,a5,-1535 # 6a01 <vApplicationTickHook+0x25>
    7548:	00f70c63          	beq	a4,a5,7560 <altera_avalon_jtag_uart_ioctl+0x44>
    754c:	fd842703          	lw	a4,-40(s0)
    7550:	000077b7          	lui	a5,0x7
    7554:	a0278793          	addi	a5,a5,-1534 # 6a02 <vApplicationTickHook+0x26>
    7558:	06f70263          	beq	a4,a5,75bc <altera_avalon_jtag_uart_ioctl+0xa0>
      rc = 0;
    }
    break;

  default:
    break;
    755c:	0ac0006f          	j	7608 <altera_avalon_jtag_uart_ioctl+0xec>
    if (sp->timeout != INT_MAX)
    7560:	fdc42783          	lw	a5,-36(s0)
    7564:	0047a703          	lw	a4,4(a5)
    7568:	800007b7          	lui	a5,0x80000
    756c:	fff7c793          	not	a5,a5
    7570:	08f70663          	beq	a4,a5,75fc <altera_avalon_jtag_uart_ioctl+0xe0>
      int timeout = *((int *)arg);
    7574:	fd442783          	lw	a5,-44(s0)
    7578:	0007a783          	lw	a5,0(a5) # 80000000 <__alt_data_end+0x7ffc0000>
    757c:	fef42623          	sw	a5,-20(s0)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    7580:	fec42703          	lw	a4,-20(s0)
    7584:	00100793          	li	a5,1
    7588:	00e7de63          	bge	a5,a4,75a4 <altera_avalon_jtag_uart_ioctl+0x88>
    758c:	fec42703          	lw	a4,-20(s0)
    7590:	800007b7          	lui	a5,0x80000
    7594:	fff7c793          	not	a5,a5
    7598:	00f70663          	beq	a4,a5,75a4 <altera_avalon_jtag_uart_ioctl+0x88>
    759c:	fec42783          	lw	a5,-20(s0)
    75a0:	00c0006f          	j	75ac <altera_avalon_jtag_uart_ioctl+0x90>
    75a4:	800007b7          	lui	a5,0x80000
    75a8:	ffe7c793          	xori	a5,a5,-2
    75ac:	fdc42703          	lw	a4,-36(s0)
    75b0:	00f72223          	sw	a5,4(a4)
      rc = 0;
    75b4:	fe042423          	sw	zero,-24(s0)
    break;
    75b8:	0440006f          	j	75fc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    75bc:	fdc42783          	lw	a5,-36(s0)
    75c0:	0047a703          	lw	a4,4(a5) # 80000004 <__alt_data_end+0x7ffc0004>
    75c4:	800007b7          	lui	a5,0x80000
    75c8:	fff7c793          	not	a5,a5
    75cc:	02f70c63          	beq	a4,a5,7604 <altera_avalon_jtag_uart_ioctl+0xe8>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    75d0:	fdc42783          	lw	a5,-36(s0)
    75d4:	0247a703          	lw	a4,36(a5) # 80000024 <__alt_data_end+0x7ffc0024>
    75d8:	fdc42783          	lw	a5,-36(s0)
    75dc:	0047a783          	lw	a5,4(a5)
    75e0:	00f737b3          	sltu	a5,a4,a5
    75e4:	0ff7f793          	zext.b	a5,a5
    75e8:	00078713          	mv	a4,a5
    75ec:	fd442783          	lw	a5,-44(s0)
    75f0:	00e7a023          	sw	a4,0(a5)
      rc = 0;
    75f4:	fe042423          	sw	zero,-24(s0)
    break;
    75f8:	00c0006f          	j	7604 <altera_avalon_jtag_uart_ioctl+0xe8>
    break;
    75fc:	00000013          	nop
    7600:	0080006f          	j	7608 <altera_avalon_jtag_uart_ioctl+0xec>
    break;
    7604:	00000013          	nop
  }

  return rc;
    7608:	fe842783          	lw	a5,-24(s0)
}
    760c:	00078513          	mv	a0,a5
    7610:	02c12403          	lw	s0,44(sp)
    7614:	03010113          	addi	sp,sp,48
    7618:	00008067          	ret

0000761c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    761c:	f8010113          	addi	sp,sp,-128
    7620:	06112e23          	sw	ra,124(sp)
    7624:	06812c23          	sw	s0,120(sp)
    7628:	08010413          	addi	s0,sp,128
    762c:	f8a42623          	sw	a0,-116(s0)
    7630:	f8b42423          	sw	a1,-120(s0)
    7634:	f8c42223          	sw	a2,-124(s0)
    7638:	f8d42023          	sw	a3,-128(s0)
    763c:	000287b7          	lui	a5,0x28
    7640:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    7644:	fee42623          	sw	a4,-20(s0)
    7648:	00000713          	li	a4,0
  char * ptr = buffer;
    764c:	f8842783          	lw	a5,-120(s0)
    7650:	faf42023          	sw	a5,-96(s0)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    7654:	f8c42783          	lw	a5,-116(s0)
    7658:	0287a783          	lw	a5,40(a5)
    765c:	faf42c23          	sw	a5,-72(s0)
    7660:	fa042e23          	sw	zero,-68(s0)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (SemaphoreHandle_t sem, 
                  TickType_t timeout)
{
  int ret = -1;
    7664:	fff00793          	li	a5,-1
    7668:	fcf42023          	sw	a5,-64(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    766c:	f8042e23          	sw	zero,-100(s0)

  if (IS_IN_ISR_CONTEXT()){
    7670:	000287b7          	lui	a5,0x28
    7674:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    7678:	02078c63          	beqz	a5,76b0 <altera_avalon_jtag_uart_read+0x94>
      if (pdTRUE == xSemaphoreTakeFromISR(sem, &xHigherPriorityTaskWoken)){
    767c:	f9c40793          	addi	a5,s0,-100
    7680:	00078613          	mv	a2,a5
    7684:	00000593          	li	a1,0
    7688:	fb842503          	lw	a0,-72(s0)
    768c:	2a0040ef          	jal	ra,b92c <xQueueReceiveFromISR>
    7690:	00050713          	mv	a4,a0
    7694:	00100793          	li	a5,1
    7698:	1ef71e63          	bne	a4,a5,7894 <altera_avalon_jtag_uart_read+0x278>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    769c:	f9c42783          	lw	a5,-100(s0)
    76a0:	00078463          	beqz	a5,76a8 <altera_avalon_jtag_uart_read+0x8c>
    76a4:	b74fb0ef          	jal	ra,2a18 <vTaskSwitchContext>
        ret = 0;
    76a8:	fc042023          	sw	zero,-64(s0)
    76ac:	1e80006f          	j	7894 <altera_avalon_jtag_uart_read+0x278>
      }
  } else {
      if ( pdTRUE == xSemaphoreTake(sem, timeout)){
    76b0:	fbc42583          	lw	a1,-68(s0)
    76b4:	fb842503          	lw	a0,-72(s0)
    76b8:	385030ef          	jal	ra,b23c <xQueueSemaphoreTake>
    76bc:	00050713          	mv	a4,a0
    76c0:	00100793          	li	a5,1
    76c4:	1cf71863          	bne	a4,a5,7894 <altera_avalon_jtag_uart_read+0x278>
        ret = 0;
    76c8:	fc042023          	sw	zero,-64(s0)

  while (space > 0)
    76cc:	1c80006f          	j	7894 <altera_avalon_jtag_uart_read+0x278>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    76d0:	f8c42783          	lw	a5,-116(s0)
    76d4:	0347a783          	lw	a5,52(a5)
    76d8:	faf42423          	sw	a5,-88(s0)
      out = sp->rx_out;
    76dc:	f8c42783          	lw	a5,-116(s0)
    76e0:	0387a783          	lw	a5,56(a5)
    76e4:	faf42623          	sw	a5,-84(s0)

      if (in >= out)
    76e8:	fa842703          	lw	a4,-88(s0)
    76ec:	fac42783          	lw	a5,-84(s0)
    76f0:	00f76c63          	bltu	a4,a5,7708 <altera_avalon_jtag_uart_read+0xec>
        n = in - out;
    76f4:	fa842703          	lw	a4,-88(s0)
    76f8:	fac42783          	lw	a5,-84(s0)
    76fc:	40f707b3          	sub	a5,a4,a5
    7700:	faf42223          	sw	a5,-92(s0)
    7704:	0180006f          	j	771c <altera_avalon_jtag_uart_read+0x100>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    7708:	000017b7          	lui	a5,0x1
    770c:	80078713          	addi	a4,a5,-2048 # 800 <prvInitialiseNewTask+0x290>
    7710:	fac42783          	lw	a5,-84(s0)
    7714:	40f707b3          	sub	a5,a4,a5
    7718:	faf42223          	sw	a5,-92(s0)

      if (n == 0)
    771c:	fa442783          	lw	a5,-92(s0)
    7720:	06078e63          	beqz	a5,779c <altera_avalon_jtag_uart_read+0x180>
        break; /* No more data available */

      if (n > space)
    7724:	f8442783          	lw	a5,-124(s0)
    7728:	fa442703          	lw	a4,-92(s0)
    772c:	00e7f663          	bgeu	a5,a4,7738 <altera_avalon_jtag_uart_read+0x11c>
        n = space;
    7730:	f8442783          	lw	a5,-124(s0)
    7734:	faf42223          	sw	a5,-92(s0)

      memcpy(ptr, sp->rx_buf + out, n);
    7738:	f8c42783          	lw	a5,-116(s0)
    773c:	04478713          	addi	a4,a5,68
    7740:	fac42783          	lw	a5,-84(s0)
    7744:	00f707b3          	add	a5,a4,a5
    7748:	fa442603          	lw	a2,-92(s0)
    774c:	00078593          	mv	a1,a5
    7750:	fa042503          	lw	a0,-96(s0)
    7754:	749050ef          	jal	ra,d69c <memcpy>
      ptr   += n;
    7758:	fa042703          	lw	a4,-96(s0)
    775c:	fa442783          	lw	a5,-92(s0)
    7760:	00f707b3          	add	a5,a4,a5
    7764:	faf42023          	sw	a5,-96(s0)
      space -= n;
    7768:	f8442703          	lw	a4,-124(s0)
    776c:	fa442783          	lw	a5,-92(s0)
    7770:	40f707b3          	sub	a5,a4,a5
    7774:	f8f42223          	sw	a5,-124(s0)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7778:	fac42703          	lw	a4,-84(s0)
    777c:	fa442783          	lw	a5,-92(s0)
    7780:	00f707b3          	add	a5,a4,a5
    7784:	7ff7f713          	andi	a4,a5,2047
    7788:	f8c42783          	lw	a5,-116(s0)
    778c:	02e7ac23          	sw	a4,56(a5)
    }
    while (space > 0);
    7790:	f8442783          	lw	a5,-124(s0)
    7794:	f2f04ee3          	bgtz	a5,76d0 <altera_avalon_jtag_uart_read+0xb4>
    7798:	0080006f          	j	77a0 <altera_avalon_jtag_uart_read+0x184>
        break; /* No more data available */
    779c:	00000013          	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    77a0:	fa042703          	lw	a4,-96(s0)
    77a4:	f8842783          	lw	a5,-120(s0)
    77a8:	0ef71c63          	bne	a4,a5,78a0 <altera_avalon_jtag_uart_read+0x284>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    77ac:	f8042703          	lw	a4,-128(s0)
    77b0:	000047b7          	lui	a5,0x4
    77b4:	00f777b3          	and	a5,a4,a5
    77b8:	0e079863          	bnez	a5,78a8 <altera_avalon_jtag_uart_read+0x28c>
      break;

#ifdef __rtos__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(ALT_OS_IS_RUNNING()) {
    77bc:	c30fc0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    77c0:	00050713          	mv	a4,a0
    77c4:	00200793          	li	a5,2
    77c8:	08f71663          	bne	a4,a5,7854 <altera_avalon_jtag_uart_read+0x238>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    77cc:	f8c42783          	lw	a5,-116(s0)
    77d0:	0307a783          	lw	a5,48(a5) # 4030 <xTaskPriorityDisinherit+0x1a0>
    77d4:	fcf42223          	sw	a5,-60(s0)
    77d8:	00500793          	li	a5,5
    77dc:	fcf42423          	sw	a5,-56(s0)
    77e0:	00200793          	li	a5,2
    77e4:	fcf42623          	sw	a5,-52(s0)
    77e8:	fff00793          	li	a5,-1
    77ec:	fcf42823          	sw	a5,-48(s0)
  int ret = 0;
    77f0:	fc042a23          	sw	zero,-44(s0)
  if (taskSCHEDULER_RUNNING == xTaskGetSchedulerState())
    77f4:	bf8fc0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    77f8:	00050713          	mv	a4,a0
    77fc:	00200793          	li	a5,2
    7800:	08f71063          	bne	a4,a5,7880 <altera_avalon_jtag_uart_read+0x264>
    uxBits = xEventGroupWaitBits(group, flags, ( wait_types & 0x2 ) >> 1,
    7804:	fcc42783          	lw	a5,-52(s0)
    7808:	4017d793          	srai	a5,a5,0x1
    780c:	0017f613          	andi	a2,a5,1
    7810:	fcc42783          	lw	a5,-52(s0)
    7814:	0017f793          	andi	a5,a5,1
    7818:	fd042703          	lw	a4,-48(s0)
    781c:	00078693          	mv	a3,a5
    7820:	fc842583          	lw	a1,-56(s0)
    7824:	fc442503          	lw	a0,-60(s0)
    7828:	47c010ef          	jal	ra,8ca4 <xEventGroupWaitBits>
    782c:	fca42c23          	sw	a0,-40(s0)
    ret = uxBits & flags? 0 : -1;
    7830:	fc842703          	lw	a4,-56(s0)
    7834:	fd842783          	lw	a5,-40(s0)
    7838:	00f777b3          	and	a5,a4,a5
    783c:	00078663          	beqz	a5,7848 <altera_avalon_jtag_uart_read+0x22c>
    7840:	00000793          	li	a5,0
    7844:	0080006f          	j	784c <altera_avalon_jtag_uart_read+0x230>
    7848:	fff00793          	li	a5,-1
    784c:	fcf42a23          	sw	a5,-44(s0)
  return ret;
    7850:	0300006f          	j	7880 <altera_avalon_jtag_uart_read+0x264>
                     ALT_FLAG_WAIT_SET_ANY_WITH_CONSUME,
                     ALT_FLAG_WAIT_MAX_TIMEOUT);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    7854:	00000013          	nop
    7858:	f8c42783          	lw	a5,-116(s0)
    785c:	0347a783          	lw	a5,52(a5)
    7860:	fa842703          	lw	a4,-88(s0)
    7864:	02f71063          	bne	a4,a5,7884 <altera_avalon_jtag_uart_read+0x268>
    7868:	f8c42783          	lw	a5,-116(s0)
    786c:	0247a703          	lw	a4,36(a5)
    7870:	f8c42783          	lw	a5,-116(s0)
    7874:	0047a783          	lw	a5,4(a5)
    7878:	fef760e3          	bltu	a4,a5,7858 <altera_avalon_jtag_uart_read+0x23c>
    787c:	0080006f          	j	7884 <altera_avalon_jtag_uart_read+0x268>
    7880:	00000013          	nop
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    7884:	f8c42783          	lw	a5,-116(s0)
    7888:	0347a783          	lw	a5,52(a5)
    788c:	fa842703          	lw	a4,-88(s0)
    7890:	02f70063          	beq	a4,a5,78b0 <altera_avalon_jtag_uart_read+0x294>
  while (space > 0)
    7894:	f8442783          	lw	a5,-124(s0)
    7898:	e2f04ce3          	bgtz	a5,76d0 <altera_avalon_jtag_uart_read+0xb4>
    789c:	0180006f          	j	78b4 <altera_avalon_jtag_uart_read+0x298>
      break;
    78a0:	00000013          	nop
    78a4:	0100006f          	j	78b4 <altera_avalon_jtag_uart_read+0x298>
      break;
    78a8:	00000013          	nop
    78ac:	0080006f          	j	78b4 <altera_avalon_jtag_uart_read+0x298>
      break;
    78b0:	00000013          	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    78b4:	f8c42783          	lw	a5,-116(s0)
    78b8:	0287a783          	lw	a5,40(a5)
    78bc:	fcf42e23          	sw	a5,-36(s0)
 * alt_sem_post() is a wrapper for xSemaphoreGive() or xSemaphoreGiveFromISR().
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_post (SemaphoreHandle_t sem)
{
  int ret = -1;
    78c0:	fff00793          	li	a5,-1
    78c4:	fef42023          	sw	a5,-32(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    78c8:	f8042e23          	sw	zero,-100(s0)

  if (IS_IN_ISR_CONTEXT()){
    78cc:	000287b7          	lui	a5,0x28
    78d0:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    78d4:	02078a63          	beqz	a5,7908 <altera_avalon_jtag_uart_read+0x2ec>
      if (pdTRUE == xSemaphoreGiveFromISR(sem, &xHigherPriorityTaskWoken)){
    78d8:	f9c40793          	addi	a5,s0,-100
    78dc:	00078593          	mv	a1,a5
    78e0:	fdc42503          	lw	a0,-36(s0)
    78e4:	494030ef          	jal	ra,ad78 <xQueueGiveFromISR>
    78e8:	00050713          	mv	a4,a0
    78ec:	00100793          	li	a5,1
    78f0:	02f71e63          	bne	a4,a5,792c <altera_avalon_jtag_uart_read+0x310>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    78f4:	f9c42783          	lw	a5,-100(s0)
    78f8:	00078463          	beqz	a5,7900 <altera_avalon_jtag_uart_read+0x2e4>
    78fc:	91cfb0ef          	jal	ra,2a18 <vTaskSwitchContext>
        ret = 0;
    7900:	fe042023          	sw	zero,-32(s0)
    7904:	0280006f          	j	792c <altera_avalon_jtag_uart_read+0x310>
      }
  } else {
      if ( pdTRUE == xSemaphoreGive(sem)){
    7908:	00000693          	li	a3,0
    790c:	00000613          	li	a2,0
    7910:	00000593          	li	a1,0
    7914:	fdc42503          	lw	a0,-36(s0)
    7918:	6cd020ef          	jal	ra,a7e4 <xQueueGenericSend>
    791c:	00050713          	mv	a4,a0
    7920:	00100793          	li	a5,1
    7924:	00f71463          	bne	a4,a5,792c <altera_avalon_jtag_uart_read+0x310>
        ret = 0;
    7928:	fe042023          	sw	zero,-32(s0)

  if (ptr != buffer)
    792c:	fa042703          	lw	a4,-96(s0)
    7930:	f8842783          	lw	a5,-120(s0)
    7934:	06f70463          	beq	a4,a5,799c <altera_avalon_jtag_uart_read+0x380>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    7938:	00800793          	li	a5,8
    793c:	3007b7f3          	csrrc	a5,mstatus,a5
    7940:	fef42423          	sw	a5,-24(s0)
    return context;
    7944:	fe842783          	lw	a5,-24(s0)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    7948:	faf42823          	sw	a5,-80(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    794c:	f8c42783          	lw	a5,-116(s0)
    7950:	0207a783          	lw	a5,32(a5)
    7954:	0017e713          	ori	a4,a5,1
    7958:	f8c42783          	lw	a5,-116(s0)
    795c:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    7960:	f8c42783          	lw	a5,-116(s0)
    7964:	0207a783          	lw	a5,32(a5)
    7968:	faf42a23          	sw	a5,-76(s0)
    796c:	f8c42783          	lw	a5,-116(s0)
    7970:	0007a783          	lw	a5,0(a5)
    7974:	00478793          	addi	a5,a5,4
    7978:	00078713          	mv	a4,a5
    797c:	fb442783          	lw	a5,-76(s0)
    7980:	00f72023          	sw	a5,0(a4)
    7984:	fb042783          	lw	a5,-80(s0)
    7988:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    798c:	fe442783          	lw	a5,-28(s0)
    7990:	0087f793          	andi	a5,a5,8
    7994:	3007a073          	csrs	mstatus,a5
}
    7998:	00000013          	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    799c:	fa042703          	lw	a4,-96(s0)
    79a0:	f8842783          	lw	a5,-120(s0)
    79a4:	00f70a63          	beq	a4,a5,79b8 <altera_avalon_jtag_uart_read+0x39c>
    return ptr - buffer;
    79a8:	fa042703          	lw	a4,-96(s0)
    79ac:	f8842783          	lw	a5,-120(s0)
    79b0:	40f707b3          	sub	a5,a4,a5
    79b4:	0200006f          	j	79d4 <altera_avalon_jtag_uart_read+0x3b8>
  else if (flags & O_NONBLOCK)
    79b8:	f8042703          	lw	a4,-128(s0)
    79bc:	000047b7          	lui	a5,0x4
    79c0:	00f777b3          	and	a5,a4,a5
    79c4:	00078663          	beqz	a5,79d0 <altera_avalon_jtag_uart_read+0x3b4>
    return -EWOULDBLOCK;
    79c8:	ff500793          	li	a5,-11
    79cc:	0080006f          	j	79d4 <altera_avalon_jtag_uart_read+0x3b8>
  else
    return -EIO;
    79d0:	ffb00793          	li	a5,-5
}
    79d4:	00078713          	mv	a4,a5
    79d8:	000287b7          	lui	a5,0x28
    79dc:	fec42683          	lw	a3,-20(s0)
    79e0:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    79e4:	00f6c7b3          	xor	a5,a3,a5
    79e8:	00000693          	li	a3,0
    79ec:	00078463          	beqz	a5,79f4 <altera_avalon_jtag_uart_read+0x3d8>
    79f0:	2ac060ef          	jal	ra,dc9c <__stack_chk_fail>
    79f4:	00070513          	mv	a0,a4
    79f8:	07c12083          	lw	ra,124(sp)
    79fc:	07812403          	lw	s0,120(sp)
    7a00:	08010113          	addi	sp,sp,128
    7a04:	00008067          	ret

00007a08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    7a08:	f8010113          	addi	sp,sp,-128
    7a0c:	06112e23          	sw	ra,124(sp)
    7a10:	06812c23          	sw	s0,120(sp)
    7a14:	08010413          	addi	s0,sp,128
    7a18:	f8a42623          	sw	a0,-116(s0)
    7a1c:	f8b42423          	sw	a1,-120(s0)
    7a20:	f8c42223          	sw	a2,-124(s0)
    7a24:	f8d42023          	sw	a3,-128(s0)
    7a28:	000287b7          	lui	a5,0x28
    7a2c:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    7a30:	fee42623          	sw	a4,-20(s0)
    7a34:	00000713          	li	a4,0
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    7a38:	fa042023          	sw	zero,-96(s0)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    7a3c:	f8842783          	lw	a5,-120(s0)
    7a40:	faf42423          	sw	a5,-88(s0)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    7a44:	f8c42783          	lw	a5,-116(s0)
    7a48:	02c7a783          	lw	a5,44(a5)
    7a4c:	faf42c23          	sw	a5,-72(s0)
    7a50:	fa042e23          	sw	zero,-68(s0)
  int ret = -1;
    7a54:	fff00793          	li	a5,-1
    7a58:	fcf42023          	sw	a5,-64(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    7a5c:	f8042e23          	sw	zero,-100(s0)
  if (IS_IN_ISR_CONTEXT()){
    7a60:	000287b7          	lui	a5,0x28
    7a64:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    7a68:	02078c63          	beqz	a5,7aa0 <altera_avalon_jtag_uart_write+0x98>
      if (pdTRUE == xSemaphoreTakeFromISR(sem, &xHigherPriorityTaskWoken)){
    7a6c:	f9c40793          	addi	a5,s0,-100
    7a70:	00078613          	mv	a2,a5
    7a74:	00000593          	li	a1,0
    7a78:	fb842503          	lw	a0,-72(s0)
    7a7c:	6b1030ef          	jal	ra,b92c <xQueueReceiveFromISR>
    7a80:	00050713          	mv	a4,a0
    7a84:	00100793          	li	a5,1
    7a88:	12f71063          	bne	a4,a5,7ba8 <altera_avalon_jtag_uart_write+0x1a0>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    7a8c:	f9c42783          	lw	a5,-100(s0)
    7a90:	00078463          	beqz	a5,7a98 <altera_avalon_jtag_uart_write+0x90>
    7a94:	f85fa0ef          	jal	ra,2a18 <vTaskSwitchContext>
        ret = 0;
    7a98:	fc042023          	sw	zero,-64(s0)
    7a9c:	10c0006f          	j	7ba8 <altera_avalon_jtag_uart_write+0x1a0>
      if ( pdTRUE == xSemaphoreTake(sem, timeout)){
    7aa0:	fbc42583          	lw	a1,-68(s0)
    7aa4:	fb842503          	lw	a0,-72(s0)
    7aa8:	794030ef          	jal	ra,b23c <xQueueSemaphoreTake>
    7aac:	00050713          	mv	a4,a0
    7ab0:	00100793          	li	a5,1
    7ab4:	0ef71a63          	bne	a4,a5,7ba8 <altera_avalon_jtag_uart_write+0x1a0>
        ret = 0;
    7ab8:	fc042023          	sw	zero,-64(s0)

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    7abc:	0ec0006f          	j	7ba8 <altera_avalon_jtag_uart_write+0x1a0>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    7ac0:	f8c42783          	lw	a5,-116(s0)
    7ac4:	03c7a783          	lw	a5,60(a5)
    7ac8:	faf42623          	sw	a5,-84(s0)
      out = sp->tx_out;
    7acc:	f8c42783          	lw	a5,-116(s0)
    7ad0:	0407a783          	lw	a5,64(a5)
    7ad4:	faf42023          	sw	a5,-96(s0)

      if (in < out)
    7ad8:	fac42703          	lw	a4,-84(s0)
    7adc:	fa042783          	lw	a5,-96(s0)
    7ae0:	00f77e63          	bgeu	a4,a5,7afc <altera_avalon_jtag_uart_write+0xf4>
        n = out - 1 - in;
    7ae4:	fa042703          	lw	a4,-96(s0)
    7ae8:	fac42783          	lw	a5,-84(s0)
    7aec:	40f707b3          	sub	a5,a4,a5
    7af0:	fff78793          	addi	a5,a5,-1
    7af4:	faf42223          	sw	a5,-92(s0)
    7af8:	0340006f          	j	7b2c <altera_avalon_jtag_uart_write+0x124>
      else if (out > 0)
    7afc:	fa042783          	lw	a5,-96(s0)
    7b00:	00078e63          	beqz	a5,7b1c <altera_avalon_jtag_uart_write+0x114>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    7b04:	000017b7          	lui	a5,0x1
    7b08:	80078713          	addi	a4,a5,-2048 # 800 <prvInitialiseNewTask+0x290>
    7b0c:	fac42783          	lw	a5,-84(s0)
    7b10:	40f707b3          	sub	a5,a4,a5
    7b14:	faf42223          	sw	a5,-92(s0)
    7b18:	0140006f          	j	7b2c <altera_avalon_jtag_uart_write+0x124>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    7b1c:	7ff00713          	li	a4,2047
    7b20:	fac42783          	lw	a5,-84(s0)
    7b24:	40f707b3          	sub	a5,a4,a5
    7b28:	faf42223          	sw	a5,-92(s0)

      if (n == 0)
    7b2c:	fa442783          	lw	a5,-92(s0)
    7b30:	08078263          	beqz	a5,7bb4 <altera_avalon_jtag_uart_write+0x1ac>
        break;

      if (n > count)
    7b34:	f8442783          	lw	a5,-124(s0)
    7b38:	fa442703          	lw	a4,-92(s0)
    7b3c:	00e7f663          	bgeu	a5,a4,7b48 <altera_avalon_jtag_uart_write+0x140>
        n = count;
    7b40:	f8442783          	lw	a5,-124(s0)
    7b44:	faf42223          	sw	a5,-92(s0)

      memcpy(sp->tx_buf + in, ptr, n);
    7b48:	f8c42703          	lw	a4,-116(s0)
    7b4c:	000017b7          	lui	a5,0x1
    7b50:	84478793          	addi	a5,a5,-1980 # 844 <prvAddNewTaskToReadyList+0x20>
    7b54:	00f70733          	add	a4,a4,a5
    7b58:	fac42783          	lw	a5,-84(s0)
    7b5c:	00f707b3          	add	a5,a4,a5
    7b60:	fa442603          	lw	a2,-92(s0)
    7b64:	f8842583          	lw	a1,-120(s0)
    7b68:	00078513          	mv	a0,a5
    7b6c:	331050ef          	jal	ra,d69c <memcpy>
      ptr   += n;
    7b70:	f8842703          	lw	a4,-120(s0)
    7b74:	fa442783          	lw	a5,-92(s0)
    7b78:	00f707b3          	add	a5,a4,a5
    7b7c:	f8f42423          	sw	a5,-120(s0)
      count -= n;
    7b80:	f8442703          	lw	a4,-124(s0)
    7b84:	fa442783          	lw	a5,-92(s0)
    7b88:	40f707b3          	sub	a5,a4,a5
    7b8c:	f8f42223          	sw	a5,-124(s0)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    7b90:	fac42703          	lw	a4,-84(s0)
    7b94:	fa442783          	lw	a5,-92(s0)
    7b98:	00f707b3          	add	a5,a4,a5
    7b9c:	7ff7f713          	andi	a4,a5,2047
    7ba0:	f8c42783          	lw	a5,-116(s0)
    7ba4:	02e7ae23          	sw	a4,60(a5)
    while (count > 0)
    7ba8:	f8442783          	lw	a5,-124(s0)
    7bac:	f0f04ae3          	bgtz	a5,7ac0 <altera_avalon_jtag_uart_write+0xb8>
    7bb0:	0080006f          	j	7bb8 <altera_avalon_jtag_uart_write+0x1b0>
        break;
    7bb4:	00000013          	nop
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    7bb8:	00800793          	li	a5,8
    7bbc:	3007b7f3          	csrrc	a5,mstatus,a5
    7bc0:	fcf42423          	sw	a5,-56(s0)
    return context;
    7bc4:	fc842783          	lw	a5,-56(s0)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    7bc8:	faf42823          	sw	a5,-80(s0)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    7bcc:	f8c42783          	lw	a5,-116(s0)
    7bd0:	0207a783          	lw	a5,32(a5)
    7bd4:	0027e713          	ori	a4,a5,2
    7bd8:	f8c42783          	lw	a5,-116(s0)
    7bdc:	02e7a023          	sw	a4,32(a5)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    7be0:	f8c42783          	lw	a5,-116(s0)
    7be4:	0207a783          	lw	a5,32(a5)
    7be8:	faf42a23          	sw	a5,-76(s0)
    7bec:	f8c42783          	lw	a5,-116(s0)
    7bf0:	0007a783          	lw	a5,0(a5)
    7bf4:	00478793          	addi	a5,a5,4
    7bf8:	00078713          	mv	a4,a5
    7bfc:	fb442783          	lw	a5,-76(s0)
    7c00:	00f72023          	sw	a5,0(a4)
    7c04:	fb042783          	lw	a5,-80(s0)
    7c08:	fcf42223          	sw	a5,-60(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    7c0c:	fc442783          	lw	a5,-60(s0)
    7c10:	0087f793          	andi	a5,a5,8
    7c14:	3007a073          	csrs	mstatus,a5
}
    7c18:	00000013          	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    7c1c:	f8442783          	lw	a5,-124(s0)
    7c20:	0ef05463          	blez	a5,7d08 <altera_avalon_jtag_uart_write+0x300>
    {
      if (flags & O_NONBLOCK)
    7c24:	f8042703          	lw	a4,-128(s0)
    7c28:	000047b7          	lui	a5,0x4
    7c2c:	00f777b3          	and	a5,a4,a5
    7c30:	0e079263          	bnez	a5,7d14 <altera_avalon_jtag_uart_write+0x30c>
        break;

#ifdef __rtos__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(ALT_OS_IS_RUNNING()) {
    7c34:	fb9fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    7c38:	00050713          	mv	a4,a0
    7c3c:	00200793          	li	a5,2
    7c40:	08f71663          	bne	a4,a5,7ccc <altera_avalon_jtag_uart_write+0x2c4>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    7c44:	f8c42783          	lw	a5,-116(s0)
    7c48:	0307a783          	lw	a5,48(a5) # 4030 <xTaskPriorityDisinherit+0x1a0>
    7c4c:	fcf42623          	sw	a5,-52(s0)
    7c50:	00600793          	li	a5,6
    7c54:	fcf42823          	sw	a5,-48(s0)
    7c58:	00200793          	li	a5,2
    7c5c:	fcf42a23          	sw	a5,-44(s0)
    7c60:	fff00793          	li	a5,-1
    7c64:	fcf42c23          	sw	a5,-40(s0)
  int ret = 0;
    7c68:	fc042e23          	sw	zero,-36(s0)
  if (taskSCHEDULER_RUNNING == xTaskGetSchedulerState())
    7c6c:	f81fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    7c70:	00050713          	mv	a4,a0
    7c74:	00200793          	li	a5,2
    7c78:	08f71063          	bne	a4,a5,7cf8 <altera_avalon_jtag_uart_write+0x2f0>
    uxBits = xEventGroupWaitBits(group, flags, ( wait_types & 0x2 ) >> 1,
    7c7c:	fd442783          	lw	a5,-44(s0)
    7c80:	4017d793          	srai	a5,a5,0x1
    7c84:	0017f613          	andi	a2,a5,1
    7c88:	fd442783          	lw	a5,-44(s0)
    7c8c:	0017f793          	andi	a5,a5,1
    7c90:	fd842703          	lw	a4,-40(s0)
    7c94:	00078693          	mv	a3,a5
    7c98:	fd042583          	lw	a1,-48(s0)
    7c9c:	fcc42503          	lw	a0,-52(s0)
    7ca0:	004010ef          	jal	ra,8ca4 <xEventGroupWaitBits>
    7ca4:	fea42023          	sw	a0,-32(s0)
    ret = uxBits & flags? 0 : -1;
    7ca8:	fd042703          	lw	a4,-48(s0)
    7cac:	fe042783          	lw	a5,-32(s0)
    7cb0:	00f777b3          	and	a5,a4,a5
    7cb4:	00078663          	beqz	a5,7cc0 <altera_avalon_jtag_uart_write+0x2b8>
    7cb8:	00000793          	li	a5,0
    7cbc:	0080006f          	j	7cc4 <altera_avalon_jtag_uart_write+0x2bc>
    7cc0:	fff00793          	li	a5,-1
    7cc4:	fcf42e23          	sw	a5,-36(s0)
  return ret;
    7cc8:	0300006f          	j	7cf8 <altera_avalon_jtag_uart_write+0x2f0>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    7ccc:	00000013          	nop
    7cd0:	f8c42783          	lw	a5,-116(s0)
    7cd4:	0407a783          	lw	a5,64(a5)
    7cd8:	fa042703          	lw	a4,-96(s0)
    7cdc:	02f71063          	bne	a4,a5,7cfc <altera_avalon_jtag_uart_write+0x2f4>
    7ce0:	f8c42783          	lw	a5,-116(s0)
    7ce4:	0247a703          	lw	a4,36(a5)
    7ce8:	f8c42783          	lw	a5,-116(s0)
    7cec:	0047a783          	lw	a5,4(a5)
    7cf0:	fef760e3          	bltu	a4,a5,7cd0 <altera_avalon_jtag_uart_write+0x2c8>
    7cf4:	0080006f          	j	7cfc <altera_avalon_jtag_uart_write+0x2f4>
    7cf8:	00000013          	nop
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    7cfc:	f8c42783          	lw	a5,-116(s0)
    7d00:	0247a783          	lw	a5,36(a5)
    7d04:	00079c63          	bnez	a5,7d1c <altera_avalon_jtag_uart_write+0x314>
         break;
    }
  }
  while (count > 0);
    7d08:	f8442783          	lw	a5,-124(s0)
    7d0c:	e8f04ee3          	bgtz	a5,7ba8 <altera_avalon_jtag_uart_write+0x1a0>
    7d10:	0100006f          	j	7d20 <altera_avalon_jtag_uart_write+0x318>
        break;
    7d14:	00000013          	nop
    7d18:	0080006f          	j	7d20 <altera_avalon_jtag_uart_write+0x318>
         break;
    7d1c:	00000013          	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    7d20:	f8c42783          	lw	a5,-116(s0)
    7d24:	02c7a783          	lw	a5,44(a5)
    7d28:	fef42223          	sw	a5,-28(s0)
  int ret = -1;
    7d2c:	fff00793          	li	a5,-1
    7d30:	fef42423          	sw	a5,-24(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    7d34:	f8042e23          	sw	zero,-100(s0)
  if (IS_IN_ISR_CONTEXT()){
    7d38:	000287b7          	lui	a5,0x28
    7d3c:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
    7d40:	02078a63          	beqz	a5,7d74 <altera_avalon_jtag_uart_write+0x36c>
      if (pdTRUE == xSemaphoreGiveFromISR(sem, &xHigherPriorityTaskWoken)){
    7d44:	f9c40793          	addi	a5,s0,-100
    7d48:	00078593          	mv	a1,a5
    7d4c:	fe442503          	lw	a0,-28(s0)
    7d50:	028030ef          	jal	ra,ad78 <xQueueGiveFromISR>
    7d54:	00050713          	mv	a4,a0
    7d58:	00100793          	li	a5,1
    7d5c:	02f71e63          	bne	a4,a5,7d98 <altera_avalon_jtag_uart_write+0x390>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    7d60:	f9c42783          	lw	a5,-100(s0)
    7d64:	00078463          	beqz	a5,7d6c <altera_avalon_jtag_uart_write+0x364>
    7d68:	cb1fa0ef          	jal	ra,2a18 <vTaskSwitchContext>
        ret = 0;
    7d6c:	fe042423          	sw	zero,-24(s0)
    7d70:	0280006f          	j	7d98 <altera_avalon_jtag_uart_write+0x390>
      if ( pdTRUE == xSemaphoreGive(sem)){
    7d74:	00000693          	li	a3,0
    7d78:	00000613          	li	a2,0
    7d7c:	00000593          	li	a1,0
    7d80:	fe442503          	lw	a0,-28(s0)
    7d84:	261020ef          	jal	ra,a7e4 <xQueueGenericSend>
    7d88:	00050713          	mv	a4,a0
    7d8c:	00100793          	li	a5,1
    7d90:	00f71463          	bne	a4,a5,7d98 <altera_avalon_jtag_uart_write+0x390>
        ret = 0;
    7d94:	fe042423          	sw	zero,-24(s0)

  if (ptr != start)
    7d98:	f8842703          	lw	a4,-120(s0)
    7d9c:	fa842783          	lw	a5,-88(s0)
    7da0:	00f70a63          	beq	a4,a5,7db4 <altera_avalon_jtag_uart_write+0x3ac>
    return ptr - start;
    7da4:	f8842703          	lw	a4,-120(s0)
    7da8:	fa842783          	lw	a5,-88(s0)
    7dac:	40f707b3          	sub	a5,a4,a5
    7db0:	0200006f          	j	7dd0 <altera_avalon_jtag_uart_write+0x3c8>
  else if (flags & O_NONBLOCK)
    7db4:	f8042703          	lw	a4,-128(s0)
    7db8:	000047b7          	lui	a5,0x4
    7dbc:	00f777b3          	and	a5,a4,a5
    7dc0:	00078663          	beqz	a5,7dcc <altera_avalon_jtag_uart_write+0x3c4>
    return -EWOULDBLOCK;
    7dc4:	ff500793          	li	a5,-11
    7dc8:	0080006f          	j	7dd0 <altera_avalon_jtag_uart_write+0x3c8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    7dcc:	ffb00793          	li	a5,-5
}
    7dd0:	00078713          	mv	a4,a5
    7dd4:	000287b7          	lui	a5,0x28
    7dd8:	fec42683          	lw	a3,-20(s0)
    7ddc:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    7de0:	00f6c7b3          	xor	a5,a3,a5
    7de4:	00000693          	li	a3,0
    7de8:	00078463          	beqz	a5,7df0 <altera_avalon_jtag_uart_write+0x3e8>
    7dec:	6b1050ef          	jal	ra,dc9c <__stack_chk_fail>
    7df0:	00070513          	mv	a0,a4
    7df4:	07c12083          	lw	ra,124(sp)
    7df8:	07812403          	lw	s0,120(sp)
    7dfc:	08010113          	addi	sp,sp,128
    7e00:	00008067          	ret

00007e04 <__env_lock>:
/* number of times __malloc_lock has recursed */
static int locks;
#endif /* OS_THREAD_SAFE_C_LIBRARY */

void __env_lock ( struct _reent *_r )
{
    7e04:	fb010113          	addi	sp,sp,-80
    7e08:	04112623          	sw	ra,76(sp)
    7e0c:	04812423          	sw	s0,72(sp)
    7e10:	05010413          	addi	s0,sp,80
    7e14:	faa42e23          	sw	a0,-68(s0)
    7e18:	000287b7          	lui	a5,0x28
    7e1c:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    7e20:	fee42623          	sw	a4,-20(s0)
    7e24:	00000713          	li	a4,0
#if(OS_THREAD_SAFE_C_LIBRARY > 0)
  TaskStatus_t xTaskDetails;
  int id;
  int semcnt;

  if (taskSCHEDULER_RUNNING != xTaskGetSchedulerState())
    7e28:	dc5fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    7e2c:	00050713          	mv	a4,a0
    7e30:	00200793          	li	a5,2
    7e34:	08f71e63          	bne	a4,a5,7ed0 <__env_lock+0xcc>
      return;

  /* Get the current task's status information. */
  vTaskGetInfo(
    7e38:	fc840793          	addi	a5,s0,-56
    7e3c:	00000693          	li	a3,0
    7e40:	00000613          	li	a2,0
    7e44:	00078593          	mv	a1,a5
    7e48:	00000513          	li	a0,0
    7e4c:	9cdfb0ef          	jal	ra,3818 <vTaskGetInfo>
            pdFALSE,
            /* Don't include the task state in the TaskStatus_t structure. */
            0 );

  /* Use task priority as the task id */
  id = ( int )xTaskDetails.uxCurrentPriority;
    7e50:	fd842783          	lw	a5,-40(s0)
    7e54:	fcf42023          	sw	a5,-64(s0)
   
  /* See if we own the heap already by checking the semaphore counter.
   * If the counter is 0, that means we own the heap now.
   */
  semcnt = ( int )uxSemaphoreGetCount( alt_envsem );
    7e58:	000287b7          	lui	a5,0x28
    7e5c:	c6c7a783          	lw	a5,-916(a5) # 27c6c <alt_envsem>
    7e60:	00078513          	mv	a0,a5
    7e64:	519030ef          	jal	ra,bb7c <uxQueueMessagesWaiting>
    7e68:	00050793          	mv	a5,a0
    7e6c:	fcf42223          	sw	a5,-60(s0)

  if( semcnt == 0 && id == lockid ) 
    7e70:	fc442783          	lw	a5,-60(s0)
    7e74:	02079663          	bnez	a5,7ea0 <__env_lock+0x9c>
    7e78:	000267b7          	lui	a5,0x26
    7e7c:	0087a783          	lw	a5,8(a5) # 26008 <lockid>
    7e80:	fc042703          	lw	a4,-64(s0)
    7e84:	00f71e63          	bne	a4,a5,7ea0 <__env_lock+0x9c>
  {
    /* We do; just count the recursion */
    locks++;
    7e88:	000287b7          	lui	a5,0x28
    7e8c:	ec87a783          	lw	a5,-312(a5) # 27ec8 <locks>
    7e90:	00178713          	addi	a4,a5,1
    7e94:	000287b7          	lui	a5,0x28
    7e98:	ece7a423          	sw	a4,-312(a5) # 27ec8 <locks>
    7e9c:	0380006f          	j	7ed4 <__env_lock+0xd0>
  }
  else 
  {
    /* Wait on the other task to yield the heap, then claim ownership of it */
    xSemaphoreTake( alt_envsem, 0);
    7ea0:	000287b7          	lui	a5,0x28
    7ea4:	c6c7a783          	lw	a5,-916(a5) # 27c6c <alt_envsem>
    7ea8:	00000593          	li	a1,0
    7eac:	00078513          	mv	a0,a5
    7eb0:	38c030ef          	jal	ra,b23c <xQueueSemaphoreTake>
    locks  = 1;
    7eb4:	000287b7          	lui	a5,0x28
    7eb8:	00100713          	li	a4,1
    7ebc:	ece7a423          	sw	a4,-312(a5) # 27ec8 <locks>
    lockid = id;
    7ec0:	000267b7          	lui	a5,0x26
    7ec4:	fc042703          	lw	a4,-64(s0)
    7ec8:	00e7a423          	sw	a4,8(a5) # 26008 <lockid>
    7ecc:	0080006f          	j	7ed4 <__env_lock+0xd0>
      return;
    7ed0:	00000013          	nop
  }
#endif /* OS_THREAD_SAFE_C_LIBRARY */
}
    7ed4:	000287b7          	lui	a5,0x28
    7ed8:	fec42703          	lw	a4,-20(s0)
    7edc:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    7ee0:	00f747b3          	xor	a5,a4,a5
    7ee4:	00000713          	li	a4,0
    7ee8:	00078463          	beqz	a5,7ef0 <__env_lock+0xec>
    7eec:	5b1050ef          	jal	ra,dc9c <__stack_chk_fail>
    7ef0:	04c12083          	lw	ra,76(sp)
    7ef4:	04812403          	lw	s0,72(sp)
    7ef8:	05010113          	addi	sp,sp,80
    7efc:	00008067          	ret

00007f00 <__env_unlock>:

void __env_unlock ( struct _reent *_r )
{
    7f00:	fe010113          	addi	sp,sp,-32
    7f04:	00112e23          	sw	ra,28(sp)
    7f08:	00812c23          	sw	s0,24(sp)
    7f0c:	02010413          	addi	s0,sp,32
    7f10:	fea42623          	sw	a0,-20(s0)
#if(OS_THREAD_SAFE_C_LIBRARY > 0)

  if (taskSCHEDULER_RUNNING != xTaskGetSchedulerState())
    7f14:	cd9fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    7f18:	00050713          	mv	a4,a0
    7f1c:	00200793          	li	a5,2
    7f20:	04f71e63          	bne	a4,a5,7f7c <__env_unlock+0x7c>
      return;

  if (locks == 0)
    7f24:	000287b7          	lui	a5,0x28
    7f28:	ec87a783          	lw	a5,-312(a5) # 27ec8 <locks>
    7f2c:	04078c63          	beqz	a5,7f84 <__env_unlock+0x84>
    return;

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    7f30:	000287b7          	lui	a5,0x28
    7f34:	ec87a783          	lw	a5,-312(a5) # 27ec8 <locks>
    7f38:	fff78713          	addi	a4,a5,-1
    7f3c:	000287b7          	lui	a5,0x28
    7f40:	ece7a423          	sw	a4,-312(a5) # 27ec8 <locks>
    7f44:	000287b7          	lui	a5,0x28
    7f48:	ec87a783          	lw	a5,-312(a5) # 27ec8 <locks>
    7f4c:	02079e63          	bnez	a5,7f88 <__env_unlock+0x88>
  {
    lockid = -1;
    7f50:	000267b7          	lui	a5,0x26
    7f54:	fff00713          	li	a4,-1
    7f58:	00e7a423          	sw	a4,8(a5) # 26008 <lockid>
    xSemaphoreGive( alt_envsem );
    7f5c:	000287b7          	lui	a5,0x28
    7f60:	c6c7a783          	lw	a5,-916(a5) # 27c6c <alt_envsem>
    7f64:	00000693          	li	a3,0
    7f68:	00000613          	li	a2,0
    7f6c:	00000593          	li	a1,0
    7f70:	00078513          	mv	a0,a5
    7f74:	071020ef          	jal	ra,a7e4 <xQueueGenericSend>
    7f78:	0100006f          	j	7f88 <__env_unlock+0x88>
      return;
    7f7c:	00000013          	nop
    7f80:	0080006f          	j	7f88 <__env_unlock+0x88>
    return;
    7f84:	00000013          	nop
  }
#endif /* OS_THREAD_SAFE_C_LIBRARY */
}
    7f88:	01c12083          	lw	ra,28(sp)
    7f8c:	01812403          	lw	s0,24(sp)
    7f90:	02010113          	addi	sp,sp,32
    7f94:	00008067          	ret

00007f98 <__malloc_lock>:
/* number of times __malloc_lock has recursed */
static int locks;
#endif /* OS_THREAD_SAFE_C_LIBRARY */

void __malloc_lock ( struct _reent *_r )
{
    7f98:	fb010113          	addi	sp,sp,-80
    7f9c:	04112623          	sw	ra,76(sp)
    7fa0:	04812423          	sw	s0,72(sp)
    7fa4:	05010413          	addi	s0,sp,80
    7fa8:	faa42e23          	sw	a0,-68(s0)
    7fac:	000287b7          	lui	a5,0x28
    7fb0:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    7fb4:	fee42623          	sw	a4,-20(s0)
    7fb8:	00000713          	li	a4,0
#if(OS_THREAD_SAFE_C_LIBRARY > 0)
  TaskStatus_t xTaskDetails;
  int id;
  int semcnt;

  if (taskSCHEDULER_RUNNING != xTaskGetSchedulerState())
    7fbc:	c31fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    7fc0:	00050713          	mv	a4,a0
    7fc4:	00200793          	li	a5,2
    7fc8:	0ef71e63          	bne	a4,a5,80c4 <__malloc_lock+0x12c>
      return;

  /* Get the current task's status information. */
  vTaskGetInfo(
    7fcc:	fc840793          	addi	a5,s0,-56
    7fd0:	00000693          	li	a3,0
    7fd4:	00000613          	li	a2,0
    7fd8:	00078593          	mv	a1,a5
    7fdc:	00000513          	li	a0,0
    7fe0:	839fb0ef          	jal	ra,3818 <vTaskGetInfo>
            pdFALSE,
            /* Don't include the task state in the TaskStatus_t structure. */
            0 );

  /* Use task priority as the task id */
  id = ( int )xTaskDetails.uxCurrentPriority;
    7fe4:	fd842783          	lw	a5,-40(s0)
    7fe8:	fcf42023          	sw	a5,-64(s0)

  /* See if we own the heap already by checking the semaphore counter.
   * If the counter is 0, that means we own the heap now.
   */
  semcnt = ( int )uxSemaphoreGetCount( alt_heapsem );
    7fec:	000287b7          	lui	a5,0x28
    7ff0:	c707a783          	lw	a5,-912(a5) # 27c70 <alt_heapsem>
    7ff4:	00078513          	mv	a0,a5
    7ff8:	385030ef          	jal	ra,bb7c <uxQueueMessagesWaiting>
    7ffc:	00050793          	mv	a5,a0
    8000:	fcf42223          	sw	a5,-60(s0)
  
  portENTER_CRITICAL(); 
    8004:	30047073          	csrci	mstatus,8
    8008:	000267b7          	lui	a5,0x26
    800c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8010:	00178713          	addi	a4,a5,1
    8014:	000267b7          	lui	a5,0x26
    8018:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>

  if( semcnt == 0 && id == lockid ) 
    801c:	fc442783          	lw	a5,-60(s0)
    8020:	04079863          	bnez	a5,8070 <__malloc_lock+0xd8>
    8024:	000267b7          	lui	a5,0x26
    8028:	00c7a783          	lw	a5,12(a5) # 2600c <lockid>
    802c:	fc042703          	lw	a4,-64(s0)
    8030:	04f71063          	bne	a4,a5,8070 <__malloc_lock+0xd8>
  {
    /* We do; just count the recursion */
    locks++;
    8034:	000287b7          	lui	a5,0x28
    8038:	ecc7a783          	lw	a5,-308(a5) # 27ecc <locks>
    803c:	00178713          	addi	a4,a5,1
    8040:	000287b7          	lui	a5,0x28
    8044:	ece7a623          	sw	a4,-308(a5) # 27ecc <locks>
    portEXIT_CRITICAL();
    8048:	000267b7          	lui	a5,0x26
    804c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8050:	fff78713          	addi	a4,a5,-1
    8054:	000267b7          	lui	a5,0x26
    8058:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    805c:	000267b7          	lui	a5,0x26
    8060:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8064:	06079263          	bnez	a5,80c8 <__malloc_lock+0x130>
    8068:	30046073          	csrsi	mstatus,8
    806c:	05c0006f          	j	80c8 <__malloc_lock+0x130>
  }
  else 
  {
    /* Wait on the other task to yield the heap, then claim ownership of it */
    portEXIT_CRITICAL();
    8070:	000267b7          	lui	a5,0x26
    8074:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8078:	fff78713          	addi	a4,a5,-1
    807c:	000267b7          	lui	a5,0x26
    8080:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    8084:	000267b7          	lui	a5,0x26
    8088:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    808c:	00079463          	bnez	a5,8094 <__malloc_lock+0xfc>
    8090:	30046073          	csrsi	mstatus,8

    xSemaphoreTake( alt_heapsem, 0);
    8094:	000287b7          	lui	a5,0x28
    8098:	c707a783          	lw	a5,-912(a5) # 27c70 <alt_heapsem>
    809c:	00000593          	li	a1,0
    80a0:	00078513          	mv	a0,a5
    80a4:	198030ef          	jal	ra,b23c <xQueueSemaphoreTake>
    locks  = 1;
    80a8:	000287b7          	lui	a5,0x28
    80ac:	00100713          	li	a4,1
    80b0:	ece7a623          	sw	a4,-308(a5) # 27ecc <locks>
    lockid = id;
    80b4:	000267b7          	lui	a5,0x26
    80b8:	fc042703          	lw	a4,-64(s0)
    80bc:	00e7a623          	sw	a4,12(a5) # 2600c <lockid>
    80c0:	0080006f          	j	80c8 <__malloc_lock+0x130>
      return;
    80c4:	00000013          	nop
  }
#endif /* OS_THREAD_SAFE_C_LIBRARY */
}
    80c8:	000287b7          	lui	a5,0x28
    80cc:	fec42703          	lw	a4,-20(s0)
    80d0:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    80d4:	00f747b3          	xor	a5,a4,a5
    80d8:	00000713          	li	a4,0
    80dc:	00078463          	beqz	a5,80e4 <__malloc_lock+0x14c>
    80e0:	3bd050ef          	jal	ra,dc9c <__stack_chk_fail>
    80e4:	04c12083          	lw	ra,76(sp)
    80e8:	04812403          	lw	s0,72(sp)
    80ec:	05010113          	addi	sp,sp,80
    80f0:	00008067          	ret

000080f4 <__malloc_unlock>:

void __malloc_unlock ( struct _reent *_r )
{
    80f4:	fe010113          	addi	sp,sp,-32
    80f8:	00112e23          	sw	ra,28(sp)
    80fc:	00812c23          	sw	s0,24(sp)
    8100:	02010413          	addi	s0,sp,32
    8104:	fea42623          	sw	a0,-20(s0)
#if(OS_THREAD_SAFE_C_LIBRARY > 0)

  if (taskSCHEDULER_RUNNING != xTaskGetSchedulerState())
    8108:	ae5fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    810c:	00050713          	mv	a4,a0
    8110:	00200793          	li	a5,2
    8114:	0ef71463          	bne	a4,a5,81fc <__malloc_unlock+0x108>
      return;

  portENTER_CRITICAL(); 
    8118:	30047073          	csrci	mstatus,8
    811c:	000267b7          	lui	a5,0x26
    8120:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8124:	00178713          	addi	a4,a5,1
    8128:	000267b7          	lui	a5,0x26
    812c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
  if (locks == 0)
    8130:	000287b7          	lui	a5,0x28
    8134:	ecc7a783          	lw	a5,-308(a5) # 27ecc <locks>
    8138:	02079663          	bnez	a5,8164 <__malloc_unlock+0x70>
  {
      portEXIT_CRITICAL();
    813c:	000267b7          	lui	a5,0x26
    8140:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8144:	fff78713          	addi	a4,a5,-1
    8148:	000267b7          	lui	a5,0x26
    814c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    8150:	000267b7          	lui	a5,0x26
    8154:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8158:	0a079663          	bnez	a5,8204 <__malloc_unlock+0x110>
    815c:	30046073          	csrsi	mstatus,8
      return;
    8160:	0a40006f          	j	8204 <__malloc_unlock+0x110>
  }

  /* Release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    8164:	000287b7          	lui	a5,0x28
    8168:	ecc7a783          	lw	a5,-308(a5) # 27ecc <locks>
    816c:	fff78713          	addi	a4,a5,-1
    8170:	000287b7          	lui	a5,0x28
    8174:	ece7a623          	sw	a4,-308(a5) # 27ecc <locks>
    8178:	000287b7          	lui	a5,0x28
    817c:	ecc7a783          	lw	a5,-308(a5) # 27ecc <locks>
    8180:	04079a63          	bnez	a5,81d4 <__malloc_unlock+0xe0>
  {
    lockid = -1;
    8184:	000267b7          	lui	a5,0x26
    8188:	fff00713          	li	a4,-1
    818c:	00e7a623          	sw	a4,12(a5) # 2600c <lockid>
    portEXIT_CRITICAL();
    8190:	000267b7          	lui	a5,0x26
    8194:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8198:	fff78713          	addi	a4,a5,-1
    819c:	000267b7          	lui	a5,0x26
    81a0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    81a4:	000267b7          	lui	a5,0x26
    81a8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    81ac:	00079463          	bnez	a5,81b4 <__malloc_unlock+0xc0>
    81b0:	30046073          	csrsi	mstatus,8
    xSemaphoreGive( alt_heapsem );
    81b4:	000287b7          	lui	a5,0x28
    81b8:	c707a783          	lw	a5,-912(a5) # 27c70 <alt_heapsem>
    81bc:	00000693          	li	a3,0
    81c0:	00000613          	li	a2,0
    81c4:	00000593          	li	a1,0
    81c8:	00078513          	mv	a0,a5
    81cc:	618020ef          	jal	ra,a7e4 <xQueueGenericSend>
    81d0:	0380006f          	j	8208 <__malloc_unlock+0x114>
  }
  else
  {
    portEXIT_CRITICAL();
    81d4:	000267b7          	lui	a5,0x26
    81d8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    81dc:	fff78713          	addi	a4,a5,-1
    81e0:	000267b7          	lui	a5,0x26
    81e4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    81e8:	000267b7          	lui	a5,0x26
    81ec:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    81f0:	00079c63          	bnez	a5,8208 <__malloc_unlock+0x114>
    81f4:	30046073          	csrsi	mstatus,8
    81f8:	0100006f          	j	8208 <__malloc_unlock+0x114>
      return;
    81fc:	00000013          	nop
    8200:	0080006f          	j	8208 <__malloc_unlock+0x114>
      return;
    8204:	00000013          	nop
  }
#endif /* OS_THREAD_SAFE_C_LIBRARY */
}
    8208:	01c12083          	lw	ra,28(sp)
    820c:	01812403          	lw	s0,24(sp)
    8210:	02010113          	addi	sp,sp,32
    8214:	00008067          	ret

00008218 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    8218:	fc010113          	addi	sp,sp,-64
    821c:	02112e23          	sw	ra,60(sp)
    8220:	02812c23          	sw	s0,56(sp)
    8224:	04010413          	addi	s0,sp,64
    8228:	fca42623          	sw	a0,-52(s0)
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
    822c:	fe042223          	sw	zero,-28(s0)
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
    8230:	85df90ef          	jal	ra,1a8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
    8234:	0003b7b7          	lui	a5,0x3b
    8238:	7587a783          	lw	a5,1880(a5) # 3b758 <pxEnd>
    823c:	00079463          	bnez	a5,8244 <pvPortMalloc+0x2c>
        {
            prvHeapInit();
    8240:	41c000ef          	jal	ra,865c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
    8244:	fcc42783          	lw	a5,-52(s0)
    8248:	04078263          	beqz	a5,828c <pvPortMalloc+0x74>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
    824c:	01000713          	li	a4,16
    8250:	fcc42783          	lw	a5,-52(s0)
    8254:	00f7f793          	andi	a5,a5,15
    8258:	40f707b3          	sub	a5,a4,a5
    825c:	01078793          	addi	a5,a5,16
    8260:	fef42423          	sw	a5,-24(s0)

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
    8264:	fe842783          	lw	a5,-24(s0)
    8268:	fff7c793          	not	a5,a5
    826c:	fcc42703          	lw	a4,-52(s0)
    8270:	00e7ec63          	bltu	a5,a4,8288 <pvPortMalloc+0x70>
            {
                xWantedSize += xAdditionalRequiredSize;
    8274:	fcc42703          	lw	a4,-52(s0)
    8278:	fe842783          	lw	a5,-24(s0)
    827c:	00f707b3          	add	a5,a4,a5
    8280:	fcf42623          	sw	a5,-52(s0)
    8284:	0080006f          	j	828c <pvPortMalloc+0x74>
            }
            else
            {
                xWantedSize = 0;
    8288:	fc042623          	sw	zero,-52(s0)

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
    828c:	fcc42783          	lw	a5,-52(s0)
    8290:	1807c463          	bltz	a5,8418 <pvPortMalloc+0x200>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    8294:	fcc42783          	lw	a5,-52(s0)
    8298:	18078063          	beqz	a5,8418 <pvPortMalloc+0x200>
    829c:	0003b7b7          	lui	a5,0x3b
    82a0:	75c7a783          	lw	a5,1884(a5) # 3b75c <xFreeBytesRemaining>
    82a4:	fcc42703          	lw	a4,-52(s0)
    82a8:	16e7e863          	bltu	a5,a4,8418 <pvPortMalloc+0x200>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
    82ac:	0003b7b7          	lui	a5,0x3b
    82b0:	75078793          	addi	a5,a5,1872 # 3b750 <xStart>
    82b4:	fef42023          	sw	a5,-32(s0)
                pxBlock = xStart.pxNextFreeBlock;
    82b8:	0003b7b7          	lui	a5,0x3b
    82bc:	75078793          	addi	a5,a5,1872 # 3b750 <xStart>
    82c0:	0007a783          	lw	a5,0(a5)
    82c4:	fcf42e23          	sw	a5,-36(s0)

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    82c8:	0180006f          	j	82e0 <pvPortMalloc+0xc8>
                {
                    pxPreviousBlock = pxBlock;
    82cc:	fdc42783          	lw	a5,-36(s0)
    82d0:	fef42023          	sw	a5,-32(s0)
                    pxBlock = pxBlock->pxNextFreeBlock;
    82d4:	fdc42783          	lw	a5,-36(s0)
    82d8:	0007a783          	lw	a5,0(a5)
    82dc:	fcf42e23          	sw	a5,-36(s0)
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    82e0:	fdc42783          	lw	a5,-36(s0)
    82e4:	0047a783          	lw	a5,4(a5)
    82e8:	fcc42703          	lw	a4,-52(s0)
    82ec:	00e7f863          	bgeu	a5,a4,82fc <pvPortMalloc+0xe4>
    82f0:	fdc42783          	lw	a5,-36(s0)
    82f4:	0007a783          	lw	a5,0(a5)
    82f8:	fc079ae3          	bnez	a5,82cc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
    82fc:	0003b7b7          	lui	a5,0x3b
    8300:	7587a783          	lw	a5,1880(a5) # 3b758 <pxEnd>
    8304:	fdc42703          	lw	a4,-36(s0)
    8308:	10f70863          	beq	a4,a5,8418 <pvPortMalloc+0x200>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    830c:	fe042783          	lw	a5,-32(s0)
    8310:	0007a703          	lw	a4,0(a5)
    8314:	01000793          	li	a5,16
    8318:	00f707b3          	add	a5,a4,a5
    831c:	fef42223          	sw	a5,-28(s0)

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    8320:	fdc42783          	lw	a5,-36(s0)
    8324:	0007a703          	lw	a4,0(a5)
    8328:	fe042783          	lw	a5,-32(s0)
    832c:	00e7a023          	sw	a4,0(a5)

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    8330:	fdc42783          	lw	a5,-36(s0)
    8334:	0047a703          	lw	a4,4(a5)
    8338:	fcc42783          	lw	a5,-52(s0)
    833c:	40f70733          	sub	a4,a4,a5
    8340:	01000793          	li	a5,16
    8344:	00179793          	slli	a5,a5,0x1
    8348:	04e7fe63          	bgeu	a5,a4,83a4 <pvPortMalloc+0x18c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    834c:	fdc42703          	lw	a4,-36(s0)
    8350:	fcc42783          	lw	a5,-52(s0)
    8354:	00f707b3          	add	a5,a4,a5
    8358:	fef42623          	sw	a5,-20(s0)
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    835c:	fec42783          	lw	a5,-20(s0)
    8360:	00f7f793          	andi	a5,a5,15
    8364:	00078a63          	beqz	a5,8378 <pvPortMalloc+0x160>
    8368:	30047073          	csrci	mstatus,8
    836c:	00100073          	ebreak
    8370:	00000013          	nop
    8374:	ffdff06f          	j	8370 <pvPortMalloc+0x158>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    8378:	fdc42783          	lw	a5,-36(s0)
    837c:	0047a703          	lw	a4,4(a5)
    8380:	fcc42783          	lw	a5,-52(s0)
    8384:	40f70733          	sub	a4,a4,a5
    8388:	fec42783          	lw	a5,-20(s0)
    838c:	00e7a223          	sw	a4,4(a5)
                        pxBlock->xBlockSize = xWantedSize;
    8390:	fdc42783          	lw	a5,-36(s0)
    8394:	fcc42703          	lw	a4,-52(s0)
    8398:	00e7a223          	sw	a4,4(a5)

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
    839c:	fec42503          	lw	a0,-20(s0)
    83a0:	3f0000ef          	jal	ra,8790 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
    83a4:	0003b7b7          	lui	a5,0x3b
    83a8:	75c7a703          	lw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>
    83ac:	fdc42783          	lw	a5,-36(s0)
    83b0:	0047a783          	lw	a5,4(a5)
    83b4:	40f70733          	sub	a4,a4,a5
    83b8:	0003b7b7          	lui	a5,0x3b
    83bc:	74e7ae23          	sw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    83c0:	0003b7b7          	lui	a5,0x3b
    83c4:	75c7a703          	lw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>
    83c8:	0003b7b7          	lui	a5,0x3b
    83cc:	7607a783          	lw	a5,1888(a5) # 3b760 <xMinimumEverFreeBytesRemaining>
    83d0:	00f77a63          	bgeu	a4,a5,83e4 <pvPortMalloc+0x1cc>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    83d4:	0003b7b7          	lui	a5,0x3b
    83d8:	75c7a703          	lw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>
    83dc:	0003b7b7          	lui	a5,0x3b
    83e0:	76e7a023          	sw	a4,1888(a5) # 3b760 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
    83e4:	fdc42783          	lw	a5,-36(s0)
    83e8:	0047a703          	lw	a4,4(a5)
    83ec:	800007b7          	lui	a5,0x80000
    83f0:	00f76733          	or	a4,a4,a5
    83f4:	fdc42783          	lw	a5,-36(s0)
    83f8:	00e7a223          	sw	a4,4(a5) # 80000004 <__alt_data_end+0x7ffc0004>
                    pxBlock->pxNextFreeBlock = NULL;
    83fc:	fdc42783          	lw	a5,-36(s0)
    8400:	0007a023          	sw	zero,0(a5)
                    xNumberOfSuccessfulAllocations++;
    8404:	0003b7b7          	lui	a5,0x3b
    8408:	7647a783          	lw	a5,1892(a5) # 3b764 <xNumberOfSuccessfulAllocations>
    840c:	00178713          	addi	a4,a5,1
    8410:	0003b7b7          	lui	a5,0x3b
    8414:	76e7a223          	sw	a4,1892(a5) # 3b764 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    8418:	ea4f90ef          	jal	ra,1abc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    841c:	fe442783          	lw	a5,-28(s0)
    8420:	00f7f793          	andi	a5,a5,15
    8424:	00078a63          	beqz	a5,8438 <pvPortMalloc+0x220>
    8428:	30047073          	csrci	mstatus,8
    842c:	00100073          	ebreak
    8430:	00000013          	nop
    8434:	ffdff06f          	j	8430 <pvPortMalloc+0x218>
    return pvReturn;
    8438:	fe442783          	lw	a5,-28(s0)
}
    843c:	00078513          	mv	a0,a5
    8440:	03c12083          	lw	ra,60(sp)
    8444:	03812403          	lw	s0,56(sp)
    8448:	04010113          	addi	sp,sp,64
    844c:	00008067          	ret

00008450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    8450:	fd010113          	addi	sp,sp,-48
    8454:	02112623          	sw	ra,44(sp)
    8458:	02812423          	sw	s0,40(sp)
    845c:	03010413          	addi	s0,sp,48
    8460:	fca42e23          	sw	a0,-36(s0)
    uint8_t * puc = ( uint8_t * ) pv;
    8464:	fdc42783          	lw	a5,-36(s0)
    8468:	fef42423          	sw	a5,-24(s0)
    BlockLink_t * pxLink;

    if( pv != NULL )
    846c:	fdc42783          	lw	a5,-36(s0)
    8470:	0c078c63          	beqz	a5,8548 <vPortFree+0xf8>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
    8474:	01000793          	li	a5,16
    8478:	40f007b3          	neg	a5,a5
    847c:	fe842703          	lw	a4,-24(s0)
    8480:	00f707b3          	add	a5,a4,a5
    8484:	fef42423          	sw	a5,-24(s0)

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
    8488:	fe842783          	lw	a5,-24(s0)
    848c:	fef42623          	sw	a5,-20(s0)

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
    8490:	fec42783          	lw	a5,-20(s0)
    8494:	0047a783          	lw	a5,4(a5)
    8498:	0007ca63          	bltz	a5,84ac <vPortFree+0x5c>
    849c:	30047073          	csrci	mstatus,8
    84a0:	00100073          	ebreak
    84a4:	00000013          	nop
    84a8:	ffdff06f          	j	84a4 <vPortFree+0x54>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
    84ac:	fec42783          	lw	a5,-20(s0)
    84b0:	0007a783          	lw	a5,0(a5)
    84b4:	00078a63          	beqz	a5,84c8 <vPortFree+0x78>
    84b8:	30047073          	csrci	mstatus,8
    84bc:	00100073          	ebreak
    84c0:	00000013          	nop
    84c4:	ffdff06f          	j	84c0 <vPortFree+0x70>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
    84c8:	fec42783          	lw	a5,-20(s0)
    84cc:	0047a783          	lw	a5,4(a5)
    84d0:	01f7d793          	srli	a5,a5,0x1f
    84d4:	0017f793          	andi	a5,a5,1
    84d8:	0ff7f793          	zext.b	a5,a5
    84dc:	06078663          	beqz	a5,8548 <vPortFree+0xf8>
        {
            if( pxLink->pxNextFreeBlock == NULL )
    84e0:	fec42783          	lw	a5,-20(s0)
    84e4:	0007a783          	lw	a5,0(a5)
    84e8:	06079063          	bnez	a5,8548 <vPortFree+0xf8>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
    84ec:	fec42783          	lw	a5,-20(s0)
    84f0:	0047a703          	lw	a4,4(a5)
    84f4:	800007b7          	lui	a5,0x80000
    84f8:	fff7c793          	not	a5,a5
    84fc:	00f77733          	and	a4,a4,a5
    8500:	fec42783          	lw	a5,-20(s0)
    8504:	00e7a223          	sw	a4,4(a5) # 80000004 <__alt_data_end+0x7ffc0004>
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
    8508:	d84f90ef          	jal	ra,1a8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
    850c:	fec42783          	lw	a5,-20(s0)
    8510:	0047a703          	lw	a4,4(a5)
    8514:	0003b7b7          	lui	a5,0x3b
    8518:	75c7a783          	lw	a5,1884(a5) # 3b75c <xFreeBytesRemaining>
    851c:	00f70733          	add	a4,a4,a5
    8520:	0003b7b7          	lui	a5,0x3b
    8524:	74e7ae23          	sw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    8528:	fec42503          	lw	a0,-20(s0)
    852c:	264000ef          	jal	ra,8790 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
    8530:	0003b7b7          	lui	a5,0x3b
    8534:	7687a783          	lw	a5,1896(a5) # 3b768 <xNumberOfSuccessfulFrees>
    8538:	00178713          	addi	a4,a5,1
    853c:	0003b7b7          	lui	a5,0x3b
    8540:	76e7a423          	sw	a4,1896(a5) # 3b768 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
    8544:	d78f90ef          	jal	ra,1abc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
    8548:	00000013          	nop
    854c:	02c12083          	lw	ra,44(sp)
    8550:	02812403          	lw	s0,40(sp)
    8554:	03010113          	addi	sp,sp,48
    8558:	00008067          	ret

0000855c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    855c:	ff010113          	addi	sp,sp,-16
    8560:	00812623          	sw	s0,12(sp)
    8564:	01010413          	addi	s0,sp,16
    return xFreeBytesRemaining;
    8568:	0003b7b7          	lui	a5,0x3b
    856c:	75c7a783          	lw	a5,1884(a5) # 3b75c <xFreeBytesRemaining>
}
    8570:	00078513          	mv	a0,a5
    8574:	00c12403          	lw	s0,12(sp)
    8578:	01010113          	addi	sp,sp,16
    857c:	00008067          	ret

00008580 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
    8580:	ff010113          	addi	sp,sp,-16
    8584:	00812623          	sw	s0,12(sp)
    8588:	01010413          	addi	s0,sp,16
    return xMinimumEverFreeBytesRemaining;
    858c:	0003b7b7          	lui	a5,0x3b
    8590:	7607a783          	lw	a5,1888(a5) # 3b760 <xMinimumEverFreeBytesRemaining>
}
    8594:	00078513          	mv	a0,a5
    8598:	00c12403          	lw	s0,12(sp)
    859c:	01010113          	addi	sp,sp,16
    85a0:	00008067          	ret

000085a4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    85a4:	ff010113          	addi	sp,sp,-16
    85a8:	00812623          	sw	s0,12(sp)
    85ac:	01010413          	addi	s0,sp,16
    /* This just exists to keep the linker quiet. */
}
    85b0:	00000013          	nop
    85b4:	00c12403          	lw	s0,12(sp)
    85b8:	01010113          	addi	sp,sp,16
    85bc:	00008067          	ret

000085c0 <pvPortCalloc>:
/*-----------------------------------------------------------*/

void * pvPortCalloc( size_t xNum,
                     size_t xSize )
{
    85c0:	fd010113          	addi	sp,sp,-48
    85c4:	02112623          	sw	ra,44(sp)
    85c8:	02812423          	sw	s0,40(sp)
    85cc:	03010413          	addi	s0,sp,48
    85d0:	fca42e23          	sw	a0,-36(s0)
    85d4:	fcb42c23          	sw	a1,-40(s0)
    void * pv = NULL;
    85d8:	fe042623          	sw	zero,-20(s0)

    if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
    85dc:	fdc42783          	lw	a5,-36(s0)
    85e0:	02078063          	beqz	a5,8600 <pvPortCalloc+0x40>
    85e4:	fff00713          	li	a4,-1
    85e8:	fdc42783          	lw	a5,-36(s0)
    85ec:	02f757b3          	divu	a5,a4,a5
    85f0:	fd842703          	lw	a4,-40(s0)
    85f4:	00e7f663          	bgeu	a5,a4,8600 <pvPortCalloc+0x40>
    85f8:	00100793          	li	a5,1
    85fc:	0080006f          	j	8604 <pvPortCalloc+0x44>
    8600:	00000793          	li	a5,0
    8604:	04079063          	bnez	a5,8644 <pvPortCalloc+0x84>
    {
        pv = pvPortMalloc( xNum * xSize );
    8608:	fdc42703          	lw	a4,-36(s0)
    860c:	fd842783          	lw	a5,-40(s0)
    8610:	02f707b3          	mul	a5,a4,a5
    8614:	00078513          	mv	a0,a5
    8618:	c01ff0ef          	jal	ra,8218 <pvPortMalloc>
    861c:	fea42623          	sw	a0,-20(s0)

        if( pv != NULL )
    8620:	fec42783          	lw	a5,-20(s0)
    8624:	02078063          	beqz	a5,8644 <pvPortCalloc+0x84>
        {
            ( void ) memset( pv, 0, xNum * xSize );
    8628:	fdc42703          	lw	a4,-36(s0)
    862c:	fd842783          	lw	a5,-40(s0)
    8630:	02f707b3          	mul	a5,a4,a5
    8634:	00078613          	mv	a2,a5
    8638:	00000593          	li	a1,0
    863c:	fec42503          	lw	a0,-20(s0)
    8640:	200050ef          	jal	ra,d840 <memset>
        }
    }

    return pv;
    8644:	fec42783          	lw	a5,-20(s0)
}
    8648:	00078513          	mv	a0,a5
    864c:	02c12083          	lw	ra,44(sp)
    8650:	02812403          	lw	s0,40(sp)
    8654:	03010113          	addi	sp,sp,48
    8658:	00008067          	ret

0000865c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
    865c:	fe010113          	addi	sp,sp,-32
    8660:	00812e23          	sw	s0,28(sp)
    8664:	02010413          	addi	s0,sp,32
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    8668:	000147b7          	lui	a5,0x14
    866c:	88078793          	addi	a5,a5,-1920 # 13880 <emul+0x17c>
    8670:	fef42223          	sw	a5,-28(s0)

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
    8674:	000287b7          	lui	a5,0x28
    8678:	ed078793          	addi	a5,a5,-304 # 27ed0 <ucHeap>
    867c:	fef42023          	sw	a5,-32(s0)

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    8680:	fe042783          	lw	a5,-32(s0)
    8684:	00f7f793          	andi	a5,a5,15
    8688:	02078c63          	beqz	a5,86c0 <prvHeapInit+0x64>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
    868c:	fe042783          	lw	a5,-32(s0)
    8690:	00f78793          	addi	a5,a5,15
    8694:	fef42023          	sw	a5,-32(s0)
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    8698:	fe042783          	lw	a5,-32(s0)
    869c:	ff07f793          	andi	a5,a5,-16
    86a0:	fef42023          	sw	a5,-32(s0)
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
    86a4:	fe442703          	lw	a4,-28(s0)
    86a8:	fe042783          	lw	a5,-32(s0)
    86ac:	40f70733          	sub	a4,a4,a5
    86b0:	000287b7          	lui	a5,0x28
    86b4:	ed078793          	addi	a5,a5,-304 # 27ed0 <ucHeap>
    86b8:	00f707b3          	add	a5,a4,a5
    86bc:	fef42223          	sw	a5,-28(s0)
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
    86c0:	fe042783          	lw	a5,-32(s0)
    86c4:	fef42423          	sw	a5,-24(s0)

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    86c8:	0003b7b7          	lui	a5,0x3b
    86cc:	75078793          	addi	a5,a5,1872 # 3b750 <xStart>
    86d0:	fe842703          	lw	a4,-24(s0)
    86d4:	00e7a023          	sw	a4,0(a5)
    xStart.xBlockSize = ( size_t ) 0;
    86d8:	0003b7b7          	lui	a5,0x3b
    86dc:	75078793          	addi	a5,a5,1872 # 3b750 <xStart>
    86e0:	0007a223          	sw	zero,4(a5)

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
    86e4:	fe842783          	lw	a5,-24(s0)
    86e8:	fe442703          	lw	a4,-28(s0)
    86ec:	00f707b3          	add	a5,a4,a5
    86f0:	fef42023          	sw	a5,-32(s0)
    uxAddress -= xHeapStructSize;
    86f4:	01000793          	li	a5,16
    86f8:	fe042703          	lw	a4,-32(s0)
    86fc:	40f707b3          	sub	a5,a4,a5
    8700:	fef42023          	sw	a5,-32(s0)
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    8704:	fe042783          	lw	a5,-32(s0)
    8708:	ff07f793          	andi	a5,a5,-16
    870c:	fef42023          	sw	a5,-32(s0)
    pxEnd = ( BlockLink_t * ) uxAddress;
    8710:	fe042703          	lw	a4,-32(s0)
    8714:	0003b7b7          	lui	a5,0x3b
    8718:	74e7ac23          	sw	a4,1880(a5) # 3b758 <pxEnd>
    pxEnd->xBlockSize = 0;
    871c:	0003b7b7          	lui	a5,0x3b
    8720:	7587a783          	lw	a5,1880(a5) # 3b758 <pxEnd>
    8724:	0007a223          	sw	zero,4(a5)
    pxEnd->pxNextFreeBlock = NULL;
    8728:	0003b7b7          	lui	a5,0x3b
    872c:	7587a783          	lw	a5,1880(a5) # 3b758 <pxEnd>
    8730:	0007a023          	sw	zero,0(a5)

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    8734:	fe842783          	lw	a5,-24(s0)
    8738:	fef42623          	sw	a5,-20(s0)
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
    873c:	fec42783          	lw	a5,-20(s0)
    8740:	fe042703          	lw	a4,-32(s0)
    8744:	40f70733          	sub	a4,a4,a5
    8748:	fec42783          	lw	a5,-20(s0)
    874c:	00e7a223          	sw	a4,4(a5)
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    8750:	0003b7b7          	lui	a5,0x3b
    8754:	7587a703          	lw	a4,1880(a5) # 3b758 <pxEnd>
    8758:	fec42783          	lw	a5,-20(s0)
    875c:	00e7a023          	sw	a4,0(a5)

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    8760:	fec42783          	lw	a5,-20(s0)
    8764:	0047a703          	lw	a4,4(a5)
    8768:	0003b7b7          	lui	a5,0x3b
    876c:	76e7a023          	sw	a4,1888(a5) # 3b760 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    8770:	fec42783          	lw	a5,-20(s0)
    8774:	0047a703          	lw	a4,4(a5)
    8778:	0003b7b7          	lui	a5,0x3b
    877c:	74e7ae23          	sw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>
}
    8780:	00000013          	nop
    8784:	01c12403          	lw	s0,28(sp)
    8788:	02010113          	addi	sp,sp,32
    878c:	00008067          	ret

00008790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
    8790:	fd010113          	addi	sp,sp,-48
    8794:	02812623          	sw	s0,44(sp)
    8798:	03010413          	addi	s0,sp,48
    879c:	fca42e23          	sw	a0,-36(s0)
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    87a0:	0003b7b7          	lui	a5,0x3b
    87a4:	75078793          	addi	a5,a5,1872 # 3b750 <xStart>
    87a8:	fef42423          	sw	a5,-24(s0)
    87ac:	0100006f          	j	87bc <prvInsertBlockIntoFreeList+0x2c>
    87b0:	fe842783          	lw	a5,-24(s0)
    87b4:	0007a783          	lw	a5,0(a5)
    87b8:	fef42423          	sw	a5,-24(s0)
    87bc:	fe842783          	lw	a5,-24(s0)
    87c0:	0007a783          	lw	a5,0(a5)
    87c4:	fdc42703          	lw	a4,-36(s0)
    87c8:	fee7e4e3          	bltu	a5,a4,87b0 <prvInsertBlockIntoFreeList+0x20>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
    87cc:	fe842783          	lw	a5,-24(s0)
    87d0:	fef42623          	sw	a5,-20(s0)

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    87d4:	fe842783          	lw	a5,-24(s0)
    87d8:	0047a783          	lw	a5,4(a5)
    87dc:	fec42703          	lw	a4,-20(s0)
    87e0:	00f707b3          	add	a5,a4,a5
    87e4:	fdc42703          	lw	a4,-36(s0)
    87e8:	02f71463          	bne	a4,a5,8810 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    87ec:	fe842783          	lw	a5,-24(s0)
    87f0:	0047a703          	lw	a4,4(a5)
    87f4:	fdc42783          	lw	a5,-36(s0)
    87f8:	0047a783          	lw	a5,4(a5)
    87fc:	00f70733          	add	a4,a4,a5
    8800:	fe842783          	lw	a5,-24(s0)
    8804:	00e7a223          	sw	a4,4(a5)
        pxBlockToInsert = pxIterator;
    8808:	fe842783          	lw	a5,-24(s0)
    880c:	fcf42e23          	sw	a5,-36(s0)
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
    8810:	fdc42783          	lw	a5,-36(s0)
    8814:	fef42623          	sw	a5,-20(s0)

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    8818:	fdc42783          	lw	a5,-36(s0)
    881c:	0047a783          	lw	a5,4(a5)
    8820:	fec42703          	lw	a4,-20(s0)
    8824:	00f70733          	add	a4,a4,a5
    8828:	fe842783          	lw	a5,-24(s0)
    882c:	0007a783          	lw	a5,0(a5)
    8830:	06f71263          	bne	a4,a5,8894 <prvInsertBlockIntoFreeList+0x104>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
    8834:	fe842783          	lw	a5,-24(s0)
    8838:	0007a703          	lw	a4,0(a5)
    883c:	0003b7b7          	lui	a5,0x3b
    8840:	7587a783          	lw	a5,1880(a5) # 3b758 <pxEnd>
    8844:	02f70e63          	beq	a4,a5,8880 <prvInsertBlockIntoFreeList+0xf0>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    8848:	fdc42783          	lw	a5,-36(s0)
    884c:	0047a703          	lw	a4,4(a5)
    8850:	fe842783          	lw	a5,-24(s0)
    8854:	0007a783          	lw	a5,0(a5)
    8858:	0047a783          	lw	a5,4(a5)
    885c:	00f70733          	add	a4,a4,a5
    8860:	fdc42783          	lw	a5,-36(s0)
    8864:	00e7a223          	sw	a4,4(a5)
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    8868:	fe842783          	lw	a5,-24(s0)
    886c:	0007a783          	lw	a5,0(a5)
    8870:	0007a703          	lw	a4,0(a5)
    8874:	fdc42783          	lw	a5,-36(s0)
    8878:	00e7a023          	sw	a4,0(a5)
    887c:	0280006f          	j	88a4 <prvInsertBlockIntoFreeList+0x114>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
    8880:	0003b7b7          	lui	a5,0x3b
    8884:	7587a703          	lw	a4,1880(a5) # 3b758 <pxEnd>
    8888:	fdc42783          	lw	a5,-36(s0)
    888c:	00e7a023          	sw	a4,0(a5)
    8890:	0140006f          	j	88a4 <prvInsertBlockIntoFreeList+0x114>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    8894:	fe842783          	lw	a5,-24(s0)
    8898:	0007a703          	lw	a4,0(a5)
    889c:	fdc42783          	lw	a5,-36(s0)
    88a0:	00e7a023          	sw	a4,0(a5)

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
    88a4:	fe842703          	lw	a4,-24(s0)
    88a8:	fdc42783          	lw	a5,-36(s0)
    88ac:	00f70863          	beq	a4,a5,88bc <prvInsertBlockIntoFreeList+0x12c>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
    88b0:	fe842783          	lw	a5,-24(s0)
    88b4:	fdc42703          	lw	a4,-36(s0)
    88b8:	00e7a023          	sw	a4,0(a5)
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
    88bc:	00000013          	nop
    88c0:	02c12403          	lw	s0,44(sp)
    88c4:	03010113          	addi	sp,sp,48
    88c8:	00008067          	ret

000088cc <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t * pxHeapStats )
{
    88cc:	fd010113          	addi	sp,sp,-48
    88d0:	02112623          	sw	ra,44(sp)
    88d4:	02812423          	sw	s0,40(sp)
    88d8:	03010413          	addi	s0,sp,48
    88dc:	fca42e23          	sw	a0,-36(s0)
    BlockLink_t * pxBlock;
    size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
    88e0:	fe042223          	sw	zero,-28(s0)
    88e4:	fe042423          	sw	zero,-24(s0)
    88e8:	fff00793          	li	a5,-1
    88ec:	fef42623          	sw	a5,-20(s0)

    vTaskSuspendAll();
    88f0:	99cf90ef          	jal	ra,1a8c <vTaskSuspendAll>
    {
        pxBlock = xStart.pxNextFreeBlock;
    88f4:	0003b7b7          	lui	a5,0x3b
    88f8:	75078793          	addi	a5,a5,1872 # 3b750 <xStart>
    88fc:	0007a783          	lw	a5,0(a5)
    8900:	fef42023          	sw	a5,-32(s0)

        /* pxBlock will be NULL if the heap has not been initialised.  The heap
         * is initialised automatically when the first allocation is made. */
        if( pxBlock != NULL )
    8904:	fe042783          	lw	a5,-32(s0)
    8908:	06078463          	beqz	a5,8970 <vPortGetHeapStats+0xa4>
        {
            while( pxBlock != pxEnd )
    890c:	0540006f          	j	8960 <vPortGetHeapStats+0x94>
            {
                /* Increment the number of blocks and record the largest block seen
                 * so far. */
                xBlocks++;
    8910:	fe442783          	lw	a5,-28(s0)
    8914:	00178793          	addi	a5,a5,1
    8918:	fef42223          	sw	a5,-28(s0)

                if( pxBlock->xBlockSize > xMaxSize )
    891c:	fe042783          	lw	a5,-32(s0)
    8920:	0047a783          	lw	a5,4(a5)
    8924:	fe842703          	lw	a4,-24(s0)
    8928:	00f77863          	bgeu	a4,a5,8938 <vPortGetHeapStats+0x6c>
                {
                    xMaxSize = pxBlock->xBlockSize;
    892c:	fe042783          	lw	a5,-32(s0)
    8930:	0047a783          	lw	a5,4(a5)
    8934:	fef42423          	sw	a5,-24(s0)
                }

                if( pxBlock->xBlockSize < xMinSize )
    8938:	fe042783          	lw	a5,-32(s0)
    893c:	0047a783          	lw	a5,4(a5)
    8940:	fec42703          	lw	a4,-20(s0)
    8944:	00e7f863          	bgeu	a5,a4,8954 <vPortGetHeapStats+0x88>
                {
                    xMinSize = pxBlock->xBlockSize;
    8948:	fe042783          	lw	a5,-32(s0)
    894c:	0047a783          	lw	a5,4(a5)
    8950:	fef42623          	sw	a5,-20(s0)
                }

                /* Move to the next block in the chain until the last block is
                 * reached. */
                pxBlock = pxBlock->pxNextFreeBlock;
    8954:	fe042783          	lw	a5,-32(s0)
    8958:	0007a783          	lw	a5,0(a5)
    895c:	fef42023          	sw	a5,-32(s0)
            while( pxBlock != pxEnd )
    8960:	0003b7b7          	lui	a5,0x3b
    8964:	7587a783          	lw	a5,1880(a5) # 3b758 <pxEnd>
    8968:	fe042703          	lw	a4,-32(s0)
    896c:	faf712e3          	bne	a4,a5,8910 <vPortGetHeapStats+0x44>
            }
        }
    }
    ( void ) xTaskResumeAll();
    8970:	94cf90ef          	jal	ra,1abc <xTaskResumeAll>

    pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
    8974:	fdc42783          	lw	a5,-36(s0)
    8978:	fe842703          	lw	a4,-24(s0)
    897c:	00e7a223          	sw	a4,4(a5)
    pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
    8980:	fdc42783          	lw	a5,-36(s0)
    8984:	fec42703          	lw	a4,-20(s0)
    8988:	00e7a423          	sw	a4,8(a5)
    pxHeapStats->xNumberOfFreeBlocks = xBlocks;
    898c:	fdc42783          	lw	a5,-36(s0)
    8990:	fe442703          	lw	a4,-28(s0)
    8994:	00e7a623          	sw	a4,12(a5)

    taskENTER_CRITICAL();
    8998:	30047073          	csrci	mstatus,8
    899c:	000267b7          	lui	a5,0x26
    89a0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    89a4:	00178713          	addi	a4,a5,1
    89a8:	000267b7          	lui	a5,0x26
    89ac:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
    89b0:	0003b7b7          	lui	a5,0x3b
    89b4:	75c7a703          	lw	a4,1884(a5) # 3b75c <xFreeBytesRemaining>
    89b8:	fdc42783          	lw	a5,-36(s0)
    89bc:	00e7a023          	sw	a4,0(a5)
        pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
    89c0:	0003b7b7          	lui	a5,0x3b
    89c4:	7647a703          	lw	a4,1892(a5) # 3b764 <xNumberOfSuccessfulAllocations>
    89c8:	fdc42783          	lw	a5,-36(s0)
    89cc:	00e7aa23          	sw	a4,20(a5)
        pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
    89d0:	0003b7b7          	lui	a5,0x3b
    89d4:	7687a703          	lw	a4,1896(a5) # 3b768 <xNumberOfSuccessfulFrees>
    89d8:	fdc42783          	lw	a5,-36(s0)
    89dc:	00e7ac23          	sw	a4,24(a5)
        pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
    89e0:	0003b7b7          	lui	a5,0x3b
    89e4:	7607a703          	lw	a4,1888(a5) # 3b760 <xMinimumEverFreeBytesRemaining>
    89e8:	fdc42783          	lw	a5,-36(s0)
    89ec:	00e7a823          	sw	a4,16(a5)
    }
    taskEXIT_CRITICAL();
    89f0:	000267b7          	lui	a5,0x26
    89f4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    89f8:	fff78713          	addi	a4,a5,-1
    89fc:	000267b7          	lui	a5,0x26
    8a00:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    8a04:	000267b7          	lui	a5,0x26
    8a08:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8a0c:	00079463          	bnez	a5,8a14 <vPortGetHeapStats+0x148>
    8a10:	30046073          	csrsi	mstatus,8
}
    8a14:	00000013          	nop
    8a18:	02c12083          	lw	ra,44(sp)
    8a1c:	02812403          	lw	s0,40(sp)
    8a20:	03010113          	addi	sp,sp,48
    8a24:	00008067          	ret

00008a28 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
    8a28:	fe010113          	addi	sp,sp,-32
    8a2c:	00112e23          	sw	ra,28(sp)
    8a30:	00812c23          	sw	s0,24(sp)
    8a34:	02010413          	addi	s0,sp,32
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
    8a38:	01c00513          	li	a0,28
    8a3c:	fdcff0ef          	jal	ra,8218 <pvPortMalloc>
    8a40:	fea42623          	sw	a0,-20(s0)

        if( pxEventBits != NULL )
    8a44:	fec42783          	lw	a5,-20(s0)
    8a48:	00078e63          	beqz	a5,8a64 <xEventGroupCreate+0x3c>
        {
            pxEventBits->uxEventBits = 0;
    8a4c:	fec42783          	lw	a5,-20(s0)
    8a50:	0007a023          	sw	zero,0(a5)
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    8a54:	fec42783          	lw	a5,-20(s0)
    8a58:	00478793          	addi	a5,a5,4
    8a5c:	00078513          	mv	a0,a5
    8a60:	221000ef          	jal	ra,9480 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
    8a64:	fec42783          	lw	a5,-20(s0)
    }
    8a68:	00078513          	mv	a0,a5
    8a6c:	01c12083          	lw	ra,28(sp)
    8a70:	01812403          	lw	s0,24(sp)
    8a74:	02010113          	addi	sp,sp,32
    8a78:	00008067          	ret

00008a7c <xEventGroupSync>:

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                             const EventBits_t uxBitsToSet,
                             const EventBits_t uxBitsToWaitFor,
                             TickType_t xTicksToWait )
{
    8a7c:	fc010113          	addi	sp,sp,-64
    8a80:	02112e23          	sw	ra,60(sp)
    8a84:	02812c23          	sw	s0,56(sp)
    8a88:	04010413          	addi	s0,sp,64
    8a8c:	fca42623          	sw	a0,-52(s0)
    8a90:	fcb42423          	sw	a1,-56(s0)
    8a94:	fcc42223          	sw	a2,-60(s0)
    8a98:	fcd42023          	sw	a3,-64(s0)
    EventBits_t uxOriginalBitValue, uxReturn;
    EventGroup_t * pxEventBits = xEventGroup;
    8a9c:	fcc42783          	lw	a5,-52(s0)
    8aa0:	fef42023          	sw	a5,-32(s0)
    BaseType_t xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
    8aa4:	fe042223          	sw	zero,-28(s0)

    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    8aa8:	fc442703          	lw	a4,-60(s0)
    8aac:	010007b7          	lui	a5,0x1000
    8ab0:	00f76a63          	bltu	a4,a5,8ac4 <xEventGroupSync+0x48>
    8ab4:	30047073          	csrci	mstatus,8
    8ab8:	00100073          	ebreak
    8abc:	00000013          	nop
    8ac0:	ffdff06f          	j	8abc <xEventGroupSync+0x40>
    configASSERT( uxBitsToWaitFor != 0 );
    8ac4:	fc442783          	lw	a5,-60(s0)
    8ac8:	00079a63          	bnez	a5,8adc <xEventGroupSync+0x60>
    8acc:	30047073          	csrci	mstatus,8
    8ad0:	00100073          	ebreak
    8ad4:	00000013          	nop
    8ad8:	ffdff06f          	j	8ad4 <xEventGroupSync+0x58>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8adc:	910fb0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    8ae0:	00050793          	mv	a5,a0
    8ae4:	00079663          	bnez	a5,8af0 <xEventGroupSync+0x74>
    8ae8:	fc042783          	lw	a5,-64(s0)
    8aec:	00079663          	bnez	a5,8af8 <xEventGroupSync+0x7c>
    8af0:	00100793          	li	a5,1
    8af4:	0080006f          	j	8afc <xEventGroupSync+0x80>
    8af8:	00000793          	li	a5,0
    8afc:	00079a63          	bnez	a5,8b10 <xEventGroupSync+0x94>
    8b00:	30047073          	csrci	mstatus,8
    8b04:	00100073          	ebreak
    8b08:	00000013          	nop
    8b0c:	ffdff06f          	j	8b08 <xEventGroupSync+0x8c>
    }
    #endif

    vTaskSuspendAll();
    8b10:	f7df80ef          	jal	ra,1a8c <vTaskSuspendAll>
    {
        uxOriginalBitValue = pxEventBits->uxEventBits;
    8b14:	fe042783          	lw	a5,-32(s0)
    8b18:	0007a783          	lw	a5,0(a5) # 1000000 <__alt_data_end+0xfc0000>
    8b1c:	fef42423          	sw	a5,-24(s0)

        ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    8b20:	fc842583          	lw	a1,-56(s0)
    8b24:	fcc42503          	lw	a0,-52(s0)
    8b28:	540000ef          	jal	ra,9068 <xEventGroupSetBits>

        if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    8b2c:	fe842703          	lw	a4,-24(s0)
    8b30:	fc842783          	lw	a5,-56(s0)
    8b34:	00f76733          	or	a4,a4,a5
    8b38:	fc442783          	lw	a5,-60(s0)
    8b3c:	00f777b3          	and	a5,a4,a5
    8b40:	fc442703          	lw	a4,-60(s0)
    8b44:	02f71c63          	bne	a4,a5,8b7c <xEventGroupSync+0x100>
        {
            /* All the rendezvous bits are now set - no need to block. */
            uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    8b48:	fe842703          	lw	a4,-24(s0)
    8b4c:	fc842783          	lw	a5,-56(s0)
    8b50:	00f767b3          	or	a5,a4,a5
    8b54:	fcf42e23          	sw	a5,-36(s0)

            /* Rendezvous always clear the bits.  They will have been cleared
             * already unless this is the only task in the rendezvous. */
            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    8b58:	fe042783          	lw	a5,-32(s0)
    8b5c:	0007a703          	lw	a4,0(a5)
    8b60:	fc442783          	lw	a5,-60(s0)
    8b64:	fff7c793          	not	a5,a5
    8b68:	00f77733          	and	a4,a4,a5
    8b6c:	fe042783          	lw	a5,-32(s0)
    8b70:	00e7a023          	sw	a4,0(a5)

            xTicksToWait = 0;
    8b74:	fc042023          	sw	zero,-64(s0)
    8b78:	04c0006f          	j	8bc4 <xEventGroupSync+0x148>
        }
        else
        {
            if( xTicksToWait != ( TickType_t ) 0 )
    8b7c:	fc042783          	lw	a5,-64(s0)
    8b80:	02078863          	beqz	a5,8bb0 <xEventGroupSync+0x134>
                traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    8b84:	fe042783          	lw	a5,-32(s0)
    8b88:	00478693          	addi	a3,a5,4
    8b8c:	fc442703          	lw	a4,-60(s0)
    8b90:	050007b7          	lui	a5,0x5000
    8b94:	00f767b3          	or	a5,a4,a5
    8b98:	fc042603          	lw	a2,-64(s0)
    8b9c:	00078593          	mv	a1,a5
    8ba0:	00068513          	mv	a0,a3
    8ba4:	858fa0ef          	jal	ra,2bfc <vTaskPlaceOnUnorderedEventList>

                /* This assignment is obsolete as uxReturn will get set after
                 * the task unblocks, but some compilers mistakenly generate a
                 * warning about uxReturn being returned without being set if the
                 * assignment is omitted. */
                uxReturn = 0;
    8ba8:	fc042e23          	sw	zero,-36(s0)
    8bac:	0180006f          	j	8bc4 <xEventGroupSync+0x148>
            }
            else
            {
                /* The rendezvous bits were not set, but no block time was
                 * specified - just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
    8bb0:	fe042783          	lw	a5,-32(s0)
    8bb4:	0007a783          	lw	a5,0(a5) # 5000000 <__alt_data_end+0x4fc0000>
    8bb8:	fcf42e23          	sw	a5,-36(s0)
                xTimeoutOccurred = pdTRUE;
    8bbc:	00100793          	li	a5,1
    8bc0:	fef42223          	sw	a5,-28(s0)
            }
        }
    }
    xAlreadyYielded = xTaskResumeAll();
    8bc4:	ef9f80ef          	jal	ra,1abc <xTaskResumeAll>
    8bc8:	fea42623          	sw	a0,-20(s0)

    if( xTicksToWait != ( TickType_t ) 0 )
    8bcc:	fc042783          	lw	a5,-64(s0)
    8bd0:	0a078e63          	beqz	a5,8c8c <xEventGroupSync+0x210>
    {
        if( xAlreadyYielded == pdFALSE )
    8bd4:	fec42783          	lw	a5,-20(s0)
    8bd8:	00079463          	bnez	a5,8be0 <xEventGroupSync+0x164>
        {
            portYIELD_WITHIN_API();
    8bdc:	00000073          	ecall

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
    8be0:	f4cfb0ef          	jal	ra,432c <uxTaskResetEventItemValue>
    8be4:	fca42e23          	sw	a0,-36(s0)

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    8be8:	fdc42703          	lw	a4,-36(s0)
    8bec:	020007b7          	lui	a5,0x2000
    8bf0:	00f777b3          	and	a5,a4,a5
    8bf4:	08079263          	bnez	a5,8c78 <xEventGroupSync+0x1fc>
        {
            /* The task timed out, just return the current event bit value. */
            taskENTER_CRITICAL();
    8bf8:	30047073          	csrci	mstatus,8
    8bfc:	000267b7          	lui	a5,0x26
    8c00:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8c04:	00178713          	addi	a4,a5,1
    8c08:	000267b7          	lui	a5,0x26
    8c0c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                uxReturn = pxEventBits->uxEventBits;
    8c10:	fe042783          	lw	a5,-32(s0)
    8c14:	0007a783          	lw	a5,0(a5)
    8c18:	fcf42e23          	sw	a5,-36(s0)

                /* Although the task got here because it timed out before the
                 * bits it was waiting for were set, it is possible that since it
                 * unblocked another task has set the bits.  If this is the case
                 * then it needs to clear the bits before exiting. */
                if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    8c1c:	fdc42703          	lw	a4,-36(s0)
    8c20:	fc442783          	lw	a5,-60(s0)
    8c24:	00f777b3          	and	a5,a4,a5
    8c28:	fc442703          	lw	a4,-60(s0)
    8c2c:	02f71063          	bne	a4,a5,8c4c <xEventGroupSync+0x1d0>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    8c30:	fe042783          	lw	a5,-32(s0)
    8c34:	0007a703          	lw	a4,0(a5)
    8c38:	fc442783          	lw	a5,-60(s0)
    8c3c:	fff7c793          	not	a5,a5
    8c40:	00f77733          	and	a4,a4,a5
    8c44:	fe042783          	lw	a5,-32(s0)
    8c48:	00e7a023          	sw	a4,0(a5)
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
    8c4c:	000267b7          	lui	a5,0x26
    8c50:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8c54:	fff78713          	addi	a4,a5,-1
    8c58:	000267b7          	lui	a5,0x26
    8c5c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    8c60:	000267b7          	lui	a5,0x26
    8c64:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8c68:	00079463          	bnez	a5,8c70 <xEventGroupSync+0x1f4>
    8c6c:	30046073          	csrsi	mstatus,8

            xTimeoutOccurred = pdTRUE;
    8c70:	00100793          	li	a5,1
    8c74:	fef42223          	sw	a5,-28(s0)
            /* The task unblocked because the bits were set. */
        }

        /* Control bits might be set as the task had blocked should not be
         * returned. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    8c78:	fdc42703          	lw	a4,-36(s0)
    8c7c:	010007b7          	lui	a5,0x1000
    8c80:	fff78793          	addi	a5,a5,-1 # ffffff <__alt_data_end+0xfbffff>
    8c84:	00f777b3          	and	a5,a4,a5
    8c88:	fcf42e23          	sw	a5,-36(s0)
    traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
    8c8c:	fdc42783          	lw	a5,-36(s0)
}
    8c90:	00078513          	mv	a0,a5
    8c94:	03c12083          	lw	ra,60(sp)
    8c98:	03812403          	lw	s0,56(sp)
    8c9c:	04010113          	addi	sp,sp,64
    8ca0:	00008067          	ret

00008ca4 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
    8ca4:	fb010113          	addi	sp,sp,-80
    8ca8:	04112623          	sw	ra,76(sp)
    8cac:	04812423          	sw	s0,72(sp)
    8cb0:	05010413          	addi	s0,sp,80
    8cb4:	fca42623          	sw	a0,-52(s0)
    8cb8:	fcb42423          	sw	a1,-56(s0)
    8cbc:	fcc42223          	sw	a2,-60(s0)
    8cc0:	fcd42023          	sw	a3,-64(s0)
    8cc4:	fae42e23          	sw	a4,-68(s0)
    EventGroup_t * pxEventBits = xEventGroup;
    8cc8:	fcc42783          	lw	a5,-52(s0)
    8ccc:	fcf42e23          	sw	a5,-36(s0)
    EventBits_t uxReturn, uxControlBits = 0;
    8cd0:	fc042c23          	sw	zero,-40(s0)
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
    8cd4:	fe042023          	sw	zero,-32(s0)

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
    8cd8:	fcc42783          	lw	a5,-52(s0)
    8cdc:	00079a63          	bnez	a5,8cf0 <xEventGroupWaitBits+0x4c>
    8ce0:	30047073          	csrci	mstatus,8
    8ce4:	00100073          	ebreak
    8ce8:	00000013          	nop
    8cec:	ffdff06f          	j	8ce8 <xEventGroupWaitBits+0x44>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    8cf0:	fc842703          	lw	a4,-56(s0)
    8cf4:	010007b7          	lui	a5,0x1000
    8cf8:	00f76a63          	bltu	a4,a5,8d0c <xEventGroupWaitBits+0x68>
    8cfc:	30047073          	csrci	mstatus,8
    8d00:	00100073          	ebreak
    8d04:	00000013          	nop
    8d08:	ffdff06f          	j	8d04 <xEventGroupWaitBits+0x60>
    configASSERT( uxBitsToWaitFor != 0 );
    8d0c:	fc842783          	lw	a5,-56(s0)
    8d10:	00079a63          	bnez	a5,8d24 <xEventGroupWaitBits+0x80>
    8d14:	30047073          	csrci	mstatus,8
    8d18:	00100073          	ebreak
    8d1c:	00000013          	nop
    8d20:	ffdff06f          	j	8d1c <xEventGroupWaitBits+0x78>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8d24:	ec9fa0ef          	jal	ra,3bec <xTaskGetSchedulerState>
    8d28:	00050793          	mv	a5,a0
    8d2c:	00079663          	bnez	a5,8d38 <xEventGroupWaitBits+0x94>
    8d30:	fbc42783          	lw	a5,-68(s0)
    8d34:	00079663          	bnez	a5,8d40 <xEventGroupWaitBits+0x9c>
    8d38:	00100793          	li	a5,1
    8d3c:	0080006f          	j	8d44 <xEventGroupWaitBits+0xa0>
    8d40:	00000793          	li	a5,0
    8d44:	00079a63          	bnez	a5,8d58 <xEventGroupWaitBits+0xb4>
    8d48:	30047073          	csrci	mstatus,8
    8d4c:	00100073          	ebreak
    8d50:	00000013          	nop
    8d54:	ffdff06f          	j	8d50 <xEventGroupWaitBits+0xac>
    }
    #endif

    vTaskSuspendAll();
    8d58:	d35f80ef          	jal	ra,1a8c <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    8d5c:	fdc42783          	lw	a5,-36(s0)
    8d60:	0007a783          	lw	a5,0(a5) # 1000000 <__alt_data_end+0xfc0000>
    8d64:	fef42223          	sw	a5,-28(s0)

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    8d68:	fc042603          	lw	a2,-64(s0)
    8d6c:	fc842583          	lw	a1,-56(s0)
    8d70:	fe442503          	lw	a0,-28(s0)
    8d74:	5d4000ef          	jal	ra,9348 <prvTestWaitCondition>
    8d78:	fea42423          	sw	a0,-24(s0)

        if( xWaitConditionMet != pdFALSE )
    8d7c:	fe842783          	lw	a5,-24(s0)
    8d80:	02078c63          	beqz	a5,8db8 <xEventGroupWaitBits+0x114>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
    8d84:	fe442783          	lw	a5,-28(s0)
    8d88:	fcf42a23          	sw	a5,-44(s0)
            xTicksToWait = ( TickType_t ) 0;
    8d8c:	fa042e23          	sw	zero,-68(s0)

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
    8d90:	fc442783          	lw	a5,-60(s0)
    8d94:	08078c63          	beqz	a5,8e2c <xEventGroupWaitBits+0x188>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    8d98:	fdc42783          	lw	a5,-36(s0)
    8d9c:	0007a703          	lw	a4,0(a5)
    8da0:	fc842783          	lw	a5,-56(s0)
    8da4:	fff7c793          	not	a5,a5
    8da8:	00f77733          	and	a4,a4,a5
    8dac:	fdc42783          	lw	a5,-36(s0)
    8db0:	00e7a023          	sw	a4,0(a5)
    8db4:	0780006f          	j	8e2c <xEventGroupWaitBits+0x188>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
    8db8:	fbc42783          	lw	a5,-68(s0)
    8dbc:	00079c63          	bnez	a5,8dd4 <xEventGroupWaitBits+0x130>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
    8dc0:	fe442783          	lw	a5,-28(s0)
    8dc4:	fcf42a23          	sw	a5,-44(s0)
            xTimeoutOccurred = pdTRUE;
    8dc8:	00100793          	li	a5,1
    8dcc:	fef42023          	sw	a5,-32(s0)
    8dd0:	05c0006f          	j	8e2c <xEventGroupWaitBits+0x188>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
    8dd4:	fc442783          	lw	a5,-60(s0)
    8dd8:	00078a63          	beqz	a5,8dec <xEventGroupWaitBits+0x148>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    8ddc:	fd842703          	lw	a4,-40(s0)
    8de0:	010007b7          	lui	a5,0x1000
    8de4:	00f767b3          	or	a5,a4,a5
    8de8:	fcf42c23          	sw	a5,-40(s0)
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
    8dec:	fc042783          	lw	a5,-64(s0)
    8df0:	00078a63          	beqz	a5,8e04 <xEventGroupWaitBits+0x160>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
    8df4:	fd842703          	lw	a4,-40(s0)
    8df8:	040007b7          	lui	a5,0x4000
    8dfc:	00f767b3          	or	a5,a4,a5
    8e00:	fcf42c23          	sw	a5,-40(s0)
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    8e04:	fdc42783          	lw	a5,-36(s0)
    8e08:	00478693          	addi	a3,a5,4 # 4000004 <__alt_data_end+0x3fc0004>
    8e0c:	fc842703          	lw	a4,-56(s0)
    8e10:	fd842783          	lw	a5,-40(s0)
    8e14:	00f767b3          	or	a5,a4,a5
    8e18:	fbc42603          	lw	a2,-68(s0)
    8e1c:	00078593          	mv	a1,a5
    8e20:	00068513          	mv	a0,a3
    8e24:	dd9f90ef          	jal	ra,2bfc <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
    8e28:	fc042a23          	sw	zero,-44(s0)

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
    8e2c:	c91f80ef          	jal	ra,1abc <xTaskResumeAll>
    8e30:	fea42623          	sw	a0,-20(s0)

    if( xTicksToWait != ( TickType_t ) 0 )
    8e34:	fbc42783          	lw	a5,-68(s0)
    8e38:	0c078463          	beqz	a5,8f00 <xEventGroupWaitBits+0x25c>
    {
        if( xAlreadyYielded == pdFALSE )
    8e3c:	fec42783          	lw	a5,-20(s0)
    8e40:	00079463          	bnez	a5,8e48 <xEventGroupWaitBits+0x1a4>
        {
            portYIELD_WITHIN_API();
    8e44:	00000073          	ecall

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
    8e48:	ce4fb0ef          	jal	ra,432c <uxTaskResetEventItemValue>
    8e4c:	fca42a23          	sw	a0,-44(s0)

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    8e50:	fd442703          	lw	a4,-44(s0)
    8e54:	020007b7          	lui	a5,0x2000
    8e58:	00f777b3          	and	a5,a4,a5
    8e5c:	08079863          	bnez	a5,8eec <xEventGroupWaitBits+0x248>
        {
            taskENTER_CRITICAL();
    8e60:	30047073          	csrci	mstatus,8
    8e64:	000267b7          	lui	a5,0x26
    8e68:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8e6c:	00178713          	addi	a4,a5,1
    8e70:	000267b7          	lui	a5,0x26
    8e74:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
    8e78:	fdc42783          	lw	a5,-36(s0)
    8e7c:	0007a783          	lw	a5,0(a5)
    8e80:	fcf42a23          	sw	a5,-44(s0)

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    8e84:	fc042603          	lw	a2,-64(s0)
    8e88:	fc842583          	lw	a1,-56(s0)
    8e8c:	fd442503          	lw	a0,-44(s0)
    8e90:	4b8000ef          	jal	ra,9348 <prvTestWaitCondition>
    8e94:	00050793          	mv	a5,a0
    8e98:	02078463          	beqz	a5,8ec0 <xEventGroupWaitBits+0x21c>
                {
                    if( xClearOnExit != pdFALSE )
    8e9c:	fc442783          	lw	a5,-60(s0)
    8ea0:	02078063          	beqz	a5,8ec0 <xEventGroupWaitBits+0x21c>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    8ea4:	fdc42783          	lw	a5,-36(s0)
    8ea8:	0007a703          	lw	a4,0(a5)
    8eac:	fc842783          	lw	a5,-56(s0)
    8eb0:	fff7c793          	not	a5,a5
    8eb4:	00f77733          	and	a4,a4,a5
    8eb8:	fdc42783          	lw	a5,-36(s0)
    8ebc:	00e7a023          	sw	a4,0(a5)
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
    8ec0:	00100793          	li	a5,1
    8ec4:	fef42023          	sw	a5,-32(s0)
            }
            taskEXIT_CRITICAL();
    8ec8:	000267b7          	lui	a5,0x26
    8ecc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8ed0:	fff78713          	addi	a4,a5,-1
    8ed4:	000267b7          	lui	a5,0x26
    8ed8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    8edc:	000267b7          	lui	a5,0x26
    8ee0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8ee4:	00079463          	bnez	a5,8eec <xEventGroupWaitBits+0x248>
    8ee8:	30046073          	csrsi	mstatus,8
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    8eec:	fd442703          	lw	a4,-44(s0)
    8ef0:	010007b7          	lui	a5,0x1000
    8ef4:	fff78793          	addi	a5,a5,-1 # ffffff <__alt_data_end+0xfbffff>
    8ef8:	00f777b3          	and	a5,a4,a5
    8efc:	fcf42a23          	sw	a5,-44(s0)
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
    8f00:	fd442783          	lw	a5,-44(s0)
}
    8f04:	00078513          	mv	a0,a5
    8f08:	04c12083          	lw	ra,76(sp)
    8f0c:	04812403          	lw	s0,72(sp)
    8f10:	05010113          	addi	sp,sp,80
    8f14:	00008067          	ret

00008f18 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
    8f18:	fd010113          	addi	sp,sp,-48
    8f1c:	02812623          	sw	s0,44(sp)
    8f20:	03010413          	addi	s0,sp,48
    8f24:	fca42e23          	sw	a0,-36(s0)
    8f28:	fcb42c23          	sw	a1,-40(s0)
    EventGroup_t * pxEventBits = xEventGroup;
    8f2c:	fdc42783          	lw	a5,-36(s0)
    8f30:	fef42423          	sw	a5,-24(s0)
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    8f34:	fdc42783          	lw	a5,-36(s0)
    8f38:	00079a63          	bnez	a5,8f4c <xEventGroupClearBits+0x34>
    8f3c:	30047073          	csrci	mstatus,8
    8f40:	00100073          	ebreak
    8f44:	00000013          	nop
    8f48:	ffdff06f          	j	8f44 <xEventGroupClearBits+0x2c>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    8f4c:	fd842703          	lw	a4,-40(s0)
    8f50:	010007b7          	lui	a5,0x1000
    8f54:	00f76a63          	bltu	a4,a5,8f68 <xEventGroupClearBits+0x50>
    8f58:	30047073          	csrci	mstatus,8
    8f5c:	00100073          	ebreak
    8f60:	00000013          	nop
    8f64:	ffdff06f          	j	8f60 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
    8f68:	30047073          	csrci	mstatus,8
    8f6c:	000267b7          	lui	a5,0x26
    8f70:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8f74:	00178713          	addi	a4,a5,1
    8f78:	000267b7          	lui	a5,0x26
    8f7c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
    8f80:	fe842783          	lw	a5,-24(s0)
    8f84:	0007a783          	lw	a5,0(a5)
    8f88:	fef42623          	sw	a5,-20(s0)

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    8f8c:	fe842783          	lw	a5,-24(s0)
    8f90:	0007a703          	lw	a4,0(a5)
    8f94:	fd842783          	lw	a5,-40(s0)
    8f98:	fff7c793          	not	a5,a5
    8f9c:	00f77733          	and	a4,a4,a5
    8fa0:	fe842783          	lw	a5,-24(s0)
    8fa4:	00e7a023          	sw	a4,0(a5)
    }
    taskEXIT_CRITICAL();
    8fa8:	000267b7          	lui	a5,0x26
    8fac:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8fb0:	fff78713          	addi	a4,a5,-1
    8fb4:	000267b7          	lui	a5,0x26
    8fb8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    8fbc:	000267b7          	lui	a5,0x26
    8fc0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    8fc4:	00079463          	bnez	a5,8fcc <xEventGroupClearBits+0xb4>
    8fc8:	30046073          	csrsi	mstatus,8

    return uxReturn;
    8fcc:	fec42783          	lw	a5,-20(s0)
}
    8fd0:	00078513          	mv	a0,a5
    8fd4:	02c12403          	lw	s0,44(sp)
    8fd8:	03010113          	addi	sp,sp,48
    8fdc:	00008067          	ret

00008fe0 <xEventGroupClearBitsFromISR>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup,
                                            const EventBits_t uxBitsToClear )
    {
    8fe0:	fd010113          	addi	sp,sp,-48
    8fe4:	02112623          	sw	ra,44(sp)
    8fe8:	02812423          	sw	s0,40(sp)
    8fec:	03010413          	addi	s0,sp,48
    8ff0:	fca42e23          	sw	a0,-36(s0)
    8ff4:	fcb42c23          	sw	a1,-40(s0)
        BaseType_t xReturn;

        traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
    8ff8:	00000693          	li	a3,0
    8ffc:	fd842603          	lw	a2,-40(s0)
    9000:	fdc42583          	lw	a1,-36(s0)
    9004:	000097b7          	lui	a5,0x9
    9008:	31078513          	addi	a0,a5,784 # 9310 <vEventGroupClearBitsCallback>
    900c:	d94fd0ef          	jal	ra,65a0 <xTimerPendFunctionCallFromISR>
    9010:	fea42623          	sw	a0,-20(s0)

        return xReturn;
    9014:	fec42783          	lw	a5,-20(s0)
    }
    9018:	00078513          	mv	a0,a5
    901c:	02c12083          	lw	ra,44(sp)
    9020:	02812403          	lw	s0,40(sp)
    9024:	03010113          	addi	sp,sp,48
    9028:	00008067          	ret

0000902c <xEventGroupGetBitsFromISR>:

#endif /* if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) ) */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    902c:	fd010113          	addi	sp,sp,-48
    9030:	02812623          	sw	s0,44(sp)
    9034:	03010413          	addi	s0,sp,48
    9038:	fca42e23          	sw	a0,-36(s0)
    UBaseType_t uxSavedInterruptStatus;
    EventGroup_t const * const pxEventBits = xEventGroup;
    903c:	fdc42783          	lw	a5,-36(s0)
    9040:	fef42223          	sw	a5,-28(s0)
    EventBits_t uxReturn;

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    9044:	fe042423          	sw	zero,-24(s0)
    {
        uxReturn = pxEventBits->uxEventBits;
    9048:	fe442783          	lw	a5,-28(s0)
    904c:	0007a783          	lw	a5,0(a5)
    9050:	fef42623          	sw	a5,-20(s0)
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
    9054:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
    9058:	00078513          	mv	a0,a5
    905c:	02c12403          	lw	s0,44(sp)
    9060:	03010113          	addi	sp,sp,48
    9064:	00008067          	ret

00009068 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
    9068:	fb010113          	addi	sp,sp,-80
    906c:	04112623          	sw	ra,76(sp)
    9070:	04812423          	sw	s0,72(sp)
    9074:	05010413          	addi	s0,sp,80
    9078:	faa42e23          	sw	a0,-68(s0)
    907c:	fab42c23          	sw	a1,-72(s0)
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    9080:	fc042823          	sw	zero,-48(s0)
    EventGroup_t * pxEventBits = xEventGroup;
    9084:	fbc42783          	lw	a5,-68(s0)
    9088:	fcf42c23          	sw	a5,-40(s0)
    BaseType_t xMatchFound = pdFALSE;
    908c:	fc042a23          	sw	zero,-44(s0)

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
    9090:	fbc42783          	lw	a5,-68(s0)
    9094:	00079a63          	bnez	a5,90a8 <xEventGroupSetBits+0x40>
    9098:	30047073          	csrci	mstatus,8
    909c:	00100073          	ebreak
    90a0:	00000013          	nop
    90a4:	ffdff06f          	j	90a0 <xEventGroupSetBits+0x38>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    90a8:	fb842703          	lw	a4,-72(s0)
    90ac:	010007b7          	lui	a5,0x1000
    90b0:	00f76a63          	bltu	a4,a5,90c4 <xEventGroupSetBits+0x5c>
    90b4:	30047073          	csrci	mstatus,8
    90b8:	00100073          	ebreak
    90bc:	00000013          	nop
    90c0:	ffdff06f          	j	90bc <xEventGroupSetBits+0x54>

    pxList = &( pxEventBits->xTasksWaitingForBits );
    90c4:	fd842783          	lw	a5,-40(s0)
    90c8:	00478793          	addi	a5,a5,4 # 1000004 <__alt_data_end+0xfc0004>
    90cc:	fcf42e23          	sw	a5,-36(s0)
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    90d0:	fdc42783          	lw	a5,-36(s0)
    90d4:	00878793          	addi	a5,a5,8
    90d8:	fef42023          	sw	a5,-32(s0)
    vTaskSuspendAll();
    90dc:	9b1f80ef          	jal	ra,1a8c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
    90e0:	fdc42783          	lw	a5,-36(s0)
    90e4:	00c7a783          	lw	a5,12(a5)
    90e8:	fcf42623          	sw	a5,-52(s0)

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
    90ec:	fd842783          	lw	a5,-40(s0)
    90f0:	0007a703          	lw	a4,0(a5)
    90f4:	fb842783          	lw	a5,-72(s0)
    90f8:	00f76733          	or	a4,a4,a5
    90fc:	fd842783          	lw	a5,-40(s0)
    9100:	00e7a023          	sw	a4,0(a5)

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
    9104:	0e00006f          	j	91e4 <xEventGroupSetBits+0x17c>
        {
            pxNext = listGET_NEXT( pxListItem );
    9108:	fcc42783          	lw	a5,-52(s0)
    910c:	0047a783          	lw	a5,4(a5)
    9110:	fef42223          	sw	a5,-28(s0)
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    9114:	fcc42783          	lw	a5,-52(s0)
    9118:	0007a783          	lw	a5,0(a5)
    911c:	fef42423          	sw	a5,-24(s0)
            xMatchFound = pdFALSE;
    9120:	fc042a23          	sw	zero,-44(s0)

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    9124:	fe842703          	lw	a4,-24(s0)
    9128:	ff0007b7          	lui	a5,0xff000
    912c:	00f777b3          	and	a5,a4,a5
    9130:	fef42623          	sw	a5,-20(s0)
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    9134:	fe842703          	lw	a4,-24(s0)
    9138:	010007b7          	lui	a5,0x1000
    913c:	fff78793          	addi	a5,a5,-1 # ffffff <__alt_data_end+0xfbffff>
    9140:	00f777b3          	and	a5,a4,a5
    9144:	fef42423          	sw	a5,-24(s0)

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    9148:	fec42703          	lw	a4,-20(s0)
    914c:	040007b7          	lui	a5,0x4000
    9150:	00f777b3          	and	a5,a4,a5
    9154:	02079263          	bnez	a5,9178 <xEventGroupSetBits+0x110>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    9158:	fd842783          	lw	a5,-40(s0)
    915c:	0007a703          	lw	a4,0(a5) # 4000000 <__alt_data_end+0x3fc0000>
    9160:	fe842783          	lw	a5,-24(s0)
    9164:	00f777b3          	and	a5,a4,a5
    9168:	02078863          	beqz	a5,9198 <xEventGroupSetBits+0x130>
                {
                    xMatchFound = pdTRUE;
    916c:	00100793          	li	a5,1
    9170:	fcf42a23          	sw	a5,-44(s0)
    9174:	0240006f          	j	9198 <xEventGroupSetBits+0x130>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    9178:	fd842783          	lw	a5,-40(s0)
    917c:	0007a703          	lw	a4,0(a5)
    9180:	fe842783          	lw	a5,-24(s0)
    9184:	00f777b3          	and	a5,a4,a5
    9188:	fe842703          	lw	a4,-24(s0)
    918c:	00f71663          	bne	a4,a5,9198 <xEventGroupSetBits+0x130>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
    9190:	00100793          	li	a5,1
    9194:	fcf42a23          	sw	a5,-44(s0)
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
    9198:	fd442783          	lw	a5,-44(s0)
    919c:	04078063          	beqz	a5,91dc <xEventGroupSetBits+0x174>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    91a0:	fec42703          	lw	a4,-20(s0)
    91a4:	010007b7          	lui	a5,0x1000
    91a8:	00f777b3          	and	a5,a4,a5
    91ac:	00078a63          	beqz	a5,91c0 <xEventGroupSetBits+0x158>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
    91b0:	fd042703          	lw	a4,-48(s0)
    91b4:	fe842783          	lw	a5,-24(s0)
    91b8:	00f767b3          	or	a5,a4,a5
    91bc:	fcf42823          	sw	a5,-48(s0)
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    91c0:	fd842783          	lw	a5,-40(s0)
    91c4:	0007a703          	lw	a4,0(a5) # 1000000 <__alt_data_end+0xfc0000>
    91c8:	020007b7          	lui	a5,0x2000
    91cc:	00f767b3          	or	a5,a4,a5
    91d0:	00078593          	mv	a1,a5
    91d4:	fcc42503          	lw	a0,-52(s0)
    91d8:	f0df90ef          	jal	ra,30e4 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
    91dc:	fe442783          	lw	a5,-28(s0)
    91e0:	fcf42623          	sw	a5,-52(s0)
        while( pxListItem != pxListEnd )
    91e4:	fcc42703          	lw	a4,-52(s0)
    91e8:	fe042783          	lw	a5,-32(s0)
    91ec:	f0f71ee3          	bne	a4,a5,9108 <xEventGroupSetBits+0xa0>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
    91f0:	fd842783          	lw	a5,-40(s0)
    91f4:	0007a703          	lw	a4,0(a5) # 2000000 <__alt_data_end+0x1fc0000>
    91f8:	fd042783          	lw	a5,-48(s0)
    91fc:	fff7c793          	not	a5,a5
    9200:	00f77733          	and	a4,a4,a5
    9204:	fd842783          	lw	a5,-40(s0)
    9208:	00e7a023          	sw	a4,0(a5)
    }
    ( void ) xTaskResumeAll();
    920c:	8b1f80ef          	jal	ra,1abc <xTaskResumeAll>

    return pxEventBits->uxEventBits;
    9210:	fd842783          	lw	a5,-40(s0)
    9214:	0007a783          	lw	a5,0(a5)
}
    9218:	00078513          	mv	a0,a5
    921c:	04c12083          	lw	ra,76(sp)
    9220:	04812403          	lw	s0,72(sp)
    9224:	05010113          	addi	sp,sp,80
    9228:	00008067          	ret

0000922c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    922c:	fd010113          	addi	sp,sp,-48
    9230:	02112623          	sw	ra,44(sp)
    9234:	02812423          	sw	s0,40(sp)
    9238:	03010413          	addi	s0,sp,48
    923c:	fca42e23          	sw	a0,-36(s0)
    EventGroup_t * pxEventBits = xEventGroup;
    9240:	fdc42783          	lw	a5,-36(s0)
    9244:	fef42423          	sw	a5,-24(s0)
    const List_t * pxTasksWaitingForBits;

    configASSERT( pxEventBits );
    9248:	fe842783          	lw	a5,-24(s0)
    924c:	00079a63          	bnez	a5,9260 <vEventGroupDelete+0x34>
    9250:	30047073          	csrci	mstatus,8
    9254:	00100073          	ebreak
    9258:	00000013          	nop
    925c:	ffdff06f          	j	9258 <vEventGroupDelete+0x2c>

    pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    9260:	fe842783          	lw	a5,-24(s0)
    9264:	00478793          	addi	a5,a5,4
    9268:	fef42623          	sw	a5,-20(s0)

    vTaskSuspendAll();
    926c:	821f80ef          	jal	ra,1a8c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_DELETE( xEventGroup );

        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    9270:	03c0006f          	j	92ac <vEventGroupDelete+0x80>
        {
            /* Unblock the task, returning 0 as the event list is being deleted
             * and cannot therefore have any bits set. */
            configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
    9274:	fec42783          	lw	a5,-20(s0)
    9278:	00c7a703          	lw	a4,12(a5)
    927c:	fec42783          	lw	a5,-20(s0)
    9280:	00878793          	addi	a5,a5,8
    9284:	00f71a63          	bne	a4,a5,9298 <vEventGroupDelete+0x6c>
    9288:	30047073          	csrci	mstatus,8
    928c:	00100073          	ebreak
    9290:	00000013          	nop
    9294:	ffdff06f          	j	9290 <vEventGroupDelete+0x64>
            vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    9298:	fec42783          	lw	a5,-20(s0)
    929c:	00c7a783          	lw	a5,12(a5)
    92a0:	020005b7          	lui	a1,0x2000
    92a4:	00078513          	mv	a0,a5
    92a8:	e3df90ef          	jal	ra,30e4 <vTaskRemoveFromUnorderedEventList>
        while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    92ac:	fec42783          	lw	a5,-20(s0)
    92b0:	0007a783          	lw	a5,0(a5)
    92b4:	fc0790e3          	bnez	a5,9274 <vEventGroupDelete+0x48>
        }
    }
    ( void ) xTaskResumeAll();
    92b8:	805f80ef          	jal	ra,1abc <xTaskResumeAll>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The event group can only have been allocated dynamically - free
         * it again. */
        vPortFree( pxEventBits );
    92bc:	fe842503          	lw	a0,-24(s0)
    92c0:	990ff0ef          	jal	ra,8450 <vPortFree>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    92c4:	00000013          	nop
    92c8:	02c12083          	lw	ra,44(sp)
    92cc:	02812403          	lw	s0,40(sp)
    92d0:	03010113          	addi	sp,sp,48
    92d4:	00008067          	ret

000092d8 <vEventGroupSetBitsCallback>:

/* For internal use only - execute a 'set bits' command that was pended from
 * an interrupt. */
void vEventGroupSetBitsCallback( void * pvEventGroup,
                                 const uint32_t ulBitsToSet )
{
    92d8:	fe010113          	addi	sp,sp,-32
    92dc:	00112e23          	sw	ra,28(sp)
    92e0:	00812c23          	sw	s0,24(sp)
    92e4:	02010413          	addi	s0,sp,32
    92e8:	fea42623          	sw	a0,-20(s0)
    92ec:	feb42423          	sw	a1,-24(s0)
    ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    92f0:	fe842583          	lw	a1,-24(s0)
    92f4:	fec42503          	lw	a0,-20(s0)
    92f8:	d71ff0ef          	jal	ra,9068 <xEventGroupSetBits>
}
    92fc:	00000013          	nop
    9300:	01c12083          	lw	ra,28(sp)
    9304:	01812403          	lw	s0,24(sp)
    9308:	02010113          	addi	sp,sp,32
    930c:	00008067          	ret

00009310 <vEventGroupClearBitsCallback>:

/* For internal use only - execute a 'clear bits' command that was pended from
 * an interrupt. */
void vEventGroupClearBitsCallback( void * pvEventGroup,
                                   const uint32_t ulBitsToClear )
{
    9310:	fe010113          	addi	sp,sp,-32
    9314:	00112e23          	sw	ra,28(sp)
    9318:	00812c23          	sw	s0,24(sp)
    931c:	02010413          	addi	s0,sp,32
    9320:	fea42623          	sw	a0,-20(s0)
    9324:	feb42423          	sw	a1,-24(s0)
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
    9328:	fe842583          	lw	a1,-24(s0)
    932c:	fec42503          	lw	a0,-20(s0)
    9330:	be9ff0ef          	jal	ra,8f18 <xEventGroupClearBits>
}
    9334:	00000013          	nop
    9338:	01c12083          	lw	ra,28(sp)
    933c:	01812403          	lw	s0,24(sp)
    9340:	02010113          	addi	sp,sp,32
    9344:	00008067          	ret

00009348 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
    9348:	fd010113          	addi	sp,sp,-48
    934c:	02812623          	sw	s0,44(sp)
    9350:	03010413          	addi	s0,sp,48
    9354:	fca42e23          	sw	a0,-36(s0)
    9358:	fcb42c23          	sw	a1,-40(s0)
    935c:	fcc42a23          	sw	a2,-44(s0)
    BaseType_t xWaitConditionMet = pdFALSE;
    9360:	fe042623          	sw	zero,-20(s0)

    if( xWaitForAllBits == pdFALSE )
    9364:	fd442783          	lw	a5,-44(s0)
    9368:	02079063          	bnez	a5,9388 <prvTestWaitCondition+0x40>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    936c:	fdc42703          	lw	a4,-36(s0)
    9370:	fd842783          	lw	a5,-40(s0)
    9374:	00f777b3          	and	a5,a4,a5
    9378:	02078663          	beqz	a5,93a4 <prvTestWaitCondition+0x5c>
        {
            xWaitConditionMet = pdTRUE;
    937c:	00100793          	li	a5,1
    9380:	fef42623          	sw	a5,-20(s0)
    9384:	0200006f          	j	93a4 <prvTestWaitCondition+0x5c>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    9388:	fdc42703          	lw	a4,-36(s0)
    938c:	fd842783          	lw	a5,-40(s0)
    9390:	00f777b3          	and	a5,a4,a5
    9394:	fd842703          	lw	a4,-40(s0)
    9398:	00f71663          	bne	a4,a5,93a4 <prvTestWaitCondition+0x5c>
        {
            xWaitConditionMet = pdTRUE;
    939c:	00100793          	li	a5,1
    93a0:	fef42623          	sw	a5,-20(s0)
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
    93a4:	fec42783          	lw	a5,-20(s0)
}
    93a8:	00078513          	mv	a0,a5
    93ac:	02c12403          	lw	s0,44(sp)
    93b0:	03010113          	addi	sp,sp,48
    93b4:	00008067          	ret

000093b8 <xEventGroupSetBitsFromISR>:
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

    BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup,
                                          const EventBits_t uxBitsToSet,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
    93b8:	fd010113          	addi	sp,sp,-48
    93bc:	02112623          	sw	ra,44(sp)
    93c0:	02812423          	sw	s0,40(sp)
    93c4:	03010413          	addi	s0,sp,48
    93c8:	fca42e23          	sw	a0,-36(s0)
    93cc:	fcb42c23          	sw	a1,-40(s0)
    93d0:	fcc42a23          	sw	a2,-44(s0)
        BaseType_t xReturn;

        traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
        xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
    93d4:	fd442683          	lw	a3,-44(s0)
    93d8:	fd842603          	lw	a2,-40(s0)
    93dc:	fdc42583          	lw	a1,-36(s0)
    93e0:	000097b7          	lui	a5,0x9
    93e4:	2d878513          	addi	a0,a5,728 # 92d8 <vEventGroupSetBitsCallback>
    93e8:	9b8fd0ef          	jal	ra,65a0 <xTimerPendFunctionCallFromISR>
    93ec:	fea42623          	sw	a0,-20(s0)

        return xReturn;
    93f0:	fec42783          	lw	a5,-20(s0)
    }
    93f4:	00078513          	mv	a0,a5
    93f8:	02c12083          	lw	ra,44(sp)
    93fc:	02812403          	lw	s0,40(sp)
    9400:	03010113          	addi	sp,sp,48
    9404:	00008067          	ret

00009408 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxEventGroupGetNumber( void * xEventGroup )
    {
    9408:	fd010113          	addi	sp,sp,-48
    940c:	02812623          	sw	s0,44(sp)
    9410:	03010413          	addi	s0,sp,48
    9414:	fca42e23          	sw	a0,-36(s0)
        UBaseType_t xReturn;
        EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
    9418:	fdc42783          	lw	a5,-36(s0)
    941c:	fef42623          	sw	a5,-20(s0)

        if( xEventGroup == NULL )
    9420:	fdc42783          	lw	a5,-36(s0)
    9424:	00079663          	bnez	a5,9430 <uxEventGroupGetNumber+0x28>
        {
            xReturn = 0;
    9428:	fe042423          	sw	zero,-24(s0)
    942c:	0100006f          	j	943c <uxEventGroupGetNumber+0x34>
        }
        else
        {
            xReturn = pxEventBits->uxEventGroupNumber;
    9430:	fec42783          	lw	a5,-20(s0)
    9434:	0187a783          	lw	a5,24(a5)
    9438:	fef42423          	sw	a5,-24(s0)
        }

        return xReturn;
    943c:	fe842783          	lw	a5,-24(s0)
    }
    9440:	00078513          	mv	a0,a5
    9444:	02c12403          	lw	s0,44(sp)
    9448:	03010113          	addi	sp,sp,48
    944c:	00008067          	ret

00009450 <vEventGroupSetNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vEventGroupSetNumber( void * xEventGroup,
                               UBaseType_t uxEventGroupNumber )
    {
    9450:	fe010113          	addi	sp,sp,-32
    9454:	00812e23          	sw	s0,28(sp)
    9458:	02010413          	addi	s0,sp,32
    945c:	fea42623          	sw	a0,-20(s0)
    9460:	feb42423          	sw	a1,-24(s0)
        ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
    9464:	fec42783          	lw	a5,-20(s0)
    9468:	fe842703          	lw	a4,-24(s0)
    946c:	00e7ac23          	sw	a4,24(a5)
    }
    9470:	00000013          	nop
    9474:	01c12403          	lw	s0,28(sp)
    9478:	02010113          	addi	sp,sp,32
    947c:	00008067          	ret

00009480 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    9480:	fe010113          	addi	sp,sp,-32
    9484:	00812e23          	sw	s0,28(sp)
    9488:	02010413          	addi	s0,sp,32
    948c:	fea42623          	sw	a0,-20(s0)
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    9490:	fec42783          	lw	a5,-20(s0)
    9494:	00878713          	addi	a4,a5,8
    9498:	fec42783          	lw	a5,-20(s0)
    949c:	00e7a223          	sw	a4,4(a5)

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    94a0:	fec42783          	lw	a5,-20(s0)
    94a4:	fff00713          	li	a4,-1
    94a8:	00e7a423          	sw	a4,8(a5)

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    94ac:	fec42783          	lw	a5,-20(s0)
    94b0:	00878713          	addi	a4,a5,8
    94b4:	fec42783          	lw	a5,-20(s0)
    94b8:	00e7a623          	sw	a4,12(a5)
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    94bc:	fec42783          	lw	a5,-20(s0)
    94c0:	00878713          	addi	a4,a5,8
    94c4:	fec42783          	lw	a5,-20(s0)
    94c8:	00e7a823          	sw	a4,16(a5)
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    94cc:	fec42783          	lw	a5,-20(s0)
    94d0:	0007a023          	sw	zero,0(a5)

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    94d4:	00000013          	nop
    94d8:	01c12403          	lw	s0,28(sp)
    94dc:	02010113          	addi	sp,sp,32
    94e0:	00008067          	ret

000094e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    94e4:	fe010113          	addi	sp,sp,-32
    94e8:	00812e23          	sw	s0,28(sp)
    94ec:	02010413          	addi	s0,sp,32
    94f0:	fea42623          	sw	a0,-20(s0)
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    94f4:	fec42783          	lw	a5,-20(s0)
    94f8:	0007a823          	sw	zero,16(a5)

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    94fc:	00000013          	nop
    9500:	01c12403          	lw	s0,28(sp)
    9504:	02010113          	addi	sp,sp,32
    9508:	00008067          	ret

0000950c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    950c:	fd010113          	addi	sp,sp,-48
    9510:	02812623          	sw	s0,44(sp)
    9514:	03010413          	addi	s0,sp,48
    9518:	fca42e23          	sw	a0,-36(s0)
    951c:	fcb42c23          	sw	a1,-40(s0)
    ListItem_t * const pxIndex = pxList->pxIndex;
    9520:	fdc42783          	lw	a5,-36(s0)
    9524:	0047a783          	lw	a5,4(a5)
    9528:	fef42623          	sw	a5,-20(s0)
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    952c:	fd842783          	lw	a5,-40(s0)
    9530:	fec42703          	lw	a4,-20(s0)
    9534:	00e7a223          	sw	a4,4(a5)
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    9538:	fec42783          	lw	a5,-20(s0)
    953c:	0087a703          	lw	a4,8(a5)
    9540:	fd842783          	lw	a5,-40(s0)
    9544:	00e7a423          	sw	a4,8(a5)

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    9548:	fec42783          	lw	a5,-20(s0)
    954c:	0087a783          	lw	a5,8(a5)
    9550:	fd842703          	lw	a4,-40(s0)
    9554:	00e7a223          	sw	a4,4(a5)
    pxIndex->pxPrevious = pxNewListItem;
    9558:	fec42783          	lw	a5,-20(s0)
    955c:	fd842703          	lw	a4,-40(s0)
    9560:	00e7a423          	sw	a4,8(a5)

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    9564:	fd842783          	lw	a5,-40(s0)
    9568:	fdc42703          	lw	a4,-36(s0)
    956c:	00e7a823          	sw	a4,16(a5)

    ( pxList->uxNumberOfItems )++;
    9570:	fdc42783          	lw	a5,-36(s0)
    9574:	0007a783          	lw	a5,0(a5)
    9578:	00178713          	addi	a4,a5,1
    957c:	fdc42783          	lw	a5,-36(s0)
    9580:	00e7a023          	sw	a4,0(a5)
}
    9584:	00000013          	nop
    9588:	02c12403          	lw	s0,44(sp)
    958c:	03010113          	addi	sp,sp,48
    9590:	00008067          	ret

00009594 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
    9594:	fd010113          	addi	sp,sp,-48
    9598:	02812623          	sw	s0,44(sp)
    959c:	03010413          	addi	s0,sp,48
    95a0:	fca42e23          	sw	a0,-36(s0)
    95a4:	fcb42c23          	sw	a1,-40(s0)
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    95a8:	fd842783          	lw	a5,-40(s0)
    95ac:	0007a783          	lw	a5,0(a5)
    95b0:	fef42623          	sw	a5,-20(s0)
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    95b4:	fec42703          	lw	a4,-20(s0)
    95b8:	fff00793          	li	a5,-1
    95bc:	00f71a63          	bne	a4,a5,95d0 <vListInsert+0x3c>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    95c0:	fdc42783          	lw	a5,-36(s0)
    95c4:	0107a783          	lw	a5,16(a5)
    95c8:	fef42423          	sw	a5,-24(s0)
    95cc:	0340006f          	j	9600 <vListInsert+0x6c>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    95d0:	fdc42783          	lw	a5,-36(s0)
    95d4:	00878793          	addi	a5,a5,8
    95d8:	fef42423          	sw	a5,-24(s0)
    95dc:	0100006f          	j	95ec <vListInsert+0x58>
    95e0:	fe842783          	lw	a5,-24(s0)
    95e4:	0047a783          	lw	a5,4(a5)
    95e8:	fef42423          	sw	a5,-24(s0)
    95ec:	fe842783          	lw	a5,-24(s0)
    95f0:	0047a783          	lw	a5,4(a5)
    95f4:	0007a783          	lw	a5,0(a5)
    95f8:	fec42703          	lw	a4,-20(s0)
    95fc:	fef772e3          	bgeu	a4,a5,95e0 <vListInsert+0x4c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    9600:	fe842783          	lw	a5,-24(s0)
    9604:	0047a703          	lw	a4,4(a5)
    9608:	fd842783          	lw	a5,-40(s0)
    960c:	00e7a223          	sw	a4,4(a5)
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    9610:	fd842783          	lw	a5,-40(s0)
    9614:	0047a783          	lw	a5,4(a5)
    9618:	fd842703          	lw	a4,-40(s0)
    961c:	00e7a423          	sw	a4,8(a5)
    pxNewListItem->pxPrevious = pxIterator;
    9620:	fd842783          	lw	a5,-40(s0)
    9624:	fe842703          	lw	a4,-24(s0)
    9628:	00e7a423          	sw	a4,8(a5)
    pxIterator->pxNext = pxNewListItem;
    962c:	fe842783          	lw	a5,-24(s0)
    9630:	fd842703          	lw	a4,-40(s0)
    9634:	00e7a223          	sw	a4,4(a5)

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
    9638:	fd842783          	lw	a5,-40(s0)
    963c:	fdc42703          	lw	a4,-36(s0)
    9640:	00e7a823          	sw	a4,16(a5)

    ( pxList->uxNumberOfItems )++;
    9644:	fdc42783          	lw	a5,-36(s0)
    9648:	0007a783          	lw	a5,0(a5)
    964c:	00178713          	addi	a4,a5,1
    9650:	fdc42783          	lw	a5,-36(s0)
    9654:	00e7a023          	sw	a4,0(a5)
}
    9658:	00000013          	nop
    965c:	02c12403          	lw	s0,44(sp)
    9660:	03010113          	addi	sp,sp,48
    9664:	00008067          	ret

00009668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    9668:	fd010113          	addi	sp,sp,-48
    966c:	02812623          	sw	s0,44(sp)
    9670:	03010413          	addi	s0,sp,48
    9674:	fca42e23          	sw	a0,-36(s0)
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
    9678:	fdc42783          	lw	a5,-36(s0)
    967c:	0107a783          	lw	a5,16(a5)
    9680:	fef42623          	sw	a5,-20(s0)

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    9684:	fdc42783          	lw	a5,-36(s0)
    9688:	0047a783          	lw	a5,4(a5)
    968c:	fdc42703          	lw	a4,-36(s0)
    9690:	00872703          	lw	a4,8(a4)
    9694:	00e7a423          	sw	a4,8(a5)
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    9698:	fdc42783          	lw	a5,-36(s0)
    969c:	0087a783          	lw	a5,8(a5)
    96a0:	fdc42703          	lw	a4,-36(s0)
    96a4:	00472703          	lw	a4,4(a4)
    96a8:	00e7a223          	sw	a4,4(a5)

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    96ac:	fec42783          	lw	a5,-20(s0)
    96b0:	0047a783          	lw	a5,4(a5)
    96b4:	fdc42703          	lw	a4,-36(s0)
    96b8:	00f71a63          	bne	a4,a5,96cc <uxListRemove+0x64>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    96bc:	fdc42783          	lw	a5,-36(s0)
    96c0:	0087a703          	lw	a4,8(a5)
    96c4:	fec42783          	lw	a5,-20(s0)
    96c8:	00e7a223          	sw	a4,4(a5)
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    96cc:	fdc42783          	lw	a5,-36(s0)
    96d0:	0007a823          	sw	zero,16(a5)
    ( pxList->uxNumberOfItems )--;
    96d4:	fec42783          	lw	a5,-20(s0)
    96d8:	0007a783          	lw	a5,0(a5)
    96dc:	fff78713          	addi	a4,a5,-1
    96e0:	fec42783          	lw	a5,-20(s0)
    96e4:	00e7a023          	sw	a4,0(a5)

    return pxList->uxNumberOfItems;
    96e8:	fec42783          	lw	a5,-20(s0)
    96ec:	0007a783          	lw	a5,0(a5)
}
    96f0:	00078513          	mv	a0,a5
    96f4:	02c12403          	lw	s0,44(sp)
    96f8:	03010113          	addi	sp,sp,48
    96fc:	00008067          	ret

00009700 <vPortSetupTimerInterrupt>:
/*-----------------------------------------------------------*/

#if( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIMECMP_BASE_ADDRESS != 0 )

    void vPortSetupTimerInterrupt( void )
    {
    9700:	fd010113          	addi	sp,sp,-48
    9704:	02812623          	sw	s0,44(sp)
    9708:	03010413          	addi	s0,sp,48
    uint32_t ulCurrentTimeHigh, ulCurrentTimeLow;
    volatile uint32_t * const pulTimeHigh = ( volatile uint32_t * const ) ( ( configMTIME_BASE_ADDRESS ) + 4UL ); /* 8-byte type so high 32-bit word is 4 bytes up. */
    970c:	00050f37          	lui	t5,0x50
    9710:	00cf0f13          	addi	t5,t5,12 # 5000c <__alt_data_end+0x1000c>
    9714:	ffe42023          	sw	t5,-32(s0)
    volatile uint32_t * const pulTimeLow = ( volatile uint32_t * const ) ( configMTIME_BASE_ADDRESS );
    9718:	00050f37          	lui	t5,0x50
    971c:	008f0f13          	addi	t5,t5,8 # 50008 <__alt_data_end+0x10008>
    9720:	ffe42223          	sw	t5,-28(s0)
    volatile uint32_t ulHartId;

        __asm volatile( "csrr %0, mhartid" : "=r"( ulHartId ) );
    9724:	f1402f73          	csrr	t5,mhartid
    9728:	fde42e23          	sw	t5,-36(s0)
        pullMachineTimerCompareRegister  = ( volatile uint64_t * ) ( ullMachineTimerCompareRegisterBase + ( ulHartId * sizeof( uint64_t ) ) );
    972c:	fdc42f03          	lw	t5,-36(s0)
    9730:	003f1f93          	slli	t6,t5,0x3
    9734:	00050f37          	lui	t5,0x50
    9738:	01ef8f33          	add	t5,t6,t5
    973c:	000f0f93          	mv	t6,t5
    9740:	00028f37          	lui	t5,0x28
    9744:	c9ff2023          	sw	t6,-896(t5) # 27c80 <pullMachineTimerCompareRegister>

        do
        {
            ulCurrentTimeHigh = *pulTimeHigh;
    9748:	fe042f03          	lw	t5,-32(s0)
    974c:	000f2f03          	lw	t5,0(t5)
    9750:	ffe42423          	sw	t5,-24(s0)
            ulCurrentTimeLow = *pulTimeLow;
    9754:	fe442f03          	lw	t5,-28(s0)
    9758:	000f2f03          	lw	t5,0(t5)
    975c:	ffe42623          	sw	t5,-20(s0)
        } while( ulCurrentTimeHigh != *pulTimeHigh );
    9760:	fe042f03          	lw	t5,-32(s0)
    9764:	000f2f03          	lw	t5,0(t5)
    9768:	fe842f83          	lw	t6,-24(s0)
    976c:	fdef9ee3          	bne	t6,t5,9748 <vPortSetupTimerInterrupt+0x48>

        ullNextTime = ( uint64_t ) ulCurrentTimeHigh;
    9770:	fe842f03          	lw	t5,-24(s0)
    9774:	000f0e13          	mv	t3,t5
    9778:	00000e93          	li	t4,0
    977c:	00028f37          	lui	t5,0x28
    9780:	c7cf2c23          	sw	t3,-904(t5) # 27c78 <ullNextTime>
    9784:	c7df2e23          	sw	t4,-900(t5)
        ullNextTime <<= 32ULL; /* High 4-byte word is 32-bits up. */
    9788:	00028e37          	lui	t3,0x28
    978c:	c7ce2e83          	lw	t4,-900(t3) # 27c7c <ullNextTime+0x4>
    9790:	c78e2e03          	lw	t3,-904(t3)
    9794:	000e1393          	slli	t2,t3,0x0
    9798:	00000313          	li	t1,0
    979c:	00028e37          	lui	t3,0x28
    97a0:	c66e2c23          	sw	t1,-904(t3) # 27c78 <ullNextTime>
    97a4:	c67e2e23          	sw	t2,-900(t3)
        ullNextTime |= ( uint64_t ) ulCurrentTimeLow;
    97a8:	fec42303          	lw	t1,-20(s0)
    97ac:	00030713          	mv	a4,t1
    97b0:	00000793          	li	a5,0
    97b4:	00028337          	lui	t1,0x28
    97b8:	c7c32383          	lw	t2,-900(t1) # 27c7c <ullNextTime+0x4>
    97bc:	c7832303          	lw	t1,-904(t1)
    97c0:	00676833          	or	a6,a4,t1
    97c4:	0077e8b3          	or	a7,a5,t2
    97c8:	000287b7          	lui	a5,0x28
    97cc:	c707ac23          	sw	a6,-904(a5) # 27c78 <ullNextTime>
    97d0:	c717ae23          	sw	a7,-900(a5)
        ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
    97d4:	0000c7b7          	lui	a5,0xc
    97d8:	35078793          	addi	a5,a5,848 # c350 <xQueueIsQueueFullFromISR+0x30>
    97dc:	00078513          	mv	a0,a5
    97e0:	00000593          	li	a1,0
    97e4:	000287b7          	lui	a5,0x28
    97e8:	c787a803          	lw	a6,-904(a5) # 27c78 <ullNextTime>
    97ec:	c7c7a883          	lw	a7,-900(a5)
    97f0:	01050733          	add	a4,a0,a6
    97f4:	00070313          	mv	t1,a4
    97f8:	00a33333          	sltu	t1,t1,a0
    97fc:	011587b3          	add	a5,a1,a7
    9800:	00f305b3          	add	a1,t1,a5
    9804:	00058793          	mv	a5,a1
    9808:	000285b7          	lui	a1,0x28
    980c:	c6e5ac23          	sw	a4,-904(a1) # 27c78 <ullNextTime>
    9810:	c6f5ae23          	sw	a5,-900(a1)
        *pullMachineTimerCompareRegister = ullNextTime;
    9814:	000287b7          	lui	a5,0x28
    9818:	c807a583          	lw	a1,-896(a5) # 27c80 <pullMachineTimerCompareRegister>
    981c:	000287b7          	lui	a5,0x28
    9820:	c787a703          	lw	a4,-904(a5) # 27c78 <ullNextTime>
    9824:	c7c7a783          	lw	a5,-900(a5)
    9828:	00e5a023          	sw	a4,0(a1)
    982c:	00f5a223          	sw	a5,4(a1)

        /* Prepare the time to use after the next tick interrupt. */
        ullNextTime += ( uint64_t ) uxTimerIncrementsForOneTick;
    9830:	0000c7b7          	lui	a5,0xc
    9834:	35078793          	addi	a5,a5,848 # c350 <xQueueIsQueueFullFromISR+0x30>
    9838:	00078613          	mv	a2,a5
    983c:	00000693          	li	a3,0
    9840:	000287b7          	lui	a5,0x28
    9844:	c787a503          	lw	a0,-904(a5) # 27c78 <ullNextTime>
    9848:	c7c7a583          	lw	a1,-900(a5)
    984c:	00a60733          	add	a4,a2,a0
    9850:	00070813          	mv	a6,a4
    9854:	00c83833          	sltu	a6,a6,a2
    9858:	00b687b3          	add	a5,a3,a1
    985c:	00f806b3          	add	a3,a6,a5
    9860:	00068793          	mv	a5,a3
    9864:	000286b7          	lui	a3,0x28
    9868:	c6e6ac23          	sw	a4,-904(a3) # 27c78 <ullNextTime>
    986c:	c6f6ae23          	sw	a5,-900(a3)
    }
    9870:	00000013          	nop
    9874:	02c12403          	lw	s0,44(sp)
    9878:	03010113          	addi	sp,sp,48
    987c:	00008067          	ret

00009880 <xPortStartScheduler>:

#endif /* ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIME_BASE_ADDRESS != 0 ) */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    9880:	ff010113          	addi	sp,sp,-16
    9884:	00112623          	sw	ra,12(sp)
    9888:	00812423          	sw	s0,8(sp)
    988c:	01010413          	addi	s0,sp,16
    #if( configASSERT_DEFINED == 1 )
    {
        /* Check alignment of the interrupt stack - which is the same as the
         * stack that was being used by main() prior to the scheduler being
         * started. */
        configASSERT( ( xISRStackTop & portBYTE_ALIGNMENT_MASK ) == 0 );
    9890:	000247b7          	lui	a5,0x24
    9894:	4247a783          	lw	a5,1060(a5) # 24424 <xISRStackTop>
    9898:	00f7f793          	andi	a5,a5,15
    989c:	00078a63          	beqz	a5,98b0 <xPortStartScheduler+0x30>
    98a0:	30047073          	csrci	mstatus,8
    98a4:	00100073          	ebreak
    98a8:	00000013          	nop
    98ac:	ffdff06f          	j	98a8 <xPortStartScheduler+0x28>
    #endif /* configASSERT_DEFINED */

    /* If there is a CLINT then it is ok to use the default implementation
     * in this file, otherwise vPortSetupTimerInterrupt() must be implemented to
     * configure whichever clock is to be used to generate the tick interrupt. */
    vPortSetupTimerInterrupt();
    98b0:	e51ff0ef          	jal	ra,9700 <vPortSetupTimerInterrupt>
    #if( ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIMECMP_BASE_ADDRESS != 0 ) )
    {
        /* Enable mtime and external interrupts.  1<<7 for timer interrupt,
         * 1<<11 for external interrupt.  _RB_ What happens here when mtime is
         * not present as with pulpino? */
        __asm volatile( "csrs mie, %0" :: "r"(0x880) );
    98b4:	000017b7          	lui	a5,0x1
    98b8:	88078793          	addi	a5,a5,-1920 # 880 <prvAddNewTaskToReadyList+0x5c>
    98bc:	3047a073          	csrs	mie,a5
    }
    #endif /* ( configMTIME_BASE_ADDRESS != 0 ) && ( configMTIMECMP_BASE_ADDRESS != 0 ) */

    xPortStartFirstTask();
    98c0:	090000ef          	jal	ra,9950 <xPortStartFirstTask>

    /* Should not get here as after calling xPortStartFirstTask() only tasks
     * should be executing. */
    return pdFAIL;
    98c4:	00000793          	li	a5,0
}
    98c8:	00078513          	mv	a0,a5
    98cc:	00c12083          	lw	ra,12(sp)
    98d0:	00812403          	lw	s0,8(sp)
    98d4:	01010113          	addi	sp,sp,16
    98d8:	00008067          	ret

000098dc <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    98dc:	ff010113          	addi	sp,sp,-16
    98e0:	00812623          	sw	s0,12(sp)
    98e4:	01010413          	addi	s0,sp,16
    /* Not implemented. */
    for( ;; );
    98e8:	00000013          	nop
    98ec:	ffdff06f          	j	98e8 <vPortEndScheduler+0xc>

000098f0 <pxPortInitialiseStack>:
 * portTASK_RETURN_ADDRESS
 * [chip specific registers go here]
 * pxCode
 */
pxPortInitialiseStack:
    csrr t0, mstatus                    /* Obtain current mstatus value. */
    98f0:	300022f3          	csrr	t0,mstatus
    andi t0, t0, ~0x8                   /* Ensure interrupts are disabled when the stack is restored within an ISR.  Required when a task is created after the schedulre has been started, otherwise interrupts would be disabled anyway. */
    98f4:	ff72f293          	andi	t0,t0,-9
    addi t1, x0, 0x188                  /* Generate the value 0x1880, which are the MPIE and MPP bits to set in mstatus. */
    98f8:	18800313          	li	t1,392
    slli t1, t1, 4
    98fc:	00431313          	slli	t1,t1,0x4
    or t0, t0, t1                       /* Set MPIE and MPP bits in mstatus value. */
    9900:	0062e2b3          	or	t0,t0,t1

    addi a0, a0, -portWORD_SIZE
    9904:	ffc50513          	addi	a0,a0,-4
    store_x t0, 0(a0)                   /* mstatus onto the stack. */
    9908:	00552023          	sw	t0,0(a0)
    addi a0, a0, -portWORD_SIZE         /* Space for critical nesting count. */
    990c:	ffc50513          	addi	a0,a0,-4
    store_x x0, 0(a0)                   /* Critical nesting count starts at 0 for every task. */
    9910:	00052023          	sw	zero,0(a0)

#ifdef __riscv_32e
    addi a0, a0, -(6 * portWORD_SIZE)   /* Space for registers x11-x15. */
#else
    addi a0, a0, -(22 * portWORD_SIZE)  /* Space for registers x11-x31. */
    9914:	fa850513          	addi	a0,a0,-88
#endif
    store_x a2, 0(a0)                   /* Task parameters (pvParameters parameter) goes into register X10/a0 on the stack. */
    9918:	00c52023          	sw	a2,0(a0)
    addi a0, a0, -(6 * portWORD_SIZE)   /* Space for registers x5-x9. */
    991c:	fe850513          	addi	a0,a0,-24
    load_x t0, xTaskReturnAddress
    9920:	0001e297          	auipc	t0,0x1e
    9924:	3642a283          	lw	t0,868(t0) # 27c84 <xTaskReturnAddress>
    store_x t0, 0(a0)                   /* Return address onto the stack. */
    9928:	00552023          	sw	t0,0(a0)
    addi t0, x0, portasmADDITIONAL_CONTEXT_SIZE /* The number of chip specific additional registers. */
    992c:	00000293          	li	t0,0

00009930 <chip_specific_stack_frame>:
chip_specific_stack_frame:              /* First add any chip specific registers to the stack frame being created. */
    beq t0, x0, 1f                      /* No more chip specific registers to save. */
    9930:	00028a63          	beqz	t0,9944 <chip_specific_stack_frame+0x14>
    addi a0, a0, -portWORD_SIZE         /* Make space for chip specific register. */
    9934:	ffc50513          	addi	a0,a0,-4
    store_x x0, 0(a0)                   /* Give the chip specific register an initial value of zero. */
    9938:	00052023          	sw	zero,0(a0)
    addi t0, t0, -1                     /* Decrement the count of chip specific registers remaining. */
    993c:	fff28293          	addi	t0,t0,-1
    j chip_specific_stack_frame         /* Until no more chip specific registers. */
    9940:	ff1ff06f          	j	9930 <chip_specific_stack_frame>
1:
    addi a0, a0, -portWORD_SIZE
    9944:	ffc50513          	addi	a0,a0,-4
    store_x a1, 0(a0)                   /* mret value (pxCode parameter) onto the stack. */
    9948:	00b52023          	sw	a1,0(a0)
    ret
    994c:	00008067          	ret

00009950 <xPortStartFirstTask>:
/*-----------------------------------------------------------*/

xPortStartFirstTask:
    load_x  sp, pxCurrentTCB            /* Load pxCurrentTCB. */
    9950:	0001e117          	auipc	sp,0x1e
    9954:	30012103          	lw	sp,768(sp) # 27c50 <pxCurrentTCB>
    load_x  sp, 0( sp )                 /* Read sp from first TCB member. */
    9958:	00012103          	lw	sp,0(sp)

    load_x  x1, 0( sp ) /* Note for starting the scheduler the exception return address is used as the function return address. */
    995c:	00012083          	lw	ra,0(sp)

    portasmRESTORE_ADDITIONAL_REGISTERS /* Defined in freertos_risc_v_chip_specific_extensions.h to restore any registers unique to the RISC-V implementation. */

    load_x  x7, 4 * portWORD_SIZE( sp )     /* t2 */
    9960:	01012383          	lw	t2,16(sp)
    load_x  x8, 5 * portWORD_SIZE( sp )     /* s0/fp */
    9964:	01412403          	lw	s0,20(sp)
    load_x  x9, 6 * portWORD_SIZE( sp )     /* s1 */
    9968:	01812483          	lw	s1,24(sp)
    load_x  x10, 7 * portWORD_SIZE( sp )    /* a0 */
    996c:	01c12503          	lw	a0,28(sp)
    load_x  x11, 8 * portWORD_SIZE( sp )    /* a1 */
    9970:	02012583          	lw	a1,32(sp)
    load_x  x12, 9 * portWORD_SIZE( sp )    /* a2 */
    9974:	02412603          	lw	a2,36(sp)
    load_x  x13, 10 * portWORD_SIZE( sp )   /* a3 */
    9978:	02812683          	lw	a3,40(sp)
    load_x  x14, 11 * portWORD_SIZE( sp )   /* a4 */
    997c:	02c12703          	lw	a4,44(sp)
    load_x  x15, 12 * portWORD_SIZE( sp )   /* a5 */
    9980:	03012783          	lw	a5,48(sp)
#ifndef __riscv_32e
    load_x  x16, 13 * portWORD_SIZE( sp )   /* a6 */
    9984:	03412803          	lw	a6,52(sp)
    load_x  x17, 14 * portWORD_SIZE( sp )   /* a7 */
    9988:	03812883          	lw	a7,56(sp)
    load_x  x18, 15 * portWORD_SIZE( sp )   /* s2 */
    998c:	03c12903          	lw	s2,60(sp)
    load_x  x19, 16 * portWORD_SIZE( sp )   /* s3 */
    9990:	04012983          	lw	s3,64(sp)
    load_x  x20, 17 * portWORD_SIZE( sp )   /* s4 */
    9994:	04412a03          	lw	s4,68(sp)
    load_x  x21, 18 * portWORD_SIZE( sp )   /* s5 */
    9998:	04812a83          	lw	s5,72(sp)
    load_x  x22, 19 * portWORD_SIZE( sp )   /* s6 */
    999c:	04c12b03          	lw	s6,76(sp)
    load_x  x23, 20 * portWORD_SIZE( sp )   /* s7 */
    99a0:	05012b83          	lw	s7,80(sp)
    load_x  x24, 21 * portWORD_SIZE( sp )   /* s8 */
    99a4:	05412c03          	lw	s8,84(sp)
    load_x  x25, 22 * portWORD_SIZE( sp )   /* s9 */
    99a8:	05812c83          	lw	s9,88(sp)
    load_x  x26, 23 * portWORD_SIZE( sp )   /* s10 */
    99ac:	05c12d03          	lw	s10,92(sp)
    load_x  x27, 24 * portWORD_SIZE( sp )   /* s11 */
    99b0:	06012d83          	lw	s11,96(sp)
    load_x  x28, 25 * portWORD_SIZE( sp )   /* t3 */
    99b4:	06412e03          	lw	t3,100(sp)
    load_x  x29, 26 * portWORD_SIZE( sp )   /* t4 */
    99b8:	06812e83          	lw	t4,104(sp)
    load_x  x30, 27 * portWORD_SIZE( sp )   /* t5 */
    99bc:	06c12f03          	lw	t5,108(sp)
    load_x  x31, 28 * portWORD_SIZE( sp )   /* t6 */
    99c0:	07012f83          	lw	t6,112(sp)
#endif

    load_x  x5, portCRITICAL_NESTING_OFFSET * portWORD_SIZE( sp )    /* Obtain xCriticalNesting value for this task from task's stack. */
    99c4:	07412283          	lw	t0,116(sp)
    load_x  x6, pxCriticalNesting           /* Load the address of xCriticalNesting into x6. */
    99c8:	0001c317          	auipc	t1,0x1c
    99cc:	65032303          	lw	t1,1616(t1) # 26018 <pxCriticalNesting>
    store_x x5, 0( x6 )                     /* Restore the critical nesting value for this task. */
    99d0:	00532023          	sw	t0,0(t1)

    load_x  x5, portMSTATUS_OFFSET * portWORD_SIZE( sp )    /* Initial mstatus into x5 (t0). */
    99d4:	07812283          	lw	t0,120(sp)
    addi    x5, x5, 0x08                    /* Set MIE bit so the first task starts with interrupts enabled - required as returns with ret not eret. */
    99d8:	00828293          	addi	t0,t0,8
    csrrw   x0, mstatus, x5                 /* Interrupts enabled from here! */
    99dc:	30029073          	csrw	mstatus,t0

    load_x  x5, 2 * portWORD_SIZE( sp )     /* Initial x5 (t0) value. */
    99e0:	00812283          	lw	t0,8(sp)
    load_x  x6, 3 * portWORD_SIZE( sp )     /* Initial x6 (t1) value. */
    99e4:	00c12303          	lw	t1,12(sp)

    addi    sp, sp, portCONTEXT_SIZE
    99e8:	07c10113          	addi	sp,sp,124
    ret
    99ec:	00008067          	ret
/*-----------------------------------------------------------*/

freertos_risc_v_application_exception_handler:
    csrr t0, mcause     /* For viewing in the debugger only. */
    99f0:	342022f3          	csrr	t0,mcause
    csrr t1, mepc       /* For viewing in the debugger only */
    99f4:	34102373          	csrr	t1,mepc
    csrr t2, mstatus    /* For viewing in the debugger only */
    99f8:	300023f3          	csrr	t2,mstatus
    j .
    99fc:	0000006f          	j	99fc <xPortStartFirstTask+0xac>
/*-----------------------------------------------------------*/

freertos_risc_v_application_interrupt_handler:
    csrr t0, mcause     /* For viewing in the debugger only. */
    9a00:	342022f3          	csrr	t0,mcause
    csrr t1, mepc       /* For viewing in the debugger only */
    9a04:	34102373          	csrr	t1,mepc
    csrr t2, mstatus    /* For viewing in the debugger only */
    9a08:	300023f3          	csrr	t2,mstatus
    j .
    9a0c:	0000006f          	j	9a0c <xPortStartFirstTask+0xbc>

00009a10 <freertos_risc_v_exception_handler>:
/*-----------------------------------------------------------*/

.section .text.freertos_risc_v_exception_handler
freertos_risc_v_exception_handler:
    portcontextSAVE_EXCEPTION_CONTEXT
    9a10:	f8410113          	addi	sp,sp,-124
    9a14:	00112223          	sw	ra,4(sp)
    9a18:	00512423          	sw	t0,8(sp)
    9a1c:	00612623          	sw	t1,12(sp)
    9a20:	00712823          	sw	t2,16(sp)
    9a24:	00812a23          	sw	s0,20(sp)
    9a28:	00912c23          	sw	s1,24(sp)
    9a2c:	00a12e23          	sw	a0,28(sp)
    9a30:	02b12023          	sw	a1,32(sp)
    9a34:	02c12223          	sw	a2,36(sp)
    9a38:	02d12423          	sw	a3,40(sp)
    9a3c:	02e12623          	sw	a4,44(sp)
    9a40:	02f12823          	sw	a5,48(sp)
    9a44:	03012a23          	sw	a6,52(sp)
    9a48:	03112c23          	sw	a7,56(sp)
    9a4c:	03212e23          	sw	s2,60(sp)
    9a50:	05312023          	sw	s3,64(sp)
    9a54:	05412223          	sw	s4,68(sp)
    9a58:	05512423          	sw	s5,72(sp)
    9a5c:	05612623          	sw	s6,76(sp)
    9a60:	05712823          	sw	s7,80(sp)
    9a64:	05812a23          	sw	s8,84(sp)
    9a68:	05912c23          	sw	s9,88(sp)
    9a6c:	05a12e23          	sw	s10,92(sp)
    9a70:	07b12023          	sw	s11,96(sp)
    9a74:	07c12223          	sw	t3,100(sp)
    9a78:	07d12423          	sw	t4,104(sp)
    9a7c:	07e12623          	sw	t5,108(sp)
    9a80:	07f12823          	sw	t6,112(sp)
    9a84:	0001c297          	auipc	t0,0x1c
    9a88:	5902a283          	lw	t0,1424(t0) # 26014 <xCriticalNesting>
    9a8c:	06512a23          	sw	t0,116(sp)
    9a90:	300022f3          	csrr	t0,mstatus
    9a94:	06512c23          	sw	t0,120(sp)
    9a98:	0001e297          	auipc	t0,0x1e
    9a9c:	1b82a283          	lw	t0,440(t0) # 27c50 <pxCurrentTCB>
    9aa0:	0022a023          	sw	sp,0(t0)
    9aa4:	34202573          	csrr	a0,mcause
    9aa8:	341025f3          	csrr	a1,mepc
    9aac:	00458593          	addi	a1,a1,4
    9ab0:	00b12023          	sw	a1,0(sp)
    9ab4:	0001b117          	auipc	sp,0x1b
    9ab8:	97012103          	lw	sp,-1680(sp) # 24424 <xISRStackTop>
    /* a0 now contains mcause. */
    li t0, 11                           /* 11 == environment call. */
    9abc:	00b00293          	li	t0,11
    bne a0, t0, other_exception         /* Not an M environment call, so some other exception. */
    9ac0:	0a551663          	bne	a0,t0,9b6c <other_exception>
    call vTaskSwitchContext
    9ac4:	f55f80ef          	jal	ra,2a18 <vTaskSwitchContext>
    portcontextRESTORE_CONTEXT
    9ac8:	0001e317          	auipc	t1,0x1e
    9acc:	18832303          	lw	t1,392(t1) # 27c50 <pxCurrentTCB>
    9ad0:	00032103          	lw	sp,0(t1)
    9ad4:	00012283          	lw	t0,0(sp)
    9ad8:	34129073          	csrw	mepc,t0
    9adc:	07812283          	lw	t0,120(sp)
    9ae0:	30029073          	csrw	mstatus,t0
    9ae4:	07412283          	lw	t0,116(sp)
    9ae8:	0001c317          	auipc	t1,0x1c
    9aec:	53032303          	lw	t1,1328(t1) # 26018 <pxCriticalNesting>
    9af0:	00532023          	sw	t0,0(t1)
    9af4:	00412083          	lw	ra,4(sp)
    9af8:	00812283          	lw	t0,8(sp)
    9afc:	00c12303          	lw	t1,12(sp)
    9b00:	01012383          	lw	t2,16(sp)
    9b04:	01412403          	lw	s0,20(sp)
    9b08:	01812483          	lw	s1,24(sp)
    9b0c:	01c12503          	lw	a0,28(sp)
    9b10:	02012583          	lw	a1,32(sp)
    9b14:	02412603          	lw	a2,36(sp)
    9b18:	02812683          	lw	a3,40(sp)
    9b1c:	02c12703          	lw	a4,44(sp)
    9b20:	03012783          	lw	a5,48(sp)
    9b24:	03412803          	lw	a6,52(sp)
    9b28:	03812883          	lw	a7,56(sp)
    9b2c:	03c12903          	lw	s2,60(sp)
    9b30:	04012983          	lw	s3,64(sp)
    9b34:	04412a03          	lw	s4,68(sp)
    9b38:	04812a83          	lw	s5,72(sp)
    9b3c:	04c12b03          	lw	s6,76(sp)
    9b40:	05012b83          	lw	s7,80(sp)
    9b44:	05412c03          	lw	s8,84(sp)
    9b48:	05812c83          	lw	s9,88(sp)
    9b4c:	05c12d03          	lw	s10,92(sp)
    9b50:	06012d83          	lw	s11,96(sp)
    9b54:	06412e03          	lw	t3,100(sp)
    9b58:	06812e83          	lw	t4,104(sp)
    9b5c:	06c12f03          	lw	t5,108(sp)
    9b60:	07012f83          	lw	t6,112(sp)
    9b64:	07c10113          	addi	sp,sp,124
    9b68:	30200073          	mret

00009b6c <other_exception>:

other_exception:
    call freertos_risc_v_application_exception_handler
    9b6c:	fb1fc0ef          	jal	ra,6b1c <freertos_risc_v_application_exception_handler>
    portcontextRESTORE_CONTEXT
    9b70:	0001e317          	auipc	t1,0x1e
    9b74:	0e032303          	lw	t1,224(t1) # 27c50 <pxCurrentTCB>
    9b78:	00032103          	lw	sp,0(t1)
    9b7c:	00012283          	lw	t0,0(sp)
    9b80:	34129073          	csrw	mepc,t0
    9b84:	07812283          	lw	t0,120(sp)
    9b88:	30029073          	csrw	mstatus,t0
    9b8c:	07412283          	lw	t0,116(sp)
    9b90:	0001c317          	auipc	t1,0x1c
    9b94:	48832303          	lw	t1,1160(t1) # 26018 <pxCriticalNesting>
    9b98:	00532023          	sw	t0,0(t1)
    9b9c:	00412083          	lw	ra,4(sp)
    9ba0:	00812283          	lw	t0,8(sp)
    9ba4:	00c12303          	lw	t1,12(sp)
    9ba8:	01012383          	lw	t2,16(sp)
    9bac:	01412403          	lw	s0,20(sp)
    9bb0:	01812483          	lw	s1,24(sp)
    9bb4:	01c12503          	lw	a0,28(sp)
    9bb8:	02012583          	lw	a1,32(sp)
    9bbc:	02412603          	lw	a2,36(sp)
    9bc0:	02812683          	lw	a3,40(sp)
    9bc4:	02c12703          	lw	a4,44(sp)
    9bc8:	03012783          	lw	a5,48(sp)
    9bcc:	03412803          	lw	a6,52(sp)
    9bd0:	03812883          	lw	a7,56(sp)
    9bd4:	03c12903          	lw	s2,60(sp)
    9bd8:	04012983          	lw	s3,64(sp)
    9bdc:	04412a03          	lw	s4,68(sp)
    9be0:	04812a83          	lw	s5,72(sp)
    9be4:	04c12b03          	lw	s6,76(sp)
    9be8:	05012b83          	lw	s7,80(sp)
    9bec:	05412c03          	lw	s8,84(sp)
    9bf0:	05812c83          	lw	s9,88(sp)
    9bf4:	05c12d03          	lw	s10,92(sp)
    9bf8:	06012d83          	lw	s11,96(sp)
    9bfc:	06412e03          	lw	t3,100(sp)
    9c00:	06812e83          	lw	t4,104(sp)
    9c04:	06c12f03          	lw	t5,108(sp)
    9c08:	07012f83          	lw	t6,112(sp)
    9c0c:	07c10113          	addi	sp,sp,124
    9c10:	30200073          	mret

00009c14 <freertos_risc_v_interrupt_handler>:
/*-----------------------------------------------------------*/

.section .text.freertos_risc_v_interrupt_handler
freertos_risc_v_interrupt_handler:
    portcontextSAVE_INTERRUPT_CONTEXT
    9c14:	f8410113          	addi	sp,sp,-124
    9c18:	00112223          	sw	ra,4(sp)
    9c1c:	00512423          	sw	t0,8(sp)
    9c20:	00612623          	sw	t1,12(sp)
    9c24:	00712823          	sw	t2,16(sp)
    9c28:	00812a23          	sw	s0,20(sp)
    9c2c:	00912c23          	sw	s1,24(sp)
    9c30:	00a12e23          	sw	a0,28(sp)
    9c34:	02b12023          	sw	a1,32(sp)
    9c38:	02c12223          	sw	a2,36(sp)
    9c3c:	02d12423          	sw	a3,40(sp)
    9c40:	02e12623          	sw	a4,44(sp)
    9c44:	02f12823          	sw	a5,48(sp)
    9c48:	03012a23          	sw	a6,52(sp)
    9c4c:	03112c23          	sw	a7,56(sp)
    9c50:	03212e23          	sw	s2,60(sp)
    9c54:	05312023          	sw	s3,64(sp)
    9c58:	05412223          	sw	s4,68(sp)
    9c5c:	05512423          	sw	s5,72(sp)
    9c60:	05612623          	sw	s6,76(sp)
    9c64:	05712823          	sw	s7,80(sp)
    9c68:	05812a23          	sw	s8,84(sp)
    9c6c:	05912c23          	sw	s9,88(sp)
    9c70:	05a12e23          	sw	s10,92(sp)
    9c74:	07b12023          	sw	s11,96(sp)
    9c78:	07c12223          	sw	t3,100(sp)
    9c7c:	07d12423          	sw	t4,104(sp)
    9c80:	07e12623          	sw	t5,108(sp)
    9c84:	07f12823          	sw	t6,112(sp)
    9c88:	0001c297          	auipc	t0,0x1c
    9c8c:	38c2a283          	lw	t0,908(t0) # 26014 <xCriticalNesting>
    9c90:	06512a23          	sw	t0,116(sp)
    9c94:	300022f3          	csrr	t0,mstatus
    9c98:	06512c23          	sw	t0,120(sp)
    9c9c:	0001e297          	auipc	t0,0x1e
    9ca0:	fb42a283          	lw	t0,-76(t0) # 27c50 <pxCurrentTCB>
    9ca4:	0022a023          	sw	sp,0(t0)
    9ca8:	34202573          	csrr	a0,mcause
    9cac:	341025f3          	csrr	a1,mepc
    9cb0:	00b12023          	sw	a1,0(sp)
    9cb4:	0001a117          	auipc	sp,0x1a
    9cb8:	77012103          	lw	sp,1904(sp) # 24424 <xISRStackTop>
    call freertos_risc_v_application_interrupt_handler
    9cbc:	de1fc0ef          	jal	ra,6a9c <freertos_risc_v_application_interrupt_handler>
    portcontextRESTORE_CONTEXT
    9cc0:	0001e317          	auipc	t1,0x1e
    9cc4:	f9032303          	lw	t1,-112(t1) # 27c50 <pxCurrentTCB>
    9cc8:	00032103          	lw	sp,0(t1)
    9ccc:	00012283          	lw	t0,0(sp)
    9cd0:	34129073          	csrw	mepc,t0
    9cd4:	07812283          	lw	t0,120(sp)
    9cd8:	30029073          	csrw	mstatus,t0
    9cdc:	07412283          	lw	t0,116(sp)
    9ce0:	0001c317          	auipc	t1,0x1c
    9ce4:	33832303          	lw	t1,824(t1) # 26018 <pxCriticalNesting>
    9ce8:	00532023          	sw	t0,0(t1)
    9cec:	00412083          	lw	ra,4(sp)
    9cf0:	00812283          	lw	t0,8(sp)
    9cf4:	00c12303          	lw	t1,12(sp)
    9cf8:	01012383          	lw	t2,16(sp)
    9cfc:	01412403          	lw	s0,20(sp)
    9d00:	01812483          	lw	s1,24(sp)
    9d04:	01c12503          	lw	a0,28(sp)
    9d08:	02012583          	lw	a1,32(sp)
    9d0c:	02412603          	lw	a2,36(sp)
    9d10:	02812683          	lw	a3,40(sp)
    9d14:	02c12703          	lw	a4,44(sp)
    9d18:	03012783          	lw	a5,48(sp)
    9d1c:	03412803          	lw	a6,52(sp)
    9d20:	03812883          	lw	a7,56(sp)
    9d24:	03c12903          	lw	s2,60(sp)
    9d28:	04012983          	lw	s3,64(sp)
    9d2c:	04412a03          	lw	s4,68(sp)
    9d30:	04812a83          	lw	s5,72(sp)
    9d34:	04c12b03          	lw	s6,76(sp)
    9d38:	05012b83          	lw	s7,80(sp)
    9d3c:	05412c03          	lw	s8,84(sp)
    9d40:	05812c83          	lw	s9,88(sp)
    9d44:	05c12d03          	lw	s10,92(sp)
    9d48:	06012d83          	lw	s11,96(sp)
    9d4c:	06412e03          	lw	t3,100(sp)
    9d50:	06812e83          	lw	t4,104(sp)
    9d54:	06c12f03          	lw	t5,108(sp)
    9d58:	07012f83          	lw	t6,112(sp)
    9d5c:	07c10113          	addi	sp,sp,124
    9d60:	30200073          	mret

00009d64 <freertos_risc_v_mtimer_interrupt_handler>:
/*-----------------------------------------------------------*/

.section .text.freertos_risc_v_mtimer_interrupt_handler
freertos_risc_v_mtimer_interrupt_handler:
    portcontextSAVE_INTERRUPT_CONTEXT
    9d64:	f8410113          	addi	sp,sp,-124
    9d68:	00112223          	sw	ra,4(sp)
    9d6c:	00512423          	sw	t0,8(sp)
    9d70:	00612623          	sw	t1,12(sp)
    9d74:	00712823          	sw	t2,16(sp)
    9d78:	00812a23          	sw	s0,20(sp)
    9d7c:	00912c23          	sw	s1,24(sp)
    9d80:	00a12e23          	sw	a0,28(sp)
    9d84:	02b12023          	sw	a1,32(sp)
    9d88:	02c12223          	sw	a2,36(sp)
    9d8c:	02d12423          	sw	a3,40(sp)
    9d90:	02e12623          	sw	a4,44(sp)
    9d94:	02f12823          	sw	a5,48(sp)
    9d98:	03012a23          	sw	a6,52(sp)
    9d9c:	03112c23          	sw	a7,56(sp)
    9da0:	03212e23          	sw	s2,60(sp)
    9da4:	05312023          	sw	s3,64(sp)
    9da8:	05412223          	sw	s4,68(sp)
    9dac:	05512423          	sw	s5,72(sp)
    9db0:	05612623          	sw	s6,76(sp)
    9db4:	05712823          	sw	s7,80(sp)
    9db8:	05812a23          	sw	s8,84(sp)
    9dbc:	05912c23          	sw	s9,88(sp)
    9dc0:	05a12e23          	sw	s10,92(sp)
    9dc4:	07b12023          	sw	s11,96(sp)
    9dc8:	07c12223          	sw	t3,100(sp)
    9dcc:	07d12423          	sw	t4,104(sp)
    9dd0:	07e12623          	sw	t5,108(sp)
    9dd4:	07f12823          	sw	t6,112(sp)
    9dd8:	0001c297          	auipc	t0,0x1c
    9ddc:	23c2a283          	lw	t0,572(t0) # 26014 <xCriticalNesting>
    9de0:	06512a23          	sw	t0,116(sp)
    9de4:	300022f3          	csrr	t0,mstatus
    9de8:	06512c23          	sw	t0,120(sp)
    9dec:	0001e297          	auipc	t0,0x1e
    9df0:	e642a283          	lw	t0,-412(t0) # 27c50 <pxCurrentTCB>
    9df4:	0022a023          	sw	sp,0(t0)
    9df8:	34202573          	csrr	a0,mcause
    9dfc:	341025f3          	csrr	a1,mepc
    9e00:	00b12023          	sw	a1,0(sp)
    9e04:	0001a117          	auipc	sp,0x1a
    9e08:	62012103          	lw	sp,1568(sp) # 24424 <xISRStackTop>
    portUPDATE_MTIMER_COMPARE_REGISTER
    9e0c:	0001e517          	auipc	a0,0x1e
    9e10:	e7452503          	lw	a0,-396(a0) # 27c80 <pullMachineTimerCompareRegister>
    9e14:	0001c597          	auipc	a1,0x1c
    9e18:	1fc5a583          	lw	a1,508(a1) # 26010 <pullNextTime>
    9e1c:	fff00713          	li	a4,-1
    9e20:	0005a603          	lw	a2,0(a1)
    9e24:	0045a683          	lw	a3,4(a1)
    9e28:	00e52023          	sw	a4,0(a0)
    9e2c:	00d52223          	sw	a3,4(a0)
    9e30:	00c52023          	sw	a2,0(a0)
    9e34:	0001a297          	auipc	t0,0x1a
    9e38:	5f42a283          	lw	t0,1524(t0) # 24428 <uxTimerIncrementsForOneTick>
    9e3c:	00c28733          	add	a4,t0,a2
    9e40:	00c73333          	sltu	t1,a4,a2
    9e44:	006683b3          	add	t2,a3,t1
    9e48:	00e5a023          	sw	a4,0(a1)
    9e4c:	0075a223          	sw	t2,4(a1)
    call xTaskIncrementTick
    9e50:	805f80ef          	jal	ra,2654 <xTaskIncrementTick>
    beqz a0, exit_without_context_switch    /* Don't switch context if incrementing tick didn't unblock a task. */
    9e54:	00050463          	beqz	a0,9e5c <exit_without_context_switch>
    call vTaskSwitchContext
    9e58:	bc1f80ef          	jal	ra,2a18 <vTaskSwitchContext>

00009e5c <exit_without_context_switch>:
exit_without_context_switch:
    portcontextRESTORE_CONTEXT
    9e5c:	0001e317          	auipc	t1,0x1e
    9e60:	df432303          	lw	t1,-524(t1) # 27c50 <pxCurrentTCB>
    9e64:	00032103          	lw	sp,0(t1)
    9e68:	00012283          	lw	t0,0(sp)
    9e6c:	34129073          	csrw	mepc,t0
    9e70:	07812283          	lw	t0,120(sp)
    9e74:	30029073          	csrw	mstatus,t0
    9e78:	07412283          	lw	t0,116(sp)
    9e7c:	0001c317          	auipc	t1,0x1c
    9e80:	19c32303          	lw	t1,412(t1) # 26018 <pxCriticalNesting>
    9e84:	00532023          	sw	t0,0(t1)
    9e88:	00412083          	lw	ra,4(sp)
    9e8c:	00812283          	lw	t0,8(sp)
    9e90:	00c12303          	lw	t1,12(sp)
    9e94:	01012383          	lw	t2,16(sp)
    9e98:	01412403          	lw	s0,20(sp)
    9e9c:	01812483          	lw	s1,24(sp)
    9ea0:	01c12503          	lw	a0,28(sp)
    9ea4:	02012583          	lw	a1,32(sp)
    9ea8:	02412603          	lw	a2,36(sp)
    9eac:	02812683          	lw	a3,40(sp)
    9eb0:	02c12703          	lw	a4,44(sp)
    9eb4:	03012783          	lw	a5,48(sp)
    9eb8:	03412803          	lw	a6,52(sp)
    9ebc:	03812883          	lw	a7,56(sp)
    9ec0:	03c12903          	lw	s2,60(sp)
    9ec4:	04012983          	lw	s3,64(sp)
    9ec8:	04412a03          	lw	s4,68(sp)
    9ecc:	04812a83          	lw	s5,72(sp)
    9ed0:	04c12b03          	lw	s6,76(sp)
    9ed4:	05012b83          	lw	s7,80(sp)
    9ed8:	05412c03          	lw	s8,84(sp)
    9edc:	05812c83          	lw	s9,88(sp)
    9ee0:	05c12d03          	lw	s10,92(sp)
    9ee4:	06012d83          	lw	s11,96(sp)
    9ee8:	06412e03          	lw	t3,100(sp)
    9eec:	06812e83          	lw	t4,104(sp)
    9ef0:	06c12f03          	lw	t5,108(sp)
    9ef4:	07012f83          	lw	t6,112(sp)
    9ef8:	07c10113          	addi	sp,sp,124
    9efc:	30200073          	mret

00009f00 <freertos_risc_v_trap_handler>:
/*-----------------------------------------------------------*/

.section .text.freertos_risc_v_trap_handler
.align 8
freertos_risc_v_trap_handler:
    portcontextSAVE_CONTEXT_INTERNAL
    9f00:	f8410113          	addi	sp,sp,-124
    9f04:	00112223          	sw	ra,4(sp)
    9f08:	00512423          	sw	t0,8(sp)
    9f0c:	00612623          	sw	t1,12(sp)
    9f10:	00712823          	sw	t2,16(sp)
    9f14:	00812a23          	sw	s0,20(sp)
    9f18:	00912c23          	sw	s1,24(sp)
    9f1c:	00a12e23          	sw	a0,28(sp)
    9f20:	02b12023          	sw	a1,32(sp)
    9f24:	02c12223          	sw	a2,36(sp)
    9f28:	02d12423          	sw	a3,40(sp)
    9f2c:	02e12623          	sw	a4,44(sp)
    9f30:	02f12823          	sw	a5,48(sp)
    9f34:	03012a23          	sw	a6,52(sp)
    9f38:	03112c23          	sw	a7,56(sp)
    9f3c:	03212e23          	sw	s2,60(sp)
    9f40:	05312023          	sw	s3,64(sp)
    9f44:	05412223          	sw	s4,68(sp)
    9f48:	05512423          	sw	s5,72(sp)
    9f4c:	05612623          	sw	s6,76(sp)
    9f50:	05712823          	sw	s7,80(sp)
    9f54:	05812a23          	sw	s8,84(sp)
    9f58:	05912c23          	sw	s9,88(sp)
    9f5c:	05a12e23          	sw	s10,92(sp)
    9f60:	07b12023          	sw	s11,96(sp)
    9f64:	07c12223          	sw	t3,100(sp)
    9f68:	07d12423          	sw	t4,104(sp)
    9f6c:	07e12623          	sw	t5,108(sp)
    9f70:	07f12823          	sw	t6,112(sp)
    9f74:	0001c297          	auipc	t0,0x1c
    9f78:	0a02a283          	lw	t0,160(t0) # 26014 <xCriticalNesting>
    9f7c:	06512a23          	sw	t0,116(sp)
    9f80:	300022f3          	csrr	t0,mstatus
    9f84:	06512c23          	sw	t0,120(sp)
    9f88:	0001e297          	auipc	t0,0x1e
    9f8c:	cc82a283          	lw	t0,-824(t0) # 27c50 <pxCurrentTCB>
    9f90:	0022a023          	sw	sp,0(t0)

    csrr a0, mcause
    9f94:	34202573          	csrr	a0,mcause
    csrr a1, mepc
    9f98:	341025f3          	csrr	a1,mepc

    bge a0, x0, synchronous_exception
    9f9c:	00055a63          	bgez	a0,9fb0 <synchronous_exception>

00009fa0 <asynchronous_interrupt>:

asynchronous_interrupt:
    store_x a1, 0( sp )                 /* Asynchronous interrupt so save unmodified exception return address. */
    9fa0:	00b12023          	sw	a1,0(sp)
    load_x sp, xISRStackTop             /* Switch to ISR stack. */
    9fa4:	0001a117          	auipc	sp,0x1a
    9fa8:	48012103          	lw	sp,1152(sp) # 24424 <xISRStackTop>
    j handle_interrupt
    9fac:	0180006f          	j	9fc4 <handle_interrupt>

00009fb0 <synchronous_exception>:

synchronous_exception:
    addi a1, a1, 4                      /* Synchronous so update exception return address to the instruction after the instruction that generated the exeption. */
    9fb0:	00458593          	addi	a1,a1,4
    store_x a1, 0( sp )                 /* Save updated exception return address. */
    9fb4:	00b12023          	sw	a1,0(sp)
    load_x sp, xISRStackTop             /* Switch to ISR stack. */
    9fb8:	0001a117          	auipc	sp,0x1a
    9fbc:	46c12103          	lw	sp,1132(sp) # 24424 <xISRStackTop>
    j handle_exception
    9fc0:	0700006f          	j	a030 <handle_exception>

00009fc4 <handle_interrupt>:

handle_interrupt:
#if( portasmHAS_MTIME != 0 )

    test_if_mtimer:                     /* If there is a CLINT then the mtimer is used to generate the tick interrupt. */
        addi t0, x0, 1
    9fc4:	00100293          	li	t0,1
        slli t0, t0, __riscv_xlen - 1   /* LSB is already set, shift into MSB.  Shift 31 on 32-bit or 63 on 64-bit cores. */
    9fc8:	01f29293          	slli	t0,t0,0x1f
        addi t1, t0, 7                  /* 0x8000[]0007 == machine timer interrupt. */
    9fcc:	00728313          	addi	t1,t0,7
        bne a0, t1, application_interrupt_handler
    9fd0:	04651c63          	bne	a0,t1,a028 <application_interrupt_handler>

        portUPDATE_MTIMER_COMPARE_REGISTER
    9fd4:	0001e517          	auipc	a0,0x1e
    9fd8:	cac52503          	lw	a0,-852(a0) # 27c80 <pullMachineTimerCompareRegister>
    9fdc:	0001c597          	auipc	a1,0x1c
    9fe0:	0345a583          	lw	a1,52(a1) # 26010 <pullNextTime>
    9fe4:	fff00713          	li	a4,-1
    9fe8:	0005a603          	lw	a2,0(a1)
    9fec:	0045a683          	lw	a3,4(a1)
    9ff0:	00e52023          	sw	a4,0(a0)
    9ff4:	00d52223          	sw	a3,4(a0)
    9ff8:	00c52023          	sw	a2,0(a0)
    9ffc:	0001a297          	auipc	t0,0x1a
    a000:	42c2a283          	lw	t0,1068(t0) # 24428 <uxTimerIncrementsForOneTick>
    a004:	00c28733          	add	a4,t0,a2
    a008:	00c73333          	sltu	t1,a4,a2
    a00c:	006683b3          	add	t2,a3,t1
    a010:	00e5a023          	sw	a4,0(a1)
    a014:	0075a223          	sw	t2,4(a1)
        call xTaskIncrementTick
    a018:	e3cf80ef          	jal	ra,2654 <xTaskIncrementTick>
        beqz a0, processed_source       /* Don't switch context if incrementing tick didn't unblock a task. */
    a01c:	02050663          	beqz	a0,a048 <processed_source>
        call vTaskSwitchContext
    a020:	9f9f80ef          	jal	ra,2a18 <vTaskSwitchContext>
        j processed_source
    a024:	0240006f          	j	a048 <processed_source>

0000a028 <application_interrupt_handler>:

#endif /* portasmHAS_MTIME */

application_interrupt_handler:
    call freertos_risc_v_application_interrupt_handler
    a028:	a75fc0ef          	jal	ra,6a9c <freertos_risc_v_application_interrupt_handler>
    j processed_source
    a02c:	01c0006f          	j	a048 <processed_source>

0000a030 <handle_exception>:

handle_exception:
    /* a0 contains mcause. */
    li t0, 11                                   /* 11 == environment call. */
    a030:	00b00293          	li	t0,11
    bne a0, t0, application_exception_handler   /* Not an M environment call, so some other exception. */
    a034:	00551663          	bne	a0,t0,a040 <application_exception_handler>
    call vTaskSwitchContext
    a038:	9e1f80ef          	jal	ra,2a18 <vTaskSwitchContext>
    j processed_source
    a03c:	00c0006f          	j	a048 <processed_source>

0000a040 <application_exception_handler>:

application_exception_handler:
    call freertos_risc_v_application_exception_handler
    a040:	addfc0ef          	jal	ra,6b1c <freertos_risc_v_application_exception_handler>
    j processed_source                  /* No other exceptions handled yet. */
    a044:	0040006f          	j	a048 <processed_source>

0000a048 <processed_source>:

processed_source:
    portcontextRESTORE_CONTEXT
    a048:	0001e317          	auipc	t1,0x1e
    a04c:	c0832303          	lw	t1,-1016(t1) # 27c50 <pxCurrentTCB>
    a050:	00032103          	lw	sp,0(t1)
    a054:	00012283          	lw	t0,0(sp)
    a058:	34129073          	csrw	mepc,t0
    a05c:	07812283          	lw	t0,120(sp)
    a060:	30029073          	csrw	mstatus,t0
    a064:	07412283          	lw	t0,116(sp)
    a068:	0001c317          	auipc	t1,0x1c
    a06c:	fb032303          	lw	t1,-80(t1) # 26018 <pxCriticalNesting>
    a070:	00532023          	sw	t0,0(t1)
    a074:	00412083          	lw	ra,4(sp)
    a078:	00812283          	lw	t0,8(sp)
    a07c:	00c12303          	lw	t1,12(sp)
    a080:	01012383          	lw	t2,16(sp)
    a084:	01412403          	lw	s0,20(sp)
    a088:	01812483          	lw	s1,24(sp)
    a08c:	01c12503          	lw	a0,28(sp)
    a090:	02012583          	lw	a1,32(sp)
    a094:	02412603          	lw	a2,36(sp)
    a098:	02812683          	lw	a3,40(sp)
    a09c:	02c12703          	lw	a4,44(sp)
    a0a0:	03012783          	lw	a5,48(sp)
    a0a4:	03412803          	lw	a6,52(sp)
    a0a8:	03812883          	lw	a7,56(sp)
    a0ac:	03c12903          	lw	s2,60(sp)
    a0b0:	04012983          	lw	s3,64(sp)
    a0b4:	04412a03          	lw	s4,68(sp)
    a0b8:	04812a83          	lw	s5,72(sp)
    a0bc:	04c12b03          	lw	s6,76(sp)
    a0c0:	05012b83          	lw	s7,80(sp)
    a0c4:	05412c03          	lw	s8,84(sp)
    a0c8:	05812c83          	lw	s9,88(sp)
    a0cc:	05c12d03          	lw	s10,92(sp)
    a0d0:	06012d83          	lw	s11,96(sp)
    a0d4:	06412e03          	lw	t3,100(sp)
    a0d8:	06812e83          	lw	t4,104(sp)
    a0dc:	06c12f03          	lw	t5,108(sp)
    a0e0:	07012f83          	lw	t6,112(sp)
    a0e4:	07c10113          	addi	sp,sp,124
    a0e8:	30200073          	mret
    a0ec:	0000                	.2byte	0x0
	...

0000a0f0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
    a0f0:	fd010113          	addi	sp,sp,-48
    a0f4:	02112623          	sw	ra,44(sp)
    a0f8:	02812423          	sw	s0,40(sp)
    a0fc:	03010413          	addi	s0,sp,48
    a100:	fca42e23          	sw	a0,-36(s0)
    a104:	fcb42c23          	sw	a1,-40(s0)
    BaseType_t xReturn = pdPASS;
    a108:	00100793          	li	a5,1
    a10c:	fef42423          	sw	a5,-24(s0)
    Queue_t * const pxQueue = xQueue;
    a110:	fdc42783          	lw	a5,-36(s0)
    a114:	fef42623          	sw	a5,-20(s0)

    configASSERT( pxQueue );
    a118:	fec42783          	lw	a5,-20(s0)
    a11c:	00079a63          	bnez	a5,a130 <xQueueGenericReset+0x40>
    a120:	30047073          	csrci	mstatus,8
    a124:	00100073          	ebreak
    a128:	00000013          	nop
    a12c:	ffdff06f          	j	a128 <xQueueGenericReset+0x38>

    if( ( pxQueue != NULL ) &&
    a130:	fec42783          	lw	a5,-20(s0)
    a134:	14078863          	beqz	a5,a284 <xQueueGenericReset+0x194>
        ( pxQueue->uxLength >= 1U ) &&
    a138:	fec42783          	lw	a5,-20(s0)
    a13c:	03c7a783          	lw	a5,60(a5)
    if( ( pxQueue != NULL ) &&
    a140:	14078263          	beqz	a5,a284 <xQueueGenericReset+0x194>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
    a144:	fec42783          	lw	a5,-20(s0)
    a148:	0407a703          	lw	a4,64(a5)
    a14c:	fec42783          	lw	a5,-20(s0)
    a150:	03c7a783          	lw	a5,60(a5)
    a154:	00000693          	li	a3,0
    a158:	02f737b3          	mulhu	a5,a4,a5
    a15c:	00078463          	beqz	a5,a164 <xQueueGenericReset+0x74>
    a160:	00100693          	li	a3,1
    a164:	00068793          	mv	a5,a3
        ( pxQueue->uxLength >= 1U ) &&
    a168:	10079e63          	bnez	a5,a284 <xQueueGenericReset+0x194>
    {
        taskENTER_CRITICAL();
    a16c:	30047073          	csrci	mstatus,8
    a170:	000267b7          	lui	a5,0x26
    a174:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a178:	00178713          	addi	a4,a5,1
    a17c:	000267b7          	lui	a5,0x26
    a180:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    a184:	fec42783          	lw	a5,-20(s0)
    a188:	0007a703          	lw	a4,0(a5)
    a18c:	fec42783          	lw	a5,-20(s0)
    a190:	03c7a683          	lw	a3,60(a5)
    a194:	fec42783          	lw	a5,-20(s0)
    a198:	0407a783          	lw	a5,64(a5)
    a19c:	02f687b3          	mul	a5,a3,a5
    a1a0:	00f70733          	add	a4,a4,a5
    a1a4:	fec42783          	lw	a5,-20(s0)
    a1a8:	00e7a423          	sw	a4,8(a5)
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    a1ac:	fec42783          	lw	a5,-20(s0)
    a1b0:	0207ac23          	sw	zero,56(a5)
            pxQueue->pcWriteTo = pxQueue->pcHead;
    a1b4:	fec42783          	lw	a5,-20(s0)
    a1b8:	0007a703          	lw	a4,0(a5)
    a1bc:	fec42783          	lw	a5,-20(s0)
    a1c0:	00e7a223          	sw	a4,4(a5)
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    a1c4:	fec42783          	lw	a5,-20(s0)
    a1c8:	0007a703          	lw	a4,0(a5)
    a1cc:	fec42783          	lw	a5,-20(s0)
    a1d0:	03c7a783          	lw	a5,60(a5)
    a1d4:	fff78693          	addi	a3,a5,-1
    a1d8:	fec42783          	lw	a5,-20(s0)
    a1dc:	0407a783          	lw	a5,64(a5)
    a1e0:	02f687b3          	mul	a5,a3,a5
    a1e4:	00f70733          	add	a4,a4,a5
    a1e8:	fec42783          	lw	a5,-20(s0)
    a1ec:	00e7a623          	sw	a4,12(a5)
            pxQueue->cRxLock = queueUNLOCKED;
    a1f0:	fec42783          	lw	a5,-20(s0)
    a1f4:	fff00713          	li	a4,-1
    a1f8:	04e78223          	sb	a4,68(a5)
            pxQueue->cTxLock = queueUNLOCKED;
    a1fc:	fec42783          	lw	a5,-20(s0)
    a200:	fff00713          	li	a4,-1
    a204:	04e782a3          	sb	a4,69(a5)

            if( xNewQueue == pdFALSE )
    a208:	fd842783          	lw	a5,-40(s0)
    a20c:	02079863          	bnez	a5,a23c <xQueueGenericReset+0x14c>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    a210:	fec42783          	lw	a5,-20(s0)
    a214:	0107a783          	lw	a5,16(a5)
    a218:	04078263          	beqz	a5,a25c <xQueueGenericReset+0x16c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    a21c:	fec42783          	lw	a5,-20(s0)
    a220:	01078793          	addi	a5,a5,16
    a224:	00078513          	mv	a0,a5
    a228:	bc1f80ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    a22c:	00050793          	mv	a5,a0
    a230:	02078663          	beqz	a5,a25c <xQueueGenericReset+0x16c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    a234:	00000073          	ecall
    a238:	0240006f          	j	a25c <xQueueGenericReset+0x16c>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    a23c:	fec42783          	lw	a5,-20(s0)
    a240:	01078793          	addi	a5,a5,16
    a244:	00078513          	mv	a0,a5
    a248:	a38ff0ef          	jal	ra,9480 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    a24c:	fec42783          	lw	a5,-20(s0)
    a250:	02478793          	addi	a5,a5,36
    a254:	00078513          	mv	a0,a5
    a258:	a28ff0ef          	jal	ra,9480 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
    a25c:	000267b7          	lui	a5,0x26
    a260:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a264:	fff78713          	addi	a4,a5,-1
    a268:	000267b7          	lui	a5,0x26
    a26c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    a270:	000267b7          	lui	a5,0x26
    a274:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a278:	00079863          	bnez	a5,a288 <xQueueGenericReset+0x198>
    a27c:	30046073          	csrsi	mstatus,8
    a280:	0080006f          	j	a288 <xQueueGenericReset+0x198>
    }
    else
    {
        xReturn = pdFAIL;
    a284:	fe042423          	sw	zero,-24(s0)
    }

    configASSERT( xReturn != pdFAIL );
    a288:	fe842783          	lw	a5,-24(s0)
    a28c:	00079a63          	bnez	a5,a2a0 <xQueueGenericReset+0x1b0>
    a290:	30047073          	csrci	mstatus,8
    a294:	00100073          	ebreak
    a298:	00000013          	nop
    a29c:	ffdff06f          	j	a298 <xQueueGenericReset+0x1a8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
    a2a0:	fe842783          	lw	a5,-24(s0)
}
    a2a4:	00078513          	mv	a0,a5
    a2a8:	02c12083          	lw	ra,44(sp)
    a2ac:	02812403          	lw	s0,40(sp)
    a2b0:	03010113          	addi	sp,sp,48
    a2b4:	00008067          	ret

0000a2b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
    a2b8:	fd010113          	addi	sp,sp,-48
    a2bc:	02112623          	sw	ra,44(sp)
    a2c0:	02812423          	sw	s0,40(sp)
    a2c4:	03010413          	addi	s0,sp,48
    a2c8:	fca42e23          	sw	a0,-36(s0)
    a2cc:	fcb42c23          	sw	a1,-40(s0)
    a2d0:	00060793          	mv	a5,a2
    a2d4:	fcf40ba3          	sb	a5,-41(s0)
        Queue_t * pxNewQueue = NULL;
    a2d8:	fe042223          	sw	zero,-28(s0)
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    a2dc:	fdc42783          	lw	a5,-36(s0)
    a2e0:	08078c63          	beqz	a5,a378 <xQueueGenericCreate+0xc0>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    a2e4:	00000693          	li	a3,0
    a2e8:	fd842703          	lw	a4,-40(s0)
    a2ec:	fdc42783          	lw	a5,-36(s0)
    a2f0:	02f737b3          	mulhu	a5,a4,a5
    a2f4:	00078463          	beqz	a5,a2fc <xQueueGenericCreate+0x44>
    a2f8:	00100693          	li	a3,1
    a2fc:	00068793          	mv	a5,a3
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
    a300:	06079c63          	bnez	a5,a378 <xQueueGenericCreate+0xc0>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
    a304:	fdc42703          	lw	a4,-36(s0)
    a308:	fd842783          	lw	a5,-40(s0)
    a30c:	02f70733          	mul	a4,a4,a5
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
    a310:	fab00793          	li	a5,-85
    a314:	06e7e263          	bltu	a5,a4,a378 <xQueueGenericCreate+0xc0>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a318:	fdc42703          	lw	a4,-36(s0)
    a31c:	fd842783          	lw	a5,-40(s0)
    a320:	02f707b3          	mul	a5,a4,a5
    a324:	fef42423          	sw	a5,-24(s0)
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
    a328:	fe842783          	lw	a5,-24(s0)
    a32c:	05478793          	addi	a5,a5,84
    a330:	00078513          	mv	a0,a5
    a334:	ee5fd0ef          	jal	ra,8218 <pvPortMalloc>
    a338:	fea42223          	sw	a0,-28(s0)

            if( pxNewQueue != NULL )
    a33c:	fe442783          	lw	a5,-28(s0)
    a340:	04078863          	beqz	a5,a390 <xQueueGenericCreate+0xd8>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
    a344:	fe442783          	lw	a5,-28(s0)
    a348:	fef42623          	sw	a5,-20(s0)
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    a34c:	fec42783          	lw	a5,-20(s0)
    a350:	05478793          	addi	a5,a5,84
    a354:	fef42623          	sw	a5,-20(s0)
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    a358:	fd744783          	lbu	a5,-41(s0)
    a35c:	fe442703          	lw	a4,-28(s0)
    a360:	00078693          	mv	a3,a5
    a364:	fec42603          	lw	a2,-20(s0)
    a368:	fd842583          	lw	a1,-40(s0)
    a36c:	fdc42503          	lw	a0,-36(s0)
    a370:	038000ef          	jal	ra,a3a8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
    a374:	01c0006f          	j	a390 <xQueueGenericCreate+0xd8>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
    a378:	fe442783          	lw	a5,-28(s0)
    a37c:	00079a63          	bnez	a5,a390 <xQueueGenericCreate+0xd8>
    a380:	30047073          	csrci	mstatus,8
    a384:	00100073          	ebreak
    a388:	00000013          	nop
    a38c:	ffdff06f          	j	a388 <xQueueGenericCreate+0xd0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
    a390:	fe442783          	lw	a5,-28(s0)
    }
    a394:	00078513          	mv	a0,a5
    a398:	02c12083          	lw	ra,44(sp)
    a39c:	02812403          	lw	s0,40(sp)
    a3a0:	03010113          	addi	sp,sp,48
    a3a4:	00008067          	ret

0000a3a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
    a3a8:	fd010113          	addi	sp,sp,-48
    a3ac:	02112623          	sw	ra,44(sp)
    a3b0:	02812423          	sw	s0,40(sp)
    a3b4:	03010413          	addi	s0,sp,48
    a3b8:	fea42623          	sw	a0,-20(s0)
    a3bc:	feb42423          	sw	a1,-24(s0)
    a3c0:	fec42223          	sw	a2,-28(s0)
    a3c4:	00068793          	mv	a5,a3
    a3c8:	fce42e23          	sw	a4,-36(s0)
    a3cc:	fef401a3          	sb	a5,-29(s0)
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
    a3d0:	fe842783          	lw	a5,-24(s0)
    a3d4:	00079a63          	bnez	a5,a3e8 <prvInitialiseNewQueue+0x40>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    a3d8:	fdc42783          	lw	a5,-36(s0)
    a3dc:	fdc42703          	lw	a4,-36(s0)
    a3e0:	00e7a023          	sw	a4,0(a5)
    a3e4:	0100006f          	j	a3f4 <prvInitialiseNewQueue+0x4c>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    a3e8:	fdc42783          	lw	a5,-36(s0)
    a3ec:	fe442703          	lw	a4,-28(s0)
    a3f0:	00e7a023          	sw	a4,0(a5)
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
    a3f4:	fdc42783          	lw	a5,-36(s0)
    a3f8:	fec42703          	lw	a4,-20(s0)
    a3fc:	02e7ae23          	sw	a4,60(a5)
    pxNewQueue->uxItemSize = uxItemSize;
    a400:	fdc42783          	lw	a5,-36(s0)
    a404:	fe842703          	lw	a4,-24(s0)
    a408:	04e7a023          	sw	a4,64(a5)
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    a40c:	00100593          	li	a1,1
    a410:	fdc42503          	lw	a0,-36(s0)
    a414:	cddff0ef          	jal	ra,a0f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
    a418:	fdc42783          	lw	a5,-36(s0)
    a41c:	fe344703          	lbu	a4,-29(s0)
    a420:	04e78823          	sb	a4,80(a5)
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    a424:	fdc42783          	lw	a5,-36(s0)
    a428:	0407a423          	sw	zero,72(a5)
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
    a42c:	00000013          	nop
    a430:	02c12083          	lw	ra,44(sp)
    a434:	02812403          	lw	s0,40(sp)
    a438:	03010113          	addi	sp,sp,48
    a43c:	00008067          	ret

0000a440 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
    a440:	fe010113          	addi	sp,sp,-32
    a444:	00112e23          	sw	ra,28(sp)
    a448:	00812c23          	sw	s0,24(sp)
    a44c:	02010413          	addi	s0,sp,32
    a450:	fea42623          	sw	a0,-20(s0)
        if( pxNewQueue != NULL )
    a454:	fec42783          	lw	a5,-20(s0)
    a458:	02078863          	beqz	a5,a488 <prvInitialiseMutex+0x48>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
    a45c:	fec42783          	lw	a5,-20(s0)
    a460:	0007a423          	sw	zero,8(a5)
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    a464:	fec42783          	lw	a5,-20(s0)
    a468:	0007a023          	sw	zero,0(a5)

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
    a46c:	fec42783          	lw	a5,-20(s0)
    a470:	0007a623          	sw	zero,12(a5)

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    a474:	00000693          	li	a3,0
    a478:	00000613          	li	a2,0
    a47c:	00000593          	li	a1,0
    a480:	fec42503          	lw	a0,-20(s0)
    a484:	360000ef          	jal	ra,a7e4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
    a488:	00000013          	nop
    a48c:	01c12083          	lw	ra,28(sp)
    a490:	01812403          	lw	s0,24(sp)
    a494:	02010113          	addi	sp,sp,32
    a498:	00008067          	ret

0000a49c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
    a49c:	fd010113          	addi	sp,sp,-48
    a4a0:	02112623          	sw	ra,44(sp)
    a4a4:	02812423          	sw	s0,40(sp)
    a4a8:	03010413          	addi	s0,sp,48
    a4ac:	00050793          	mv	a5,a0
    a4b0:	fcf40fa3          	sb	a5,-33(s0)
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    a4b4:	00100793          	li	a5,1
    a4b8:	fef42223          	sw	a5,-28(s0)
    a4bc:	fe042423          	sw	zero,-24(s0)

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    a4c0:	fdf44783          	lbu	a5,-33(s0)
    a4c4:	00078613          	mv	a2,a5
    a4c8:	fe842583          	lw	a1,-24(s0)
    a4cc:	fe442503          	lw	a0,-28(s0)
    a4d0:	de9ff0ef          	jal	ra,a2b8 <xQueueGenericCreate>
    a4d4:	fea42623          	sw	a0,-20(s0)
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
    a4d8:	fec42503          	lw	a0,-20(s0)
    a4dc:	f65ff0ef          	jal	ra,a440 <prvInitialiseMutex>

        return xNewQueue;
    a4e0:	fec42783          	lw	a5,-20(s0)
    }
    a4e4:	00078513          	mv	a0,a5
    a4e8:	02c12083          	lw	ra,44(sp)
    a4ec:	02812403          	lw	s0,40(sp)
    a4f0:	03010113          	addi	sp,sp,48
    a4f4:	00008067          	ret

0000a4f8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

    TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
    {
    a4f8:	fd010113          	addi	sp,sp,-48
    a4fc:	02812623          	sw	s0,44(sp)
    a500:	03010413          	addi	s0,sp,48
    a504:	fca42e23          	sw	a0,-36(s0)
        TaskHandle_t pxReturn;
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
    a508:	fdc42783          	lw	a5,-36(s0)
    a50c:	fef42623          	sw	a5,-20(s0)

        configASSERT( xSemaphore );
    a510:	fdc42783          	lw	a5,-36(s0)
    a514:	00079a63          	bnez	a5,a528 <xQueueGetMutexHolder+0x30>
    a518:	30047073          	csrci	mstatus,8
    a51c:	00100073          	ebreak
    a520:	00000013          	nop
    a524:	ffdff06f          	j	a520 <xQueueGetMutexHolder+0x28>
        /* This function is called by xSemaphoreGetMutexHolder(), and should not
         * be called directly.  Note:  This is a good way of determining if the
         * calling task is the mutex holder, but not a good way of determining the
         * identity of the mutex holder, as the holder may change between the
         * following critical section exiting and the function returning. */
        taskENTER_CRITICAL();
    a528:	30047073          	csrci	mstatus,8
    a52c:	000267b7          	lui	a5,0x26
    a530:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a534:	00178713          	addi	a4,a5,1
    a538:	000267b7          	lui	a5,0x26
    a53c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    a540:	fec42783          	lw	a5,-20(s0)
    a544:	0007a783          	lw	a5,0(a5)
    a548:	00079a63          	bnez	a5,a55c <xQueueGetMutexHolder+0x64>
            {
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
    a54c:	fec42783          	lw	a5,-20(s0)
    a550:	0087a783          	lw	a5,8(a5)
    a554:	fef42423          	sw	a5,-24(s0)
    a558:	0080006f          	j	a560 <xQueueGetMutexHolder+0x68>
            }
            else
            {
                pxReturn = NULL;
    a55c:	fe042423          	sw	zero,-24(s0)
            }
        }
        taskEXIT_CRITICAL();
    a560:	000267b7          	lui	a5,0x26
    a564:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a568:	fff78713          	addi	a4,a5,-1
    a56c:	000267b7          	lui	a5,0x26
    a570:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    a574:	000267b7          	lui	a5,0x26
    a578:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a57c:	00079463          	bnez	a5,a584 <xQueueGetMutexHolder+0x8c>
    a580:	30046073          	csrsi	mstatus,8

        return pxReturn;
    a584:	fe842783          	lw	a5,-24(s0)
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
    a588:	00078513          	mv	a0,a5
    a58c:	02c12403          	lw	s0,44(sp)
    a590:	03010113          	addi	sp,sp,48
    a594:	00008067          	ret

0000a598 <xQueueGetMutexHolderFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

    TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
    {
    a598:	fd010113          	addi	sp,sp,-48
    a59c:	02812623          	sw	s0,44(sp)
    a5a0:	03010413          	addi	s0,sp,48
    a5a4:	fca42e23          	sw	a0,-36(s0)
        TaskHandle_t pxReturn;

        configASSERT( xSemaphore );
    a5a8:	fdc42783          	lw	a5,-36(s0)
    a5ac:	00079a63          	bnez	a5,a5c0 <xQueueGetMutexHolderFromISR+0x28>
    a5b0:	30047073          	csrci	mstatus,8
    a5b4:	00100073          	ebreak
    a5b8:	00000013          	nop
    a5bc:	ffdff06f          	j	a5b8 <xQueueGetMutexHolderFromISR+0x20>

        /* Mutexes cannot be used in interrupt service routines, so the mutex
         * holder should not change in an ISR, and therefore a critical section is
         * not required here. */
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
    a5c0:	fdc42783          	lw	a5,-36(s0)
    a5c4:	0007a783          	lw	a5,0(a5)
    a5c8:	00079a63          	bnez	a5,a5dc <xQueueGetMutexHolderFromISR+0x44>
        {
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
    a5cc:	fdc42783          	lw	a5,-36(s0)
    a5d0:	0087a783          	lw	a5,8(a5)
    a5d4:	fef42623          	sw	a5,-20(s0)
    a5d8:	0080006f          	j	a5e0 <xQueueGetMutexHolderFromISR+0x48>
        }
        else
        {
            pxReturn = NULL;
    a5dc:	fe042623          	sw	zero,-20(s0)
        }

        return pxReturn;
    a5e0:	fec42783          	lw	a5,-20(s0)
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
    a5e4:	00078513          	mv	a0,a5
    a5e8:	02c12403          	lw	s0,44(sp)
    a5ec:	03010113          	addi	sp,sp,48
    a5f0:	00008067          	ret

0000a5f4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
    {
    a5f4:	fd010113          	addi	sp,sp,-48
    a5f8:	02112623          	sw	ra,44(sp)
    a5fc:	02812423          	sw	s0,40(sp)
    a600:	02912223          	sw	s1,36(sp)
    a604:	03010413          	addi	s0,sp,48
    a608:	fca42e23          	sw	a0,-36(s0)
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    a60c:	fdc42783          	lw	a5,-36(s0)
    a610:	fef42623          	sw	a5,-20(s0)

        configASSERT( pxMutex );
    a614:	fec42783          	lw	a5,-20(s0)
    a618:	00079a63          	bnez	a5,a62c <xQueueGiveMutexRecursive+0x38>
    a61c:	30047073          	csrci	mstatus,8
    a620:	00100073          	ebreak
    a624:	00000013          	nop
    a628:	ffdff06f          	j	a624 <xQueueGiveMutexRecursive+0x30>
         * change outside of this task.  If this task does not hold the mutex then
         * pxMutexHolder can never coincidentally equal the tasks handle, and as
         * this is the only condition we are interested in it does not matter if
         * pxMutexHolder is accessed simultaneously by another task.  Therefore no
         * mutual exclusion is required to test the pxMutexHolder variable. */
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
    a62c:	fec42783          	lw	a5,-20(s0)
    a630:	0087a483          	lw	s1,8(a5)
    a634:	d8cf90ef          	jal	ra,3bc0 <xTaskGetCurrentTaskHandle>
    a638:	00050793          	mv	a5,a0
    a63c:	04f49263          	bne	s1,a5,a680 <xQueueGiveMutexRecursive+0x8c>
            /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
             * the task handle, therefore no underflow check is required.  Also,
             * uxRecursiveCallCount is only modified by the mutex holder, and as
             * there can only be one, no mutual exclusion is required to modify the
             * uxRecursiveCallCount member. */
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
    a640:	fec42783          	lw	a5,-20(s0)
    a644:	00c7a783          	lw	a5,12(a5)
    a648:	fff78713          	addi	a4,a5,-1
    a64c:	fec42783          	lw	a5,-20(s0)
    a650:	00e7a623          	sw	a4,12(a5)

            /* Has the recursive call count unwound to 0? */
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    a654:	fec42783          	lw	a5,-20(s0)
    a658:	00c7a783          	lw	a5,12(a5)
    a65c:	00079c63          	bnez	a5,a674 <xQueueGiveMutexRecursive+0x80>
            {
                /* Return the mutex.  This will automatically unblock any other
                 * task that might be waiting to access the mutex. */
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    a660:	00000693          	li	a3,0
    a664:	00000613          	li	a2,0
    a668:	00000593          	li	a1,0
    a66c:	fec42503          	lw	a0,-20(s0)
    a670:	174000ef          	jal	ra,a7e4 <xQueueGenericSend>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            xReturn = pdPASS;
    a674:	00100793          	li	a5,1
    a678:	fef42423          	sw	a5,-24(s0)
    a67c:	0080006f          	j	a684 <xQueueGiveMutexRecursive+0x90>
        }
        else
        {
            /* The mutex cannot be given because the calling task is not the
             * holder. */
            xReturn = pdFAIL;
    a680:	fe042423          	sw	zero,-24(s0)

            traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
        }

        return xReturn;
    a684:	fe842783          	lw	a5,-24(s0)
    }
    a688:	00078513          	mv	a0,a5
    a68c:	02c12083          	lw	ra,44(sp)
    a690:	02812403          	lw	s0,40(sp)
    a694:	02412483          	lw	s1,36(sp)
    a698:	03010113          	addi	sp,sp,48
    a69c:	00008067          	ret

0000a6a0 <xQueueTakeMutexRecursive>:

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

    BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
                                         TickType_t xTicksToWait )
    {
    a6a0:	fd010113          	addi	sp,sp,-48
    a6a4:	02112623          	sw	ra,44(sp)
    a6a8:	02812423          	sw	s0,40(sp)
    a6ac:	02912223          	sw	s1,36(sp)
    a6b0:	03010413          	addi	s0,sp,48
    a6b4:	fca42e23          	sw	a0,-36(s0)
    a6b8:	fcb42c23          	sw	a1,-40(s0)
        BaseType_t xReturn;
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    a6bc:	fdc42783          	lw	a5,-36(s0)
    a6c0:	fef42623          	sw	a5,-20(s0)

        configASSERT( pxMutex );
    a6c4:	fec42783          	lw	a5,-20(s0)
    a6c8:	00079a63          	bnez	a5,a6dc <xQueueTakeMutexRecursive+0x3c>
    a6cc:	30047073          	csrci	mstatus,8
    a6d0:	00100073          	ebreak
    a6d4:	00000013          	nop
    a6d8:	ffdff06f          	j	a6d4 <xQueueTakeMutexRecursive+0x34>
        /* Comments regarding mutual exclusion as per those within
         * xQueueGiveMutexRecursive(). */

        traceTAKE_MUTEX_RECURSIVE( pxMutex );

        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
    a6dc:	fec42783          	lw	a5,-20(s0)
    a6e0:	0087a483          	lw	s1,8(a5)
    a6e4:	cdcf90ef          	jal	ra,3bc0 <xTaskGetCurrentTaskHandle>
    a6e8:	00050793          	mv	a5,a0
    a6ec:	02f49263          	bne	s1,a5,a710 <xQueueTakeMutexRecursive+0x70>
        {
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
    a6f0:	fec42783          	lw	a5,-20(s0)
    a6f4:	00c7a783          	lw	a5,12(a5)
    a6f8:	00178713          	addi	a4,a5,1
    a6fc:	fec42783          	lw	a5,-20(s0)
    a700:	00e7a623          	sw	a4,12(a5)
            xReturn = pdPASS;
    a704:	00100793          	li	a5,1
    a708:	fef42423          	sw	a5,-24(s0)
    a70c:	0300006f          	j	a73c <xQueueTakeMutexRecursive+0x9c>
        }
        else
        {
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
    a710:	fd842583          	lw	a1,-40(s0)
    a714:	fec42503          	lw	a0,-20(s0)
    a718:	325000ef          	jal	ra,b23c <xQueueSemaphoreTake>
    a71c:	fea42423          	sw	a0,-24(s0)

            /* pdPASS will only be returned if the mutex was successfully
             * obtained.  The calling task may have entered the Blocked state
             * before reaching here. */
            if( xReturn != pdFAIL )
    a720:	fe842783          	lw	a5,-24(s0)
    a724:	00078c63          	beqz	a5,a73c <xQueueTakeMutexRecursive+0x9c>
            {
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
    a728:	fec42783          	lw	a5,-20(s0)
    a72c:	00c7a783          	lw	a5,12(a5)
    a730:	00178713          	addi	a4,a5,1
    a734:	fec42783          	lw	a5,-20(s0)
    a738:	00e7a623          	sw	a4,12(a5)
            {
                traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
            }
        }

        return xReturn;
    a73c:	fe842783          	lw	a5,-24(s0)
    }
    a740:	00078513          	mv	a0,a5
    a744:	02c12083          	lw	ra,44(sp)
    a748:	02812403          	lw	s0,40(sp)
    a74c:	02412483          	lw	s1,36(sp)
    a750:	03010113          	addi	sp,sp,48
    a754:	00008067          	ret

0000a758 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
    a758:	fd010113          	addi	sp,sp,-48
    a75c:	02112623          	sw	ra,44(sp)
    a760:	02812423          	sw	s0,40(sp)
    a764:	03010413          	addi	s0,sp,48
    a768:	fca42e23          	sw	a0,-36(s0)
    a76c:	fcb42c23          	sw	a1,-40(s0)
        QueueHandle_t xHandle = NULL;
    a770:	fe042623          	sw	zero,-20(s0)

        if( ( uxMaxCount != 0 ) &&
    a774:	fdc42783          	lw	a5,-36(s0)
    a778:	02078e63          	beqz	a5,a7b4 <xQueueCreateCountingSemaphore+0x5c>
    a77c:	fd842703          	lw	a4,-40(s0)
    a780:	fdc42783          	lw	a5,-36(s0)
    a784:	02e7e863          	bltu	a5,a4,a7b4 <xQueueCreateCountingSemaphore+0x5c>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    a788:	00200613          	li	a2,2
    a78c:	00000593          	li	a1,0
    a790:	fdc42503          	lw	a0,-36(s0)
    a794:	b25ff0ef          	jal	ra,a2b8 <xQueueGenericCreate>
    a798:	fea42623          	sw	a0,-20(s0)

            if( xHandle != NULL )
    a79c:	fec42783          	lw	a5,-20(s0)
    a7a0:	02078663          	beqz	a5,a7cc <xQueueCreateCountingSemaphore+0x74>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    a7a4:	fec42783          	lw	a5,-20(s0)
    a7a8:	fd842703          	lw	a4,-40(s0)
    a7ac:	02e7ac23          	sw	a4,56(a5)
            if( xHandle != NULL )
    a7b0:	01c0006f          	j	a7cc <xQueueCreateCountingSemaphore+0x74>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
    a7b4:	fec42783          	lw	a5,-20(s0)
    a7b8:	00079a63          	bnez	a5,a7cc <xQueueCreateCountingSemaphore+0x74>
    a7bc:	30047073          	csrci	mstatus,8
    a7c0:	00100073          	ebreak
    a7c4:	00000013          	nop
    a7c8:	ffdff06f          	j	a7c4 <xQueueCreateCountingSemaphore+0x6c>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
    a7cc:	fec42783          	lw	a5,-20(s0)
    }
    a7d0:	00078513          	mv	a0,a5
    a7d4:	02c12083          	lw	ra,44(sp)
    a7d8:	02812403          	lw	s0,40(sp)
    a7dc:	03010113          	addi	sp,sp,48
    a7e0:	00008067          	ret

0000a7e4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
    a7e4:	fc010113          	addi	sp,sp,-64
    a7e8:	02112e23          	sw	ra,60(sp)
    a7ec:	02812c23          	sw	s0,56(sp)
    a7f0:	04010413          	addi	s0,sp,64
    a7f4:	fca42623          	sw	a0,-52(s0)
    a7f8:	fcb42423          	sw	a1,-56(s0)
    a7fc:	fcc42223          	sw	a2,-60(s0)
    a800:	fcd42023          	sw	a3,-64(s0)
    a804:	000287b7          	lui	a5,0x28
    a808:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    a80c:	fee42623          	sw	a4,-20(s0)
    a810:	00000713          	li	a4,0
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    a814:	fc042a23          	sw	zero,-44(s0)
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
    a818:	fcc42783          	lw	a5,-52(s0)
    a81c:	fcf42c23          	sw	a5,-40(s0)

    configASSERT( pxQueue );
    a820:	fd842783          	lw	a5,-40(s0)
    a824:	00079a63          	bnez	a5,a838 <xQueueGenericSend+0x54>
    a828:	30047073          	csrci	mstatus,8
    a82c:	00100073          	ebreak
    a830:	00000013          	nop
    a834:	ffdff06f          	j	a830 <xQueueGenericSend+0x4c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a838:	fc842783          	lw	a5,-56(s0)
    a83c:	00079863          	bnez	a5,a84c <xQueueGenericSend+0x68>
    a840:	fd842783          	lw	a5,-40(s0)
    a844:	0407a783          	lw	a5,64(a5)
    a848:	00079663          	bnez	a5,a854 <xQueueGenericSend+0x70>
    a84c:	00100793          	li	a5,1
    a850:	0080006f          	j	a858 <xQueueGenericSend+0x74>
    a854:	00000793          	li	a5,0
    a858:	00079a63          	bnez	a5,a86c <xQueueGenericSend+0x88>
    a85c:	30047073          	csrci	mstatus,8
    a860:	00100073          	ebreak
    a864:	00000013          	nop
    a868:	ffdff06f          	j	a864 <xQueueGenericSend+0x80>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    a86c:	fc042703          	lw	a4,-64(s0)
    a870:	00200793          	li	a5,2
    a874:	00f71a63          	bne	a4,a5,a888 <xQueueGenericSend+0xa4>
    a878:	fd842783          	lw	a5,-40(s0)
    a87c:	03c7a703          	lw	a4,60(a5)
    a880:	00100793          	li	a5,1
    a884:	00f71663          	bne	a4,a5,a890 <xQueueGenericSend+0xac>
    a888:	00100793          	li	a5,1
    a88c:	0080006f          	j	a894 <xQueueGenericSend+0xb0>
    a890:	00000793          	li	a5,0
    a894:	00079a63          	bnez	a5,a8a8 <xQueueGenericSend+0xc4>
    a898:	30047073          	csrci	mstatus,8
    a89c:	00100073          	ebreak
    a8a0:	00000013          	nop
    a8a4:	ffdff06f          	j	a8a0 <xQueueGenericSend+0xbc>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    a8a8:	b44f90ef          	jal	ra,3bec <xTaskGetSchedulerState>
    a8ac:	00050793          	mv	a5,a0
    a8b0:	00079663          	bnez	a5,a8bc <xQueueGenericSend+0xd8>
    a8b4:	fc442783          	lw	a5,-60(s0)
    a8b8:	00079663          	bnez	a5,a8c4 <xQueueGenericSend+0xe0>
    a8bc:	00100793          	li	a5,1
    a8c0:	0080006f          	j	a8c8 <xQueueGenericSend+0xe4>
    a8c4:	00000793          	li	a5,0
    a8c8:	00079a63          	bnez	a5,a8dc <xQueueGenericSend+0xf8>
    a8cc:	30047073          	csrci	mstatus,8
    a8d0:	00100073          	ebreak
    a8d4:	00000013          	nop
    a8d8:	ffdff06f          	j	a8d4 <xQueueGenericSend+0xf0>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    a8dc:	30047073          	csrci	mstatus,8
    a8e0:	000267b7          	lui	a5,0x26
    a8e4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a8e8:	00178713          	addi	a4,a5,1
    a8ec:	000267b7          	lui	a5,0x26
    a8f0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    a8f4:	fd842783          	lw	a5,-40(s0)
    a8f8:	0387a703          	lw	a4,56(a5)
    a8fc:	fd842783          	lw	a5,-40(s0)
    a900:	03c7a783          	lw	a5,60(a5)
    a904:	00f76863          	bltu	a4,a5,a914 <xQueueGenericSend+0x130>
    a908:	fc042703          	lw	a4,-64(s0)
    a90c:	00200793          	li	a5,2
    a910:	0cf71063          	bne	a4,a5,a9d0 <xQueueGenericSend+0x1ec>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    a914:	fd842783          	lw	a5,-40(s0)
    a918:	0387a783          	lw	a5,56(a5)
    a91c:	fcf42e23          	sw	a5,-36(s0)

                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    a920:	fc042603          	lw	a2,-64(s0)
    a924:	fc842583          	lw	a1,-56(s0)
    a928:	fd842503          	lw	a0,-40(s0)
    a92c:	4e4010ef          	jal	ra,be10 <prvCopyDataToQueue>
    a930:	fea42023          	sw	a0,-32(s0)

                    if( pxQueue->pxQueueSetContainer != NULL )
    a934:	fd842783          	lw	a5,-40(s0)
    a938:	0487a783          	lw	a5,72(a5)
    a93c:	02078863          	beqz	a5,a96c <xQueueGenericSend+0x188>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
    a940:	fc042703          	lw	a4,-64(s0)
    a944:	00200793          	li	a5,2
    a948:	00f71663          	bne	a4,a5,a954 <xQueueGenericSend+0x170>
    a94c:	fdc42783          	lw	a5,-36(s0)
    a950:	04079a63          	bnez	a5,a9a4 <xQueueGenericSend+0x1c0>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
    a954:	fd842503          	lw	a0,-40(s0)
    a958:	7d5010ef          	jal	ra,c92c <prvNotifyQueueSetContainer>
    a95c:	00050793          	mv	a5,a0
    a960:	04078263          	beqz	a5,a9a4 <xQueueGenericSend+0x1c0>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock. A context switch is required. */
                            queueYIELD_IF_USING_PREEMPTION();
    a964:	00000073          	ecall
    a968:	03c0006f          	j	a9a4 <xQueueGenericSend+0x1c0>
                    }
                    else
                    {
                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    a96c:	fd842783          	lw	a5,-40(s0)
    a970:	0247a783          	lw	a5,36(a5)
    a974:	02078263          	beqz	a5,a998 <xQueueGenericSend+0x1b4>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    a978:	fd842783          	lw	a5,-40(s0)
    a97c:	02478793          	addi	a5,a5,36
    a980:	00078513          	mv	a0,a5
    a984:	c64f80ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    a988:	00050793          	mv	a5,a0
    a98c:	00078c63          	beqz	a5,a9a4 <xQueueGenericSend+0x1c0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to
                                 * do this from within the critical section - the
                                 * kernel takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
    a990:	00000073          	ecall
    a994:	0100006f          	j	a9a4 <xQueueGenericSend+0x1c0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
    a998:	fe042783          	lw	a5,-32(s0)
    a99c:	00078463          	beqz	a5,a9a4 <xQueueGenericSend+0x1c0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes
                             * and the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
    a9a0:	00000073          	ecall
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
    a9a4:	000267b7          	lui	a5,0x26
    a9a8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a9ac:	fff78713          	addi	a4,a5,-1
    a9b0:	000267b7          	lui	a5,0x26
    a9b4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    a9b8:	000267b7          	lui	a5,0x26
    a9bc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a9c0:	00079463          	bnez	a5,a9c8 <xQueueGenericSend+0x1e4>
    a9c4:	30046073          	csrsi	mstatus,8
                return pdPASS;
    a9c8:	00100793          	li	a5,1
    a9cc:	1780006f          	j	ab44 <xQueueGenericSend+0x360>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    a9d0:	fc442783          	lw	a5,-60(s0)
    a9d4:	02079863          	bnez	a5,aa04 <xQueueGenericSend+0x220>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    a9d8:	000267b7          	lui	a5,0x26
    a9dc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a9e0:	fff78713          	addi	a4,a5,-1
    a9e4:	000267b7          	lui	a5,0x26
    a9e8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    a9ec:	000267b7          	lui	a5,0x26
    a9f0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    a9f4:	00079463          	bnez	a5,a9fc <xQueueGenericSend+0x218>
    a9f8:	30046073          	csrsi	mstatus,8

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
    a9fc:	00000793          	li	a5,0
    aa00:	1440006f          	j	ab44 <xQueueGenericSend+0x360>
                }
                else if( xEntryTimeSet == pdFALSE )
    aa04:	fd442783          	lw	a5,-44(s0)
    aa08:	00079c63          	bnez	a5,aa20 <xQueueGenericSend+0x23c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    aa0c:	fe440793          	addi	a5,s0,-28
    aa10:	00078513          	mv	a0,a5
    aa14:	9edf80ef          	jal	ra,3400 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    aa18:	00100793          	li	a5,1
    aa1c:	fcf42a23          	sw	a5,-44(s0)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    aa20:	000267b7          	lui	a5,0x26
    aa24:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    aa28:	fff78713          	addi	a4,a5,-1
    aa2c:	000267b7          	lui	a5,0x26
    aa30:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    aa34:	000267b7          	lui	a5,0x26
    aa38:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    aa3c:	00079463          	bnez	a5,aa44 <xQueueGenericSend+0x260>
    aa40:	30046073          	csrsi	mstatus,8

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    aa44:	848f70ef          	jal	ra,1a8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    aa48:	30047073          	csrci	mstatus,8
    aa4c:	000267b7          	lui	a5,0x26
    aa50:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    aa54:	00178713          	addi	a4,a5,1
    aa58:	000267b7          	lui	a5,0x26
    aa5c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    aa60:	fd842783          	lw	a5,-40(s0)
    aa64:	0447c783          	lbu	a5,68(a5)
    aa68:	01879713          	slli	a4,a5,0x18
    aa6c:	41875713          	srai	a4,a4,0x18
    aa70:	fff00793          	li	a5,-1
    aa74:	00f71663          	bne	a4,a5,aa80 <xQueueGenericSend+0x29c>
    aa78:	fd842783          	lw	a5,-40(s0)
    aa7c:	04078223          	sb	zero,68(a5)
    aa80:	fd842783          	lw	a5,-40(s0)
    aa84:	0457c783          	lbu	a5,69(a5)
    aa88:	01879713          	slli	a4,a5,0x18
    aa8c:	41875713          	srai	a4,a4,0x18
    aa90:	fff00793          	li	a5,-1
    aa94:	00f71663          	bne	a4,a5,aaa0 <xQueueGenericSend+0x2bc>
    aa98:	fd842783          	lw	a5,-40(s0)
    aa9c:	040782a3          	sb	zero,69(a5)
    aaa0:	000267b7          	lui	a5,0x26
    aaa4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    aaa8:	fff78713          	addi	a4,a5,-1
    aaac:	000267b7          	lui	a5,0x26
    aab0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    aab4:	000267b7          	lui	a5,0x26
    aab8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    aabc:	00079463          	bnez	a5,aac4 <xQueueGenericSend+0x2e0>
    aac0:	30046073          	csrsi	mstatus,8

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    aac4:	fc440713          	addi	a4,s0,-60
    aac8:	fe440793          	addi	a5,s0,-28
    aacc:	00070593          	mv	a1,a4
    aad0:	00078513          	mv	a0,a5
    aad4:	96df80ef          	jal	ra,3440 <xTaskCheckForTimeOut>
    aad8:	00050793          	mv	a5,a0
    aadc:	04079c63          	bnez	a5,ab34 <xQueueGenericSend+0x350>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
    aae0:	fd842503          	lw	a0,-40(s0)
    aae4:	7b8010ef          	jal	ra,c29c <prvIsQueueFull>
    aae8:	00050793          	mv	a5,a0
    aaec:	02078c63          	beqz	a5,ab24 <xQueueGenericSend+0x340>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    aaf0:	fd842783          	lw	a5,-40(s0)
    aaf4:	01078793          	addi	a5,a5,16
    aaf8:	fc442703          	lw	a4,-60(s0)
    aafc:	00070593          	mv	a1,a4
    ab00:	00078513          	mv	a0,a5
    ab04:	890f80ef          	jal	ra,2b94 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
    ab08:	fd842503          	lw	a0,-40(s0)
    ab0c:	528010ef          	jal	ra,c034 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
    ab10:	fadf60ef          	jal	ra,1abc <xTaskResumeAll>
    ab14:	00050793          	mv	a5,a0
    ab18:	dc0792e3          	bnez	a5,a8dc <xQueueGenericSend+0xf8>
                {
                    portYIELD_WITHIN_API();
    ab1c:	00000073          	ecall
    ab20:	dbdff06f          	j	a8dc <xQueueGenericSend+0xf8>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
    ab24:	fd842503          	lw	a0,-40(s0)
    ab28:	50c010ef          	jal	ra,c034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    ab2c:	f91f60ef          	jal	ra,1abc <xTaskResumeAll>
    ab30:	dadff06f          	j	a8dc <xQueueGenericSend+0xf8>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
    ab34:	fd842503          	lw	a0,-40(s0)
    ab38:	4fc010ef          	jal	ra,c034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    ab3c:	f81f60ef          	jal	ra,1abc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
    ab40:	00000793          	li	a5,0
        }
    } /*lint -restore */
}
    ab44:	00078713          	mv	a4,a5
    ab48:	000287b7          	lui	a5,0x28
    ab4c:	fec42683          	lw	a3,-20(s0)
    ab50:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    ab54:	00f6c7b3          	xor	a5,a3,a5
    ab58:	00000693          	li	a3,0
    ab5c:	00078463          	beqz	a5,ab64 <xQueueGenericSend+0x380>
    ab60:	13c030ef          	jal	ra,dc9c <__stack_chk_fail>
    ab64:	00070513          	mv	a0,a4
    ab68:	03c12083          	lw	ra,60(sp)
    ab6c:	03812403          	lw	s0,56(sp)
    ab70:	04010113          	addi	sp,sp,64
    ab74:	00008067          	ret

0000ab78 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
    ab78:	fc010113          	addi	sp,sp,-64
    ab7c:	02112e23          	sw	ra,60(sp)
    ab80:	02812c23          	sw	s0,56(sp)
    ab84:	04010413          	addi	s0,sp,64
    ab88:	fca42623          	sw	a0,-52(s0)
    ab8c:	fcb42423          	sw	a1,-56(s0)
    ab90:	fcc42223          	sw	a2,-60(s0)
    ab94:	fcd42023          	sw	a3,-64(s0)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
    ab98:	fcc42783          	lw	a5,-52(s0)
    ab9c:	fef42023          	sw	a5,-32(s0)

    configASSERT( pxQueue );
    aba0:	fe042783          	lw	a5,-32(s0)
    aba4:	00079a63          	bnez	a5,abb8 <xQueueGenericSendFromISR+0x40>
    aba8:	30047073          	csrci	mstatus,8
    abac:	00100073          	ebreak
    abb0:	00000013          	nop
    abb4:	ffdff06f          	j	abb0 <xQueueGenericSendFromISR+0x38>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    abb8:	fc842783          	lw	a5,-56(s0)
    abbc:	00079863          	bnez	a5,abcc <xQueueGenericSendFromISR+0x54>
    abc0:	fe042783          	lw	a5,-32(s0)
    abc4:	0407a783          	lw	a5,64(a5)
    abc8:	00079663          	bnez	a5,abd4 <xQueueGenericSendFromISR+0x5c>
    abcc:	00100793          	li	a5,1
    abd0:	0080006f          	j	abd8 <xQueueGenericSendFromISR+0x60>
    abd4:	00000793          	li	a5,0
    abd8:	00079a63          	bnez	a5,abec <xQueueGenericSendFromISR+0x74>
    abdc:	30047073          	csrci	mstatus,8
    abe0:	00100073          	ebreak
    abe4:	00000013          	nop
    abe8:	ffdff06f          	j	abe4 <xQueueGenericSendFromISR+0x6c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    abec:	fc042703          	lw	a4,-64(s0)
    abf0:	00200793          	li	a5,2
    abf4:	00f71a63          	bne	a4,a5,ac08 <xQueueGenericSendFromISR+0x90>
    abf8:	fe042783          	lw	a5,-32(s0)
    abfc:	03c7a703          	lw	a4,60(a5)
    ac00:	00100793          	li	a5,1
    ac04:	00f71663          	bne	a4,a5,ac10 <xQueueGenericSendFromISR+0x98>
    ac08:	00100793          	li	a5,1
    ac0c:	0080006f          	j	ac14 <xQueueGenericSendFromISR+0x9c>
    ac10:	00000793          	li	a5,0
    ac14:	00079a63          	bnez	a5,ac28 <xQueueGenericSendFromISR+0xb0>
    ac18:	30047073          	csrci	mstatus,8
    ac1c:	00100073          	ebreak
    ac20:	00000013          	nop
    ac24:	ffdff06f          	j	ac20 <xQueueGenericSendFromISR+0xa8>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    ac28:	fe042223          	sw	zero,-28(s0)
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    ac2c:	fe042783          	lw	a5,-32(s0)
    ac30:	0387a703          	lw	a4,56(a5)
    ac34:	fe042783          	lw	a5,-32(s0)
    ac38:	03c7a783          	lw	a5,60(a5)
    ac3c:	00f76863          	bltu	a4,a5,ac4c <xQueueGenericSendFromISR+0xd4>
    ac40:	fc042703          	lw	a4,-64(s0)
    ac44:	00200793          	li	a5,2
    ac48:	10f71a63          	bne	a4,a5,ad5c <xQueueGenericSendFromISR+0x1e4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    ac4c:	fe042783          	lw	a5,-32(s0)
    ac50:	0457c783          	lbu	a5,69(a5)
    ac54:	fcf40da3          	sb	a5,-37(s0)
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
    ac58:	fe042783          	lw	a5,-32(s0)
    ac5c:	0387a783          	lw	a5,56(a5)
    ac60:	fef42423          	sw	a5,-24(s0)
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    ac64:	fc042603          	lw	a2,-64(s0)
    ac68:	fc842583          	lw	a1,-56(s0)
    ac6c:	fe042503          	lw	a0,-32(s0)
    ac70:	1a0010ef          	jal	ra,be10 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    ac74:	fdb40703          	lb	a4,-37(s0)
    ac78:	fff00793          	li	a5,-1
    ac7c:	08f71463          	bne	a4,a5,ad04 <xQueueGenericSendFromISR+0x18c>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
    ac80:	fe042783          	lw	a5,-32(s0)
    ac84:	0487a783          	lw	a5,72(a5)
    ac88:	04078063          	beqz	a5,acc8 <xQueueGenericSendFromISR+0x150>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
    ac8c:	fc042703          	lw	a4,-64(s0)
    ac90:	00200793          	li	a5,2
    ac94:	00f71663          	bne	a4,a5,aca0 <xQueueGenericSendFromISR+0x128>
    ac98:	fe842783          	lw	a5,-24(s0)
    ac9c:	0a079a63          	bnez	a5,ad50 <xQueueGenericSendFromISR+0x1d8>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
    aca0:	fe042503          	lw	a0,-32(s0)
    aca4:	489010ef          	jal	ra,c92c <prvNotifyQueueSetContainer>
    aca8:	00050793          	mv	a5,a0
    acac:	0a078263          	beqz	a5,ad50 <xQueueGenericSendFromISR+0x1d8>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock.  A context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    acb0:	fc442783          	lw	a5,-60(s0)
    acb4:	08078e63          	beqz	a5,ad50 <xQueueGenericSendFromISR+0x1d8>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    acb8:	fc442783          	lw	a5,-60(s0)
    acbc:	00100713          	li	a4,1
    acc0:	00e7a023          	sw	a4,0(a5)
    acc4:	08c0006f          	j	ad50 <xQueueGenericSendFromISR+0x1d8>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    acc8:	fe042783          	lw	a5,-32(s0)
    accc:	0247a783          	lw	a5,36(a5)
    acd0:	08078063          	beqz	a5,ad50 <xQueueGenericSendFromISR+0x1d8>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    acd4:	fe042783          	lw	a5,-32(s0)
    acd8:	02478793          	addi	a5,a5,36
    acdc:	00078513          	mv	a0,a5
    ace0:	908f80ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    ace4:	00050793          	mv	a5,a0
    ace8:	06078463          	beqz	a5,ad50 <xQueueGenericSendFromISR+0x1d8>
                            {
                                /* The task waiting has a higher priority so
                                 *  record that a context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
    acec:	fc442783          	lw	a5,-60(s0)
    acf0:	06078063          	beqz	a5,ad50 <xQueueGenericSendFromISR+0x1d8>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
    acf4:	fc442783          	lw	a5,-60(s0)
    acf8:	00100713          	li	a4,1
    acfc:	00e7a023          	sw	a4,0(a5)
    ad00:	0500006f          	j	ad50 <xQueueGenericSendFromISR+0x1d8>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    ad04:	970f70ef          	jal	ra,1e74 <uxTaskGetNumberOfTasks>
    ad08:	fea42623          	sw	a0,-20(s0)
    ad0c:	fdb40783          	lb	a5,-37(s0)
    ad10:	fec42703          	lw	a4,-20(s0)
    ad14:	02e7fe63          	bgeu	a5,a4,ad50 <xQueueGenericSendFromISR+0x1d8>
    ad18:	fdb40703          	lb	a4,-37(s0)
    ad1c:	07f00793          	li	a5,127
    ad20:	00f71a63          	bne	a4,a5,ad34 <xQueueGenericSendFromISR+0x1bc>
    ad24:	30047073          	csrci	mstatus,8
    ad28:	00100073          	ebreak
    ad2c:	00000013          	nop
    ad30:	ffdff06f          	j	ad2c <xQueueGenericSendFromISR+0x1b4>
    ad34:	fdb44783          	lbu	a5,-37(s0)
    ad38:	00178793          	addi	a5,a5,1
    ad3c:	0ff7f793          	zext.b	a5,a5
    ad40:	01879713          	slli	a4,a5,0x18
    ad44:	41875713          	srai	a4,a4,0x18
    ad48:	fe042783          	lw	a5,-32(s0)
    ad4c:	04e782a3          	sb	a4,69(a5)
            }

            xReturn = pdPASS;
    ad50:	00100793          	li	a5,1
    ad54:	fcf42e23          	sw	a5,-36(s0)
        {
    ad58:	0080006f          	j	ad60 <xQueueGenericSendFromISR+0x1e8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    ad5c:	fc042e23          	sw	zero,-36(s0)
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
    ad60:	fdc42783          	lw	a5,-36(s0)
}
    ad64:	00078513          	mv	a0,a5
    ad68:	03c12083          	lw	ra,60(sp)
    ad6c:	03812403          	lw	s0,56(sp)
    ad70:	04010113          	addi	sp,sp,64
    ad74:	00008067          	ret

0000ad78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
    ad78:	fc010113          	addi	sp,sp,-64
    ad7c:	02112e23          	sw	ra,60(sp)
    ad80:	02812c23          	sw	s0,56(sp)
    ad84:	04010413          	addi	s0,sp,64
    ad88:	fca42623          	sw	a0,-52(s0)
    ad8c:	fcb42423          	sw	a1,-56(s0)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
    ad90:	fcc42783          	lw	a5,-52(s0)
    ad94:	fef42023          	sw	a5,-32(s0)
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
    ad98:	fe042783          	lw	a5,-32(s0)
    ad9c:	00079a63          	bnez	a5,adb0 <xQueueGiveFromISR+0x38>
    ada0:	30047073          	csrci	mstatus,8
    ada4:	00100073          	ebreak
    ada8:	00000013          	nop
    adac:	ffdff06f          	j	ada8 <xQueueGiveFromISR+0x30>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
    adb0:	fe042783          	lw	a5,-32(s0)
    adb4:	0407a783          	lw	a5,64(a5)
    adb8:	00078a63          	beqz	a5,adcc <xQueueGiveFromISR+0x54>
    adbc:	30047073          	csrci	mstatus,8
    adc0:	00100073          	ebreak
    adc4:	00000013          	nop
    adc8:	ffdff06f          	j	adc4 <xQueueGiveFromISR+0x4c>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
    adcc:	fe042783          	lw	a5,-32(s0)
    add0:	0007a783          	lw	a5,0(a5)
    add4:	00079863          	bnez	a5,ade4 <xQueueGiveFromISR+0x6c>
    add8:	fe042783          	lw	a5,-32(s0)
    addc:	0087a783          	lw	a5,8(a5)
    ade0:	00079663          	bnez	a5,adec <xQueueGiveFromISR+0x74>
    ade4:	00100793          	li	a5,1
    ade8:	0080006f          	j	adf0 <xQueueGiveFromISR+0x78>
    adec:	00000793          	li	a5,0
    adf0:	00079a63          	bnez	a5,ae04 <xQueueGiveFromISR+0x8c>
    adf4:	30047073          	csrci	mstatus,8
    adf8:	00100073          	ebreak
    adfc:	00000013          	nop
    ae00:	ffdff06f          	j	adfc <xQueueGiveFromISR+0x84>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    ae04:	fe042223          	sw	zero,-28(s0)
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    ae08:	fe042783          	lw	a5,-32(s0)
    ae0c:	0387a783          	lw	a5,56(a5)
    ae10:	fef42423          	sw	a5,-24(s0)

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
    ae14:	fe042783          	lw	a5,-32(s0)
    ae18:	03c7a783          	lw	a5,60(a5)
    ae1c:	fe842703          	lw	a4,-24(s0)
    ae20:	0ef77a63          	bgeu	a4,a5,af14 <xQueueGiveFromISR+0x19c>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
    ae24:	fe042783          	lw	a5,-32(s0)
    ae28:	0457c783          	lbu	a5,69(a5)
    ae2c:	fcf40da3          	sb	a5,-37(s0)
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    ae30:	fe842783          	lw	a5,-24(s0)
    ae34:	00178713          	addi	a4,a5,1
    ae38:	fe042783          	lw	a5,-32(s0)
    ae3c:	02e7ac23          	sw	a4,56(a5)

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
    ae40:	fdb40703          	lb	a4,-37(s0)
    ae44:	fff00793          	li	a5,-1
    ae48:	06f71a63          	bne	a4,a5,aebc <xQueueGiveFromISR+0x144>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
    ae4c:	fe042783          	lw	a5,-32(s0)
    ae50:	0487a783          	lw	a5,72(a5)
    ae54:	02078663          	beqz	a5,ae80 <xQueueGiveFromISR+0x108>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
    ae58:	fe042503          	lw	a0,-32(s0)
    ae5c:	2d1010ef          	jal	ra,c92c <prvNotifyQueueSetContainer>
    ae60:	00050793          	mv	a5,a0
    ae64:	0a078263          	beqz	a5,af08 <xQueueGiveFromISR+0x190>
                        {
                            /* The semaphore is a member of a queue set, and
                             * posting to the queue set caused a higher priority
                             * task to unblock.  A context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
    ae68:	fc842783          	lw	a5,-56(s0)
    ae6c:	08078e63          	beqz	a5,af08 <xQueueGiveFromISR+0x190>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
    ae70:	fc842783          	lw	a5,-56(s0)
    ae74:	00100713          	li	a4,1
    ae78:	00e7a023          	sw	a4,0(a5)
    ae7c:	08c0006f          	j	af08 <xQueueGiveFromISR+0x190>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ae80:	fe042783          	lw	a5,-32(s0)
    ae84:	0247a783          	lw	a5,36(a5)
    ae88:	08078063          	beqz	a5,af08 <xQueueGiveFromISR+0x190>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ae8c:	fe042783          	lw	a5,-32(s0)
    ae90:	02478793          	addi	a5,a5,36
    ae94:	00078513          	mv	a0,a5
    ae98:	f51f70ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    ae9c:	00050793          	mv	a5,a0
    aea0:	06078463          	beqz	a5,af08 <xQueueGiveFromISR+0x190>
                            {
                                /* The task waiting has a higher priority so
                                 *  record that a context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
    aea4:	fc842783          	lw	a5,-56(s0)
    aea8:	06078063          	beqz	a5,af08 <xQueueGiveFromISR+0x190>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
    aeac:	fc842783          	lw	a5,-56(s0)
    aeb0:	00100713          	li	a4,1
    aeb4:	00e7a023          	sw	a4,0(a5)
    aeb8:	0500006f          	j	af08 <xQueueGiveFromISR+0x190>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
    aebc:	fb9f60ef          	jal	ra,1e74 <uxTaskGetNumberOfTasks>
    aec0:	fea42623          	sw	a0,-20(s0)
    aec4:	fdb40783          	lb	a5,-37(s0)
    aec8:	fec42703          	lw	a4,-20(s0)
    aecc:	02e7fe63          	bgeu	a5,a4,af08 <xQueueGiveFromISR+0x190>
    aed0:	fdb40703          	lb	a4,-37(s0)
    aed4:	07f00793          	li	a5,127
    aed8:	00f71a63          	bne	a4,a5,aeec <xQueueGiveFromISR+0x174>
    aedc:	30047073          	csrci	mstatus,8
    aee0:	00100073          	ebreak
    aee4:	00000013          	nop
    aee8:	ffdff06f          	j	aee4 <xQueueGiveFromISR+0x16c>
    aeec:	fdb44783          	lbu	a5,-37(s0)
    aef0:	00178793          	addi	a5,a5,1
    aef4:	0ff7f793          	zext.b	a5,a5
    aef8:	01879713          	slli	a4,a5,0x18
    aefc:	41875713          	srai	a4,a4,0x18
    af00:	fe042783          	lw	a5,-32(s0)
    af04:	04e782a3          	sb	a4,69(a5)
            }

            xReturn = pdPASS;
    af08:	00100793          	li	a5,1
    af0c:	fcf42e23          	sw	a5,-36(s0)
    af10:	0080006f          	j	af18 <xQueueGiveFromISR+0x1a0>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
    af14:	fc042e23          	sw	zero,-36(s0)
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
    af18:	fdc42783          	lw	a5,-36(s0)
}
    af1c:	00078513          	mv	a0,a5
    af20:	03c12083          	lw	ra,60(sp)
    af24:	03812403          	lw	s0,56(sp)
    af28:	04010113          	addi	sp,sp,64
    af2c:	00008067          	ret

0000af30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
    af30:	fc010113          	addi	sp,sp,-64
    af34:	02112e23          	sw	ra,60(sp)
    af38:	02812c23          	sw	s0,56(sp)
    af3c:	04010413          	addi	s0,sp,64
    af40:	fca42623          	sw	a0,-52(s0)
    af44:	fcb42423          	sw	a1,-56(s0)
    af48:	fcc42223          	sw	a2,-60(s0)
    af4c:	000287b7          	lui	a5,0x28
    af50:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    af54:	fee42623          	sw	a4,-20(s0)
    af58:	00000713          	li	a4,0
    BaseType_t xEntryTimeSet = pdFALSE;
    af5c:	fc042c23          	sw	zero,-40(s0)
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
    af60:	fcc42783          	lw	a5,-52(s0)
    af64:	fcf42e23          	sw	a5,-36(s0)

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
    af68:	fdc42783          	lw	a5,-36(s0)
    af6c:	00079a63          	bnez	a5,af80 <xQueueReceive+0x50>
    af70:	30047073          	csrci	mstatus,8
    af74:	00100073          	ebreak
    af78:	00000013          	nop
    af7c:	ffdff06f          	j	af78 <xQueueReceive+0x48>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    af80:	fc842783          	lw	a5,-56(s0)
    af84:	00079863          	bnez	a5,af94 <xQueueReceive+0x64>
    af88:	fdc42783          	lw	a5,-36(s0)
    af8c:	0407a783          	lw	a5,64(a5)
    af90:	00079663          	bnez	a5,af9c <xQueueReceive+0x6c>
    af94:	00100793          	li	a5,1
    af98:	0080006f          	j	afa0 <xQueueReceive+0x70>
    af9c:	00000793          	li	a5,0
    afa0:	00079a63          	bnez	a5,afb4 <xQueueReceive+0x84>
    afa4:	30047073          	csrci	mstatus,8
    afa8:	00100073          	ebreak
    afac:	00000013          	nop
    afb0:	ffdff06f          	j	afac <xQueueReceive+0x7c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    afb4:	c39f80ef          	jal	ra,3bec <xTaskGetSchedulerState>
    afb8:	00050793          	mv	a5,a0
    afbc:	00079663          	bnez	a5,afc8 <xQueueReceive+0x98>
    afc0:	fc442783          	lw	a5,-60(s0)
    afc4:	00079663          	bnez	a5,afd0 <xQueueReceive+0xa0>
    afc8:	00100793          	li	a5,1
    afcc:	0080006f          	j	afd4 <xQueueReceive+0xa4>
    afd0:	00000793          	li	a5,0
    afd4:	00079a63          	bnez	a5,afe8 <xQueueReceive+0xb8>
    afd8:	30047073          	csrci	mstatus,8
    afdc:	00100073          	ebreak
    afe0:	00000013          	nop
    afe4:	ffdff06f          	j	afe0 <xQueueReceive+0xb0>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    afe8:	30047073          	csrci	mstatus,8
    afec:	000267b7          	lui	a5,0x26
    aff0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    aff4:	00178713          	addi	a4,a5,1
    aff8:	000267b7          	lui	a5,0x26
    affc:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b000:	fdc42783          	lw	a5,-36(s0)
    b004:	0387a783          	lw	a5,56(a5)
    b008:	fef42023          	sw	a5,-32(s0)

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b00c:	fe042783          	lw	a5,-32(s0)
    b010:	06078a63          	beqz	a5,b084 <xQueueReceive+0x154>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
    b014:	fc842583          	lw	a1,-56(s0)
    b018:	fdc42503          	lw	a0,-36(s0)
    b01c:	781000ef          	jal	ra,bf9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    b020:	fe042783          	lw	a5,-32(s0)
    b024:	fff78713          	addi	a4,a5,-1
    b028:	fdc42783          	lw	a5,-36(s0)
    b02c:	02e7ac23          	sw	a4,56(a5)

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b030:	fdc42783          	lw	a5,-36(s0)
    b034:	0107a783          	lw	a5,16(a5)
    b038:	02078063          	beqz	a5,b058 <xQueueReceive+0x128>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b03c:	fdc42783          	lw	a5,-36(s0)
    b040:	01078793          	addi	a5,a5,16
    b044:	00078513          	mv	a0,a5
    b048:	da1f70ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    b04c:	00050793          	mv	a5,a0
    b050:	00078463          	beqz	a5,b058 <xQueueReceive+0x128>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    b054:	00000073          	ecall
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    b058:	000267b7          	lui	a5,0x26
    b05c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b060:	fff78713          	addi	a4,a5,-1
    b064:	000267b7          	lui	a5,0x26
    b068:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b06c:	000267b7          	lui	a5,0x26
    b070:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b074:	00079463          	bnez	a5,b07c <xQueueReceive+0x14c>
    b078:	30046073          	csrsi	mstatus,8
                return pdPASS;
    b07c:	00100793          	li	a5,1
    b080:	1880006f          	j	b208 <xQueueReceive+0x2d8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    b084:	fc442783          	lw	a5,-60(s0)
    b088:	02079863          	bnez	a5,b0b8 <xQueueReceive+0x188>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    b08c:	000267b7          	lui	a5,0x26
    b090:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b094:	fff78713          	addi	a4,a5,-1
    b098:	000267b7          	lui	a5,0x26
    b09c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b0a0:	000267b7          	lui	a5,0x26
    b0a4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b0a8:	00079463          	bnez	a5,b0b0 <xQueueReceive+0x180>
    b0ac:	30046073          	csrsi	mstatus,8
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    b0b0:	00000793          	li	a5,0
    b0b4:	1540006f          	j	b208 <xQueueReceive+0x2d8>
                }
                else if( xEntryTimeSet == pdFALSE )
    b0b8:	fd842783          	lw	a5,-40(s0)
    b0bc:	00079c63          	bnez	a5,b0d4 <xQueueReceive+0x1a4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    b0c0:	fe440793          	addi	a5,s0,-28
    b0c4:	00078513          	mv	a0,a5
    b0c8:	b38f80ef          	jal	ra,3400 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    b0cc:	00100793          	li	a5,1
    b0d0:	fcf42c23          	sw	a5,-40(s0)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    b0d4:	000267b7          	lui	a5,0x26
    b0d8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b0dc:	fff78713          	addi	a4,a5,-1
    b0e0:	000267b7          	lui	a5,0x26
    b0e4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b0e8:	000267b7          	lui	a5,0x26
    b0ec:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b0f0:	00079463          	bnez	a5,b0f8 <xQueueReceive+0x1c8>
    b0f4:	30046073          	csrsi	mstatus,8

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
    b0f8:	995f60ef          	jal	ra,1a8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    b0fc:	30047073          	csrci	mstatus,8
    b100:	000267b7          	lui	a5,0x26
    b104:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b108:	00178713          	addi	a4,a5,1
    b10c:	000267b7          	lui	a5,0x26
    b110:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b114:	fdc42783          	lw	a5,-36(s0)
    b118:	0447c783          	lbu	a5,68(a5)
    b11c:	01879713          	slli	a4,a5,0x18
    b120:	41875713          	srai	a4,a4,0x18
    b124:	fff00793          	li	a5,-1
    b128:	00f71663          	bne	a4,a5,b134 <xQueueReceive+0x204>
    b12c:	fdc42783          	lw	a5,-36(s0)
    b130:	04078223          	sb	zero,68(a5)
    b134:	fdc42783          	lw	a5,-36(s0)
    b138:	0457c783          	lbu	a5,69(a5)
    b13c:	01879713          	slli	a4,a5,0x18
    b140:	41875713          	srai	a4,a4,0x18
    b144:	fff00793          	li	a5,-1
    b148:	00f71663          	bne	a4,a5,b154 <xQueueReceive+0x224>
    b14c:	fdc42783          	lw	a5,-36(s0)
    b150:	040782a3          	sb	zero,69(a5)
    b154:	000267b7          	lui	a5,0x26
    b158:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b15c:	fff78713          	addi	a4,a5,-1
    b160:	000267b7          	lui	a5,0x26
    b164:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b168:	000267b7          	lui	a5,0x26
    b16c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b170:	00079463          	bnez	a5,b178 <xQueueReceive+0x248>
    b174:	30046073          	csrsi	mstatus,8

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b178:	fc440713          	addi	a4,s0,-60
    b17c:	fe440793          	addi	a5,s0,-28
    b180:	00070593          	mv	a1,a4
    b184:	00078513          	mv	a0,a5
    b188:	ab8f80ef          	jal	ra,3440 <xTaskCheckForTimeOut>
    b18c:	00050793          	mv	a5,a0
    b190:	04079c63          	bnez	a5,b1e8 <xQueueReceive+0x2b8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b194:	fdc42503          	lw	a0,-36(s0)
    b198:	028010ef          	jal	ra,c1c0 <prvIsQueueEmpty>
    b19c:	00050793          	mv	a5,a0
    b1a0:	02078c63          	beqz	a5,b1d8 <xQueueReceive+0x2a8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b1a4:	fdc42783          	lw	a5,-36(s0)
    b1a8:	02478793          	addi	a5,a5,36
    b1ac:	fc442703          	lw	a4,-60(s0)
    b1b0:	00070593          	mv	a1,a4
    b1b4:	00078513          	mv	a0,a5
    b1b8:	9ddf70ef          	jal	ra,2b94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    b1bc:	fdc42503          	lw	a0,-36(s0)
    b1c0:	675000ef          	jal	ra,c034 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    b1c4:	8f9f60ef          	jal	ra,1abc <xTaskResumeAll>
    b1c8:	00050793          	mv	a5,a0
    b1cc:	e0079ee3          	bnez	a5,afe8 <xQueueReceive+0xb8>
                {
                    portYIELD_WITHIN_API();
    b1d0:	00000073          	ecall
    b1d4:	e15ff06f          	j	afe8 <xQueueReceive+0xb8>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
    b1d8:	fdc42503          	lw	a0,-36(s0)
    b1dc:	659000ef          	jal	ra,c034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    b1e0:	8ddf60ef          	jal	ra,1abc <xTaskResumeAll>
    b1e4:	e05ff06f          	j	afe8 <xQueueReceive+0xb8>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
    b1e8:	fdc42503          	lw	a0,-36(s0)
    b1ec:	649000ef          	jal	ra,c034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    b1f0:	8cdf60ef          	jal	ra,1abc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b1f4:	fdc42503          	lw	a0,-36(s0)
    b1f8:	7c9000ef          	jal	ra,c1c0 <prvIsQueueEmpty>
    b1fc:	00050793          	mv	a5,a0
    b200:	de0784e3          	beqz	a5,afe8 <xQueueReceive+0xb8>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    b204:	00000793          	li	a5,0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    b208:	00078713          	mv	a4,a5
    b20c:	000287b7          	lui	a5,0x28
    b210:	fec42683          	lw	a3,-20(s0)
    b214:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    b218:	00f6c7b3          	xor	a5,a3,a5
    b21c:	00000693          	li	a3,0
    b220:	00078463          	beqz	a5,b228 <xQueueReceive+0x2f8>
    b224:	279020ef          	jal	ra,dc9c <__stack_chk_fail>
    b228:	00070513          	mv	a0,a4
    b22c:	03c12083          	lw	ra,60(sp)
    b230:	03812403          	lw	s0,56(sp)
    b234:	04010113          	addi	sp,sp,64
    b238:	00008067          	ret

0000b23c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    b23c:	fc010113          	addi	sp,sp,-64
    b240:	02112e23          	sw	ra,60(sp)
    b244:	02812c23          	sw	s0,56(sp)
    b248:	04010413          	addi	s0,sp,64
    b24c:	fca42623          	sw	a0,-52(s0)
    b250:	fcb42423          	sw	a1,-56(s0)
    b254:	000287b7          	lui	a5,0x28
    b258:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    b25c:	fee42623          	sw	a4,-20(s0)
    b260:	00000713          	li	a4,0
    BaseType_t xEntryTimeSet = pdFALSE;
    b264:	fc042823          	sw	zero,-48(s0)
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
    b268:	fcc42783          	lw	a5,-52(s0)
    b26c:	fcf42c23          	sw	a5,-40(s0)

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
    b270:	fc042a23          	sw	zero,-44(s0)
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
    b274:	fd842783          	lw	a5,-40(s0)
    b278:	00079a63          	bnez	a5,b28c <xQueueSemaphoreTake+0x50>
    b27c:	30047073          	csrci	mstatus,8
    b280:	00100073          	ebreak
    b284:	00000013          	nop
    b288:	ffdff06f          	j	b284 <xQueueSemaphoreTake+0x48>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
    b28c:	fd842783          	lw	a5,-40(s0)
    b290:	0407a783          	lw	a5,64(a5)
    b294:	00078a63          	beqz	a5,b2a8 <xQueueSemaphoreTake+0x6c>
    b298:	30047073          	csrci	mstatus,8
    b29c:	00100073          	ebreak
    b2a0:	00000013          	nop
    b2a4:	ffdff06f          	j	b2a0 <xQueueSemaphoreTake+0x64>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b2a8:	945f80ef          	jal	ra,3bec <xTaskGetSchedulerState>
    b2ac:	00050793          	mv	a5,a0
    b2b0:	00079663          	bnez	a5,b2bc <xQueueSemaphoreTake+0x80>
    b2b4:	fc842783          	lw	a5,-56(s0)
    b2b8:	00079663          	bnez	a5,b2c4 <xQueueSemaphoreTake+0x88>
    b2bc:	00100793          	li	a5,1
    b2c0:	0080006f          	j	b2c8 <xQueueSemaphoreTake+0x8c>
    b2c4:	00000793          	li	a5,0
    b2c8:	00079a63          	bnez	a5,b2dc <xQueueSemaphoreTake+0xa0>
    b2cc:	30047073          	csrci	mstatus,8
    b2d0:	00100073          	ebreak
    b2d4:	00000013          	nop
    b2d8:	ffdff06f          	j	b2d4 <xQueueSemaphoreTake+0x98>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    b2dc:	30047073          	csrci	mstatus,8
    b2e0:	000267b7          	lui	a5,0x26
    b2e4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b2e8:	00178713          	addi	a4,a5,1
    b2ec:	000267b7          	lui	a5,0x26
    b2f0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    b2f4:	fd842783          	lw	a5,-40(s0)
    b2f8:	0387a783          	lw	a5,56(a5)
    b2fc:	fcf42e23          	sw	a5,-36(s0)

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    b300:	fdc42783          	lw	a5,-36(s0)
    b304:	08078263          	beqz	a5,b388 <xQueueSemaphoreTake+0x14c>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    b308:	fdc42783          	lw	a5,-36(s0)
    b30c:	fff78713          	addi	a4,a5,-1
    b310:	fd842783          	lw	a5,-40(s0)
    b314:	02e7ac23          	sw	a4,56(a5)

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b318:	fd842783          	lw	a5,-40(s0)
    b31c:	0007a783          	lw	a5,0(a5)
    b320:	00079a63          	bnez	a5,b334 <xQueueSemaphoreTake+0xf8>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
    b324:	858f90ef          	jal	ra,437c <pvTaskIncrementMutexHeldCount>
    b328:	00050713          	mv	a4,a0
    b32c:	fd842783          	lw	a5,-40(s0)
    b330:	00e7a423          	sw	a4,8(a5)
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b334:	fd842783          	lw	a5,-40(s0)
    b338:	0107a783          	lw	a5,16(a5)
    b33c:	02078063          	beqz	a5,b35c <xQueueSemaphoreTake+0x120>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b340:	fd842783          	lw	a5,-40(s0)
    b344:	01078793          	addi	a5,a5,16
    b348:	00078513          	mv	a0,a5
    b34c:	a9df70ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    b350:	00050793          	mv	a5,a0
    b354:	00078463          	beqz	a5,b35c <xQueueSemaphoreTake+0x120>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    b358:	00000073          	ecall
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    b35c:	000267b7          	lui	a5,0x26
    b360:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b364:	fff78713          	addi	a4,a5,-1
    b368:	000267b7          	lui	a5,0x26
    b36c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b370:	000267b7          	lui	a5,0x26
    b374:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b378:	00079463          	bnez	a5,b380 <xQueueSemaphoreTake+0x144>
    b37c:	30046073          	csrsi	mstatus,8
                return pdPASS;
    b380:	00100793          	li	a5,1
    b384:	2600006f          	j	b5e4 <xQueueSemaphoreTake+0x3a8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    b388:	fc842783          	lw	a5,-56(s0)
    b38c:	04079463          	bnez	a5,b3d4 <xQueueSemaphoreTake+0x198>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                    {
                        configASSERT( xInheritanceOccurred == pdFALSE );
    b390:	fd442783          	lw	a5,-44(s0)
    b394:	00078a63          	beqz	a5,b3a8 <xQueueSemaphoreTake+0x16c>
    b398:	30047073          	csrci	mstatus,8
    b39c:	00100073          	ebreak
    b3a0:	00000013          	nop
    b3a4:	ffdff06f          	j	b3a0 <xQueueSemaphoreTake+0x164>
                    }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    b3a8:	000267b7          	lui	a5,0x26
    b3ac:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b3b0:	fff78713          	addi	a4,a5,-1
    b3b4:	000267b7          	lui	a5,0x26
    b3b8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b3bc:	000267b7          	lui	a5,0x26
    b3c0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b3c4:	00079463          	bnez	a5,b3cc <xQueueSemaphoreTake+0x190>
    b3c8:	30046073          	csrsi	mstatus,8
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    b3cc:	00000793          	li	a5,0
    b3d0:	2140006f          	j	b5e4 <xQueueSemaphoreTake+0x3a8>
                }
                else if( xEntryTimeSet == pdFALSE )
    b3d4:	fd042783          	lw	a5,-48(s0)
    b3d8:	00079c63          	bnez	a5,b3f0 <xQueueSemaphoreTake+0x1b4>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    b3dc:	fe440793          	addi	a5,s0,-28
    b3e0:	00078513          	mv	a0,a5
    b3e4:	81cf80ef          	jal	ra,3400 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    b3e8:	00100793          	li	a5,1
    b3ec:	fcf42823          	sw	a5,-48(s0)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    b3f0:	000267b7          	lui	a5,0x26
    b3f4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b3f8:	fff78713          	addi	a4,a5,-1
    b3fc:	000267b7          	lui	a5,0x26
    b400:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b404:	000267b7          	lui	a5,0x26
    b408:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b40c:	00079463          	bnez	a5,b414 <xQueueSemaphoreTake+0x1d8>
    b410:	30046073          	csrsi	mstatus,8

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    b414:	e78f60ef          	jal	ra,1a8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    b418:	30047073          	csrci	mstatus,8
    b41c:	000267b7          	lui	a5,0x26
    b420:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b424:	00178713          	addi	a4,a5,1
    b428:	000267b7          	lui	a5,0x26
    b42c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b430:	fd842783          	lw	a5,-40(s0)
    b434:	0447c783          	lbu	a5,68(a5)
    b438:	01879713          	slli	a4,a5,0x18
    b43c:	41875713          	srai	a4,a4,0x18
    b440:	fff00793          	li	a5,-1
    b444:	00f71663          	bne	a4,a5,b450 <xQueueSemaphoreTake+0x214>
    b448:	fd842783          	lw	a5,-40(s0)
    b44c:	04078223          	sb	zero,68(a5)
    b450:	fd842783          	lw	a5,-40(s0)
    b454:	0457c783          	lbu	a5,69(a5)
    b458:	01879713          	slli	a4,a5,0x18
    b45c:	41875713          	srai	a4,a4,0x18
    b460:	fff00793          	li	a5,-1
    b464:	00f71663          	bne	a4,a5,b470 <xQueueSemaphoreTake+0x234>
    b468:	fd842783          	lw	a5,-40(s0)
    b46c:	040782a3          	sb	zero,69(a5)
    b470:	000267b7          	lui	a5,0x26
    b474:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b478:	fff78713          	addi	a4,a5,-1
    b47c:	000267b7          	lui	a5,0x26
    b480:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b484:	000267b7          	lui	a5,0x26
    b488:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b48c:	00079463          	bnez	a5,b494 <xQueueSemaphoreTake+0x258>
    b490:	30046073          	csrsi	mstatus,8

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b494:	fc840713          	addi	a4,s0,-56
    b498:	fe440793          	addi	a5,s0,-28
    b49c:	00070593          	mv	a1,a4
    b4a0:	00078513          	mv	a0,a5
    b4a4:	f9df70ef          	jal	ra,3440 <xTaskCheckForTimeOut>
    b4a8:	00050793          	mv	a5,a0
    b4ac:	0a079a63          	bnez	a5,b560 <xQueueSemaphoreTake+0x324>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b4b0:	fd842503          	lw	a0,-40(s0)
    b4b4:	50d000ef          	jal	ra,c1c0 <prvIsQueueEmpty>
    b4b8:	00050793          	mv	a5,a0
    b4bc:	08078a63          	beqz	a5,b550 <xQueueSemaphoreTake+0x314>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b4c0:	fd842783          	lw	a5,-40(s0)
    b4c4:	0007a783          	lw	a5,0(a5)
    b4c8:	04079a63          	bnez	a5,b51c <xQueueSemaphoreTake+0x2e0>
                    {
                        taskENTER_CRITICAL();
    b4cc:	30047073          	csrci	mstatus,8
    b4d0:	000267b7          	lui	a5,0x26
    b4d4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b4d8:	00178713          	addi	a4,a5,1
    b4dc:	000267b7          	lui	a5,0x26
    b4e0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
    b4e4:	fd842783          	lw	a5,-40(s0)
    b4e8:	0087a783          	lw	a5,8(a5)
    b4ec:	00078513          	mv	a0,a5
    b4f0:	f50f80ef          	jal	ra,3c40 <xTaskPriorityInherit>
    b4f4:	fca42a23          	sw	a0,-44(s0)
                        }
                        taskEXIT_CRITICAL();
    b4f8:	000267b7          	lui	a5,0x26
    b4fc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b500:	fff78713          	addi	a4,a5,-1
    b504:	000267b7          	lui	a5,0x26
    b508:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b50c:	000267b7          	lui	a5,0x26
    b510:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b514:	00079463          	bnez	a5,b51c <xQueueSemaphoreTake+0x2e0>
    b518:	30046073          	csrsi	mstatus,8
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b51c:	fd842783          	lw	a5,-40(s0)
    b520:	02478793          	addi	a5,a5,36
    b524:	fc842703          	lw	a4,-56(s0)
    b528:	00070593          	mv	a1,a4
    b52c:	00078513          	mv	a0,a5
    b530:	e64f70ef          	jal	ra,2b94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    b534:	fd842503          	lw	a0,-40(s0)
    b538:	2fd000ef          	jal	ra,c034 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    b53c:	d80f60ef          	jal	ra,1abc <xTaskResumeAll>
    b540:	00050793          	mv	a5,a0
    b544:	d8079ce3          	bnez	a5,b2dc <xQueueSemaphoreTake+0xa0>
                {
                    portYIELD_WITHIN_API();
    b548:	00000073          	ecall
    b54c:	d91ff06f          	j	b2dc <xQueueSemaphoreTake+0xa0>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    b550:	fd842503          	lw	a0,-40(s0)
    b554:	2e1000ef          	jal	ra,c034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    b558:	d64f60ef          	jal	ra,1abc <xTaskResumeAll>
    b55c:	d81ff06f          	j	b2dc <xQueueSemaphoreTake+0xa0>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    b560:	fd842503          	lw	a0,-40(s0)
    b564:	2d1000ef          	jal	ra,c034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    b568:	d54f60ef          	jal	ra,1abc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b56c:	fd842503          	lw	a0,-40(s0)
    b570:	451000ef          	jal	ra,c1c0 <prvIsQueueEmpty>
    b574:	00050793          	mv	a5,a0
    b578:	d60782e3          	beqz	a5,b2dc <xQueueSemaphoreTake+0xa0>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
    b57c:	fd442783          	lw	a5,-44(s0)
    b580:	06078063          	beqz	a5,b5e0 <xQueueSemaphoreTake+0x3a4>
                    {
                        taskENTER_CRITICAL();
    b584:	30047073          	csrci	mstatus,8
    b588:	000267b7          	lui	a5,0x26
    b58c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b590:	00178713          	addi	a4,a5,1
    b594:	000267b7          	lui	a5,0x26
    b598:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
    b59c:	fd842503          	lw	a0,-40(s0)
    b5a0:	021000ef          	jal	ra,bdc0 <prvGetDisinheritPriorityAfterTimeout>
    b5a4:	fea42023          	sw	a0,-32(s0)
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
    b5a8:	fd842783          	lw	a5,-40(s0)
    b5ac:	0087a783          	lw	a5,8(a5)
    b5b0:	fe042583          	lw	a1,-32(s0)
    b5b4:	00078513          	mv	a0,a5
    b5b8:	b01f80ef          	jal	ra,40b8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
    b5bc:	000267b7          	lui	a5,0x26
    b5c0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b5c4:	fff78713          	addi	a4,a5,-1
    b5c8:	000267b7          	lui	a5,0x26
    b5cc:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b5d0:	000267b7          	lui	a5,0x26
    b5d4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b5d8:	00079463          	bnez	a5,b5e0 <xQueueSemaphoreTake+0x3a4>
    b5dc:	30046073          	csrsi	mstatus,8
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    b5e0:	00000793          	li	a5,0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    b5e4:	00078713          	mv	a4,a5
    b5e8:	000287b7          	lui	a5,0x28
    b5ec:	fec42683          	lw	a3,-20(s0)
    b5f0:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    b5f4:	00f6c7b3          	xor	a5,a3,a5
    b5f8:	00000693          	li	a3,0
    b5fc:	00078463          	beqz	a5,b604 <xQueueSemaphoreTake+0x3c8>
    b600:	69c020ef          	jal	ra,dc9c <__stack_chk_fail>
    b604:	00070513          	mv	a0,a4
    b608:	03c12083          	lw	ra,60(sp)
    b60c:	03812403          	lw	s0,56(sp)
    b610:	04010113          	addi	sp,sp,64
    b614:	00008067          	ret

0000b618 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
    b618:	fc010113          	addi	sp,sp,-64
    b61c:	02112e23          	sw	ra,60(sp)
    b620:	02812c23          	sw	s0,56(sp)
    b624:	04010413          	addi	s0,sp,64
    b628:	fca42623          	sw	a0,-52(s0)
    b62c:	fcb42423          	sw	a1,-56(s0)
    b630:	fcc42223          	sw	a2,-60(s0)
    b634:	000287b7          	lui	a5,0x28
    b638:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    b63c:	fee42623          	sw	a4,-20(s0)
    b640:	00000713          	li	a4,0
    BaseType_t xEntryTimeSet = pdFALSE;
    b644:	fc042a23          	sw	zero,-44(s0)
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
    b648:	fcc42783          	lw	a5,-52(s0)
    b64c:	fcf42c23          	sw	a5,-40(s0)

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
    b650:	fd842783          	lw	a5,-40(s0)
    b654:	00079a63          	bnez	a5,b668 <xQueuePeek+0x50>
    b658:	30047073          	csrci	mstatus,8
    b65c:	00100073          	ebreak
    b660:	00000013          	nop
    b664:	ffdff06f          	j	b660 <xQueuePeek+0x48>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b668:	fc842783          	lw	a5,-56(s0)
    b66c:	00079863          	bnez	a5,b67c <xQueuePeek+0x64>
    b670:	fd842783          	lw	a5,-40(s0)
    b674:	0407a783          	lw	a5,64(a5)
    b678:	00079663          	bnez	a5,b684 <xQueuePeek+0x6c>
    b67c:	00100793          	li	a5,1
    b680:	0080006f          	j	b688 <xQueuePeek+0x70>
    b684:	00000793          	li	a5,0
    b688:	00079a63          	bnez	a5,b69c <xQueuePeek+0x84>
    b68c:	30047073          	csrci	mstatus,8
    b690:	00100073          	ebreak
    b694:	00000013          	nop
    b698:	ffdff06f          	j	b694 <xQueuePeek+0x7c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b69c:	d50f80ef          	jal	ra,3bec <xTaskGetSchedulerState>
    b6a0:	00050793          	mv	a5,a0
    b6a4:	00079663          	bnez	a5,b6b0 <xQueuePeek+0x98>
    b6a8:	fc442783          	lw	a5,-60(s0)
    b6ac:	00079663          	bnez	a5,b6b8 <xQueuePeek+0xa0>
    b6b0:	00100793          	li	a5,1
    b6b4:	0080006f          	j	b6bc <xQueuePeek+0xa4>
    b6b8:	00000793          	li	a5,0
    b6bc:	00079a63          	bnez	a5,b6d0 <xQueuePeek+0xb8>
    b6c0:	30047073          	csrci	mstatus,8
    b6c4:	00100073          	ebreak
    b6c8:	00000013          	nop
    b6cc:	ffdff06f          	j	b6c8 <xQueuePeek+0xb0>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    b6d0:	30047073          	csrci	mstatus,8
    b6d4:	000267b7          	lui	a5,0x26
    b6d8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b6dc:	00178713          	addi	a4,a5,1
    b6e0:	000267b7          	lui	a5,0x26
    b6e4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b6e8:	fd842783          	lw	a5,-40(s0)
    b6ec:	0387a783          	lw	a5,56(a5)
    b6f0:	fcf42e23          	sw	a5,-36(s0)

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b6f4:	fdc42783          	lw	a5,-36(s0)
    b6f8:	06078e63          	beqz	a5,b774 <xQueuePeek+0x15c>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    b6fc:	fd842783          	lw	a5,-40(s0)
    b700:	00c7a783          	lw	a5,12(a5)
    b704:	fef42023          	sw	a5,-32(s0)

                prvCopyDataFromQueue( pxQueue, pvBuffer );
    b708:	fc842583          	lw	a1,-56(s0)
    b70c:	fd842503          	lw	a0,-40(s0)
    b710:	08d000ef          	jal	ra,bf9c <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    b714:	fd842783          	lw	a5,-40(s0)
    b718:	fe042703          	lw	a4,-32(s0)
    b71c:	00e7a623          	sw	a4,12(a5)

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b720:	fd842783          	lw	a5,-40(s0)
    b724:	0247a783          	lw	a5,36(a5)
    b728:	02078063          	beqz	a5,b748 <xQueuePeek+0x130>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b72c:	fd842783          	lw	a5,-40(s0)
    b730:	02478793          	addi	a5,a5,36
    b734:	00078513          	mv	a0,a5
    b738:	eb0f70ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    b73c:	00050793          	mv	a5,a0
    b740:	00078463          	beqz	a5,b748 <xQueuePeek+0x130>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
    b744:	00000073          	ecall
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    b748:	000267b7          	lui	a5,0x26
    b74c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b750:	fff78713          	addi	a4,a5,-1
    b754:	000267b7          	lui	a5,0x26
    b758:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b75c:	000267b7          	lui	a5,0x26
    b760:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b764:	00079463          	bnez	a5,b76c <xQueuePeek+0x154>
    b768:	30046073          	csrsi	mstatus,8
                return pdPASS;
    b76c:	00100793          	li	a5,1
    b770:	1880006f          	j	b8f8 <xQueuePeek+0x2e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    b774:	fc442783          	lw	a5,-60(s0)
    b778:	02079863          	bnez	a5,b7a8 <xQueuePeek+0x190>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
    b77c:	000267b7          	lui	a5,0x26
    b780:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b784:	fff78713          	addi	a4,a5,-1
    b788:	000267b7          	lui	a5,0x26
    b78c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b790:	000267b7          	lui	a5,0x26
    b794:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b798:	00079463          	bnez	a5,b7a0 <xQueuePeek+0x188>
    b79c:	30046073          	csrsi	mstatus,8
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    b7a0:	00000793          	li	a5,0
    b7a4:	1540006f          	j	b8f8 <xQueuePeek+0x2e0>
                }
                else if( xEntryTimeSet == pdFALSE )
    b7a8:	fd442783          	lw	a5,-44(s0)
    b7ac:	00079c63          	bnez	a5,b7c4 <xQueuePeek+0x1ac>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    b7b0:	fe440793          	addi	a5,s0,-28
    b7b4:	00078513          	mv	a0,a5
    b7b8:	c49f70ef          	jal	ra,3400 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    b7bc:	00100793          	li	a5,1
    b7c0:	fcf42a23          	sw	a5,-44(s0)
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    b7c4:	000267b7          	lui	a5,0x26
    b7c8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b7cc:	fff78713          	addi	a4,a5,-1
    b7d0:	000267b7          	lui	a5,0x26
    b7d4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b7d8:	000267b7          	lui	a5,0x26
    b7dc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b7e0:	00079463          	bnez	a5,b7e8 <xQueuePeek+0x1d0>
    b7e4:	30046073          	csrsi	mstatus,8

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
    b7e8:	aa4f60ef          	jal	ra,1a8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    b7ec:	30047073          	csrci	mstatus,8
    b7f0:	000267b7          	lui	a5,0x26
    b7f4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b7f8:	00178713          	addi	a4,a5,1
    b7fc:	000267b7          	lui	a5,0x26
    b800:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b804:	fd842783          	lw	a5,-40(s0)
    b808:	0447c783          	lbu	a5,68(a5)
    b80c:	01879713          	slli	a4,a5,0x18
    b810:	41875713          	srai	a4,a4,0x18
    b814:	fff00793          	li	a5,-1
    b818:	00f71663          	bne	a4,a5,b824 <xQueuePeek+0x20c>
    b81c:	fd842783          	lw	a5,-40(s0)
    b820:	04078223          	sb	zero,68(a5)
    b824:	fd842783          	lw	a5,-40(s0)
    b828:	0457c783          	lbu	a5,69(a5)
    b82c:	01879713          	slli	a4,a5,0x18
    b830:	41875713          	srai	a4,a4,0x18
    b834:	fff00793          	li	a5,-1
    b838:	00f71663          	bne	a4,a5,b844 <xQueuePeek+0x22c>
    b83c:	fd842783          	lw	a5,-40(s0)
    b840:	040782a3          	sb	zero,69(a5)
    b844:	000267b7          	lui	a5,0x26
    b848:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b84c:	fff78713          	addi	a4,a5,-1
    b850:	000267b7          	lui	a5,0x26
    b854:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    b858:	000267b7          	lui	a5,0x26
    b85c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    b860:	00079463          	bnez	a5,b868 <xQueuePeek+0x250>
    b864:	30046073          	csrsi	mstatus,8

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b868:	fc440713          	addi	a4,s0,-60
    b86c:	fe440793          	addi	a5,s0,-28
    b870:	00070593          	mv	a1,a4
    b874:	00078513          	mv	a0,a5
    b878:	bc9f70ef          	jal	ra,3440 <xTaskCheckForTimeOut>
    b87c:	00050793          	mv	a5,a0
    b880:	04079c63          	bnez	a5,b8d8 <xQueuePeek+0x2c0>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b884:	fd842503          	lw	a0,-40(s0)
    b888:	139000ef          	jal	ra,c1c0 <prvIsQueueEmpty>
    b88c:	00050793          	mv	a5,a0
    b890:	02078c63          	beqz	a5,b8c8 <xQueuePeek+0x2b0>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b894:	fd842783          	lw	a5,-40(s0)
    b898:	02478793          	addi	a5,a5,36
    b89c:	fc442703          	lw	a4,-60(s0)
    b8a0:	00070593          	mv	a1,a4
    b8a4:	00078513          	mv	a0,a5
    b8a8:	aecf70ef          	jal	ra,2b94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    b8ac:	fd842503          	lw	a0,-40(s0)
    b8b0:	784000ef          	jal	ra,c034 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    b8b4:	a08f60ef          	jal	ra,1abc <xTaskResumeAll>
    b8b8:	00050793          	mv	a5,a0
    b8bc:	e0079ae3          	bnez	a5,b6d0 <xQueuePeek+0xb8>
                {
                    portYIELD_WITHIN_API();
    b8c0:	00000073          	ecall
    b8c4:	e0dff06f          	j	b6d0 <xQueuePeek+0xb8>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
    b8c8:	fd842503          	lw	a0,-40(s0)
    b8cc:	768000ef          	jal	ra,c034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    b8d0:	9ecf60ef          	jal	ra,1abc <xTaskResumeAll>
    b8d4:	dfdff06f          	j	b6d0 <xQueuePeek+0xb8>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
    b8d8:	fd842503          	lw	a0,-40(s0)
    b8dc:	758000ef          	jal	ra,c034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    b8e0:	9dcf60ef          	jal	ra,1abc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b8e4:	fd842503          	lw	a0,-40(s0)
    b8e8:	0d9000ef          	jal	ra,c1c0 <prvIsQueueEmpty>
    b8ec:	00050793          	mv	a5,a0
    b8f0:	de0780e3          	beqz	a5,b6d0 <xQueuePeek+0xb8>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    b8f4:	00000793          	li	a5,0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    b8f8:	00078713          	mv	a4,a5
    b8fc:	000287b7          	lui	a5,0x28
    b900:	fec42683          	lw	a3,-20(s0)
    b904:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    b908:	00f6c7b3          	xor	a5,a3,a5
    b90c:	00000693          	li	a3,0
    b910:	00078463          	beqz	a5,b918 <xQueuePeek+0x300>
    b914:	388020ef          	jal	ra,dc9c <__stack_chk_fail>
    b918:	00070513          	mv	a0,a4
    b91c:	03c12083          	lw	ra,60(sp)
    b920:	03812403          	lw	s0,56(sp)
    b924:	04010113          	addi	sp,sp,64
    b928:	00008067          	ret

0000b92c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    b92c:	fc010113          	addi	sp,sp,-64
    b930:	02112e23          	sw	ra,60(sp)
    b934:	02812c23          	sw	s0,56(sp)
    b938:	04010413          	addi	s0,sp,64
    b93c:	fca42623          	sw	a0,-52(s0)
    b940:	fcb42423          	sw	a1,-56(s0)
    b944:	fcc42223          	sw	a2,-60(s0)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
    b948:	fcc42783          	lw	a5,-52(s0)
    b94c:	fef42023          	sw	a5,-32(s0)

    configASSERT( pxQueue );
    b950:	fe042783          	lw	a5,-32(s0)
    b954:	00079a63          	bnez	a5,b968 <xQueueReceiveFromISR+0x3c>
    b958:	30047073          	csrci	mstatus,8
    b95c:	00100073          	ebreak
    b960:	00000013          	nop
    b964:	ffdff06f          	j	b960 <xQueueReceiveFromISR+0x34>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b968:	fc842783          	lw	a5,-56(s0)
    b96c:	00079863          	bnez	a5,b97c <xQueueReceiveFromISR+0x50>
    b970:	fe042783          	lw	a5,-32(s0)
    b974:	0407a783          	lw	a5,64(a5)
    b978:	00079663          	bnez	a5,b984 <xQueueReceiveFromISR+0x58>
    b97c:	00100793          	li	a5,1
    b980:	0080006f          	j	b988 <xQueueReceiveFromISR+0x5c>
    b984:	00000793          	li	a5,0
    b988:	00079a63          	bnez	a5,b99c <xQueueReceiveFromISR+0x70>
    b98c:	30047073          	csrci	mstatus,8
    b990:	00100073          	ebreak
    b994:	00000013          	nop
    b998:	ffdff06f          	j	b994 <xQueueReceiveFromISR+0x68>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    b99c:	fe042223          	sw	zero,-28(s0)
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b9a0:	fe042783          	lw	a5,-32(s0)
    b9a4:	0387a783          	lw	a5,56(a5)
    b9a8:	fef42423          	sw	a5,-24(s0)

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b9ac:	fe842783          	lw	a5,-24(s0)
    b9b0:	0c078663          	beqz	a5,ba7c <xQueueReceiveFromISR+0x150>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
    b9b4:	fe042783          	lw	a5,-32(s0)
    b9b8:	0447c783          	lbu	a5,68(a5)
    b9bc:	fcf40da3          	sb	a5,-37(s0)

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
    b9c0:	fc842583          	lw	a1,-56(s0)
    b9c4:	fe042503          	lw	a0,-32(s0)
    b9c8:	5d4000ef          	jal	ra,bf9c <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    b9cc:	fe842783          	lw	a5,-24(s0)
    b9d0:	fff78713          	addi	a4,a5,-1
    b9d4:	fe042783          	lw	a5,-32(s0)
    b9d8:	02e7ac23          	sw	a4,56(a5)

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
    b9dc:	fdb40703          	lb	a4,-37(s0)
    b9e0:	fff00793          	li	a5,-1
    b9e4:	04f71063          	bne	a4,a5,ba24 <xQueueReceiveFromISR+0xf8>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b9e8:	fe042783          	lw	a5,-32(s0)
    b9ec:	0107a783          	lw	a5,16(a5)
    b9f0:	08078063          	beqz	a5,ba70 <xQueueReceiveFromISR+0x144>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b9f4:	fe042783          	lw	a5,-32(s0)
    b9f8:	01078793          	addi	a5,a5,16
    b9fc:	00078513          	mv	a0,a5
    ba00:	be8f70ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    ba04:	00050793          	mv	a5,a0
    ba08:	06078463          	beqz	a5,ba70 <xQueueReceiveFromISR+0x144>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
    ba0c:	fc442783          	lw	a5,-60(s0)
    ba10:	06078063          	beqz	a5,ba70 <xQueueReceiveFromISR+0x144>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
    ba14:	fc442783          	lw	a5,-60(s0)
    ba18:	00100713          	li	a4,1
    ba1c:	00e7a023          	sw	a4,0(a5)
    ba20:	0500006f          	j	ba70 <xQueueReceiveFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
    ba24:	c50f60ef          	jal	ra,1e74 <uxTaskGetNumberOfTasks>
    ba28:	fea42623          	sw	a0,-20(s0)
    ba2c:	fdb40783          	lb	a5,-37(s0)
    ba30:	fec42703          	lw	a4,-20(s0)
    ba34:	02e7fe63          	bgeu	a5,a4,ba70 <xQueueReceiveFromISR+0x144>
    ba38:	fdb40703          	lb	a4,-37(s0)
    ba3c:	07f00793          	li	a5,127
    ba40:	00f71a63          	bne	a4,a5,ba54 <xQueueReceiveFromISR+0x128>
    ba44:	30047073          	csrci	mstatus,8
    ba48:	00100073          	ebreak
    ba4c:	00000013          	nop
    ba50:	ffdff06f          	j	ba4c <xQueueReceiveFromISR+0x120>
    ba54:	fdb44783          	lbu	a5,-37(s0)
    ba58:	00178793          	addi	a5,a5,1
    ba5c:	0ff7f793          	zext.b	a5,a5
    ba60:	01879713          	slli	a4,a5,0x18
    ba64:	41875713          	srai	a4,a4,0x18
    ba68:	fe042783          	lw	a5,-32(s0)
    ba6c:	04e78223          	sb	a4,68(a5)
            }

            xReturn = pdPASS;
    ba70:	00100793          	li	a5,1
    ba74:	fcf42e23          	sw	a5,-36(s0)
    ba78:	0080006f          	j	ba80 <xQueueReceiveFromISR+0x154>
        }
        else
        {
            xReturn = pdFAIL;
    ba7c:	fc042e23          	sw	zero,-36(s0)
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
    ba80:	fdc42783          	lw	a5,-36(s0)
}
    ba84:	00078513          	mv	a0,a5
    ba88:	03c12083          	lw	ra,60(sp)
    ba8c:	03812403          	lw	s0,56(sp)
    ba90:	04010113          	addi	sp,sp,64
    ba94:	00008067          	ret

0000ba98 <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
    ba98:	fd010113          	addi	sp,sp,-48
    ba9c:	02112623          	sw	ra,44(sp)
    baa0:	02812423          	sw	s0,40(sp)
    baa4:	03010413          	addi	s0,sp,48
    baa8:	fca42e23          	sw	a0,-36(s0)
    baac:	fcb42c23          	sw	a1,-40(s0)
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
    bab0:	fdc42783          	lw	a5,-36(s0)
    bab4:	fef42223          	sw	a5,-28(s0)

    configASSERT( pxQueue );
    bab8:	fe442783          	lw	a5,-28(s0)
    babc:	00079a63          	bnez	a5,bad0 <xQueuePeekFromISR+0x38>
    bac0:	30047073          	csrci	mstatus,8
    bac4:	00100073          	ebreak
    bac8:	00000013          	nop
    bacc:	ffdff06f          	j	bac8 <xQueuePeekFromISR+0x30>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    bad0:	fd842783          	lw	a5,-40(s0)
    bad4:	00079863          	bnez	a5,bae4 <xQueuePeekFromISR+0x4c>
    bad8:	fe442783          	lw	a5,-28(s0)
    badc:	0407a783          	lw	a5,64(a5)
    bae0:	00079663          	bnez	a5,baec <xQueuePeekFromISR+0x54>
    bae4:	00100793          	li	a5,1
    bae8:	0080006f          	j	baf0 <xQueuePeekFromISR+0x58>
    baec:	00000793          	li	a5,0
    baf0:	00079a63          	bnez	a5,bb04 <xQueuePeekFromISR+0x6c>
    baf4:	30047073          	csrci	mstatus,8
    baf8:	00100073          	ebreak
    bafc:	00000013          	nop
    bb00:	ffdff06f          	j	bafc <xQueuePeekFromISR+0x64>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
    bb04:	fe442783          	lw	a5,-28(s0)
    bb08:	0407a783          	lw	a5,64(a5)
    bb0c:	00079a63          	bnez	a5,bb20 <xQueuePeekFromISR+0x88>
    bb10:	30047073          	csrci	mstatus,8
    bb14:	00100073          	ebreak
    bb18:	00000013          	nop
    bb1c:	ffdff06f          	j	bb18 <xQueuePeekFromISR+0x80>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    bb20:	fe042423          	sw	zero,-24(s0)
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    bb24:	fe442783          	lw	a5,-28(s0)
    bb28:	0387a783          	lw	a5,56(a5)
    bb2c:	02078a63          	beqz	a5,bb60 <xQueuePeekFromISR+0xc8>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
    bb30:	fe442783          	lw	a5,-28(s0)
    bb34:	00c7a783          	lw	a5,12(a5)
    bb38:	fef42623          	sw	a5,-20(s0)
            prvCopyDataFromQueue( pxQueue, pvBuffer );
    bb3c:	fd842583          	lw	a1,-40(s0)
    bb40:	fe442503          	lw	a0,-28(s0)
    bb44:	458000ef          	jal	ra,bf9c <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
    bb48:	fe442783          	lw	a5,-28(s0)
    bb4c:	fec42703          	lw	a4,-20(s0)
    bb50:	00e7a623          	sw	a4,12(a5)

            xReturn = pdPASS;
    bb54:	00100793          	li	a5,1
    bb58:	fef42023          	sw	a5,-32(s0)
    bb5c:	0080006f          	j	bb64 <xQueuePeekFromISR+0xcc>
        }
        else
        {
            xReturn = pdFAIL;
    bb60:	fe042023          	sw	zero,-32(s0)
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
    bb64:	fe042783          	lw	a5,-32(s0)
}
    bb68:	00078513          	mv	a0,a5
    bb6c:	02c12083          	lw	ra,44(sp)
    bb70:	02812403          	lw	s0,40(sp)
    bb74:	03010113          	addi	sp,sp,48
    bb78:	00008067          	ret

0000bb7c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    bb7c:	fd010113          	addi	sp,sp,-48
    bb80:	02812623          	sw	s0,44(sp)
    bb84:	03010413          	addi	s0,sp,48
    bb88:	fca42e23          	sw	a0,-36(s0)
    UBaseType_t uxReturn;

    configASSERT( xQueue );
    bb8c:	fdc42783          	lw	a5,-36(s0)
    bb90:	00079a63          	bnez	a5,bba4 <uxQueueMessagesWaiting+0x28>
    bb94:	30047073          	csrci	mstatus,8
    bb98:	00100073          	ebreak
    bb9c:	00000013          	nop
    bba0:	ffdff06f          	j	bb9c <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
    bba4:	30047073          	csrci	mstatus,8
    bba8:	000267b7          	lui	a5,0x26
    bbac:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    bbb0:	00178713          	addi	a4,a5,1
    bbb4:	000267b7          	lui	a5,0x26
    bbb8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    bbbc:	fdc42783          	lw	a5,-36(s0)
    bbc0:	0387a783          	lw	a5,56(a5)
    bbc4:	fef42623          	sw	a5,-20(s0)
    }
    taskEXIT_CRITICAL();
    bbc8:	000267b7          	lui	a5,0x26
    bbcc:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    bbd0:	fff78713          	addi	a4,a5,-1
    bbd4:	000267b7          	lui	a5,0x26
    bbd8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    bbdc:	000267b7          	lui	a5,0x26
    bbe0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    bbe4:	00079463          	bnez	a5,bbec <uxQueueMessagesWaiting+0x70>
    bbe8:	30046073          	csrsi	mstatus,8

    return uxReturn;
    bbec:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    bbf0:	00078513          	mv	a0,a5
    bbf4:	02c12403          	lw	s0,44(sp)
    bbf8:	03010113          	addi	sp,sp,48
    bbfc:	00008067          	ret

0000bc00 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    bc00:	fd010113          	addi	sp,sp,-48
    bc04:	02812623          	sw	s0,44(sp)
    bc08:	03010413          	addi	s0,sp,48
    bc0c:	fca42e23          	sw	a0,-36(s0)
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
    bc10:	fdc42783          	lw	a5,-36(s0)
    bc14:	fef42423          	sw	a5,-24(s0)

    configASSERT( pxQueue );
    bc18:	fe842783          	lw	a5,-24(s0)
    bc1c:	00079a63          	bnez	a5,bc30 <uxQueueSpacesAvailable+0x30>
    bc20:	30047073          	csrci	mstatus,8
    bc24:	00100073          	ebreak
    bc28:	00000013          	nop
    bc2c:	ffdff06f          	j	bc28 <uxQueueSpacesAvailable+0x28>

    taskENTER_CRITICAL();
    bc30:	30047073          	csrci	mstatus,8
    bc34:	000267b7          	lui	a5,0x26
    bc38:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    bc3c:	00178713          	addi	a4,a5,1
    bc40:	000267b7          	lui	a5,0x26
    bc44:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    bc48:	fe842783          	lw	a5,-24(s0)
    bc4c:	03c7a703          	lw	a4,60(a5)
    bc50:	fe842783          	lw	a5,-24(s0)
    bc54:	0387a783          	lw	a5,56(a5)
    bc58:	40f707b3          	sub	a5,a4,a5
    bc5c:	fef42623          	sw	a5,-20(s0)
    }
    taskEXIT_CRITICAL();
    bc60:	000267b7          	lui	a5,0x26
    bc64:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    bc68:	fff78713          	addi	a4,a5,-1
    bc6c:	000267b7          	lui	a5,0x26
    bc70:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    bc74:	000267b7          	lui	a5,0x26
    bc78:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    bc7c:	00079463          	bnez	a5,bc84 <uxQueueSpacesAvailable+0x84>
    bc80:	30046073          	csrsi	mstatus,8

    return uxReturn;
    bc84:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    bc88:	00078513          	mv	a0,a5
    bc8c:	02c12403          	lw	s0,44(sp)
    bc90:	03010113          	addi	sp,sp,48
    bc94:	00008067          	ret

0000bc98 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    bc98:	fd010113          	addi	sp,sp,-48
    bc9c:	02812623          	sw	s0,44(sp)
    bca0:	03010413          	addi	s0,sp,48
    bca4:	fca42e23          	sw	a0,-36(s0)
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
    bca8:	fdc42783          	lw	a5,-36(s0)
    bcac:	fef42423          	sw	a5,-24(s0)

    configASSERT( pxQueue );
    bcb0:	fe842783          	lw	a5,-24(s0)
    bcb4:	00079a63          	bnez	a5,bcc8 <uxQueueMessagesWaitingFromISR+0x30>
    bcb8:	30047073          	csrci	mstatus,8
    bcbc:	00100073          	ebreak
    bcc0:	00000013          	nop
    bcc4:	ffdff06f          	j	bcc0 <uxQueueMessagesWaitingFromISR+0x28>
    uxReturn = pxQueue->uxMessagesWaiting;
    bcc8:	fe842783          	lw	a5,-24(s0)
    bccc:	0387a783          	lw	a5,56(a5)
    bcd0:	fef42623          	sw	a5,-20(s0)

    return uxReturn;
    bcd4:	fec42783          	lw	a5,-20(s0)
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    bcd8:	00078513          	mv	a0,a5
    bcdc:	02c12403          	lw	s0,44(sp)
    bce0:	03010113          	addi	sp,sp,48
    bce4:	00008067          	ret

0000bce8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    bce8:	fd010113          	addi	sp,sp,-48
    bcec:	02112623          	sw	ra,44(sp)
    bcf0:	02812423          	sw	s0,40(sp)
    bcf4:	03010413          	addi	s0,sp,48
    bcf8:	fca42e23          	sw	a0,-36(s0)
    Queue_t * const pxQueue = xQueue;
    bcfc:	fdc42783          	lw	a5,-36(s0)
    bd00:	fef42623          	sw	a5,-20(s0)

    configASSERT( pxQueue );
    bd04:	fec42783          	lw	a5,-20(s0)
    bd08:	00079a63          	bnez	a5,bd1c <vQueueDelete+0x34>
    bd0c:	30047073          	csrci	mstatus,8
    bd10:	00100073          	ebreak
    bd14:	00000013          	nop
    bd18:	ffdff06f          	j	bd14 <vQueueDelete+0x2c>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
    bd1c:	fec42503          	lw	a0,-20(s0)
    bd20:	009000ef          	jal	ra,c528 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
    bd24:	fec42503          	lw	a0,-20(s0)
    bd28:	f28fc0ef          	jal	ra,8450 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    bd2c:	00000013          	nop
    bd30:	02c12083          	lw	ra,44(sp)
    bd34:	02812403          	lw	s0,40(sp)
    bd38:	03010113          	addi	sp,sp,48
    bd3c:	00008067          	ret

0000bd40 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
    bd40:	fe010113          	addi	sp,sp,-32
    bd44:	00812e23          	sw	s0,28(sp)
    bd48:	02010413          	addi	s0,sp,32
    bd4c:	fea42623          	sw	a0,-20(s0)
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    bd50:	fec42783          	lw	a5,-20(s0)
    bd54:	04c7a783          	lw	a5,76(a5)
    }
    bd58:	00078513          	mv	a0,a5
    bd5c:	01c12403          	lw	s0,28(sp)
    bd60:	02010113          	addi	sp,sp,32
    bd64:	00008067          	ret

0000bd68 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
    bd68:	fe010113          	addi	sp,sp,-32
    bd6c:	00812e23          	sw	s0,28(sp)
    bd70:	02010413          	addi	s0,sp,32
    bd74:	fea42623          	sw	a0,-20(s0)
    bd78:	feb42423          	sw	a1,-24(s0)
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    bd7c:	fec42783          	lw	a5,-20(s0)
    bd80:	fe842703          	lw	a4,-24(s0)
    bd84:	04e7a623          	sw	a4,76(a5)
    }
    bd88:	00000013          	nop
    bd8c:	01c12403          	lw	s0,28(sp)
    bd90:	02010113          	addi	sp,sp,32
    bd94:	00008067          	ret

0000bd98 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
    bd98:	fe010113          	addi	sp,sp,-32
    bd9c:	00812e23          	sw	s0,28(sp)
    bda0:	02010413          	addi	s0,sp,32
    bda4:	fea42623          	sw	a0,-20(s0)
        return ( ( Queue_t * ) xQueue )->ucQueueType;
    bda8:	fec42783          	lw	a5,-20(s0)
    bdac:	0507c783          	lbu	a5,80(a5)
    }
    bdb0:	00078513          	mv	a0,a5
    bdb4:	01c12403          	lw	s0,28(sp)
    bdb8:	02010113          	addi	sp,sp,32
    bdbc:	00008067          	ret

0000bdc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
    bdc0:	fd010113          	addi	sp,sp,-48
    bdc4:	02812623          	sw	s0,44(sp)
    bdc8:	03010413          	addi	s0,sp,48
    bdcc:	fca42e23          	sw	a0,-36(s0)
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
    bdd0:	fdc42783          	lw	a5,-36(s0)
    bdd4:	0247a783          	lw	a5,36(a5)
    bdd8:	02078063          	beqz	a5,bdf8 <prvGetDisinheritPriorityAfterTimeout+0x38>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    bddc:	fdc42783          	lw	a5,-36(s0)
    bde0:	0307a783          	lw	a5,48(a5)
    bde4:	0007a783          	lw	a5,0(a5)
    bde8:	00700713          	li	a4,7
    bdec:	40f707b3          	sub	a5,a4,a5
    bdf0:	fef42623          	sw	a5,-20(s0)
    bdf4:	0080006f          	j	bdfc <prvGetDisinheritPriorityAfterTimeout+0x3c>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    bdf8:	fe042623          	sw	zero,-20(s0)
        }

        return uxHighestPriorityOfWaitingTasks;
    bdfc:	fec42783          	lw	a5,-20(s0)
    }
    be00:	00078513          	mv	a0,a5
    be04:	02c12403          	lw	s0,44(sp)
    be08:	03010113          	addi	sp,sp,48
    be0c:	00008067          	ret

0000be10 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
    be10:	fd010113          	addi	sp,sp,-48
    be14:	02112623          	sw	ra,44(sp)
    be18:	02812423          	sw	s0,40(sp)
    be1c:	03010413          	addi	s0,sp,48
    be20:	fca42e23          	sw	a0,-36(s0)
    be24:	fcb42c23          	sw	a1,-40(s0)
    be28:	fcc42a23          	sw	a2,-44(s0)
    BaseType_t xReturn = pdFALSE;
    be2c:	fe042423          	sw	zero,-24(s0)
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    be30:	fdc42783          	lw	a5,-36(s0)
    be34:	0387a783          	lw	a5,56(a5)
    be38:	fef42623          	sw	a5,-20(s0)

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    be3c:	fdc42783          	lw	a5,-36(s0)
    be40:	0407a783          	lw	a5,64(a5)
    be44:	02079863          	bnez	a5,be74 <prvCopyDataToQueue+0x64>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    be48:	fdc42783          	lw	a5,-36(s0)
    be4c:	0007a783          	lw	a5,0(a5)
    be50:	12079263          	bnez	a5,bf74 <prvCopyDataToQueue+0x164>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    be54:	fdc42783          	lw	a5,-36(s0)
    be58:	0087a783          	lw	a5,8(a5)
    be5c:	00078513          	mv	a0,a5
    be60:	830f80ef          	jal	ra,3e90 <xTaskPriorityDisinherit>
    be64:	fea42423          	sw	a0,-24(s0)
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
    be68:	fdc42783          	lw	a5,-36(s0)
    be6c:	0007a423          	sw	zero,8(a5)
    be70:	1040006f          	j	bf74 <prvCopyDataToQueue+0x164>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
    be74:	fd442783          	lw	a5,-44(s0)
    be78:	06079463          	bnez	a5,bee0 <prvCopyDataToQueue+0xd0>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    be7c:	fdc42783          	lw	a5,-36(s0)
    be80:	0047a703          	lw	a4,4(a5)
    be84:	fdc42783          	lw	a5,-36(s0)
    be88:	0407a783          	lw	a5,64(a5)
    be8c:	00078613          	mv	a2,a5
    be90:	fd842583          	lw	a1,-40(s0)
    be94:	00070513          	mv	a0,a4
    be98:	005010ef          	jal	ra,d69c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    be9c:	fdc42783          	lw	a5,-36(s0)
    bea0:	0047a703          	lw	a4,4(a5)
    bea4:	fdc42783          	lw	a5,-36(s0)
    bea8:	0407a783          	lw	a5,64(a5)
    beac:	00f70733          	add	a4,a4,a5
    beb0:	fdc42783          	lw	a5,-36(s0)
    beb4:	00e7a223          	sw	a4,4(a5)

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    beb8:	fdc42783          	lw	a5,-36(s0)
    bebc:	0047a703          	lw	a4,4(a5)
    bec0:	fdc42783          	lw	a5,-36(s0)
    bec4:	0087a783          	lw	a5,8(a5)
    bec8:	0af76663          	bltu	a4,a5,bf74 <prvCopyDataToQueue+0x164>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
    becc:	fdc42783          	lw	a5,-36(s0)
    bed0:	0007a703          	lw	a4,0(a5)
    bed4:	fdc42783          	lw	a5,-36(s0)
    bed8:	00e7a223          	sw	a4,4(a5)
    bedc:	0980006f          	j	bf74 <prvCopyDataToQueue+0x164>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    bee0:	fdc42783          	lw	a5,-36(s0)
    bee4:	00c7a703          	lw	a4,12(a5)
    bee8:	fdc42783          	lw	a5,-36(s0)
    beec:	0407a783          	lw	a5,64(a5)
    bef0:	00078613          	mv	a2,a5
    bef4:	fd842583          	lw	a1,-40(s0)
    bef8:	00070513          	mv	a0,a4
    befc:	7a0010ef          	jal	ra,d69c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    bf00:	fdc42783          	lw	a5,-36(s0)
    bf04:	00c7a703          	lw	a4,12(a5)
    bf08:	fdc42783          	lw	a5,-36(s0)
    bf0c:	0407a783          	lw	a5,64(a5)
    bf10:	40f007b3          	neg	a5,a5
    bf14:	00f70733          	add	a4,a4,a5
    bf18:	fdc42783          	lw	a5,-36(s0)
    bf1c:	00e7a623          	sw	a4,12(a5)

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    bf20:	fdc42783          	lw	a5,-36(s0)
    bf24:	00c7a703          	lw	a4,12(a5)
    bf28:	fdc42783          	lw	a5,-36(s0)
    bf2c:	0007a783          	lw	a5,0(a5)
    bf30:	02f77263          	bgeu	a4,a5,bf54 <prvCopyDataToQueue+0x144>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    bf34:	fdc42783          	lw	a5,-36(s0)
    bf38:	0087a703          	lw	a4,8(a5)
    bf3c:	fdc42783          	lw	a5,-36(s0)
    bf40:	0407a783          	lw	a5,64(a5)
    bf44:	40f007b3          	neg	a5,a5
    bf48:	00f70733          	add	a4,a4,a5
    bf4c:	fdc42783          	lw	a5,-36(s0)
    bf50:	00e7a623          	sw	a4,12(a5)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
    bf54:	fd442703          	lw	a4,-44(s0)
    bf58:	00200793          	li	a5,2
    bf5c:	00f71c63          	bne	a4,a5,bf74 <prvCopyDataToQueue+0x164>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    bf60:	fec42783          	lw	a5,-20(s0)
    bf64:	00078863          	beqz	a5,bf74 <prvCopyDataToQueue+0x164>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
    bf68:	fec42783          	lw	a5,-20(s0)
    bf6c:	fff78793          	addi	a5,a5,-1
    bf70:	fef42623          	sw	a5,-20(s0)
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    bf74:	fec42783          	lw	a5,-20(s0)
    bf78:	00178713          	addi	a4,a5,1
    bf7c:	fdc42783          	lw	a5,-36(s0)
    bf80:	02e7ac23          	sw	a4,56(a5)

    return xReturn;
    bf84:	fe842783          	lw	a5,-24(s0)
}
    bf88:	00078513          	mv	a0,a5
    bf8c:	02c12083          	lw	ra,44(sp)
    bf90:	02812403          	lw	s0,40(sp)
    bf94:	03010113          	addi	sp,sp,48
    bf98:	00008067          	ret

0000bf9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
    bf9c:	fe010113          	addi	sp,sp,-32
    bfa0:	00112e23          	sw	ra,28(sp)
    bfa4:	00812c23          	sw	s0,24(sp)
    bfa8:	02010413          	addi	s0,sp,32
    bfac:	fea42623          	sw	a0,-20(s0)
    bfb0:	feb42423          	sw	a1,-24(s0)
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    bfb4:	fec42783          	lw	a5,-20(s0)
    bfb8:	0407a783          	lw	a5,64(a5)
    bfbc:	06078263          	beqz	a5,c020 <prvCopyDataFromQueue+0x84>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    bfc0:	fec42783          	lw	a5,-20(s0)
    bfc4:	00c7a703          	lw	a4,12(a5)
    bfc8:	fec42783          	lw	a5,-20(s0)
    bfcc:	0407a783          	lw	a5,64(a5)
    bfd0:	00f70733          	add	a4,a4,a5
    bfd4:	fec42783          	lw	a5,-20(s0)
    bfd8:	00e7a623          	sw	a4,12(a5)

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    bfdc:	fec42783          	lw	a5,-20(s0)
    bfe0:	00c7a703          	lw	a4,12(a5)
    bfe4:	fec42783          	lw	a5,-20(s0)
    bfe8:	0087a783          	lw	a5,8(a5)
    bfec:	00f76a63          	bltu	a4,a5,c000 <prvCopyDataFromQueue+0x64>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    bff0:	fec42783          	lw	a5,-20(s0)
    bff4:	0007a703          	lw	a4,0(a5)
    bff8:	fec42783          	lw	a5,-20(s0)
    bffc:	00e7a623          	sw	a4,12(a5)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    c000:	fec42783          	lw	a5,-20(s0)
    c004:	00c7a703          	lw	a4,12(a5)
    c008:	fec42783          	lw	a5,-20(s0)
    c00c:	0407a783          	lw	a5,64(a5)
    c010:	00078613          	mv	a2,a5
    c014:	00070593          	mv	a1,a4
    c018:	fe842503          	lw	a0,-24(s0)
    c01c:	680010ef          	jal	ra,d69c <memcpy>
    }
}
    c020:	00000013          	nop
    c024:	01c12083          	lw	ra,28(sp)
    c028:	01812403          	lw	s0,24(sp)
    c02c:	02010113          	addi	sp,sp,32
    c030:	00008067          	ret

0000c034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    c034:	fd010113          	addi	sp,sp,-48
    c038:	02112623          	sw	ra,44(sp)
    c03c:	02812423          	sw	s0,40(sp)
    c040:	03010413          	addi	s0,sp,48
    c044:	fca42e23          	sw	a0,-36(s0)

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
    c048:	30047073          	csrci	mstatus,8
    c04c:	000267b7          	lui	a5,0x26
    c050:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c054:	00178713          	addi	a4,a5,1
    c058:	000267b7          	lui	a5,0x26
    c05c:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        int8_t cTxLock = pxQueue->cTxLock;
    c060:	fdc42783          	lw	a5,-36(s0)
    c064:	0457c783          	lbu	a5,69(a5)
    c068:	fef40723          	sb	a5,-18(s0)

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
    c06c:	0600006f          	j	c0cc <prvUnlockQueue+0x98>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
    c070:	fdc42783          	lw	a5,-36(s0)
    c074:	0487a783          	lw	a5,72(a5)
    c078:	00078e63          	beqz	a5,c094 <prvUnlockQueue+0x60>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
    c07c:	fdc42503          	lw	a0,-36(s0)
    c080:	0ad000ef          	jal	ra,c92c <prvNotifyQueueSetContainer>
    c084:	00050793          	mv	a5,a0
    c088:	02078a63          	beqz	a5,c0bc <prvUnlockQueue+0x88>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
    c08c:	d30f70ef          	jal	ra,35bc <vTaskMissedYield>
    c090:	02c0006f          	j	c0bc <prvUnlockQueue+0x88>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    c094:	fdc42783          	lw	a5,-36(s0)
    c098:	0247a783          	lw	a5,36(a5)
    c09c:	02078e63          	beqz	a5,c0d8 <prvUnlockQueue+0xa4>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    c0a0:	fdc42783          	lw	a5,-36(s0)
    c0a4:	02478793          	addi	a5,a5,36
    c0a8:	00078513          	mv	a0,a5
    c0ac:	d3df60ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    c0b0:	00050793          	mv	a5,a0
    c0b4:	00078463          	beqz	a5,c0bc <prvUnlockQueue+0x88>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
    c0b8:	d04f70ef          	jal	ra,35bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
    c0bc:	fee44783          	lbu	a5,-18(s0)
    c0c0:	fff78793          	addi	a5,a5,-1
    c0c4:	0ff7f793          	zext.b	a5,a5
    c0c8:	fef40723          	sb	a5,-18(s0)
        while( cTxLock > queueLOCKED_UNMODIFIED )
    c0cc:	fee40783          	lb	a5,-18(s0)
    c0d0:	faf040e3          	bgtz	a5,c070 <prvUnlockQueue+0x3c>
    c0d4:	0080006f          	j	c0dc <prvUnlockQueue+0xa8>
                        break;
    c0d8:	00000013          	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
    c0dc:	fdc42783          	lw	a5,-36(s0)
    c0e0:	fff00713          	li	a4,-1
    c0e4:	04e782a3          	sb	a4,69(a5)
    }
    taskEXIT_CRITICAL();
    c0e8:	000267b7          	lui	a5,0x26
    c0ec:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c0f0:	fff78713          	addi	a4,a5,-1
    c0f4:	000267b7          	lui	a5,0x26
    c0f8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c0fc:	000267b7          	lui	a5,0x26
    c100:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c104:	00079463          	bnez	a5,c10c <prvUnlockQueue+0xd8>
    c108:	30046073          	csrsi	mstatus,8

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
    c10c:	30047073          	csrci	mstatus,8
    c110:	000267b7          	lui	a5,0x26
    c114:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c118:	00178713          	addi	a4,a5,1
    c11c:	000267b7          	lui	a5,0x26
    c120:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        int8_t cRxLock = pxQueue->cRxLock;
    c124:	fdc42783          	lw	a5,-36(s0)
    c128:	0447c783          	lbu	a5,68(a5)
    c12c:	fef407a3          	sb	a5,-17(s0)

        while( cRxLock > queueLOCKED_UNMODIFIED )
    c130:	03c0006f          	j	c16c <prvUnlockQueue+0x138>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    c134:	fdc42783          	lw	a5,-36(s0)
    c138:	0107a783          	lw	a5,16(a5)
    c13c:	02078e63          	beqz	a5,c178 <prvUnlockQueue+0x144>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    c140:	fdc42783          	lw	a5,-36(s0)
    c144:	01078793          	addi	a5,a5,16
    c148:	00078513          	mv	a0,a5
    c14c:	c9df60ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    c150:	00050793          	mv	a5,a0
    c154:	00078463          	beqz	a5,c15c <prvUnlockQueue+0x128>
                {
                    vTaskMissedYield();
    c158:	c64f70ef          	jal	ra,35bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
    c15c:	fef44783          	lbu	a5,-17(s0)
    c160:	fff78793          	addi	a5,a5,-1
    c164:	0ff7f793          	zext.b	a5,a5
    c168:	fef407a3          	sb	a5,-17(s0)
        while( cRxLock > queueLOCKED_UNMODIFIED )
    c16c:	fef40783          	lb	a5,-17(s0)
    c170:	fcf042e3          	bgtz	a5,c134 <prvUnlockQueue+0x100>
    c174:	0080006f          	j	c17c <prvUnlockQueue+0x148>
            }
            else
            {
                break;
    c178:	00000013          	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
    c17c:	fdc42783          	lw	a5,-36(s0)
    c180:	fff00713          	li	a4,-1
    c184:	04e78223          	sb	a4,68(a5)
    }
    taskEXIT_CRITICAL();
    c188:	000267b7          	lui	a5,0x26
    c18c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c190:	fff78713          	addi	a4,a5,-1
    c194:	000267b7          	lui	a5,0x26
    c198:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c19c:	000267b7          	lui	a5,0x26
    c1a0:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c1a4:	00079463          	bnez	a5,c1ac <prvUnlockQueue+0x178>
    c1a8:	30046073          	csrsi	mstatus,8
}
    c1ac:	00000013          	nop
    c1b0:	02c12083          	lw	ra,44(sp)
    c1b4:	02812403          	lw	s0,40(sp)
    c1b8:	03010113          	addi	sp,sp,48
    c1bc:	00008067          	ret

0000c1c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    c1c0:	fd010113          	addi	sp,sp,-48
    c1c4:	02812623          	sw	s0,44(sp)
    c1c8:	03010413          	addi	s0,sp,48
    c1cc:	fca42e23          	sw	a0,-36(s0)
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    c1d0:	30047073          	csrci	mstatus,8
    c1d4:	000267b7          	lui	a5,0x26
    c1d8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c1dc:	00178713          	addi	a4,a5,1
    c1e0:	000267b7          	lui	a5,0x26
    c1e4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    c1e8:	fdc42783          	lw	a5,-36(s0)
    c1ec:	0387a783          	lw	a5,56(a5)
    c1f0:	00079863          	bnez	a5,c200 <prvIsQueueEmpty+0x40>
        {
            xReturn = pdTRUE;
    c1f4:	00100793          	li	a5,1
    c1f8:	fef42623          	sw	a5,-20(s0)
    c1fc:	0080006f          	j	c204 <prvIsQueueEmpty+0x44>
        }
        else
        {
            xReturn = pdFALSE;
    c200:	fe042623          	sw	zero,-20(s0)
        }
    }
    taskEXIT_CRITICAL();
    c204:	000267b7          	lui	a5,0x26
    c208:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c20c:	fff78713          	addi	a4,a5,-1
    c210:	000267b7          	lui	a5,0x26
    c214:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c218:	000267b7          	lui	a5,0x26
    c21c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c220:	00079463          	bnez	a5,c228 <prvIsQueueEmpty+0x68>
    c224:	30046073          	csrsi	mstatus,8

    return xReturn;
    c228:	fec42783          	lw	a5,-20(s0)
}
    c22c:	00078513          	mv	a0,a5
    c230:	02c12403          	lw	s0,44(sp)
    c234:	03010113          	addi	sp,sp,48
    c238:	00008067          	ret

0000c23c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    c23c:	fd010113          	addi	sp,sp,-48
    c240:	02812623          	sw	s0,44(sp)
    c244:	03010413          	addi	s0,sp,48
    c248:	fca42e23          	sw	a0,-36(s0)
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
    c24c:	fdc42783          	lw	a5,-36(s0)
    c250:	fef42623          	sw	a5,-20(s0)

    configASSERT( pxQueue );
    c254:	fec42783          	lw	a5,-20(s0)
    c258:	00079a63          	bnez	a5,c26c <xQueueIsQueueEmptyFromISR+0x30>
    c25c:	30047073          	csrci	mstatus,8
    c260:	00100073          	ebreak
    c264:	00000013          	nop
    c268:	ffdff06f          	j	c264 <xQueueIsQueueEmptyFromISR+0x28>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    c26c:	fec42783          	lw	a5,-20(s0)
    c270:	0387a783          	lw	a5,56(a5)
    c274:	00079863          	bnez	a5,c284 <xQueueIsQueueEmptyFromISR+0x48>
    {
        xReturn = pdTRUE;
    c278:	00100793          	li	a5,1
    c27c:	fef42423          	sw	a5,-24(s0)
    c280:	0080006f          	j	c288 <xQueueIsQueueEmptyFromISR+0x4c>
    }
    else
    {
        xReturn = pdFALSE;
    c284:	fe042423          	sw	zero,-24(s0)
    }

    return xReturn;
    c288:	fe842783          	lw	a5,-24(s0)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    c28c:	00078513          	mv	a0,a5
    c290:	02c12403          	lw	s0,44(sp)
    c294:	03010113          	addi	sp,sp,48
    c298:	00008067          	ret

0000c29c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    c29c:	fd010113          	addi	sp,sp,-48
    c2a0:	02812623          	sw	s0,44(sp)
    c2a4:	03010413          	addi	s0,sp,48
    c2a8:	fca42e23          	sw	a0,-36(s0)
    BaseType_t xReturn;

    taskENTER_CRITICAL();
    c2ac:	30047073          	csrci	mstatus,8
    c2b0:	000267b7          	lui	a5,0x26
    c2b4:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c2b8:	00178713          	addi	a4,a5,1
    c2bc:	000267b7          	lui	a5,0x26
    c2c0:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    c2c4:	fdc42783          	lw	a5,-36(s0)
    c2c8:	0387a703          	lw	a4,56(a5)
    c2cc:	fdc42783          	lw	a5,-36(s0)
    c2d0:	03c7a783          	lw	a5,60(a5)
    c2d4:	00f71863          	bne	a4,a5,c2e4 <prvIsQueueFull+0x48>
        {
            xReturn = pdTRUE;
    c2d8:	00100793          	li	a5,1
    c2dc:	fef42623          	sw	a5,-20(s0)
    c2e0:	0080006f          	j	c2e8 <prvIsQueueFull+0x4c>
        }
        else
        {
            xReturn = pdFALSE;
    c2e4:	fe042623          	sw	zero,-20(s0)
        }
    }
    taskEXIT_CRITICAL();
    c2e8:	000267b7          	lui	a5,0x26
    c2ec:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c2f0:	fff78713          	addi	a4,a5,-1
    c2f4:	000267b7          	lui	a5,0x26
    c2f8:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c2fc:	000267b7          	lui	a5,0x26
    c300:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c304:	00079463          	bnez	a5,c30c <prvIsQueueFull+0x70>
    c308:	30046073          	csrsi	mstatus,8

    return xReturn;
    c30c:	fec42783          	lw	a5,-20(s0)
}
    c310:	00078513          	mv	a0,a5
    c314:	02c12403          	lw	s0,44(sp)
    c318:	03010113          	addi	sp,sp,48
    c31c:	00008067          	ret

0000c320 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    c320:	fd010113          	addi	sp,sp,-48
    c324:	02812623          	sw	s0,44(sp)
    c328:	03010413          	addi	s0,sp,48
    c32c:	fca42e23          	sw	a0,-36(s0)
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
    c330:	fdc42783          	lw	a5,-36(s0)
    c334:	fef42623          	sw	a5,-20(s0)

    configASSERT( pxQueue );
    c338:	fec42783          	lw	a5,-20(s0)
    c33c:	00079a63          	bnez	a5,c350 <xQueueIsQueueFullFromISR+0x30>
    c340:	30047073          	csrci	mstatus,8
    c344:	00100073          	ebreak
    c348:	00000013          	nop
    c34c:	ffdff06f          	j	c348 <xQueueIsQueueFullFromISR+0x28>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    c350:	fec42783          	lw	a5,-20(s0)
    c354:	0387a703          	lw	a4,56(a5)
    c358:	fec42783          	lw	a5,-20(s0)
    c35c:	03c7a783          	lw	a5,60(a5)
    c360:	00f71863          	bne	a4,a5,c370 <xQueueIsQueueFullFromISR+0x50>
    {
        xReturn = pdTRUE;
    c364:	00100793          	li	a5,1
    c368:	fef42423          	sw	a5,-24(s0)
    c36c:	0080006f          	j	c374 <xQueueIsQueueFullFromISR+0x54>
    }
    else
    {
        xReturn = pdFALSE;
    c370:	fe042423          	sw	zero,-24(s0)
    }

    return xReturn;
    c374:	fe842783          	lw	a5,-24(s0)
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    c378:	00078513          	mv	a0,a5
    c37c:	02c12403          	lw	s0,44(sp)
    c380:	03010113          	addi	sp,sp,48
    c384:	00008067          	ret

0000c388 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
    c388:	fd010113          	addi	sp,sp,-48
    c38c:	02812623          	sw	s0,44(sp)
    c390:	03010413          	addi	s0,sp,48
    c394:	fca42e23          	sw	a0,-36(s0)
    c398:	fcb42c23          	sw	a1,-40(s0)
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
    c39c:	fe042623          	sw	zero,-20(s0)

        configASSERT( xQueue );
    c3a0:	fdc42783          	lw	a5,-36(s0)
    c3a4:	00079a63          	bnez	a5,c3b8 <vQueueAddToRegistry+0x30>
    c3a8:	30047073          	csrci	mstatus,8
    c3ac:	00100073          	ebreak
    c3b0:	00000013          	nop
    c3b4:	ffdff06f          	j	c3b0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
    c3b8:	fd842783          	lw	a5,-40(s0)
    c3bc:	08078e63          	beqz	a5,c458 <vQueueAddToRegistry+0xd0>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    c3c0:	fe042423          	sw	zero,-24(s0)
    c3c4:	0880006f          	j	c44c <vQueueAddToRegistry+0xc4>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
    c3c8:	0003b7b7          	lui	a5,0x3b
    c3cc:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c3d0:	fe842783          	lw	a5,-24(s0)
    c3d4:	00379793          	slli	a5,a5,0x3
    c3d8:	00f707b3          	add	a5,a4,a5
    c3dc:	0047a783          	lw	a5,4(a5)
    c3e0:	fdc42703          	lw	a4,-36(s0)
    c3e4:	02f71063          	bne	a4,a5,c404 <vQueueAddToRegistry+0x7c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
    c3e8:	fe842783          	lw	a5,-24(s0)
    c3ec:	00379713          	slli	a4,a5,0x3
    c3f0:	0003b7b7          	lui	a5,0x3b
    c3f4:	76c78793          	addi	a5,a5,1900 # 3b76c <xQueueRegistry>
    c3f8:	00f707b3          	add	a5,a4,a5
    c3fc:	fef42623          	sw	a5,-20(s0)
                    break;
    c400:	0580006f          	j	c458 <vQueueAddToRegistry+0xd0>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
    c404:	fec42783          	lw	a5,-20(s0)
    c408:	02079c63          	bnez	a5,c440 <vQueueAddToRegistry+0xb8>
    c40c:	0003b7b7          	lui	a5,0x3b
    c410:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c414:	fe842783          	lw	a5,-24(s0)
    c418:	00379793          	slli	a5,a5,0x3
    c41c:	00f707b3          	add	a5,a4,a5
    c420:	0007a783          	lw	a5,0(a5)
    c424:	00079e63          	bnez	a5,c440 <vQueueAddToRegistry+0xb8>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
    c428:	fe842783          	lw	a5,-24(s0)
    c42c:	00379713          	slli	a4,a5,0x3
    c430:	0003b7b7          	lui	a5,0x3b
    c434:	76c78793          	addi	a5,a5,1900 # 3b76c <xQueueRegistry>
    c438:	00f707b3          	add	a5,a4,a5
    c43c:	fef42623          	sw	a5,-20(s0)
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    c440:	fe842783          	lw	a5,-24(s0)
    c444:	00178793          	addi	a5,a5,1
    c448:	fef42423          	sw	a5,-24(s0)
    c44c:	fe842703          	lw	a4,-24(s0)
    c450:	00700793          	li	a5,7
    c454:	f6e7fae3          	bgeu	a5,a4,c3c8 <vQueueAddToRegistry+0x40>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
    c458:	fec42783          	lw	a5,-20(s0)
    c45c:	00078e63          	beqz	a5,c478 <vQueueAddToRegistry+0xf0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
    c460:	fec42783          	lw	a5,-20(s0)
    c464:	fd842703          	lw	a4,-40(s0)
    c468:	00e7a023          	sw	a4,0(a5)
            pxEntryToWrite->xHandle = xQueue;
    c46c:	fec42783          	lw	a5,-20(s0)
    c470:	fdc42703          	lw	a4,-36(s0)
    c474:	00e7a223          	sw	a4,4(a5)

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
    c478:	00000013          	nop
    c47c:	02c12403          	lw	s0,44(sp)
    c480:	03010113          	addi	sp,sp,48
    c484:	00008067          	ret

0000c488 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
    c488:	fd010113          	addi	sp,sp,-48
    c48c:	02812623          	sw	s0,44(sp)
    c490:	03010413          	addi	s0,sp,48
    c494:	fca42e23          	sw	a0,-36(s0)
        UBaseType_t ux;
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    c498:	fe042623          	sw	zero,-20(s0)

        configASSERT( xQueue );
    c49c:	fdc42783          	lw	a5,-36(s0)
    c4a0:	00079a63          	bnez	a5,c4b4 <pcQueueGetName+0x2c>
    c4a4:	30047073          	csrci	mstatus,8
    c4a8:	00100073          	ebreak
    c4ac:	00000013          	nop
    c4b0:	ffdff06f          	j	c4ac <pcQueueGetName+0x24>

        /* Note there is nothing here to protect against another task adding or
         * removing entries from the registry while it is being searched. */

        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    c4b4:	fe042423          	sw	zero,-24(s0)
    c4b8:	0500006f          	j	c508 <pcQueueGetName+0x80>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
    c4bc:	0003b7b7          	lui	a5,0x3b
    c4c0:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c4c4:	fe842783          	lw	a5,-24(s0)
    c4c8:	00379793          	slli	a5,a5,0x3
    c4cc:	00f707b3          	add	a5,a4,a5
    c4d0:	0047a783          	lw	a5,4(a5)
    c4d4:	fdc42703          	lw	a4,-36(s0)
    c4d8:	02f71263          	bne	a4,a5,c4fc <pcQueueGetName+0x74>
            {
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
    c4dc:	0003b7b7          	lui	a5,0x3b
    c4e0:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c4e4:	fe842783          	lw	a5,-24(s0)
    c4e8:	00379793          	slli	a5,a5,0x3
    c4ec:	00f707b3          	add	a5,a4,a5
    c4f0:	0007a783          	lw	a5,0(a5)
    c4f4:	fef42623          	sw	a5,-20(s0)
                break;
    c4f8:	01c0006f          	j	c514 <pcQueueGetName+0x8c>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    c4fc:	fe842783          	lw	a5,-24(s0)
    c500:	00178793          	addi	a5,a5,1
    c504:	fef42423          	sw	a5,-24(s0)
    c508:	fe842703          	lw	a4,-24(s0)
    c50c:	00700793          	li	a5,7
    c510:	fae7f6e3          	bgeu	a5,a4,c4bc <pcQueueGetName+0x34>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return pcReturn;
    c514:	fec42783          	lw	a5,-20(s0)
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
    c518:	00078513          	mv	a0,a5
    c51c:	02c12403          	lw	s0,44(sp)
    c520:	03010113          	addi	sp,sp,48
    c524:	00008067          	ret

0000c528 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
    c528:	fd010113          	addi	sp,sp,-48
    c52c:	02812623          	sw	s0,44(sp)
    c530:	03010413          	addi	s0,sp,48
    c534:	fca42e23          	sw	a0,-36(s0)
        UBaseType_t ux;

        configASSERT( xQueue );
    c538:	fdc42783          	lw	a5,-36(s0)
    c53c:	00079a63          	bnez	a5,c550 <vQueueUnregisterQueue+0x28>
    c540:	30047073          	csrci	mstatus,8
    c544:	00100073          	ebreak
    c548:	00000013          	nop
    c54c:	ffdff06f          	j	c548 <vQueueUnregisterQueue+0x20>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    c550:	fe042623          	sw	zero,-20(s0)
    c554:	0640006f          	j	c5b8 <vQueueUnregisterQueue+0x90>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
    c558:	0003b7b7          	lui	a5,0x3b
    c55c:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c560:	fec42783          	lw	a5,-20(s0)
    c564:	00379793          	slli	a5,a5,0x3
    c568:	00f707b3          	add	a5,a4,a5
    c56c:	0047a783          	lw	a5,4(a5)
    c570:	fdc42703          	lw	a4,-36(s0)
    c574:	02f71c63          	bne	a4,a5,c5ac <vQueueUnregisterQueue+0x84>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
    c578:	0003b7b7          	lui	a5,0x3b
    c57c:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c580:	fec42783          	lw	a5,-20(s0)
    c584:	00379793          	slli	a5,a5,0x3
    c588:	00f707b3          	add	a5,a4,a5
    c58c:	0007a023          	sw	zero,0(a5)

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
    c590:	0003b7b7          	lui	a5,0x3b
    c594:	76c78713          	addi	a4,a5,1900 # 3b76c <xQueueRegistry>
    c598:	fec42783          	lw	a5,-20(s0)
    c59c:	00379793          	slli	a5,a5,0x3
    c5a0:	00f707b3          	add	a5,a4,a5
    c5a4:	0007a223          	sw	zero,4(a5)
                break;
    c5a8:	0200006f          	j	c5c8 <vQueueUnregisterQueue+0xa0>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    c5ac:	fec42783          	lw	a5,-20(s0)
    c5b0:	00178793          	addi	a5,a5,1
    c5b4:	fef42623          	sw	a5,-20(s0)
    c5b8:	fec42703          	lw	a4,-20(s0)
    c5bc:	00700793          	li	a5,7
    c5c0:	f8e7fce3          	bgeu	a5,a4,c558 <vQueueUnregisterQueue+0x30>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    c5c4:	00000013          	nop
    c5c8:	00000013          	nop
    c5cc:	02c12403          	lw	s0,44(sp)
    c5d0:	03010113          	addi	sp,sp,48
    c5d4:	00008067          	ret

0000c5d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    c5d8:	fd010113          	addi	sp,sp,-48
    c5dc:	02112623          	sw	ra,44(sp)
    c5e0:	02812423          	sw	s0,40(sp)
    c5e4:	03010413          	addi	s0,sp,48
    c5e8:	fca42e23          	sw	a0,-36(s0)
    c5ec:	fcb42c23          	sw	a1,-40(s0)
    c5f0:	fcc42a23          	sw	a2,-44(s0)
        Queue_t * const pxQueue = xQueue;
    c5f4:	fdc42783          	lw	a5,-36(s0)
    c5f8:	fef42623          	sw	a5,-20(s0)
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    c5fc:	30047073          	csrci	mstatus,8
    c600:	000267b7          	lui	a5,0x26
    c604:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c608:	00178713          	addi	a4,a5,1
    c60c:	000267b7          	lui	a5,0x26
    c610:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c614:	fec42783          	lw	a5,-20(s0)
    c618:	0447c783          	lbu	a5,68(a5)
    c61c:	01879713          	slli	a4,a5,0x18
    c620:	41875713          	srai	a4,a4,0x18
    c624:	fff00793          	li	a5,-1
    c628:	00f71663          	bne	a4,a5,c634 <vQueueWaitForMessageRestricted+0x5c>
    c62c:	fec42783          	lw	a5,-20(s0)
    c630:	04078223          	sb	zero,68(a5)
    c634:	fec42783          	lw	a5,-20(s0)
    c638:	0457c783          	lbu	a5,69(a5)
    c63c:	01879713          	slli	a4,a5,0x18
    c640:	41875713          	srai	a4,a4,0x18
    c644:	fff00793          	li	a5,-1
    c648:	00f71663          	bne	a4,a5,c654 <vQueueWaitForMessageRestricted+0x7c>
    c64c:	fec42783          	lw	a5,-20(s0)
    c650:	040782a3          	sb	zero,69(a5)
    c654:	000267b7          	lui	a5,0x26
    c658:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c65c:	fff78713          	addi	a4,a5,-1
    c660:	000267b7          	lui	a5,0x26
    c664:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c668:	000267b7          	lui	a5,0x26
    c66c:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c670:	00079463          	bnez	a5,c678 <vQueueWaitForMessageRestricted+0xa0>
    c674:	30046073          	csrsi	mstatus,8

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    c678:	fec42783          	lw	a5,-20(s0)
    c67c:	0387a783          	lw	a5,56(a5)
    c680:	00079e63          	bnez	a5,c69c <vQueueWaitForMessageRestricted+0xc4>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    c684:	fec42783          	lw	a5,-20(s0)
    c688:	02478793          	addi	a5,a5,36
    c68c:	fd442603          	lw	a2,-44(s0)
    c690:	fd842583          	lw	a1,-40(s0)
    c694:	00078513          	mv	a0,a5
    c698:	e6cf60ef          	jal	ra,2d04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    c69c:	fec42503          	lw	a0,-20(s0)
    c6a0:	995ff0ef          	jal	ra,c034 <prvUnlockQueue>
    }
    c6a4:	00000013          	nop
    c6a8:	02c12083          	lw	ra,44(sp)
    c6ac:	02812403          	lw	s0,40(sp)
    c6b0:	03010113          	addi	sp,sp,48
    c6b4:	00008067          	ret

0000c6b8 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
    c6b8:	fd010113          	addi	sp,sp,-48
    c6bc:	02112623          	sw	ra,44(sp)
    c6c0:	02812423          	sw	s0,40(sp)
    c6c4:	03010413          	addi	s0,sp,48
    c6c8:	fca42e23          	sw	a0,-36(s0)
        QueueSetHandle_t pxQueue;

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
    c6cc:	00000613          	li	a2,0
    c6d0:	00400593          	li	a1,4
    c6d4:	fdc42503          	lw	a0,-36(s0)
    c6d8:	be1fd0ef          	jal	ra,a2b8 <xQueueGenericCreate>
    c6dc:	fea42623          	sw	a0,-20(s0)

        return pxQueue;
    c6e0:	fec42783          	lw	a5,-20(s0)
    }
    c6e4:	00078513          	mv	a0,a5
    c6e8:	02c12083          	lw	ra,44(sp)
    c6ec:	02812403          	lw	s0,40(sp)
    c6f0:	03010113          	addi	sp,sp,48
    c6f4:	00008067          	ret

0000c6f8 <xQueueAddToSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet )
    {
    c6f8:	fd010113          	addi	sp,sp,-48
    c6fc:	02812623          	sw	s0,44(sp)
    c700:	03010413          	addi	s0,sp,48
    c704:	fca42e23          	sw	a0,-36(s0)
    c708:	fcb42c23          	sw	a1,-40(s0)
        BaseType_t xReturn;

        taskENTER_CRITICAL();
    c70c:	30047073          	csrci	mstatus,8
    c710:	000267b7          	lui	a5,0x26
    c714:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c718:	00178713          	addi	a4,a5,1
    c71c:	000267b7          	lui	a5,0x26
    c720:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
        {
            if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
    c724:	fdc42783          	lw	a5,-36(s0)
    c728:	0487a783          	lw	a5,72(a5)
    c72c:	00078663          	beqz	a5,c738 <xQueueAddToSet+0x40>
            {
                /* Cannot add a queue/semaphore to more than one queue set. */
                xReturn = pdFAIL;
    c730:	fe042623          	sw	zero,-20(s0)
    c734:	02c0006f          	j	c760 <xQueueAddToSet+0x68>
            }
            else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
    c738:	fdc42783          	lw	a5,-36(s0)
    c73c:	0387a783          	lw	a5,56(a5)
    c740:	00078663          	beqz	a5,c74c <xQueueAddToSet+0x54>
            {
                /* Cannot add a queue/semaphore to a queue set if there are already
                 * items in the queue/semaphore. */
                xReturn = pdFAIL;
    c744:	fe042623          	sw	zero,-20(s0)
    c748:	0180006f          	j	c760 <xQueueAddToSet+0x68>
            }
            else
            {
                ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
    c74c:	fdc42783          	lw	a5,-36(s0)
    c750:	fd842703          	lw	a4,-40(s0)
    c754:	04e7a423          	sw	a4,72(a5)
                xReturn = pdPASS;
    c758:	00100793          	li	a5,1
    c75c:	fef42623          	sw	a5,-20(s0)
            }
        }
        taskEXIT_CRITICAL();
    c760:	000267b7          	lui	a5,0x26
    c764:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c768:	fff78713          	addi	a4,a5,-1
    c76c:	000267b7          	lui	a5,0x26
    c770:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c774:	000267b7          	lui	a5,0x26
    c778:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c77c:	00079463          	bnez	a5,c784 <xQueueAddToSet+0x8c>
    c780:	30046073          	csrsi	mstatus,8

        return xReturn;
    c784:	fec42783          	lw	a5,-20(s0)
    }
    c788:	00078513          	mv	a0,a5
    c78c:	02c12403          	lw	s0,44(sp)
    c790:	03010113          	addi	sp,sp,48
    c794:	00008067          	ret

0000c798 <xQueueRemoveFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueRemoveFromSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                                    QueueSetHandle_t xQueueSet )
    {
    c798:	fd010113          	addi	sp,sp,-48
    c79c:	02812623          	sw	s0,44(sp)
    c7a0:	03010413          	addi	s0,sp,48
    c7a4:	fca42e23          	sw	a0,-36(s0)
    c7a8:	fcb42c23          	sw	a1,-40(s0)
        BaseType_t xReturn;
        Queue_t * const pxQueueOrSemaphore = ( Queue_t * ) xQueueOrSemaphore;
    c7ac:	fdc42783          	lw	a5,-36(s0)
    c7b0:	fef42623          	sw	a5,-20(s0)

        if( pxQueueOrSemaphore->pxQueueSetContainer != xQueueSet )
    c7b4:	fec42783          	lw	a5,-20(s0)
    c7b8:	0487a783          	lw	a5,72(a5)
    c7bc:	fd842703          	lw	a4,-40(s0)
    c7c0:	00f70663          	beq	a4,a5,c7cc <xQueueRemoveFromSet+0x34>
        {
            /* The queue was not a member of the set. */
            xReturn = pdFAIL;
    c7c4:	fe042423          	sw	zero,-24(s0)
    c7c8:	0640006f          	j	c82c <xQueueRemoveFromSet+0x94>
        }
        else if( pxQueueOrSemaphore->uxMessagesWaiting != ( UBaseType_t ) 0 )
    c7cc:	fec42783          	lw	a5,-20(s0)
    c7d0:	0387a783          	lw	a5,56(a5)
    c7d4:	00078663          	beqz	a5,c7e0 <xQueueRemoveFromSet+0x48>
        {
            /* It is dangerous to remove a queue from a set when the queue is
             * not empty because the queue set will still hold pending events for
             * the queue. */
            xReturn = pdFAIL;
    c7d8:	fe042423          	sw	zero,-24(s0)
    c7dc:	0500006f          	j	c82c <xQueueRemoveFromSet+0x94>
        }
        else
        {
            taskENTER_CRITICAL();
    c7e0:	30047073          	csrci	mstatus,8
    c7e4:	000267b7          	lui	a5,0x26
    c7e8:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c7ec:	00178713          	addi	a4,a5,1
    c7f0:	000267b7          	lui	a5,0x26
    c7f4:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
            {
                /* The queue is no longer contained in the set. */
                pxQueueOrSemaphore->pxQueueSetContainer = NULL;
    c7f8:	fec42783          	lw	a5,-20(s0)
    c7fc:	0407a423          	sw	zero,72(a5)
            }
            taskEXIT_CRITICAL();
    c800:	000267b7          	lui	a5,0x26
    c804:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c808:	fff78713          	addi	a4,a5,-1
    c80c:	000267b7          	lui	a5,0x26
    c810:	00e7aa23          	sw	a4,20(a5) # 26014 <xCriticalNesting>
    c814:	000267b7          	lui	a5,0x26
    c818:	0147a783          	lw	a5,20(a5) # 26014 <xCriticalNesting>
    c81c:	00079463          	bnez	a5,c824 <xQueueRemoveFromSet+0x8c>
    c820:	30046073          	csrsi	mstatus,8
            xReturn = pdPASS;
    c824:	00100793          	li	a5,1
    c828:	fef42423          	sw	a5,-24(s0)
        }

        return xReturn;
    c82c:	fe842783          	lw	a5,-24(s0)
    } /*lint !e818 xQueueSet could not be declared as pointing to const as it is a typedef. */
    c830:	00078513          	mv	a0,a5
    c834:	02c12403          	lw	s0,44(sp)
    c838:	03010113          	addi	sp,sp,48
    c83c:	00008067          	ret

0000c840 <xQueueSelectFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                TickType_t const xTicksToWait )
    {
    c840:	fd010113          	addi	sp,sp,-48
    c844:	02112623          	sw	ra,44(sp)
    c848:	02812423          	sw	s0,40(sp)
    c84c:	03010413          	addi	s0,sp,48
    c850:	fca42e23          	sw	a0,-36(s0)
    c854:	fcb42c23          	sw	a1,-40(s0)
    c858:	000287b7          	lui	a5,0x28
    c85c:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    c860:	fee42623          	sw	a4,-20(s0)
    c864:	00000713          	li	a4,0
        QueueSetMemberHandle_t xReturn = NULL;
    c868:	fe042423          	sw	zero,-24(s0)

        ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait ); /*lint !e961 Casting from one typedef to another is not redundant. */
    c86c:	fe840793          	addi	a5,s0,-24
    c870:	fd842603          	lw	a2,-40(s0)
    c874:	00078593          	mv	a1,a5
    c878:	fdc42503          	lw	a0,-36(s0)
    c87c:	eb4fe0ef          	jal	ra,af30 <xQueueReceive>
        return xReturn;
    c880:	fe842783          	lw	a5,-24(s0)
    c884:	00078713          	mv	a4,a5
    }
    c888:	000287b7          	lui	a5,0x28
    c88c:	fec42683          	lw	a3,-20(s0)
    c890:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    c894:	00f6c7b3          	xor	a5,a3,a5
    c898:	00000693          	li	a3,0
    c89c:	00078463          	beqz	a5,c8a4 <xQueueSelectFromSet+0x64>
    c8a0:	3fc010ef          	jal	ra,dc9c <__stack_chk_fail>
    c8a4:	00070513          	mv	a0,a4
    c8a8:	02c12083          	lw	ra,44(sp)
    c8ac:	02812403          	lw	s0,40(sp)
    c8b0:	03010113          	addi	sp,sp,48
    c8b4:	00008067          	ret

0000c8b8 <xQueueSelectFromSetFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSetFromISR( QueueSetHandle_t xQueueSet )
    {
    c8b8:	fd010113          	addi	sp,sp,-48
    c8bc:	02112623          	sw	ra,44(sp)
    c8c0:	02812423          	sw	s0,40(sp)
    c8c4:	03010413          	addi	s0,sp,48
    c8c8:	fca42e23          	sw	a0,-36(s0)
    c8cc:	000287b7          	lui	a5,0x28
    c8d0:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
    c8d4:	fee42623          	sw	a4,-20(s0)
    c8d8:	00000713          	li	a4,0
        QueueSetMemberHandle_t xReturn = NULL;
    c8dc:	fe042423          	sw	zero,-24(s0)

        ( void ) xQueueReceiveFromISR( ( QueueHandle_t ) xQueueSet, &xReturn, NULL ); /*lint !e961 Casting from one typedef to another is not redundant. */
    c8e0:	fe840793          	addi	a5,s0,-24
    c8e4:	00000613          	li	a2,0
    c8e8:	00078593          	mv	a1,a5
    c8ec:	fdc42503          	lw	a0,-36(s0)
    c8f0:	83cff0ef          	jal	ra,b92c <xQueueReceiveFromISR>
        return xReturn;
    c8f4:	fe842783          	lw	a5,-24(s0)
    c8f8:	00078713          	mv	a4,a5
    }
    c8fc:	000287b7          	lui	a5,0x28
    c900:	fec42683          	lw	a3,-20(s0)
    c904:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
    c908:	00f6c7b3          	xor	a5,a3,a5
    c90c:	00000693          	li	a3,0
    c910:	00078463          	beqz	a5,c918 <xQueueSelectFromSetFromISR+0x60>
    c914:	388010ef          	jal	ra,dc9c <__stack_chk_fail>
    c918:	00070513          	mv	a0,a4
    c91c:	02c12083          	lw	ra,44(sp)
    c920:	02812403          	lw	s0,40(sp)
    c924:	03010113          	addi	sp,sp,48
    c928:	00008067          	ret

0000c92c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
    c92c:	fd010113          	addi	sp,sp,-48
    c930:	02112623          	sw	ra,44(sp)
    c934:	02812423          	sw	s0,40(sp)
    c938:	03010413          	addi	s0,sp,48
    c93c:	fca42e23          	sw	a0,-36(s0)
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    c940:	fdc42783          	lw	a5,-36(s0)
    c944:	0487a783          	lw	a5,72(a5)
    c948:	fef42423          	sw	a5,-24(s0)
        BaseType_t xReturn = pdFALSE;
    c94c:	fe042223          	sw	zero,-28(s0)
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
    c950:	fe842783          	lw	a5,-24(s0)
    c954:	00079a63          	bnez	a5,c968 <prvNotifyQueueSetContainer+0x3c>
    c958:	30047073          	csrci	mstatus,8
    c95c:	00100073          	ebreak
    c960:	00000013          	nop
    c964:	ffdff06f          	j	c960 <prvNotifyQueueSetContainer+0x34>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    c968:	fe842783          	lw	a5,-24(s0)
    c96c:	0387a703          	lw	a4,56(a5)
    c970:	fe842783          	lw	a5,-24(s0)
    c974:	03c7a783          	lw	a5,60(a5)
    c978:	00f76a63          	bltu	a4,a5,c98c <prvNotifyQueueSetContainer+0x60>
    c97c:	30047073          	csrci	mstatus,8
    c980:	00100073          	ebreak
    c984:	00000013          	nop
    c988:	ffdff06f          	j	c984 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    c98c:	fe842783          	lw	a5,-24(s0)
    c990:	0387a703          	lw	a4,56(a5)
    c994:	fe842783          	lw	a5,-24(s0)
    c998:	03c7a783          	lw	a5,60(a5)
    c99c:	0af77863          	bgeu	a4,a5,ca4c <prvNotifyQueueSetContainer+0x120>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    c9a0:	fe842783          	lw	a5,-24(s0)
    c9a4:	0457c783          	lbu	a5,69(a5)
    c9a8:	fef401a3          	sb	a5,-29(s0)

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
    c9ac:	fdc40793          	addi	a5,s0,-36
    c9b0:	00000613          	li	a2,0
    c9b4:	00078593          	mv	a1,a5
    c9b8:	fe842503          	lw	a0,-24(s0)
    c9bc:	c54ff0ef          	jal	ra,be10 <prvCopyDataToQueue>
    c9c0:	fea42223          	sw	a0,-28(s0)

            if( cTxLock == queueUNLOCKED )
    c9c4:	fe340703          	lb	a4,-29(s0)
    c9c8:	fff00793          	li	a5,-1
    c9cc:	02f71a63          	bne	a4,a5,ca00 <prvNotifyQueueSetContainer+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    c9d0:	fe842783          	lw	a5,-24(s0)
    c9d4:	0247a783          	lw	a5,36(a5)
    c9d8:	06078a63          	beqz	a5,ca4c <prvNotifyQueueSetContainer+0x120>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    c9dc:	fe842783          	lw	a5,-24(s0)
    c9e0:	02478793          	addi	a5,a5,36
    c9e4:	00078513          	mv	a0,a5
    c9e8:	c00f60ef          	jal	ra,2de8 <xTaskRemoveFromEventList>
    c9ec:	00050793          	mv	a5,a0
    c9f0:	04078e63          	beqz	a5,ca4c <prvNotifyQueueSetContainer+0x120>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
    c9f4:	00100793          	li	a5,1
    c9f8:	fef42223          	sw	a5,-28(s0)
    c9fc:	0500006f          	j	ca4c <prvNotifyQueueSetContainer+0x120>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
    ca00:	c74f50ef          	jal	ra,1e74 <uxTaskGetNumberOfTasks>
    ca04:	fea42623          	sw	a0,-20(s0)
    ca08:	fe340783          	lb	a5,-29(s0)
    ca0c:	fec42703          	lw	a4,-20(s0)
    ca10:	02e7fe63          	bgeu	a5,a4,ca4c <prvNotifyQueueSetContainer+0x120>
    ca14:	fe340703          	lb	a4,-29(s0)
    ca18:	07f00793          	li	a5,127
    ca1c:	00f71a63          	bne	a4,a5,ca30 <prvNotifyQueueSetContainer+0x104>
    ca20:	30047073          	csrci	mstatus,8
    ca24:	00100073          	ebreak
    ca28:	00000013          	nop
    ca2c:	ffdff06f          	j	ca28 <prvNotifyQueueSetContainer+0xfc>
    ca30:	fe344783          	lbu	a5,-29(s0)
    ca34:	00178793          	addi	a5,a5,1
    ca38:	0ff7f793          	zext.b	a5,a5
    ca3c:	01879713          	slli	a4,a5,0x18
    ca40:	41875713          	srai	a4,a4,0x18
    ca44:	fe842783          	lw	a5,-24(s0)
    ca48:	04e782a3          	sb	a4,69(a5)
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    ca4c:	fe442783          	lw	a5,-28(s0)
    }
    ca50:	00078513          	mv	a0,a5
    ca54:	02c12083          	lw	ra,44(sp)
    ca58:	02812403          	lw	s0,40(sp)
    ca5c:	03010113          	addi	sp,sp,48
    ca60:	00008067          	ret

0000ca64 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ca64:	fc010113          	addi	sp,sp,-64
    ca68:	02812e23          	sw	s0,60(sp)
    ca6c:	04010413          	addi	s0,sp,64
    ca70:	fca42623          	sw	a0,-52(s0)
    ca74:	fcb42423          	sw	a1,-56(s0)
    ca78:	fcc42223          	sw	a2,-60(s0)
    ca7c:	fcd42023          	sw	a3,-64(s0)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
    ca80:	00000713          	li	a4,0
    ca84:	00000793          	li	a5,0
    ca88:	fee42423          	sw	a4,-24(s0)
    ca8c:	fef42623          	sw	a5,-20(s0)
    ca90:	000287b7          	lui	a5,0x28
    ca94:	c907a783          	lw	a5,-880(a5) # 27c90 <_alt_tick_rate>
  
  if (alt_ticks_per_second ())
    ca98:	12078263          	beqz	a5,cbbc <alt_alarm_start+0x158>
  {
    if (alarm)
    ca9c:	fcc42783          	lw	a5,-52(s0)
    caa0:	10078a63          	beqz	a5,cbb4 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
    caa4:	fcc42783          	lw	a5,-52(s0)
    caa8:	fc442703          	lw	a4,-60(s0)
    caac:	00e7a823          	sw	a4,16(a5)
      alarm->context  = context;
    cab0:	fcc42783          	lw	a5,-52(s0)
    cab4:	fc042703          	lw	a4,-64(s0)
    cab8:	00e7aa23          	sw	a4,20(a5)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    cabc:	00800793          	li	a5,8
    cac0:	3007b7f3          	csrrc	a5,mstatus,a5
    cac4:	fef42223          	sw	a5,-28(s0)
    return context;
    cac8:	fe442783          	lw	a5,-28(s0)
 
      irq_context = alt_irq_disable_all ();
    cacc:	fcf42a23          	sw	a5,-44(s0)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    cad0:	000287b7          	lui	a5,0x28
    cad4:	c987a703          	lw	a4,-872(a5) # 27c98 <_alt_nticks>
    cad8:	c9c7a783          	lw	a5,-868(a5)
      
      current_nticks = alt_nticks();
    cadc:	fee42423          	sw	a4,-24(s0)
    cae0:	fef42623          	sw	a5,-20(s0)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
    cae4:	fc842783          	lw	a5,-56(s0)
    cae8:	00078813          	mv	a6,a5
    caec:	00000893          	li	a7,0
    caf0:	fe842603          	lw	a2,-24(s0)
    caf4:	fec42683          	lw	a3,-20(s0)
    caf8:	00c80733          	add	a4,a6,a2
    cafc:	00070593          	mv	a1,a4
    cb00:	0105b5b3          	sltu	a1,a1,a6
    cb04:	00d887b3          	add	a5,a7,a3
    cb08:	00f586b3          	add	a3,a1,a5
    cb0c:	00068793          	mv	a5,a3
    cb10:	00070613          	mv	a2,a4
    cb14:	00078693          	mv	a3,a5
    cb18:	00100513          	li	a0,1
    cb1c:	00000593          	li	a1,0
    cb20:	00a60733          	add	a4,a2,a0
    cb24:	00070813          	mv	a6,a4
    cb28:	00c83833          	sltu	a6,a6,a2
    cb2c:	00b687b3          	add	a5,a3,a1
    cb30:	00f806b3          	add	a3,a6,a5
    cb34:	00068793          	mv	a5,a3
    cb38:	fcc42683          	lw	a3,-52(s0)
    cb3c:	00e6a423          	sw	a4,8(a3)
    cb40:	00f6a623          	sw	a5,12(a3)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    cb44:	fcc42783          	lw	a5,-52(s0)
    cb48:	00026737          	lui	a4,0x26
    cb4c:	03470713          	addi	a4,a4,52 # 26034 <alt_alarm_list>
    cb50:	fce42e23          	sw	a4,-36(s0)
    cb54:	fef42023          	sw	a5,-32(s0)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cb58:	fe042783          	lw	a5,-32(s0)
    cb5c:	fdc42703          	lw	a4,-36(s0)
    cb60:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    cb64:	fdc42783          	lw	a5,-36(s0)
    cb68:	0007a703          	lw	a4,0(a5)
    cb6c:	fe042783          	lw	a5,-32(s0)
    cb70:	00e7a023          	sw	a4,0(a5)

  list->next->previous = entry;
    cb74:	fdc42783          	lw	a5,-36(s0)
    cb78:	0007a783          	lw	a5,0(a5)
    cb7c:	fe042703          	lw	a4,-32(s0)
    cb80:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    cb84:	fdc42783          	lw	a5,-36(s0)
    cb88:	fe042703          	lw	a4,-32(s0)
    cb8c:	00e7a023          	sw	a4,0(a5)
}
    cb90:	00000013          	nop
    cb94:	fd442783          	lw	a5,-44(s0)
    cb98:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    cb9c:	fd842783          	lw	a5,-40(s0)
    cba0:	0087f793          	andi	a5,a5,8
    cba4:	3007a073          	csrs	mstatus,a5
}
    cba8:	00000013          	nop
      alt_irq_enable_all (irq_context);

      return 0;
    cbac:	00000793          	li	a5,0
    cbb0:	0100006f          	j	cbc0 <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
    cbb4:	fea00793          	li	a5,-22
    cbb8:	0080006f          	j	cbc0 <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
    cbbc:	f7a00793          	li	a5,-134
  }
}
    cbc0:	00078513          	mv	a0,a5
    cbc4:	03c12403          	lw	s0,60(sp)
    cbc8:	04010113          	addi	sp,sp,64
    cbcc:	00008067          	ret

0000cbd0 <alt_dcache_flush_all>:

/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */
void alt_dcache_flush_all (void)
{
    cbd0:	fe010113          	addi	sp,sp,-32
    cbd4:	00812e23          	sw	s0,28(sp)
    cbd8:	02010413          	addi	s0,sp,32
#if ALT_CPU_DCACHE_SIZE > 0
    char* i;
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    cbdc:	fe042623          	sw	zero,-20(s0)
    cbe0:	0180006f          	j	cbf8 <alt_dcache_flush_all+0x28>
    { 
      DCACHE_CLEAN_BY_INDEX_VAL(i); 
    cbe4:	fec42783          	lw	a5,-20(s0)
    cbe8:	0817a00f          	.4byte	0x817a00f
    for (i = (char*)0; i < (char*) ALT_CPU_DCACHE_SIZE; i+= ALT_CPU_DCACHE_LINE_SIZE)
    cbec:	fec42783          	lw	a5,-20(s0)
    cbf0:	02078793          	addi	a5,a5,32
    cbf4:	fef42623          	sw	a5,-20(s0)
    cbf8:	fec42703          	lw	a4,-20(s0)
    cbfc:	000017b7          	lui	a5,0x1
    cc00:	fef762e3          	bltu	a4,a5,cbe4 <alt_dcache_flush_all+0x14>
    }
#endif
}
    cc04:	00000013          	nop
    cc08:	00000013          	nop
    cc0c:	01c12403          	lw	s0,28(sp)
    cc10:	02010113          	addi	sp,sp,32
    cc14:	00008067          	ret

0000cc18 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cc18:	fe010113          	addi	sp,sp,-32
    cc1c:	00812e23          	sw	s0,28(sp)
    cc20:	02010413          	addi	s0,sp,32
    cc24:	fea42623          	sw	a0,-20(s0)
    cc28:	feb42423          	sw	a1,-24(s0)
    cc2c:	fec42223          	sw	a2,-28(s0)
  return len;
    cc30:	fe442783          	lw	a5,-28(s0)
}
    cc34:	00078513          	mv	a0,a5
    cc38:	01c12403          	lw	s0,28(sp)
    cc3c:	02010113          	addi	sp,sp,32
    cc40:	00008067          	ret

0000cc44 <alt_dev_reg>:
    }
    /* all other elements are set to zero */
  };
  
int alt_dev_reg (alt_dev* dev)
{
    cc44:	fe010113          	addi	sp,sp,-32
    cc48:	00112e23          	sw	ra,28(sp)
    cc4c:	00812c23          	sw	s0,24(sp)
    cc50:	02010413          	addi	s0,sp,32
    cc54:	fea42623          	sw	a0,-20(s0)
    return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    cc58:	000267b7          	lui	a5,0x26
    cc5c:	02478593          	addi	a1,a5,36 # 26024 <alt_dev_list>
    cc60:	fec42503          	lw	a0,-20(s0)
    cc64:	068000ef          	jal	ra,cccc <alt_dev_llist_insert>
    cc68:	00050793          	mv	a5,a0
}
    cc6c:	00078513          	mv	a0,a5
    cc70:	01c12083          	lw	ra,28(sp)
    cc74:	01812403          	lw	s0,24(sp)
    cc78:	02010113          	addi	sp,sp,32
    cc7c:	00008067          	ret

0000cc80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc80:	ff010113          	addi	sp,sp,-16
    cc84:	00112623          	sw	ra,12(sp)
    cc88:	00812423          	sw	s0,8(sp)
    cc8c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
    cc90:	000267b7          	lui	a5,0x26
    cc94:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
    cc98:	00078c63          	beqz	a5,ccb0 <alt_get_errno+0x30>
    cc9c:	000267b7          	lui	a5,0x26
    cca0:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
    cca4:	000780e7          	jalr	a5
    cca8:	00050793          	mv	a5,a0
    ccac:	00c0006f          	j	ccb8 <alt_get_errno+0x38>
    ccb0:	000287b7          	lui	a5,0x28
    ccb4:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
    ccb8:	00078513          	mv	a0,a5
    ccbc:	00c12083          	lw	ra,12(sp)
    ccc0:	00812403          	lw	s0,8(sp)
    ccc4:	01010113          	addi	sp,sp,16
    ccc8:	00008067          	ret

0000cccc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    cccc:	fd010113          	addi	sp,sp,-48
    ccd0:	02112623          	sw	ra,44(sp)
    ccd4:	02812423          	sw	s0,40(sp)
    ccd8:	03010413          	addi	s0,sp,48
    ccdc:	fca42e23          	sw	a0,-36(s0)
    cce0:	fcb42c23          	sw	a1,-40(s0)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cce4:	fdc42783          	lw	a5,-36(s0)
    cce8:	00078863          	beqz	a5,ccf8 <alt_dev_llist_insert+0x2c>
    ccec:	fdc42783          	lw	a5,-36(s0)
    ccf0:	0087a783          	lw	a5,8(a5)
    ccf4:	00079e63          	bnez	a5,cd10 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ccf8:	f89ff0ef          	jal	ra,cc80 <alt_get_errno>
    ccfc:	00050713          	mv	a4,a0
    cd00:	01600793          	li	a5,22
    cd04:	00f72023          	sw	a5,0(a4)
    return -EINVAL;
    cd08:	fea00793          	li	a5,-22
    cd0c:	0540006f          	j	cd60 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cd10:	fdc42783          	lw	a5,-36(s0)
    cd14:	fd842703          	lw	a4,-40(s0)
    cd18:	fee42423          	sw	a4,-24(s0)
    cd1c:	fef42623          	sw	a5,-20(s0)
  entry->previous = list;
    cd20:	fec42783          	lw	a5,-20(s0)
    cd24:	fe842703          	lw	a4,-24(s0)
    cd28:	00e7a223          	sw	a4,4(a5)
  entry->next     = list->next;
    cd2c:	fe842783          	lw	a5,-24(s0)
    cd30:	0007a703          	lw	a4,0(a5)
    cd34:	fec42783          	lw	a5,-20(s0)
    cd38:	00e7a023          	sw	a4,0(a5)
  list->next->previous = entry;
    cd3c:	fe842783          	lw	a5,-24(s0)
    cd40:	0007a783          	lw	a5,0(a5)
    cd44:	fec42703          	lw	a4,-20(s0)
    cd48:	00e7a223          	sw	a4,4(a5)
  list->next           = entry;
    cd4c:	fe842783          	lw	a5,-24(s0)
    cd50:	fec42703          	lw	a4,-20(s0)
    cd54:	00e7a023          	sw	a4,0(a5)
}
    cd58:	00000013          	nop

  return 0;  
    cd5c:	00000793          	li	a5,0
}
    cd60:	00078513          	mv	a0,a5
    cd64:	02c12083          	lw	ra,44(sp)
    cd68:	02812403          	lw	s0,40(sp)
    cd6c:	03010113          	addi	sp,sp,48
    cd70:	00008067          	ret

0000cd74 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cd74:	fe010113          	addi	sp,sp,-32
    cd78:	00112e23          	sw	ra,28(sp)
    cd7c:	00812c23          	sw	s0,24(sp)
    cd80:	02010413          	addi	s0,sp,32
  constructor* ctor;

  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    cd84:	000237b7          	lui	a5,0x23
    cd88:	44878793          	addi	a5,a5,1096 # 23448 <__init_array_start+0x4>
    cd8c:	fef42623          	sw	a5,-20(s0)
    cd90:	01c0006f          	j	cdac <_do_ctors+0x38>
        (*ctor) (); 
    cd94:	fec42783          	lw	a5,-20(s0)
    cd98:	0007a783          	lw	a5,0(a5)
    cd9c:	000780e7          	jalr	a5
  for (ctor = &__init_array_end[-1]; ctor >= __init_array_start; ctor--)
    cda0:	fec42783          	lw	a5,-20(s0)
    cda4:	ffc78793          	addi	a5,a5,-4
    cda8:	fef42623          	sw	a5,-20(s0)
    cdac:	fec42703          	lw	a4,-20(s0)
    cdb0:	000237b7          	lui	a5,0x23
    cdb4:	44478793          	addi	a5,a5,1092 # 23444 <__init_array_start>
    cdb8:	fcf77ee3          	bgeu	a4,a5,cd94 <_do_ctors+0x20>
}
    cdbc:	00000013          	nop
    cdc0:	00000013          	nop
    cdc4:	01c12083          	lw	ra,28(sp)
    cdc8:	01812403          	lw	s0,24(sp)
    cdcc:	02010113          	addi	sp,sp,32
    cdd0:	00008067          	ret

0000cdd4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cdd4:	fe010113          	addi	sp,sp,-32
    cdd8:	00112e23          	sw	ra,28(sp)
    cddc:	00812c23          	sw	s0,24(sp)
    cde0:	02010413          	addi	s0,sp,32
  destructor* dtor;

  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    cde4:	000237b7          	lui	a5,0x23
    cde8:	44878793          	addi	a5,a5,1096 # 23448 <__init_array_start+0x4>
    cdec:	fef42623          	sw	a5,-20(s0)
    cdf0:	01c0006f          	j	ce0c <_do_dtors+0x38>
        (*dtor) (); 
    cdf4:	fec42783          	lw	a5,-20(s0)
    cdf8:	0007a783          	lw	a5,0(a5)
    cdfc:	000780e7          	jalr	a5
  for (dtor = &__fini_array_end[-1]; dtor >= __fini_array_start; dtor--)
    ce00:	fec42783          	lw	a5,-20(s0)
    ce04:	ffc78793          	addi	a5,a5,-4
    ce08:	fef42623          	sw	a5,-20(s0)
    ce0c:	fec42703          	lw	a4,-20(s0)
    ce10:	000237b7          	lui	a5,0x23
    ce14:	44c78793          	addi	a5,a5,1100 # 2344c <__fini_array_end>
    ce18:	fcf77ee3          	bgeu	a4,a5,cdf4 <_do_dtors+0x20>
}
    ce1c:	00000013          	nop
    ce20:	00000013          	nop
    ce24:	01c12083          	lw	ra,28(sp)
    ce28:	01812403          	lw	s0,24(sp)
    ce2c:	02010113          	addi	sp,sp,32
    ce30:	00008067          	ret

0000ce34 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ce34:	ff010113          	addi	sp,sp,-16
    ce38:	00812623          	sw	s0,12(sp)
    ce3c:	01010413          	addi	s0,sp,16
#if ALT_CPU_ICACHE_SIZE > 0
    __asm__ volatile("fence.i" ::: "memory");
    ce40:	0000100f          	fence.i
#endif
}
    ce44:	00000013          	nop
    ce48:	00c12403          	lw	s0,12(sp)
    ce4c:	01010113          	addi	sp,sp,16
    ce50:	00008067          	ret

0000ce54 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int 
alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ce54:	fd010113          	addi	sp,sp,-48
    ce58:	02112623          	sw	ra,44(sp)
    ce5c:	02812423          	sw	s0,40(sp)
    ce60:	03010413          	addi	s0,sp,48
    ce64:	fea42623          	sw	a0,-20(s0)
    ce68:	feb42423          	sw	a1,-24(s0)
    ce6c:	fec42223          	sw	a2,-28(s0)
    ce70:	fed42023          	sw	a3,-32(s0)
    ce74:	fce42e23          	sw	a4,-36(s0)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ce78:	fdc42703          	lw	a4,-36(s0)
    ce7c:	fe042683          	lw	a3,-32(s0)
    ce80:	fe442603          	lw	a2,-28(s0)
    ce84:	fe842583          	lw	a1,-24(s0)
    ce88:	fec42503          	lw	a0,-20(s0)
    ce8c:	01c000ef          	jal	ra,cea8 <alt_iic_isr_register>
    ce90:	00050793          	mv	a5,a0
}  
    ce94:	00078513          	mv	a0,a5
    ce98:	02c12083          	lw	ra,44(sp)
    ce9c:	02812403          	lw	s0,40(sp)
    cea0:	03010113          	addi	sp,sp,48
    cea4:	00008067          	ret

0000cea8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cea8:	fa010113          	addi	sp,sp,-96
    ceac:	04812e23          	sw	s0,92(sp)
    ceb0:	06010413          	addi	s0,sp,96
    ceb4:	faa42e23          	sw	a0,-68(s0)
    ceb8:	fab42c23          	sw	a1,-72(s0)
    cebc:	fac42a23          	sw	a2,-76(s0)
    cec0:	fad42823          	sw	a3,-80(s0)
    cec4:	fae42623          	sw	a4,-84(s0)
  int rc = -EINVAL;  
    cec8:	fea00793          	li	a5,-22
    cecc:	fcf42223          	sw	a5,-60(s0)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ced0:	fb842783          	lw	a5,-72(s0)
    ced4:	fcf42423          	sw	a5,-56(s0)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ced8:	fc842703          	lw	a4,-56(s0)
    cedc:	00f00793          	li	a5,15
    cee0:	12e7c863          	blt	a5,a4,d010 <alt_iic_isr_register+0x168>
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    cee4:	00800793          	li	a5,8
    cee8:	3007b7f3          	csrrc	a5,mstatus,a5
    ceec:	fcf42823          	sw	a5,-48(s0)
    return context;
    cef0:	fd042783          	lw	a5,-48(s0)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    cef4:	fcf42623          	sw	a5,-52(s0)

    alt_irq[id].handler = isr;
    cef8:	000287b7          	lui	a5,0x28
    cefc:	e4878713          	addi	a4,a5,-440 # 27e48 <alt_irq>
    cf00:	fc842783          	lw	a5,-56(s0)
    cf04:	00379793          	slli	a5,a5,0x3
    cf08:	00f707b3          	add	a5,a4,a5
    cf0c:	fb442703          	lw	a4,-76(s0)
    cf10:	00e7a023          	sw	a4,0(a5)
    alt_irq[id].context = isr_context;
    cf14:	000287b7          	lui	a5,0x28
    cf18:	e4878713          	addi	a4,a5,-440 # 27e48 <alt_irq>
    cf1c:	fc842783          	lw	a5,-56(s0)
    cf20:	00379793          	slli	a5,a5,0x3
    cf24:	00f707b3          	add	a5,a4,a5
    cf28:	fb042703          	lw	a4,-80(s0)
    cf2c:	00e7a223          	sw	a4,4(a5)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    cf30:	fb442783          	lw	a5,-76(s0)
    cf34:	06078263          	beqz	a5,cf98 <alt_iic_isr_register+0xf0>
    cf38:	fc842783          	lw	a5,-56(s0)
    cf3c:	fbc42703          	lw	a4,-68(s0)
    cf40:	fce42a23          	sw	a4,-44(s0)
    cf44:	fcf42c23          	sw	a5,-40(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    cf48:	fd842703          	lw	a4,-40(s0)
    cf4c:	00f00793          	li	a5,15
    cf50:	00e7e863          	bltu	a5,a4,cf60 <alt_iic_isr_register+0xb8>
    cf54:	fd842783          	lw	a5,-40(s0)
    cf58:	01078793          	addi	a5,a5,16
    cf5c:	0080006f          	j	cf64 <alt_iic_isr_register+0xbc>
    cf60:	fff00793          	li	a5,-1
    cf64:	fcf42e23          	sw	a5,-36(s0)
    if (rc < 0)
    cf68:	fdc42783          	lw	a5,-36(s0)
    cf6c:	0007d663          	bgez	a5,cf78 <alt_iic_isr_register+0xd0>
        return rc;
    cf70:	fdc42783          	lw	a5,-36(s0)
    cf74:	0800006f          	j	cff4 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    cf78:	fdc42783          	lw	a5,-36(s0)
    cf7c:	fcf42c23          	sw	a5,-40(s0)
    NIOSV_SET_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    cf80:	fd842783          	lw	a5,-40(s0)
    cf84:	00100713          	li	a4,1
    cf88:	00f717b3          	sll	a5,a4,a5
    cf8c:	3047a073          	csrs	mie,a5
    return 0;
    cf90:	00000793          	li	a5,0
    cf94:	0600006f          	j	cff4 <alt_iic_isr_register+0x14c>
    cf98:	fc842783          	lw	a5,-56(s0)
    cf9c:	fbc42703          	lw	a4,-68(s0)
    cfa0:	fee42023          	sw	a4,-32(s0)
    cfa4:	fef42223          	sw	a5,-28(s0)
    int rc = ALT_REMAP_IRQ_NUM(irq);
    cfa8:	fe442703          	lw	a4,-28(s0)
    cfac:	00f00793          	li	a5,15
    cfb0:	00e7e863          	bltu	a5,a4,cfc0 <alt_iic_isr_register+0x118>
    cfb4:	fe442783          	lw	a5,-28(s0)
    cfb8:	01078793          	addi	a5,a5,16
    cfbc:	0080006f          	j	cfc4 <alt_iic_isr_register+0x11c>
    cfc0:	fff00793          	li	a5,-1
    cfc4:	fef42423          	sw	a5,-24(s0)
    if (rc < 0)
    cfc8:	fe842783          	lw	a5,-24(s0)
    cfcc:	0007d663          	bgez	a5,cfd8 <alt_iic_isr_register+0x130>
        return rc;
    cfd0:	fe842783          	lw	a5,-24(s0)
    cfd4:	0200006f          	j	cff4 <alt_iic_isr_register+0x14c>
        irq = (alt_u32)rc;
    cfd8:	fe842783          	lw	a5,-24(s0)
    cfdc:	fef42223          	sw	a5,-28(s0)
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, 0x1 << irq);
    cfe0:	fe442783          	lw	a5,-28(s0)
    cfe4:	00100713          	li	a4,1
    cfe8:	00f717b3          	sll	a5,a4,a5
    cfec:	3047b073          	csrc	mie,a5
    return 0;
    cff0:	00000793          	li	a5,0
    cff4:	fcf42223          	sw	a5,-60(s0)
    cff8:	fcc42783          	lw	a5,-52(s0)
    cffc:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    d000:	fec42783          	lw	a5,-20(s0)
    d004:	0087f793          	andi	a5,a5,8
    d008:	3007a073          	csrs	mstatus,a5
}
    d00c:	00000013          	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    d010:	fc442783          	lw	a5,-60(s0)
}
    d014:	00078513          	mv	a0,a5
    d018:	05c12403          	lw	s0,92(sp)
    d01c:	06010113          	addi	sp,sp,96
    d020:	00008067          	ret

0000d024 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d024:	fd010113          	addi	sp,sp,-48
    d028:	02112623          	sw	ra,44(sp)
    d02c:	02812423          	sw	s0,40(sp)
    d030:	03010413          	addi	s0,sp,48
    d034:	fca42e23          	sw	a0,-36(s0)
    d038:	fcb42c23          	sw	a1,-40(s0)
    d03c:	fcc42a23          	sw	a2,-44(s0)
    d040:	fcd42823          	sw	a3,-48(s0)
  int old;

  old = open (name, flags, mode);
    d044:	fd042603          	lw	a2,-48(s0)
    d048:	fd442583          	lw	a1,-44(s0)
    d04c:	fd842503          	lw	a0,-40(s0)
    d050:	5a9000ef          	jal	ra,ddf8 <open>
    d054:	fea42623          	sw	a0,-20(s0)

  if (old >= 0)
    d058:	fec42783          	lw	a5,-20(s0)
    d05c:	0807c863          	bltz	a5,d0ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    d060:	000257b7          	lui	a5,0x25
    d064:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
    d068:	fec42703          	lw	a4,-20(s0)
    d06c:	00070793          	mv	a5,a4
    d070:	00179793          	slli	a5,a5,0x1
    d074:	00e787b3          	add	a5,a5,a4
    d078:	00279793          	slli	a5,a5,0x2
    d07c:	00f687b3          	add	a5,a3,a5
    d080:	0007a703          	lw	a4,0(a5)
    d084:	fdc42783          	lw	a5,-36(s0)
    d088:	00e7a023          	sw	a4,0(a5)
    fd->priv     = alt_fd_list[old].priv;
    d08c:	000257b7          	lui	a5,0x25
    d090:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
    d094:	fec42703          	lw	a4,-20(s0)
    d098:	00070793          	mv	a5,a4
    d09c:	00179793          	slli	a5,a5,0x1
    d0a0:	00e787b3          	add	a5,a5,a4
    d0a4:	00279793          	slli	a5,a5,0x2
    d0a8:	00f687b3          	add	a5,a3,a5
    d0ac:	0047a703          	lw	a4,4(a5)
    d0b0:	fdc42783          	lw	a5,-36(s0)
    d0b4:	00e7a223          	sw	a4,4(a5)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d0b8:	000257b7          	lui	a5,0x25
    d0bc:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
    d0c0:	fec42703          	lw	a4,-20(s0)
    d0c4:	00070793          	mv	a5,a4
    d0c8:	00179793          	slli	a5,a5,0x1
    d0cc:	00e787b3          	add	a5,a5,a4
    d0d0:	00279793          	slli	a5,a5,0x2
    d0d4:	00f687b3          	add	a5,a3,a5
    d0d8:	0087a703          	lw	a4,8(a5)
    d0dc:	fdc42783          	lw	a5,-36(s0)
    d0e0:	00e7a423          	sw	a4,8(a5)

    alt_release_fd (old);
    d0e4:	fec42503          	lw	a0,-20(s0)
    d0e8:	090000ef          	jal	ra,d178 <alt_release_fd>
  }
} 
    d0ec:	00000013          	nop
    d0f0:	02c12083          	lw	ra,44(sp)
    d0f4:	02812403          	lw	s0,40(sp)
    d0f8:	03010113          	addi	sp,sp,48
    d0fc:	00008067          	ret

0000d100 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d100:	fe010113          	addi	sp,sp,-32
    d104:	00112e23          	sw	ra,28(sp)
    d108:	00812c23          	sw	s0,24(sp)
    d10c:	02010413          	addi	s0,sp,32
    d110:	fea42623          	sw	a0,-20(s0)
    d114:	feb42423          	sw	a1,-24(s0)
    d118:	fec42223          	sw	a2,-28(s0)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d11c:	1ff00693          	li	a3,511
    d120:	00100613          	li	a2,1
    d124:	fec42583          	lw	a1,-20(s0)
    d128:	000257b7          	lui	a5,0x25
    d12c:	4f478513          	addi	a0,a5,1268 # 254f4 <alt_fd_list+0xc>
    d130:	ef5ff0ef          	jal	ra,d024 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d134:	1ff00693          	li	a3,511
    d138:	00000613          	li	a2,0
    d13c:	fe842583          	lw	a1,-24(s0)
    d140:	000257b7          	lui	a5,0x25
    d144:	4e878513          	addi	a0,a5,1256 # 254e8 <alt_fd_list>
    d148:	eddff0ef          	jal	ra,d024 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d14c:	1ff00693          	li	a3,511
    d150:	00100613          	li	a2,1
    d154:	fe442583          	lw	a1,-28(s0)
    d158:	000257b7          	lui	a5,0x25
    d15c:	50078513          	addi	a0,a5,1280 # 25500 <alt_fd_list+0x18>
    d160:	ec5ff0ef          	jal	ra,d024 <alt_open_fd>
}  
    d164:	00000013          	nop
    d168:	01c12083          	lw	ra,28(sp)
    d16c:	01812403          	lw	s0,24(sp)
    d170:	02010113          	addi	sp,sp,32
    d174:	00008067          	ret

0000d178 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d178:	fe010113          	addi	sp,sp,-32
    d17c:	00812e23          	sw	s0,28(sp)
    d180:	02010413          	addi	s0,sp,32
    d184:	fea42623          	sw	a0,-20(s0)
  if (fd > 2)
    d188:	fec42703          	lw	a4,-20(s0)
    d18c:	00200793          	li	a5,2
    d190:	04e7d663          	bge	a5,a4,d1dc <alt_release_fd+0x64>
  {
    alt_fd_list[fd].fd_flags = 0;
    d194:	000257b7          	lui	a5,0x25
    d198:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
    d19c:	fec42703          	lw	a4,-20(s0)
    d1a0:	00070793          	mv	a5,a4
    d1a4:	00179793          	slli	a5,a5,0x1
    d1a8:	00e787b3          	add	a5,a5,a4
    d1ac:	00279793          	slli	a5,a5,0x2
    d1b0:	00f687b3          	add	a5,a3,a5
    d1b4:	0007a423          	sw	zero,8(a5)
    alt_fd_list[fd].dev      = 0;
    d1b8:	000257b7          	lui	a5,0x25
    d1bc:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
    d1c0:	fec42703          	lw	a4,-20(s0)
    d1c4:	00070793          	mv	a5,a4
    d1c8:	00179793          	slli	a5,a5,0x1
    d1cc:	00e787b3          	add	a5,a5,a4
    d1d0:	00279793          	slli	a5,a5,0x2
    d1d4:	00f687b3          	add	a5,a3,a5
    d1d8:	0007a023          	sw	zero,0(a5)
  }
}
    d1dc:	00000013          	nop
    d1e0:	01c12403          	lw	s0,28(sp)
    d1e4:	02010113          	addi	sp,sp,32
    d1e8:	00008067          	ret

0000d1ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d1ec:	fd010113          	addi	sp,sp,-48
    d1f0:	02812623          	sw	s0,44(sp)
    d1f4:	03010413          	addi	s0,sp,48
    d1f8:	fca42e23          	sw	a0,-36(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
    d1fc:	00800793          	li	a5,8
    d200:	3007b7f3          	csrrc	a5,mstatus,a5
    d204:	fef42623          	sw	a5,-20(s0)
    return context;
    d208:	fec42783          	lw	a5,-20(s0)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d20c:	fef42023          	sw	a5,-32(s0)
  alt_llist_remove (&alarm->llist);
    d210:	fdc42783          	lw	a5,-36(s0)
    d214:	fef42423          	sw	a5,-24(s0)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d218:	fe842783          	lw	a5,-24(s0)
    d21c:	0007a783          	lw	a5,0(a5)
    d220:	fe842703          	lw	a4,-24(s0)
    d224:	00472703          	lw	a4,4(a4)
    d228:	00e7a223          	sw	a4,4(a5)
  entry->previous->next = entry->next;
    d22c:	fe842783          	lw	a5,-24(s0)
    d230:	0047a783          	lw	a5,4(a5)
    d234:	fe842703          	lw	a4,-24(s0)
    d238:	00072703          	lw	a4,0(a4)
    d23c:	00e7a023          	sw	a4,0(a5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d240:	fe842783          	lw	a5,-24(s0)
    d244:	fe842703          	lw	a4,-24(s0)
    d248:	00e7a223          	sw	a4,4(a5)
  entry->next     = entry;
    d24c:	fe842783          	lw	a5,-24(s0)
    d250:	fe842703          	lw	a4,-24(s0)
    d254:	00e7a023          	sw	a4,0(a5)
} 
    d258:	00000013          	nop
    d25c:	fe042783          	lw	a5,-32(s0)
    d260:	fef42223          	sw	a5,-28(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
    d264:	fe442783          	lw	a5,-28(s0)
    d268:	0087f793          	andi	a5,a5,8
    d26c:	3007a073          	csrs	mstatus,a5
}
    d270:	00000013          	nop
  alt_irq_enable_all (irq_context);
}
    d274:	00000013          	nop
    d278:	02c12403          	lw	s0,44(sp)
    d27c:	03010113          	addi	sp,sp,48
    d280:	00008067          	ret

0000d284 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d284:	fe010113          	addi	sp,sp,-32
    d288:	00112e23          	sw	ra,28(sp)
    d28c:	00812c23          	sw	s0,24(sp)
    d290:	01212a23          	sw	s2,20(sp)
    d294:	01312823          	sw	s3,16(sp)
    d298:	02010413          	addi	s0,sp,32
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d29c:	000267b7          	lui	a5,0x26
    d2a0:	03478793          	addi	a5,a5,52 # 26034 <alt_alarm_list>
    d2a4:	0007a783          	lw	a5,0(a5)
    d2a8:	fef42223          	sw	a5,-28(s0)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d2ac:	000287b7          	lui	a5,0x28
    d2b0:	c987a703          	lw	a4,-872(a5) # 27c98 <_alt_nticks>
    d2b4:	c9c7a783          	lw	a5,-868(a5)
    d2b8:	00100513          	li	a0,1
    d2bc:	00000593          	li	a1,0
    d2c0:	00a70633          	add	a2,a4,a0
    d2c4:	00060813          	mv	a6,a2
    d2c8:	00e83833          	sltu	a6,a6,a4
    d2cc:	00b786b3          	add	a3,a5,a1
    d2d0:	00d807b3          	add	a5,a6,a3
    d2d4:	00078693          	mv	a3,a5
    d2d8:	00060713          	mv	a4,a2
    d2dc:	00068793          	mv	a5,a3
    d2e0:	000286b7          	lui	a3,0x28
    d2e4:	c8e6ac23          	sw	a4,-872(a3) # 27c98 <_alt_nticks>
    d2e8:	c8f6ae23          	sw	a5,-868(a3)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d2ec:	0c80006f          	j	d3b4 <alt_tick+0x130>
  {
    next = (alt_alarm*) alarm->llist.next;
    d2f0:	fe442783          	lw	a5,-28(s0)
    d2f4:	0007a783          	lw	a5,0(a5)
    d2f8:	fef42423          	sw	a5,-24(s0)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    d2fc:	fe442783          	lw	a5,-28(s0)
    d300:	0087a603          	lw	a2,8(a5)
    d304:	00c7a683          	lw	a3,12(a5)
    d308:	000287b7          	lui	a5,0x28
    d30c:	c987a703          	lw	a4,-872(a5) # 27c98 <_alt_nticks>
    d310:	c9c7a783          	lw	a5,-868(a5)
    d314:	00068513          	mv	a0,a3
    d318:	00078593          	mv	a1,a5
    d31c:	08a5e863          	bltu	a1,a0,d3ac <alt_tick+0x128>
    d320:	00068513          	mv	a0,a3
    d324:	00078593          	mv	a1,a5
    d328:	00b51863          	bne	a0,a1,d338 <alt_tick+0xb4>
    d32c:	00060693          	mv	a3,a2
    d330:	00070793          	mv	a5,a4
    d334:	06d7ec63          	bltu	a5,a3,d3ac <alt_tick+0x128>
    {
      next_callback = alarm->callback (alarm->context);
    d338:	fe442783          	lw	a5,-28(s0)
    d33c:	0107a783          	lw	a5,16(a5)
    d340:	fe442703          	lw	a4,-28(s0)
    d344:	01472703          	lw	a4,20(a4)
    d348:	00070513          	mv	a0,a4
    d34c:	000780e7          	jalr	a5
    d350:	fea42623          	sw	a0,-20(s0)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d354:	fec42783          	lw	a5,-20(s0)
    d358:	00079863          	bnez	a5,d368 <alt_tick+0xe4>
      {
        alt_alarm_stop (alarm);
    d35c:	fe442503          	lw	a0,-28(s0)
    d360:	e8dff0ef          	jal	ra,d1ec <alt_alarm_stop>
    d364:	0480006f          	j	d3ac <alt_tick+0x128>
      }
      else
      {
        alarm->time += next_callback;
    d368:	fe442783          	lw	a5,-28(s0)
    d36c:	0087a703          	lw	a4,8(a5)
    d370:	00c7a783          	lw	a5,12(a5)
    d374:	fec42683          	lw	a3,-20(s0)
    d378:	00068913          	mv	s2,a3
    d37c:	00000993          	li	s3,0
    d380:	01270633          	add	a2,a4,s2
    d384:	00060593          	mv	a1,a2
    d388:	00e5b5b3          	sltu	a1,a1,a4
    d38c:	013786b3          	add	a3,a5,s3
    d390:	00d587b3          	add	a5,a1,a3
    d394:	00078693          	mv	a3,a5
    d398:	00060713          	mv	a4,a2
    d39c:	00068793          	mv	a5,a3
    d3a0:	fe442683          	lw	a3,-28(s0)
    d3a4:	00e6a423          	sw	a4,8(a3)
    d3a8:	00f6a623          	sw	a5,12(a3)
      }
    }
    alarm = next;
    d3ac:	fe842783          	lw	a5,-24(s0)
    d3b0:	fef42223          	sw	a5,-28(s0)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    d3b4:	fe442703          	lw	a4,-28(s0)
    d3b8:	000267b7          	lui	a5,0x26
    d3bc:	03478793          	addi	a5,a5,52 # 26034 <alt_alarm_list>
    d3c0:	f2f718e3          	bne	a4,a5,d2f0 <alt_tick+0x6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    d3c4:	00000013          	nop
}
    d3c8:	00000013          	nop
    d3cc:	01c12083          	lw	ra,28(sp)
    d3d0:	01812403          	lw	s0,24(sp)
    d3d4:	01412903          	lw	s2,20(sp)
    d3d8:	01012983          	lw	s3,16(sp)
    d3dc:	02010113          	addi	sp,sp,32
    d3e0:	00008067          	ret

0000d3e4 <intel_niosv_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the mie
 * register so that all possible IRQs are disabled.
 */
void intel_niosv_irq_init(void) 
{
    d3e4:	ff010113          	addi	sp,sp,-16
    d3e8:	00812623          	sw	s0,12(sp)
    d3ec:	01010413          	addi	s0,sp,16
#if ALT_HAS_IRQ_SUPPORT
    NIOSV_CLR_CSR(NIOSV_MIE_CSR, NIOSV_MIE_MASK);
    d3f0:	fff00793          	li	a5,-1
    d3f4:	3047b073          	csrc	mie,a5
#endif
}
    d3f8:	00000013          	nop
    d3fc:	00c12403          	lw	s0,12(sp)
    d400:	01010113          	addi	sp,sp,16
    d404:	00008067          	ret

0000d408 <alt_timestamp_start>:
#define INTEL_NIOSV_TIMER_DEVICE_TYPE 2

#if (ALT_TIMESTAMP_CLK_TIMER_DEVICE_TYPE == INTEL_NIOSV_TIMER_DEVICE_TYPE)
alt_u64 alt_niosv_timestamp_offset = 0;

int alt_timestamp_start() {
    d408:	ff010113          	addi	sp,sp,-16
    d40c:	00112623          	sw	ra,12(sp)
    d410:	00812423          	sw	s0,8(sp)
    d414:	01010413          	addi	s0,sp,16
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval);

extern alt_u64 alt_niosv_timestamp_offset;

static ALT_INLINE int ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_start() {
    alt_niosv_timestamp_offset = alt_niosv_mtime_get();
    d418:	0ac000ef          	jal	ra,d4c4 <alt_niosv_mtime_get>
    d41c:	00050713          	mv	a4,a0
    d420:	00058793          	mv	a5,a1
    d424:	000286b7          	lui	a3,0x28
    d428:	cae6a023          	sw	a4,-864(a3) # 27ca0 <alt_niosv_timestamp_offset>
    d42c:	caf6a223          	sw	a5,-860(a3)
    return 0;
    d430:	00000793          	li	a5,0
    return alt_niosv_timer_timestamp_start();
}
    d434:	00078513          	mv	a0,a5
    d438:	00c12083          	lw	ra,12(sp)
    d43c:	00812403          	lw	s0,8(sp)
    d440:	01010113          	addi	sp,sp,16
    d444:	00008067          	ret

0000d448 <alt_timestamp>:

alt_timestamp_type alt_timestamp() {
    d448:	ff010113          	addi	sp,sp,-16
    d44c:	00112623          	sw	ra,12(sp)
    d450:	00812423          	sw	s0,8(sp)
    d454:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp() {
    return alt_niosv_mtime_get() - alt_niosv_timestamp_offset;
    d458:	06c000ef          	jal	ra,d4c4 <alt_niosv_mtime_get>
    d45c:	00050613          	mv	a2,a0
    d460:	00058693          	mv	a3,a1
    d464:	000287b7          	lui	a5,0x28
    d468:	ca07a503          	lw	a0,-864(a5) # 27ca0 <alt_niosv_timestamp_offset>
    d46c:	ca47a583          	lw	a1,-860(a5)
    d470:	40a60733          	sub	a4,a2,a0
    d474:	00070813          	mv	a6,a4
    d478:	01063833          	sltu	a6,a2,a6
    d47c:	40b687b3          	sub	a5,a3,a1
    d480:	410786b3          	sub	a3,a5,a6
    d484:	00068793          	mv	a5,a3
    return alt_niosv_timer_timestamp();
}
    d488:	00070513          	mv	a0,a4
    d48c:	00078593          	mv	a1,a5
    d490:	00c12083          	lw	ra,12(sp)
    d494:	00812403          	lw	s0,8(sp)
    d498:	01010113          	addi	sp,sp,16
    d49c:	00008067          	ret

0000d4a0 <alt_timestamp_freq>:

alt_u32 alt_timestamp_freq() {
    d4a0:	ff010113          	addi	sp,sp,-16
    d4a4:	00812623          	sw	s0,12(sp)
    d4a8:	01010413          	addi	s0,sp,16
}

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_niosv_timer_timestamp_freq() {
    return ALT_CPU_CPU_FREQ;
    d4ac:	02faf7b7          	lui	a5,0x2faf
    d4b0:	08078793          	addi	a5,a5,128 # 2faf080 <__alt_data_end+0x2f6f080>
    return alt_niosv_timer_timestamp_freq();
}
    d4b4:	00078513          	mv	a0,a5
    d4b8:	00c12403          	lw	s0,12(sp)
    d4bc:	01010113          	addi	sp,sp,16
    d4c0:	00008067          	ret

0000d4c4 <alt_niosv_mtime_get>:
#endif

alt_u64 alt_niosv_mtime_get() {
    d4c4:	fe010113          	addi	sp,sp,-32
    d4c8:	00812e23          	sw	s0,28(sp)
    d4cc:	02010413          	addi	s0,sp,32
    alt_u32 lowbits;
    alt_u32 highbits;

    // Guard against rollover while acquiring each word
    do {
        highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4));
    d4d0:	00050337          	lui	t1,0x50
    d4d4:	00c30313          	addi	t1,t1,12 # 5000c <__alt_data_end+0x1000c>
    d4d8:	00032303          	lw	t1,0(t1)
    d4dc:	fe642423          	sw	t1,-24(s0)
        lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIME_ADDR);
    d4e0:	00050337          	lui	t1,0x50
    d4e4:	00830313          	addi	t1,t1,8 # 50008 <__alt_data_end+0x10008>
    d4e8:	00032303          	lw	t1,0(t1)
    d4ec:	fe642623          	sw	t1,-20(s0)
    } while (ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIME_ADDR + 4)) != highbits);
    d4f0:	00050337          	lui	t1,0x50
    d4f4:	00c30313          	addi	t1,t1,12 # 5000c <__alt_data_end+0x1000c>
    d4f8:	00032303          	lw	t1,0(t1)
    d4fc:	fe842e03          	lw	t3,-24(s0)
    d500:	fc6e18e3          	bne	t3,t1,d4d0 <alt_niosv_mtime_get+0xc>

    return (((alt_u64)highbits) << 32) | lowbits;
    d504:	fe842303          	lw	t1,-24(s0)
    d508:	00030813          	mv	a6,t1
    d50c:	00000893          	li	a7,0
    d510:	00081793          	slli	a5,a6,0x0
    d514:	00000713          	li	a4,0
    d518:	fec42803          	lw	a6,-20(s0)
    d51c:	00080613          	mv	a2,a6
    d520:	00000693          	li	a3,0
    d524:	00c76533          	or	a0,a4,a2
    d528:	00d7e5b3          	or	a1,a5,a3
    d52c:	00050713          	mv	a4,a0
    d530:	00058793          	mv	a5,a1
}
    d534:	00070513          	mv	a0,a4
    d538:	00078593          	mv	a1,a5
    d53c:	01c12403          	lw	s0,28(sp)
    d540:	02010113          	addi	sp,sp,32
    d544:	00008067          	ret

0000d548 <alt_niosv_mtimecmp_set>:

void alt_niosv_mtimecmp_set(alt_u64 time) {
    d548:	fe010113          	addi	sp,sp,-32
    d54c:	00812e23          	sw	s0,28(sp)
    d550:	02010413          	addi	s0,sp,32
    d554:	fea42423          	sw	a0,-24(s0)
    d558:	feb42623          	sw	a1,-20(s0)
    // Make sure to set the high word to a max value first to prevent triggering inadvertently
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = 0xFFFFFFFF;
    d55c:	000506b7          	lui	a3,0x50
    d560:	00468693          	addi	a3,a3,4 # 50004 <__alt_data_end+0x10004>
    d564:	fff00613          	li	a2,-1
    d568:	00c6a023          	sw	a2,0(a3)
    ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR) = (alt_u32)time;
    d56c:	000506b7          	lui	a3,0x50
    d570:	fe842603          	lw	a2,-24(s0)
    d574:	00c6a023          	sw	a2,0(a3) # 50000 <__alt_data_end+0x10000>
    ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4)) = (alt_u32)(time >> 32);
    d578:	fec42683          	lw	a3,-20(s0)
    d57c:	0006d713          	srli	a4,a3,0x0
    d580:	00000793          	li	a5,0
    d584:	000506b7          	lui	a3,0x50
    d588:	00468693          	addi	a3,a3,4 # 50004 <__alt_data_end+0x10004>
    d58c:	00070793          	mv	a5,a4
    d590:	00f6a023          	sw	a5,0(a3)
}
    d594:	00000013          	nop
    d598:	01c12403          	lw	s0,28(sp)
    d59c:	02010113          	addi	sp,sp,32
    d5a0:	00008067          	ret

0000d5a4 <alt_niosv_mtimecmp_get>:

alt_u64 alt_niosv_mtimecmp_get() {
    d5a4:	fe010113          	addi	sp,sp,-32
    d5a8:	00812e23          	sw	s0,28(sp)
    d5ac:	02010413          	addi	s0,sp,32
    alt_u32 lowbits = ALT_VOLATILE_ACCESS((alt_u32 *)NIOSV_MTIMECMP_ADDR);
    d5b0:	00050337          	lui	t1,0x50
    d5b4:	00032303          	lw	t1,0(t1) # 50000 <__alt_data_end+0x10000>
    d5b8:	fe642423          	sw	t1,-24(s0)
    alt_u32 highbits = ALT_VOLATILE_ACCESS((alt_u32 *)(NIOSV_MTIMECMP_ADDR + 4));
    d5bc:	00050337          	lui	t1,0x50
    d5c0:	00430313          	addi	t1,t1,4 # 50004 <__alt_data_end+0x10004>
    d5c4:	00032303          	lw	t1,0(t1)
    d5c8:	fe642623          	sw	t1,-20(s0)
    return (((alt_u64)highbits) << 32) | lowbits;
    d5cc:	fec42303          	lw	t1,-20(s0)
    d5d0:	00030813          	mv	a6,t1
    d5d4:	00000893          	li	a7,0
    d5d8:	00081793          	slli	a5,a6,0x0
    d5dc:	00000713          	li	a4,0
    d5e0:	fe842803          	lw	a6,-24(s0)
    d5e4:	00080613          	mv	a2,a6
    d5e8:	00000693          	li	a3,0
    d5ec:	00c76533          	or	a0,a4,a2
    d5f0:	00d7e5b3          	or	a1,a5,a3
    d5f4:	00050713          	mv	a4,a0
    d5f8:	00058793          	mv	a5,a1
}
    d5fc:	00070513          	mv	a0,a4
    d600:	00078593          	mv	a1,a5
    d604:	01c12403          	lw	s0,28(sp)
    d608:	02010113          	addi	sp,sp,32
    d60c:	00008067          	ret

0000d610 <alt_niosv_timer_sc_isr>:

#if (OS_PORT_HAS_MTIME == 1)
// Let's the OS port handles the machine timer configuration and interrupt if
// the OS port has it (ex: FreeRTOS).
void alt_niosv_timer_sc_isr(alt_u32 cause, alt_u32 epc, alt_u32 tval) {}
    d610:	fe010113          	addi	sp,sp,-32
    d614:	00812e23          	sw	s0,28(sp)
    d618:	02010413          	addi	s0,sp,32
    d61c:	fea42623          	sw	a0,-20(s0)
    d620:	feb42423          	sw	a1,-24(s0)
    d624:	fec42223          	sw	a2,-28(s0)
    d628:	00000013          	nop
    d62c:	01c12403          	lw	s0,28(sp)
    d630:	02010113          	addi	sp,sp,32
    d634:	00008067          	ret

0000d638 <alt_niosv_mtimecmp_interrupt_init>:
void alt_niosv_mtimecmp_interrupt_init() {}
    d638:	ff010113          	addi	sp,sp,-16
    d63c:	00812623          	sw	s0,12(sp)
    d640:	01010413          	addi	s0,sp,16
    d644:	00000013          	nop
    d648:	00c12403          	lw	s0,12(sp)
    d64c:	01010113          	addi	sp,sp,16
    d650:	00008067          	ret

0000d654 <atexit>:
    d654:	00050593          	mv	a1,a0
    d658:	00000693          	li	a3,0
    d65c:	00000613          	li	a2,0
    d660:	00000513          	li	a0,0
    d664:	6c00306f          	j	10d24 <__register_exitproc>

0000d668 <exit>:
    d668:	ff010113          	addi	sp,sp,-16
    d66c:	00000593          	li	a1,0
    d670:	00812423          	sw	s0,8(sp)
    d674:	00112623          	sw	ra,12(sp)
    d678:	00050413          	mv	s0,a0
    d67c:	794030ef          	jal	ra,10e10 <__call_exitprocs>
    d680:	00017517          	auipc	a0,0x17
    d684:	db052503          	lw	a0,-592(a0) # 24430 <_global_impure_ptr>
    d688:	03c52783          	lw	a5,60(a0)
    d68c:	00078463          	beqz	a5,d694 <exit+0x2c>
    d690:	000780e7          	jalr	a5
    d694:	00040513          	mv	a0,s0
    d698:	61d140ef          	jal	ra,224b4 <_exit>

0000d69c <memcpy>:
    d69c:	00b547b3          	xor	a5,a0,a1
    d6a0:	0037f793          	andi	a5,a5,3
    d6a4:	00c508b3          	add	a7,a0,a2
    d6a8:	06079463          	bnez	a5,d710 <memcpy+0x74>
    d6ac:	00300793          	li	a5,3
    d6b0:	06c7f063          	bgeu	a5,a2,d710 <memcpy+0x74>
    d6b4:	00357793          	andi	a5,a0,3
    d6b8:	00050713          	mv	a4,a0
    d6bc:	06079a63          	bnez	a5,d730 <memcpy+0x94>
    d6c0:	ffc8f613          	andi	a2,a7,-4
    d6c4:	40e606b3          	sub	a3,a2,a4
    d6c8:	02000793          	li	a5,32
    d6cc:	08d7ce63          	blt	a5,a3,d768 <memcpy+0xcc>
    d6d0:	00058693          	mv	a3,a1
    d6d4:	00070793          	mv	a5,a4
    d6d8:	02c77863          	bgeu	a4,a2,d708 <memcpy+0x6c>
    d6dc:	0006a803          	lw	a6,0(a3)
    d6e0:	00478793          	addi	a5,a5,4
    d6e4:	00468693          	addi	a3,a3,4
    d6e8:	ff07ae23          	sw	a6,-4(a5)
    d6ec:	fec7e8e3          	bltu	a5,a2,d6dc <memcpy+0x40>
    d6f0:	fff60793          	addi	a5,a2,-1
    d6f4:	40e787b3          	sub	a5,a5,a4
    d6f8:	ffc7f793          	andi	a5,a5,-4
    d6fc:	00478793          	addi	a5,a5,4
    d700:	00f70733          	add	a4,a4,a5
    d704:	00f585b3          	add	a1,a1,a5
    d708:	01176863          	bltu	a4,a7,d718 <memcpy+0x7c>
    d70c:	00008067          	ret
    d710:	00050713          	mv	a4,a0
    d714:	05157863          	bgeu	a0,a7,d764 <memcpy+0xc8>
    d718:	0005c783          	lbu	a5,0(a1)
    d71c:	00170713          	addi	a4,a4,1
    d720:	00158593          	addi	a1,a1,1
    d724:	fef70fa3          	sb	a5,-1(a4)
    d728:	fee898e3          	bne	a7,a4,d718 <memcpy+0x7c>
    d72c:	00008067          	ret
    d730:	0005c683          	lbu	a3,0(a1)
    d734:	00170713          	addi	a4,a4,1
    d738:	00377793          	andi	a5,a4,3
    d73c:	fed70fa3          	sb	a3,-1(a4)
    d740:	00158593          	addi	a1,a1,1
    d744:	f6078ee3          	beqz	a5,d6c0 <memcpy+0x24>
    d748:	0005c683          	lbu	a3,0(a1)
    d74c:	00170713          	addi	a4,a4,1
    d750:	00377793          	andi	a5,a4,3
    d754:	fed70fa3          	sb	a3,-1(a4)
    d758:	00158593          	addi	a1,a1,1
    d75c:	fc079ae3          	bnez	a5,d730 <memcpy+0x94>
    d760:	f61ff06f          	j	d6c0 <memcpy+0x24>
    d764:	00008067          	ret
    d768:	ff010113          	addi	sp,sp,-16
    d76c:	00812623          	sw	s0,12(sp)
    d770:	02000413          	li	s0,32
    d774:	0005a383          	lw	t2,0(a1)
    d778:	0045a283          	lw	t0,4(a1)
    d77c:	0085af83          	lw	t6,8(a1)
    d780:	00c5af03          	lw	t5,12(a1)
    d784:	0105ae83          	lw	t4,16(a1)
    d788:	0145ae03          	lw	t3,20(a1)
    d78c:	0185a303          	lw	t1,24(a1)
    d790:	01c5a803          	lw	a6,28(a1)
    d794:	0205a683          	lw	a3,32(a1)
    d798:	02470713          	addi	a4,a4,36
    d79c:	40e607b3          	sub	a5,a2,a4
    d7a0:	fc772e23          	sw	t2,-36(a4)
    d7a4:	fe572023          	sw	t0,-32(a4)
    d7a8:	fff72223          	sw	t6,-28(a4)
    d7ac:	ffe72423          	sw	t5,-24(a4)
    d7b0:	ffd72623          	sw	t4,-20(a4)
    d7b4:	ffc72823          	sw	t3,-16(a4)
    d7b8:	fe672a23          	sw	t1,-12(a4)
    d7bc:	ff072c23          	sw	a6,-8(a4)
    d7c0:	fed72e23          	sw	a3,-4(a4)
    d7c4:	02458593          	addi	a1,a1,36
    d7c8:	faf446e3          	blt	s0,a5,d774 <memcpy+0xd8>
    d7cc:	00058693          	mv	a3,a1
    d7d0:	00070793          	mv	a5,a4
    d7d4:	02c77863          	bgeu	a4,a2,d804 <memcpy+0x168>
    d7d8:	0006a803          	lw	a6,0(a3)
    d7dc:	00478793          	addi	a5,a5,4
    d7e0:	00468693          	addi	a3,a3,4
    d7e4:	ff07ae23          	sw	a6,-4(a5)
    d7e8:	fec7e8e3          	bltu	a5,a2,d7d8 <memcpy+0x13c>
    d7ec:	fff60793          	addi	a5,a2,-1
    d7f0:	40e787b3          	sub	a5,a5,a4
    d7f4:	ffc7f793          	andi	a5,a5,-4
    d7f8:	00478793          	addi	a5,a5,4
    d7fc:	00f70733          	add	a4,a4,a5
    d800:	00f585b3          	add	a1,a1,a5
    d804:	01176863          	bltu	a4,a7,d814 <memcpy+0x178>
    d808:	00c12403          	lw	s0,12(sp)
    d80c:	01010113          	addi	sp,sp,16
    d810:	00008067          	ret
    d814:	0005c783          	lbu	a5,0(a1)
    d818:	00170713          	addi	a4,a4,1
    d81c:	00158593          	addi	a1,a1,1
    d820:	fef70fa3          	sb	a5,-1(a4)
    d824:	fee882e3          	beq	a7,a4,d808 <memcpy+0x16c>
    d828:	0005c783          	lbu	a5,0(a1)
    d82c:	00170713          	addi	a4,a4,1
    d830:	00158593          	addi	a1,a1,1
    d834:	fef70fa3          	sb	a5,-1(a4)
    d838:	fce89ee3          	bne	a7,a4,d814 <memcpy+0x178>
    d83c:	fcdff06f          	j	d808 <memcpy+0x16c>

0000d840 <memset>:
    d840:	00f00313          	li	t1,15
    d844:	00050713          	mv	a4,a0
    d848:	02c37e63          	bgeu	t1,a2,d884 <memset+0x44>
    d84c:	00f77793          	andi	a5,a4,15
    d850:	0a079063          	bnez	a5,d8f0 <memset+0xb0>
    d854:	08059263          	bnez	a1,d8d8 <memset+0x98>
    d858:	ff067693          	andi	a3,a2,-16
    d85c:	00f67613          	andi	a2,a2,15
    d860:	00e686b3          	add	a3,a3,a4
    d864:	00b72023          	sw	a1,0(a4)
    d868:	00b72223          	sw	a1,4(a4)
    d86c:	00b72423          	sw	a1,8(a4)
    d870:	00b72623          	sw	a1,12(a4)
    d874:	01070713          	addi	a4,a4,16
    d878:	fed766e3          	bltu	a4,a3,d864 <memset+0x24>
    d87c:	00061463          	bnez	a2,d884 <memset+0x44>
    d880:	00008067          	ret
    d884:	40c306b3          	sub	a3,t1,a2
    d888:	00269693          	slli	a3,a3,0x2
    d88c:	00000297          	auipc	t0,0x0
    d890:	005686b3          	add	a3,a3,t0
    d894:	00c68067          	jr	12(a3)
    d898:	00b70723          	sb	a1,14(a4)
    d89c:	00b706a3          	sb	a1,13(a4)
    d8a0:	00b70623          	sb	a1,12(a4)
    d8a4:	00b705a3          	sb	a1,11(a4)
    d8a8:	00b70523          	sb	a1,10(a4)
    d8ac:	00b704a3          	sb	a1,9(a4)
    d8b0:	00b70423          	sb	a1,8(a4)
    d8b4:	00b703a3          	sb	a1,7(a4)
    d8b8:	00b70323          	sb	a1,6(a4)
    d8bc:	00b702a3          	sb	a1,5(a4)
    d8c0:	00b70223          	sb	a1,4(a4)
    d8c4:	00b701a3          	sb	a1,3(a4)
    d8c8:	00b70123          	sb	a1,2(a4)
    d8cc:	00b700a3          	sb	a1,1(a4)
    d8d0:	00b70023          	sb	a1,0(a4)
    d8d4:	00008067          	ret
    d8d8:	0ff5f593          	zext.b	a1,a1
    d8dc:	00859693          	slli	a3,a1,0x8
    d8e0:	00d5e5b3          	or	a1,a1,a3
    d8e4:	01059693          	slli	a3,a1,0x10
    d8e8:	00d5e5b3          	or	a1,a1,a3
    d8ec:	f6dff06f          	j	d858 <memset+0x18>
    d8f0:	00279693          	slli	a3,a5,0x2
    d8f4:	00000297          	auipc	t0,0x0
    d8f8:	005686b3          	add	a3,a3,t0
    d8fc:	00008293          	mv	t0,ra
    d900:	fa0680e7          	jalr	-96(a3)
    d904:	00028093          	mv	ra,t0
    d908:	ff078793          	addi	a5,a5,-16
    d90c:	40f70733          	sub	a4,a4,a5
    d910:	00f60633          	add	a2,a2,a5
    d914:	f6c378e3          	bgeu	t1,a2,d884 <memset+0x44>
    d918:	f3dff06f          	j	d854 <memset+0x14>

0000d91c <_printf_r>:
    d91c:	fc010113          	addi	sp,sp,-64
    d920:	02c12423          	sw	a2,40(sp)
    d924:	02d12623          	sw	a3,44(sp)
    d928:	02e12823          	sw	a4,48(sp)
    d92c:	02f12a23          	sw	a5,52(sp)
    d930:	03012c23          	sw	a6,56(sp)
    d934:	03112e23          	sw	a7,60(sp)
    d938:	00058613          	mv	a2,a1
    d93c:	00852583          	lw	a1,8(a0)
    d940:	02810693          	addi	a3,sp,40
    d944:	00112e23          	sw	ra,28(sp)
    d948:	00d12623          	sw	a3,12(sp)
    d94c:	510000ef          	jal	ra,de5c <_vfprintf_r>
    d950:	01c12083          	lw	ra,28(sp)
    d954:	04010113          	addi	sp,sp,64
    d958:	00008067          	ret

0000d95c <printf>:
    d95c:	fc010113          	addi	sp,sp,-64
    d960:	02c12423          	sw	a2,40(sp)
    d964:	02d12623          	sw	a3,44(sp)
    d968:	00018317          	auipc	t1,0x18
    d96c:	6d432303          	lw	t1,1748(t1) # 2603c <_impure_ptr>
    d970:	02b12223          	sw	a1,36(sp)
    d974:	02e12823          	sw	a4,48(sp)
    d978:	02f12a23          	sw	a5,52(sp)
    d97c:	03012c23          	sw	a6,56(sp)
    d980:	03112e23          	sw	a7,60(sp)
    d984:	00832583          	lw	a1,8(t1)
    d988:	02410693          	addi	a3,sp,36
    d98c:	00050613          	mv	a2,a0
    d990:	00030513          	mv	a0,t1
    d994:	00112e23          	sw	ra,28(sp)
    d998:	00d12623          	sw	a3,12(sp)
    d99c:	4c0000ef          	jal	ra,de5c <_vfprintf_r>
    d9a0:	01c12083          	lw	ra,28(sp)
    d9a4:	04010113          	addi	sp,sp,64
    d9a8:	00008067          	ret

0000d9ac <_puts_r>:
    d9ac:	fd010113          	addi	sp,sp,-48
    d9b0:	02812423          	sw	s0,40(sp)
    d9b4:	00050413          	mv	s0,a0
    d9b8:	00058513          	mv	a0,a1
    d9bc:	02912223          	sw	s1,36(sp)
    d9c0:	02112623          	sw	ra,44(sp)
    d9c4:	00058493          	mv	s1,a1
    d9c8:	394000ef          	jal	ra,dd5c <strlen>
    d9cc:	00150713          	addi	a4,a0,1
    d9d0:	00016697          	auipc	a3,0x16
    d9d4:	b8c68693          	addi	a3,a3,-1140 # 2355c <__flash_rodata_start+0x10c>
    d9d8:	00e12623          	sw	a4,12(sp)
    d9dc:	03842783          	lw	a5,56(s0)
    d9e0:	01010713          	addi	a4,sp,16
    d9e4:	00d12c23          	sw	a3,24(sp)
    d9e8:	00e12223          	sw	a4,4(sp)
    d9ec:	00100693          	li	a3,1
    d9f0:	00200713          	li	a4,2
    d9f4:	00912823          	sw	s1,16(sp)
    d9f8:	00a12a23          	sw	a0,20(sp)
    d9fc:	00d12e23          	sw	a3,28(sp)
    da00:	00e12423          	sw	a4,8(sp)
    da04:	00842483          	lw	s1,8(s0)
    da08:	08078a63          	beqz	a5,da9c <_puts_r+0xf0>
    da0c:	0644a703          	lw	a4,100(s1)
    da10:	00c49783          	lh	a5,12(s1)
    da14:	00177713          	andi	a4,a4,1
    da18:	00071663          	bnez	a4,da24 <_puts_r+0x78>
    da1c:	2007f713          	andi	a4,a5,512
    da20:	0a070463          	beqz	a4,dac8 <_puts_r+0x11c>
    da24:	01279713          	slli	a4,a5,0x12
    da28:	02074263          	bltz	a4,da4c <_puts_r+0xa0>
    da2c:	0644a703          	lw	a4,100(s1)
    da30:	000026b7          	lui	a3,0x2
    da34:	00d7e7b3          	or	a5,a5,a3
    da38:	ffffe6b7          	lui	a3,0xffffe
    da3c:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffbdfff>
    da40:	00d77733          	and	a4,a4,a3
    da44:	00f49623          	sh	a5,12(s1)
    da48:	06e4a223          	sw	a4,100(s1)
    da4c:	00040513          	mv	a0,s0
    da50:	00410613          	addi	a2,sp,4
    da54:	00048593          	mv	a1,s1
    da58:	2b0040ef          	jal	ra,11d08 <__sfvwrite_r>
    da5c:	0644a783          	lw	a5,100(s1)
    da60:	00153413          	seqz	s0,a0
    da64:	40800433          	neg	s0,s0
    da68:	00b47413          	andi	s0,s0,11
    da6c:	0017f793          	andi	a5,a5,1
    da70:	fff40413          	addi	s0,s0,-1
    da74:	00079863          	bnez	a5,da84 <_puts_r+0xd8>
    da78:	00c4d783          	lhu	a5,12(s1)
    da7c:	2007f793          	andi	a5,a5,512
    da80:	02078463          	beqz	a5,daa8 <_puts_r+0xfc>
    da84:	02c12083          	lw	ra,44(sp)
    da88:	00040513          	mv	a0,s0
    da8c:	02812403          	lw	s0,40(sp)
    da90:	02412483          	lw	s1,36(sp)
    da94:	03010113          	addi	sp,sp,48
    da98:	00008067          	ret
    da9c:	00040513          	mv	a0,s0
    daa0:	225030ef          	jal	ra,114c4 <__sinit>
    daa4:	f69ff06f          	j	da0c <_puts_r+0x60>
    daa8:	0584a503          	lw	a0,88(s1)
    daac:	504070ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
    dab0:	02c12083          	lw	ra,44(sp)
    dab4:	00040513          	mv	a0,s0
    dab8:	02812403          	lw	s0,40(sp)
    dabc:	02412483          	lw	s1,36(sp)
    dac0:	03010113          	addi	sp,sp,48
    dac4:	00008067          	ret
    dac8:	0584a503          	lw	a0,88(s1)
    dacc:	4cc070ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
    dad0:	00c49783          	lh	a5,12(s1)
    dad4:	f51ff06f          	j	da24 <_puts_r+0x78>

0000dad8 <puts>:
    dad8:	00050593          	mv	a1,a0
    dadc:	00018517          	auipc	a0,0x18
    dae0:	56052503          	lw	a0,1376(a0) # 2603c <_impure_ptr>
    dae4:	ec9ff06f          	j	d9ac <_puts_r>

0000dae8 <cleanup_glue>:
    dae8:	fe010113          	addi	sp,sp,-32
    daec:	01212823          	sw	s2,16(sp)
    daf0:	0005a903          	lw	s2,0(a1)
    daf4:	00812c23          	sw	s0,24(sp)
    daf8:	00912a23          	sw	s1,20(sp)
    dafc:	00112e23          	sw	ra,28(sp)
    db00:	01312623          	sw	s3,12(sp)
    db04:	01412423          	sw	s4,8(sp)
    db08:	00058413          	mv	s0,a1
    db0c:	00050493          	mv	s1,a0
    db10:	04090263          	beqz	s2,db54 <cleanup_glue+0x6c>
    db14:	00092983          	lw	s3,0(s2)
    db18:	02098863          	beqz	s3,db48 <cleanup_glue+0x60>
    db1c:	0009aa03          	lw	s4,0(s3)
    db20:	000a0e63          	beqz	s4,db3c <cleanup_glue+0x54>
    db24:	000a2583          	lw	a1,0(s4)
    db28:	00058463          	beqz	a1,db30 <cleanup_glue+0x48>
    db2c:	fbdff0ef          	jal	ra,dae8 <cleanup_glue>
    db30:	000a0593          	mv	a1,s4
    db34:	00048513          	mv	a0,s1
    db38:	6c5030ef          	jal	ra,119fc <_free_r>
    db3c:	00098593          	mv	a1,s3
    db40:	00048513          	mv	a0,s1
    db44:	6b9030ef          	jal	ra,119fc <_free_r>
    db48:	00090593          	mv	a1,s2
    db4c:	00048513          	mv	a0,s1
    db50:	6ad030ef          	jal	ra,119fc <_free_r>
    db54:	00040593          	mv	a1,s0
    db58:	01812403          	lw	s0,24(sp)
    db5c:	01c12083          	lw	ra,28(sp)
    db60:	01012903          	lw	s2,16(sp)
    db64:	00c12983          	lw	s3,12(sp)
    db68:	00812a03          	lw	s4,8(sp)
    db6c:	00048513          	mv	a0,s1
    db70:	01412483          	lw	s1,20(sp)
    db74:	02010113          	addi	sp,sp,32
    db78:	6850306f          	j	119fc <_free_r>

0000db7c <_reclaim_reent>:
    db7c:	00018797          	auipc	a5,0x18
    db80:	4c07a783          	lw	a5,1216(a5) # 2603c <_impure_ptr>
    db84:	10a78a63          	beq	a5,a0,dc98 <_reclaim_reent+0x11c>
    db88:	04c52583          	lw	a1,76(a0)
    db8c:	fe010113          	addi	sp,sp,-32
    db90:	00912a23          	sw	s1,20(sp)
    db94:	00112e23          	sw	ra,28(sp)
    db98:	00812c23          	sw	s0,24(sp)
    db9c:	01212823          	sw	s2,16(sp)
    dba0:	01312623          	sw	s3,12(sp)
    dba4:	00050493          	mv	s1,a0
    dba8:	04058063          	beqz	a1,dbe8 <_reclaim_reent+0x6c>
    dbac:	00000913          	li	s2,0
    dbb0:	08000993          	li	s3,128
    dbb4:	012587b3          	add	a5,a1,s2
    dbb8:	0007a403          	lw	s0,0(a5)
    dbbc:	00040e63          	beqz	s0,dbd8 <_reclaim_reent+0x5c>
    dbc0:	00040593          	mv	a1,s0
    dbc4:	00042403          	lw	s0,0(s0)
    dbc8:	00048513          	mv	a0,s1
    dbcc:	631030ef          	jal	ra,119fc <_free_r>
    dbd0:	fe0418e3          	bnez	s0,dbc0 <_reclaim_reent+0x44>
    dbd4:	04c4a583          	lw	a1,76(s1)
    dbd8:	00490913          	addi	s2,s2,4
    dbdc:	fd391ce3          	bne	s2,s3,dbb4 <_reclaim_reent+0x38>
    dbe0:	00048513          	mv	a0,s1
    dbe4:	619030ef          	jal	ra,119fc <_free_r>
    dbe8:	0404a583          	lw	a1,64(s1)
    dbec:	00058663          	beqz	a1,dbf8 <_reclaim_reent+0x7c>
    dbf0:	00048513          	mv	a0,s1
    dbf4:	609030ef          	jal	ra,119fc <_free_r>
    dbf8:	1484a403          	lw	s0,328(s1)
    dbfc:	02040063          	beqz	s0,dc1c <_reclaim_reent+0xa0>
    dc00:	14c48913          	addi	s2,s1,332
    dc04:	01240c63          	beq	s0,s2,dc1c <_reclaim_reent+0xa0>
    dc08:	00040593          	mv	a1,s0
    dc0c:	00042403          	lw	s0,0(s0)
    dc10:	00048513          	mv	a0,s1
    dc14:	5e9030ef          	jal	ra,119fc <_free_r>
    dc18:	fe8918e3          	bne	s2,s0,dc08 <_reclaim_reent+0x8c>
    dc1c:	0544a583          	lw	a1,84(s1)
    dc20:	00058663          	beqz	a1,dc2c <_reclaim_reent+0xb0>
    dc24:	00048513          	mv	a0,s1
    dc28:	5d5030ef          	jal	ra,119fc <_free_r>
    dc2c:	0384a783          	lw	a5,56(s1)
    dc30:	04078663          	beqz	a5,dc7c <_reclaim_reent+0x100>
    dc34:	03c4a783          	lw	a5,60(s1)
    dc38:	00048513          	mv	a0,s1
    dc3c:	000780e7          	jalr	a5
    dc40:	2e04a403          	lw	s0,736(s1)
    dc44:	02040c63          	beqz	s0,dc7c <_reclaim_reent+0x100>
    dc48:	00042583          	lw	a1,0(s0)
    dc4c:	00058663          	beqz	a1,dc58 <_reclaim_reent+0xdc>
    dc50:	00048513          	mv	a0,s1
    dc54:	e95ff0ef          	jal	ra,dae8 <cleanup_glue>
    dc58:	00040593          	mv	a1,s0
    dc5c:	01812403          	lw	s0,24(sp)
    dc60:	01c12083          	lw	ra,28(sp)
    dc64:	01012903          	lw	s2,16(sp)
    dc68:	00c12983          	lw	s3,12(sp)
    dc6c:	00048513          	mv	a0,s1
    dc70:	01412483          	lw	s1,20(sp)
    dc74:	02010113          	addi	sp,sp,32
    dc78:	5850306f          	j	119fc <_free_r>
    dc7c:	01c12083          	lw	ra,28(sp)
    dc80:	01812403          	lw	s0,24(sp)
    dc84:	01412483          	lw	s1,20(sp)
    dc88:	01012903          	lw	s2,16(sp)
    dc8c:	00c12983          	lw	s3,12(sp)
    dc90:	02010113          	addi	sp,sp,32
    dc94:	00008067          	ret
    dc98:	00008067          	ret

0000dc9c <__stack_chk_fail>:
    dc9c:	00016797          	auipc	a5,0x16
    dca0:	8c478793          	addi	a5,a5,-1852 # 23560 <__flash_rodata_start+0x110>
    dca4:	0007af83          	lw	t6,0(a5)
    dca8:	0047af03          	lw	t5,4(a5)
    dcac:	0087ae83          	lw	t4,8(a5)
    dcb0:	00c7ae03          	lw	t3,12(a5)
    dcb4:	0107a303          	lw	t1,16(a5)
    dcb8:	0147a883          	lw	a7,20(a5)
    dcbc:	0187a803          	lw	a6,24(a5)
    dcc0:	0247a683          	lw	a3,36(a5)
    dcc4:	0287a703          	lw	a4,40(a5)
    dcc8:	01c7a583          	lw	a1,28(a5)
    dccc:	0207a603          	lw	a2,32(a5)
    dcd0:	02c7c783          	lbu	a5,44(a5)
    dcd4:	fc010113          	addi	sp,sp,-64
    dcd8:	00010513          	mv	a0,sp
    dcdc:	02112e23          	sw	ra,60(sp)
    dce0:	01f12023          	sw	t6,0(sp)
    dce4:	01e12223          	sw	t5,4(sp)
    dce8:	01d12423          	sw	t4,8(sp)
    dcec:	01c12623          	sw	t3,12(sp)
    dcf0:	00612823          	sw	t1,16(sp)
    dcf4:	01112a23          	sw	a7,20(sp)
    dcf8:	01012c23          	sw	a6,24(sp)
    dcfc:	02d12223          	sw	a3,36(sp)
    dd00:	02e12423          	sw	a4,40(sp)
    dd04:	02f10623          	sb	a5,44(sp)
    dd08:	00b12e23          	sw	a1,28(sp)
    dd0c:	02c12023          	sw	a2,32(sp)
    dd10:	04c000ef          	jal	ra,dd5c <strlen>
    dd14:	00050613          	mv	a2,a0
    dd18:	00010593          	mv	a1,sp
    dd1c:	00200513          	li	a0,2
    dd20:	124000ef          	jal	ra,de44 <write>
    dd24:	00600513          	li	a0,6
    dd28:	1d9090ef          	jal	ra,17700 <raise>
    dd2c:	07f00513          	li	a0,127
    dd30:	784140ef          	jal	ra,224b4 <_exit>

0000dd34 <__stack_chk_fail_local>:
    dd34:	ff010113          	addi	sp,sp,-16
    dd38:	00112623          	sw	ra,12(sp)
    dd3c:	f61ff0ef          	jal	ra,dc9c <__stack_chk_fail>

0000dd40 <__stack_chk_init>:
    dd40:	0001a797          	auipc	a5,0x1a
    dd44:	f6c78793          	addi	a5,a5,-148 # 27cac <__stack_chk_guard>
    dd48:	0007a703          	lw	a4,0(a5)
    dd4c:	00071663          	bnez	a4,dd58 <__stack_chk_init+0x18>
    dd50:	ff0a0737          	lui	a4,0xff0a0
    dd54:	00e7a023          	sw	a4,0(a5)
    dd58:	00008067          	ret

0000dd5c <strlen>:
    dd5c:	00357793          	andi	a5,a0,3
    dd60:	00050713          	mv	a4,a0
    dd64:	04079c63          	bnez	a5,ddbc <strlen+0x60>
    dd68:	7f7f86b7          	lui	a3,0x7f7f8
    dd6c:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7b7f7f>
    dd70:	fff00593          	li	a1,-1
    dd74:	00072603          	lw	a2,0(a4) # ff0a0000 <__alt_data_end+0xff060000>
    dd78:	00470713          	addi	a4,a4,4
    dd7c:	00d677b3          	and	a5,a2,a3
    dd80:	00d787b3          	add	a5,a5,a3
    dd84:	00c7e7b3          	or	a5,a5,a2
    dd88:	00d7e7b3          	or	a5,a5,a3
    dd8c:	feb784e3          	beq	a5,a1,dd74 <strlen+0x18>
    dd90:	ffc74683          	lbu	a3,-4(a4)
    dd94:	40a707b3          	sub	a5,a4,a0
    dd98:	04068463          	beqz	a3,dde0 <strlen+0x84>
    dd9c:	ffd74683          	lbu	a3,-3(a4)
    dda0:	02068c63          	beqz	a3,ddd8 <strlen+0x7c>
    dda4:	ffe74503          	lbu	a0,-2(a4)
    dda8:	00a03533          	snez	a0,a0
    ddac:	00f50533          	add	a0,a0,a5
    ddb0:	ffe50513          	addi	a0,a0,-2
    ddb4:	00008067          	ret
    ddb8:	fa0688e3          	beqz	a3,dd68 <strlen+0xc>
    ddbc:	00074783          	lbu	a5,0(a4)
    ddc0:	00170713          	addi	a4,a4,1
    ddc4:	00377693          	andi	a3,a4,3
    ddc8:	fe0798e3          	bnez	a5,ddb8 <strlen+0x5c>
    ddcc:	40a70733          	sub	a4,a4,a0
    ddd0:	fff70513          	addi	a0,a4,-1
    ddd4:	00008067          	ret
    ddd8:	ffd78513          	addi	a0,a5,-3
    dddc:	00008067          	ret
    dde0:	ffc78513          	addi	a0,a5,-4
    dde4:	00008067          	ret

0000dde8 <close>:
    dde8:	00050593          	mv	a1,a0
    ddec:	00018517          	auipc	a0,0x18
    ddf0:	25052503          	lw	a0,592(a0) # 2603c <_impure_ptr>
    ddf4:	1740306f          	j	10f68 <_close_r>

0000ddf8 <open>:
    ddf8:	fc010113          	addi	sp,sp,-64
    ddfc:	02c12423          	sw	a2,40(sp)
    de00:	02d12623          	sw	a3,44(sp)
    de04:	02f12a23          	sw	a5,52(sp)
    de08:	00060693          	mv	a3,a2
    de0c:	02810793          	addi	a5,sp,40
    de10:	00058613          	mv	a2,a1
    de14:	00050593          	mv	a1,a0
    de18:	00018517          	auipc	a0,0x18
    de1c:	22452503          	lw	a0,548(a0) # 2603c <_impure_ptr>
    de20:	00112e23          	sw	ra,28(sp)
    de24:	02e12823          	sw	a4,48(sp)
    de28:	03012c23          	sw	a6,56(sp)
    de2c:	03112e23          	sw	a7,60(sp)
    de30:	00f12623          	sw	a5,12(sp)
    de34:	779080ef          	jal	ra,16dac <_open_r>
    de38:	01c12083          	lw	ra,28(sp)
    de3c:	04010113          	addi	sp,sp,64
    de40:	00008067          	ret

0000de44 <write>:
    de44:	00060693          	mv	a3,a2
    de48:	00058613          	mv	a2,a1
    de4c:	00050593          	mv	a1,a0
    de50:	00018517          	auipc	a0,0x18
    de54:	1ec52503          	lw	a0,492(a0) # 2603c <_impure_ptr>
    de58:	5250206f          	j	10b7c <_write_r>

0000de5c <_vfprintf_r>:
    de5c:	e1010113          	addi	sp,sp,-496
    de60:	1e112623          	sw	ra,492(sp)
    de64:	1e812423          	sw	s0,488(sp)
    de68:	1d312e23          	sw	s3,476(sp)
    de6c:	1bb12e23          	sw	s11,444(sp)
    de70:	00060993          	mv	s3,a2
    de74:	00058d93          	mv	s11,a1
    de78:	00d12823          	sw	a3,16(sp)
    de7c:	1e912223          	sw	s1,484(sp)
    de80:	1f212023          	sw	s2,480(sp)
    de84:	1d412c23          	sw	s4,472(sp)
    de88:	1d512a23          	sw	s5,468(sp)
    de8c:	1d612823          	sw	s6,464(sp)
    de90:	1d712623          	sw	s7,460(sp)
    de94:	1d812423          	sw	s8,456(sp)
    de98:	1d912223          	sw	s9,452(sp)
    de9c:	1da12023          	sw	s10,448(sp)
    dea0:	00050413          	mv	s0,a0
    dea4:	00a12223          	sw	a0,4(sp)
    dea8:	0c4070ef          	jal	ra,14f6c <_localeconv_r>
    deac:	00052703          	lw	a4,0(a0)
    deb0:	00070513          	mv	a0,a4
    deb4:	02e12423          	sw	a4,40(sp)
    deb8:	ea5ff0ef          	jal	ra,dd5c <strlen>
    debc:	02a12223          	sw	a0,36(sp)
    dec0:	0e012823          	sw	zero,240(sp)
    dec4:	0e012a23          	sw	zero,244(sp)
    dec8:	0e012c23          	sw	zero,248(sp)
    decc:	0e012e23          	sw	zero,252(sp)
    ded0:	00040663          	beqz	s0,dedc <_vfprintf_r+0x80>
    ded4:	03842783          	lw	a5,56(s0)
    ded8:	76078263          	beqz	a5,e63c <_vfprintf_r+0x7e0>
    dedc:	064da703          	lw	a4,100(s11)
    dee0:	00cd9783          	lh	a5,12(s11)
    dee4:	00177713          	andi	a4,a4,1
    dee8:	00071863          	bnez	a4,def8 <_vfprintf_r+0x9c>
    deec:	2007f713          	andi	a4,a5,512
    def0:	00071463          	bnez	a4,def8 <_vfprintf_r+0x9c>
    def4:	3740106f          	j	f268 <_vfprintf_r+0x140c>
    def8:	01279713          	slli	a4,a5,0x12
    defc:	02074663          	bltz	a4,df28 <_vfprintf_r+0xcc>
    df00:	064da703          	lw	a4,100(s11)
    df04:	000026b7          	lui	a3,0x2
    df08:	00d7e7b3          	or	a5,a5,a3
    df0c:	ffffe6b7          	lui	a3,0xffffe
    df10:	01079793          	slli	a5,a5,0x10
    df14:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffbdfff>
    df18:	4107d793          	srai	a5,a5,0x10
    df1c:	00d77733          	and	a4,a4,a3
    df20:	00fd9623          	sh	a5,12(s11)
    df24:	06eda223          	sw	a4,100(s11)
    df28:	0087f713          	andi	a4,a5,8
    df2c:	2e070a63          	beqz	a4,e220 <_vfprintf_r+0x3c4>
    df30:	010da703          	lw	a4,16(s11)
    df34:	2e070663          	beqz	a4,e220 <_vfprintf_r+0x3c4>
    df38:	01a7f713          	andi	a4,a5,26
    df3c:	00a00693          	li	a3,10
    df40:	30d70263          	beq	a4,a3,e244 <_vfprintf_r+0x3e8>
    df44:	00098b93          	mv	s7,s3
    df48:	000bc703          	lbu	a4,0(s7)
    df4c:	10c10793          	addi	a5,sp,268
    df50:	0ef12223          	sw	a5,228(sp)
    df54:	0e012623          	sw	zero,236(sp)
    df58:	0e012423          	sw	zero,232(sp)
    df5c:	00012c23          	sw	zero,24(sp)
    df60:	02012623          	sw	zero,44(sp)
    df64:	02012823          	sw	zero,48(sp)
    df68:	02012a23          	sw	zero,52(sp)
    df6c:	04012023          	sw	zero,64(sp)
    df70:	02012c23          	sw	zero,56(sp)
    df74:	00012423          	sw	zero,8(sp)
    df78:	01000c93          	li	s9,16
    df7c:	00078413          	mv	s0,a5
    df80:	22070a63          	beqz	a4,e1b4 <_vfprintf_r+0x358>
    df84:	000b8493          	mv	s1,s7
    df88:	02500693          	li	a3,37
    df8c:	32d70e63          	beq	a4,a3,e2c8 <_vfprintf_r+0x46c>
    df90:	0014c703          	lbu	a4,1(s1)
    df94:	00148493          	addi	s1,s1,1
    df98:	fe071ae3          	bnez	a4,df8c <_vfprintf_r+0x130>
    df9c:	41748933          	sub	s2,s1,s7
    dfa0:	21748a63          	beq	s1,s7,e1b4 <_vfprintf_r+0x358>
    dfa4:	0ec12683          	lw	a3,236(sp)
    dfa8:	0e812703          	lw	a4,232(sp)
    dfac:	01742023          	sw	s7,0(s0)
    dfb0:	012686b3          	add	a3,a3,s2
    dfb4:	00170713          	addi	a4,a4,1
    dfb8:	01242223          	sw	s2,4(s0)
    dfbc:	0ed12623          	sw	a3,236(sp)
    dfc0:	0ee12423          	sw	a4,232(sp)
    dfc4:	00700693          	li	a3,7
    dfc8:	00840413          	addi	s0,s0,8
    dfcc:	30e6c663          	blt	a3,a4,e2d8 <_vfprintf_r+0x47c>
    dfd0:	00812783          	lw	a5,8(sp)
    dfd4:	0004c703          	lbu	a4,0(s1)
    dfd8:	012787b3          	add	a5,a5,s2
    dfdc:	00f12423          	sw	a5,8(sp)
    dfe0:	1c070a63          	beqz	a4,e1b4 <_vfprintf_r+0x358>
    dfe4:	00000313          	li	t1,0
    dfe8:	0014c883          	lbu	a7,1(s1)
    dfec:	0c0103a3          	sb	zero,199(sp)
    dff0:	00148493          	addi	s1,s1,1
    dff4:	fff00913          	li	s2,-1
    dff8:	00000b13          	li	s6,0
    dffc:	05a00993          	li	s3,90
    e000:	00030a13          	mv	s4,t1
    e004:	00148493          	addi	s1,s1,1
    e008:	fe088793          	addi	a5,a7,-32
    e00c:	04f9ea63          	bltu	s3,a5,e060 <_vfprintf_r+0x204>
    e010:	00015717          	auipc	a4,0x15
    e014:	5c470713          	addi	a4,a4,1476 # 235d4 <__flash_rodata_start+0x184>
    e018:	00279793          	slli	a5,a5,0x2
    e01c:	00e787b3          	add	a5,a5,a4
    e020:	0007a783          	lw	a5,0(a5)
    e024:	00e787b3          	add	a5,a5,a4
    e028:	00078067          	jr	a5
    e02c:	00000a13          	li	s4,0
    e030:	fd088793          	addi	a5,a7,-48
    e034:	00900693          	li	a3,9
    e038:	0004c883          	lbu	a7,0(s1)
    e03c:	002a1713          	slli	a4,s4,0x2
    e040:	01470333          	add	t1,a4,s4
    e044:	00131313          	slli	t1,t1,0x1
    e048:	00678a33          	add	s4,a5,t1
    e04c:	fd088793          	addi	a5,a7,-48
    e050:	00148493          	addi	s1,s1,1
    e054:	fef6f2e3          	bgeu	a3,a5,e038 <_vfprintf_r+0x1dc>
    e058:	fe088793          	addi	a5,a7,-32
    e05c:	faf9fae3          	bgeu	s3,a5,e010 <_vfprintf_r+0x1b4>
    e060:	000a0313          	mv	t1,s4
    e064:	14088863          	beqz	a7,e1b4 <_vfprintf_r+0x358>
    e068:	15110623          	sb	a7,332(sp)
    e06c:	0c0103a3          	sb	zero,199(sp)
    e070:	00100c13          	li	s8,1
    e074:	00100993          	li	s3,1
    e078:	14c10b93          	addi	s7,sp,332
    e07c:	00012623          	sw	zero,12(sp)
    e080:	00000913          	li	s2,0
    e084:	02012023          	sw	zero,32(sp)
    e088:	00012e23          	sw	zero,28(sp)
    e08c:	00012a23          	sw	zero,20(sp)
    e090:	002b7293          	andi	t0,s6,2
    e094:	00028463          	beqz	t0,e09c <_vfprintf_r+0x240>
    e098:	002c0c13          	addi	s8,s8,2
    e09c:	084b7d13          	andi	s10,s6,132
    e0a0:	000d1663          	bnez	s10,e0ac <_vfprintf_r+0x250>
    e0a4:	418306b3          	sub	a3,t1,s8
    e0a8:	52d04ae3          	bgtz	a3,eddc <_vfprintf_r+0xf80>
    e0ac:	0c714683          	lbu	a3,199(sp)
    e0b0:	02068c63          	beqz	a3,e0e8 <_vfprintf_r+0x28c>
    e0b4:	0ec12603          	lw	a2,236(sp)
    e0b8:	0e812683          	lw	a3,232(sp)
    e0bc:	0c710593          	addi	a1,sp,199
    e0c0:	00160613          	addi	a2,a2,1
    e0c4:	00b42023          	sw	a1,0(s0)
    e0c8:	00168693          	addi	a3,a3,1
    e0cc:	00100593          	li	a1,1
    e0d0:	00b42223          	sw	a1,4(s0)
    e0d4:	0ec12623          	sw	a2,236(sp)
    e0d8:	0ed12423          	sw	a3,232(sp)
    e0dc:	00700613          	li	a2,7
    e0e0:	00840413          	addi	s0,s0,8
    e0e4:	30d64863          	blt	a2,a3,e3f4 <_vfprintf_r+0x598>
    e0e8:	02028c63          	beqz	t0,e120 <_vfprintf_r+0x2c4>
    e0ec:	0ec12603          	lw	a2,236(sp)
    e0f0:	0e812683          	lw	a3,232(sp)
    e0f4:	0c810793          	addi	a5,sp,200
    e0f8:	00260613          	addi	a2,a2,2
    e0fc:	00168693          	addi	a3,a3,1
    e100:	00200593          	li	a1,2
    e104:	00f42023          	sw	a5,0(s0)
    e108:	00b42223          	sw	a1,4(s0)
    e10c:	0ec12623          	sw	a2,236(sp)
    e110:	0ed12423          	sw	a3,232(sp)
    e114:	00700613          	li	a2,7
    e118:	00840413          	addi	s0,s0,8
    e11c:	5cd64ee3          	blt	a2,a3,eef8 <_vfprintf_r+0x109c>
    e120:	08000693          	li	a3,128
    e124:	28dd0ce3          	beq	s10,a3,ebbc <_vfprintf_r+0xd60>
    e128:	41390933          	sub	s2,s2,s3
    e12c:	39204ae3          	bgtz	s2,ecc0 <_vfprintf_r+0xe64>
    e130:	100b7693          	andi	a3,s6,256
    e134:	06069ce3          	bnez	a3,e9ac <_vfprintf_r+0xb50>
    e138:	0ec12683          	lw	a3,236(sp)
    e13c:	0e812783          	lw	a5,232(sp)
    e140:	01742023          	sw	s7,0(s0)
    e144:	00d986b3          	add	a3,s3,a3
    e148:	00178793          	addi	a5,a5,1
    e14c:	01342223          	sw	s3,4(s0)
    e150:	0ed12623          	sw	a3,236(sp)
    e154:	0ef12423          	sw	a5,232(sp)
    e158:	00700613          	li	a2,7
    e15c:	3ef64063          	blt	a2,a5,e53c <_vfprintf_r+0x6e0>
    e160:	00840413          	addi	s0,s0,8
    e164:	004b7713          	andi	a4,s6,4
    e168:	00070663          	beqz	a4,e174 <_vfprintf_r+0x318>
    e16c:	41830933          	sub	s2,t1,s8
    e170:	3f204a63          	bgtz	s2,e564 <_vfprintf_r+0x708>
    e174:	01835463          	bge	t1,s8,e17c <_vfprintf_r+0x320>
    e178:	000c0313          	mv	t1,s8
    e17c:	00812783          	lw	a5,8(sp)
    e180:	006787b3          	add	a5,a5,t1
    e184:	00f12423          	sw	a5,8(sp)
    e188:	40069ee3          	bnez	a3,eda4 <_vfprintf_r+0xf48>
    e18c:	00c12783          	lw	a5,12(sp)
    e190:	0e012423          	sw	zero,232(sp)
    e194:	00078863          	beqz	a5,e1a4 <_vfprintf_r+0x348>
    e198:	00c12583          	lw	a1,12(sp)
    e19c:	00412503          	lw	a0,4(sp)
    e1a0:	05d030ef          	jal	ra,119fc <_free_r>
    e1a4:	10c10413          	addi	s0,sp,268
    e1a8:	00048b93          	mv	s7,s1
    e1ac:	000bc703          	lbu	a4,0(s7)
    e1b0:	dc071ae3          	bnez	a4,df84 <_vfprintf_r+0x128>
    e1b4:	0ec12783          	lw	a5,236(sp)
    e1b8:	00078463          	beqz	a5,e1c0 <_vfprintf_r+0x364>
    e1bc:	3ad0106f          	j	fd68 <_vfprintf_r+0x1f0c>
    e1c0:	0e012423          	sw	zero,232(sp)
    e1c4:	064da703          	lw	a4,100(s11)
    e1c8:	00cd9783          	lh	a5,12(s11)
    e1cc:	00177713          	andi	a4,a4,1
    e1d0:	44070a63          	beqz	a4,e624 <_vfprintf_r+0x7c8>
    e1d4:	0407f793          	andi	a5,a5,64
    e1d8:	00078463          	beqz	a5,e1e0 <_vfprintf_r+0x384>
    e1dc:	4700206f          	j	1064c <_vfprintf_r+0x27f0>
    e1e0:	1ec12083          	lw	ra,492(sp)
    e1e4:	1e812403          	lw	s0,488(sp)
    e1e8:	00812503          	lw	a0,8(sp)
    e1ec:	1e412483          	lw	s1,484(sp)
    e1f0:	1e012903          	lw	s2,480(sp)
    e1f4:	1dc12983          	lw	s3,476(sp)
    e1f8:	1d812a03          	lw	s4,472(sp)
    e1fc:	1d412a83          	lw	s5,468(sp)
    e200:	1d012b03          	lw	s6,464(sp)
    e204:	1cc12b83          	lw	s7,460(sp)
    e208:	1c812c03          	lw	s8,456(sp)
    e20c:	1c412c83          	lw	s9,452(sp)
    e210:	1c012d03          	lw	s10,448(sp)
    e214:	1bc12d83          	lw	s11,444(sp)
    e218:	1f010113          	addi	sp,sp,496
    e21c:	00008067          	ret
    e220:	00412503          	lw	a0,4(sp)
    e224:	000d8593          	mv	a1,s11
    e228:	1b9020ef          	jal	ra,10be0 <__swsetup_r>
    e22c:	00050463          	beqz	a0,e234 <_vfprintf_r+0x3d8>
    e230:	3fc0206f          	j	1062c <_vfprintf_r+0x27d0>
    e234:	00cd9783          	lh	a5,12(s11)
    e238:	00a00693          	li	a3,10
    e23c:	01a7f713          	andi	a4,a5,26
    e240:	d0d712e3          	bne	a4,a3,df44 <_vfprintf_r+0xe8>
    e244:	00ed9703          	lh	a4,14(s11)
    e248:	ce074ee3          	bltz	a4,df44 <_vfprintf_r+0xe8>
    e24c:	064da703          	lw	a4,100(s11)
    e250:	00177713          	andi	a4,a4,1
    e254:	00071863          	bnez	a4,e264 <_vfprintf_r+0x408>
    e258:	2007f793          	andi	a5,a5,512
    e25c:	00079463          	bnez	a5,e264 <_vfprintf_r+0x408>
    e260:	3750106f          	j	fdd4 <_vfprintf_r+0x1f78>
    e264:	01012683          	lw	a3,16(sp)
    e268:	00412503          	lw	a0,4(sp)
    e26c:	00098613          	mv	a2,s3
    e270:	000d8593          	mv	a1,s11
    e274:	011020ef          	jal	ra,10a84 <__sbprintf>
    e278:	00a12423          	sw	a0,8(sp)
    e27c:	f65ff06f          	j	e1e0 <_vfprintf_r+0x384>
    e280:	00412a83          	lw	s5,4(sp)
    e284:	000a8513          	mv	a0,s5
    e288:	4e5060ef          	jal	ra,14f6c <_localeconv_r>
    e28c:	00452783          	lw	a5,4(a0)
    e290:	00078513          	mv	a0,a5
    e294:	02f12c23          	sw	a5,56(sp)
    e298:	ac5ff0ef          	jal	ra,dd5c <strlen>
    e29c:	00050793          	mv	a5,a0
    e2a0:	000a8513          	mv	a0,s5
    e2a4:	04f12023          	sw	a5,64(sp)
    e2a8:	00078a93          	mv	s5,a5
    e2ac:	4c1060ef          	jal	ra,14f6c <_localeconv_r>
    e2b0:	00852703          	lw	a4,8(a0)
    e2b4:	02e12a23          	sw	a4,52(sp)
    e2b8:	000a8463          	beqz	s5,e2c0 <_vfprintf_r+0x464>
    e2bc:	0f00106f          	j	f3ac <_vfprintf_r+0x1550>
    e2c0:	0004c883          	lbu	a7,0(s1)
    e2c4:	d41ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e2c8:	41748933          	sub	s2,s1,s7
    e2cc:	cd749ce3          	bne	s1,s7,dfa4 <_vfprintf_r+0x148>
    e2d0:	0004c703          	lbu	a4,0(s1)
    e2d4:	d0dff06f          	j	dfe0 <_vfprintf_r+0x184>
    e2d8:	00412503          	lw	a0,4(sp)
    e2dc:	0e410613          	addi	a2,sp,228
    e2e0:	000d8593          	mv	a1,s11
    e2e4:	5f40c0ef          	jal	ra,1a8d8 <__sprint_r>
    e2e8:	ec051ee3          	bnez	a0,e1c4 <_vfprintf_r+0x368>
    e2ec:	10c10413          	addi	s0,sp,268
    e2f0:	ce1ff06f          	j	dfd0 <_vfprintf_r+0x174>
    e2f4:	008b7693          	andi	a3,s6,8
    e2f8:	000a0313          	mv	t1,s4
    e2fc:	00068463          	beqz	a3,e304 <_vfprintf_r+0x4a8>
    e300:	0880106f          	j	f388 <_vfprintf_r+0x152c>
    e304:	01012783          	lw	a5,16(sp)
    e308:	0b010513          	addi	a0,sp,176
    e30c:	01112623          	sw	a7,12(sp)
    e310:	00778a93          	addi	s5,a5,7
    e314:	ff8afa93          	andi	s5,s5,-8
    e318:	000aa583          	lw	a1,0(s5)
    e31c:	004aa603          	lw	a2,4(s5)
    e320:	008a8793          	addi	a5,s5,8
    e324:	01412a23          	sw	s4,20(sp)
    e328:	00f12823          	sw	a5,16(sp)
    e32c:	259130ef          	jal	ra,21d84 <__extenddftf2>
    e330:	0b012803          	lw	a6,176(sp)
    e334:	0b412583          	lw	a1,180(sp)
    e338:	0b812603          	lw	a2,184(sp)
    e33c:	0bc12683          	lw	a3,188(sp)
    e340:	01412303          	lw	t1,20(sp)
    e344:	00c12883          	lw	a7,12(sp)
    e348:	0f010513          	addi	a0,sp,240
    e34c:	00612a23          	sw	t1,20(sp)
    e350:	01112623          	sw	a7,12(sp)
    e354:	0ed12e23          	sw	a3,252(sp)
    e358:	0f012823          	sw	a6,240(sp)
    e35c:	0eb12a23          	sw	a1,244(sp)
    e360:	0ec12c23          	sw	a2,248(sp)
    e364:	389060ef          	jal	ra,14eec <_ldcheck>
    e368:	0ca12623          	sw	a0,204(sp)
    e36c:	00200693          	li	a3,2
    e370:	00c12883          	lw	a7,12(sp)
    e374:	01412303          	lw	t1,20(sp)
    e378:	00d51463          	bne	a0,a3,e380 <_vfprintf_r+0x524>
    e37c:	5040106f          	j	f880 <_vfprintf_r+0x1a24>
    e380:	00100693          	li	a3,1
    e384:	00d51463          	bne	a0,a3,e38c <_vfprintf_r+0x530>
    e388:	6e00106f          	j	fa68 <_vfprintf_r+0x1c0c>
    e38c:	06100693          	li	a3,97
    e390:	00d89463          	bne	a7,a3,e398 <_vfprintf_r+0x53c>
    e394:	12c0106f          	j	f4c0 <_vfprintf_r+0x1664>
    e398:	04100693          	li	a3,65
    e39c:	05800793          	li	a5,88
    e3a0:	00d89463          	bne	a7,a3,e3a8 <_vfprintf_r+0x54c>
    e3a4:	1200106f          	j	f4c4 <_vfprintf_r+0x1668>
    e3a8:	fff00693          	li	a3,-1
    e3ac:	00d91463          	bne	s2,a3,e3b4 <_vfprintf_r+0x558>
    e3b0:	4540206f          	j	10804 <_vfprintf_r+0x29a8>
    e3b4:	fdf8f693          	andi	a3,a7,-33
    e3b8:	04700613          	li	a2,71
    e3bc:	00c69463          	bne	a3,a2,e3c4 <_vfprintf_r+0x568>
    e3c0:	4340206f          	j	107f4 <_vfprintf_r+0x2998>
    e3c4:	0fc12d03          	lw	s10,252(sp)
    e3c8:	100b6793          	ori	a5,s6,256
    e3cc:	04f12623          	sw	a5,76(sp)
    e3d0:	03612023          	sw	s6,32(sp)
    e3d4:	0f012f03          	lw	t5,240(sp)
    e3d8:	0f412e83          	lw	t4,244(sp)
    e3dc:	0f812e03          	lw	t3,248(sp)
    e3e0:	000d5463          	bgez	s10,e3e8 <_vfprintf_r+0x58c>
    e3e4:	1a50106f          	j	fd88 <_vfprintf_r+0x1f2c>
    e3e8:	06012023          	sw	zero,96(sp)
    e3ec:	00012623          	sw	zero,12(sp)
    e3f0:	1240106f          	j	f514 <_vfprintf_r+0x16b8>
    e3f4:	00412503          	lw	a0,4(sp)
    e3f8:	0e410613          	addi	a2,sp,228
    e3fc:	000d8593          	mv	a1,s11
    e400:	04612423          	sw	t1,72(sp)
    e404:	05112223          	sw	a7,68(sp)
    e408:	02512e23          	sw	t0,60(sp)
    e40c:	4cc0c0ef          	jal	ra,1a8d8 <__sprint_r>
    e410:	1a0514e3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    e414:	04812303          	lw	t1,72(sp)
    e418:	04412883          	lw	a7,68(sp)
    e41c:	03c12283          	lw	t0,60(sp)
    e420:	10c10413          	addi	s0,sp,268
    e424:	cc5ff06f          	j	e0e8 <_vfprintf_r+0x28c>
    e428:	01812783          	lw	a5,24(sp)
    e42c:	00100613          	li	a2,1
    e430:	00840993          	addi	s3,s0,8
    e434:	48f652e3          	bge	a2,a5,f0b8 <_vfprintf_r+0x125c>
    e438:	0ec12683          	lw	a3,236(sp)
    e43c:	0e812903          	lw	s2,232(sp)
    e440:	00100613          	li	a2,1
    e444:	00168693          	addi	a3,a3,1
    e448:	00190913          	addi	s2,s2,1
    e44c:	00c42223          	sw	a2,4(s0)
    e450:	01742023          	sw	s7,0(s0)
    e454:	0ed12623          	sw	a3,236(sp)
    e458:	0f212423          	sw	s2,232(sp)
    e45c:	00700613          	li	a2,7
    e460:	01265463          	bge	a2,s2,e468 <_vfprintf_r+0x60c>
    e464:	2580106f          	j	f6bc <_vfprintf_r+0x1860>
    e468:	02412783          	lw	a5,36(sp)
    e46c:	02812703          	lw	a4,40(sp)
    e470:	00190913          	addi	s2,s2,1
    e474:	00d78d33          	add	s10,a5,a3
    e478:	00e9a023          	sw	a4,0(s3)
    e47c:	00f9a223          	sw	a5,4(s3)
    e480:	0fa12623          	sw	s10,236(sp)
    e484:	0f212423          	sw	s2,232(sp)
    e488:	00700693          	li	a3,7
    e48c:	00898993          	addi	s3,s3,8
    e490:	0126d463          	bge	a3,s2,e498 <_vfprintf_r+0x63c>
    e494:	2540106f          	j	f6e8 <_vfprintf_r+0x188c>
    e498:	0f012683          	lw	a3,240(sp)
    e49c:	0a010593          	addi	a1,sp,160
    e4a0:	0b010513          	addi	a0,sp,176
    e4a4:	0ad12823          	sw	a3,176(sp)
    e4a8:	0f412683          	lw	a3,244(sp)
    e4ac:	00612a23          	sw	t1,20(sp)
    e4b0:	0a012023          	sw	zero,160(sp)
    e4b4:	0ad12a23          	sw	a3,180(sp)
    e4b8:	0f812683          	lw	a3,248(sp)
    e4bc:	0a012223          	sw	zero,164(sp)
    e4c0:	0a012423          	sw	zero,168(sp)
    e4c4:	0ad12c23          	sw	a3,184(sp)
    e4c8:	0fc12683          	lw	a3,252(sp)
    e4cc:	0a012623          	sw	zero,172(sp)
    e4d0:	0ad12e23          	sw	a3,188(sp)
    e4d4:	17d100ef          	jal	ra,1ee50 <__eqtf2>
    e4d8:	01812783          	lw	a5,24(sp)
    e4dc:	01412303          	lw	t1,20(sp)
    e4e0:	fff78413          	addi	s0,a5,-1
    e4e4:	420508e3          	beqz	a0,f114 <_vfprintf_r+0x12b8>
    e4e8:	001b8793          	addi	a5,s7,1
    e4ec:	00190913          	addi	s2,s2,1
    e4f0:	008d0d33          	add	s10,s10,s0
    e4f4:	00f9a023          	sw	a5,0(s3)
    e4f8:	0089a223          	sw	s0,4(s3)
    e4fc:	0fa12623          	sw	s10,236(sp)
    e500:	0f212423          	sw	s2,232(sp)
    e504:	00700793          	li	a5,7
    e508:	00898993          	addi	s3,s3,8
    e50c:	3d27cee3          	blt	a5,s2,f0e8 <_vfprintf_r+0x128c>
    e510:	03012703          	lw	a4,48(sp)
    e514:	0d410613          	addi	a2,sp,212
    e518:	00190793          	addi	a5,s2,1
    e51c:	01a706b3          	add	a3,a4,s10
    e520:	00c9a023          	sw	a2,0(s3)
    e524:	00e9a223          	sw	a4,4(s3)
    e528:	0ed12623          	sw	a3,236(sp)
    e52c:	0ef12423          	sw	a5,232(sp)
    e530:	00700613          	li	a2,7
    e534:	00898413          	addi	s0,s3,8
    e538:	c2f656e3          	bge	a2,a5,e164 <_vfprintf_r+0x308>
    e53c:	00412503          	lw	a0,4(sp)
    e540:	0e410613          	addi	a2,sp,228
    e544:	000d8593          	mv	a1,s11
    e548:	00612a23          	sw	t1,20(sp)
    e54c:	38c0c0ef          	jal	ra,1a8d8 <__sprint_r>
    e550:	060514e3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    e554:	0ec12683          	lw	a3,236(sp)
    e558:	01412303          	lw	t1,20(sp)
    e55c:	10c10413          	addi	s0,sp,268
    e560:	c05ff06f          	j	e164 <_vfprintf_r+0x308>
    e564:	01000713          	li	a4,16
    e568:	0e812783          	lw	a5,232(sp)
    e56c:	00015a97          	auipc	s5,0x15
    e570:	26ca8a93          	addi	s5,s5,620 # 237d8 <blanks.1>
    e574:	07275663          	bge	a4,s2,e5e0 <_vfprintf_r+0x784>
    e578:	00412a03          	lw	s4,4(sp)
    e57c:	01000993          	li	s3,16
    e580:	00700d13          	li	s10,7
    e584:	00030b13          	mv	s6,t1
    e588:	00c0006f          	j	e594 <_vfprintf_r+0x738>
    e58c:	ff090913          	addi	s2,s2,-16
    e590:	0529d663          	bge	s3,s2,e5dc <_vfprintf_r+0x780>
    e594:	01068693          	addi	a3,a3,16
    e598:	00178793          	addi	a5,a5,1
    e59c:	01542023          	sw	s5,0(s0)
    e5a0:	01342223          	sw	s3,4(s0)
    e5a4:	0ed12623          	sw	a3,236(sp)
    e5a8:	0ef12423          	sw	a5,232(sp)
    e5ac:	00840413          	addi	s0,s0,8
    e5b0:	fcfd5ee3          	bge	s10,a5,e58c <_vfprintf_r+0x730>
    e5b4:	0e410613          	addi	a2,sp,228
    e5b8:	000d8593          	mv	a1,s11
    e5bc:	000a0513          	mv	a0,s4
    e5c0:	3180c0ef          	jal	ra,1a8d8 <__sprint_r>
    e5c4:	7e051a63          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    e5c8:	ff090913          	addi	s2,s2,-16
    e5cc:	0ec12683          	lw	a3,236(sp)
    e5d0:	0e812783          	lw	a5,232(sp)
    e5d4:	10c10413          	addi	s0,sp,268
    e5d8:	fb29cee3          	blt	s3,s2,e594 <_vfprintf_r+0x738>
    e5dc:	000b0313          	mv	t1,s6
    e5e0:	012686b3          	add	a3,a3,s2
    e5e4:	00178793          	addi	a5,a5,1
    e5e8:	01542023          	sw	s5,0(s0)
    e5ec:	01242223          	sw	s2,4(s0)
    e5f0:	0ed12623          	sw	a3,236(sp)
    e5f4:	0ef12423          	sw	a5,232(sp)
    e5f8:	00700713          	li	a4,7
    e5fc:	b6f75ce3          	bge	a4,a5,e174 <_vfprintf_r+0x318>
    e600:	00412503          	lw	a0,4(sp)
    e604:	0e410613          	addi	a2,sp,228
    e608:	000d8593          	mv	a1,s11
    e60c:	00612a23          	sw	t1,20(sp)
    e610:	2c80c0ef          	jal	ra,1a8d8 <__sprint_r>
    e614:	7a051263          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    e618:	0ec12683          	lw	a3,236(sp)
    e61c:	01412303          	lw	t1,20(sp)
    e620:	b55ff06f          	j	e174 <_vfprintf_r+0x318>
    e624:	2007f713          	andi	a4,a5,512
    e628:	ba0716e3          	bnez	a4,e1d4 <_vfprintf_r+0x378>
    e62c:	058da503          	lw	a0,88(s11)
    e630:	181060ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
    e634:	00cd9783          	lh	a5,12(s11)
    e638:	b9dff06f          	j	e1d4 <_vfprintf_r+0x378>
    e63c:	00412503          	lw	a0,4(sp)
    e640:	685020ef          	jal	ra,114c4 <__sinit>
    e644:	899ff06f          	j	dedc <_vfprintf_r+0x80>
    e648:	0004c883          	lbu	a7,0(s1)
    e64c:	020b6b13          	ori	s6,s6,32
    e650:	9b5ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e654:	01012703          	lw	a4,16(sp)
    e658:	000a0313          	mv	t1,s4
    e65c:	0c0103a3          	sb	zero,199(sp)
    e660:	00072783          	lw	a5,0(a4)
    e664:	00470713          	addi	a4,a4,4
    e668:	00e12823          	sw	a4,16(sp)
    e66c:	14f10623          	sb	a5,332(sp)
    e670:	00100c13          	li	s8,1
    e674:	00100993          	li	s3,1
    e678:	14c10b93          	addi	s7,sp,332
    e67c:	a01ff06f          	j	e07c <_vfprintf_r+0x220>
    e680:	01012783          	lw	a5,16(sp)
    e684:	0c0103a3          	sb	zero,199(sp)
    e688:	000a0313          	mv	t1,s4
    e68c:	0007ab83          	lw	s7,0(a5)
    e690:	00478a93          	addi	s5,a5,4
    e694:	600b86e3          	beqz	s7,f4a0 <_vfprintf_r+0x1644>
    e698:	fff00693          	li	a3,-1
    e69c:	00d91463          	bne	s2,a3,e6a4 <_vfprintf_r+0x848>
    e6a0:	3780106f          	j	fa18 <_vfprintf_r+0x1bbc>
    e6a4:	00090613          	mv	a2,s2
    e6a8:	00000593          	li	a1,0
    e6ac:	000b8513          	mv	a0,s7
    e6b0:	01112823          	sw	a7,16(sp)
    e6b4:	01412a23          	sw	s4,20(sp)
    e6b8:	308070ef          	jal	ra,159c0 <memchr>
    e6bc:	00a12623          	sw	a0,12(sp)
    e6c0:	01012883          	lw	a7,16(sp)
    e6c4:	01412303          	lw	t1,20(sp)
    e6c8:	00051463          	bnez	a0,e6d0 <_vfprintf_r+0x874>
    e6cc:	6890106f          	j	10554 <_vfprintf_r+0x26f8>
    e6d0:	00c12783          	lw	a5,12(sp)
    e6d4:	0c714683          	lbu	a3,199(sp)
    e6d8:	01512823          	sw	s5,16(sp)
    e6dc:	417789b3          	sub	s3,a5,s7
    e6e0:	fff9c813          	not	a6,s3
    e6e4:	41f85813          	srai	a6,a6,0x1f
    e6e8:	00012623          	sw	zero,12(sp)
    e6ec:	02012023          	sw	zero,32(sp)
    e6f0:	00012e23          	sw	zero,28(sp)
    e6f4:	00012a23          	sw	zero,20(sp)
    e6f8:	0109fc33          	and	s8,s3,a6
    e6fc:	00000913          	li	s2,0
    e700:	980688e3          	beqz	a3,e090 <_vfprintf_r+0x234>
    e704:	001c0c13          	addi	s8,s8,1
    e708:	989ff06f          	j	e090 <_vfprintf_r+0x234>
    e70c:	01012783          	lw	a5,16(sp)
    e710:	0007aa03          	lw	s4,0(a5)
    e714:	00478793          	addi	a5,a5,4
    e718:	360a54e3          	bgez	s4,f280 <_vfprintf_r+0x1424>
    e71c:	41400a33          	neg	s4,s4
    e720:	00f12823          	sw	a5,16(sp)
    e724:	0004c883          	lbu	a7,0(s1)
    e728:	004b6b13          	ori	s6,s6,4
    e72c:	8d9ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e730:	0004c883          	lbu	a7,0(s1)
    e734:	06800793          	li	a5,104
    e738:	54f884e3          	beq	a7,a5,f480 <_vfprintf_r+0x1624>
    e73c:	040b6b13          	ori	s6,s6,64
    e740:	8c5ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e744:	02b00793          	li	a5,43
    e748:	0004c883          	lbu	a7,0(s1)
    e74c:	0cf103a3          	sb	a5,199(sp)
    e750:	8b5ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e754:	0004c883          	lbu	a7,0(s1)
    e758:	080b6b13          	ori	s6,s6,128
    e75c:	8a9ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e760:	0004c883          	lbu	a7,0(s1)
    e764:	02a00793          	li	a5,42
    e768:	00148713          	addi	a4,s1,1
    e76c:	00f89463          	bne	a7,a5,e774 <_vfprintf_r+0x918>
    e770:	2bc0206f          	j	10a2c <_vfprintf_r+0x2bd0>
    e774:	fd088793          	addi	a5,a7,-48
    e778:	00900613          	li	a2,9
    e77c:	00070493          	mv	s1,a4
    e780:	00000913          	li	s2,0
    e784:	00900693          	li	a3,9
    e788:	88f660e3          	bltu	a2,a5,e008 <_vfprintf_r+0x1ac>
    e78c:	0004c883          	lbu	a7,0(s1)
    e790:	00291713          	slli	a4,s2,0x2
    e794:	01270933          	add	s2,a4,s2
    e798:	00191913          	slli	s2,s2,0x1
    e79c:	00f90933          	add	s2,s2,a5
    e7a0:	fd088793          	addi	a5,a7,-48
    e7a4:	00148493          	addi	s1,s1,1
    e7a8:	fef6f2e3          	bgeu	a3,a5,e78c <_vfprintf_r+0x930>
    e7ac:	85dff06f          	j	e008 <_vfprintf_r+0x1ac>
    e7b0:	0004c883          	lbu	a7,0(s1)
    e7b4:	001b6b13          	ori	s6,s6,1
    e7b8:	84dff06f          	j	e004 <_vfprintf_r+0x1a8>
    e7bc:	0c714783          	lbu	a5,199(sp)
    e7c0:	0004c883          	lbu	a7,0(s1)
    e7c4:	840790e3          	bnez	a5,e004 <_vfprintf_r+0x1a8>
    e7c8:	02000793          	li	a5,32
    e7cc:	0cf103a3          	sb	a5,199(sp)
    e7d0:	835ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e7d4:	000a0313          	mv	t1,s4
    e7d8:	010b6b13          	ori	s6,s6,16
    e7dc:	020b7793          	andi	a5,s6,32
    e7e0:	1a078ae3          	beqz	a5,f194 <_vfprintf_r+0x1338>
    e7e4:	01012783          	lw	a5,16(sp)
    e7e8:	00778a93          	addi	s5,a5,7
    e7ec:	ff8afa93          	andi	s5,s5,-8
    e7f0:	000aa983          	lw	s3,0(s5)
    e7f4:	004aac03          	lw	s8,4(s5)
    e7f8:	008a8793          	addi	a5,s5,8
    e7fc:	00f12823          	sw	a5,16(sp)
    e800:	bffb7d13          	andi	s10,s6,-1025
    e804:	00000693          	li	a3,0
    e808:	00000793          	li	a5,0
    e80c:	0cf103a3          	sb	a5,199(sp)
    e810:	fff00793          	li	a5,-1
    e814:	2ef90063          	beq	s2,a5,eaf4 <_vfprintf_r+0xc98>
    e818:	0189e7b3          	or	a5,s3,s8
    e81c:	f7fd7b13          	andi	s6,s10,-129
    e820:	2c079863          	bnez	a5,eaf0 <_vfprintf_r+0xc94>
    e824:	32091e63          	bnez	s2,eb60 <_vfprintf_r+0xd04>
    e828:	220692e3          	bnez	a3,f24c <_vfprintf_r+0x13f0>
    e82c:	001d7993          	andi	s3,s10,1
    e830:	1b010b93          	addi	s7,sp,432
    e834:	2c099ee3          	bnez	s3,f310 <_vfprintf_r+0x14b4>
    e838:	0c714683          	lbu	a3,199(sp)
    e83c:	00090c13          	mv	s8,s2
    e840:	01395463          	bge	s2,s3,e848 <_vfprintf_r+0x9ec>
    e844:	00098c13          	mv	s8,s3
    e848:	00012623          	sw	zero,12(sp)
    e84c:	02012023          	sw	zero,32(sp)
    e850:	00012e23          	sw	zero,28(sp)
    e854:	00012a23          	sw	zero,20(sp)
    e858:	ea0696e3          	bnez	a3,e704 <_vfprintf_r+0x8a8>
    e85c:	835ff06f          	j	e090 <_vfprintf_r+0x234>
    e860:	000a0313          	mv	t1,s4
    e864:	010b6d13          	ori	s10,s6,16
    e868:	020d7793          	andi	a5,s10,32
    e86c:	1a0786e3          	beqz	a5,f218 <_vfprintf_r+0x13bc>
    e870:	01012783          	lw	a5,16(sp)
    e874:	00100693          	li	a3,1
    e878:	00778a93          	addi	s5,a5,7
    e87c:	ff8afa93          	andi	s5,s5,-8
    e880:	008a8793          	addi	a5,s5,8
    e884:	000aa983          	lw	s3,0(s5)
    e888:	004aac03          	lw	s8,4(s5)
    e88c:	00f12823          	sw	a5,16(sp)
    e890:	f79ff06f          	j	e808 <_vfprintf_r+0x9ac>
    e894:	0004c883          	lbu	a7,0(s1)
    e898:	008b6b13          	ori	s6,s6,8
    e89c:	f68ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e8a0:	01012703          	lw	a4,16(sp)
    e8a4:	ffff87b7          	lui	a5,0xffff8
    e8a8:	8307c793          	xori	a5,a5,-2000
    e8ac:	0cf11423          	sh	a5,200(sp)
    e8b0:	00470793          	addi	a5,a4,4
    e8b4:	00f12823          	sw	a5,16(sp)
    e8b8:	00015797          	auipc	a5,0x15
    e8bc:	ce878793          	addi	a5,a5,-792 # 235a0 <__flash_rodata_start+0x150>
    e8c0:	00072983          	lw	s3,0(a4)
    e8c4:	000a0313          	mv	t1,s4
    e8c8:	00000c13          	li	s8,0
    e8cc:	002b6d13          	ori	s10,s6,2
    e8d0:	02f12623          	sw	a5,44(sp)
    e8d4:	00200693          	li	a3,2
    e8d8:	07800893          	li	a7,120
    e8dc:	f2dff06f          	j	e808 <_vfprintf_r+0x9ac>
    e8e0:	020b7793          	andi	a5,s6,32
    e8e4:	26078ce3          	beqz	a5,f35c <_vfprintf_r+0x1500>
    e8e8:	01012783          	lw	a5,16(sp)
    e8ec:	00812683          	lw	a3,8(sp)
    e8f0:	0007a783          	lw	a5,0(a5)
    e8f4:	41f6d713          	srai	a4,a3,0x1f
    e8f8:	00d7a023          	sw	a3,0(a5)
    e8fc:	00e7a223          	sw	a4,4(a5)
    e900:	01012783          	lw	a5,16(sp)
    e904:	00048b93          	mv	s7,s1
    e908:	00478793          	addi	a5,a5,4
    e90c:	00f12823          	sw	a5,16(sp)
    e910:	89dff06f          	j	e1ac <_vfprintf_r+0x350>
    e914:	0004c883          	lbu	a7,0(s1)
    e918:	06c00793          	li	a5,108
    e91c:	36f88ae3          	beq	a7,a5,f490 <_vfprintf_r+0x1634>
    e920:	010b6b13          	ori	s6,s6,16
    e924:	ee0ff06f          	j	e004 <_vfprintf_r+0x1a8>
    e928:	000a0313          	mv	t1,s4
    e92c:	010b6b13          	ori	s6,s6,16
    e930:	020b7793          	andi	a5,s6,32
    e934:	080788e3          	beqz	a5,f1c4 <_vfprintf_r+0x1368>
    e938:	01012783          	lw	a5,16(sp)
    e93c:	00778a93          	addi	s5,a5,7
    e940:	ff8afa93          	andi	s5,s5,-8
    e944:	004aa783          	lw	a5,4(s5)
    e948:	000aa983          	lw	s3,0(s5)
    e94c:	008a8713          	addi	a4,s5,8
    e950:	00e12823          	sw	a4,16(sp)
    e954:	00078c13          	mv	s8,a5
    e958:	0a07c0e3          	bltz	a5,f1f8 <_vfprintf_r+0x139c>
    e95c:	fff00793          	li	a5,-1
    e960:	000b0d13          	mv	s10,s6
    e964:	02f90263          	beq	s2,a5,e988 <_vfprintf_r+0xb2c>
    e968:	0189e7b3          	or	a5,s3,s8
    e96c:	f7fb7d13          	andi	s10,s6,-129
    e970:	00079c63          	bnez	a5,e988 <_vfprintf_r+0xb2c>
    e974:	02091063          	bnez	s2,e994 <_vfprintf_r+0xb38>
    e978:	00000993          	li	s3,0
    e97c:	000d0b13          	mv	s6,s10
    e980:	1b010b93          	addi	s7,sp,432
    e984:	eb5ff06f          	j	e838 <_vfprintf_r+0x9dc>
    e988:	580c1ee3          	bnez	s8,f724 <_vfprintf_r+0x18c8>
    e98c:	00900793          	li	a5,9
    e990:	5937eae3          	bltu	a5,s3,f724 <_vfprintf_r+0x18c8>
    e994:	03098993          	addi	s3,s3,48
    e998:	1b3107a3          	sb	s3,431(sp)
    e99c:	000d0b13          	mv	s6,s10
    e9a0:	00100993          	li	s3,1
    e9a4:	1af10b93          	addi	s7,sp,431
    e9a8:	e91ff06f          	j	e838 <_vfprintf_r+0x9dc>
    e9ac:	06500693          	li	a3,101
    e9b0:	a716dce3          	bge	a3,a7,e428 <_vfprintf_r+0x5cc>
    e9b4:	0f012683          	lw	a3,240(sp)
    e9b8:	0a010593          	addi	a1,sp,160
    e9bc:	0b010513          	addi	a0,sp,176
    e9c0:	0ad12823          	sw	a3,176(sp)
    e9c4:	0f412683          	lw	a3,244(sp)
    e9c8:	02612e23          	sw	t1,60(sp)
    e9cc:	0a012023          	sw	zero,160(sp)
    e9d0:	0ad12a23          	sw	a3,180(sp)
    e9d4:	0f812683          	lw	a3,248(sp)
    e9d8:	0a012223          	sw	zero,164(sp)
    e9dc:	0a012423          	sw	zero,168(sp)
    e9e0:	0ad12c23          	sw	a3,184(sp)
    e9e4:	0fc12683          	lw	a3,252(sp)
    e9e8:	0a012623          	sw	zero,172(sp)
    e9ec:	0ad12e23          	sw	a3,188(sp)
    e9f0:	460100ef          	jal	ra,1ee50 <__eqtf2>
    e9f4:	03c12303          	lw	t1,60(sp)
    e9f8:	52051663          	bnez	a0,ef24 <_vfprintf_r+0x10c8>
    e9fc:	0ec12683          	lw	a3,236(sp)
    ea00:	0e812783          	lw	a5,232(sp)
    ea04:	00015617          	auipc	a2,0x15
    ea08:	bcc60613          	addi	a2,a2,-1076 # 235d0 <__flash_rodata_start+0x180>
    ea0c:	00c42023          	sw	a2,0(s0)
    ea10:	00168693          	addi	a3,a3,1
    ea14:	00100613          	li	a2,1
    ea18:	00178793          	addi	a5,a5,1
    ea1c:	00c42223          	sw	a2,4(s0)
    ea20:	0ed12623          	sw	a3,236(sp)
    ea24:	0ef12423          	sw	a5,232(sp)
    ea28:	00700613          	li	a2,7
    ea2c:	00840413          	addi	s0,s0,8
    ea30:	5ef64ee3          	blt	a2,a5,f82c <_vfprintf_r+0x19d0>
    ea34:	0cc12783          	lw	a5,204(sp)
    ea38:	01812703          	lw	a4,24(sp)
    ea3c:	00e7dee3          	bge	a5,a4,f258 <_vfprintf_r+0x13fc>
    ea40:	02812783          	lw	a5,40(sp)
    ea44:	02412703          	lw	a4,36(sp)
    ea48:	00700613          	li	a2,7
    ea4c:	00f42023          	sw	a5,0(s0)
    ea50:	0e812783          	lw	a5,232(sp)
    ea54:	00d706b3          	add	a3,a4,a3
    ea58:	00e42223          	sw	a4,4(s0)
    ea5c:	00178793          	addi	a5,a5,1
    ea60:	0ed12623          	sw	a3,236(sp)
    ea64:	0ef12423          	sw	a5,232(sp)
    ea68:	00840413          	addi	s0,s0,8
    ea6c:	1cf648e3          	blt	a2,a5,f43c <_vfprintf_r+0x15e0>
    ea70:	01812783          	lw	a5,24(sp)
    ea74:	fff78913          	addi	s2,a5,-1
    ea78:	ef205663          	blez	s2,e164 <_vfprintf_r+0x308>
    ea7c:	01000613          	li	a2,16
    ea80:	0e812783          	lw	a5,232(sp)
    ea84:	00015a97          	auipc	s5,0x15
    ea88:	d64a8a93          	addi	s5,s5,-668 # 237e8 <zeroes.0>
    ea8c:	5d2656e3          	bge	a2,s2,f858 <_vfprintf_r+0x19fc>
    ea90:	00412a03          	lw	s4,4(sp)
    ea94:	01000993          	li	s3,16
    ea98:	00700d13          	li	s10,7
    ea9c:	00030b93          	mv	s7,t1
    eaa0:	00c0006f          	j	eaac <_vfprintf_r+0xc50>
    eaa4:	ff090913          	addi	s2,s2,-16
    eaa8:	5b29d6e3          	bge	s3,s2,f854 <_vfprintf_r+0x19f8>
    eaac:	01068693          	addi	a3,a3,16
    eab0:	00178793          	addi	a5,a5,1
    eab4:	01542023          	sw	s5,0(s0)
    eab8:	01342223          	sw	s3,4(s0)
    eabc:	0ed12623          	sw	a3,236(sp)
    eac0:	0ef12423          	sw	a5,232(sp)
    eac4:	00840413          	addi	s0,s0,8
    eac8:	fcfd5ee3          	bge	s10,a5,eaa4 <_vfprintf_r+0xc48>
    eacc:	0e410613          	addi	a2,sp,228
    ead0:	000d8593          	mv	a1,s11
    ead4:	000a0513          	mv	a0,s4
    ead8:	6010b0ef          	jal	ra,1a8d8 <__sprint_r>
    eadc:	2c051e63          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    eae0:	0ec12683          	lw	a3,236(sp)
    eae4:	0e812783          	lw	a5,232(sp)
    eae8:	10c10413          	addi	s0,sp,268
    eaec:	fb9ff06f          	j	eaa4 <_vfprintf_r+0xc48>
    eaf0:	000b0d13          	mv	s10,s6
    eaf4:	00100793          	li	a5,1
    eaf8:	e8f688e3          	beq	a3,a5,e988 <_vfprintf_r+0xb2c>
    eafc:	00200793          	li	a5,2
    eb00:	06f68c63          	beq	a3,a5,eb78 <_vfprintf_r+0xd1c>
    eb04:	1b010b93          	addi	s7,sp,432
    eb08:	01dc1793          	slli	a5,s8,0x1d
    eb0c:	0079f713          	andi	a4,s3,7
    eb10:	0039d993          	srli	s3,s3,0x3
    eb14:	03070713          	addi	a4,a4,48
    eb18:	0137e9b3          	or	s3,a5,s3
    eb1c:	003c5c13          	srli	s8,s8,0x3
    eb20:	feeb8fa3          	sb	a4,-1(s7)
    eb24:	0189e7b3          	or	a5,s3,s8
    eb28:	000b8613          	mv	a2,s7
    eb2c:	fffb8b93          	addi	s7,s7,-1
    eb30:	fc079ce3          	bnez	a5,eb08 <_vfprintf_r+0xcac>
    eb34:	001d7693          	andi	a3,s10,1
    eb38:	06068a63          	beqz	a3,ebac <_vfprintf_r+0xd50>
    eb3c:	03000693          	li	a3,48
    eb40:	06d70663          	beq	a4,a3,ebac <_vfprintf_r+0xd50>
    eb44:	ffe60613          	addi	a2,a2,-2
    eb48:	1b010793          	addi	a5,sp,432
    eb4c:	fedb8fa3          	sb	a3,-1(s7)
    eb50:	40c789b3          	sub	s3,a5,a2
    eb54:	000d0b13          	mv	s6,s10
    eb58:	00060b93          	mv	s7,a2
    eb5c:	cddff06f          	j	e838 <_vfprintf_r+0x9dc>
    eb60:	00100793          	li	a5,1
    eb64:	00f69463          	bne	a3,a5,eb6c <_vfprintf_r+0xd10>
    eb68:	3290106f          	j	10690 <_vfprintf_r+0x2834>
    eb6c:	00200793          	li	a5,2
    eb70:	000b0d13          	mv	s10,s6
    eb74:	f8f698e3          	bne	a3,a5,eb04 <_vfprintf_r+0xca8>
    eb78:	02c12683          	lw	a3,44(sp)
    eb7c:	1b010b93          	addi	s7,sp,432
    eb80:	00f9f793          	andi	a5,s3,15
    eb84:	00f687b3          	add	a5,a3,a5
    eb88:	0007c703          	lbu	a4,0(a5)
    eb8c:	0049d993          	srli	s3,s3,0x4
    eb90:	01cc1793          	slli	a5,s8,0x1c
    eb94:	0137e9b3          	or	s3,a5,s3
    eb98:	004c5c13          	srli	s8,s8,0x4
    eb9c:	feeb8fa3          	sb	a4,-1(s7)
    eba0:	0189e7b3          	or	a5,s3,s8
    eba4:	fffb8b93          	addi	s7,s7,-1
    eba8:	fc079ce3          	bnez	a5,eb80 <_vfprintf_r+0xd24>
    ebac:	1b010793          	addi	a5,sp,432
    ebb0:	417789b3          	sub	s3,a5,s7
    ebb4:	000d0b13          	mv	s6,s10
    ebb8:	c81ff06f          	j	e838 <_vfprintf_r+0x9dc>
    ebbc:	41830d33          	sub	s10,t1,s8
    ebc0:	d7a05463          	blez	s10,e128 <_vfprintf_r+0x2cc>
    ebc4:	01000513          	li	a0,16
    ebc8:	0ec12583          	lw	a1,236(sp)
    ebcc:	0e812603          	lw	a2,232(sp)
    ebd0:	00015a97          	auipc	s5,0x15
    ebd4:	c18a8a93          	addi	s5,s5,-1000 # 237e8 <zeroes.0>
    ebd8:	09a55c63          	bge	a0,s10,ec70 <_vfprintf_r+0xe14>
    ebdc:	00040793          	mv	a5,s0
    ebe0:	000a8a13          	mv	s4,s5
    ebe4:	01000e93          	li	t4,16
    ebe8:	00098a93          	mv	s5,s3
    ebec:	00700f93          	li	t6,7
    ebf0:	00090993          	mv	s3,s2
    ebf4:	00088413          	mv	s0,a7
    ebf8:	00030913          	mv	s2,t1
    ebfc:	00c0006f          	j	ec08 <_vfprintf_r+0xdac>
    ec00:	ff0d0d13          	addi	s10,s10,-16
    ec04:	05aeda63          	bge	t4,s10,ec58 <_vfprintf_r+0xdfc>
    ec08:	01058593          	addi	a1,a1,16
    ec0c:	00160613          	addi	a2,a2,1
    ec10:	0147a023          	sw	s4,0(a5)
    ec14:	01d7a223          	sw	t4,4(a5)
    ec18:	0eb12623          	sw	a1,236(sp)
    ec1c:	0ec12423          	sw	a2,232(sp)
    ec20:	00878793          	addi	a5,a5,8
    ec24:	fccfdee3          	bge	t6,a2,ec00 <_vfprintf_r+0xda4>
    ec28:	00412503          	lw	a0,4(sp)
    ec2c:	0e410613          	addi	a2,sp,228
    ec30:	000d8593          	mv	a1,s11
    ec34:	4a50b0ef          	jal	ra,1a8d8 <__sprint_r>
    ec38:	18051063          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    ec3c:	01000e93          	li	t4,16
    ec40:	ff0d0d13          	addi	s10,s10,-16
    ec44:	0ec12583          	lw	a1,236(sp)
    ec48:	0e812603          	lw	a2,232(sp)
    ec4c:	10c10793          	addi	a5,sp,268
    ec50:	00700f93          	li	t6,7
    ec54:	fbaecae3          	blt	t4,s10,ec08 <_vfprintf_r+0xdac>
    ec58:	00040893          	mv	a7,s0
    ec5c:	00090313          	mv	t1,s2
    ec60:	00078413          	mv	s0,a5
    ec64:	00098913          	mv	s2,s3
    ec68:	000a8993          	mv	s3,s5
    ec6c:	000a0a93          	mv	s5,s4
    ec70:	00bd05b3          	add	a1,s10,a1
    ec74:	00160613          	addi	a2,a2,1
    ec78:	01542023          	sw	s5,0(s0)
    ec7c:	01a42223          	sw	s10,4(s0)
    ec80:	0eb12623          	sw	a1,236(sp)
    ec84:	0ec12423          	sw	a2,232(sp)
    ec88:	00700693          	li	a3,7
    ec8c:	00840413          	addi	s0,s0,8
    ec90:	c8c6dc63          	bge	a3,a2,e128 <_vfprintf_r+0x2cc>
    ec94:	00412503          	lw	a0,4(sp)
    ec98:	0e410613          	addi	a2,sp,228
    ec9c:	000d8593          	mv	a1,s11
    eca0:	04612223          	sw	t1,68(sp)
    eca4:	03112e23          	sw	a7,60(sp)
    eca8:	4310b0ef          	jal	ra,1a8d8 <__sprint_r>
    ecac:	10051663          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    ecb0:	04412303          	lw	t1,68(sp)
    ecb4:	03c12883          	lw	a7,60(sp)
    ecb8:	10c10413          	addi	s0,sp,268
    ecbc:	c6cff06f          	j	e128 <_vfprintf_r+0x2cc>
    ecc0:	0ec12603          	lw	a2,236(sp)
    ecc4:	0e812683          	lw	a3,232(sp)
    ecc8:	00015a97          	auipc	s5,0x15
    eccc:	b20a8a93          	addi	s5,s5,-1248 # 237e8 <zeroes.0>
    ecd0:	092cd263          	bge	s9,s2,ed54 <_vfprintf_r+0xef8>
    ecd4:	00040793          	mv	a5,s0
    ecd8:	00090a13          	mv	s4,s2
    ecdc:	00700d13          	li	s10,7
    ece0:	00088413          	mv	s0,a7
    ece4:	00030913          	mv	s2,t1
    ece8:	00c0006f          	j	ecf4 <_vfprintf_r+0xe98>
    ecec:	ff0a0a13          	addi	s4,s4,-16
    ecf0:	054cda63          	bge	s9,s4,ed44 <_vfprintf_r+0xee8>
    ecf4:	01060613          	addi	a2,a2,16
    ecf8:	00168693          	addi	a3,a3,1
    ecfc:	00015717          	auipc	a4,0x15
    ed00:	aec70713          	addi	a4,a4,-1300 # 237e8 <zeroes.0>
    ed04:	00e7a023          	sw	a4,0(a5)
    ed08:	0197a223          	sw	s9,4(a5)
    ed0c:	0ec12623          	sw	a2,236(sp)
    ed10:	0ed12423          	sw	a3,232(sp)
    ed14:	00878793          	addi	a5,a5,8
    ed18:	fcdd5ae3          	bge	s10,a3,ecec <_vfprintf_r+0xe90>
    ed1c:	00412503          	lw	a0,4(sp)
    ed20:	0e410613          	addi	a2,sp,228
    ed24:	000d8593          	mv	a1,s11
    ed28:	3b10b0ef          	jal	ra,1a8d8 <__sprint_r>
    ed2c:	08051663          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    ed30:	ff0a0a13          	addi	s4,s4,-16
    ed34:	0ec12603          	lw	a2,236(sp)
    ed38:	0e812683          	lw	a3,232(sp)
    ed3c:	10c10793          	addi	a5,sp,268
    ed40:	fb4ccae3          	blt	s9,s4,ecf4 <_vfprintf_r+0xe98>
    ed44:	00040893          	mv	a7,s0
    ed48:	00090313          	mv	t1,s2
    ed4c:	00078413          	mv	s0,a5
    ed50:	000a0913          	mv	s2,s4
    ed54:	00c90633          	add	a2,s2,a2
    ed58:	00168693          	addi	a3,a3,1
    ed5c:	01542023          	sw	s5,0(s0)
    ed60:	01242223          	sw	s2,4(s0)
    ed64:	0ec12623          	sw	a2,236(sp)
    ed68:	0ed12423          	sw	a3,232(sp)
    ed6c:	00700613          	li	a2,7
    ed70:	00840413          	addi	s0,s0,8
    ed74:	bad65e63          	bge	a2,a3,e130 <_vfprintf_r+0x2d4>
    ed78:	00412503          	lw	a0,4(sp)
    ed7c:	0e410613          	addi	a2,sp,228
    ed80:	000d8593          	mv	a1,s11
    ed84:	04612223          	sw	t1,68(sp)
    ed88:	03112e23          	sw	a7,60(sp)
    ed8c:	34d0b0ef          	jal	ra,1a8d8 <__sprint_r>
    ed90:	02051463          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    ed94:	04412303          	lw	t1,68(sp)
    ed98:	03c12883          	lw	a7,60(sp)
    ed9c:	10c10413          	addi	s0,sp,268
    eda0:	b90ff06f          	j	e130 <_vfprintf_r+0x2d4>
    eda4:	00412503          	lw	a0,4(sp)
    eda8:	0e410613          	addi	a2,sp,228
    edac:	000d8593          	mv	a1,s11
    edb0:	3290b0ef          	jal	ra,1a8d8 <__sprint_r>
    edb4:	bc050c63          	beqz	a0,e18c <_vfprintf_r+0x330>
    edb8:	00c12583          	lw	a1,12(sp)
    edbc:	c0058463          	beqz	a1,e1c4 <_vfprintf_r+0x368>
    edc0:	00412503          	lw	a0,4(sp)
    edc4:	439020ef          	jal	ra,119fc <_free_r>
    edc8:	064da703          	lw	a4,100(s11)
    edcc:	00cd9783          	lh	a5,12(s11)
    edd0:	00177713          	andi	a4,a4,1
    edd4:	c0071063          	bnez	a4,e1d4 <_vfprintf_r+0x378>
    edd8:	84dff06f          	j	e624 <_vfprintf_r+0x7c8>
    eddc:	01000513          	li	a0,16
    ede0:	0ec12583          	lw	a1,236(sp)
    ede4:	0e812603          	lw	a2,232(sp)
    ede8:	00015a97          	auipc	s5,0x15
    edec:	9f0a8a93          	addi	s5,s5,-1552 # 237d8 <blanks.1>
    edf0:	0ad55863          	bge	a0,a3,eea0 <_vfprintf_r+0x1044>
    edf4:	02912e23          	sw	s1,60(sp)
    edf8:	00040793          	mv	a5,s0
    edfc:	000a8493          	mv	s1,s5
    ee00:	01000e13          	li	t3,16
    ee04:	00098a93          	mv	s5,s3
    ee08:	00700393          	li	t2,7
    ee0c:	00090993          	mv	s3,s2
    ee10:	00028a13          	mv	s4,t0
    ee14:	05112223          	sw	a7,68(sp)
    ee18:	00068413          	mv	s0,a3
    ee1c:	00030913          	mv	s2,t1
    ee20:	00c0006f          	j	ee2c <_vfprintf_r+0xfd0>
    ee24:	ff040413          	addi	s0,s0,-16
    ee28:	048e5a63          	bge	t3,s0,ee7c <_vfprintf_r+0x1020>
    ee2c:	01058593          	addi	a1,a1,16
    ee30:	00160613          	addi	a2,a2,1
    ee34:	0097a023          	sw	s1,0(a5)
    ee38:	01c7a223          	sw	t3,4(a5)
    ee3c:	0eb12623          	sw	a1,236(sp)
    ee40:	0ec12423          	sw	a2,232(sp)
    ee44:	00878793          	addi	a5,a5,8
    ee48:	fcc3dee3          	bge	t2,a2,ee24 <_vfprintf_r+0xfc8>
    ee4c:	00412503          	lw	a0,4(sp)
    ee50:	0e410613          	addi	a2,sp,228
    ee54:	000d8593          	mv	a1,s11
    ee58:	2810b0ef          	jal	ra,1a8d8 <__sprint_r>
    ee5c:	f4051ee3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    ee60:	01000e13          	li	t3,16
    ee64:	ff040413          	addi	s0,s0,-16
    ee68:	0ec12583          	lw	a1,236(sp)
    ee6c:	0e812603          	lw	a2,232(sp)
    ee70:	10c10793          	addi	a5,sp,268
    ee74:	00700393          	li	t2,7
    ee78:	fa8e4ae3          	blt	t3,s0,ee2c <_vfprintf_r+0xfd0>
    ee7c:	00090313          	mv	t1,s2
    ee80:	04412883          	lw	a7,68(sp)
    ee84:	00098913          	mv	s2,s3
    ee88:	000a8993          	mv	s3,s5
    ee8c:	00048a93          	mv	s5,s1
    ee90:	03c12483          	lw	s1,60(sp)
    ee94:	00040693          	mv	a3,s0
    ee98:	000a0293          	mv	t0,s4
    ee9c:	00078413          	mv	s0,a5
    eea0:	00b685b3          	add	a1,a3,a1
    eea4:	00160613          	addi	a2,a2,1
    eea8:	00d42223          	sw	a3,4(s0)
    eeac:	01542023          	sw	s5,0(s0)
    eeb0:	0eb12623          	sw	a1,236(sp)
    eeb4:	0ec12423          	sw	a2,232(sp)
    eeb8:	00700693          	li	a3,7
    eebc:	00840413          	addi	s0,s0,8
    eec0:	9ec6d663          	bge	a3,a2,e0ac <_vfprintf_r+0x250>
    eec4:	00412503          	lw	a0,4(sp)
    eec8:	0e410613          	addi	a2,sp,228
    eecc:	000d8593          	mv	a1,s11
    eed0:	04612423          	sw	t1,72(sp)
    eed4:	05112223          	sw	a7,68(sp)
    eed8:	02512e23          	sw	t0,60(sp)
    eedc:	1fd0b0ef          	jal	ra,1a8d8 <__sprint_r>
    eee0:	ec051ce3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    eee4:	04812303          	lw	t1,72(sp)
    eee8:	04412883          	lw	a7,68(sp)
    eeec:	03c12283          	lw	t0,60(sp)
    eef0:	10c10413          	addi	s0,sp,268
    eef4:	9b8ff06f          	j	e0ac <_vfprintf_r+0x250>
    eef8:	00412503          	lw	a0,4(sp)
    eefc:	0e410613          	addi	a2,sp,228
    ef00:	000d8593          	mv	a1,s11
    ef04:	04612223          	sw	t1,68(sp)
    ef08:	03112e23          	sw	a7,60(sp)
    ef0c:	1cd0b0ef          	jal	ra,1a8d8 <__sprint_r>
    ef10:	ea0514e3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    ef14:	04412303          	lw	t1,68(sp)
    ef18:	03c12883          	lw	a7,60(sp)
    ef1c:	10c10413          	addi	s0,sp,268
    ef20:	a00ff06f          	j	e120 <_vfprintf_r+0x2c4>
    ef24:	0cc12583          	lw	a1,204(sp)
    ef28:	36b05263          	blez	a1,f28c <_vfprintf_r+0x1430>
    ef2c:	01812783          	lw	a5,24(sp)
    ef30:	01412703          	lw	a4,20(sp)
    ef34:	00fb8a33          	add	s4,s7,a5
    ef38:	00078913          	mv	s2,a5
    ef3c:	00f75463          	bge	a4,a5,ef44 <_vfprintf_r+0x10e8>
    ef40:	00070913          	mv	s2,a4
    ef44:	0ec12683          	lw	a3,236(sp)
    ef48:	03205863          	blez	s2,ef78 <_vfprintf_r+0x111c>
    ef4c:	0e812603          	lw	a2,232(sp)
    ef50:	012686b3          	add	a3,a3,s2
    ef54:	01742023          	sw	s7,0(s0)
    ef58:	00160613          	addi	a2,a2,1
    ef5c:	01242223          	sw	s2,4(s0)
    ef60:	0ed12623          	sw	a3,236(sp)
    ef64:	0ec12423          	sw	a2,232(sp)
    ef68:	00700593          	li	a1,7
    ef6c:	00840413          	addi	s0,s0,8
    ef70:	00c5d463          	bge	a1,a2,ef78 <_vfprintf_r+0x111c>
    ef74:	5780106f          	j	104ec <_vfprintf_r+0x2690>
    ef78:	fff94613          	not	a2,s2
    ef7c:	01412783          	lw	a5,20(sp)
    ef80:	41f65613          	srai	a2,a2,0x1f
    ef84:	00c978b3          	and	a7,s2,a2
    ef88:	41178933          	sub	s2,a5,a7
    ef8c:	19204ce3          	bgtz	s2,f924 <_vfprintf_r+0x1ac8>
    ef90:	01412783          	lw	a5,20(sp)
    ef94:	400b7613          	andi	a2,s6,1024
    ef98:	00fb8bb3          	add	s7,s7,a5
    ef9c:	00060463          	beqz	a2,efa4 <_vfprintf_r+0x1148>
    efa0:	2d40106f          	j	10274 <_vfprintf_r+0x2418>
    efa4:	0cc12583          	lw	a1,204(sp)
    efa8:	01812783          	lw	a5,24(sp)
    efac:	00f5c663          	blt	a1,a5,efb8 <_vfprintf_r+0x115c>
    efb0:	001b7613          	andi	a2,s6,1
    efb4:	420602e3          	beqz	a2,fbd8 <_vfprintf_r+0x1d7c>
    efb8:	02412783          	lw	a5,36(sp)
    efbc:	0e812603          	lw	a2,232(sp)
    efc0:	02812703          	lw	a4,40(sp)
    efc4:	00d786b3          	add	a3,a5,a3
    efc8:	00160613          	addi	a2,a2,1
    efcc:	00e42023          	sw	a4,0(s0)
    efd0:	00f42223          	sw	a5,4(s0)
    efd4:	0ed12623          	sw	a3,236(sp)
    efd8:	0ec12423          	sw	a2,232(sp)
    efdc:	00700513          	li	a0,7
    efe0:	00840413          	addi	s0,s0,8
    efe4:	00c55463          	bge	a0,a2,efec <_vfprintf_r+0x1190>
    efe8:	53c0106f          	j	10524 <_vfprintf_r+0x26c8>
    efec:	01812783          	lw	a5,24(sp)
    eff0:	417a0933          	sub	s2,s4,s7
    eff4:	40b785b3          	sub	a1,a5,a1
    eff8:	0125d463          	bge	a1,s2,f000 <_vfprintf_r+0x11a4>
    effc:	00058913          	mv	s2,a1
    f000:	03205863          	blez	s2,f030 <_vfprintf_r+0x11d4>
    f004:	0e812783          	lw	a5,232(sp)
    f008:	012686b3          	add	a3,a3,s2
    f00c:	01742023          	sw	s7,0(s0)
    f010:	00178793          	addi	a5,a5,1
    f014:	01242223          	sw	s2,4(s0)
    f018:	0ed12623          	sw	a3,236(sp)
    f01c:	0ef12423          	sw	a5,232(sp)
    f020:	00700613          	li	a2,7
    f024:	00840413          	addi	s0,s0,8
    f028:	00f65463          	bge	a2,a5,f030 <_vfprintf_r+0x11d4>
    f02c:	5540106f          	j	10580 <_vfprintf_r+0x2724>
    f030:	fff94793          	not	a5,s2
    f034:	41f7d793          	srai	a5,a5,0x1f
    f038:	00f979b3          	and	s3,s2,a5
    f03c:	41358933          	sub	s2,a1,s3
    f040:	93205263          	blez	s2,e164 <_vfprintf_r+0x308>
    f044:	01000613          	li	a2,16
    f048:	0e812783          	lw	a5,232(sp)
    f04c:	00014a97          	auipc	s5,0x14
    f050:	79ca8a93          	addi	s5,s5,1948 # 237e8 <zeroes.0>
    f054:	012652e3          	bge	a2,s2,f858 <_vfprintf_r+0x19fc>
    f058:	00412a03          	lw	s4,4(sp)
    f05c:	01000993          	li	s3,16
    f060:	00700d13          	li	s10,7
    f064:	00030b93          	mv	s7,t1
    f068:	00c0006f          	j	f074 <_vfprintf_r+0x1218>
    f06c:	ff090913          	addi	s2,s2,-16
    f070:	7f29d263          	bge	s3,s2,f854 <_vfprintf_r+0x19f8>
    f074:	01068693          	addi	a3,a3,16
    f078:	00178793          	addi	a5,a5,1
    f07c:	01542023          	sw	s5,0(s0)
    f080:	01342223          	sw	s3,4(s0)
    f084:	0ed12623          	sw	a3,236(sp)
    f088:	0ef12423          	sw	a5,232(sp)
    f08c:	00840413          	addi	s0,s0,8
    f090:	fcfd5ee3          	bge	s10,a5,f06c <_vfprintf_r+0x1210>
    f094:	0e410613          	addi	a2,sp,228
    f098:	000d8593          	mv	a1,s11
    f09c:	000a0513          	mv	a0,s4
    f0a0:	0390b0ef          	jal	ra,1a8d8 <__sprint_r>
    f0a4:	d0051ae3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f0a8:	0ec12683          	lw	a3,236(sp)
    f0ac:	0e812783          	lw	a5,232(sp)
    f0b0:	10c10413          	addi	s0,sp,268
    f0b4:	fb9ff06f          	j	f06c <_vfprintf_r+0x1210>
    f0b8:	001b7693          	andi	a3,s6,1
    f0bc:	b6069e63          	bnez	a3,e438 <_vfprintf_r+0x5dc>
    f0c0:	0e812783          	lw	a5,232(sp)
    f0c4:	0ec12683          	lw	a3,236(sp)
    f0c8:	01742023          	sw	s7,0(s0)
    f0cc:	00178913          	addi	s2,a5,1
    f0d0:	00168d13          	addi	s10,a3,1
    f0d4:	00c42223          	sw	a2,4(s0)
    f0d8:	0fa12623          	sw	s10,236(sp)
    f0dc:	0f212423          	sw	s2,232(sp)
    f0e0:	00700793          	li	a5,7
    f0e4:	c327d663          	bge	a5,s2,e510 <_vfprintf_r+0x6b4>
    f0e8:	00412503          	lw	a0,4(sp)
    f0ec:	0e410613          	addi	a2,sp,228
    f0f0:	000d8593          	mv	a1,s11
    f0f4:	00612a23          	sw	t1,20(sp)
    f0f8:	7e00b0ef          	jal	ra,1a8d8 <__sprint_r>
    f0fc:	ca051ee3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f100:	0ec12d03          	lw	s10,236(sp)
    f104:	0e812903          	lw	s2,232(sp)
    f108:	01412303          	lw	t1,20(sp)
    f10c:	10c10993          	addi	s3,sp,268
    f110:	c00ff06f          	j	e510 <_vfprintf_r+0x6b4>
    f114:	01812703          	lw	a4,24(sp)
    f118:	00100793          	li	a5,1
    f11c:	bee7da63          	bge	a5,a4,e510 <_vfprintf_r+0x6b4>
    f120:	01100793          	li	a5,17
    f124:	00014a97          	auipc	s5,0x14
    f128:	6c4a8a93          	addi	s5,s5,1732 # 237e8 <zeroes.0>
    f12c:	06e7dee3          	bge	a5,a4,f9a8 <_vfprintf_r+0x1b4c>
    f130:	000a8a13          	mv	s4,s5
    f134:	01000793          	li	a5,16
    f138:	00700b93          	li	s7,7
    f13c:	00030a93          	mv	s5,t1
    f140:	00c0006f          	j	f14c <_vfprintf_r+0x12f0>
    f144:	ff040413          	addi	s0,s0,-16
    f148:	0487dce3          	bge	a5,s0,f9a0 <_vfprintf_r+0x1b44>
    f14c:	010d0d13          	addi	s10,s10,16
    f150:	00190913          	addi	s2,s2,1
    f154:	0149a023          	sw	s4,0(s3)
    f158:	00f9a223          	sw	a5,4(s3)
    f15c:	0fa12623          	sw	s10,236(sp)
    f160:	0f212423          	sw	s2,232(sp)
    f164:	00898993          	addi	s3,s3,8
    f168:	fd2bdee3          	bge	s7,s2,f144 <_vfprintf_r+0x12e8>
    f16c:	00412503          	lw	a0,4(sp)
    f170:	0e410613          	addi	a2,sp,228
    f174:	000d8593          	mv	a1,s11
    f178:	7600b0ef          	jal	ra,1a8d8 <__sprint_r>
    f17c:	c2051ee3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f180:	0ec12d03          	lw	s10,236(sp)
    f184:	0e812903          	lw	s2,232(sp)
    f188:	10c10993          	addi	s3,sp,268
    f18c:	01000793          	li	a5,16
    f190:	fb5ff06f          	j	f144 <_vfprintf_r+0x12e8>
    f194:	01012703          	lw	a4,16(sp)
    f198:	010b7793          	andi	a5,s6,16
    f19c:	00072983          	lw	s3,0(a4)
    f1a0:	00470713          	addi	a4,a4,4
    f1a4:	00e12823          	sw	a4,16(sp)
    f1a8:	18079c63          	bnez	a5,f340 <_vfprintf_r+0x14e4>
    f1ac:	040b7793          	andi	a5,s6,64
    f1b0:	18078463          	beqz	a5,f338 <_vfprintf_r+0x14dc>
    f1b4:	01099993          	slli	s3,s3,0x10
    f1b8:	0109d993          	srli	s3,s3,0x10
    f1bc:	00000c13          	li	s8,0
    f1c0:	e40ff06f          	j	e800 <_vfprintf_r+0x9a4>
    f1c4:	01012703          	lw	a4,16(sp)
    f1c8:	010b7793          	andi	a5,s6,16
    f1cc:	00072983          	lw	s3,0(a4)
    f1d0:	00470713          	addi	a4,a4,4
    f1d4:	00e12823          	sw	a4,16(sp)
    f1d8:	16079c63          	bnez	a5,f350 <_vfprintf_r+0x14f4>
    f1dc:	040b7793          	andi	a5,s6,64
    f1e0:	16078463          	beqz	a5,f348 <_vfprintf_r+0x14ec>
    f1e4:	01099993          	slli	s3,s3,0x10
    f1e8:	4109d993          	srai	s3,s3,0x10
    f1ec:	41f9dc13          	srai	s8,s3,0x1f
    f1f0:	000c0793          	mv	a5,s8
    f1f4:	f607d463          	bgez	a5,e95c <_vfprintf_r+0xb00>
    f1f8:	013037b3          	snez	a5,s3
    f1fc:	41800c33          	neg	s8,s8
    f200:	40fc0c33          	sub	s8,s8,a5
    f204:	413009b3          	neg	s3,s3
    f208:	000b0d13          	mv	s10,s6
    f20c:	02d00793          	li	a5,45
    f210:	00100693          	li	a3,1
    f214:	df8ff06f          	j	e80c <_vfprintf_r+0x9b0>
    f218:	01012703          	lw	a4,16(sp)
    f21c:	010d7793          	andi	a5,s10,16
    f220:	00072983          	lw	s3,0(a4)
    f224:	00470713          	addi	a4,a4,4
    f228:	00e12823          	sw	a4,16(sp)
    f22c:	10079063          	bnez	a5,f32c <_vfprintf_r+0x14d0>
    f230:	040d7793          	andi	a5,s10,64
    f234:	0e078663          	beqz	a5,f320 <_vfprintf_r+0x14c4>
    f238:	01099993          	slli	s3,s3,0x10
    f23c:	0109d993          	srli	s3,s3,0x10
    f240:	00000c13          	li	s8,0
    f244:	00100693          	li	a3,1
    f248:	dc0ff06f          	j	e808 <_vfprintf_r+0x9ac>
    f24c:	00000993          	li	s3,0
    f250:	1b010b93          	addi	s7,sp,432
    f254:	de4ff06f          	j	e838 <_vfprintf_r+0x9dc>
    f258:	001b7793          	andi	a5,s6,1
    f25c:	00079463          	bnez	a5,f264 <_vfprintf_r+0x1408>
    f260:	f05fe06f          	j	e164 <_vfprintf_r+0x308>
    f264:	fdcff06f          	j	ea40 <_vfprintf_r+0xbe4>
    f268:	058da503          	lw	a0,88(s11)
    f26c:	52d050ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
    f270:	00cd9783          	lh	a5,12(s11)
    f274:	c85fe06f          	j	def8 <_vfprintf_r+0x9c>
    f278:	000a0313          	mv	t1,s4
    f27c:	eb4ff06f          	j	e930 <_vfprintf_r+0xad4>
    f280:	0004c883          	lbu	a7,0(s1)
    f284:	00f12823          	sw	a5,16(sp)
    f288:	d7dfe06f          	j	e004 <_vfprintf_r+0x1a8>
    f28c:	0ec12683          	lw	a3,236(sp)
    f290:	0e812603          	lw	a2,232(sp)
    f294:	00014517          	auipc	a0,0x14
    f298:	33c50513          	addi	a0,a0,828 # 235d0 <__flash_rodata_start+0x180>
    f29c:	00a42023          	sw	a0,0(s0)
    f2a0:	00168693          	addi	a3,a3,1
    f2a4:	00100513          	li	a0,1
    f2a8:	00160613          	addi	a2,a2,1
    f2ac:	00a42223          	sw	a0,4(s0)
    f2b0:	0ed12623          	sw	a3,236(sp)
    f2b4:	0ec12423          	sw	a2,232(sp)
    f2b8:	00700513          	li	a0,7
    f2bc:	00840413          	addi	s0,s0,8
    f2c0:	0cc54ae3          	blt	a0,a2,fb94 <_vfprintf_r+0x1d38>
    f2c4:	6e059a63          	bnez	a1,f9b8 <_vfprintf_r+0x1b5c>
    f2c8:	01812783          	lw	a5,24(sp)
    f2cc:	001b7613          	andi	a2,s6,1
    f2d0:	00f66633          	or	a2,a2,a5
    f2d4:	00061463          	bnez	a2,f2dc <_vfprintf_r+0x1480>
    f2d8:	e8dfe06f          	j	e164 <_vfprintf_r+0x308>
    f2dc:	02412783          	lw	a5,36(sp)
    f2e0:	0e812603          	lw	a2,232(sp)
    f2e4:	02812703          	lw	a4,40(sp)
    f2e8:	00d786b3          	add	a3,a5,a3
    f2ec:	00160613          	addi	a2,a2,1
    f2f0:	00e42023          	sw	a4,0(s0)
    f2f4:	00f42223          	sw	a5,4(s0)
    f2f8:	0ed12623          	sw	a3,236(sp)
    f2fc:	0ec12423          	sw	a2,232(sp)
    f300:	00700593          	li	a1,7
    f304:	28c5cee3          	blt	a1,a2,fda0 <_vfprintf_r+0x1f44>
    f308:	00840413          	addi	s0,s0,8
    f30c:	6e00006f          	j	f9ec <_vfprintf_r+0x1b90>
    f310:	03000793          	li	a5,48
    f314:	1af107a3          	sb	a5,431(sp)
    f318:	1af10b93          	addi	s7,sp,431
    f31c:	d1cff06f          	j	e838 <_vfprintf_r+0x9dc>
    f320:	200d7793          	andi	a5,s10,512
    f324:	00078463          	beqz	a5,f32c <_vfprintf_r+0x14d0>
    f328:	0ff9f993          	zext.b	s3,s3
    f32c:	00000c13          	li	s8,0
    f330:	00100693          	li	a3,1
    f334:	cd4ff06f          	j	e808 <_vfprintf_r+0x9ac>
    f338:	200b7793          	andi	a5,s6,512
    f33c:	0c0792e3          	bnez	a5,fc00 <_vfprintf_r+0x1da4>
    f340:	00000c13          	li	s8,0
    f344:	cbcff06f          	j	e800 <_vfprintf_r+0x9a4>
    f348:	200b7793          	andi	a5,s6,512
    f34c:	0a0790e3          	bnez	a5,fbec <_vfprintf_r+0x1d90>
    f350:	41f9dc13          	srai	s8,s3,0x1f
    f354:	000c0793          	mv	a5,s8
    f358:	e00ff06f          	j	e958 <_vfprintf_r+0xafc>
    f35c:	010b7793          	andi	a5,s6,16
    f360:	5a079863          	bnez	a5,f910 <_vfprintf_r+0x1ab4>
    f364:	040b7793          	andi	a5,s6,64
    f368:	0a0798e3          	bnez	a5,fc18 <_vfprintf_r+0x1dbc>
    f36c:	200b7713          	andi	a4,s6,512
    f370:	5a070063          	beqz	a4,f910 <_vfprintf_r+0x1ab4>
    f374:	01012783          	lw	a5,16(sp)
    f378:	00812703          	lw	a4,8(sp)
    f37c:	0007a783          	lw	a5,0(a5)
    f380:	00e78023          	sb	a4,0(a5)
    f384:	d7cff06f          	j	e900 <_vfprintf_r+0xaa4>
    f388:	01012783          	lw	a5,16(sp)
    f38c:	0007a683          	lw	a3,0(a5)
    f390:	00478793          	addi	a5,a5,4
    f394:	00f12823          	sw	a5,16(sp)
    f398:	0006a803          	lw	a6,0(a3)
    f39c:	0046a583          	lw	a1,4(a3)
    f3a0:	0086a603          	lw	a2,8(a3)
    f3a4:	00c6a683          	lw	a3,12(a3)
    f3a8:	fa1fe06f          	j	e348 <_vfprintf_r+0x4ec>
    f3ac:	03412783          	lw	a5,52(sp)
    f3b0:	0004c883          	lbu	a7,0(s1)
    f3b4:	00079463          	bnez	a5,f3bc <_vfprintf_r+0x1560>
    f3b8:	c4dfe06f          	j	e004 <_vfprintf_r+0x1a8>
    f3bc:	0007c783          	lbu	a5,0(a5)
    f3c0:	00079463          	bnez	a5,f3c8 <_vfprintf_r+0x156c>
    f3c4:	c41fe06f          	j	e004 <_vfprintf_r+0x1a8>
    f3c8:	400b6b13          	ori	s6,s6,1024
    f3cc:	c39fe06f          	j	e004 <_vfprintf_r+0x1a8>
    f3d0:	00014797          	auipc	a5,0x14
    f3d4:	1e478793          	addi	a5,a5,484 # 235b4 <__flash_rodata_start+0x164>
    f3d8:	000a0313          	mv	t1,s4
    f3dc:	02f12623          	sw	a5,44(sp)
    f3e0:	020b7793          	andi	a5,s6,32
    f3e4:	2a078463          	beqz	a5,f68c <_vfprintf_r+0x1830>
    f3e8:	01012783          	lw	a5,16(sp)
    f3ec:	00778a93          	addi	s5,a5,7
    f3f0:	ff8afa93          	andi	s5,s5,-8
    f3f4:	000aa983          	lw	s3,0(s5)
    f3f8:	004aac03          	lw	s8,4(s5)
    f3fc:	008a8793          	addi	a5,s5,8
    f400:	00f12823          	sw	a5,16(sp)
    f404:	001b7793          	andi	a5,s6,1
    f408:	00078e63          	beqz	a5,f424 <_vfprintf_r+0x15c8>
    f40c:	0189e7b3          	or	a5,s3,s8
    f410:	00078a63          	beqz	a5,f424 <_vfprintf_r+0x15c8>
    f414:	03000793          	li	a5,48
    f418:	0cf10423          	sb	a5,200(sp)
    f41c:	0d1104a3          	sb	a7,201(sp)
    f420:	002b6b13          	ori	s6,s6,2
    f424:	bffb7d13          	andi	s10,s6,-1025
    f428:	00200693          	li	a3,2
    f42c:	bdcff06f          	j	e808 <_vfprintf_r+0x9ac>
    f430:	000a0313          	mv	t1,s4
    f434:	000b0d13          	mv	s10,s6
    f438:	c30ff06f          	j	e868 <_vfprintf_r+0xa0c>
    f43c:	00412503          	lw	a0,4(sp)
    f440:	0e410613          	addi	a2,sp,228
    f444:	000d8593          	mv	a1,s11
    f448:	00612a23          	sw	t1,20(sp)
    f44c:	48c0b0ef          	jal	ra,1a8d8 <__sprint_r>
    f450:	960514e3          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f454:	0ec12683          	lw	a3,236(sp)
    f458:	01412303          	lw	t1,20(sp)
    f45c:	10c10413          	addi	s0,sp,268
    f460:	e10ff06f          	j	ea70 <_vfprintf_r+0xc14>
    f464:	00014797          	auipc	a5,0x14
    f468:	13c78793          	addi	a5,a5,316 # 235a0 <__flash_rodata_start+0x150>
    f46c:	000a0313          	mv	t1,s4
    f470:	02f12623          	sw	a5,44(sp)
    f474:	f6dff06f          	j	f3e0 <_vfprintf_r+0x1584>
    f478:	000a0313          	mv	t1,s4
    f47c:	b60ff06f          	j	e7dc <_vfprintf_r+0x980>
    f480:	0014c883          	lbu	a7,1(s1)
    f484:	200b6b13          	ori	s6,s6,512
    f488:	00148493          	addi	s1,s1,1
    f48c:	b79fe06f          	j	e004 <_vfprintf_r+0x1a8>
    f490:	0014c883          	lbu	a7,1(s1)
    f494:	020b6b13          	ori	s6,s6,32
    f498:	00148493          	addi	s1,s1,1
    f49c:	b69fe06f          	j	e004 <_vfprintf_r+0x1a8>
    f4a0:	00600793          	li	a5,6
    f4a4:	00090993          	mv	s3,s2
    f4a8:	7127ec63          	bltu	a5,s2,fbc0 <_vfprintf_r+0x1d64>
    f4ac:	00098c13          	mv	s8,s3
    f4b0:	01512823          	sw	s5,16(sp)
    f4b4:	00014b97          	auipc	s7,0x14
    f4b8:	114b8b93          	addi	s7,s7,276 # 235c8 <__flash_rodata_start+0x178>
    f4bc:	bc1fe06f          	j	e07c <_vfprintf_r+0x220>
    f4c0:	07800793          	li	a5,120
    f4c4:	03000693          	li	a3,48
    f4c8:	0cf104a3          	sb	a5,201(sp)
    f4cc:	002b6793          	ori	a5,s6,2
    f4d0:	0cd10423          	sb	a3,200(sp)
    f4d4:	02f12023          	sw	a5,32(sp)
    f4d8:	06300693          	li	a3,99
    f4dc:	00012623          	sw	zero,12(sp)
    f4e0:	14c10b93          	addi	s7,sp,332
    f4e4:	0f26cee3          	blt	a3,s2,fde0 <_vfprintf_r+0x1f84>
    f4e8:	0fc12d03          	lw	s10,252(sp)
    f4ec:	102b6793          	ori	a5,s6,258
    f4f0:	04f12623          	sw	a5,76(sp)
    f4f4:	06012023          	sw	zero,96(sp)
    f4f8:	0f012f03          	lw	t5,240(sp)
    f4fc:	0f412e83          	lw	t4,244(sp)
    f500:	0f812e03          	lw	t3,248(sp)
    f504:	080d44e3          	bltz	s10,fd8c <_vfprintf_r+0x1f30>
    f508:	06100713          	li	a4,97
    f50c:	00e89463          	bne	a7,a4,f514 <_vfprintf_r+0x16b8>
    f510:	2fc0106f          	j	1080c <_vfprintf_r+0x29b0>
    f514:	fbf88713          	addi	a4,a7,-65
    f518:	02500693          	li	a3,37
    f51c:	02e6e063          	bltu	a3,a4,f53c <_vfprintf_r+0x16e0>
    f520:	00014697          	auipc	a3,0x14
    f524:	22068693          	addi	a3,a3,544 # 23740 <__flash_rodata_start+0x2f0>
    f528:	00271713          	slli	a4,a4,0x2
    f52c:	00d70733          	add	a4,a4,a3
    f530:	00072703          	lw	a4,0(a4)
    f534:	00d70733          	add	a4,a4,a3
    f538:	00070067          	jr	a4
    f53c:	00090693          	mv	a3,s2
    f540:	00200613          	li	a2,2
    f544:	00412503          	lw	a0,4(sp)
    f548:	0b010993          	addi	s3,sp,176
    f54c:	0cc10713          	addi	a4,sp,204
    f550:	0dc10813          	addi	a6,sp,220
    f554:	0d010793          	addi	a5,sp,208
    f558:	00098593          	mv	a1,s3
    f55c:	04612423          	sw	t1,72(sp)
    f560:	05112223          	sw	a7,68(sp)
    f564:	02d12e23          	sw	a3,60(sp)
    f568:	0be12823          	sw	t5,176(sp)
    f56c:	01e12e23          	sw	t5,28(sp)
    f570:	0bd12a23          	sw	t4,180(sp)
    f574:	01d12c23          	sw	t4,24(sp)
    f578:	0bc12c23          	sw	t3,184(sp)
    f57c:	01c12a23          	sw	t3,20(sp)
    f580:	0ba12e23          	sw	s10,188(sp)
    f584:	650040ef          	jal	ra,13bd4 <_ldtoa_r>
    f588:	04412883          	lw	a7,68(sp)
    f58c:	06700713          	li	a4,103
    f590:	01412e03          	lw	t3,20(sp)
    f594:	01812e83          	lw	t4,24(sp)
    f598:	01c12f03          	lw	t5,28(sp)
    f59c:	03c12683          	lw	a3,60(sp)
    f5a0:	04812303          	lw	t1,72(sp)
    f5a4:	00050b93          	mv	s7,a0
    f5a8:	68e88263          	beq	a7,a4,fc2c <_vfprintf_r+0x1dd0>
    f5ac:	04700713          	li	a4,71
    f5b0:	66e88e63          	beq	a7,a4,fc2c <_vfprintf_r+0x1dd0>
    f5b4:	fdf8fa93          	andi	s5,a7,-33
    f5b8:	04600593          	li	a1,70
    f5bc:	00d50c33          	add	s8,a0,a3
    f5c0:	0a010b13          	addi	s6,sp,160
    f5c4:	00ba9c63          	bne	s5,a1,f5dc <_vfprintf_r+0x1780>
    f5c8:	00054503          	lbu	a0,0(a0)
    f5cc:	03000593          	li	a1,48
    f5d0:	02b50ee3          	beq	a0,a1,fe0c <_vfprintf_r+0x1fb0>
    f5d4:	0cc12683          	lw	a3,204(sp)
    f5d8:	00dc0c33          	add	s8,s8,a3
    f5dc:	000b0593          	mv	a1,s6
    f5e0:	00098513          	mv	a0,s3
    f5e4:	00612c23          	sw	t1,24(sp)
    f5e8:	01112a23          	sw	a7,20(sp)
    f5ec:	0be12823          	sw	t5,176(sp)
    f5f0:	0bd12a23          	sw	t4,180(sp)
    f5f4:	0bc12c23          	sw	t3,184(sp)
    f5f8:	0ba12e23          	sw	s10,188(sp)
    f5fc:	0a012023          	sw	zero,160(sp)
    f600:	0a012223          	sw	zero,164(sp)
    f604:	0a012423          	sw	zero,168(sp)
    f608:	0a012623          	sw	zero,172(sp)
    f60c:	0450f0ef          	jal	ra,1ee50 <__eqtf2>
    f610:	01412883          	lw	a7,20(sp)
    f614:	01812303          	lw	t1,24(sp)
    f618:	000c0b13          	mv	s6,s8
    f61c:	02050263          	beqz	a0,f640 <_vfprintf_r+0x17e4>
    f620:	0dc12b03          	lw	s6,220(sp)
    f624:	018b7e63          	bgeu	s6,s8,f640 <_vfprintf_r+0x17e4>
    f628:	03000593          	li	a1,48
    f62c:	001b0793          	addi	a5,s6,1
    f630:	0cf12e23          	sw	a5,220(sp)
    f634:	00bb0023          	sb	a1,0(s6)
    f638:	0dc12b03          	lw	s6,220(sp)
    f63c:	ff8b68e3          	bltu	s6,s8,f62c <_vfprintf_r+0x17d0>
    f640:	417b07b3          	sub	a5,s6,s7
    f644:	00f12c23          	sw	a5,24(sp)
    f648:	0cc12683          	lw	a3,204(sp)
    f64c:	04700713          	li	a4,71
    f650:	00d12a23          	sw	a3,20(sp)
    f654:	5eea8a63          	beq	s5,a4,fc48 <_vfprintf_r+0x1dec>
    f658:	04600713          	li	a4,70
    f65c:	00ea9463          	bne	s5,a4,f664 <_vfprintf_r+0x1808>
    f660:	0380106f          	j	10698 <_vfprintf_r+0x283c>
    f664:	fff68713          	addi	a4,a3,-1
    f668:	0ce12623          	sw	a4,204(sp)
    f66c:	06100613          	li	a2,97
    f670:	00c89463          	bne	a7,a2,f678 <_vfprintf_r+0x181c>
    f674:	3640106f          	j	109d8 <_vfprintf_r+0x2b7c>
    f678:	04100593          	li	a1,65
    f67c:	05000613          	li	a2,80
    f680:	5eb89263          	bne	a7,a1,fc64 <_vfprintf_r+0x1e08>
    f684:	00100593          	li	a1,1
    f688:	5e40006f          	j	fc6c <_vfprintf_r+0x1e10>
    f68c:	01012703          	lw	a4,16(sp)
    f690:	010b7793          	andi	a5,s6,16
    f694:	00072983          	lw	s3,0(a4)
    f698:	00470713          	addi	a4,a4,4
    f69c:	00e12823          	sw	a4,16(sp)
    f6a0:	06079e63          	bnez	a5,f71c <_vfprintf_r+0x18c0>
    f6a4:	040b7793          	andi	a5,s6,64
    f6a8:	06078663          	beqz	a5,f714 <_vfprintf_r+0x18b8>
    f6ac:	01099993          	slli	s3,s3,0x10
    f6b0:	0109d993          	srli	s3,s3,0x10
    f6b4:	00000c13          	li	s8,0
    f6b8:	d4dff06f          	j	f404 <_vfprintf_r+0x15a8>
    f6bc:	00412503          	lw	a0,4(sp)
    f6c0:	0e410613          	addi	a2,sp,228
    f6c4:	000d8593          	mv	a1,s11
    f6c8:	00612a23          	sw	t1,20(sp)
    f6cc:	20c0b0ef          	jal	ra,1a8d8 <__sprint_r>
    f6d0:	ee051463          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f6d4:	0ec12683          	lw	a3,236(sp)
    f6d8:	0e812903          	lw	s2,232(sp)
    f6dc:	01412303          	lw	t1,20(sp)
    f6e0:	10c10993          	addi	s3,sp,268
    f6e4:	d85fe06f          	j	e468 <_vfprintf_r+0x60c>
    f6e8:	00412503          	lw	a0,4(sp)
    f6ec:	0e410613          	addi	a2,sp,228
    f6f0:	000d8593          	mv	a1,s11
    f6f4:	00612a23          	sw	t1,20(sp)
    f6f8:	1e00b0ef          	jal	ra,1a8d8 <__sprint_r>
    f6fc:	ea051e63          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f700:	0ec12d03          	lw	s10,236(sp)
    f704:	0e812903          	lw	s2,232(sp)
    f708:	01412303          	lw	t1,20(sp)
    f70c:	10c10993          	addi	s3,sp,268
    f710:	d89fe06f          	j	e498 <_vfprintf_r+0x63c>
    f714:	200b7793          	andi	a5,s6,512
    f718:	4e079a63          	bnez	a5,fc0c <_vfprintf_r+0x1db0>
    f71c:	00000c13          	li	s8,0
    f720:	ce5ff06f          	j	f404 <_vfprintf_r+0x15a8>
    f724:	ccccdeb7          	lui	t4,0xccccd
    f728:	03412b83          	lw	s7,52(sp)
    f72c:	400d7f13          	andi	t5,s10,1024
    f730:	00000693          	li	a3,0
    f734:	1b010613          	addi	a2,sp,432
    f738:	00500e13          	li	t3,5
    f73c:	ccde8813          	addi	a6,t4,-819 # cccccccd <__alt_data_end+0xccc8cccd>
    f740:	ccce8b13          	addi	s6,t4,-820
    f744:	0ff00a93          	li	s5,255
    f748:	0540006f          	j	f79c <_vfprintf_r+0x1940>
    f74c:	013a37b3          	sltu	a5,s4,s3
    f750:	00fa07b3          	add	a5,s4,a5
    f754:	03c7f7b3          	remu	a5,a5,t3
    f758:	40f987b3          	sub	a5,s3,a5
    f75c:	00f9b633          	sltu	a2,s3,a5
    f760:	40cc0633          	sub	a2,s8,a2
    f764:	03678533          	mul	a0,a5,s6
    f768:	03060633          	mul	a2,a2,a6
    f76c:	0307b5b3          	mulhu	a1,a5,a6
    f770:	00a60633          	add	a2,a2,a0
    f774:	030787b3          	mul	a5,a5,a6
    f778:	00b60633          	add	a2,a2,a1
    f77c:	01f61593          	slli	a1,a2,0x1f
    f780:	00165613          	srli	a2,a2,0x1
    f784:	0017d793          	srli	a5,a5,0x1
    f788:	00f5e7b3          	or	a5,a1,a5
    f78c:	580c06e3          	beqz	s8,10518 <_vfprintf_r+0x26bc>
    f790:	00060c13          	mv	s8,a2
    f794:	00078993          	mv	s3,a5
    f798:	00070613          	mv	a2,a4
    f79c:	01898a33          	add	s4,s3,s8
    f7a0:	013a37b3          	sltu	a5,s4,s3
    f7a4:	00fa07b3          	add	a5,s4,a5
    f7a8:	03c7f7b3          	remu	a5,a5,t3
    f7ac:	fff60713          	addi	a4,a2,-1
    f7b0:	00168693          	addi	a3,a3,1
    f7b4:	40f987b3          	sub	a5,s3,a5
    f7b8:	00f9b5b3          	sltu	a1,s3,a5
    f7bc:	40bc05b3          	sub	a1,s8,a1
    f7c0:	0307b533          	mulhu	a0,a5,a6
    f7c4:	030585b3          	mul	a1,a1,a6
    f7c8:	030787b3          	mul	a5,a5,a6
    f7cc:	00a585b3          	add	a1,a1,a0
    f7d0:	01f59593          	slli	a1,a1,0x1f
    f7d4:	0017d793          	srli	a5,a5,0x1
    f7d8:	00f5e7b3          	or	a5,a1,a5
    f7dc:	00279593          	slli	a1,a5,0x2
    f7e0:	00f587b3          	add	a5,a1,a5
    f7e4:	00179793          	slli	a5,a5,0x1
    f7e8:	40f987b3          	sub	a5,s3,a5
    f7ec:	03078793          	addi	a5,a5,48
    f7f0:	fef60fa3          	sb	a5,-1(a2)
    f7f4:	f40f0ce3          	beqz	t5,f74c <_vfprintf_r+0x18f0>
    f7f8:	000bc783          	lbu	a5,0(s7)
    f7fc:	f4f698e3          	bne	a3,a5,f74c <_vfprintf_r+0x18f0>
    f800:	f55686e3          	beq	a3,s5,f74c <_vfprintf_r+0x18f0>
    f804:	2e0c1663          	bnez	s8,faf0 <_vfprintf_r+0x1c94>
    f808:	00900793          	li	a5,9
    f80c:	2f37e263          	bltu	a5,s3,faf0 <_vfprintf_r+0x1c94>
    f810:	03712a23          	sw	s7,52(sp)
    f814:	1b010793          	addi	a5,sp,432
    f818:	00070b93          	mv	s7,a4
    f81c:	00d12c23          	sw	a3,24(sp)
    f820:	417789b3          	sub	s3,a5,s7
    f824:	000d0b13          	mv	s6,s10
    f828:	810ff06f          	j	e838 <_vfprintf_r+0x9dc>
    f82c:	00412503          	lw	a0,4(sp)
    f830:	0e410613          	addi	a2,sp,228
    f834:	000d8593          	mv	a1,s11
    f838:	00612a23          	sw	t1,20(sp)
    f83c:	09c0b0ef          	jal	ra,1a8d8 <__sprint_r>
    f840:	d6051c63          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f844:	0ec12683          	lw	a3,236(sp)
    f848:	01412303          	lw	t1,20(sp)
    f84c:	10c10413          	addi	s0,sp,268
    f850:	9e4ff06f          	j	ea34 <_vfprintf_r+0xbd8>
    f854:	000b8313          	mv	t1,s7
    f858:	01542023          	sw	s5,0(s0)
    f85c:	01242223          	sw	s2,4(s0)
    f860:	012686b3          	add	a3,a3,s2
    f864:	00178793          	addi	a5,a5,1
    f868:	0ed12623          	sw	a3,236(sp)
    f86c:	0ef12423          	sw	a5,232(sp)
    f870:	00700613          	li	a2,7
    f874:	00f64463          	blt	a2,a5,f87c <_vfprintf_r+0x1a20>
    f878:	8e9fe06f          	j	e160 <_vfprintf_r+0x304>
    f87c:	cc1fe06f          	j	e53c <_vfprintf_r+0x6e0>
    f880:	0f012783          	lw	a5,240(sp)
    f884:	0a010593          	addi	a1,sp,160
    f888:	0b010513          	addi	a0,sp,176
    f88c:	0af12823          	sw	a5,176(sp)
    f890:	0f412783          	lw	a5,244(sp)
    f894:	0a012023          	sw	zero,160(sp)
    f898:	0a012223          	sw	zero,164(sp)
    f89c:	0af12a23          	sw	a5,180(sp)
    f8a0:	0f812783          	lw	a5,248(sp)
    f8a4:	0a012423          	sw	zero,168(sp)
    f8a8:	0a012623          	sw	zero,172(sp)
    f8ac:	0af12c23          	sw	a5,184(sp)
    f8b0:	0fc12783          	lw	a5,252(sp)
    f8b4:	0af12e23          	sw	a5,188(sp)
    f8b8:	7c00f0ef          	jal	ra,1f078 <__letf2>
    f8bc:	00c12883          	lw	a7,12(sp)
    f8c0:	01412303          	lw	t1,20(sp)
    f8c4:	30054263          	bltz	a0,fbc8 <_vfprintf_r+0x1d6c>
    f8c8:	0c714683          	lbu	a3,199(sp)
    f8cc:	04700613          	li	a2,71
    f8d0:	00014b97          	auipc	s7,0x14
    f8d4:	cc0b8b93          	addi	s7,s7,-832 # 23590 <__flash_rodata_start+0x140>
    f8d8:	01165663          	bge	a2,a7,f8e4 <_vfprintf_r+0x1a88>
    f8dc:	00014b97          	auipc	s7,0x14
    f8e0:	cb8b8b93          	addi	s7,s7,-840 # 23594 <__flash_rodata_start+0x144>
    f8e4:	00012623          	sw	zero,12(sp)
    f8e8:	02012023          	sw	zero,32(sp)
    f8ec:	00012e23          	sw	zero,28(sp)
    f8f0:	00012a23          	sw	zero,20(sp)
    f8f4:	f7fb7b13          	andi	s6,s6,-129
    f8f8:	00300c13          	li	s8,3
    f8fc:	00300993          	li	s3,3
    f900:	00000913          	li	s2,0
    f904:	00068463          	beqz	a3,f90c <_vfprintf_r+0x1ab0>
    f908:	dfdfe06f          	j	e704 <_vfprintf_r+0x8a8>
    f90c:	f84fe06f          	j	e090 <_vfprintf_r+0x234>
    f910:	01012783          	lw	a5,16(sp)
    f914:	00812703          	lw	a4,8(sp)
    f918:	0007a783          	lw	a5,0(a5)
    f91c:	00e7a023          	sw	a4,0(a5)
    f920:	fe1fe06f          	j	e900 <_vfprintf_r+0xaa4>
    f924:	01000593          	li	a1,16
    f928:	0e812603          	lw	a2,232(sp)
    f92c:	00014a97          	auipc	s5,0x14
    f930:	ebca8a93          	addi	s5,s5,-324 # 237e8 <zeroes.0>
    f934:	1725d863          	bge	a1,s2,faa4 <_vfprintf_r+0x1c48>
    f938:	000a8d13          	mv	s10,s5
    f93c:	01000e93          	li	t4,16
    f940:	00090a93          	mv	s5,s2
    f944:	00700993          	li	s3,7
    f948:	00030913          	mv	s2,t1
    f94c:	00c0006f          	j	f958 <_vfprintf_r+0x1afc>
    f950:	ff0a8a93          	addi	s5,s5,-16
    f954:	155ed263          	bge	t4,s5,fa98 <_vfprintf_r+0x1c3c>
    f958:	01068693          	addi	a3,a3,16
    f95c:	00160613          	addi	a2,a2,1
    f960:	01a42023          	sw	s10,0(s0)
    f964:	01d42223          	sw	t4,4(s0)
    f968:	0ed12623          	sw	a3,236(sp)
    f96c:	0ec12423          	sw	a2,232(sp)
    f970:	00840413          	addi	s0,s0,8
    f974:	fcc9dee3          	bge	s3,a2,f950 <_vfprintf_r+0x1af4>
    f978:	00412503          	lw	a0,4(sp)
    f97c:	0e410613          	addi	a2,sp,228
    f980:	000d8593          	mv	a1,s11
    f984:	7550a0ef          	jal	ra,1a8d8 <__sprint_r>
    f988:	c2051863          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    f98c:	0ec12683          	lw	a3,236(sp)
    f990:	0e812603          	lw	a2,232(sp)
    f994:	10c10413          	addi	s0,sp,268
    f998:	01000e93          	li	t4,16
    f99c:	fb5ff06f          	j	f950 <_vfprintf_r+0x1af4>
    f9a0:	000a8313          	mv	t1,s5
    f9a4:	000a0a93          	mv	s5,s4
    f9a8:	008d0d33          	add	s10,s10,s0
    f9ac:	00190913          	addi	s2,s2,1
    f9b0:	0159a023          	sw	s5,0(s3)
    f9b4:	b45fe06f          	j	e4f8 <_vfprintf_r+0x69c>
    f9b8:	02412783          	lw	a5,36(sp)
    f9bc:	0e812603          	lw	a2,232(sp)
    f9c0:	02812703          	lw	a4,40(sp)
    f9c4:	00d786b3          	add	a3,a5,a3
    f9c8:	00160613          	addi	a2,a2,1
    f9cc:	00e42023          	sw	a4,0(s0)
    f9d0:	00f42223          	sw	a5,4(s0)
    f9d4:	0ed12623          	sw	a3,236(sp)
    f9d8:	0ec12423          	sw	a2,232(sp)
    f9dc:	00700513          	li	a0,7
    f9e0:	00840413          	addi	s0,s0,8
    f9e4:	3ac54e63          	blt	a0,a2,fda0 <_vfprintf_r+0x1f44>
    f9e8:	3c05c8e3          	bltz	a1,105b8 <_vfprintf_r+0x275c>
    f9ec:	01812783          	lw	a5,24(sp)
    f9f0:	00160613          	addi	a2,a2,1
    f9f4:	01742023          	sw	s7,0(s0)
    f9f8:	00d786b3          	add	a3,a5,a3
    f9fc:	00f42223          	sw	a5,4(s0)
    fa00:	0ed12623          	sw	a3,236(sp)
    fa04:	0ec12423          	sw	a2,232(sp)
    fa08:	00700793          	li	a5,7
    fa0c:	00c7c463          	blt	a5,a2,fa14 <_vfprintf_r+0x1bb8>
    fa10:	f50fe06f          	j	e160 <_vfprintf_r+0x304>
    fa14:	b29fe06f          	j	e53c <_vfprintf_r+0x6e0>
    fa18:	000b8513          	mv	a0,s7
    fa1c:	03112e23          	sw	a7,60(sp)
    fa20:	05412223          	sw	s4,68(sp)
    fa24:	b38fe0ef          	jal	ra,dd5c <strlen>
    fa28:	0c714683          	lbu	a3,199(sp)
    fa2c:	fff54813          	not	a6,a0
    fa30:	41f85813          	srai	a6,a6,0x1f
    fa34:	01512823          	sw	s5,16(sp)
    fa38:	00012623          	sw	zero,12(sp)
    fa3c:	02012023          	sw	zero,32(sp)
    fa40:	00012e23          	sw	zero,28(sp)
    fa44:	00012a23          	sw	zero,20(sp)
    fa48:	03c12883          	lw	a7,60(sp)
    fa4c:	04412303          	lw	t1,68(sp)
    fa50:	00050993          	mv	s3,a0
    fa54:	01057c33          	and	s8,a0,a6
    fa58:	00000913          	li	s2,0
    fa5c:	00068463          	beqz	a3,fa64 <_vfprintf_r+0x1c08>
    fa60:	ca5fe06f          	j	e704 <_vfprintf_r+0x8a8>
    fa64:	e2cfe06f          	j	e090 <_vfprintf_r+0x234>
    fa68:	0fc12783          	lw	a5,252(sp)
    fa6c:	2e07da63          	bgez	a5,fd60 <_vfprintf_r+0x1f04>
    fa70:	02d00793          	li	a5,45
    fa74:	0cf103a3          	sb	a5,199(sp)
    fa78:	02d00693          	li	a3,45
    fa7c:	04700613          	li	a2,71
    fa80:	00014b97          	auipc	s7,0x14
    fa84:	b18b8b93          	addi	s7,s7,-1256 # 23598 <__flash_rodata_start+0x148>
    fa88:	e5165ee3          	bge	a2,a7,f8e4 <_vfprintf_r+0x1a88>
    fa8c:	00014b97          	auipc	s7,0x14
    fa90:	b10b8b93          	addi	s7,s7,-1264 # 2359c <__flash_rodata_start+0x14c>
    fa94:	e51ff06f          	j	f8e4 <_vfprintf_r+0x1a88>
    fa98:	00090313          	mv	t1,s2
    fa9c:	000a8913          	mv	s2,s5
    faa0:	000d0a93          	mv	s5,s10
    faa4:	00d906b3          	add	a3,s2,a3
    faa8:	00160613          	addi	a2,a2,1
    faac:	01542023          	sw	s5,0(s0)
    fab0:	01242223          	sw	s2,4(s0)
    fab4:	0ed12623          	sw	a3,236(sp)
    fab8:	0ec12423          	sw	a2,232(sp)
    fabc:	00700593          	li	a1,7
    fac0:	00840413          	addi	s0,s0,8
    fac4:	ccc5d663          	bge	a1,a2,ef90 <_vfprintf_r+0x1134>
    fac8:	00412503          	lw	a0,4(sp)
    facc:	0e410613          	addi	a2,sp,228
    fad0:	000d8593          	mv	a1,s11
    fad4:	02612e23          	sw	t1,60(sp)
    fad8:	6010a0ef          	jal	ra,1a8d8 <__sprint_r>
    fadc:	ac051e63          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    fae0:	0ec12683          	lw	a3,236(sp)
    fae4:	03c12303          	lw	t1,60(sp)
    fae8:	10c10413          	addi	s0,sp,268
    faec:	ca4ff06f          	j	ef90 <_vfprintf_r+0x1134>
    faf0:	04012783          	lw	a5,64(sp)
    faf4:	03812583          	lw	a1,56(sp)
    faf8:	01e12e23          	sw	t5,28(sp)
    fafc:	40f70733          	sub	a4,a4,a5
    fb00:	00078613          	mv	a2,a5
    fb04:	00070513          	mv	a0,a4
    fb08:	00612c23          	sw	t1,24(sp)
    fb0c:	01112a23          	sw	a7,20(sp)
    fb10:	00e12623          	sw	a4,12(sp)
    fb14:	1f0080ef          	jal	ra,17d04 <strncpy>
    fb18:	013a37b3          	sltu	a5,s4,s3
    fb1c:	00500693          	li	a3,5
    fb20:	00fa07b3          	add	a5,s4,a5
    fb24:	02d7f7b3          	remu	a5,a5,a3
    fb28:	001bc603          	lbu	a2,1(s7)
    fb2c:	ccccd6b7          	lui	a3,0xccccd
    fb30:	ccd68513          	addi	a0,a3,-819 # cccccccd <__alt_data_end+0xccc8cccd>
    fb34:	00c03633          	snez	a2,a2
    fb38:	00cb8bb3          	add	s7,s7,a2
    fb3c:	ccc68593          	addi	a1,a3,-820
    fb40:	00c12703          	lw	a4,12(sp)
    fb44:	01412883          	lw	a7,20(sp)
    fb48:	01812303          	lw	t1,24(sp)
    fb4c:	01c12f03          	lw	t5,28(sp)
    fb50:	00000693          	li	a3,0
    fb54:	00500e13          	li	t3,5
    fb58:	00050813          	mv	a6,a0
    fb5c:	40f987b3          	sub	a5,s3,a5
    fb60:	00f9b633          	sltu	a2,s3,a5
    fb64:	40cc0633          	sub	a2,s8,a2
    fb68:	02b785b3          	mul	a1,a5,a1
    fb6c:	02a60633          	mul	a2,a2,a0
    fb70:	02a7beb3          	mulhu	t4,a5,a0
    fb74:	00b60633          	add	a2,a2,a1
    fb78:	02a785b3          	mul	a1,a5,a0
    fb7c:	01d60633          	add	a2,a2,t4
    fb80:	01f61793          	slli	a5,a2,0x1f
    fb84:	00165613          	srli	a2,a2,0x1
    fb88:	0015d593          	srli	a1,a1,0x1
    fb8c:	00b7e7b3          	or	a5,a5,a1
    fb90:	c01ff06f          	j	f790 <_vfprintf_r+0x1934>
    fb94:	00412503          	lw	a0,4(sp)
    fb98:	0e410613          	addi	a2,sp,228
    fb9c:	000d8593          	mv	a1,s11
    fba0:	00612a23          	sw	t1,20(sp)
    fba4:	5350a0ef          	jal	ra,1a8d8 <__sprint_r>
    fba8:	a0051863          	bnez	a0,edb8 <_vfprintf_r+0xf5c>
    fbac:	0cc12583          	lw	a1,204(sp)
    fbb0:	0ec12683          	lw	a3,236(sp)
    fbb4:	01412303          	lw	t1,20(sp)
    fbb8:	10c10413          	addi	s0,sp,268
    fbbc:	f08ff06f          	j	f2c4 <_vfprintf_r+0x1468>
    fbc0:	00600993          	li	s3,6
    fbc4:	8e9ff06f          	j	f4ac <_vfprintf_r+0x1650>
    fbc8:	02d00793          	li	a5,45
    fbcc:	0cf103a3          	sb	a5,199(sp)
    fbd0:	02d00693          	li	a3,45
    fbd4:	cf9ff06f          	j	f8cc <_vfprintf_r+0x1a70>
    fbd8:	40b785b3          	sub	a1,a5,a1
    fbdc:	417a0933          	sub	s2,s4,s7
    fbe0:	c525d863          	bge	a1,s2,f030 <_vfprintf_r+0x11d4>
    fbe4:	00058913          	mv	s2,a1
    fbe8:	c48ff06f          	j	f030 <_vfprintf_r+0x11d4>
    fbec:	01899993          	slli	s3,s3,0x18
    fbf0:	4189d993          	srai	s3,s3,0x18
    fbf4:	41f9dc13          	srai	s8,s3,0x1f
    fbf8:	000c0793          	mv	a5,s8
    fbfc:	d5dfe06f          	j	e958 <_vfprintf_r+0xafc>
    fc00:	0ff9f993          	zext.b	s3,s3
    fc04:	00000c13          	li	s8,0
    fc08:	bf9fe06f          	j	e800 <_vfprintf_r+0x9a4>
    fc0c:	0ff9f993          	zext.b	s3,s3
    fc10:	00000c13          	li	s8,0
    fc14:	ff0ff06f          	j	f404 <_vfprintf_r+0x15a8>
    fc18:	01012783          	lw	a5,16(sp)
    fc1c:	00812703          	lw	a4,8(sp)
    fc20:	0007a783          	lw	a5,0(a5)
    fc24:	00e79023          	sh	a4,0(a5)
    fc28:	cd9fe06f          	j	e900 <_vfprintf_r+0xaa4>
    fc2c:	02012783          	lw	a5,32(sp)
    fc30:	0017f713          	andi	a4,a5,1
    fc34:	2e0710e3          	bnez	a4,10714 <_vfprintf_r+0x28b8>
    fc38:	0dc12b03          	lw	s6,220(sp)
    fc3c:	0cc12683          	lw	a3,204(sp)
    fc40:	417b07b3          	sub	a5,s6,s7
    fc44:	00f12c23          	sw	a5,24(sp)
    fc48:	ffd00713          	li	a4,-3
    fc4c:	00d12a23          	sw	a3,20(sp)
    fc50:	00e6c463          	blt	a3,a4,fc58 <_vfprintf_r+0x1dfc>
    fc54:	00d95ce3          	bge	s2,a3,1046c <_vfprintf_r+0x2610>
    fc58:	fff68713          	addi	a4,a3,-1
    fc5c:	ffe88893          	addi	a7,a7,-2
    fc60:	0ce12623          	sw	a4,204(sp)
    fc64:	0ff8f613          	zext.b	a2,a7
    fc68:	00000593          	li	a1,0
    fc6c:	0cc10a23          	sb	a2,212(sp)
    fc70:	02b00613          	li	a2,43
    fc74:	00075863          	bgez	a4,fc84 <_vfprintf_r+0x1e28>
    fc78:	00100713          	li	a4,1
    fc7c:	40d70733          	sub	a4,a4,a3
    fc80:	02d00613          	li	a2,45
    fc84:	0cc10aa3          	sb	a2,213(sp)
    fc88:	00900693          	li	a3,9
    fc8c:	2ee6d8e3          	bge	a3,a4,1077c <_vfprintf_r+0x2920>
    fc90:	0e310e13          	addi	t3,sp,227
    fc94:	000e0613          	mv	a2,t3
    fc98:	00a00593          	li	a1,10
    fc9c:	06300e93          	li	t4,99
    fca0:	02b767b3          	rem	a5,a4,a1
    fca4:	00060813          	mv	a6,a2
    fca8:	00070693          	mv	a3,a4
    fcac:	fff60613          	addi	a2,a2,-1
    fcb0:	03078793          	addi	a5,a5,48
    fcb4:	fef80fa3          	sb	a5,-1(a6)
    fcb8:	02b74733          	div	a4,a4,a1
    fcbc:	fedec2e3          	blt	t4,a3,fca0 <_vfprintf_r+0x1e44>
    fcc0:	03070713          	addi	a4,a4,48
    fcc4:	ffe80693          	addi	a3,a6,-2
    fcc8:	fee60fa3          	sb	a4,-1(a2)
    fccc:	55c6fae3          	bgeu	a3,t3,10a20 <_vfprintf_r+0x2bc4>
    fcd0:	0d610713          	addi	a4,sp,214
    fcd4:	0006c783          	lbu	a5,0(a3)
    fcd8:	00168693          	addi	a3,a3,1
    fcdc:	00170713          	addi	a4,a4,1
    fce0:	fef70fa3          	sb	a5,-1(a4)
    fce4:	ffc698e3          	bne	a3,t3,fcd4 <_vfprintf_r+0x1e78>
    fce8:	0e510713          	addi	a4,sp,229
    fcec:	0d610793          	addi	a5,sp,214
    fcf0:	41070733          	sub	a4,a4,a6
    fcf4:	00e78733          	add	a4,a5,a4
    fcf8:	0d410693          	addi	a3,sp,212
    fcfc:	40d707b3          	sub	a5,a4,a3
    fd00:	02f12823          	sw	a5,48(sp)
    fd04:	01812783          	lw	a5,24(sp)
    fd08:	03012683          	lw	a3,48(sp)
    fd0c:	00100713          	li	a4,1
    fd10:	00d789b3          	add	s3,a5,a3
    fd14:	28f75ce3          	bge	a4,a5,107ac <_vfprintf_r+0x2950>
    fd18:	02412783          	lw	a5,36(sp)
    fd1c:	00f989b3          	add	s3,s3,a5
    fd20:	02012783          	lw	a5,32(sp)
    fd24:	fff9c813          	not	a6,s3
    fd28:	41f85813          	srai	a6,a6,0x1f
    fd2c:	bff7f713          	andi	a4,a5,-1025
    fd30:	10076b13          	ori	s6,a4,256
    fd34:	0109fc33          	and	s8,s3,a6
    fd38:	02012023          	sw	zero,32(sp)
    fd3c:	00012e23          	sw	zero,28(sp)
    fd40:	00012a23          	sw	zero,20(sp)
    fd44:	06012783          	lw	a5,96(sp)
    fd48:	50078c63          	beqz	a5,10260 <_vfprintf_r+0x2404>
    fd4c:	02d00693          	li	a3,45
    fd50:	0cd103a3          	sb	a3,199(sp)
    fd54:	00000913          	li	s2,0
    fd58:	001c0c13          	addi	s8,s8,1
    fd5c:	b34fe06f          	j	e090 <_vfprintf_r+0x234>
    fd60:	0c714683          	lbu	a3,199(sp)
    fd64:	d19ff06f          	j	fa7c <_vfprintf_r+0x1c20>
    fd68:	00412503          	lw	a0,4(sp)
    fd6c:	0e410613          	addi	a2,sp,228
    fd70:	000d8593          	mv	a1,s11
    fd74:	3650a0ef          	jal	ra,1a8d8 <__sprint_r>
    fd78:	00050463          	beqz	a0,fd80 <_vfprintf_r+0x1f24>
    fd7c:	c48fe06f          	j	e1c4 <_vfprintf_r+0x368>
    fd80:	0e012423          	sw	zero,232(sp)
    fd84:	c40fe06f          	j	e1c4 <_vfprintf_r+0x368>
    fd88:	00012623          	sw	zero,12(sp)
    fd8c:	80000737          	lui	a4,0x80000
    fd90:	02d00793          	li	a5,45
    fd94:	01a74d33          	xor	s10,a4,s10
    fd98:	06f12023          	sw	a5,96(sp)
    fd9c:	f6cff06f          	j	f508 <_vfprintf_r+0x16ac>
    fda0:	00412503          	lw	a0,4(sp)
    fda4:	0e410613          	addi	a2,sp,228
    fda8:	000d8593          	mv	a1,s11
    fdac:	00612a23          	sw	t1,20(sp)
    fdb0:	3290a0ef          	jal	ra,1a8d8 <__sprint_r>
    fdb4:	00050463          	beqz	a0,fdbc <_vfprintf_r+0x1f60>
    fdb8:	800ff06f          	j	edb8 <_vfprintf_r+0xf5c>
    fdbc:	0cc12583          	lw	a1,204(sp)
    fdc0:	0ec12683          	lw	a3,236(sp)
    fdc4:	0e812603          	lw	a2,232(sp)
    fdc8:	01412303          	lw	t1,20(sp)
    fdcc:	10c10413          	addi	s0,sp,268
    fdd0:	c19ff06f          	j	f9e8 <_vfprintf_r+0x1b8c>
    fdd4:	058da503          	lw	a0,88(s11)
    fdd8:	1d8050ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
    fddc:	c88fe06f          	j	e264 <_vfprintf_r+0x408>
    fde0:	00412503          	lw	a0,4(sp)
    fde4:	00190593          	addi	a1,s2,1
    fde8:	00612a23          	sw	t1,20(sp)
    fdec:	01112623          	sw	a7,12(sp)
    fdf0:	42c050ef          	jal	ra,1521c <_malloc_r>
    fdf4:	00c12883          	lw	a7,12(sp)
    fdf8:	01412303          	lw	t1,20(sp)
    fdfc:	00050b93          	mv	s7,a0
    fe00:	44050ee3          	beqz	a0,10a5c <_vfprintf_r+0x2c00>
    fe04:	00a12623          	sw	a0,12(sp)
    fe08:	ee0ff06f          	j	f4e8 <_vfprintf_r+0x168c>
    fe0c:	000b0593          	mv	a1,s6
    fe10:	00098513          	mv	a0,s3
    fe14:	04612223          	sw	t1,68(sp)
    fe18:	03112e23          	sw	a7,60(sp)
    fe1c:	0be12823          	sw	t5,176(sp)
    fe20:	01e12e23          	sw	t5,28(sp)
    fe24:	0bd12a23          	sw	t4,180(sp)
    fe28:	01d12c23          	sw	t4,24(sp)
    fe2c:	0bc12c23          	sw	t3,184(sp)
    fe30:	01c12a23          	sw	t3,20(sp)
    fe34:	04d12423          	sw	a3,72(sp)
    fe38:	0ba12e23          	sw	s10,188(sp)
    fe3c:	0a012023          	sw	zero,160(sp)
    fe40:	0a012223          	sw	zero,164(sp)
    fe44:	0a012423          	sw	zero,168(sp)
    fe48:	0a012623          	sw	zero,172(sp)
    fe4c:	0040f0ef          	jal	ra,1ee50 <__eqtf2>
    fe50:	01412e03          	lw	t3,20(sp)
    fe54:	01812e83          	lw	t4,24(sp)
    fe58:	01c12f03          	lw	t5,28(sp)
    fe5c:	03c12883          	lw	a7,60(sp)
    fe60:	04412303          	lw	t1,68(sp)
    fe64:	f6050863          	beqz	a0,f5d4 <_vfprintf_r+0x1778>
    fe68:	04812683          	lw	a3,72(sp)
    fe6c:	00100593          	li	a1,1
    fe70:	40d586b3          	sub	a3,a1,a3
    fe74:	0cd12623          	sw	a3,204(sp)
    fe78:	f60ff06f          	j	f5d8 <_vfprintf_r+0x177c>
    fe7c:	00190693          	addi	a3,s2,1
    fe80:	00200613          	li	a2,2
    fe84:	ec0ff06f          	j	f544 <_vfprintf_r+0x16e8>
    fe88:	00090693          	mv	a3,s2
    fe8c:	00300613          	li	a2,3
    fe90:	eb4ff06f          	j	f544 <_vfprintf_r+0x16e8>
    fe94:	0b010993          	addi	s3,sp,176
    fe98:	00098513          	mv	a0,s3
    fe9c:	04612a23          	sw	t1,84(sp)
    fea0:	05112823          	sw	a7,80(sp)
    fea4:	0be12823          	sw	t5,176(sp)
    fea8:	0bd12a23          	sw	t4,180(sp)
    feac:	0bc12c23          	sw	t3,184(sp)
    feb0:	0ba12e23          	sw	s10,188(sp)
    feb4:	130120ef          	jal	ra,21fe4 <__trunctfdf2>
    feb8:	0cc10613          	addi	a2,sp,204
    febc:	4ac070ef          	jal	ra,17368 <frexp>
    fec0:	00058613          	mv	a2,a1
    fec4:	00050593          	mv	a1,a0
    fec8:	00098513          	mv	a0,s3
    fecc:	6b9110ef          	jal	ra,21d84 <__extenddftf2>
    fed0:	0b012e83          	lw	t4,176(sp)
    fed4:	00014717          	auipc	a4,0x14
    fed8:	92c70713          	addi	a4,a4,-1748 # 23800 <zeroes.0+0x18>
    fedc:	00072e03          	lw	t3,0(a4)
    fee0:	09d12823          	sw	t4,144(sp)
    fee4:	0b412e83          	lw	t4,180(sp)
    fee8:	00472803          	lw	a6,4(a4)
    feec:	00872683          	lw	a3,8(a4)
    fef0:	09d12a23          	sw	t4,148(sp)
    fef4:	0b812e83          	lw	t4,184(sp)
    fef8:	00c72703          	lw	a4,12(a4)
    fefc:	09010793          	addi	a5,sp,144
    ff00:	09d12c23          	sw	t4,152(sp)
    ff04:	0bc12e83          	lw	t4,188(sp)
    ff08:	0a010b13          	addi	s6,sp,160
    ff0c:	08010613          	addi	a2,sp,128
    ff10:	00078593          	mv	a1,a5
    ff14:	000b0513          	mv	a0,s6
    ff18:	00f12a23          	sw	a5,20(sp)
    ff1c:	04c12223          	sw	a2,68(sp)
    ff20:	09d12e23          	sw	t4,156(sp)
    ff24:	09c12023          	sw	t3,128(sp)
    ff28:	09012223          	sw	a6,132(sp)
    ff2c:	08d12423          	sw	a3,136(sp)
    ff30:	08e12623          	sw	a4,140(sp)
    ff34:	2980f0ef          	jal	ra,1f1cc <__multf3>
    ff38:	0a012683          	lw	a3,160(sp)
    ff3c:	0a412803          	lw	a6,164(sp)
    ff40:	0a812e03          	lw	t3,168(sp)
    ff44:	0ac12e83          	lw	t4,172(sp)
    ff48:	000b0593          	mv	a1,s6
    ff4c:	00098513          	mv	a0,s3
    ff50:	0ad12823          	sw	a3,176(sp)
    ff54:	04d12423          	sw	a3,72(sp)
    ff58:	0b012a23          	sw	a6,180(sp)
    ff5c:	03012e23          	sw	a6,60(sp)
    ff60:	0bc12c23          	sw	t3,184(sp)
    ff64:	01c12e23          	sw	t3,28(sp)
    ff68:	0bd12e23          	sw	t4,188(sp)
    ff6c:	01d12c23          	sw	t4,24(sp)
    ff70:	0a012023          	sw	zero,160(sp)
    ff74:	0a012223          	sw	zero,164(sp)
    ff78:	0a012423          	sw	zero,168(sp)
    ff7c:	0a012623          	sw	zero,172(sp)
    ff80:	6d10e0ef          	jal	ra,1ee50 <__eqtf2>
    ff84:	01812e83          	lw	t4,24(sp)
    ff88:	01c12e03          	lw	t3,28(sp)
    ff8c:	03c12803          	lw	a6,60(sp)
    ff90:	04812683          	lw	a3,72(sp)
    ff94:	05012883          	lw	a7,80(sp)
    ff98:	05412303          	lw	t1,84(sp)
    ff9c:	00051e63          	bnez	a0,ffb8 <_vfprintf_r+0x215c>
    ffa0:	00100713          	li	a4,1
    ffa4:	0ce12623          	sw	a4,204(sp)
    ffa8:	06100713          	li	a4,97
    ffac:	00013397          	auipc	t2,0x13
    ffb0:	5f438393          	addi	t2,t2,1524 # 235a0 <__flash_rodata_start+0x150>
    ffb4:	00e88663          	beq	a7,a4,ffc0 <_vfprintf_r+0x2164>
    ffb8:	00013397          	auipc	t2,0x13
    ffbc:	5fc38393          	addi	t2,t2,1532 # 235b4 <__flash_rodata_start+0x164>
    ffc0:	00014717          	auipc	a4,0x14
    ffc4:	85070713          	addi	a4,a4,-1968 # 23810 <zeroes.0+0x28>
    ffc8:	00072783          	lw	a5,0(a4)
    ffcc:	fff90c13          	addi	s8,s2,-1
    ffd0:	07212823          	sw	s2,112(sp)
    ffd4:	04f12823          	sw	a5,80(sp)
    ffd8:	00472783          	lw	a5,4(a4)
    ffdc:	06812a23          	sw	s0,116(sp)
    ffe0:	000b8913          	mv	s2,s7
    ffe4:	04f12a23          	sw	a5,84(sp)
    ffe8:	00872783          	lw	a5,8(a4)
    ffec:	07b12c23          	sw	s11,120(sp)
    fff0:	07712e23          	sw	s7,124(sp)
    fff4:	04f12c23          	sw	a5,88(sp)
    fff8:	00c72783          	lw	a5,12(a4)
    fffc:	06912223          	sw	s1,100(sp)
   10000:	07112423          	sw	a7,104(sp)
   10004:	04f12e23          	sw	a5,92(sp)
   10008:	06612623          	sw	t1,108(sp)
   1000c:	02712e23          	sw	t2,60(sp)
   10010:	00068a13          	mv	s4,a3
   10014:	00080b93          	mv	s7,a6
   10018:	000e0d93          	mv	s11,t3
   1001c:	000e8413          	mv	s0,t4
   10020:	04c0006f          	j	1006c <_vfprintf_r+0x2210>
   10024:	000b0593          	mv	a1,s6
   10028:	00098513          	mv	a0,s3
   1002c:	00e12e23          	sw	a4,28(sp)
   10030:	00c12c23          	sw	a2,24(sp)
   10034:	0ac12c23          	sw	a2,184(sp)
   10038:	0ae12e23          	sw	a4,188(sp)
   1003c:	0a912823          	sw	s1,176(sp)
   10040:	0b512a23          	sw	s5,180(sp)
   10044:	0a012023          	sw	zero,160(sp)
   10048:	0a012223          	sw	zero,164(sp)
   1004c:	0a012423          	sw	zero,168(sp)
   10050:	0a012623          	sw	zero,172(sp)
   10054:	5fd0e0ef          	jal	ra,1ee50 <__eqtf2>
   10058:	fffc0593          	addi	a1,s8,-1
   1005c:	000d8613          	mv	a2,s11
   10060:	00040713          	mv	a4,s0
   10064:	74050c63          	beqz	a0,107bc <_vfprintf_r+0x2960>
   10068:	00058c13          	mv	s8,a1
   1006c:	05012783          	lw	a5,80(sp)
   10070:	01412603          	lw	a2,20(sp)
   10074:	000b0593          	mv	a1,s6
   10078:	08f12823          	sw	a5,144(sp)
   1007c:	05412783          	lw	a5,84(sp)
   10080:	00098513          	mv	a0,s3
   10084:	0b412023          	sw	s4,160(sp)
   10088:	08f12a23          	sw	a5,148(sp)
   1008c:	05812783          	lw	a5,88(sp)
   10090:	0b712223          	sw	s7,164(sp)
   10094:	0bb12423          	sw	s11,168(sp)
   10098:	08f12c23          	sw	a5,152(sp)
   1009c:	05c12783          	lw	a5,92(sp)
   100a0:	0a812623          	sw	s0,172(sp)
   100a4:	08f12e23          	sw	a5,156(sp)
   100a8:	1240f0ef          	jal	ra,1f1cc <__multf3>
   100ac:	00098513          	mv	a0,s3
   100b0:	245110ef          	jal	ra,21af4 <__fixtfsi>
   100b4:	00050593          	mv	a1,a0
   100b8:	00050d13          	mv	s10,a0
   100bc:	00098513          	mv	a0,s3
   100c0:	0b012a03          	lw	s4,176(sp)
   100c4:	0b412483          	lw	s1,180(sp)
   100c8:	0b812403          	lw	s0,184(sp)
   100cc:	0bc12a83          	lw	s5,188(sp)
   100d0:	321110ef          	jal	ra,21bf0 <__floatsitf>
   100d4:	0b012703          	lw	a4,176(sp)
   100d8:	04412603          	lw	a2,68(sp)
   100dc:	01412583          	lw	a1,20(sp)
   100e0:	08e12023          	sw	a4,128(sp)
   100e4:	0b412703          	lw	a4,180(sp)
   100e8:	000b0513          	mv	a0,s6
   100ec:	09412823          	sw	s4,144(sp)
   100f0:	08e12223          	sw	a4,132(sp)
   100f4:	0b812703          	lw	a4,184(sp)
   100f8:	08912a23          	sw	s1,148(sp)
   100fc:	08812c23          	sw	s0,152(sp)
   10100:	08e12423          	sw	a4,136(sp)
   10104:	0bc12703          	lw	a4,188(sp)
   10108:	09512e23          	sw	s5,156(sp)
   1010c:	08e12623          	sw	a4,140(sp)
   10110:	268100ef          	jal	ra,20378 <__subtf3>
   10114:	03c12783          	lw	a5,60(sp)
   10118:	0a012483          	lw	s1,160(sp)
   1011c:	0a412a83          	lw	s5,164(sp)
   10120:	01a78733          	add	a4,a5,s10
   10124:	00074683          	lbu	a3,0(a4)
   10128:	0a812603          	lw	a2,168(sp)
   1012c:	0ac12703          	lw	a4,172(sp)
   10130:	05212423          	sw	s2,72(sp)
   10134:	00d90023          	sb	a3,0(s2)
   10138:	fff00793          	li	a5,-1
   1013c:	00190913          	addi	s2,s2,1
   10140:	00048a13          	mv	s4,s1
   10144:	000a8b93          	mv	s7,s5
   10148:	00060d93          	mv	s11,a2
   1014c:	00070413          	mv	s0,a4
   10150:	ecfc1ae3          	bne	s8,a5,10024 <_vfprintf_r+0x21c8>
   10154:	00048f93          	mv	t6,s1
   10158:	000a8f13          	mv	t5,s5
   1015c:	06812883          	lw	a7,104(sp)
   10160:	00090a93          	mv	s5,s2
   10164:	06c12303          	lw	t1,108(sp)
   10168:	04812a03          	lw	s4,72(sp)
   1016c:	07412403          	lw	s0,116(sp)
   10170:	03c12383          	lw	t2,60(sp)
   10174:	07812d83          	lw	s11,120(sp)
   10178:	07c12b83          	lw	s7,124(sp)
   1017c:	06412483          	lw	s1,100(sp)
   10180:	07012903          	lw	s2,112(sp)
   10184:	fff00693          	li	a3,-1
   10188:	00013597          	auipc	a1,0x13
   1018c:	69858593          	addi	a1,a1,1688 # 23820 <zeroes.0+0x38>
   10190:	0005a803          	lw	a6,0(a1)
   10194:	0045ae03          	lw	t3,4(a1)
   10198:	0085ae83          	lw	t4,8(a1)
   1019c:	00c5a783          	lw	a5,12(a1)
   101a0:	00098513          	mv	a0,s3
   101a4:	000b0593          	mv	a1,s6
   101a8:	00712e23          	sw	t2,28(sp)
   101ac:	00612c23          	sw	t1,24(sp)
   101b0:	01112a23          	sw	a7,20(sp)
   101b4:	06d12423          	sw	a3,104(sp)
   101b8:	0bf12823          	sw	t6,176(sp)
   101bc:	07f12223          	sw	t6,100(sp)
   101c0:	0be12a23          	sw	t5,180(sp)
   101c4:	05e12e23          	sw	t5,92(sp)
   101c8:	0ac12c23          	sw	a2,184(sp)
   101cc:	04c12c23          	sw	a2,88(sp)
   101d0:	0ae12e23          	sw	a4,188(sp)
   101d4:	04e12a23          	sw	a4,84(sp)
   101d8:	0b012023          	sw	a6,160(sp)
   101dc:	05012823          	sw	a6,80(sp)
   101e0:	0bc12223          	sw	t3,164(sp)
   101e4:	05c12423          	sw	t3,72(sp)
   101e8:	0bd12423          	sw	t4,168(sp)
   101ec:	05d12223          	sw	t4,68(sp)
   101f0:	0af12623          	sw	a5,172(sp)
   101f4:	02f12e23          	sw	a5,60(sp)
   101f8:	5290e0ef          	jal	ra,1ef20 <__getf2>
   101fc:	01412883          	lw	a7,20(sp)
   10200:	01812303          	lw	t1,24(sp)
   10204:	01c12383          	lw	t2,28(sp)
   10208:	50a04e63          	bgtz	a0,10724 <_vfprintf_r+0x28c8>
   1020c:	000b0593          	mv	a1,s6
   10210:	00098513          	mv	a0,s3
   10214:	43d0e0ef          	jal	ra,1ee50 <__eqtf2>
   10218:	01412883          	lw	a7,20(sp)
   1021c:	01812303          	lw	t1,24(sp)
   10220:	01c12383          	lw	t2,28(sp)
   10224:	06812683          	lw	a3,104(sp)
   10228:	00051663          	bnez	a0,10234 <_vfprintf_r+0x23d8>
   1022c:	001d7d13          	andi	s10,s10,1
   10230:	4e0d1a63          	bnez	s10,10724 <_vfprintf_r+0x28c8>
   10234:	00168b13          	addi	s6,a3,1
   10238:	016a8b33          	add	s6,s5,s6
   1023c:	03000613          	li	a2,48
   10240:	5206c463          	bltz	a3,10768 <_vfprintf_r+0x290c>
   10244:	001a8a93          	addi	s5,s5,1
   10248:	feca8fa3          	sb	a2,-1(s5)
   1024c:	ff5b1ce3          	bne	s6,s5,10244 <_vfprintf_r+0x23e8>
   10250:	417b07b3          	sub	a5,s6,s7
   10254:	00f12c23          	sw	a5,24(sp)
   10258:	fdf8fa93          	andi	s5,a7,-33
   1025c:	becff06f          	j	f648 <_vfprintf_r+0x17ec>
   10260:	0c714683          	lbu	a3,199(sp)
   10264:	00000913          	li	s2,0
   10268:	00068463          	beqz	a3,10270 <_vfprintf_r+0x2414>
   1026c:	c98fe06f          	j	e704 <_vfprintf_r+0x8a8>
   10270:	e21fd06f          	j	e090 <_vfprintf_r+0x234>
   10274:	01c12d03          	lw	s10,28(sp)
   10278:	02912e23          	sw	s1,60(sp)
   1027c:	05612223          	sw	s6,68(sp)
   10280:	01812e23          	sw	s8,28(sp)
   10284:	04612423          	sw	t1,72(sp)
   10288:	000b8b13          	mv	s6,s7
   1028c:	03412483          	lw	s1,52(sp)
   10290:	04012b83          	lw	s7,64(sp)
   10294:	02012c03          	lw	s8,32(sp)
   10298:	00412983          	lw	s3,4(sp)
   1029c:	00700e13          	li	t3,7
   102a0:	01000913          	li	s2,16
   102a4:	00013a97          	auipc	s5,0x13
   102a8:	544a8a93          	addi	s5,s5,1348 # 237e8 <zeroes.0>
   102ac:	00040713          	mv	a4,s0
   102b0:	080d0663          	beqz	s10,1033c <_vfprintf_r+0x24e0>
   102b4:	140c0c63          	beqz	s8,1040c <_vfprintf_r+0x25b0>
   102b8:	fffc0c13          	addi	s8,s8,-1
   102bc:	03812783          	lw	a5,56(sp)
   102c0:	017686b3          	add	a3,a3,s7
   102c4:	01772223          	sw	s7,4(a4)
   102c8:	00f72023          	sw	a5,0(a4)
   102cc:	0e812783          	lw	a5,232(sp)
   102d0:	0ed12623          	sw	a3,236(sp)
   102d4:	00870713          	addi	a4,a4,8
   102d8:	00178793          	addi	a5,a5,1
   102dc:	0ef12423          	sw	a5,232(sp)
   102e0:	12fe4c63          	blt	t3,a5,10418 <_vfprintf_r+0x25bc>
   102e4:	0004c603          	lbu	a2,0(s1)
   102e8:	416a0433          	sub	s0,s4,s6
   102ec:	00865463          	bge	a2,s0,102f4 <_vfprintf_r+0x2498>
   102f0:	00060413          	mv	s0,a2
   102f4:	02805663          	blez	s0,10320 <_vfprintf_r+0x24c4>
   102f8:	0e812603          	lw	a2,232(sp)
   102fc:	008686b3          	add	a3,a3,s0
   10300:	01672023          	sw	s6,0(a4)
   10304:	00160613          	addi	a2,a2,1
   10308:	00872223          	sw	s0,4(a4)
   1030c:	0ed12623          	sw	a3,236(sp)
   10310:	0ec12423          	sw	a2,232(sp)
   10314:	12ce4663          	blt	t3,a2,10440 <_vfprintf_r+0x25e4>
   10318:	0004c603          	lbu	a2,0(s1)
   1031c:	00870713          	addi	a4,a4,8
   10320:	fff44593          	not	a1,s0
   10324:	41f5d593          	srai	a1,a1,0x1f
   10328:	00b477b3          	and	a5,s0,a1
   1032c:	40f60433          	sub	s0,a2,a5
   10330:	02804e63          	bgtz	s0,1036c <_vfprintf_r+0x2510>
   10334:	00cb0b33          	add	s6,s6,a2
   10338:	f60d1ee3          	bnez	s10,102b4 <_vfprintf_r+0x2458>
   1033c:	f60c1ee3          	bnez	s8,102b8 <_vfprintf_r+0x245c>
   10340:	02912a23          	sw	s1,52(sp)
   10344:	000b0b93          	mv	s7,s6
   10348:	03c12483          	lw	s1,60(sp)
   1034c:	04412b03          	lw	s6,68(sp)
   10350:	04812303          	lw	t1,72(sp)
   10354:	01c12c03          	lw	s8,28(sp)
   10358:	00070413          	mv	s0,a4
   1035c:	017a6463          	bltu	s4,s7,10364 <_vfprintf_r+0x2508>
   10360:	c45fe06f          	j	efa4 <_vfprintf_r+0x1148>
   10364:	000a0b93          	mv	s7,s4
   10368:	c3dfe06f          	j	efa4 <_vfprintf_r+0x1148>
   1036c:	0e812603          	lw	a2,232(sp)
   10370:	00013597          	auipc	a1,0x13
   10374:	47858593          	addi	a1,a1,1144 # 237e8 <zeroes.0>
   10378:	06895463          	bge	s2,s0,103e0 <_vfprintf_r+0x2584>
   1037c:	01512a23          	sw	s5,20(sp)
   10380:	00c0006f          	j	1038c <_vfprintf_r+0x2530>
   10384:	ff040413          	addi	s0,s0,-16
   10388:	04895a63          	bge	s2,s0,103dc <_vfprintf_r+0x2580>
   1038c:	01068693          	addi	a3,a3,16
   10390:	00160613          	addi	a2,a2,1
   10394:	01572023          	sw	s5,0(a4)
   10398:	01272223          	sw	s2,4(a4)
   1039c:	0ed12623          	sw	a3,236(sp)
   103a0:	0ec12423          	sw	a2,232(sp)
   103a4:	00870713          	addi	a4,a4,8
   103a8:	fcce5ee3          	bge	t3,a2,10384 <_vfprintf_r+0x2528>
   103ac:	0e410613          	addi	a2,sp,228
   103b0:	000d8593          	mv	a1,s11
   103b4:	00098513          	mv	a0,s3
   103b8:	5200a0ef          	jal	ra,1a8d8 <__sprint_r>
   103bc:	00050463          	beqz	a0,103c4 <_vfprintf_r+0x2568>
   103c0:	9f9fe06f          	j	edb8 <_vfprintf_r+0xf5c>
   103c4:	ff040413          	addi	s0,s0,-16
   103c8:	0ec12683          	lw	a3,236(sp)
   103cc:	0e812603          	lw	a2,232(sp)
   103d0:	10c10713          	addi	a4,sp,268
   103d4:	00700e13          	li	t3,7
   103d8:	fa894ae3          	blt	s2,s0,1038c <_vfprintf_r+0x2530>
   103dc:	01412583          	lw	a1,20(sp)
   103e0:	00d406b3          	add	a3,s0,a3
   103e4:	00160613          	addi	a2,a2,1
   103e8:	00b72023          	sw	a1,0(a4)
   103ec:	00872223          	sw	s0,4(a4)
   103f0:	0ed12623          	sw	a3,236(sp)
   103f4:	0ec12423          	sw	a2,232(sp)
   103f8:	0cce4263          	blt	t3,a2,104bc <_vfprintf_r+0x2660>
   103fc:	0004c603          	lbu	a2,0(s1)
   10400:	00870713          	addi	a4,a4,8
   10404:	00cb0b33          	add	s6,s6,a2
   10408:	f31ff06f          	j	10338 <_vfprintf_r+0x24dc>
   1040c:	fff48493          	addi	s1,s1,-1
   10410:	fffd0d13          	addi	s10,s10,-1
   10414:	ea9ff06f          	j	102bc <_vfprintf_r+0x2460>
   10418:	0e410613          	addi	a2,sp,228
   1041c:	000d8593          	mv	a1,s11
   10420:	00098513          	mv	a0,s3
   10424:	4b40a0ef          	jal	ra,1a8d8 <__sprint_r>
   10428:	00050463          	beqz	a0,10430 <_vfprintf_r+0x25d4>
   1042c:	98dfe06f          	j	edb8 <_vfprintf_r+0xf5c>
   10430:	0ec12683          	lw	a3,236(sp)
   10434:	10c10713          	addi	a4,sp,268
   10438:	00700e13          	li	t3,7
   1043c:	ea9ff06f          	j	102e4 <_vfprintf_r+0x2488>
   10440:	0e410613          	addi	a2,sp,228
   10444:	000d8593          	mv	a1,s11
   10448:	00098513          	mv	a0,s3
   1044c:	48c0a0ef          	jal	ra,1a8d8 <__sprint_r>
   10450:	00050463          	beqz	a0,10458 <_vfprintf_r+0x25fc>
   10454:	965fe06f          	j	edb8 <_vfprintf_r+0xf5c>
   10458:	0004c603          	lbu	a2,0(s1)
   1045c:	0ec12683          	lw	a3,236(sp)
   10460:	10c10713          	addi	a4,sp,268
   10464:	00700e13          	li	t3,7
   10468:	eb9ff06f          	j	10320 <_vfprintf_r+0x24c4>
   1046c:	01812783          	lw	a5,24(sp)
   10470:	1ef6c463          	blt	a3,a5,10658 <_vfprintf_r+0x27fc>
   10474:	02012783          	lw	a5,32(sp)
   10478:	00068993          	mv	s3,a3
   1047c:	0017f713          	andi	a4,a5,1
   10480:	00070663          	beqz	a4,1048c <_vfprintf_r+0x2630>
   10484:	02412783          	lw	a5,36(sp)
   10488:	00f689b3          	add	s3,a3,a5
   1048c:	02012783          	lw	a5,32(sp)
   10490:	4007f713          	andi	a4,a5,1024
   10494:	00070463          	beqz	a4,1049c <_vfprintf_r+0x2640>
   10498:	48d04663          	bgtz	a3,10924 <_vfprintf_r+0x2ac8>
   1049c:	fff9c813          	not	a6,s3
   104a0:	04c12b03          	lw	s6,76(sp)
   104a4:	41f85813          	srai	a6,a6,0x1f
   104a8:	0109fc33          	and	s8,s3,a6
   104ac:	06700893          	li	a7,103
   104b0:	02012023          	sw	zero,32(sp)
   104b4:	00012e23          	sw	zero,28(sp)
   104b8:	88dff06f          	j	fd44 <_vfprintf_r+0x1ee8>
   104bc:	0e410613          	addi	a2,sp,228
   104c0:	000d8593          	mv	a1,s11
   104c4:	00098513          	mv	a0,s3
   104c8:	4100a0ef          	jal	ra,1a8d8 <__sprint_r>
   104cc:	00050463          	beqz	a0,104d4 <_vfprintf_r+0x2678>
   104d0:	8e9fe06f          	j	edb8 <_vfprintf_r+0xf5c>
   104d4:	0004c603          	lbu	a2,0(s1)
   104d8:	0ec12683          	lw	a3,236(sp)
   104dc:	10c10713          	addi	a4,sp,268
   104e0:	00700e13          	li	t3,7
   104e4:	00cb0b33          	add	s6,s6,a2
   104e8:	e51ff06f          	j	10338 <_vfprintf_r+0x24dc>
   104ec:	00412503          	lw	a0,4(sp)
   104f0:	0e410613          	addi	a2,sp,228
   104f4:	000d8593          	mv	a1,s11
   104f8:	02612e23          	sw	t1,60(sp)
   104fc:	3dc0a0ef          	jal	ra,1a8d8 <__sprint_r>
   10500:	00050463          	beqz	a0,10508 <_vfprintf_r+0x26ac>
   10504:	8b5fe06f          	j	edb8 <_vfprintf_r+0xf5c>
   10508:	0ec12683          	lw	a3,236(sp)
   1050c:	03c12303          	lw	t1,60(sp)
   10510:	10c10413          	addi	s0,sp,268
   10514:	a65fe06f          	j	ef78 <_vfprintf_r+0x111c>
   10518:	00900593          	li	a1,9
   1051c:	a735ea63          	bltu	a1,s3,f790 <_vfprintf_r+0x1934>
   10520:	af0ff06f          	j	f810 <_vfprintf_r+0x19b4>
   10524:	00412503          	lw	a0,4(sp)
   10528:	0e410613          	addi	a2,sp,228
   1052c:	000d8593          	mv	a1,s11
   10530:	00612a23          	sw	t1,20(sp)
   10534:	3a40a0ef          	jal	ra,1a8d8 <__sprint_r>
   10538:	00050463          	beqz	a0,10540 <_vfprintf_r+0x26e4>
   1053c:	87dfe06f          	j	edb8 <_vfprintf_r+0xf5c>
   10540:	0cc12583          	lw	a1,204(sp)
   10544:	0ec12683          	lw	a3,236(sp)
   10548:	01412303          	lw	t1,20(sp)
   1054c:	10c10413          	addi	s0,sp,268
   10550:	a9dfe06f          	j	efec <_vfprintf_r+0x1190>
   10554:	0c714683          	lbu	a3,199(sp)
   10558:	01512823          	sw	s5,16(sp)
   1055c:	02012023          	sw	zero,32(sp)
   10560:	00012e23          	sw	zero,28(sp)
   10564:	00012a23          	sw	zero,20(sp)
   10568:	00090c13          	mv	s8,s2
   1056c:	00090993          	mv	s3,s2
   10570:	00000913          	li	s2,0
   10574:	00068463          	beqz	a3,1057c <_vfprintf_r+0x2720>
   10578:	98cfe06f          	j	e704 <_vfprintf_r+0x8a8>
   1057c:	b15fd06f          	j	e090 <_vfprintf_r+0x234>
   10580:	00412503          	lw	a0,4(sp)
   10584:	0e410613          	addi	a2,sp,228
   10588:	000d8593          	mv	a1,s11
   1058c:	00612a23          	sw	t1,20(sp)
   10590:	3480a0ef          	jal	ra,1a8d8 <__sprint_r>
   10594:	00050463          	beqz	a0,1059c <_vfprintf_r+0x2740>
   10598:	821fe06f          	j	edb8 <_vfprintf_r+0xf5c>
   1059c:	0cc12583          	lw	a1,204(sp)
   105a0:	01812783          	lw	a5,24(sp)
   105a4:	0ec12683          	lw	a3,236(sp)
   105a8:	01412303          	lw	t1,20(sp)
   105ac:	10c10413          	addi	s0,sp,268
   105b0:	40b785b3          	sub	a1,a5,a1
   105b4:	a7dfe06f          	j	f030 <_vfprintf_r+0x11d4>
   105b8:	ff000513          	li	a0,-16
   105bc:	40b00933          	neg	s2,a1
   105c0:	00013a97          	auipc	s5,0x13
   105c4:	228a8a93          	addi	s5,s5,552 # 237e8 <zeroes.0>
   105c8:	01000993          	li	s3,16
   105cc:	00700d13          	li	s10,7
   105d0:	00030a13          	mv	s4,t1
   105d4:	00a5c863          	blt	a1,a0,105e4 <_vfprintf_r+0x2788>
   105d8:	0e80006f          	j	106c0 <_vfprintf_r+0x2864>
   105dc:	ff090913          	addi	s2,s2,-16
   105e0:	0d29de63          	bge	s3,s2,106bc <_vfprintf_r+0x2860>
   105e4:	01068693          	addi	a3,a3,16
   105e8:	00160613          	addi	a2,a2,1
   105ec:	01542023          	sw	s5,0(s0)
   105f0:	01342223          	sw	s3,4(s0)
   105f4:	0ed12623          	sw	a3,236(sp)
   105f8:	0ec12423          	sw	a2,232(sp)
   105fc:	00840413          	addi	s0,s0,8
   10600:	fccd5ee3          	bge	s10,a2,105dc <_vfprintf_r+0x2780>
   10604:	00412503          	lw	a0,4(sp)
   10608:	0e410613          	addi	a2,sp,228
   1060c:	000d8593          	mv	a1,s11
   10610:	2c80a0ef          	jal	ra,1a8d8 <__sprint_r>
   10614:	00050463          	beqz	a0,1061c <_vfprintf_r+0x27c0>
   10618:	fa0fe06f          	j	edb8 <_vfprintf_r+0xf5c>
   1061c:	0ec12683          	lw	a3,236(sp)
   10620:	0e812603          	lw	a2,232(sp)
   10624:	10c10413          	addi	s0,sp,268
   10628:	fb5ff06f          	j	105dc <_vfprintf_r+0x2780>
   1062c:	064da783          	lw	a5,100(s11)
   10630:	0017f793          	andi	a5,a5,1
   10634:	00079c63          	bnez	a5,1064c <_vfprintf_r+0x27f0>
   10638:	00cdd783          	lhu	a5,12(s11)
   1063c:	2007f793          	andi	a5,a5,512
   10640:	00079663          	bnez	a5,1064c <_vfprintf_r+0x27f0>
   10644:	058da503          	lw	a0,88(s11)
   10648:	169040ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1064c:	fff00793          	li	a5,-1
   10650:	00f12423          	sw	a5,8(sp)
   10654:	b8dfd06f          	j	e1e0 <_vfprintf_r+0x384>
   10658:	01812783          	lw	a5,24(sp)
   1065c:	02412703          	lw	a4,36(sp)
   10660:	06700893          	li	a7,103
   10664:	00e789b3          	add	s3,a5,a4
   10668:	01412783          	lw	a5,20(sp)
   1066c:	32f05e63          	blez	a5,109a8 <_vfprintf_r+0x2b4c>
   10670:	02012783          	lw	a5,32(sp)
   10674:	4007f713          	andi	a4,a5,1024
   10678:	2a071863          	bnez	a4,10928 <_vfprintf_r+0x2acc>
   1067c:	fff9c813          	not	a6,s3
   10680:	41f85813          	srai	a6,a6,0x1f
   10684:	04c12b03          	lw	s6,76(sp)
   10688:	0109fc33          	and	s8,s3,a6
   1068c:	e25ff06f          	j	104b0 <_vfprintf_r+0x2654>
   10690:	000b0d13          	mv	s10,s6
   10694:	b00fe06f          	j	e994 <_vfprintf_r+0xb38>
   10698:	02012783          	lw	a5,32(sp)
   1069c:	0017f713          	andi	a4,a5,1
   106a0:	01412783          	lw	a5,20(sp)
   106a4:	01276733          	or	a4,a4,s2
   106a8:	32f05e63          	blez	a5,109e4 <_vfprintf_r+0x2b88>
   106ac:	30071c63          	bnez	a4,109c4 <_vfprintf_r+0x2b68>
   106b0:	01412983          	lw	s3,20(sp)
   106b4:	06600893          	li	a7,102
   106b8:	fb9ff06f          	j	10670 <_vfprintf_r+0x2814>
   106bc:	000a0313          	mv	t1,s4
   106c0:	012686b3          	add	a3,a3,s2
   106c4:	00160613          	addi	a2,a2,1
   106c8:	01542023          	sw	s5,0(s0)
   106cc:	01242223          	sw	s2,4(s0)
   106d0:	0ed12623          	sw	a3,236(sp)
   106d4:	0ec12423          	sw	a2,232(sp)
   106d8:	00700593          	li	a1,7
   106dc:	00c5c463          	blt	a1,a2,106e4 <_vfprintf_r+0x2888>
   106e0:	c29fe06f          	j	f308 <_vfprintf_r+0x14ac>
   106e4:	00412503          	lw	a0,4(sp)
   106e8:	0e410613          	addi	a2,sp,228
   106ec:	000d8593          	mv	a1,s11
   106f0:	00612a23          	sw	t1,20(sp)
   106f4:	1e40a0ef          	jal	ra,1a8d8 <__sprint_r>
   106f8:	00050463          	beqz	a0,10700 <_vfprintf_r+0x28a4>
   106fc:	ebcfe06f          	j	edb8 <_vfprintf_r+0xf5c>
   10700:	0ec12683          	lw	a3,236(sp)
   10704:	0e812603          	lw	a2,232(sp)
   10708:	01412303          	lw	t1,20(sp)
   1070c:	10c10413          	addi	s0,sp,268
   10710:	adcff06f          	j	f9ec <_vfprintf_r+0x1b90>
   10714:	00db8c33          	add	s8,s7,a3
   10718:	04700a93          	li	s5,71
   1071c:	0a010b13          	addi	s6,sp,160
   10720:	ebdfe06f          	j	f5dc <_vfprintf_r+0x1780>
   10724:	0d412e23          	sw	s4,220(sp)
   10728:	fffac603          	lbu	a2,-1(s5)
   1072c:	00f3c583          	lbu	a1,15(t2)
   10730:	000a8693          	mv	a3,s5
   10734:	02c59063          	bne	a1,a2,10754 <_vfprintf_r+0x28f8>
   10738:	03000513          	li	a0,48
   1073c:	fea68fa3          	sb	a0,-1(a3)
   10740:	0dc12683          	lw	a3,220(sp)
   10744:	fff68793          	addi	a5,a3,-1
   10748:	0cf12e23          	sw	a5,220(sp)
   1074c:	fff6c603          	lbu	a2,-1(a3)
   10750:	fec586e3          	beq	a1,a2,1073c <_vfprintf_r+0x28e0>
   10754:	00160593          	addi	a1,a2,1
   10758:	03900513          	li	a0,57
   1075c:	0ff5f593          	zext.b	a1,a1
   10760:	00a60863          	beq	a2,a0,10770 <_vfprintf_r+0x2914>
   10764:	feb68fa3          	sb	a1,-1(a3)
   10768:	000a8b13          	mv	s6,s5
   1076c:	ae5ff06f          	j	10250 <_vfprintf_r+0x23f4>
   10770:	00a3c583          	lbu	a1,10(t2)
   10774:	feb68fa3          	sb	a1,-1(a3)
   10778:	ff1ff06f          	j	10768 <_vfprintf_r+0x290c>
   1077c:	0d610693          	addi	a3,sp,214
   10780:	00059863          	bnez	a1,10790 <_vfprintf_r+0x2934>
   10784:	03000693          	li	a3,48
   10788:	0cd10b23          	sb	a3,214(sp)
   1078c:	0d710693          	addi	a3,sp,215
   10790:	1b010793          	addi	a5,sp,432
   10794:	40f68633          	sub	a2,a3,a5
   10798:	03070713          	addi	a4,a4,48
   1079c:	0dd60793          	addi	a5,a2,221
   107a0:	00e68023          	sb	a4,0(a3)
   107a4:	02f12823          	sw	a5,48(sp)
   107a8:	d5cff06f          	j	fd04 <_vfprintf_r+0x1ea8>
   107ac:	02012783          	lw	a5,32(sp)
   107b0:	0017f713          	andi	a4,a5,1
   107b4:	d6070663          	beqz	a4,fd20 <_vfprintf_r+0x1ec4>
   107b8:	d60ff06f          	j	fd18 <_vfprintf_r+0x1ebc>
   107bc:	00048f93          	mv	t6,s1
   107c0:	000a8f13          	mv	t5,s5
   107c4:	06812883          	lw	a7,104(sp)
   107c8:	00090a93          	mv	s5,s2
   107cc:	06c12303          	lw	t1,108(sp)
   107d0:	04812a03          	lw	s4,72(sp)
   107d4:	07412403          	lw	s0,116(sp)
   107d8:	03c12383          	lw	t2,60(sp)
   107dc:	07812d83          	lw	s11,120(sp)
   107e0:	07c12b83          	lw	s7,124(sp)
   107e4:	06412483          	lw	s1,100(sp)
   107e8:	07012903          	lw	s2,112(sp)
   107ec:	000c0693          	mv	a3,s8
   107f0:	999ff06f          	j	10188 <_vfprintf_r+0x232c>
   107f4:	00090463          	beqz	s2,107fc <_vfprintf_r+0x29a0>
   107f8:	bcdfd06f          	j	e3c4 <_vfprintf_r+0x568>
   107fc:	00100913          	li	s2,1
   10800:	bc5fd06f          	j	e3c4 <_vfprintf_r+0x568>
   10804:	00600913          	li	s2,6
   10808:	bbdfd06f          	j	e3c4 <_vfprintf_r+0x568>
   1080c:	0b010993          	addi	s3,sp,176
   10810:	00098513          	mv	a0,s3
   10814:	04612a23          	sw	t1,84(sp)
   10818:	05112823          	sw	a7,80(sp)
   1081c:	0be12823          	sw	t5,176(sp)
   10820:	0bd12a23          	sw	t4,180(sp)
   10824:	0bc12c23          	sw	t3,184(sp)
   10828:	0ba12e23          	sw	s10,188(sp)
   1082c:	7b8110ef          	jal	ra,21fe4 <__trunctfdf2>
   10830:	0cc10613          	addi	a2,sp,204
   10834:	335060ef          	jal	ra,17368 <frexp>
   10838:	00058613          	mv	a2,a1
   1083c:	00050593          	mv	a1,a0
   10840:	00098513          	mv	a0,s3
   10844:	540110ef          	jal	ra,21d84 <__extenddftf2>
   10848:	0b012e83          	lw	t4,176(sp)
   1084c:	00013717          	auipc	a4,0x13
   10850:	fb470713          	addi	a4,a4,-76 # 23800 <zeroes.0+0x18>
   10854:	00072e03          	lw	t3,0(a4)
   10858:	09d12823          	sw	t4,144(sp)
   1085c:	0b412e83          	lw	t4,180(sp)
   10860:	00472803          	lw	a6,4(a4)
   10864:	00872683          	lw	a3,8(a4)
   10868:	09d12a23          	sw	t4,148(sp)
   1086c:	0b812e83          	lw	t4,184(sp)
   10870:	00c72703          	lw	a4,12(a4)
   10874:	09010793          	addi	a5,sp,144
   10878:	09d12c23          	sw	t4,152(sp)
   1087c:	0bc12e83          	lw	t4,188(sp)
   10880:	0a010b13          	addi	s6,sp,160
   10884:	08010613          	addi	a2,sp,128
   10888:	00078593          	mv	a1,a5
   1088c:	000b0513          	mv	a0,s6
   10890:	00f12a23          	sw	a5,20(sp)
   10894:	04c12223          	sw	a2,68(sp)
   10898:	09d12e23          	sw	t4,156(sp)
   1089c:	09c12023          	sw	t3,128(sp)
   108a0:	09012223          	sw	a6,132(sp)
   108a4:	08d12423          	sw	a3,136(sp)
   108a8:	08e12623          	sw	a4,140(sp)
   108ac:	1210e0ef          	jal	ra,1f1cc <__multf3>
   108b0:	0a012683          	lw	a3,160(sp)
   108b4:	0a412803          	lw	a6,164(sp)
   108b8:	0a812e03          	lw	t3,168(sp)
   108bc:	0ac12e83          	lw	t4,172(sp)
   108c0:	000b0593          	mv	a1,s6
   108c4:	00098513          	mv	a0,s3
   108c8:	0ad12823          	sw	a3,176(sp)
   108cc:	04d12423          	sw	a3,72(sp)
   108d0:	0b012a23          	sw	a6,180(sp)
   108d4:	03012e23          	sw	a6,60(sp)
   108d8:	0bc12c23          	sw	t3,184(sp)
   108dc:	01c12e23          	sw	t3,28(sp)
   108e0:	0bd12e23          	sw	t4,188(sp)
   108e4:	01d12c23          	sw	t4,24(sp)
   108e8:	0a012023          	sw	zero,160(sp)
   108ec:	0a012223          	sw	zero,164(sp)
   108f0:	0a012423          	sw	zero,168(sp)
   108f4:	0a012623          	sw	zero,172(sp)
   108f8:	5580e0ef          	jal	ra,1ee50 <__eqtf2>
   108fc:	01812e83          	lw	t4,24(sp)
   10900:	01c12e03          	lw	t3,28(sp)
   10904:	03c12803          	lw	a6,60(sp)
   10908:	04812683          	lw	a3,72(sp)
   1090c:	05012883          	lw	a7,80(sp)
   10910:	05412303          	lw	t1,84(sp)
   10914:	00013397          	auipc	t2,0x13
   10918:	c8c38393          	addi	t2,t2,-884 # 235a0 <__flash_rodata_start+0x150>
   1091c:	ea051263          	bnez	a0,ffc0 <_vfprintf_r+0x2164>
   10920:	e80ff06f          	j	ffa0 <_vfprintf_r+0x2144>
   10924:	06700893          	li	a7,103
   10928:	03412603          	lw	a2,52(sp)
   1092c:	0ff00693          	li	a3,255
   10930:	00064703          	lbu	a4,0(a2)
   10934:	10d70e63          	beq	a4,a3,10a50 <_vfprintf_r+0x2bf4>
   10938:	01412783          	lw	a5,20(sp)
   1093c:	00000513          	li	a0,0
   10940:	00000593          	li	a1,0
   10944:	00f75e63          	bge	a4,a5,10960 <_vfprintf_r+0x2b04>
   10948:	40e787b3          	sub	a5,a5,a4
   1094c:	00164703          	lbu	a4,1(a2)
   10950:	04070663          	beqz	a4,1099c <_vfprintf_r+0x2b40>
   10954:	00158593          	addi	a1,a1,1
   10958:	00160613          	addi	a2,a2,1
   1095c:	fed714e3          	bne	a4,a3,10944 <_vfprintf_r+0x2ae8>
   10960:	02c12a23          	sw	a2,52(sp)
   10964:	00f12a23          	sw	a5,20(sp)
   10968:	00b12e23          	sw	a1,28(sp)
   1096c:	02a12023          	sw	a0,32(sp)
   10970:	01c12783          	lw	a5,28(sp)
   10974:	02012703          	lw	a4,32(sp)
   10978:	04c12b03          	lw	s6,76(sp)
   1097c:	00e786b3          	add	a3,a5,a4
   10980:	04012783          	lw	a5,64(sp)
   10984:	02f686b3          	mul	a3,a3,a5
   10988:	013689b3          	add	s3,a3,s3
   1098c:	fff9c813          	not	a6,s3
   10990:	41f85813          	srai	a6,a6,0x1f
   10994:	0109fc33          	and	s8,s3,a6
   10998:	bacff06f          	j	fd44 <_vfprintf_r+0x1ee8>
   1099c:	00064703          	lbu	a4,0(a2)
   109a0:	00150513          	addi	a0,a0,1
   109a4:	fb9ff06f          	j	1095c <_vfprintf_r+0x2b00>
   109a8:	40f98f33          	sub	t5,s3,a5
   109ac:	001f0993          	addi	s3,t5,1
   109b0:	fff9c813          	not	a6,s3
   109b4:	41f85813          	srai	a6,a6,0x1f
   109b8:	04c12b03          	lw	s6,76(sp)
   109bc:	0109fc33          	and	s8,s3,a6
   109c0:	af1ff06f          	j	104b0 <_vfprintf_r+0x2654>
   109c4:	02412703          	lw	a4,36(sp)
   109c8:	06600893          	li	a7,102
   109cc:	00e78f33          	add	t5,a5,a4
   109d0:	012f09b3          	add	s3,t5,s2
   109d4:	c9dff06f          	j	10670 <_vfprintf_r+0x2814>
   109d8:	07000613          	li	a2,112
   109dc:	00100593          	li	a1,1
   109e0:	a8cff06f          	j	fc6c <_vfprintf_r+0x1e10>
   109e4:	00071c63          	bnez	a4,109fc <_vfprintf_r+0x2ba0>
   109e8:	04c12b03          	lw	s6,76(sp)
   109ec:	00100c13          	li	s8,1
   109f0:	06600893          	li	a7,102
   109f4:	00100993          	li	s3,1
   109f8:	ab9ff06f          	j	104b0 <_vfprintf_r+0x2654>
   109fc:	02412783          	lw	a5,36(sp)
   10a00:	04c12b03          	lw	s6,76(sp)
   10a04:	06600893          	li	a7,102
   10a08:	00178f13          	addi	t5,a5,1
   10a0c:	012f09b3          	add	s3,t5,s2
   10a10:	fff9c813          	not	a6,s3
   10a14:	41f85813          	srai	a6,a6,0x1f
   10a18:	0109fc33          	and	s8,s3,a6
   10a1c:	a95ff06f          	j	104b0 <_vfprintf_r+0x2654>
   10a20:	00200793          	li	a5,2
   10a24:	02f12823          	sw	a5,48(sp)
   10a28:	adcff06f          	j	fd04 <_vfprintf_r+0x1ea8>
   10a2c:	01012783          	lw	a5,16(sp)
   10a30:	0007a903          	lw	s2,0(a5)
   10a34:	00478793          	addi	a5,a5,4
   10a38:	00095463          	bgez	s2,10a40 <_vfprintf_r+0x2be4>
   10a3c:	fff00913          	li	s2,-1
   10a40:	0014c883          	lbu	a7,1(s1)
   10a44:	00f12823          	sw	a5,16(sp)
   10a48:	00070493          	mv	s1,a4
   10a4c:	db8fd06f          	j	e004 <_vfprintf_r+0x1a8>
   10a50:	02012023          	sw	zero,32(sp)
   10a54:	00012e23          	sw	zero,28(sp)
   10a58:	f19ff06f          	j	10970 <_vfprintf_r+0x2b14>
   10a5c:	00cdd783          	lhu	a5,12(s11)
   10a60:	0407e793          	ori	a5,a5,64
   10a64:	00fd9623          	sh	a5,12(s11)
   10a68:	f5cfd06f          	j	e1c4 <_vfprintf_r+0x368>

00010a6c <vfprintf>:
   10a6c:	00060693          	mv	a3,a2
   10a70:	00058613          	mv	a2,a1
   10a74:	00050593          	mv	a1,a0
   10a78:	00015517          	auipc	a0,0x15
   10a7c:	5c452503          	lw	a0,1476(a0) # 2603c <_impure_ptr>
   10a80:	bdcfd06f          	j	de5c <_vfprintf_r>

00010a84 <__sbprintf>:
   10a84:	00c59783          	lh	a5,12(a1)
   10a88:	00e5d703          	lhu	a4,14(a1)
   10a8c:	b7010113          	addi	sp,sp,-1168
   10a90:	ffd7f793          	andi	a5,a5,-3
   10a94:	01079793          	slli	a5,a5,0x10
   10a98:	0645a883          	lw	a7,100(a1)
   10a9c:	01c5a803          	lw	a6,28(a1)
   10aa0:	48812423          	sw	s0,1160(sp)
   10aa4:	01071713          	slli	a4,a4,0x10
   10aa8:	00058413          	mv	s0,a1
   10aac:	0107d793          	srli	a5,a5,0x10
   10ab0:	0245a583          	lw	a1,36(a1)
   10ab4:	00e7e7b3          	or	a5,a5,a4
   10ab8:	49212023          	sw	s2,1152(sp)
   10abc:	40000713          	li	a4,1024
   10ac0:	00050913          	mv	s2,a0
   10ac4:	00f12a23          	sw	a5,20(sp)
   10ac8:	06010513          	addi	a0,sp,96
   10acc:	07010793          	addi	a5,sp,112
   10ad0:	48112623          	sw	ra,1164(sp)
   10ad4:	48912223          	sw	s1,1156(sp)
   10ad8:	47312e23          	sw	s3,1148(sp)
   10adc:	00060493          	mv	s1,a2
   10ae0:	00068993          	mv	s3,a3
   10ae4:	07112623          	sw	a7,108(sp)
   10ae8:	03012223          	sw	a6,36(sp)
   10aec:	02b12623          	sw	a1,44(sp)
   10af0:	00f12423          	sw	a5,8(sp)
   10af4:	00f12c23          	sw	a5,24(sp)
   10af8:	00e12823          	sw	a4,16(sp)
   10afc:	00e12e23          	sw	a4,28(sp)
   10b00:	02012023          	sw	zero,32(sp)
   10b04:	484040ef          	jal	ra,14f88 <__retarget_lock_init_recursive>
   10b08:	00048613          	mv	a2,s1
   10b0c:	00098693          	mv	a3,s3
   10b10:	00810593          	addi	a1,sp,8
   10b14:	00090513          	mv	a0,s2
   10b18:	b44fd0ef          	jal	ra,de5c <_vfprintf_r>
   10b1c:	00050493          	mv	s1,a0
   10b20:	04055263          	bgez	a0,10b64 <__sbprintf+0xe0>
   10b24:	01415783          	lhu	a5,20(sp)
   10b28:	0407f793          	andi	a5,a5,64
   10b2c:	00078863          	beqz	a5,10b3c <__sbprintf+0xb8>
   10b30:	00c45783          	lhu	a5,12(s0)
   10b34:	0407e793          	ori	a5,a5,64
   10b38:	00f41623          	sh	a5,12(s0)
   10b3c:	06012503          	lw	a0,96(sp)
   10b40:	450040ef          	jal	ra,14f90 <__retarget_lock_close_recursive>
   10b44:	48c12083          	lw	ra,1164(sp)
   10b48:	48812403          	lw	s0,1160(sp)
   10b4c:	48012903          	lw	s2,1152(sp)
   10b50:	47c12983          	lw	s3,1148(sp)
   10b54:	00048513          	mv	a0,s1
   10b58:	48412483          	lw	s1,1156(sp)
   10b5c:	49010113          	addi	sp,sp,1168
   10b60:	00008067          	ret
   10b64:	00810593          	addi	a1,sp,8
   10b68:	00090513          	mv	a0,s2
   10b6c:	6a0000ef          	jal	ra,1120c <_fflush_r>
   10b70:	fa050ae3          	beqz	a0,10b24 <__sbprintf+0xa0>
   10b74:	fff00493          	li	s1,-1
   10b78:	fadff06f          	j	10b24 <__sbprintf+0xa0>

00010b7c <_write_r>:
   10b7c:	ff010113          	addi	sp,sp,-16
   10b80:	00058713          	mv	a4,a1
   10b84:	00812423          	sw	s0,8(sp)
   10b88:	00060593          	mv	a1,a2
   10b8c:	00050413          	mv	s0,a0
   10b90:	00068613          	mv	a2,a3
   10b94:	00070513          	mv	a0,a4
   10b98:	00017797          	auipc	a5,0x17
   10b9c:	1007a823          	sw	zero,272(a5) # 27ca8 <errno>
   10ba0:	00112623          	sw	ra,12(sp)
   10ba4:	33c120ef          	jal	ra,22ee0 <_write>
   10ba8:	fff00793          	li	a5,-1
   10bac:	00f50a63          	beq	a0,a5,10bc0 <_write_r+0x44>
   10bb0:	00c12083          	lw	ra,12(sp)
   10bb4:	00812403          	lw	s0,8(sp)
   10bb8:	01010113          	addi	sp,sp,16
   10bbc:	00008067          	ret
   10bc0:	00017797          	auipc	a5,0x17
   10bc4:	0e87a783          	lw	a5,232(a5) # 27ca8 <errno>
   10bc8:	fe0784e3          	beqz	a5,10bb0 <_write_r+0x34>
   10bcc:	00c12083          	lw	ra,12(sp)
   10bd0:	00f42023          	sw	a5,0(s0)
   10bd4:	00812403          	lw	s0,8(sp)
   10bd8:	01010113          	addi	sp,sp,16
   10bdc:	00008067          	ret

00010be0 <__swsetup_r>:
   10be0:	ff010113          	addi	sp,sp,-16
   10be4:	00812423          	sw	s0,8(sp)
   10be8:	00912223          	sw	s1,4(sp)
   10bec:	00112623          	sw	ra,12(sp)
   10bf0:	00015797          	auipc	a5,0x15
   10bf4:	44c7a783          	lw	a5,1100(a5) # 2603c <_impure_ptr>
   10bf8:	00050493          	mv	s1,a0
   10bfc:	00058413          	mv	s0,a1
   10c00:	00078663          	beqz	a5,10c0c <__swsetup_r+0x2c>
   10c04:	0387a703          	lw	a4,56(a5)
   10c08:	08070063          	beqz	a4,10c88 <__swsetup_r+0xa8>
   10c0c:	00c41783          	lh	a5,12(s0)
   10c10:	0087f713          	andi	a4,a5,8
   10c14:	08070463          	beqz	a4,10c9c <__swsetup_r+0xbc>
   10c18:	01042703          	lw	a4,16(s0)
   10c1c:	0a070063          	beqz	a4,10cbc <__swsetup_r+0xdc>
   10c20:	0017f693          	andi	a3,a5,1
   10c24:	02068863          	beqz	a3,10c54 <__swsetup_r+0x74>
   10c28:	01442683          	lw	a3,20(s0)
   10c2c:	00042423          	sw	zero,8(s0)
   10c30:	00000513          	li	a0,0
   10c34:	40d006b3          	neg	a3,a3
   10c38:	00d42c23          	sw	a3,24(s0)
   10c3c:	02070a63          	beqz	a4,10c70 <__swsetup_r+0x90>
   10c40:	00c12083          	lw	ra,12(sp)
   10c44:	00812403          	lw	s0,8(sp)
   10c48:	00412483          	lw	s1,4(sp)
   10c4c:	01010113          	addi	sp,sp,16
   10c50:	00008067          	ret
   10c54:	0027f693          	andi	a3,a5,2
   10c58:	00000613          	li	a2,0
   10c5c:	00069463          	bnez	a3,10c64 <__swsetup_r+0x84>
   10c60:	01442603          	lw	a2,20(s0)
   10c64:	00c42423          	sw	a2,8(s0)
   10c68:	00000513          	li	a0,0
   10c6c:	fc071ae3          	bnez	a4,10c40 <__swsetup_r+0x60>
   10c70:	0807f713          	andi	a4,a5,128
   10c74:	fc0706e3          	beqz	a4,10c40 <__swsetup_r+0x60>
   10c78:	0407e793          	ori	a5,a5,64
   10c7c:	00f41623          	sh	a5,12(s0)
   10c80:	fff00513          	li	a0,-1
   10c84:	fbdff06f          	j	10c40 <__swsetup_r+0x60>
   10c88:	00078513          	mv	a0,a5
   10c8c:	039000ef          	jal	ra,114c4 <__sinit>
   10c90:	00c41783          	lh	a5,12(s0)
   10c94:	0087f713          	andi	a4,a5,8
   10c98:	f80710e3          	bnez	a4,10c18 <__swsetup_r+0x38>
   10c9c:	0107f713          	andi	a4,a5,16
   10ca0:	06070a63          	beqz	a4,10d14 <__swsetup_r+0x134>
   10ca4:	0047f713          	andi	a4,a5,4
   10ca8:	02071c63          	bnez	a4,10ce0 <__swsetup_r+0x100>
   10cac:	01042703          	lw	a4,16(s0)
   10cb0:	0087e793          	ori	a5,a5,8
   10cb4:	00f41623          	sh	a5,12(s0)
   10cb8:	f60714e3          	bnez	a4,10c20 <__swsetup_r+0x40>
   10cbc:	2807f693          	andi	a3,a5,640
   10cc0:	20000613          	li	a2,512
   10cc4:	f4c68ee3          	beq	a3,a2,10c20 <__swsetup_r+0x40>
   10cc8:	00040593          	mv	a1,s0
   10ccc:	00048513          	mv	a0,s1
   10cd0:	2e4040ef          	jal	ra,14fb4 <__smakebuf_r>
   10cd4:	00c41783          	lh	a5,12(s0)
   10cd8:	01042703          	lw	a4,16(s0)
   10cdc:	f45ff06f          	j	10c20 <__swsetup_r+0x40>
   10ce0:	03042583          	lw	a1,48(s0)
   10ce4:	00058e63          	beqz	a1,10d00 <__swsetup_r+0x120>
   10ce8:	04040713          	addi	a4,s0,64
   10cec:	00e58863          	beq	a1,a4,10cfc <__swsetup_r+0x11c>
   10cf0:	00048513          	mv	a0,s1
   10cf4:	509000ef          	jal	ra,119fc <_free_r>
   10cf8:	00c41783          	lh	a5,12(s0)
   10cfc:	02042823          	sw	zero,48(s0)
   10d00:	01042703          	lw	a4,16(s0)
   10d04:	fdb7f793          	andi	a5,a5,-37
   10d08:	00042223          	sw	zero,4(s0)
   10d0c:	00e42023          	sw	a4,0(s0)
   10d10:	fa1ff06f          	j	10cb0 <__swsetup_r+0xd0>
   10d14:	00900713          	li	a4,9
   10d18:	00e4a023          	sw	a4,0(s1)
   10d1c:	0407e793          	ori	a5,a5,64
   10d20:	f5dff06f          	j	10c7c <__swsetup_r+0x9c>

00010d24 <__register_exitproc>:
   10d24:	fe010113          	addi	sp,sp,-32
   10d28:	01212823          	sw	s2,16(sp)
   10d2c:	00015917          	auipc	s2,0x15
   10d30:	31490913          	addi	s2,s2,788 # 26040 <__atexit_recursive_mutex>
   10d34:	00812c23          	sw	s0,24(sp)
   10d38:	00050413          	mv	s0,a0
   10d3c:	00092503          	lw	a0,0(s2)
   10d40:	00912a23          	sw	s1,20(sp)
   10d44:	01312623          	sw	s3,12(sp)
   10d48:	01412423          	sw	s4,8(sp)
   10d4c:	00112e23          	sw	ra,28(sp)
   10d50:	00058493          	mv	s1,a1
   10d54:	00060a13          	mv	s4,a2
   10d58:	00068993          	mv	s3,a3
   10d5c:	23c040ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   10d60:	00013717          	auipc	a4,0x13
   10d64:	6d072703          	lw	a4,1744(a4) # 24430 <_global_impure_ptr>
   10d68:	14872783          	lw	a5,328(a4)
   10d6c:	08078663          	beqz	a5,10df8 <__register_exitproc+0xd4>
   10d70:	0047a703          	lw	a4,4(a5)
   10d74:	01f00593          	li	a1,31
   10d78:	00092503          	lw	a0,0(s2)
   10d7c:	08e5c463          	blt	a1,a4,10e04 <__register_exitproc+0xe0>
   10d80:	00271593          	slli	a1,a4,0x2
   10d84:	02041e63          	bnez	s0,10dc0 <__register_exitproc+0x9c>
   10d88:	00170713          	addi	a4,a4,1
   10d8c:	00e7a223          	sw	a4,4(a5)
   10d90:	00b787b3          	add	a5,a5,a1
   10d94:	0097a423          	sw	s1,8(a5)
   10d98:	218040ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   10d9c:	00000513          	li	a0,0
   10da0:	01c12083          	lw	ra,28(sp)
   10da4:	01812403          	lw	s0,24(sp)
   10da8:	01412483          	lw	s1,20(sp)
   10dac:	01012903          	lw	s2,16(sp)
   10db0:	00c12983          	lw	s3,12(sp)
   10db4:	00812a03          	lw	s4,8(sp)
   10db8:	02010113          	addi	sp,sp,32
   10dbc:	00008067          	ret
   10dc0:	00b78833          	add	a6,a5,a1
   10dc4:	09482423          	sw	s4,136(a6)
   10dc8:	1887a683          	lw	a3,392(a5)
   10dcc:	00100613          	li	a2,1
   10dd0:	00e61633          	sll	a2,a2,a4
   10dd4:	00c6e6b3          	or	a3,a3,a2
   10dd8:	18d7a423          	sw	a3,392(a5)
   10ddc:	11382423          	sw	s3,264(a6)
   10de0:	00200693          	li	a3,2
   10de4:	fad412e3          	bne	s0,a3,10d88 <__register_exitproc+0x64>
   10de8:	18c7a683          	lw	a3,396(a5)
   10dec:	00c6e6b3          	or	a3,a3,a2
   10df0:	18d7a623          	sw	a3,396(a5)
   10df4:	f95ff06f          	j	10d88 <__register_exitproc+0x64>
   10df8:	14c70793          	addi	a5,a4,332
   10dfc:	14f72423          	sw	a5,328(a4)
   10e00:	f71ff06f          	j	10d70 <__register_exitproc+0x4c>
   10e04:	1ac040ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   10e08:	fff00513          	li	a0,-1
   10e0c:	f95ff06f          	j	10da0 <__register_exitproc+0x7c>

00010e10 <__call_exitprocs>:
   10e10:	fd010113          	addi	sp,sp,-48
   10e14:	01712623          	sw	s7,12(sp)
   10e18:	00015b97          	auipc	s7,0x15
   10e1c:	228b8b93          	addi	s7,s7,552 # 26040 <__atexit_recursive_mutex>
   10e20:	01612823          	sw	s6,16(sp)
   10e24:	00050b13          	mv	s6,a0
   10e28:	000ba503          	lw	a0,0(s7)
   10e2c:	03212023          	sw	s2,32(sp)
   10e30:	01312e23          	sw	s3,28(sp)
   10e34:	01412c23          	sw	s4,24(sp)
   10e38:	01512a23          	sw	s5,20(sp)
   10e3c:	01812423          	sw	s8,8(sp)
   10e40:	02112623          	sw	ra,44(sp)
   10e44:	02812423          	sw	s0,40(sp)
   10e48:	02912223          	sw	s1,36(sp)
   10e4c:	01912223          	sw	s9,4(sp)
   10e50:	00058c13          	mv	s8,a1
   10e54:	144040ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   10e58:	00013a17          	auipc	s4,0x13
   10e5c:	5d8a2a03          	lw	s4,1496(s4) # 24430 <_global_impure_ptr>
   10e60:	148a2903          	lw	s2,328(s4)
   10e64:	00100a93          	li	s5,1
   10e68:	fff00993          	li	s3,-1
   10e6c:	02090863          	beqz	s2,10e9c <__call_exitprocs+0x8c>
   10e70:	00492483          	lw	s1,4(s2)
   10e74:	fff48413          	addi	s0,s1,-1
   10e78:	02044263          	bltz	s0,10e9c <__call_exitprocs+0x8c>
   10e7c:	00249493          	slli	s1,s1,0x2
   10e80:	009904b3          	add	s1,s2,s1
   10e84:	040c0863          	beqz	s8,10ed4 <__call_exitprocs+0xc4>
   10e88:	1044a783          	lw	a5,260(s1)
   10e8c:	05878463          	beq	a5,s8,10ed4 <__call_exitprocs+0xc4>
   10e90:	fff40413          	addi	s0,s0,-1
   10e94:	ffc48493          	addi	s1,s1,-4
   10e98:	ff3416e3          	bne	s0,s3,10e84 <__call_exitprocs+0x74>
   10e9c:	02812403          	lw	s0,40(sp)
   10ea0:	000ba503          	lw	a0,0(s7)
   10ea4:	02c12083          	lw	ra,44(sp)
   10ea8:	02412483          	lw	s1,36(sp)
   10eac:	02012903          	lw	s2,32(sp)
   10eb0:	01c12983          	lw	s3,28(sp)
   10eb4:	01812a03          	lw	s4,24(sp)
   10eb8:	01412a83          	lw	s5,20(sp)
   10ebc:	01012b03          	lw	s6,16(sp)
   10ec0:	00c12b83          	lw	s7,12(sp)
   10ec4:	00812c03          	lw	s8,8(sp)
   10ec8:	00412c83          	lw	s9,4(sp)
   10ecc:	03010113          	addi	sp,sp,48
   10ed0:	0e00406f          	j	14fb0 <__retarget_lock_release_recursive>
   10ed4:	00492783          	lw	a5,4(s2)
   10ed8:	0044a683          	lw	a3,4(s1)
   10edc:	fff78793          	addi	a5,a5,-1
   10ee0:	04878e63          	beq	a5,s0,10f3c <__call_exitprocs+0x12c>
   10ee4:	0004a223          	sw	zero,4(s1)
   10ee8:	fa0684e3          	beqz	a3,10e90 <__call_exitprocs+0x80>
   10eec:	18892783          	lw	a5,392(s2)
   10ef0:	008a9733          	sll	a4,s5,s0
   10ef4:	00492c83          	lw	s9,4(s2)
   10ef8:	00f777b3          	and	a5,a4,a5
   10efc:	02079263          	bnez	a5,10f20 <__call_exitprocs+0x110>
   10f00:	000680e7          	jalr	a3
   10f04:	00492703          	lw	a4,4(s2)
   10f08:	148a2783          	lw	a5,328(s4)
   10f0c:	01971463          	bne	a4,s9,10f14 <__call_exitprocs+0x104>
   10f10:	f92780e3          	beq	a5,s2,10e90 <__call_exitprocs+0x80>
   10f14:	f80784e3          	beqz	a5,10e9c <__call_exitprocs+0x8c>
   10f18:	00078913          	mv	s2,a5
   10f1c:	f55ff06f          	j	10e70 <__call_exitprocs+0x60>
   10f20:	18c92783          	lw	a5,396(s2)
   10f24:	0844a583          	lw	a1,132(s1)
   10f28:	00f77733          	and	a4,a4,a5
   10f2c:	00071c63          	bnez	a4,10f44 <__call_exitprocs+0x134>
   10f30:	000b0513          	mv	a0,s6
   10f34:	000680e7          	jalr	a3
   10f38:	fcdff06f          	j	10f04 <__call_exitprocs+0xf4>
   10f3c:	00892223          	sw	s0,4(s2)
   10f40:	fa9ff06f          	j	10ee8 <__call_exitprocs+0xd8>
   10f44:	00058513          	mv	a0,a1
   10f48:	000680e7          	jalr	a3
   10f4c:	fb9ff06f          	j	10f04 <__call_exitprocs+0xf4>

00010f50 <register_fini>:
   10f50:	00000793          	li	a5,0
   10f54:	00078863          	beqz	a5,10f64 <register_fini+0x14>
   10f58:	00001517          	auipc	a0,0x1
   10f5c:	90850513          	addi	a0,a0,-1784 # 11860 <__libc_fini_array>
   10f60:	ef4fc06f          	j	d654 <atexit>
   10f64:	00008067          	ret

00010f68 <_close_r>:
   10f68:	ff010113          	addi	sp,sp,-16
   10f6c:	00812423          	sw	s0,8(sp)
   10f70:	00050413          	mv	s0,a0
   10f74:	00058513          	mv	a0,a1
   10f78:	00017797          	auipc	a5,0x17
   10f7c:	d207a823          	sw	zero,-720(a5) # 27ca8 <errno>
   10f80:	00112623          	sw	ra,12(sp)
   10f84:	450110ef          	jal	ra,223d4 <_close>
   10f88:	fff00793          	li	a5,-1
   10f8c:	00f50a63          	beq	a0,a5,10fa0 <_close_r+0x38>
   10f90:	00c12083          	lw	ra,12(sp)
   10f94:	00812403          	lw	s0,8(sp)
   10f98:	01010113          	addi	sp,sp,16
   10f9c:	00008067          	ret
   10fa0:	00017797          	auipc	a5,0x17
   10fa4:	d087a783          	lw	a5,-760(a5) # 27ca8 <errno>
   10fa8:	fe0784e3          	beqz	a5,10f90 <_close_r+0x28>
   10fac:	00c12083          	lw	ra,12(sp)
   10fb0:	00f42023          	sw	a5,0(s0)
   10fb4:	00812403          	lw	s0,8(sp)
   10fb8:	01010113          	addi	sp,sp,16
   10fbc:	00008067          	ret

00010fc0 <__sflush_r>:
   10fc0:	00c59783          	lh	a5,12(a1)
   10fc4:	fe010113          	addi	sp,sp,-32
   10fc8:	00812c23          	sw	s0,24(sp)
   10fcc:	01312623          	sw	s3,12(sp)
   10fd0:	00112e23          	sw	ra,28(sp)
   10fd4:	00912a23          	sw	s1,20(sp)
   10fd8:	01212823          	sw	s2,16(sp)
   10fdc:	0087f713          	andi	a4,a5,8
   10fe0:	00058413          	mv	s0,a1
   10fe4:	00050993          	mv	s3,a0
   10fe8:	12071263          	bnez	a4,1110c <__sflush_r+0x14c>
   10fec:	00001737          	lui	a4,0x1
   10ff0:	80070713          	addi	a4,a4,-2048 # 800 <prvInitialiseNewTask+0x290>
   10ff4:	0045a683          	lw	a3,4(a1)
   10ff8:	00e7e733          	or	a4,a5,a4
   10ffc:	00e59623          	sh	a4,12(a1)
   11000:	18d05863          	blez	a3,11190 <__sflush_r+0x1d0>
   11004:	02842803          	lw	a6,40(s0)
   11008:	0e080263          	beqz	a6,110ec <__sflush_r+0x12c>
   1100c:	00c7d793          	srli	a5,a5,0xc
   11010:	0009a483          	lw	s1,0(s3)
   11014:	0017f793          	andi	a5,a5,1
   11018:	0009a023          	sw	zero,0(s3)
   1101c:	01c42583          	lw	a1,28(s0)
   11020:	18079063          	bnez	a5,111a0 <__sflush_r+0x1e0>
   11024:	00000613          	li	a2,0
   11028:	00100693          	li	a3,1
   1102c:	00098513          	mv	a0,s3
   11030:	000800e7          	jalr	a6
   11034:	fff00793          	li	a5,-1
   11038:	00050613          	mv	a2,a0
   1103c:	1af50063          	beq	a0,a5,111dc <__sflush_r+0x21c>
   11040:	00c41703          	lh	a4,12(s0)
   11044:	02842803          	lw	a6,40(s0)
   11048:	01c42583          	lw	a1,28(s0)
   1104c:	00477713          	andi	a4,a4,4
   11050:	00070e63          	beqz	a4,1106c <__sflush_r+0xac>
   11054:	00442703          	lw	a4,4(s0)
   11058:	03042783          	lw	a5,48(s0)
   1105c:	40e60633          	sub	a2,a2,a4
   11060:	00078663          	beqz	a5,1106c <__sflush_r+0xac>
   11064:	03c42783          	lw	a5,60(s0)
   11068:	40f60633          	sub	a2,a2,a5
   1106c:	00000693          	li	a3,0
   11070:	00098513          	mv	a0,s3
   11074:	000800e7          	jalr	a6
   11078:	fff00793          	li	a5,-1
   1107c:	12f51663          	bne	a0,a5,111a8 <__sflush_r+0x1e8>
   11080:	0009a683          	lw	a3,0(s3)
   11084:	01d00793          	li	a5,29
   11088:	0cd7ee63          	bltu	a5,a3,11164 <__sflush_r+0x1a4>
   1108c:	dfc00737          	lui	a4,0xdfc00
   11090:	ffe70713          	addi	a4,a4,-2 # dfbffffe <__alt_data_end+0xdfbbfffe>
   11094:	40d75733          	sra	a4,a4,a3
   11098:	00177713          	andi	a4,a4,1
   1109c:	00c41783          	lh	a5,12(s0)
   110a0:	0c071463          	bnez	a4,11168 <__sflush_r+0x1a8>
   110a4:	01042603          	lw	a2,16(s0)
   110a8:	fffff737          	lui	a4,0xfffff
   110ac:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffbf7ff>
   110b0:	00e7f733          	and	a4,a5,a4
   110b4:	00c7d793          	srli	a5,a5,0xc
   110b8:	00e41623          	sh	a4,12(s0)
   110bc:	00042223          	sw	zero,4(s0)
   110c0:	00c42023          	sw	a2,0(s0)
   110c4:	0017f793          	andi	a5,a5,1
   110c8:	12079c63          	bnez	a5,11200 <__sflush_r+0x240>
   110cc:	03042583          	lw	a1,48(s0)
   110d0:	0099a023          	sw	s1,0(s3)
   110d4:	00058c63          	beqz	a1,110ec <__sflush_r+0x12c>
   110d8:	04040793          	addi	a5,s0,64
   110dc:	00f58663          	beq	a1,a5,110e8 <__sflush_r+0x128>
   110e0:	00098513          	mv	a0,s3
   110e4:	119000ef          	jal	ra,119fc <_free_r>
   110e8:	02042823          	sw	zero,48(s0)
   110ec:	00000513          	li	a0,0
   110f0:	01c12083          	lw	ra,28(sp)
   110f4:	01812403          	lw	s0,24(sp)
   110f8:	01412483          	lw	s1,20(sp)
   110fc:	01012903          	lw	s2,16(sp)
   11100:	00c12983          	lw	s3,12(sp)
   11104:	02010113          	addi	sp,sp,32
   11108:	00008067          	ret
   1110c:	0105a903          	lw	s2,16(a1)
   11110:	fc090ee3          	beqz	s2,110ec <__sflush_r+0x12c>
   11114:	0005a483          	lw	s1,0(a1)
   11118:	0037f793          	andi	a5,a5,3
   1111c:	0125a023          	sw	s2,0(a1)
   11120:	412484b3          	sub	s1,s1,s2
   11124:	00000713          	li	a4,0
   11128:	00079463          	bnez	a5,11130 <__sflush_r+0x170>
   1112c:	0145a703          	lw	a4,20(a1)
   11130:	00e42423          	sw	a4,8(s0)
   11134:	00904863          	bgtz	s1,11144 <__sflush_r+0x184>
   11138:	fb5ff06f          	j	110ec <__sflush_r+0x12c>
   1113c:	00a90933          	add	s2,s2,a0
   11140:	fa9056e3          	blez	s1,110ec <__sflush_r+0x12c>
   11144:	02442783          	lw	a5,36(s0)
   11148:	01c42583          	lw	a1,28(s0)
   1114c:	00048693          	mv	a3,s1
   11150:	00090613          	mv	a2,s2
   11154:	00098513          	mv	a0,s3
   11158:	000780e7          	jalr	a5
   1115c:	40a484b3          	sub	s1,s1,a0
   11160:	fca04ee3          	bgtz	a0,1113c <__sflush_r+0x17c>
   11164:	00c41783          	lh	a5,12(s0)
   11168:	0407e793          	ori	a5,a5,64
   1116c:	01c12083          	lw	ra,28(sp)
   11170:	00f41623          	sh	a5,12(s0)
   11174:	01812403          	lw	s0,24(sp)
   11178:	01412483          	lw	s1,20(sp)
   1117c:	01012903          	lw	s2,16(sp)
   11180:	00c12983          	lw	s3,12(sp)
   11184:	fff00513          	li	a0,-1
   11188:	02010113          	addi	sp,sp,32
   1118c:	00008067          	ret
   11190:	03c5a683          	lw	a3,60(a1)
   11194:	e6d048e3          	bgtz	a3,11004 <__sflush_r+0x44>
   11198:	00000513          	li	a0,0
   1119c:	f55ff06f          	j	110f0 <__sflush_r+0x130>
   111a0:	05042603          	lw	a2,80(s0)
   111a4:	ea9ff06f          	j	1104c <__sflush_r+0x8c>
   111a8:	00c41783          	lh	a5,12(s0)
   111ac:	01042683          	lw	a3,16(s0)
   111b0:	fffff737          	lui	a4,0xfffff
   111b4:	7ff70713          	addi	a4,a4,2047 # fffff7ff <__alt_data_end+0xfffbf7ff>
   111b8:	00e7f733          	and	a4,a5,a4
   111bc:	00c7d793          	srli	a5,a5,0xc
   111c0:	00e41623          	sh	a4,12(s0)
   111c4:	00042223          	sw	zero,4(s0)
   111c8:	00d42023          	sw	a3,0(s0)
   111cc:	0017f793          	andi	a5,a5,1
   111d0:	ee078ee3          	beqz	a5,110cc <__sflush_r+0x10c>
   111d4:	04a42823          	sw	a0,80(s0)
   111d8:	ef5ff06f          	j	110cc <__sflush_r+0x10c>
   111dc:	0009a783          	lw	a5,0(s3)
   111e0:	e60780e3          	beqz	a5,11040 <__sflush_r+0x80>
   111e4:	01d00713          	li	a4,29
   111e8:	00e78663          	beq	a5,a4,111f4 <__sflush_r+0x234>
   111ec:	01600713          	li	a4,22
   111f0:	f6e79ae3          	bne	a5,a4,11164 <__sflush_r+0x1a4>
   111f4:	0099a023          	sw	s1,0(s3)
   111f8:	00000513          	li	a0,0
   111fc:	ef5ff06f          	j	110f0 <__sflush_r+0x130>
   11200:	ec0696e3          	bnez	a3,110cc <__sflush_r+0x10c>
   11204:	04a42823          	sw	a0,80(s0)
   11208:	ec5ff06f          	j	110cc <__sflush_r+0x10c>

0001120c <_fflush_r>:
   1120c:	ff010113          	addi	sp,sp,-16
   11210:	00812423          	sw	s0,8(sp)
   11214:	00912223          	sw	s1,4(sp)
   11218:	00112623          	sw	ra,12(sp)
   1121c:	01212023          	sw	s2,0(sp)
   11220:	00050493          	mv	s1,a0
   11224:	00058413          	mv	s0,a1
   11228:	00050663          	beqz	a0,11234 <_fflush_r+0x28>
   1122c:	03852783          	lw	a5,56(a0)
   11230:	06078463          	beqz	a5,11298 <_fflush_r+0x8c>
   11234:	00c41783          	lh	a5,12(s0)
   11238:	00000913          	li	s2,0
   1123c:	04078063          	beqz	a5,1127c <_fflush_r+0x70>
   11240:	06442703          	lw	a4,100(s0)
   11244:	00177713          	andi	a4,a4,1
   11248:	00071663          	bnez	a4,11254 <_fflush_r+0x48>
   1124c:	2007f793          	andi	a5,a5,512
   11250:	04078863          	beqz	a5,112a0 <_fflush_r+0x94>
   11254:	00040593          	mv	a1,s0
   11258:	00048513          	mv	a0,s1
   1125c:	d65ff0ef          	jal	ra,10fc0 <__sflush_r>
   11260:	06442783          	lw	a5,100(s0)
   11264:	00050913          	mv	s2,a0
   11268:	0017f793          	andi	a5,a5,1
   1126c:	00079863          	bnez	a5,1127c <_fflush_r+0x70>
   11270:	00c45783          	lhu	a5,12(s0)
   11274:	2007f793          	andi	a5,a5,512
   11278:	04078863          	beqz	a5,112c8 <_fflush_r+0xbc>
   1127c:	00c12083          	lw	ra,12(sp)
   11280:	00812403          	lw	s0,8(sp)
   11284:	00412483          	lw	s1,4(sp)
   11288:	00090513          	mv	a0,s2
   1128c:	00012903          	lw	s2,0(sp)
   11290:	01010113          	addi	sp,sp,16
   11294:	00008067          	ret
   11298:	22c000ef          	jal	ra,114c4 <__sinit>
   1129c:	f99ff06f          	j	11234 <_fflush_r+0x28>
   112a0:	05842503          	lw	a0,88(s0)
   112a4:	4f5030ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   112a8:	00040593          	mv	a1,s0
   112ac:	00048513          	mv	a0,s1
   112b0:	d11ff0ef          	jal	ra,10fc0 <__sflush_r>
   112b4:	06442783          	lw	a5,100(s0)
   112b8:	00050913          	mv	s2,a0
   112bc:	0017f793          	andi	a5,a5,1
   112c0:	fa079ee3          	bnez	a5,1127c <_fflush_r+0x70>
   112c4:	fadff06f          	j	11270 <_fflush_r+0x64>
   112c8:	05842503          	lw	a0,88(s0)
   112cc:	4e5030ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   112d0:	00c12083          	lw	ra,12(sp)
   112d4:	00812403          	lw	s0,8(sp)
   112d8:	00412483          	lw	s1,4(sp)
   112dc:	00090513          	mv	a0,s2
   112e0:	00012903          	lw	s2,0(sp)
   112e4:	01010113          	addi	sp,sp,16
   112e8:	00008067          	ret

000112ec <fflush>:
   112ec:	0a050c63          	beqz	a0,113a4 <fflush+0xb8>
   112f0:	ff010113          	addi	sp,sp,-16
   112f4:	00812423          	sw	s0,8(sp)
   112f8:	01212023          	sw	s2,0(sp)
   112fc:	00112623          	sw	ra,12(sp)
   11300:	00912223          	sw	s1,4(sp)
   11304:	00015917          	auipc	s2,0x15
   11308:	d3892903          	lw	s2,-712(s2) # 2603c <_impure_ptr>
   1130c:	00050413          	mv	s0,a0
   11310:	00090663          	beqz	s2,1131c <fflush+0x30>
   11314:	03892783          	lw	a5,56(s2)
   11318:	06078463          	beqz	a5,11380 <fflush+0x94>
   1131c:	00c41783          	lh	a5,12(s0)
   11320:	00000493          	li	s1,0
   11324:	04078063          	beqz	a5,11364 <fflush+0x78>
   11328:	06442703          	lw	a4,100(s0)
   1132c:	00177713          	andi	a4,a4,1
   11330:	00071663          	bnez	a4,1133c <fflush+0x50>
   11334:	2007f793          	andi	a5,a5,512
   11338:	04078a63          	beqz	a5,1138c <fflush+0xa0>
   1133c:	00040593          	mv	a1,s0
   11340:	00090513          	mv	a0,s2
   11344:	c7dff0ef          	jal	ra,10fc0 <__sflush_r>
   11348:	06442783          	lw	a5,100(s0)
   1134c:	00050493          	mv	s1,a0
   11350:	0017f793          	andi	a5,a5,1
   11354:	00079863          	bnez	a5,11364 <fflush+0x78>
   11358:	00c45783          	lhu	a5,12(s0)
   1135c:	2007f793          	andi	a5,a5,512
   11360:	02078c63          	beqz	a5,11398 <fflush+0xac>
   11364:	00c12083          	lw	ra,12(sp)
   11368:	00812403          	lw	s0,8(sp)
   1136c:	00012903          	lw	s2,0(sp)
   11370:	00048513          	mv	a0,s1
   11374:	00412483          	lw	s1,4(sp)
   11378:	01010113          	addi	sp,sp,16
   1137c:	00008067          	ret
   11380:	00090513          	mv	a0,s2
   11384:	140000ef          	jal	ra,114c4 <__sinit>
   11388:	f95ff06f          	j	1131c <fflush+0x30>
   1138c:	05842503          	lw	a0,88(s0)
   11390:	409030ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   11394:	fa9ff06f          	j	1133c <fflush+0x50>
   11398:	05842503          	lw	a0,88(s0)
   1139c:	415030ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   113a0:	fc5ff06f          	j	11364 <fflush+0x78>
   113a4:	00000597          	auipc	a1,0x0
   113a8:	e6858593          	addi	a1,a1,-408 # 1120c <_fflush_r>
   113ac:	00013517          	auipc	a0,0x13
   113b0:	08452503          	lw	a0,132(a0) # 24430 <_global_impure_ptr>
   113b4:	6950006f          	j	12248 <_fwalk_reent>

000113b8 <_cleanup_r>:
   113b8:	0000b597          	auipc	a1,0xb
   113bc:	bcc58593          	addi	a1,a1,-1076 # 1bf84 <_fclose_r>
   113c0:	6890006f          	j	12248 <_fwalk_reent>

000113c4 <__fp_lock>:
   113c4:	06452783          	lw	a5,100(a0)
   113c8:	0017f793          	andi	a5,a5,1
   113cc:	00079863          	bnez	a5,113dc <__fp_lock+0x18>
   113d0:	00c55783          	lhu	a5,12(a0)
   113d4:	2007f793          	andi	a5,a5,512
   113d8:	00078663          	beqz	a5,113e4 <__fp_lock+0x20>
   113dc:	00000513          	li	a0,0
   113e0:	00008067          	ret
   113e4:	05852503          	lw	a0,88(a0)
   113e8:	ff010113          	addi	sp,sp,-16
   113ec:	00112623          	sw	ra,12(sp)
   113f0:	3a9030ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   113f4:	00c12083          	lw	ra,12(sp)
   113f8:	00000513          	li	a0,0
   113fc:	01010113          	addi	sp,sp,16
   11400:	00008067          	ret

00011404 <__fp_unlock>:
   11404:	06452783          	lw	a5,100(a0)
   11408:	0017f793          	andi	a5,a5,1
   1140c:	00079863          	bnez	a5,1141c <__fp_unlock+0x18>
   11410:	00c55783          	lhu	a5,12(a0)
   11414:	2007f793          	andi	a5,a5,512
   11418:	00078663          	beqz	a5,11424 <__fp_unlock+0x20>
   1141c:	00000513          	li	a0,0
   11420:	00008067          	ret
   11424:	05852503          	lw	a0,88(a0)
   11428:	ff010113          	addi	sp,sp,-16
   1142c:	00112623          	sw	ra,12(sp)
   11430:	381030ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   11434:	00c12083          	lw	ra,12(sp)
   11438:	00000513          	li	a0,0
   1143c:	01010113          	addi	sp,sp,16
   11440:	00008067          	ret

00011444 <__sfmoreglue>:
   11444:	ff010113          	addi	sp,sp,-16
   11448:	00912223          	sw	s1,4(sp)
   1144c:	06800793          	li	a5,104
   11450:	fff58493          	addi	s1,a1,-1
   11454:	02f484b3          	mul	s1,s1,a5
   11458:	01212023          	sw	s2,0(sp)
   1145c:	00058913          	mv	s2,a1
   11460:	00812423          	sw	s0,8(sp)
   11464:	00112623          	sw	ra,12(sp)
   11468:	07448593          	addi	a1,s1,116
   1146c:	5b1030ef          	jal	ra,1521c <_malloc_r>
   11470:	00050413          	mv	s0,a0
   11474:	02050063          	beqz	a0,11494 <__sfmoreglue+0x50>
   11478:	00c50513          	addi	a0,a0,12
   1147c:	00042023          	sw	zero,0(s0)
   11480:	01242223          	sw	s2,4(s0)
   11484:	00a42423          	sw	a0,8(s0)
   11488:	06848613          	addi	a2,s1,104
   1148c:	00000593          	li	a1,0
   11490:	bb0fc0ef          	jal	ra,d840 <memset>
   11494:	00c12083          	lw	ra,12(sp)
   11498:	00040513          	mv	a0,s0
   1149c:	00812403          	lw	s0,8(sp)
   114a0:	00412483          	lw	s1,4(sp)
   114a4:	00012903          	lw	s2,0(sp)
   114a8:	01010113          	addi	sp,sp,16
   114ac:	00008067          	ret

000114b0 <_cleanup>:
   114b0:	0000b597          	auipc	a1,0xb
   114b4:	ad458593          	addi	a1,a1,-1324 # 1bf84 <_fclose_r>
   114b8:	00013517          	auipc	a0,0x13
   114bc:	f7852503          	lw	a0,-136(a0) # 24430 <_global_impure_ptr>
   114c0:	5890006f          	j	12248 <_fwalk_reent>

000114c4 <__sinit>:
   114c4:	fe010113          	addi	sp,sp,-32
   114c8:	00912a23          	sw	s1,20(sp)
   114cc:	00050493          	mv	s1,a0
   114d0:	00017517          	auipc	a0,0x17
   114d4:	80050513          	addi	a0,a0,-2048 # 27cd0 <__lock___sinit_recursive_mutex>
   114d8:	00112e23          	sw	ra,28(sp)
   114dc:	00812c23          	sw	s0,24(sp)
   114e0:	01212823          	sw	s2,16(sp)
   114e4:	01312623          	sw	s3,12(sp)
   114e8:	01412423          	sw	s4,8(sp)
   114ec:	01512223          	sw	s5,4(sp)
   114f0:	2a9030ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   114f4:	0384a783          	lw	a5,56(s1)
   114f8:	14079863          	bnez	a5,11648 <__sinit+0x184>
   114fc:	0044a403          	lw	s0,4(s1)
   11500:	00000717          	auipc	a4,0x0
   11504:	eb870713          	addi	a4,a4,-328 # 113b8 <_cleanup_r>
   11508:	02e4ae23          	sw	a4,60(s1)
   1150c:	2ec48793          	addi	a5,s1,748
   11510:	00300713          	li	a4,3
   11514:	2ee4a223          	sw	a4,740(s1)
   11518:	2ef4a423          	sw	a5,744(s1)
   1151c:	2e04a023          	sw	zero,736(s1)
   11520:	00400793          	li	a5,4
   11524:	00f42623          	sw	a5,12(s0)
   11528:	00800613          	li	a2,8
   1152c:	00000593          	li	a1,0
   11530:	00042023          	sw	zero,0(s0)
   11534:	00042223          	sw	zero,4(s0)
   11538:	00042423          	sw	zero,8(s0)
   1153c:	06042223          	sw	zero,100(s0)
   11540:	00042823          	sw	zero,16(s0)
   11544:	00042a23          	sw	zero,20(s0)
   11548:	00042c23          	sw	zero,24(s0)
   1154c:	05c40513          	addi	a0,s0,92
   11550:	af0fc0ef          	jal	ra,d840 <memset>
   11554:	00006a97          	auipc	s5,0x6
   11558:	594a8a93          	addi	s5,s5,1428 # 17ae8 <__sread>
   1155c:	00006a17          	auipc	s4,0x6
   11560:	5f0a0a13          	addi	s4,s4,1520 # 17b4c <__swrite>
   11564:	00006997          	auipc	s3,0x6
   11568:	67098993          	addi	s3,s3,1648 # 17bd4 <__sseek>
   1156c:	00006917          	auipc	s2,0x6
   11570:	6e090913          	addi	s2,s2,1760 # 17c4c <__sclose>
   11574:	05840513          	addi	a0,s0,88
   11578:	00842e23          	sw	s0,28(s0)
   1157c:	03542023          	sw	s5,32(s0)
   11580:	03442223          	sw	s4,36(s0)
   11584:	03342423          	sw	s3,40(s0)
   11588:	03242623          	sw	s2,44(s0)
   1158c:	1fd030ef          	jal	ra,14f88 <__retarget_lock_init_recursive>
   11590:	0084a403          	lw	s0,8(s1)
   11594:	000107b7          	lui	a5,0x10
   11598:	00878793          	addi	a5,a5,8 # 10008 <_vfprintf_r+0x21ac>
   1159c:	00f42623          	sw	a5,12(s0)
   115a0:	00800613          	li	a2,8
   115a4:	00000593          	li	a1,0
   115a8:	00042023          	sw	zero,0(s0)
   115ac:	00042223          	sw	zero,4(s0)
   115b0:	00042423          	sw	zero,8(s0)
   115b4:	06042223          	sw	zero,100(s0)
   115b8:	00042823          	sw	zero,16(s0)
   115bc:	00042a23          	sw	zero,20(s0)
   115c0:	00042c23          	sw	zero,24(s0)
   115c4:	05c40513          	addi	a0,s0,92
   115c8:	a78fc0ef          	jal	ra,d840 <memset>
   115cc:	05840513          	addi	a0,s0,88
   115d0:	00842e23          	sw	s0,28(s0)
   115d4:	03542023          	sw	s5,32(s0)
   115d8:	03442223          	sw	s4,36(s0)
   115dc:	03342423          	sw	s3,40(s0)
   115e0:	03242623          	sw	s2,44(s0)
   115e4:	1a5030ef          	jal	ra,14f88 <__retarget_lock_init_recursive>
   115e8:	00c4a403          	lw	s0,12(s1)
   115ec:	000207b7          	lui	a5,0x20
   115f0:	01278793          	addi	a5,a5,18 # 20012 <__multf3+0xe46>
   115f4:	00f42623          	sw	a5,12(s0)
   115f8:	00800613          	li	a2,8
   115fc:	00000593          	li	a1,0
   11600:	00042023          	sw	zero,0(s0)
   11604:	00042223          	sw	zero,4(s0)
   11608:	00042423          	sw	zero,8(s0)
   1160c:	06042223          	sw	zero,100(s0)
   11610:	00042823          	sw	zero,16(s0)
   11614:	00042a23          	sw	zero,20(s0)
   11618:	00042c23          	sw	zero,24(s0)
   1161c:	05c40513          	addi	a0,s0,92
   11620:	a20fc0ef          	jal	ra,d840 <memset>
   11624:	05840513          	addi	a0,s0,88
   11628:	00842e23          	sw	s0,28(s0)
   1162c:	03542023          	sw	s5,32(s0)
   11630:	03442223          	sw	s4,36(s0)
   11634:	03342423          	sw	s3,40(s0)
   11638:	03242623          	sw	s2,44(s0)
   1163c:	14d030ef          	jal	ra,14f88 <__retarget_lock_init_recursive>
   11640:	00100793          	li	a5,1
   11644:	02f4ac23          	sw	a5,56(s1)
   11648:	01812403          	lw	s0,24(sp)
   1164c:	01c12083          	lw	ra,28(sp)
   11650:	01412483          	lw	s1,20(sp)
   11654:	01012903          	lw	s2,16(sp)
   11658:	00c12983          	lw	s3,12(sp)
   1165c:	00812a03          	lw	s4,8(sp)
   11660:	00412a83          	lw	s5,4(sp)
   11664:	00016517          	auipc	a0,0x16
   11668:	66c50513          	addi	a0,a0,1644 # 27cd0 <__lock___sinit_recursive_mutex>
   1166c:	02010113          	addi	sp,sp,32
   11670:	1410306f          	j	14fb0 <__retarget_lock_release_recursive>

00011674 <__sfp>:
   11674:	fe010113          	addi	sp,sp,-32
   11678:	01312623          	sw	s3,12(sp)
   1167c:	00050993          	mv	s3,a0
   11680:	00016517          	auipc	a0,0x16
   11684:	64c50513          	addi	a0,a0,1612 # 27ccc <__lock___sfp_recursive_mutex>
   11688:	01212823          	sw	s2,16(sp)
   1168c:	00112e23          	sw	ra,28(sp)
   11690:	00812c23          	sw	s0,24(sp)
   11694:	00912a23          	sw	s1,20(sp)
   11698:	101030ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   1169c:	00013917          	auipc	s2,0x13
   116a0:	d9492903          	lw	s2,-620(s2) # 24430 <_global_impure_ptr>
   116a4:	03892783          	lw	a5,56(s2)
   116a8:	0c078063          	beqz	a5,11768 <__sfp+0xf4>
   116ac:	2e090913          	addi	s2,s2,736
   116b0:	fff00493          	li	s1,-1
   116b4:	00492783          	lw	a5,4(s2)
   116b8:	00892403          	lw	s0,8(s2)
   116bc:	fff78793          	addi	a5,a5,-1
   116c0:	0007d863          	bgez	a5,116d0 <__sfp+0x5c>
   116c4:	0940006f          	j	11758 <__sfp+0xe4>
   116c8:	06840413          	addi	s0,s0,104
   116cc:	08978663          	beq	a5,s1,11758 <__sfp+0xe4>
   116d0:	00c41703          	lh	a4,12(s0)
   116d4:	fff78793          	addi	a5,a5,-1
   116d8:	fe0718e3          	bnez	a4,116c8 <__sfp+0x54>
   116dc:	ffff07b7          	lui	a5,0xffff0
   116e0:	00178793          	addi	a5,a5,1 # ffff0001 <__alt_data_end+0xfffb0001>
   116e4:	00f42623          	sw	a5,12(s0)
   116e8:	05840513          	addi	a0,s0,88
   116ec:	06042223          	sw	zero,100(s0)
   116f0:	099030ef          	jal	ra,14f88 <__retarget_lock_init_recursive>
   116f4:	00016517          	auipc	a0,0x16
   116f8:	5d850513          	addi	a0,a0,1496 # 27ccc <__lock___sfp_recursive_mutex>
   116fc:	0b5030ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   11700:	00800613          	li	a2,8
   11704:	00042023          	sw	zero,0(s0)
   11708:	00042423          	sw	zero,8(s0)
   1170c:	00042223          	sw	zero,4(s0)
   11710:	00042823          	sw	zero,16(s0)
   11714:	00042a23          	sw	zero,20(s0)
   11718:	00042c23          	sw	zero,24(s0)
   1171c:	00000593          	li	a1,0
   11720:	05c40513          	addi	a0,s0,92
   11724:	91cfc0ef          	jal	ra,d840 <memset>
   11728:	02042823          	sw	zero,48(s0)
   1172c:	02042a23          	sw	zero,52(s0)
   11730:	04042223          	sw	zero,68(s0)
   11734:	04042423          	sw	zero,72(s0)
   11738:	01c12083          	lw	ra,28(sp)
   1173c:	00040513          	mv	a0,s0
   11740:	01812403          	lw	s0,24(sp)
   11744:	01412483          	lw	s1,20(sp)
   11748:	01012903          	lw	s2,16(sp)
   1174c:	00c12983          	lw	s3,12(sp)
   11750:	02010113          	addi	sp,sp,32
   11754:	00008067          	ret
   11758:	00092403          	lw	s0,0(s2)
   1175c:	00040c63          	beqz	s0,11774 <__sfp+0x100>
   11760:	00040913          	mv	s2,s0
   11764:	f51ff06f          	j	116b4 <__sfp+0x40>
   11768:	00090513          	mv	a0,s2
   1176c:	d59ff0ef          	jal	ra,114c4 <__sinit>
   11770:	f3dff06f          	j	116ac <__sfp+0x38>
   11774:	1ac00593          	li	a1,428
   11778:	00098513          	mv	a0,s3
   1177c:	2a1030ef          	jal	ra,1521c <_malloc_r>
   11780:	00050413          	mv	s0,a0
   11784:	02050863          	beqz	a0,117b4 <__sfp+0x140>
   11788:	00c50513          	addi	a0,a0,12
   1178c:	00400793          	li	a5,4
   11790:	00042023          	sw	zero,0(s0)
   11794:	00f42223          	sw	a5,4(s0)
   11798:	00a42423          	sw	a0,8(s0)
   1179c:	1a000613          	li	a2,416
   117a0:	00000593          	li	a1,0
   117a4:	89cfc0ef          	jal	ra,d840 <memset>
   117a8:	00892023          	sw	s0,0(s2)
   117ac:	00040913          	mv	s2,s0
   117b0:	f05ff06f          	j	116b4 <__sfp+0x40>
   117b4:	00092023          	sw	zero,0(s2)
   117b8:	00016517          	auipc	a0,0x16
   117bc:	51450513          	addi	a0,a0,1300 # 27ccc <__lock___sfp_recursive_mutex>
   117c0:	7f0030ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   117c4:	00c00793          	li	a5,12
   117c8:	00f9a023          	sw	a5,0(s3)
   117cc:	f6dff06f          	j	11738 <__sfp+0xc4>

000117d0 <__sfp_lock_acquire>:
   117d0:	00016517          	auipc	a0,0x16
   117d4:	4fc50513          	addi	a0,a0,1276 # 27ccc <__lock___sfp_recursive_mutex>
   117d8:	7c00306f          	j	14f98 <__retarget_lock_acquire_recursive>

000117dc <__sfp_lock_release>:
   117dc:	00016517          	auipc	a0,0x16
   117e0:	4f050513          	addi	a0,a0,1264 # 27ccc <__lock___sfp_recursive_mutex>
   117e4:	7cc0306f          	j	14fb0 <__retarget_lock_release_recursive>

000117e8 <__sinit_lock_acquire>:
   117e8:	00016517          	auipc	a0,0x16
   117ec:	4e850513          	addi	a0,a0,1256 # 27cd0 <__lock___sinit_recursive_mutex>
   117f0:	7a80306f          	j	14f98 <__retarget_lock_acquire_recursive>

000117f4 <__sinit_lock_release>:
   117f4:	00016517          	auipc	a0,0x16
   117f8:	4dc50513          	addi	a0,a0,1244 # 27cd0 <__lock___sinit_recursive_mutex>
   117fc:	7b40306f          	j	14fb0 <__retarget_lock_release_recursive>

00011800 <__fp_lock_all>:
   11800:	ff010113          	addi	sp,sp,-16
   11804:	00016517          	auipc	a0,0x16
   11808:	4c850513          	addi	a0,a0,1224 # 27ccc <__lock___sfp_recursive_mutex>
   1180c:	00112623          	sw	ra,12(sp)
   11810:	788030ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   11814:	00c12083          	lw	ra,12(sp)
   11818:	00015517          	auipc	a0,0x15
   1181c:	82452503          	lw	a0,-2012(a0) # 2603c <_impure_ptr>
   11820:	00000597          	auipc	a1,0x0
   11824:	ba458593          	addi	a1,a1,-1116 # 113c4 <__fp_lock>
   11828:	01010113          	addi	sp,sp,16
   1182c:	1790006f          	j	121a4 <_fwalk>

00011830 <__fp_unlock_all>:
   11830:	ff010113          	addi	sp,sp,-16
   11834:	00000597          	auipc	a1,0x0
   11838:	bd058593          	addi	a1,a1,-1072 # 11404 <__fp_unlock>
   1183c:	00015517          	auipc	a0,0x15
   11840:	80052503          	lw	a0,-2048(a0) # 2603c <_impure_ptr>
   11844:	00112623          	sw	ra,12(sp)
   11848:	15d000ef          	jal	ra,121a4 <_fwalk>
   1184c:	00c12083          	lw	ra,12(sp)
   11850:	00016517          	auipc	a0,0x16
   11854:	47c50513          	addi	a0,a0,1148 # 27ccc <__lock___sfp_recursive_mutex>
   11858:	01010113          	addi	sp,sp,16
   1185c:	7540306f          	j	14fb0 <__retarget_lock_release_recursive>

00011860 <__libc_fini_array>:
   11860:	ff010113          	addi	sp,sp,-16
   11864:	00812423          	sw	s0,8(sp)
   11868:	00012797          	auipc	a5,0x12
   1186c:	be478793          	addi	a5,a5,-1052 # 2344c <__fini_array_end>
   11870:	00012417          	auipc	s0,0x12
   11874:	bdc40413          	addi	s0,s0,-1060 # 2344c <__fini_array_end>
   11878:	40f40433          	sub	s0,s0,a5
   1187c:	00912223          	sw	s1,4(sp)
   11880:	00112623          	sw	ra,12(sp)
   11884:	40245493          	srai	s1,s0,0x2
   11888:	02048063          	beqz	s1,118a8 <__libc_fini_array+0x48>
   1188c:	ffc40413          	addi	s0,s0,-4
   11890:	00f40433          	add	s0,s0,a5
   11894:	00042783          	lw	a5,0(s0)
   11898:	fff48493          	addi	s1,s1,-1
   1189c:	ffc40413          	addi	s0,s0,-4
   118a0:	000780e7          	jalr	a5
   118a4:	fe0498e3          	bnez	s1,11894 <__libc_fini_array+0x34>
   118a8:	00c12083          	lw	ra,12(sp)
   118ac:	00812403          	lw	s0,8(sp)
   118b0:	00412483          	lw	s1,4(sp)
   118b4:	01010113          	addi	sp,sp,16
   118b8:	00008067          	ret

000118bc <_malloc_trim_r>:
   118bc:	fe010113          	addi	sp,sp,-32
   118c0:	00812c23          	sw	s0,24(sp)
   118c4:	00912a23          	sw	s1,20(sp)
   118c8:	01212823          	sw	s2,16(sp)
   118cc:	01312623          	sw	s3,12(sp)
   118d0:	01412423          	sw	s4,8(sp)
   118d4:	00058993          	mv	s3,a1
   118d8:	00112e23          	sw	ra,28(sp)
   118dc:	00014a17          	auipc	s4,0x14
   118e0:	1b4a0a13          	addi	s4,s4,436 # 25a90 <__malloc_av_>
   118e4:	00050913          	mv	s2,a0
   118e8:	eb0f60ef          	jal	ra,7f98 <__malloc_lock>
   118ec:	008a2703          	lw	a4,8(s4)
   118f0:	000017b7          	lui	a5,0x1
   118f4:	fef78413          	addi	s0,a5,-17 # fef <uxTaskPriorityGetFromISR+0x17>
   118f8:	00472483          	lw	s1,4(a4)
   118fc:	ffc4f493          	andi	s1,s1,-4
   11900:	00848433          	add	s0,s1,s0
   11904:	41340433          	sub	s0,s0,s3
   11908:	00c45413          	srli	s0,s0,0xc
   1190c:	fff40413          	addi	s0,s0,-1
   11910:	00c41413          	slli	s0,s0,0xc
   11914:	00f44e63          	blt	s0,a5,11930 <_malloc_trim_r+0x74>
   11918:	00000593          	li	a1,0
   1191c:	00090513          	mv	a0,s2
   11920:	2f9050ef          	jal	ra,17418 <_sbrk_r>
   11924:	008a2783          	lw	a5,8(s4)
   11928:	009787b3          	add	a5,a5,s1
   1192c:	02f50863          	beq	a0,a5,1195c <_malloc_trim_r+0xa0>
   11930:	00090513          	mv	a0,s2
   11934:	fc0f60ef          	jal	ra,80f4 <__malloc_unlock>
   11938:	01c12083          	lw	ra,28(sp)
   1193c:	01812403          	lw	s0,24(sp)
   11940:	01412483          	lw	s1,20(sp)
   11944:	01012903          	lw	s2,16(sp)
   11948:	00c12983          	lw	s3,12(sp)
   1194c:	00812a03          	lw	s4,8(sp)
   11950:	00000513          	li	a0,0
   11954:	02010113          	addi	sp,sp,32
   11958:	00008067          	ret
   1195c:	408005b3          	neg	a1,s0
   11960:	00090513          	mv	a0,s2
   11964:	2b5050ef          	jal	ra,17418 <_sbrk_r>
   11968:	fff00793          	li	a5,-1
   1196c:	04f50a63          	beq	a0,a5,119c0 <_malloc_trim_r+0x104>
   11970:	0002a717          	auipc	a4,0x2a
   11974:	e3c70713          	addi	a4,a4,-452 # 3b7ac <__malloc_current_mallinfo>
   11978:	00072783          	lw	a5,0(a4)
   1197c:	008a2683          	lw	a3,8(s4)
   11980:	408484b3          	sub	s1,s1,s0
   11984:	0014e493          	ori	s1,s1,1
   11988:	408787b3          	sub	a5,a5,s0
   1198c:	00090513          	mv	a0,s2
   11990:	0096a223          	sw	s1,4(a3)
   11994:	00f72023          	sw	a5,0(a4)
   11998:	f5cf60ef          	jal	ra,80f4 <__malloc_unlock>
   1199c:	01c12083          	lw	ra,28(sp)
   119a0:	01812403          	lw	s0,24(sp)
   119a4:	01412483          	lw	s1,20(sp)
   119a8:	01012903          	lw	s2,16(sp)
   119ac:	00c12983          	lw	s3,12(sp)
   119b0:	00812a03          	lw	s4,8(sp)
   119b4:	00100513          	li	a0,1
   119b8:	02010113          	addi	sp,sp,32
   119bc:	00008067          	ret
   119c0:	00000593          	li	a1,0
   119c4:	00090513          	mv	a0,s2
   119c8:	251050ef          	jal	ra,17418 <_sbrk_r>
   119cc:	008a2703          	lw	a4,8(s4)
   119d0:	00f00693          	li	a3,15
   119d4:	40e507b3          	sub	a5,a0,a4
   119d8:	f4f6dce3          	bge	a3,a5,11930 <_malloc_trim_r+0x74>
   119dc:	00014697          	auipc	a3,0x14
   119e0:	6686a683          	lw	a3,1640(a3) # 26044 <__malloc_sbrk_base>
   119e4:	40d50533          	sub	a0,a0,a3
   119e8:	0017e793          	ori	a5,a5,1
   119ec:	0002a697          	auipc	a3,0x2a
   119f0:	dca6a023          	sw	a0,-576(a3) # 3b7ac <__malloc_current_mallinfo>
   119f4:	00f72223          	sw	a5,4(a4)
   119f8:	f39ff06f          	j	11930 <_malloc_trim_r+0x74>

000119fc <_free_r>:
   119fc:	18058263          	beqz	a1,11b80 <_free_r+0x184>
   11a00:	ff010113          	addi	sp,sp,-16
   11a04:	00812423          	sw	s0,8(sp)
   11a08:	00912223          	sw	s1,4(sp)
   11a0c:	00058413          	mv	s0,a1
   11a10:	00050493          	mv	s1,a0
   11a14:	00112623          	sw	ra,12(sp)
   11a18:	d80f60ef          	jal	ra,7f98 <__malloc_lock>
   11a1c:	ffc42583          	lw	a1,-4(s0)
   11a20:	ff840713          	addi	a4,s0,-8
   11a24:	00014517          	auipc	a0,0x14
   11a28:	06c50513          	addi	a0,a0,108 # 25a90 <__malloc_av_>
   11a2c:	ffe5f793          	andi	a5,a1,-2
   11a30:	00f70633          	add	a2,a4,a5
   11a34:	00462683          	lw	a3,4(a2)
   11a38:	00852803          	lw	a6,8(a0)
   11a3c:	ffc6f693          	andi	a3,a3,-4
   11a40:	1ac80263          	beq	a6,a2,11be4 <_free_r+0x1e8>
   11a44:	00d62223          	sw	a3,4(a2)
   11a48:	0015f593          	andi	a1,a1,1
   11a4c:	00d60833          	add	a6,a2,a3
   11a50:	0a059063          	bnez	a1,11af0 <_free_r+0xf4>
   11a54:	ff842303          	lw	t1,-8(s0)
   11a58:	00482583          	lw	a1,4(a6)
   11a5c:	00014897          	auipc	a7,0x14
   11a60:	03c88893          	addi	a7,a7,60 # 25a98 <__malloc_av_+0x8>
   11a64:	40670733          	sub	a4,a4,t1
   11a68:	00872803          	lw	a6,8(a4)
   11a6c:	006787b3          	add	a5,a5,t1
   11a70:	0015f593          	andi	a1,a1,1
   11a74:	15180263          	beq	a6,a7,11bb8 <_free_r+0x1bc>
   11a78:	00c72303          	lw	t1,12(a4)
   11a7c:	00682623          	sw	t1,12(a6)
   11a80:	01032423          	sw	a6,8(t1)
   11a84:	1a058a63          	beqz	a1,11c38 <_free_r+0x23c>
   11a88:	0017e693          	ori	a3,a5,1
   11a8c:	00d72223          	sw	a3,4(a4)
   11a90:	00f62023          	sw	a5,0(a2)
   11a94:	1ff00693          	li	a3,511
   11a98:	06f6ec63          	bltu	a3,a5,11b10 <_free_r+0x114>
   11a9c:	ff87f693          	andi	a3,a5,-8
   11aa0:	00868693          	addi	a3,a3,8
   11aa4:	00452583          	lw	a1,4(a0)
   11aa8:	00d506b3          	add	a3,a0,a3
   11aac:	0006a603          	lw	a2,0(a3)
   11ab0:	0057d813          	srli	a6,a5,0x5
   11ab4:	00100793          	li	a5,1
   11ab8:	010797b3          	sll	a5,a5,a6
   11abc:	00b7e7b3          	or	a5,a5,a1
   11ac0:	ff868593          	addi	a1,a3,-8
   11ac4:	00b72623          	sw	a1,12(a4)
   11ac8:	00c72423          	sw	a2,8(a4)
   11acc:	00f52223          	sw	a5,4(a0)
   11ad0:	00e6a023          	sw	a4,0(a3)
   11ad4:	00e62623          	sw	a4,12(a2)
   11ad8:	00812403          	lw	s0,8(sp)
   11adc:	00c12083          	lw	ra,12(sp)
   11ae0:	00048513          	mv	a0,s1
   11ae4:	00412483          	lw	s1,4(sp)
   11ae8:	01010113          	addi	sp,sp,16
   11aec:	e08f606f          	j	80f4 <__malloc_unlock>
   11af0:	00482583          	lw	a1,4(a6)
   11af4:	0015f593          	andi	a1,a1,1
   11af8:	08058663          	beqz	a1,11b84 <_free_r+0x188>
   11afc:	0017e693          	ori	a3,a5,1
   11b00:	fed42e23          	sw	a3,-4(s0)
   11b04:	00f62023          	sw	a5,0(a2)
   11b08:	1ff00693          	li	a3,511
   11b0c:	f8f6f8e3          	bgeu	a3,a5,11a9c <_free_r+0xa0>
   11b10:	0097d693          	srli	a3,a5,0x9
   11b14:	00400613          	li	a2,4
   11b18:	12d66463          	bltu	a2,a3,11c40 <_free_r+0x244>
   11b1c:	0067d693          	srli	a3,a5,0x6
   11b20:	03968593          	addi	a1,a3,57
   11b24:	03868613          	addi	a2,a3,56
   11b28:	00359593          	slli	a1,a1,0x3
   11b2c:	00b505b3          	add	a1,a0,a1
   11b30:	0005a683          	lw	a3,0(a1)
   11b34:	ff858593          	addi	a1,a1,-8
   11b38:	00d59863          	bne	a1,a3,11b48 <_free_r+0x14c>
   11b3c:	15c0006f          	j	11c98 <_free_r+0x29c>
   11b40:	0086a683          	lw	a3,8(a3)
   11b44:	00d58863          	beq	a1,a3,11b54 <_free_r+0x158>
   11b48:	0046a603          	lw	a2,4(a3)
   11b4c:	ffc67613          	andi	a2,a2,-4
   11b50:	fec7e8e3          	bltu	a5,a2,11b40 <_free_r+0x144>
   11b54:	00c6a583          	lw	a1,12(a3)
   11b58:	00b72623          	sw	a1,12(a4)
   11b5c:	00d72423          	sw	a3,8(a4)
   11b60:	00812403          	lw	s0,8(sp)
   11b64:	00c12083          	lw	ra,12(sp)
   11b68:	00e5a423          	sw	a4,8(a1)
   11b6c:	00048513          	mv	a0,s1
   11b70:	00412483          	lw	s1,4(sp)
   11b74:	00e6a623          	sw	a4,12(a3)
   11b78:	01010113          	addi	sp,sp,16
   11b7c:	d78f606f          	j	80f4 <__malloc_unlock>
   11b80:	00008067          	ret
   11b84:	00d787b3          	add	a5,a5,a3
   11b88:	00014897          	auipc	a7,0x14
   11b8c:	f1088893          	addi	a7,a7,-240 # 25a98 <__malloc_av_+0x8>
   11b90:	00862683          	lw	a3,8(a2)
   11b94:	0f168063          	beq	a3,a7,11c74 <_free_r+0x278>
   11b98:	00c62803          	lw	a6,12(a2)
   11b9c:	0017e593          	ori	a1,a5,1
   11ba0:	00f70633          	add	a2,a4,a5
   11ba4:	0106a623          	sw	a6,12(a3)
   11ba8:	00d82423          	sw	a3,8(a6)
   11bac:	00b72223          	sw	a1,4(a4)
   11bb0:	00f62023          	sw	a5,0(a2)
   11bb4:	ee1ff06f          	j	11a94 <_free_r+0x98>
   11bb8:	14059063          	bnez	a1,11cf8 <_free_r+0x2fc>
   11bbc:	00862583          	lw	a1,8(a2)
   11bc0:	00c62603          	lw	a2,12(a2)
   11bc4:	00f686b3          	add	a3,a3,a5
   11bc8:	0016e793          	ori	a5,a3,1
   11bcc:	00c5a623          	sw	a2,12(a1)
   11bd0:	00b62423          	sw	a1,8(a2)
   11bd4:	00f72223          	sw	a5,4(a4)
   11bd8:	00d70733          	add	a4,a4,a3
   11bdc:	00d72023          	sw	a3,0(a4)
   11be0:	ef9ff06f          	j	11ad8 <_free_r+0xdc>
   11be4:	0015f593          	andi	a1,a1,1
   11be8:	00d786b3          	add	a3,a5,a3
   11bec:	02059063          	bnez	a1,11c0c <_free_r+0x210>
   11bf0:	ff842583          	lw	a1,-8(s0)
   11bf4:	40b70733          	sub	a4,a4,a1
   11bf8:	00c72783          	lw	a5,12(a4)
   11bfc:	00872603          	lw	a2,8(a4)
   11c00:	00b686b3          	add	a3,a3,a1
   11c04:	00f62623          	sw	a5,12(a2)
   11c08:	00c7a423          	sw	a2,8(a5)
   11c0c:	0016e793          	ori	a5,a3,1
   11c10:	00f72223          	sw	a5,4(a4)
   11c14:	00e52423          	sw	a4,8(a0)
   11c18:	00014797          	auipc	a5,0x14
   11c1c:	4307a783          	lw	a5,1072(a5) # 26048 <__malloc_trim_threshold>
   11c20:	eaf6ece3          	bltu	a3,a5,11ad8 <_free_r+0xdc>
   11c24:	00016597          	auipc	a1,0x16
   11c28:	0b85a583          	lw	a1,184(a1) # 27cdc <__malloc_top_pad>
   11c2c:	00048513          	mv	a0,s1
   11c30:	c8dff0ef          	jal	ra,118bc <_malloc_trim_r>
   11c34:	ea5ff06f          	j	11ad8 <_free_r+0xdc>
   11c38:	00d787b3          	add	a5,a5,a3
   11c3c:	f55ff06f          	j	11b90 <_free_r+0x194>
   11c40:	01400613          	li	a2,20
   11c44:	02d67063          	bgeu	a2,a3,11c64 <_free_r+0x268>
   11c48:	05400613          	li	a2,84
   11c4c:	06d66463          	bltu	a2,a3,11cb4 <_free_r+0x2b8>
   11c50:	00c7d693          	srli	a3,a5,0xc
   11c54:	06f68593          	addi	a1,a3,111
   11c58:	06e68613          	addi	a2,a3,110
   11c5c:	00359593          	slli	a1,a1,0x3
   11c60:	ecdff06f          	j	11b2c <_free_r+0x130>
   11c64:	05c68593          	addi	a1,a3,92
   11c68:	05b68613          	addi	a2,a3,91
   11c6c:	00359593          	slli	a1,a1,0x3
   11c70:	ebdff06f          	j	11b2c <_free_r+0x130>
   11c74:	00e52a23          	sw	a4,20(a0)
   11c78:	00e52823          	sw	a4,16(a0)
   11c7c:	0017e693          	ori	a3,a5,1
   11c80:	01172623          	sw	a7,12(a4)
   11c84:	01172423          	sw	a7,8(a4)
   11c88:	00d72223          	sw	a3,4(a4)
   11c8c:	00f70733          	add	a4,a4,a5
   11c90:	00f72023          	sw	a5,0(a4)
   11c94:	e45ff06f          	j	11ad8 <_free_r+0xdc>
   11c98:	00452803          	lw	a6,4(a0)
   11c9c:	40265613          	srai	a2,a2,0x2
   11ca0:	00100793          	li	a5,1
   11ca4:	00c797b3          	sll	a5,a5,a2
   11ca8:	0107e7b3          	or	a5,a5,a6
   11cac:	00f52223          	sw	a5,4(a0)
   11cb0:	ea9ff06f          	j	11b58 <_free_r+0x15c>
   11cb4:	15400613          	li	a2,340
   11cb8:	00d66c63          	bltu	a2,a3,11cd0 <_free_r+0x2d4>
   11cbc:	00f7d693          	srli	a3,a5,0xf
   11cc0:	07868593          	addi	a1,a3,120
   11cc4:	07768613          	addi	a2,a3,119
   11cc8:	00359593          	slli	a1,a1,0x3
   11ccc:	e61ff06f          	j	11b2c <_free_r+0x130>
   11cd0:	55400613          	li	a2,1364
   11cd4:	00d66c63          	bltu	a2,a3,11cec <_free_r+0x2f0>
   11cd8:	0127d693          	srli	a3,a5,0x12
   11cdc:	07d68593          	addi	a1,a3,125
   11ce0:	07c68613          	addi	a2,a3,124
   11ce4:	00359593          	slli	a1,a1,0x3
   11ce8:	e45ff06f          	j	11b2c <_free_r+0x130>
   11cec:	3f800593          	li	a1,1016
   11cf0:	07e00613          	li	a2,126
   11cf4:	e39ff06f          	j	11b2c <_free_r+0x130>
   11cf8:	0017e693          	ori	a3,a5,1
   11cfc:	00d72223          	sw	a3,4(a4)
   11d00:	00f62023          	sw	a5,0(a2)
   11d04:	dd5ff06f          	j	11ad8 <_free_r+0xdc>

00011d08 <__sfvwrite_r>:
   11d08:	00862783          	lw	a5,8(a2)
   11d0c:	30078a63          	beqz	a5,12020 <__sfvwrite_r+0x318>
   11d10:	00c59683          	lh	a3,12(a1)
   11d14:	fd010113          	addi	sp,sp,-48
   11d18:	02812423          	sw	s0,40(sp)
   11d1c:	01412c23          	sw	s4,24(sp)
   11d20:	01612823          	sw	s6,16(sp)
   11d24:	02112623          	sw	ra,44(sp)
   11d28:	02912223          	sw	s1,36(sp)
   11d2c:	03212023          	sw	s2,32(sp)
   11d30:	01312e23          	sw	s3,28(sp)
   11d34:	01512a23          	sw	s5,20(sp)
   11d38:	01712623          	sw	s7,12(sp)
   11d3c:	01812423          	sw	s8,8(sp)
   11d40:	01912223          	sw	s9,4(sp)
   11d44:	0086f793          	andi	a5,a3,8
   11d48:	00060b13          	mv	s6,a2
   11d4c:	00050a13          	mv	s4,a0
   11d50:	00058413          	mv	s0,a1
   11d54:	08078663          	beqz	a5,11de0 <__sfvwrite_r+0xd8>
   11d58:	0105a783          	lw	a5,16(a1)
   11d5c:	08078263          	beqz	a5,11de0 <__sfvwrite_r+0xd8>
   11d60:	0026f793          	andi	a5,a3,2
   11d64:	000b2483          	lw	s1,0(s6)
   11d68:	08078c63          	beqz	a5,11e00 <__sfvwrite_r+0xf8>
   11d6c:	02442783          	lw	a5,36(s0)
   11d70:	01c42583          	lw	a1,28(s0)
   11d74:	80000ab7          	lui	s5,0x80000
   11d78:	00000993          	li	s3,0
   11d7c:	00000913          	li	s2,0
   11d80:	c00aca93          	xori	s5,s5,-1024
   11d84:	00098613          	mv	a2,s3
   11d88:	000a0513          	mv	a0,s4
   11d8c:	04090263          	beqz	s2,11dd0 <__sfvwrite_r+0xc8>
   11d90:	00090693          	mv	a3,s2
   11d94:	012af463          	bgeu	s5,s2,11d9c <__sfvwrite_r+0x94>
   11d98:	000a8693          	mv	a3,s5
   11d9c:	000780e7          	jalr	a5
   11da0:	26a05663          	blez	a0,1200c <__sfvwrite_r+0x304>
   11da4:	008b2783          	lw	a5,8(s6)
   11da8:	00a989b3          	add	s3,s3,a0
   11dac:	40a90933          	sub	s2,s2,a0
   11db0:	40a787b3          	sub	a5,a5,a0
   11db4:	00fb2423          	sw	a5,8(s6)
   11db8:	20078663          	beqz	a5,11fc4 <__sfvwrite_r+0x2bc>
   11dbc:	02442783          	lw	a5,36(s0)
   11dc0:	01c42583          	lw	a1,28(s0)
   11dc4:	00098613          	mv	a2,s3
   11dc8:	000a0513          	mv	a0,s4
   11dcc:	fc0912e3          	bnez	s2,11d90 <__sfvwrite_r+0x88>
   11dd0:	0004a983          	lw	s3,0(s1)
   11dd4:	0044a903          	lw	s2,4(s1)
   11dd8:	00848493          	addi	s1,s1,8
   11ddc:	fa9ff06f          	j	11d84 <__sfvwrite_r+0x7c>
   11de0:	00040593          	mv	a1,s0
   11de4:	000a0513          	mv	a0,s4
   11de8:	df9fe0ef          	jal	ra,10be0 <__swsetup_r>
   11dec:	22051663          	bnez	a0,12018 <__sfvwrite_r+0x310>
   11df0:	00c41683          	lh	a3,12(s0)
   11df4:	000b2483          	lw	s1,0(s6)
   11df8:	0026f793          	andi	a5,a3,2
   11dfc:	f60798e3          	bnez	a5,11d6c <__sfvwrite_r+0x64>
   11e00:	0016f793          	andi	a5,a3,1
   11e04:	12079c63          	bnez	a5,11f3c <__sfvwrite_r+0x234>
   11e08:	00042783          	lw	a5,0(s0)
   11e0c:	00842703          	lw	a4,8(s0)
   11e10:	80000ab7          	lui	s5,0x80000
   11e14:	00000b93          	li	s7,0
   11e18:	00000993          	li	s3,0
   11e1c:	fffaca93          	not	s5,s5
   11e20:	00078513          	mv	a0,a5
   11e24:	00070c13          	mv	s8,a4
   11e28:	10098263          	beqz	s3,11f2c <__sfvwrite_r+0x224>
   11e2c:	2006f613          	andi	a2,a3,512
   11e30:	24060c63          	beqz	a2,12088 <__sfvwrite_r+0x380>
   11e34:	00070c93          	mv	s9,a4
   11e38:	2ee9e463          	bltu	s3,a4,12120 <__sfvwrite_r+0x418>
   11e3c:	4806f713          	andi	a4,a3,1152
   11e40:	08070a63          	beqz	a4,11ed4 <__sfvwrite_r+0x1cc>
   11e44:	01442603          	lw	a2,20(s0)
   11e48:	01042583          	lw	a1,16(s0)
   11e4c:	00161713          	slli	a4,a2,0x1
   11e50:	00c70733          	add	a4,a4,a2
   11e54:	40b78933          	sub	s2,a5,a1
   11e58:	01f75c13          	srli	s8,a4,0x1f
   11e5c:	00ec0c33          	add	s8,s8,a4
   11e60:	00190793          	addi	a5,s2,1
   11e64:	401c5c13          	srai	s8,s8,0x1
   11e68:	013787b3          	add	a5,a5,s3
   11e6c:	000c0613          	mv	a2,s8
   11e70:	00fc7663          	bgeu	s8,a5,11e7c <__sfvwrite_r+0x174>
   11e74:	00078c13          	mv	s8,a5
   11e78:	00078613          	mv	a2,a5
   11e7c:	4006f693          	andi	a3,a3,1024
   11e80:	2c068c63          	beqz	a3,12158 <__sfvwrite_r+0x450>
   11e84:	00060593          	mv	a1,a2
   11e88:	000a0513          	mv	a0,s4
   11e8c:	390030ef          	jal	ra,1521c <_malloc_r>
   11e90:	00050c93          	mv	s9,a0
   11e94:	30050063          	beqz	a0,12194 <__sfvwrite_r+0x48c>
   11e98:	01042583          	lw	a1,16(s0)
   11e9c:	00090613          	mv	a2,s2
   11ea0:	ffcfb0ef          	jal	ra,d69c <memcpy>
   11ea4:	00c45783          	lhu	a5,12(s0)
   11ea8:	b7f7f793          	andi	a5,a5,-1153
   11eac:	0807e793          	ori	a5,a5,128
   11eb0:	00f41623          	sh	a5,12(s0)
   11eb4:	012c8533          	add	a0,s9,s2
   11eb8:	412c07b3          	sub	a5,s8,s2
   11ebc:	01942823          	sw	s9,16(s0)
   11ec0:	01842a23          	sw	s8,20(s0)
   11ec4:	00a42023          	sw	a0,0(s0)
   11ec8:	00098c13          	mv	s8,s3
   11ecc:	00f42423          	sw	a5,8(s0)
   11ed0:	00098c93          	mv	s9,s3
   11ed4:	000c8613          	mv	a2,s9
   11ed8:	000b8593          	mv	a1,s7
   11edc:	3a9030ef          	jal	ra,15a84 <memmove>
   11ee0:	00842703          	lw	a4,8(s0)
   11ee4:	00042783          	lw	a5,0(s0)
   11ee8:	00098913          	mv	s2,s3
   11eec:	41870733          	sub	a4,a4,s8
   11ef0:	019787b3          	add	a5,a5,s9
   11ef4:	00e42423          	sw	a4,8(s0)
   11ef8:	00f42023          	sw	a5,0(s0)
   11efc:	00000993          	li	s3,0
   11f00:	008b2783          	lw	a5,8(s6)
   11f04:	012b8bb3          	add	s7,s7,s2
   11f08:	412787b3          	sub	a5,a5,s2
   11f0c:	00fb2423          	sw	a5,8(s6)
   11f10:	0a078a63          	beqz	a5,11fc4 <__sfvwrite_r+0x2bc>
   11f14:	00042783          	lw	a5,0(s0)
   11f18:	00842703          	lw	a4,8(s0)
   11f1c:	00c41683          	lh	a3,12(s0)
   11f20:	00078513          	mv	a0,a5
   11f24:	00070c13          	mv	s8,a4
   11f28:	f00992e3          	bnez	s3,11e2c <__sfvwrite_r+0x124>
   11f2c:	0004ab83          	lw	s7,0(s1)
   11f30:	0044a983          	lw	s3,4(s1)
   11f34:	00848493          	addi	s1,s1,8
   11f38:	ee9ff06f          	j	11e20 <__sfvwrite_r+0x118>
   11f3c:	00000a93          	li	s5,0
   11f40:	00000513          	li	a0,0
   11f44:	00000c13          	li	s8,0
   11f48:	00000993          	li	s3,0
   11f4c:	0c098e63          	beqz	s3,12028 <__sfvwrite_r+0x320>
   11f50:	0e050663          	beqz	a0,1203c <__sfvwrite_r+0x334>
   11f54:	000a8793          	mv	a5,s5
   11f58:	00098b93          	mv	s7,s3
   11f5c:	0137f463          	bgeu	a5,s3,11f64 <__sfvwrite_r+0x25c>
   11f60:	00078b93          	mv	s7,a5
   11f64:	00042503          	lw	a0,0(s0)
   11f68:	01042783          	lw	a5,16(s0)
   11f6c:	00842903          	lw	s2,8(s0)
   11f70:	01442683          	lw	a3,20(s0)
   11f74:	00a7f663          	bgeu	a5,a0,11f80 <__sfvwrite_r+0x278>
   11f78:	00d90933          	add	s2,s2,a3
   11f7c:	0f794063          	blt	s2,s7,1205c <__sfvwrite_r+0x354>
   11f80:	1adbc663          	blt	s7,a3,1212c <__sfvwrite_r+0x424>
   11f84:	02442783          	lw	a5,36(s0)
   11f88:	01c42583          	lw	a1,28(s0)
   11f8c:	000c0613          	mv	a2,s8
   11f90:	000a0513          	mv	a0,s4
   11f94:	000780e7          	jalr	a5
   11f98:	00050913          	mv	s2,a0
   11f9c:	06a05863          	blez	a0,1200c <__sfvwrite_r+0x304>
   11fa0:	412a8ab3          	sub	s5,s5,s2
   11fa4:	00100513          	li	a0,1
   11fa8:	040a8a63          	beqz	s5,11ffc <__sfvwrite_r+0x2f4>
   11fac:	008b2783          	lw	a5,8(s6)
   11fb0:	012c0c33          	add	s8,s8,s2
   11fb4:	412989b3          	sub	s3,s3,s2
   11fb8:	412787b3          	sub	a5,a5,s2
   11fbc:	00fb2423          	sw	a5,8(s6)
   11fc0:	f80796e3          	bnez	a5,11f4c <__sfvwrite_r+0x244>
   11fc4:	00000513          	li	a0,0
   11fc8:	02c12083          	lw	ra,44(sp)
   11fcc:	02812403          	lw	s0,40(sp)
   11fd0:	02412483          	lw	s1,36(sp)
   11fd4:	02012903          	lw	s2,32(sp)
   11fd8:	01c12983          	lw	s3,28(sp)
   11fdc:	01812a03          	lw	s4,24(sp)
   11fe0:	01412a83          	lw	s5,20(sp)
   11fe4:	01012b03          	lw	s6,16(sp)
   11fe8:	00c12b83          	lw	s7,12(sp)
   11fec:	00812c03          	lw	s8,8(sp)
   11ff0:	00412c83          	lw	s9,4(sp)
   11ff4:	03010113          	addi	sp,sp,48
   11ff8:	00008067          	ret
   11ffc:	00040593          	mv	a1,s0
   12000:	000a0513          	mv	a0,s4
   12004:	a08ff0ef          	jal	ra,1120c <_fflush_r>
   12008:	fa0502e3          	beqz	a0,11fac <__sfvwrite_r+0x2a4>
   1200c:	00c41783          	lh	a5,12(s0)
   12010:	0407e793          	ori	a5,a5,64
   12014:	00f41623          	sh	a5,12(s0)
   12018:	fff00513          	li	a0,-1
   1201c:	fadff06f          	j	11fc8 <__sfvwrite_r+0x2c0>
   12020:	00000513          	li	a0,0
   12024:	00008067          	ret
   12028:	0044a983          	lw	s3,4(s1)
   1202c:	00048793          	mv	a5,s1
   12030:	00848493          	addi	s1,s1,8
   12034:	fe098ae3          	beqz	s3,12028 <__sfvwrite_r+0x320>
   12038:	0007ac03          	lw	s8,0(a5)
   1203c:	00098613          	mv	a2,s3
   12040:	00a00593          	li	a1,10
   12044:	000c0513          	mv	a0,s8
   12048:	179030ef          	jal	ra,159c0 <memchr>
   1204c:	12050e63          	beqz	a0,12188 <__sfvwrite_r+0x480>
   12050:	00150513          	addi	a0,a0,1
   12054:	41850ab3          	sub	s5,a0,s8
   12058:	efdff06f          	j	11f54 <__sfvwrite_r+0x24c>
   1205c:	000c0593          	mv	a1,s8
   12060:	00090613          	mv	a2,s2
   12064:	221030ef          	jal	ra,15a84 <memmove>
   12068:	00042783          	lw	a5,0(s0)
   1206c:	00040593          	mv	a1,s0
   12070:	000a0513          	mv	a0,s4
   12074:	012787b3          	add	a5,a5,s2
   12078:	00f42023          	sw	a5,0(s0)
   1207c:	990ff0ef          	jal	ra,1120c <_fflush_r>
   12080:	f20500e3          	beqz	a0,11fa0 <__sfvwrite_r+0x298>
   12084:	f89ff06f          	j	1200c <__sfvwrite_r+0x304>
   12088:	01042683          	lw	a3,16(s0)
   1208c:	04f6e263          	bltu	a3,a5,120d0 <__sfvwrite_r+0x3c8>
   12090:	01442603          	lw	a2,20(s0)
   12094:	02c9ee63          	bltu	s3,a2,120d0 <__sfvwrite_r+0x3c8>
   12098:	00098793          	mv	a5,s3
   1209c:	013af463          	bgeu	s5,s3,120a4 <__sfvwrite_r+0x39c>
   120a0:	000a8793          	mv	a5,s5
   120a4:	02c7e6b3          	rem	a3,a5,a2
   120a8:	02442703          	lw	a4,36(s0)
   120ac:	01c42583          	lw	a1,28(s0)
   120b0:	000b8613          	mv	a2,s7
   120b4:	000a0513          	mv	a0,s4
   120b8:	40d786b3          	sub	a3,a5,a3
   120bc:	000700e7          	jalr	a4
   120c0:	00050913          	mv	s2,a0
   120c4:	f4a054e3          	blez	a0,1200c <__sfvwrite_r+0x304>
   120c8:	412989b3          	sub	s3,s3,s2
   120cc:	e35ff06f          	j	11f00 <__sfvwrite_r+0x1f8>
   120d0:	00070913          	mv	s2,a4
   120d4:	00e9f463          	bgeu	s3,a4,120dc <__sfvwrite_r+0x3d4>
   120d8:	00098913          	mv	s2,s3
   120dc:	00078513          	mv	a0,a5
   120e0:	00090613          	mv	a2,s2
   120e4:	000b8593          	mv	a1,s7
   120e8:	19d030ef          	jal	ra,15a84 <memmove>
   120ec:	00842703          	lw	a4,8(s0)
   120f0:	00042783          	lw	a5,0(s0)
   120f4:	41270733          	sub	a4,a4,s2
   120f8:	012787b3          	add	a5,a5,s2
   120fc:	00e42423          	sw	a4,8(s0)
   12100:	00f42023          	sw	a5,0(s0)
   12104:	fc0712e3          	bnez	a4,120c8 <__sfvwrite_r+0x3c0>
   12108:	00040593          	mv	a1,s0
   1210c:	000a0513          	mv	a0,s4
   12110:	8fcff0ef          	jal	ra,1120c <_fflush_r>
   12114:	ee051ce3          	bnez	a0,1200c <__sfvwrite_r+0x304>
   12118:	412989b3          	sub	s3,s3,s2
   1211c:	de5ff06f          	j	11f00 <__sfvwrite_r+0x1f8>
   12120:	00098c13          	mv	s8,s3
   12124:	00098c93          	mv	s9,s3
   12128:	dadff06f          	j	11ed4 <__sfvwrite_r+0x1cc>
   1212c:	000b8613          	mv	a2,s7
   12130:	000c0593          	mv	a1,s8
   12134:	151030ef          	jal	ra,15a84 <memmove>
   12138:	00842703          	lw	a4,8(s0)
   1213c:	00042783          	lw	a5,0(s0)
   12140:	000b8913          	mv	s2,s7
   12144:	41770733          	sub	a4,a4,s7
   12148:	017787b3          	add	a5,a5,s7
   1214c:	00e42423          	sw	a4,8(s0)
   12150:	00f42023          	sw	a5,0(s0)
   12154:	e4dff06f          	j	11fa0 <__sfvwrite_r+0x298>
   12158:	000a0513          	mv	a0,s4
   1215c:	4b5040ef          	jal	ra,16e10 <_realloc_r>
   12160:	00050c93          	mv	s9,a0
   12164:	d40518e3          	bnez	a0,11eb4 <__sfvwrite_r+0x1ac>
   12168:	01042583          	lw	a1,16(s0)
   1216c:	000a0513          	mv	a0,s4
   12170:	88dff0ef          	jal	ra,119fc <_free_r>
   12174:	00c41783          	lh	a5,12(s0)
   12178:	00c00713          	li	a4,12
   1217c:	00ea2023          	sw	a4,0(s4)
   12180:	f7f7f793          	andi	a5,a5,-129
   12184:	e8dff06f          	j	12010 <__sfvwrite_r+0x308>
   12188:	00198793          	addi	a5,s3,1
   1218c:	00078a93          	mv	s5,a5
   12190:	dc9ff06f          	j	11f58 <__sfvwrite_r+0x250>
   12194:	00c00713          	li	a4,12
   12198:	00c41783          	lh	a5,12(s0)
   1219c:	00ea2023          	sw	a4,0(s4)
   121a0:	e71ff06f          	j	12010 <__sfvwrite_r+0x308>

000121a4 <_fwalk>:
   121a4:	fe010113          	addi	sp,sp,-32
   121a8:	01212823          	sw	s2,16(sp)
   121ac:	01312623          	sw	s3,12(sp)
   121b0:	01412423          	sw	s4,8(sp)
   121b4:	01512223          	sw	s5,4(sp)
   121b8:	01612023          	sw	s6,0(sp)
   121bc:	00112e23          	sw	ra,28(sp)
   121c0:	00812c23          	sw	s0,24(sp)
   121c4:	00912a23          	sw	s1,20(sp)
   121c8:	00058b13          	mv	s6,a1
   121cc:	2e050a93          	addi	s5,a0,736
   121d0:	00000a13          	li	s4,0
   121d4:	00100993          	li	s3,1
   121d8:	fff00913          	li	s2,-1
   121dc:	004aa483          	lw	s1,4(s5) # 80000004 <__alt_data_end+0x7ffc0004>
   121e0:	008aa403          	lw	s0,8(s5)
   121e4:	fff48493          	addi	s1,s1,-1
   121e8:	0204c663          	bltz	s1,12214 <_fwalk+0x70>
   121ec:	00c45783          	lhu	a5,12(s0)
   121f0:	fff48493          	addi	s1,s1,-1
   121f4:	00f9fc63          	bgeu	s3,a5,1220c <_fwalk+0x68>
   121f8:	00e41783          	lh	a5,14(s0)
   121fc:	00040513          	mv	a0,s0
   12200:	01278663          	beq	a5,s2,1220c <_fwalk+0x68>
   12204:	000b00e7          	jalr	s6
   12208:	00aa6a33          	or	s4,s4,a0
   1220c:	06840413          	addi	s0,s0,104
   12210:	fd249ee3          	bne	s1,s2,121ec <_fwalk+0x48>
   12214:	000aaa83          	lw	s5,0(s5)
   12218:	fc0a92e3          	bnez	s5,121dc <_fwalk+0x38>
   1221c:	01c12083          	lw	ra,28(sp)
   12220:	01812403          	lw	s0,24(sp)
   12224:	01412483          	lw	s1,20(sp)
   12228:	01012903          	lw	s2,16(sp)
   1222c:	00c12983          	lw	s3,12(sp)
   12230:	00412a83          	lw	s5,4(sp)
   12234:	00012b03          	lw	s6,0(sp)
   12238:	000a0513          	mv	a0,s4
   1223c:	00812a03          	lw	s4,8(sp)
   12240:	02010113          	addi	sp,sp,32
   12244:	00008067          	ret

00012248 <_fwalk_reent>:
   12248:	fd010113          	addi	sp,sp,-48
   1224c:	03212023          	sw	s2,32(sp)
   12250:	01312e23          	sw	s3,28(sp)
   12254:	01412c23          	sw	s4,24(sp)
   12258:	01512a23          	sw	s5,20(sp)
   1225c:	01612823          	sw	s6,16(sp)
   12260:	01712623          	sw	s7,12(sp)
   12264:	02112623          	sw	ra,44(sp)
   12268:	02812423          	sw	s0,40(sp)
   1226c:	02912223          	sw	s1,36(sp)
   12270:	00050a93          	mv	s5,a0
   12274:	00058b93          	mv	s7,a1
   12278:	2e050b13          	addi	s6,a0,736
   1227c:	00000a13          	li	s4,0
   12280:	00100993          	li	s3,1
   12284:	fff00913          	li	s2,-1
   12288:	004b2483          	lw	s1,4(s6)
   1228c:	008b2403          	lw	s0,8(s6)
   12290:	fff48493          	addi	s1,s1,-1
   12294:	0204c863          	bltz	s1,122c4 <_fwalk_reent+0x7c>
   12298:	00c45783          	lhu	a5,12(s0)
   1229c:	fff48493          	addi	s1,s1,-1
   122a0:	00f9fe63          	bgeu	s3,a5,122bc <_fwalk_reent+0x74>
   122a4:	00e41783          	lh	a5,14(s0)
   122a8:	00040593          	mv	a1,s0
   122ac:	000a8513          	mv	a0,s5
   122b0:	01278663          	beq	a5,s2,122bc <_fwalk_reent+0x74>
   122b4:	000b80e7          	jalr	s7
   122b8:	00aa6a33          	or	s4,s4,a0
   122bc:	06840413          	addi	s0,s0,104
   122c0:	fd249ce3          	bne	s1,s2,12298 <_fwalk_reent+0x50>
   122c4:	000b2b03          	lw	s6,0(s6)
   122c8:	fc0b10e3          	bnez	s6,12288 <_fwalk_reent+0x40>
   122cc:	02c12083          	lw	ra,44(sp)
   122d0:	02812403          	lw	s0,40(sp)
   122d4:	02412483          	lw	s1,36(sp)
   122d8:	02012903          	lw	s2,32(sp)
   122dc:	01c12983          	lw	s3,28(sp)
   122e0:	01412a83          	lw	s5,20(sp)
   122e4:	01012b03          	lw	s6,16(sp)
   122e8:	00c12b83          	lw	s7,12(sp)
   122ec:	000a0513          	mv	a0,s4
   122f0:	01812a03          	lw	s4,24(sp)
   122f4:	03010113          	addi	sp,sp,48
   122f8:	00008067          	ret

000122fc <eshdn1>:
   122fc:	00450693          	addi	a3,a0,4
   12300:	00000713          	li	a4,0
   12304:	01a50513          	addi	a0,a0,26
   12308:	ffff8837          	lui	a6,0xffff8
   1230c:	0006d783          	lhu	a5,0(a3)
   12310:	0017f613          	andi	a2,a5,1
   12314:	00060463          	beqz	a2,1231c <eshdn1+0x20>
   12318:	00176713          	ori	a4,a4,1
   1231c:	00277613          	andi	a2,a4,2
   12320:	0017d793          	srli	a5,a5,0x1
   12324:	00171713          	slli	a4,a4,0x1
   12328:	0107e5b3          	or	a1,a5,a6
   1232c:	00060663          	beqz	a2,12338 <eshdn1+0x3c>
   12330:	01059793          	slli	a5,a1,0x10
   12334:	0107d793          	srli	a5,a5,0x10
   12338:	00f69023          	sh	a5,0(a3)
   1233c:	01071713          	slli	a4,a4,0x10
   12340:	00268693          	addi	a3,a3,2
   12344:	01075713          	srli	a4,a4,0x10
   12348:	fcd512e3          	bne	a0,a3,1230c <eshdn1+0x10>
   1234c:	00008067          	ret

00012350 <eshup1>:
   12350:	01850693          	addi	a3,a0,24
   12354:	00000713          	li	a4,0
   12358:	00250513          	addi	a0,a0,2
   1235c:	0006d783          	lhu	a5,0(a3)
   12360:	01079613          	slli	a2,a5,0x10
   12364:	41065613          	srai	a2,a2,0x10
   12368:	00179793          	slli	a5,a5,0x1
   1236c:	00065463          	bgez	a2,12374 <eshup1+0x24>
   12370:	00176713          	ori	a4,a4,1
   12374:	00277613          	andi	a2,a4,2
   12378:	01079793          	slli	a5,a5,0x10
   1237c:	00171713          	slli	a4,a4,0x1
   12380:	0107d793          	srli	a5,a5,0x10
   12384:	00060463          	beqz	a2,1238c <eshup1+0x3c>
   12388:	0017e793          	ori	a5,a5,1
   1238c:	00f69023          	sh	a5,0(a3)
   12390:	01071713          	slli	a4,a4,0x10
   12394:	ffe68693          	addi	a3,a3,-2
   12398:	01075713          	srli	a4,a4,0x10
   1239c:	fcd510e3          	bne	a0,a3,1235c <eshup1+0xc>
   123a0:	00008067          	ret

000123a4 <m16m>:
   123a4:	fe010113          	addi	sp,sp,-32
   123a8:	00010e37          	lui	t3,0x10
   123ac:	00011d23          	sh	zero,26(sp)
   123b0:	00011e23          	sh	zero,28(sp)
   123b4:	01858593          	addi	a1,a1,24
   123b8:	01c10793          	addi	a5,sp,28
   123bc:	00810813          	addi	a6,sp,8
   123c0:	fffe0e13          	addi	t3,t3,-1 # ffff <_vfprintf_r+0x21a3>
   123c4:	0005d703          	lhu	a4,0(a1)
   123c8:	ffe78793          	addi	a5,a5,-2
   123cc:	ffe58593          	addi	a1,a1,-2
   123d0:	02070a63          	beqz	a4,12404 <m16m+0x60>
   123d4:	02a70733          	mul	a4,a4,a0
   123d8:	0027d883          	lhu	a7,2(a5)
   123dc:	0007d303          	lhu	t1,0(a5)
   123e0:	01c776b3          	and	a3,a4,t3
   123e4:	011686b3          	add	a3,a3,a7
   123e8:	01075713          	srli	a4,a4,0x10
   123ec:	0106d893          	srli	a7,a3,0x10
   123f0:	00670733          	add	a4,a4,t1
   123f4:	01170733          	add	a4,a4,a7
   123f8:	00e79023          	sh	a4,0(a5)
   123fc:	00d79123          	sh	a3,2(a5)
   12400:	01075713          	srli	a4,a4,0x10
   12404:	fee79f23          	sh	a4,-2(a5)
   12408:	fb079ee3          	bne	a5,a6,123c4 <m16m+0x20>
   1240c:	00460613          	addi	a2,a2,4
   12410:	01e10693          	addi	a3,sp,30
   12414:	0007d703          	lhu	a4,0(a5)
   12418:	00278793          	addi	a5,a5,2
   1241c:	00260613          	addi	a2,a2,2
   12420:	fee61f23          	sh	a4,-2(a2)
   12424:	fed798e3          	bne	a5,a3,12414 <m16m+0x70>
   12428:	02010113          	addi	sp,sp,32
   1242c:	00008067          	ret

00012430 <emovo.constprop.0>:
   12430:	00055703          	lhu	a4,0(a0)
   12434:	00255783          	lhu	a5,2(a0)
   12438:	00070663          	beqz	a4,12444 <emovo.constprop.0+0x14>
   1243c:	00008737          	lui	a4,0x8
   12440:	00e7e7b3          	or	a5,a5,a4
   12444:	00f59923          	sh	a5,18(a1)
   12448:	00255703          	lhu	a4,2(a0)
   1244c:	000087b7          	lui	a5,0x8
   12450:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   12454:	02f70463          	beq	a4,a5,1247c <emovo.constprop.0+0x4c>
   12458:	00650793          	addi	a5,a0,6
   1245c:	01058593          	addi	a1,a1,16
   12460:	01850513          	addi	a0,a0,24
   12464:	0007d703          	lhu	a4,0(a5)
   12468:	00278793          	addi	a5,a5,2
   1246c:	ffe58593          	addi	a1,a1,-2
   12470:	00e59123          	sh	a4,2(a1)
   12474:	fea798e3          	bne	a5,a0,12464 <emovo.constprop.0+0x34>
   12478:	00008067          	ret
   1247c:	00650793          	addi	a5,a0,6
   12480:	01a50513          	addi	a0,a0,26
   12484:	0007d703          	lhu	a4,0(a5)
   12488:	00278793          	addi	a5,a5,2
   1248c:	02071a63          	bnez	a4,124c0 <emovo.constprop.0+0x90>
   12490:	fef51ae3          	bne	a0,a5,12484 <emovo.constprop.0+0x54>
   12494:	01258713          	addi	a4,a1,18
   12498:	00058793          	mv	a5,a1
   1249c:	00278793          	addi	a5,a5,2
   124a0:	fe079f23          	sh	zero,-2(a5)
   124a4:	fee79ce3          	bne	a5,a4,1249c <emovo.constprop.0+0x6c>
   124a8:	0125d783          	lhu	a5,18(a1)
   124ac:	00008737          	lui	a4,0x8
   124b0:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   124b4:	00e7e7b3          	or	a5,a5,a4
   124b8:	00f59923          	sh	a5,18(a1)
   124bc:	00008067          	ret
   124c0:	01058713          	addi	a4,a1,16
   124c4:	00058793          	mv	a5,a1
   124c8:	00278793          	addi	a5,a5,2
   124cc:	fe079f23          	sh	zero,-2(a5)
   124d0:	fee79ce3          	bne	a5,a4,124c8 <emovo.constprop.0+0x98>
   124d4:	ffffc7b7          	lui	a5,0xffffc
   124d8:	00f59823          	sh	a5,16(a1)
   124dc:	ffff87b7          	lui	a5,0xffff8
   124e0:	fff7c793          	not	a5,a5
   124e4:	00f59923          	sh	a5,18(a1)
   124e8:	00008067          	ret

000124ec <enormlz>:
   124ec:	00455783          	lhu	a5,4(a0)
   124f0:	ff010113          	addi	sp,sp,-16
   124f4:	00912223          	sw	s1,4(sp)
   124f8:	00112623          	sw	ra,12(sp)
   124fc:	00812423          	sw	s0,8(sp)
   12500:	01212023          	sw	s2,0(sp)
   12504:	00050493          	mv	s1,a0
   12508:	0c079a63          	bnez	a5,125dc <enormlz+0xf0>
   1250c:	00655783          	lhu	a5,6(a0)
   12510:	00000413          	li	s0,0
   12514:	01079713          	slli	a4,a5,0x10
   12518:	41075713          	srai	a4,a4,0x10
   1251c:	0a074263          	bltz	a4,125c0 <enormlz+0xd4>
   12520:	01850693          	addi	a3,a0,24
   12524:	0a000613          	li	a2,160
   12528:	02079663          	bnez	a5,12554 <enormlz+0x68>
   1252c:	00448793          	addi	a5,s1,4
   12530:	0027d703          	lhu	a4,2(a5) # ffff8002 <__alt_data_end+0xfffb8002>
   12534:	00278793          	addi	a5,a5,2
   12538:	fee79f23          	sh	a4,-2(a5)
   1253c:	fed79ae3          	bne	a5,a3,12530 <enormlz+0x44>
   12540:	00049c23          	sh	zero,24(s1)
   12544:	01040413          	addi	s0,s0,16
   12548:	06c40c63          	beq	s0,a2,125c0 <enormlz+0xd4>
   1254c:	0064d783          	lhu	a5,6(s1)
   12550:	fc078ee3          	beqz	a5,1252c <enormlz+0x40>
   12554:	0ff00713          	li	a4,255
   12558:	04f76063          	bltu	a4,a5,12598 <enormlz+0xac>
   1255c:	01848813          	addi	a6,s1,24
   12560:	00248593          	addi	a1,s1,2
   12564:	0ff00513          	li	a0,255
   12568:	00000793          	li	a5,0
   1256c:	00080713          	mv	a4,a6
   12570:	00075683          	lhu	a3,0(a4)
   12574:	ffe70713          	addi	a4,a4,-2
   12578:	00869613          	slli	a2,a3,0x8
   1257c:	00c7e7b3          	or	a5,a5,a2
   12580:	00f71123          	sh	a5,2(a4)
   12584:	0086d793          	srli	a5,a3,0x8
   12588:	feb714e3          	bne	a4,a1,12570 <enormlz+0x84>
   1258c:	0064d783          	lhu	a5,6(s1)
   12590:	00840413          	addi	s0,s0,8
   12594:	fcf57ae3          	bgeu	a0,a5,12568 <enormlz+0x7c>
   12598:	0a000913          	li	s2,160
   1259c:	0140006f          	j	125b0 <enormlz+0xc4>
   125a0:	00140413          	addi	s0,s0,1
   125a4:	dadff0ef          	jal	ra,12350 <eshup1>
   125a8:	00894c63          	blt	s2,s0,125c0 <enormlz+0xd4>
   125ac:	0064d783          	lhu	a5,6(s1)
   125b0:	01079793          	slli	a5,a5,0x10
   125b4:	4107d793          	srai	a5,a5,0x10
   125b8:	00048513          	mv	a0,s1
   125bc:	fe07d2e3          	bgez	a5,125a0 <enormlz+0xb4>
   125c0:	00c12083          	lw	ra,12(sp)
   125c4:	00040513          	mv	a0,s0
   125c8:	00812403          	lw	s0,8(sp)
   125cc:	00412483          	lw	s1,4(sp)
   125d0:	00012903          	lw	s2,0(sp)
   125d4:	01010113          	addi	sp,sp,16
   125d8:	00008067          	ret
   125dc:	0ff00713          	li	a4,255
   125e0:	00000413          	li	s0,0
   125e4:	04f76063          	bltu	a4,a5,12624 <enormlz+0x138>
   125e8:	f6f00913          	li	s2,-145
   125ec:	0140006f          	j	12600 <enormlz+0x114>
   125f0:	fff40413          	addi	s0,s0,-1
   125f4:	d09ff0ef          	jal	ra,122fc <eshdn1>
   125f8:	fd2404e3          	beq	s0,s2,125c0 <enormlz+0xd4>
   125fc:	0044d783          	lhu	a5,4(s1)
   12600:	00048513          	mv	a0,s1
   12604:	fe0796e3          	bnez	a5,125f0 <enormlz+0x104>
   12608:	00c12083          	lw	ra,12(sp)
   1260c:	00040513          	mv	a0,s0
   12610:	00812403          	lw	s0,8(sp)
   12614:	00412483          	lw	s1,4(sp)
   12618:	00012903          	lw	s2,0(sp)
   1261c:	01010113          	addi	sp,sp,16
   12620:	00008067          	ret
   12624:	00450713          	addi	a4,a0,4
   12628:	01a50593          	addi	a1,a0,26
   1262c:	00000793          	li	a5,0
   12630:	00075683          	lhu	a3,0(a4)
   12634:	00270713          	addi	a4,a4,2
   12638:	0086d613          	srli	a2,a3,0x8
   1263c:	00c7e7b3          	or	a5,a5,a2
   12640:	00869693          	slli	a3,a3,0x8
   12644:	fef71f23          	sh	a5,-2(a4)
   12648:	01069793          	slli	a5,a3,0x10
   1264c:	0107d793          	srli	a5,a5,0x10
   12650:	feb710e3          	bne	a4,a1,12630 <enormlz+0x144>
   12654:	0044d783          	lhu	a5,4(s1)
   12658:	ff800413          	li	s0,-8
   1265c:	f8dff06f          	j	125e8 <enormlz+0xfc>

00012660 <eshift.part.0>:
   12660:	fe010113          	addi	sp,sp,-32
   12664:	00812c23          	sw	s0,24(sp)
   12668:	00912a23          	sw	s1,20(sp)
   1266c:	00112e23          	sw	ra,28(sp)
   12670:	01212823          	sw	s2,16(sp)
   12674:	01312623          	sw	s3,12(sp)
   12678:	00058493          	mv	s1,a1
   1267c:	00050413          	mv	s0,a0
   12680:	0a05c463          	bltz	a1,12728 <eshift.part.0+0xc8>
   12684:	00f00793          	li	a5,15
   12688:	00058613          	mv	a2,a1
   1268c:	00450513          	addi	a0,a0,4
   12690:	01840693          	addi	a3,s0,24
   12694:	00f00593          	li	a1,15
   12698:	0297d463          	bge	a5,s1,126c0 <eshift.part.0+0x60>
   1269c:	00050793          	mv	a5,a0
   126a0:	0027d703          	lhu	a4,2(a5)
   126a4:	00278793          	addi	a5,a5,2
   126a8:	fee79f23          	sh	a4,-2(a5)
   126ac:	fef69ae3          	bne	a3,a5,126a0 <eshift.part.0+0x40>
   126b0:	00041c23          	sh	zero,24(s0)
   126b4:	ff060613          	addi	a2,a2,-16
   126b8:	fec5c2e3          	blt	a1,a2,1269c <eshift.part.0+0x3c>
   126bc:	00f4f493          	andi	s1,s1,15
   126c0:	00700793          	li	a5,7
   126c4:	0297d863          	bge	a5,s1,126f4 <eshift.part.0+0x94>
   126c8:	01840713          	addi	a4,s0,24
   126cc:	00240593          	addi	a1,s0,2
   126d0:	00000793          	li	a5,0
   126d4:	00075683          	lhu	a3,0(a4)
   126d8:	ffe70713          	addi	a4,a4,-2
   126dc:	00869613          	slli	a2,a3,0x8
   126e0:	00c7e7b3          	or	a5,a5,a2
   126e4:	00f71123          	sh	a5,2(a4)
   126e8:	0086d793          	srli	a5,a3,0x8
   126ec:	feb714e3          	bne	a4,a1,126d4 <eshift.part.0+0x74>
   126f0:	ff848493          	addi	s1,s1,-8
   126f4:	00048a63          	beqz	s1,12708 <eshift.part.0+0xa8>
   126f8:	fff48493          	addi	s1,s1,-1
   126fc:	00040513          	mv	a0,s0
   12700:	c51ff0ef          	jal	ra,12350 <eshup1>
   12704:	fe049ae3          	bnez	s1,126f8 <eshift.part.0+0x98>
   12708:	01c12083          	lw	ra,28(sp)
   1270c:	01812403          	lw	s0,24(sp)
   12710:	01412483          	lw	s1,20(sp)
   12714:	01012903          	lw	s2,16(sp)
   12718:	00c12983          	lw	s3,12(sp)
   1271c:	00000513          	li	a0,0
   12720:	02010113          	addi	sp,sp,32
   12724:	00008067          	ret
   12728:	ff100793          	li	a5,-15
   1272c:	40b00933          	neg	s2,a1
   12730:	00000993          	li	s3,0
   12734:	01850593          	addi	a1,a0,24
   12738:	00450693          	addi	a3,a0,4
   1273c:	00f00613          	li	a2,15
   12740:	0cf4d863          	bge	s1,a5,12810 <eshift.part.0+0x1b0>
   12744:	01845703          	lhu	a4,24(s0)
   12748:	00058793          	mv	a5,a1
   1274c:	00e9e9b3          	or	s3,s3,a4
   12750:	ffe7d703          	lhu	a4,-2(a5)
   12754:	ffe78793          	addi	a5,a5,-2
   12758:	00e79123          	sh	a4,2(a5)
   1275c:	fed79ae3          	bne	a5,a3,12750 <eshift.part.0+0xf0>
   12760:	00041223          	sh	zero,4(s0)
   12764:	ff090913          	addi	s2,s2,-16
   12768:	fd264ee3          	blt	a2,s2,12744 <eshift.part.0+0xe4>
   1276c:	ff000913          	li	s2,-16
   12770:	ff100713          	li	a4,-15
   12774:	40990933          	sub	s2,s2,s1
   12778:	00000793          	li	a5,0
   1277c:	08e4c463          	blt	s1,a4,12804 <eshift.part.0+0x1a4>
   12780:	00f90933          	add	s2,s2,a5
   12784:	00700793          	li	a5,7
   12788:	0327de63          	bge	a5,s2,127c4 <eshift.part.0+0x164>
   1278c:	01844783          	lbu	a5,24(s0)
   12790:	01a40593          	addi	a1,s0,26
   12794:	00f9e9b3          	or	s3,s3,a5
   12798:	00000793          	li	a5,0
   1279c:	0006d703          	lhu	a4,0(a3)
   127a0:	00268693          	addi	a3,a3,2
   127a4:	00875613          	srli	a2,a4,0x8
   127a8:	00c7e7b3          	or	a5,a5,a2
   127ac:	00871713          	slli	a4,a4,0x8
   127b0:	fef69f23          	sh	a5,-2(a3)
   127b4:	01071793          	slli	a5,a4,0x10
   127b8:	0107d793          	srli	a5,a5,0x10
   127bc:	feb690e3          	bne	a3,a1,1279c <eshift.part.0+0x13c>
   127c0:	ff890913          	addi	s2,s2,-8
   127c4:	02090063          	beqz	s2,127e4 <eshift.part.0+0x184>
   127c8:	01845783          	lhu	a5,24(s0)
   127cc:	fff90913          	addi	s2,s2,-1
   127d0:	00040513          	mv	a0,s0
   127d4:	0017f793          	andi	a5,a5,1
   127d8:	00f9e9b3          	or	s3,s3,a5
   127dc:	b21ff0ef          	jal	ra,122fc <eshdn1>
   127e0:	fe0914e3          	bnez	s2,127c8 <eshift.part.0+0x168>
   127e4:	01c12083          	lw	ra,28(sp)
   127e8:	01812403          	lw	s0,24(sp)
   127ec:	01412483          	lw	s1,20(sp)
   127f0:	01012903          	lw	s2,16(sp)
   127f4:	01303533          	snez	a0,s3
   127f8:	00c12983          	lw	s3,12(sp)
   127fc:	02010113          	addi	sp,sp,32
   12800:	00008067          	ret
   12804:	ff097793          	andi	a5,s2,-16
   12808:	40f007b3          	neg	a5,a5
   1280c:	f75ff06f          	j	12780 <eshift.part.0+0x120>
   12810:	ff900793          	li	a5,-7
   12814:	f6f4cce3          	blt	s1,a5,1278c <eshift.part.0+0x12c>
   12818:	fb1ff06f          	j	127c8 <eshift.part.0+0x168>

0001281c <emovi>:
   1281c:	01255783          	lhu	a5,18(a0)
   12820:	000086b7          	lui	a3,0x8
   12824:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   12828:	00f7d793          	srli	a5,a5,0xf
   1282c:	40f007b3          	neg	a5,a5
   12830:	00f59023          	sh	a5,0(a1)
   12834:	01255703          	lhu	a4,18(a0)
   12838:	01050793          	addi	a5,a0,16
   1283c:	00d77733          	and	a4,a4,a3
   12840:	00e59123          	sh	a4,2(a1)
   12844:	02d70663          	beq	a4,a3,12870 <emovi+0x54>
   12848:	00658713          	addi	a4,a1,6
   1284c:	00059223          	sh	zero,4(a1)
   12850:	ffe50513          	addi	a0,a0,-2
   12854:	0007d683          	lhu	a3,0(a5)
   12858:	ffe78793          	addi	a5,a5,-2
   1285c:	00270713          	addi	a4,a4,2
   12860:	fed71f23          	sh	a3,-2(a4)
   12864:	fea798e3          	bne	a5,a0,12854 <emovi+0x38>
   12868:	00059c23          	sh	zero,24(a1)
   1286c:	00008067          	ret
   12870:	01255683          	lhu	a3,18(a0)
   12874:	00e6f6b3          	and	a3,a3,a4
   12878:	00e69e63          	bne	a3,a4,12894 <emovi+0x78>
   1287c:	01250613          	addi	a2,a0,18
   12880:	00050713          	mv	a4,a0
   12884:	00075683          	lhu	a3,0(a4)
   12888:	00270713          	addi	a4,a4,2
   1288c:	02069063          	bnez	a3,128ac <emovi+0x90>
   12890:	fec71ae3          	bne	a4,a2,12884 <emovi+0x68>
   12894:	00458793          	addi	a5,a1,4
   12898:	01a58593          	addi	a1,a1,26
   1289c:	00278793          	addi	a5,a5,2
   128a0:	fe079f23          	sh	zero,-2(a5)
   128a4:	feb79ce3          	bne	a5,a1,1289c <emovi+0x80>
   128a8:	00008067          	ret
   128ac:	00658713          	addi	a4,a1,6
   128b0:	00059223          	sh	zero,4(a1)
   128b4:	ffc50513          	addi	a0,a0,-4
   128b8:	0007d683          	lhu	a3,0(a5)
   128bc:	ffe78793          	addi	a5,a5,-2
   128c0:	00270713          	addi	a4,a4,2
   128c4:	fed71f23          	sh	a3,-2(a4)
   128c8:	fef518e3          	bne	a0,a5,128b8 <emovi+0x9c>
   128cc:	00008067          	ret

000128d0 <ecmp>:
   128d0:	01255783          	lhu	a5,18(a0)
   128d4:	fb010113          	addi	sp,sp,-80
   128d8:	04812423          	sw	s0,72(sp)
   128dc:	fff7c793          	not	a5,a5
   128e0:	04112623          	sw	ra,76(sp)
   128e4:	01179713          	slli	a4,a5,0x11
   128e8:	00058413          	mv	s0,a1
   128ec:	00071e63          	bnez	a4,12908 <ecmp+0x38>
   128f0:	01250693          	addi	a3,a0,18
   128f4:	00050793          	mv	a5,a0
   128f8:	0007d703          	lhu	a4,0(a5)
   128fc:	00278793          	addi	a5,a5,2
   12900:	08071c63          	bnez	a4,12998 <ecmp+0xc8>
   12904:	fed79ae3          	bne	a5,a3,128f8 <ecmp+0x28>
   12908:	01245783          	lhu	a5,18(s0)
   1290c:	fff7c793          	not	a5,a5
   12910:	01179713          	slli	a4,a5,0x11
   12914:	06070063          	beqz	a4,12974 <ecmp+0xa4>
   12918:	00810593          	addi	a1,sp,8
   1291c:	f01ff0ef          	jal	ra,1281c <emovi>
   12920:	02410593          	addi	a1,sp,36
   12924:	00040513          	mv	a0,s0
   12928:	ef5ff0ef          	jal	ra,1281c <emovi>
   1292c:	00815583          	lhu	a1,8(sp)
   12930:	02415503          	lhu	a0,36(sp)
   12934:	06b50c63          	beq	a0,a1,129ac <ecmp+0xdc>
   12938:	00a10793          	addi	a5,sp,10
   1293c:	02610713          	addi	a4,sp,38
   12940:	02010613          	addi	a2,sp,32
   12944:	0007d683          	lhu	a3,0(a5)
   12948:	00278793          	addi	a5,a5,2
   1294c:	0a069863          	bnez	a3,129fc <ecmp+0x12c>
   12950:	00075683          	lhu	a3,0(a4)
   12954:	00270713          	addi	a4,a4,2
   12958:	0a069263          	bnez	a3,129fc <ecmp+0x12c>
   1295c:	fef614e3          	bne	a2,a5,12944 <ecmp+0x74>
   12960:	00000513          	li	a0,0
   12964:	04c12083          	lw	ra,76(sp)
   12968:	04812403          	lw	s0,72(sp)
   1296c:	05010113          	addi	sp,sp,80
   12970:	00008067          	ret
   12974:	00040793          	mv	a5,s0
   12978:	0007d703          	lhu	a4,0(a5)
   1297c:	01240693          	addi	a3,s0,18
   12980:	00278793          	addi	a5,a5,2
   12984:	00071a63          	bnez	a4,12998 <ecmp+0xc8>
   12988:	f8d788e3          	beq	a5,a3,12918 <ecmp+0x48>
   1298c:	0007d703          	lhu	a4,0(a5)
   12990:	00278793          	addi	a5,a5,2
   12994:	fe070ae3          	beqz	a4,12988 <ecmp+0xb8>
   12998:	04c12083          	lw	ra,76(sp)
   1299c:	04812403          	lw	s0,72(sp)
   129a0:	ffe00513          	li	a0,-2
   129a4:	05010113          	addi	sp,sp,80
   129a8:	00008067          	ret
   129ac:	00815603          	lhu	a2,8(sp)
   129b0:	02415683          	lhu	a3,36(sp)
   129b4:	00a03533          	snez	a0,a0
   129b8:	02410713          	addi	a4,sp,36
   129bc:	00810793          	addi	a5,sp,8
   129c0:	40a00533          	neg	a0,a0
   129c4:	00156513          	ori	a0,a0,1
   129c8:	02010593          	addi	a1,sp,32
   129cc:	00278793          	addi	a5,a5,2
   129d0:	00270713          	addi	a4,a4,2
   129d4:	00d61e63          	bne	a2,a3,129f0 <ecmp+0x120>
   129d8:	f8b784e3          	beq	a5,a1,12960 <ecmp+0x90>
   129dc:	0007d603          	lhu	a2,0(a5)
   129e0:	00075683          	lhu	a3,0(a4)
   129e4:	00278793          	addi	a5,a5,2
   129e8:	00270713          	addi	a4,a4,2
   129ec:	fed606e3          	beq	a2,a3,129d8 <ecmp+0x108>
   129f0:	f6c6eae3          	bltu	a3,a2,12964 <ecmp+0x94>
   129f4:	40a00533          	neg	a0,a0
   129f8:	f6dff06f          	j	12964 <ecmp+0x94>
   129fc:	00059c63          	bnez	a1,12a14 <ecmp+0x144>
   12a00:	04c12083          	lw	ra,76(sp)
   12a04:	04812403          	lw	s0,72(sp)
   12a08:	00100513          	li	a0,1
   12a0c:	05010113          	addi	sp,sp,80
   12a10:	00008067          	ret
   12a14:	fff00513          	li	a0,-1
   12a18:	f4dff06f          	j	12964 <ecmp+0x94>

00012a1c <emdnorm>:
   12a1c:	fe010113          	addi	sp,sp,-32
   12a20:	00812c23          	sw	s0,24(sp)
   12a24:	00912a23          	sw	s1,20(sp)
   12a28:	01212823          	sw	s2,16(sp)
   12a2c:	01312623          	sw	s3,12(sp)
   12a30:	01412423          	sw	s4,8(sp)
   12a34:	01512223          	sw	s5,4(sp)
   12a38:	00068913          	mv	s2,a3
   12a3c:	00078413          	mv	s0,a5
   12a40:	00112e23          	sw	ra,28(sp)
   12a44:	00050493          	mv	s1,a0
   12a48:	00058993          	mv	s3,a1
   12a4c:	00060a13          	mv	s4,a2
   12a50:	00070a93          	mv	s5,a4
   12a54:	a99ff0ef          	jal	ra,124ec <enormlz>
   12a58:	09000793          	li	a5,144
   12a5c:	40a90933          	sub	s2,s2,a0
   12a60:	16a7da63          	bge	a5,a0,12bd4 <emdnorm+0x1b8>
   12a64:	000087b7          	lui	a5,0x8
   12a68:	ffe78793          	addi	a5,a5,-2 # 7ffe <__malloc_lock+0x66>
   12a6c:	2b27da63          	bge	a5,s2,12d20 <emdnorm+0x304>
   12a70:	200a8c63          	beqz	s5,12c88 <emdnorm+0x26c>
   12a74:	00442a83          	lw	s5,4(s0)
   12a78:	00042783          	lw	a5,0(s0)
   12a7c:	26fa8a63          	beq	s5,a5,12cf0 <emdnorm+0x2d4>
   12a80:	01a40713          	addi	a4,s0,26
   12a84:	03440793          	addi	a5,s0,52
   12a88:	00270713          	addi	a4,a4,2
   12a8c:	fe071f23          	sh	zero,-2(a4)
   12a90:	fee79ce3          	bne	a5,a4,12a88 <emdnorm+0x6c>
   12a94:	03800793          	li	a5,56
   12a98:	36fa8863          	beq	s5,a5,12e08 <emdnorm+0x3ec>
   12a9c:	1957dc63          	bge	a5,s5,12c34 <emdnorm+0x218>
   12aa0:	04000793          	li	a5,64
   12aa4:	28fa8a63          	beq	s5,a5,12d38 <emdnorm+0x31c>
   12aa8:	07100793          	li	a5,113
   12aac:	38fa9c63          	bne	s5,a5,12e44 <emdnorm+0x428>
   12ab0:	400087b7          	lui	a5,0x40008
   12ab4:	00a00693          	li	a3,10
   12ab8:	ffff8737          	lui	a4,0xffff8
   12abc:	fff78793          	addi	a5,a5,-1 # 40007fff <__alt_data_end+0x3ffc7fff>
   12ac0:	00d42423          	sw	a3,8(s0)
   12ac4:	00f42a23          	sw	a5,20(s0)
   12ac8:	00e41c23          	sh	a4,24(s0)
   12acc:	00d42623          	sw	a3,12(s0)
   12ad0:	02e41723          	sh	a4,46(s0)
   12ad4:	01542023          	sw	s5,0(s0)
   12ad8:	21205263          	blez	s2,12cdc <emdnorm+0x2c0>
   12adc:	0144d683          	lhu	a3,20(s1)
   12ae0:	01448613          	addi	a2,s1,20
   12ae4:	00b00793          	li	a5,11
   12ae8:	01169693          	slli	a3,a3,0x11
   12aec:	0116d693          	srli	a3,a3,0x11
   12af0:	00179793          	slli	a5,a5,0x1
   12af4:	00f487b3          	add	a5,s1,a5
   12af8:	01a48593          	addi	a1,s1,26
   12afc:	0007d703          	lhu	a4,0(a5)
   12b00:	00070463          	beqz	a4,12b08 <emdnorm+0xec>
   12b04:	0016e693          	ori	a3,a3,1
   12b08:	00079023          	sh	zero,0(a5)
   12b0c:	00278793          	addi	a5,a5,2
   12b10:	feb796e3          	bne	a5,a1,12afc <emdnorm+0xe0>
   12b14:	00065703          	lhu	a4,0(a2)
   12b18:	01445583          	lhu	a1,20(s0)
   12b1c:	fff5c593          	not	a1,a1
   12b20:	00b77733          	and	a4,a4,a1
   12b24:	00e61023          	sh	a4,0(a2)
   12b28:	01645783          	lhu	a5,22(s0)
   12b2c:	00d7f733          	and	a4,a5,a3
   12b30:	06070063          	beqz	a4,12b90 <emdnorm+0x174>
   12b34:	02d79263          	bne	a5,a3,12b58 <emdnorm+0x13c>
   12b38:	2c099463          	bnez	s3,12e00 <emdnorm+0x3e4>
   12b3c:	00c42783          	lw	a5,12(s0)
   12b40:	01845703          	lhu	a4,24(s0)
   12b44:	00179793          	slli	a5,a5,0x1
   12b48:	00f487b3          	add	a5,s1,a5
   12b4c:	0007d783          	lhu	a5,0(a5)
   12b50:	00e7f7b3          	and	a5,a5,a4
   12b54:	02078e63          	beqz	a5,12b90 <emdnorm+0x174>
   12b58:	03240793          	addi	a5,s0,50
   12b5c:	01848613          	addi	a2,s1,24
   12b60:	00248593          	addi	a1,s1,2
   12b64:	00000513          	li	a0,0
   12b68:	0007d703          	lhu	a4,0(a5)
   12b6c:	00065683          	lhu	a3,0(a2)
   12b70:	ffe60613          	addi	a2,a2,-2
   12b74:	ffe78793          	addi	a5,a5,-2
   12b78:	00d70733          	add	a4,a4,a3
   12b7c:	00a70733          	add	a4,a4,a0
   12b80:	01075513          	srli	a0,a4,0x10
   12b84:	00e61123          	sh	a4,2(a2)
   12b88:	00157513          	andi	a0,a0,1
   12b8c:	fcc59ee3          	bne	a1,a2,12b68 <emdnorm+0x14c>
   12b90:	23205863          	blez	s2,12dc0 <emdnorm+0x3a4>
   12b94:	0044d783          	lhu	a5,4(s1)
   12b98:	20079463          	bnez	a5,12da0 <emdnorm+0x384>
   12b9c:	000087b7          	lui	a5,0x8
   12ba0:	00049c23          	sh	zero,24(s1)
   12ba4:	ffe78793          	addi	a5,a5,-2 # 7ffe <__malloc_lock+0x66>
   12ba8:	0f27c263          	blt	a5,s2,12c8c <emdnorm+0x270>
   12bac:	01249123          	sh	s2,2(s1)
   12bb0:	01c12083          	lw	ra,28(sp)
   12bb4:	01812403          	lw	s0,24(sp)
   12bb8:	01412483          	lw	s1,20(sp)
   12bbc:	01012903          	lw	s2,16(sp)
   12bc0:	00c12983          	lw	s3,12(sp)
   12bc4:	00812a03          	lw	s4,8(sp)
   12bc8:	00412a83          	lw	s5,4(sp)
   12bcc:	02010113          	addi	sp,sp,32
   12bd0:	00008067          	ret
   12bd4:	04094063          	bltz	s2,12c14 <emdnorm+0x1f8>
   12bd8:	fc0a82e3          	beqz	s5,12b9c <emdnorm+0x180>
   12bdc:	00442a83          	lw	s5,4(s0)
   12be0:	00042783          	lw	a5,0(s0)
   12be4:	e8fa9ee3          	bne	s5,a5,12a80 <emdnorm+0x64>
   12be8:	2d204063          	bgtz	s2,12ea8 <emdnorm+0x48c>
   12bec:	09000713          	li	a4,144
   12bf0:	2ce79063          	bne	a5,a4,12eb0 <emdnorm+0x494>
   12bf4:	00842603          	lw	a2,8(s0)
   12bf8:	01445583          	lhu	a1,20(s0)
   12bfc:	09000a93          	li	s5,144
   12c00:	00161613          	slli	a2,a2,0x1
   12c04:	00c48633          	add	a2,s1,a2
   12c08:	00065703          	lhu	a4,0(a2)
   12c0c:	00b776b3          	and	a3,a4,a1
   12c10:	f0dff06f          	j	12b1c <emdnorm+0x100>
   12c14:	f7000793          	li	a5,-144
   12c18:	16f95063          	bge	s2,a5,12d78 <emdnorm+0x35c>
   12c1c:	00248793          	addi	a5,s1,2
   12c20:	01a48493          	addi	s1,s1,26
   12c24:	00278793          	addi	a5,a5,2
   12c28:	fe079f23          	sh	zero,-2(a5)
   12c2c:	fef49ce3          	bne	s1,a5,12c24 <emdnorm+0x208>
   12c30:	f81ff06f          	j	12bb0 <emdnorm+0x194>
   12c34:	01800793          	li	a5,24
   12c38:	06fa8c63          	beq	s5,a5,12cb0 <emdnorm+0x294>
   12c3c:	03500793          	li	a5,53
   12c40:	20fa9263          	bne	s5,a5,12e44 <emdnorm+0x428>
   12c44:	000017b7          	lui	a5,0x1
   12c48:	04000737          	lui	a4,0x4000
   12c4c:	00600693          	li	a3,6
   12c50:	80078793          	addi	a5,a5,-2048 # 800 <prvInitialiseNewTask+0x290>
   12c54:	7ff70713          	addi	a4,a4,2047 # 40007ff <__alt_data_end+0x3fc07ff>
   12c58:	00d42423          	sw	a3,8(s0)
   12c5c:	00e42a23          	sw	a4,20(s0)
   12c60:	00f41c23          	sh	a5,24(s0)
   12c64:	00d42623          	sw	a3,12(s0)
   12c68:	02f41323          	sh	a5,38(s0)
   12c6c:	01542023          	sw	s5,0(s0)
   12c70:	07205663          	blez	s2,12cdc <emdnorm+0x2c0>
   12c74:	00c4d683          	lhu	a3,12(s1)
   12c78:	00c48613          	addi	a2,s1,12
   12c7c:	00700793          	li	a5,7
   12c80:	7ff6f693          	andi	a3,a3,2047
   12c84:	e6dff06f          	j	12af0 <emdnorm+0xd4>
   12c88:	00049c23          	sh	zero,24(s1)
   12c8c:	ffff87b7          	lui	a5,0xffff8
   12c90:	fff7c793          	not	a5,a5
   12c94:	00f49123          	sh	a5,2(s1)
   12c98:	00448793          	addi	a5,s1,4
   12c9c:	01848493          	addi	s1,s1,24
   12ca0:	00079023          	sh	zero,0(a5) # ffff8000 <__alt_data_end+0xfffb8000>
   12ca4:	00278793          	addi	a5,a5,2
   12ca8:	fef49ce3          	bne	s1,a5,12ca0 <emdnorm+0x284>
   12cac:	f05ff06f          	j	12bb0 <emdnorm+0x194>
   12cb0:	008007b7          	lui	a5,0x800
   12cb4:	00400693          	li	a3,4
   12cb8:	10000713          	li	a4,256
   12cbc:	0ff78793          	addi	a5,a5,255 # 8000ff <__alt_data_end+0x7c00ff>
   12cc0:	00d42423          	sw	a3,8(s0)
   12cc4:	00f42a23          	sw	a5,20(s0)
   12cc8:	00e41c23          	sh	a4,24(s0)
   12ccc:	00d42623          	sw	a3,12(s0)
   12cd0:	02e41123          	sh	a4,34(s0)
   12cd4:	01542023          	sw	s5,0(s0)
   12cd8:	1b204a63          	bgtz	s2,12e8c <emdnorm+0x470>
   12cdc:	0184d783          	lhu	a5,24(s1)
   12ce0:	00048513          	mv	a0,s1
   12ce4:	0017f793          	andi	a5,a5,1
   12ce8:	00f9e9b3          	or	s3,s3,a5
   12cec:	e10ff0ef          	jal	ra,122fc <eshdn1>
   12cf0:	00842783          	lw	a5,8(s0)
   12cf4:	01445583          	lhu	a1,20(s0)
   12cf8:	08f00513          	li	a0,143
   12cfc:	00179613          	slli	a2,a5,0x1
   12d00:	00c48633          	add	a2,s1,a2
   12d04:	00065703          	lhu	a4,0(a2)
   12d08:	00b776b3          	and	a3,a4,a1
   12d0c:	e15548e3          	blt	a0,s5,12b1c <emdnorm+0x100>
   12d10:	00178793          	addi	a5,a5,1
   12d14:	00c00513          	li	a0,12
   12d18:	dcf55ce3          	bge	a0,a5,12af0 <emdnorm+0xd4>
   12d1c:	e01ff06f          	j	12b1c <emdnorm+0x100>
   12d20:	00248793          	addi	a5,s1,2
   12d24:	01a48493          	addi	s1,s1,26
   12d28:	00278793          	addi	a5,a5,2
   12d2c:	fe079f23          	sh	zero,-2(a5)
   12d30:	fef49ce3          	bne	s1,a5,12d28 <emdnorm+0x30c>
   12d34:	e7dff06f          	j	12bb0 <emdnorm+0x194>
   12d38:	00700793          	li	a5,7
   12d3c:	00f42423          	sw	a5,8(s0)
   12d40:	800107b7          	lui	a5,0x80010
   12d44:	fff78793          	addi	a5,a5,-1 # 8000ffff <__alt_data_end+0x7ffcffff>
   12d48:	00100713          	li	a4,1
   12d4c:	00f42a23          	sw	a5,20(s0)
   12d50:	00600793          	li	a5,6
   12d54:	00e41c23          	sh	a4,24(s0)
   12d58:	00f42623          	sw	a5,12(s0)
   12d5c:	02e41323          	sh	a4,38(s0)
   12d60:	01542023          	sw	s5,0(s0)
   12d64:	f7205ce3          	blez	s2,12cdc <emdnorm+0x2c0>
   12d68:	00e4d683          	lhu	a3,14(s1)
   12d6c:	00e48613          	addi	a2,s1,14
   12d70:	00800793          	li	a5,8
   12d74:	d7dff06f          	j	12af0 <emdnorm+0xd4>
   12d78:	00090593          	mv	a1,s2
   12d7c:	00048513          	mv	a0,s1
   12d80:	8e1ff0ef          	jal	ra,12660 <eshift.part.0>
   12d84:	0e050a63          	beqz	a0,12e78 <emdnorm+0x45c>
   12d88:	100a8a63          	beqz	s5,12e9c <emdnorm+0x480>
   12d8c:	00442a83          	lw	s5,4(s0)
   12d90:	00042783          	lw	a5,0(s0)
   12d94:	00100993          	li	s3,1
   12d98:	cefa94e3          	bne	s5,a5,12a80 <emdnorm+0x64>
   12d9c:	e51ff06f          	j	12bec <emdnorm+0x1d0>
   12da0:	00048513          	mv	a0,s1
   12da4:	d58ff0ef          	jal	ra,122fc <eshdn1>
   12da8:	000087b7          	lui	a5,0x8
   12dac:	00190913          	addi	s2,s2,1
   12db0:	00049c23          	sh	zero,24(s1)
   12db4:	ffe78793          	addi	a5,a5,-2 # 7ffe <__malloc_lock+0x66>
   12db8:	ed27cae3          	blt	a5,s2,12c8c <emdnorm+0x270>
   12dbc:	df1ff06f          	j	12bac <emdnorm+0x190>
   12dc0:	09000793          	li	a5,144
   12dc4:	02fa8263          	beq	s5,a5,12de8 <emdnorm+0x3cc>
   12dc8:	00048513          	mv	a0,s1
   12dcc:	d84ff0ef          	jal	ra,12350 <eshup1>
   12dd0:	0044d783          	lhu	a5,4(s1)
   12dd4:	00079e63          	bnez	a5,12df0 <emdnorm+0x3d4>
   12dd8:	00049c23          	sh	zero,24(s1)
   12ddc:	dc0958e3          	bgez	s2,12bac <emdnorm+0x190>
   12de0:	00049123          	sh	zero,2(s1)
   12de4:	dcdff06f          	j	12bb0 <emdnorm+0x194>
   12de8:	0044d783          	lhu	a5,4(s1)
   12dec:	fe0786e3          	beqz	a5,12dd8 <emdnorm+0x3bc>
   12df0:	00048513          	mv	a0,s1
   12df4:	d08ff0ef          	jal	ra,122fc <eshdn1>
   12df8:	00190913          	addi	s2,s2,1
   12dfc:	fddff06f          	j	12dd8 <emdnorm+0x3bc>
   12e00:	d40a0ce3          	beqz	s4,12b58 <emdnorm+0x13c>
   12e04:	d8dff06f          	j	12b90 <emdnorm+0x174>
   12e08:	008007b7          	lui	a5,0x800
   12e0c:	00600693          	li	a3,6
   12e10:	10000713          	li	a4,256
   12e14:	0ff78793          	addi	a5,a5,255 # 8000ff <__alt_data_end+0x7c00ff>
   12e18:	00d42423          	sw	a3,8(s0)
   12e1c:	00f42a23          	sw	a5,20(s0)
   12e20:	00e41c23          	sh	a4,24(s0)
   12e24:	00d42623          	sw	a3,12(s0)
   12e28:	02e41323          	sh	a4,38(s0)
   12e2c:	01542023          	sw	s5,0(s0)
   12e30:	eb2056e3          	blez	s2,12cdc <emdnorm+0x2c0>
   12e34:	00c4c683          	lbu	a3,12(s1)
   12e38:	00c48613          	addi	a2,s1,12
   12e3c:	00700793          	li	a5,7
   12e40:	cb1ff06f          	j	12af0 <emdnorm+0xd4>
   12e44:	00c00793          	li	a5,12
   12e48:	00f42423          	sw	a5,8(s0)
   12e4c:	800107b7          	lui	a5,0x80010
   12e50:	fff78793          	addi	a5,a5,-1 # 8000ffff <__alt_data_end+0x7ffcffff>
   12e54:	00100713          	li	a4,1
   12e58:	00f42a23          	sw	a5,20(s0)
   12e5c:	00b00793          	li	a5,11
   12e60:	00f42623          	sw	a5,12(s0)
   12e64:	00e41c23          	sh	a4,24(s0)
   12e68:	02e41823          	sh	a4,48(s0)
   12e6c:	01542023          	sw	s5,0(s0)
   12e70:	000a8793          	mv	a5,s5
   12e74:	d75ff06f          	j	12be8 <emdnorm+0x1cc>
   12e78:	020a8263          	beqz	s5,12e9c <emdnorm+0x480>
   12e7c:	00442a83          	lw	s5,4(s0)
   12e80:	00042783          	lw	a5,0(s0)
   12e84:	befa9ee3          	bne	s5,a5,12a80 <emdnorm+0x64>
   12e88:	d65ff06f          	j	12bec <emdnorm+0x1d0>
   12e8c:	0084c683          	lbu	a3,8(s1)
   12e90:	00848613          	addi	a2,s1,8
   12e94:	00500793          	li	a5,5
   12e98:	c59ff06f          	j	12af0 <emdnorm+0xd4>
   12e9c:	00049c23          	sh	zero,24(s1)
   12ea0:	00049123          	sh	zero,2(s1)
   12ea4:	d0dff06f          	j	12bb0 <emdnorm+0x194>
   12ea8:	00078a93          	mv	s5,a5
   12eac:	e45ff06f          	j	12cf0 <emdnorm+0x2d4>
   12eb0:	00078a93          	mv	s5,a5
   12eb4:	e29ff06f          	j	12cdc <emdnorm+0x2c0>

00012eb8 <eiremain>:
   12eb8:	fd010113          	addi	sp,sp,-48
   12ebc:	03212023          	sw	s2,32(sp)
   12ec0:	01312e23          	sw	s3,28(sp)
   12ec4:	00058913          	mv	s2,a1
   12ec8:	00255983          	lhu	s3,2(a0)
   12ecc:	02112623          	sw	ra,44(sp)
   12ed0:	02812423          	sw	s0,40(sp)
   12ed4:	02912223          	sw	s1,36(sp)
   12ed8:	01412c23          	sw	s4,24(sp)
   12edc:	00060493          	mv	s1,a2
   12ee0:	01712623          	sw	s7,12(sp)
   12ee4:	01512a23          	sw	s5,20(sp)
   12ee8:	01612823          	sw	s6,16(sp)
   12eec:	01812423          	sw	s8,8(sp)
   12ef0:	01912223          	sw	s9,4(sp)
   12ef4:	01a12023          	sw	s10,0(sp)
   12ef8:	00050b93          	mv	s7,a0
   12efc:	df0ff0ef          	jal	ra,124ec <enormlz>
   12f00:	00295403          	lhu	s0,2(s2)
   12f04:	00050793          	mv	a5,a0
   12f08:	00090513          	mv	a0,s2
   12f0c:	40f989b3          	sub	s3,s3,a5
   12f10:	03448a13          	addi	s4,s1,52
   12f14:	dd8ff0ef          	jal	ra,124ec <enormlz>
   12f18:	40a40433          	sub	s0,s0,a0
   12f1c:	04e48713          	addi	a4,s1,78
   12f20:	000a0793          	mv	a5,s4
   12f24:	00278793          	addi	a5,a5,2
   12f28:	fe079f23          	sh	zero,-2(a5)
   12f2c:	fee79ce3          	bne	a5,a4,12f24 <eiremain+0x6c>
   12f30:	09344863          	blt	s0,s3,12fc0 <eiremain+0x108>
   12f34:	004b8b13          	addi	s6,s7,4
   12f38:	00490a93          	addi	s5,s2,4
   12f3c:	01ab8c13          	addi	s8,s7,26
   12f40:	00290d13          	addi	s10,s2,2
   12f44:	000a8713          	mv	a4,s5
   12f48:	000b0793          	mv	a5,s6
   12f4c:	0007d603          	lhu	a2,0(a5)
   12f50:	00075683          	lhu	a3,0(a4)
   12f54:	00278793          	addi	a5,a5,2
   12f58:	00270713          	addi	a4,a4,2
   12f5c:	0ad61a63          	bne	a2,a3,13010 <eiremain+0x158>
   12f60:	fefc16e3          	bne	s8,a5,12f4c <eiremain+0x94>
   12f64:	018b8613          	addi	a2,s7,24
   12f68:	01890713          	addi	a4,s2,24
   12f6c:	00000693          	li	a3,0
   12f70:	00075783          	lhu	a5,0(a4)
   12f74:	00065583          	lhu	a1,0(a2)
   12f78:	ffe70713          	addi	a4,a4,-2
   12f7c:	ffe60613          	addi	a2,a2,-2
   12f80:	40b787b3          	sub	a5,a5,a1
   12f84:	40d787b3          	sub	a5,a5,a3
   12f88:	0107d693          	srli	a3,a5,0x10
   12f8c:	00f71123          	sh	a5,2(a4)
   12f90:	0016f693          	andi	a3,a3,1
   12f94:	fda71ee3          	bne	a4,s10,12f70 <eiremain+0xb8>
   12f98:	00100c93          	li	s9,1
   12f9c:	000a0513          	mv	a0,s4
   12fa0:	bb0ff0ef          	jal	ra,12350 <eshup1>
   12fa4:	04c4d783          	lhu	a5,76(s1)
   12fa8:	fff40413          	addi	s0,s0,-1
   12fac:	00090513          	mv	a0,s2
   12fb0:	00fce7b3          	or	a5,s9,a5
   12fb4:	04f49623          	sh	a5,76(s1)
   12fb8:	b98ff0ef          	jal	ra,12350 <eshup1>
   12fbc:	f93454e3          	bge	s0,s3,12f44 <eiremain+0x8c>
   12fc0:	00040693          	mv	a3,s0
   12fc4:	02812403          	lw	s0,40(sp)
   12fc8:	02c12083          	lw	ra,44(sp)
   12fcc:	01c12983          	lw	s3,28(sp)
   12fd0:	01812a03          	lw	s4,24(sp)
   12fd4:	01412a83          	lw	s5,20(sp)
   12fd8:	01012b03          	lw	s6,16(sp)
   12fdc:	00c12b83          	lw	s7,12(sp)
   12fe0:	00812c03          	lw	s8,8(sp)
   12fe4:	00412c83          	lw	s9,4(sp)
   12fe8:	00012d03          	lw	s10,0(sp)
   12fec:	00048793          	mv	a5,s1
   12ff0:	00090513          	mv	a0,s2
   12ff4:	02412483          	lw	s1,36(sp)
   12ff8:	02012903          	lw	s2,32(sp)
   12ffc:	00000713          	li	a4,0
   13000:	00000613          	li	a2,0
   13004:	00000593          	li	a1,0
   13008:	03010113          	addi	sp,sp,48
   1300c:	a11ff06f          	j	12a1c <emdnorm>
   13010:	00000c93          	li	s9,0
   13014:	f8c6e4e3          	bltu	a3,a2,12f9c <eiremain+0xe4>
   13018:	f4dff06f          	j	12f64 <eiremain+0xac>

0001301c <e113toe.isra.0>:
   1301c:	fd010113          	addi	sp,sp,-48
   13020:	02812423          	sw	s0,40(sp)
   13024:	02112623          	sw	ra,44(sp)
   13028:	00058413          	mv	s0,a1
   1302c:	00410793          	addi	a5,sp,4
   13030:	01e10713          	addi	a4,sp,30
   13034:	00278793          	addi	a5,a5,2
   13038:	fe079f23          	sh	zero,-2(a5)
   1303c:	fee79ce3          	bne	a5,a4,13034 <e113toe.isra.0+0x18>
   13040:	00e55603          	lhu	a2,14(a0)
   13044:	000087b7          	lui	a5,0x8
   13048:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   1304c:	00f65713          	srli	a4,a2,0xf
   13050:	40e00733          	neg	a4,a4
   13054:	00e11223          	sh	a4,4(sp)
   13058:	00f67633          	and	a2,a2,a5
   1305c:	06f60063          	beq	a2,a5,130bc <e113toe.isra.0+0xa0>
   13060:	00e50793          	addi	a5,a0,14
   13064:	00c11323          	sh	a2,6(sp)
   13068:	00a10713          	addi	a4,sp,10
   1306c:	ffe7d683          	lhu	a3,-2(a5)
   13070:	ffe78793          	addi	a5,a5,-2
   13074:	00270713          	addi	a4,a4,2
   13078:	fed71f23          	sh	a3,-2(a4)
   1307c:	fef518e3          	bne	a0,a5,1306c <e113toe.isra.0+0x50>
   13080:	02061263          	bnez	a2,130a4 <e113toe.isra.0+0x88>
   13084:	00011423          	sh	zero,8(sp)
   13088:	00040593          	mv	a1,s0
   1308c:	00410513          	addi	a0,sp,4
   13090:	ba0ff0ef          	jal	ra,12430 <emovo.constprop.0>
   13094:	02c12083          	lw	ra,44(sp)
   13098:	02812403          	lw	s0,40(sp)
   1309c:	03010113          	addi	sp,sp,48
   130a0:	00008067          	ret
   130a4:	00100793          	li	a5,1
   130a8:	fff00593          	li	a1,-1
   130ac:	00410513          	addi	a0,sp,4
   130b0:	00f11423          	sh	a5,8(sp)
   130b4:	dacff0ef          	jal	ra,12660 <eshift.part.0>
   130b8:	fd1ff06f          	j	13088 <e113toe.isra.0+0x6c>
   130bc:	00050793          	mv	a5,a0
   130c0:	00e50693          	addi	a3,a0,14
   130c4:	0007d703          	lhu	a4,0(a5)
   130c8:	00278793          	addi	a5,a5,2
   130cc:	06071c63          	bnez	a4,13144 <e113toe.isra.0+0x128>
   130d0:	fed79ae3          	bne	a5,a3,130c4 <e113toe.isra.0+0xa8>
   130d4:	01440713          	addi	a4,s0,20
   130d8:	00040793          	mv	a5,s0
   130dc:	00278793          	addi	a5,a5,2
   130e0:	fe079f23          	sh	zero,-2(a5)
   130e4:	fee79ce3          	bne	a5,a4,130dc <e113toe.isra.0+0xc0>
   130e8:	01240713          	addi	a4,s0,18
   130ec:	00040793          	mv	a5,s0
   130f0:	00278793          	addi	a5,a5,2
   130f4:	fe079f23          	sh	zero,-2(a5)
   130f8:	fee79ce3          	bne	a5,a4,130f0 <e113toe.isra.0+0xd4>
   130fc:	01245783          	lhu	a5,18(s0)
   13100:	000086b7          	lui	a3,0x8
   13104:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   13108:	00d7e7b3          	or	a5,a5,a3
   1310c:	01079793          	slli	a5,a5,0x10
   13110:	0107d793          	srli	a5,a5,0x10
   13114:	00f41923          	sh	a5,18(s0)
   13118:	00e51683          	lh	a3,14(a0)
   1311c:	f606dce3          	bgez	a3,13094 <e113toe.isra.0+0x78>
   13120:	00040693          	mv	a3,s0
   13124:	0006d603          	lhu	a2,0(a3)
   13128:	00268693          	addi	a3,a3,2
   1312c:	f60614e3          	bnez	a2,13094 <e113toe.isra.0+0x78>
   13130:	fee69ae3          	bne	a3,a4,13124 <e113toe.isra.0+0x108>
   13134:	ffff8737          	lui	a4,0xffff8
   13138:	00e7c7b3          	xor	a5,a5,a4
   1313c:	00f41923          	sh	a5,18(s0)
   13140:	f55ff06f          	j	13094 <e113toe.isra.0+0x78>
   13144:	01040713          	addi	a4,s0,16
   13148:	00040793          	mv	a5,s0
   1314c:	00278793          	addi	a5,a5,2
   13150:	fe079f23          	sh	zero,-2(a5)
   13154:	fee79ce3          	bne	a5,a4,1314c <e113toe.isra.0+0x130>
   13158:	ffffc7b7          	lui	a5,0xffffc
   1315c:	00f41823          	sh	a5,16(s0)
   13160:	ffff87b7          	lui	a5,0xffff8
   13164:	fff7c793          	not	a5,a5
   13168:	00f41923          	sh	a5,18(s0)
   1316c:	f29ff06f          	j	13094 <e113toe.isra.0+0x78>

00013170 <ediv>:
   13170:	01255783          	lhu	a5,18(a0)
   13174:	f5010113          	addi	sp,sp,-176
   13178:	0a812423          	sw	s0,168(sp)
   1317c:	fff7c793          	not	a5,a5
   13180:	0a912223          	sw	s1,164(sp)
   13184:	0b212023          	sw	s2,160(sp)
   13188:	09312e23          	sw	s3,156(sp)
   1318c:	0a112623          	sw	ra,172(sp)
   13190:	09412c23          	sw	s4,152(sp)
   13194:	09512a23          	sw	s5,148(sp)
   13198:	09612823          	sw	s6,144(sp)
   1319c:	09712623          	sw	s7,140(sp)
   131a0:	09812423          	sw	s8,136(sp)
   131a4:	09912223          	sw	s9,132(sp)
   131a8:	09a12023          	sw	s10,128(sp)
   131ac:	07b12e23          	sw	s11,124(sp)
   131b0:	01179713          	slli	a4,a5,0x11
   131b4:	00050493          	mv	s1,a0
   131b8:	00058993          	mv	s3,a1
   131bc:	00060413          	mv	s0,a2
   131c0:	00068913          	mv	s2,a3
   131c4:	00071e63          	bnez	a4,131e0 <ediv+0x70>
   131c8:	01250693          	addi	a3,a0,18
   131cc:	00050793          	mv	a5,a0
   131d0:	0007d703          	lhu	a4,0(a5) # ffff8000 <__alt_data_end+0xfffb8000>
   131d4:	00278793          	addi	a5,a5,2
   131d8:	0e071e63          	bnez	a4,132d4 <ediv+0x164>
   131dc:	fed79ae3          	bne	a5,a3,131d0 <ediv+0x60>
   131e0:	0129d783          	lhu	a5,18(s3)
   131e4:	fff7c793          	not	a5,a5
   131e8:	01179713          	slli	a4,a5,0x11
   131ec:	00071e63          	bnez	a4,13208 <ediv+0x98>
   131f0:	01298693          	addi	a3,s3,18
   131f4:	00098793          	mv	a5,s3
   131f8:	0007d703          	lhu	a4,0(a5)
   131fc:	00278793          	addi	a5,a5,2
   13200:	0e071863          	bnez	a4,132f0 <ediv+0x180>
   13204:	fed79ae3          	bne	a5,a3,131f8 <ediv+0x88>
   13208:	00010597          	auipc	a1,0x10
   1320c:	69858593          	addi	a1,a1,1688 # 238a0 <ezero>
   13210:	00048513          	mv	a0,s1
   13214:	ebcff0ef          	jal	ra,128d0 <ecmp>
   13218:	18050a63          	beqz	a0,133ac <ediv+0x23c>
   1321c:	0124d603          	lhu	a2,18(s1)
   13220:	000087b7          	lui	a5,0x8
   13224:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   13228:	00f67533          	and	a0,a2,a5
   1322c:	0ef51063          	bne	a0,a5,1330c <ediv+0x19c>
   13230:	01248693          	addi	a3,s1,18
   13234:	00048793          	mv	a5,s1
   13238:	0007d703          	lhu	a4,0(a5)
   1323c:	00278793          	addi	a5,a5,2
   13240:	0c071663          	bnez	a4,1330c <ediv+0x19c>
   13244:	fed79ae3          	bne	a5,a3,13238 <ediv+0xc8>
   13248:	0129d703          	lhu	a4,18(s3)
   1324c:	fff74793          	not	a5,a4
   13250:	01179693          	slli	a3,a5,0x11
   13254:	14069263          	bnez	a3,13398 <ediv+0x228>
   13258:	01298693          	addi	a3,s3,18
   1325c:	00098793          	mv	a5,s3
   13260:	0007d583          	lhu	a1,0(a5)
   13264:	00278793          	addi	a5,a5,2
   13268:	48059a63          	bnez	a1,136fc <ediv+0x58c>
   1326c:	fed79ae3          	bne	a5,a3,13260 <ediv+0xf0>
   13270:	01040713          	addi	a4,s0,16
   13274:	00040793          	mv	a5,s0
   13278:	00278793          	addi	a5,a5,2
   1327c:	fe079f23          	sh	zero,-2(a5)
   13280:	fee79ce3          	bne	a5,a4,13278 <ediv+0x108>
   13284:	ffffc7b7          	lui	a5,0xffffc
   13288:	00f41823          	sh	a5,16(s0)
   1328c:	ffff87b7          	lui	a5,0xffff8
   13290:	fff7c793          	not	a5,a5
   13294:	00f41923          	sh	a5,18(s0)
   13298:	0ac12083          	lw	ra,172(sp)
   1329c:	0a812403          	lw	s0,168(sp)
   132a0:	0a412483          	lw	s1,164(sp)
   132a4:	0a012903          	lw	s2,160(sp)
   132a8:	09c12983          	lw	s3,156(sp)
   132ac:	09812a03          	lw	s4,152(sp)
   132b0:	09412a83          	lw	s5,148(sp)
   132b4:	09012b03          	lw	s6,144(sp)
   132b8:	08c12b83          	lw	s7,140(sp)
   132bc:	08812c03          	lw	s8,136(sp)
   132c0:	08412c83          	lw	s9,132(sp)
   132c4:	08012d03          	lw	s10,128(sp)
   132c8:	07c12d83          	lw	s11,124(sp)
   132cc:	0b010113          	addi	sp,sp,176
   132d0:	00008067          	ret
   132d4:	01448713          	addi	a4,s1,20
   132d8:	0004d783          	lhu	a5,0(s1)
   132dc:	00248493          	addi	s1,s1,2
   132e0:	00240413          	addi	s0,s0,2
   132e4:	fef41f23          	sh	a5,-2(s0)
   132e8:	fee498e3          	bne	s1,a4,132d8 <ediv+0x168>
   132ec:	fadff06f          	j	13298 <ediv+0x128>
   132f0:	01440713          	addi	a4,s0,20
   132f4:	0009d783          	lhu	a5,0(s3)
   132f8:	00240413          	addi	s0,s0,2
   132fc:	00298993          	addi	s3,s3,2
   13300:	fef41f23          	sh	a5,-2(s0)
   13304:	fee418e3          	bne	s0,a4,132f4 <ediv+0x184>
   13308:	f91ff06f          	j	13298 <ediv+0x128>
   1330c:	0129d703          	lhu	a4,18(s3)
   13310:	fff74793          	not	a5,a4
   13314:	01179693          	slli	a3,a5,0x11
   13318:	0a069663          	bnez	a3,133c4 <ediv+0x254>
   1331c:	00000813          	li	a6,0
   13320:	01298693          	addi	a3,s3,18
   13324:	00098793          	mv	a5,s3
   13328:	0007d583          	lhu	a1,0(a5) # ffff8000 <__alt_data_end+0xfffb8000>
   1332c:	00278793          	addi	a5,a5,2
   13330:	06059263          	bnez	a1,13394 <ediv+0x224>
   13334:	fed79ae3          	bne	a5,a3,13328 <ediv+0x1b8>
   13338:	000087b7          	lui	a5,0x8
   1333c:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   13340:	0cf50a63          	beq	a0,a5,13414 <ediv+0x2a4>
   13344:	00f65613          	srli	a2,a2,0xf
   13348:	0009d783          	lhu	a5,0(s3)
   1334c:	00298993          	addi	s3,s3,2
   13350:	38079e63          	bnez	a5,136ec <ediv+0x57c>
   13354:	fed99ae3          	bne	s3,a3,13348 <ediv+0x1d8>
   13358:	00f75793          	srli	a5,a4,0xf
   1335c:	00c7c7b3          	xor	a5,a5,a2
   13360:	00f79793          	slli	a5,a5,0xf
   13364:	00f41923          	sh	a5,18(s0)
   13368:	01240713          	addi	a4,s0,18
   1336c:	00040793          	mv	a5,s0
   13370:	00278793          	addi	a5,a5,2
   13374:	fe079f23          	sh	zero,-2(a5)
   13378:	fee79ce3          	bne	a5,a4,13370 <ediv+0x200>
   1337c:	01245783          	lhu	a5,18(s0)
   13380:	00008737          	lui	a4,0x8
   13384:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   13388:	00e7e7b3          	or	a5,a5,a4
   1338c:	00f41923          	sh	a5,18(s0)
   13390:	f09ff06f          	j	13298 <ediv+0x128>
   13394:	02080863          	beqz	a6,133c4 <ediv+0x254>
   13398:	01440793          	addi	a5,s0,20
   1339c:	00240413          	addi	s0,s0,2
   133a0:	fe041f23          	sh	zero,-2(s0)
   133a4:	fef41ce3          	bne	s0,a5,1339c <ediv+0x22c>
   133a8:	ef1ff06f          	j	13298 <ediv+0x128>
   133ac:	00010597          	auipc	a1,0x10
   133b0:	4f458593          	addi	a1,a1,1268 # 238a0 <ezero>
   133b4:	00098513          	mv	a0,s3
   133b8:	d18ff0ef          	jal	ra,128d0 <ecmp>
   133bc:	e60510e3          	bnez	a0,1321c <ediv+0xac>
   133c0:	eb1ff06f          	j	13270 <ediv+0x100>
   133c4:	01c10593          	addi	a1,sp,28
   133c8:	00048513          	mv	a0,s1
   133cc:	c50ff0ef          	jal	ra,1281c <emovi>
   133d0:	03810593          	addi	a1,sp,56
   133d4:	00098513          	mv	a0,s3
   133d8:	c44ff0ef          	jal	ra,1281c <emovi>
   133dc:	03a15b03          	lhu	s6,58(sp)
   133e0:	01e15c03          	lhu	s8,30(sp)
   133e4:	040b1463          	bnez	s6,1342c <ediv+0x2bc>
   133e8:	03a10793          	addi	a5,sp,58
   133ec:	05010c93          	addi	s9,sp,80
   133f0:	0007d703          	lhu	a4,0(a5)
   133f4:	00278793          	addi	a5,a5,2
   133f8:	2c071663          	bnez	a4,136c4 <ediv+0x554>
   133fc:	fefc9ae3          	bne	s9,a5,133f0 <ediv+0x280>
   13400:	01440793          	addi	a5,s0,20
   13404:	00240413          	addi	s0,s0,2
   13408:	fe041f23          	sh	zero,-2(s0)
   1340c:	fef41ce3          	bne	s0,a5,13404 <ediv+0x294>
   13410:	e89ff06f          	j	13298 <ediv+0x128>
   13414:	01248593          	addi	a1,s1,18
   13418:	0004d783          	lhu	a5,0(s1)
   1341c:	00248493          	addi	s1,s1,2
   13420:	2c079a63          	bnez	a5,136f4 <ediv+0x584>
   13424:	feb49ae3          	bne	s1,a1,13418 <ediv+0x2a8>
   13428:	f1dff06f          	j	13344 <ediv+0x1d4>
   1342c:	01612223          	sw	s6,4(sp)
   13430:	040c1663          	bnez	s8,1347c <ediv+0x30c>
   13434:	01e10793          	addi	a5,sp,30
   13438:	03410693          	addi	a3,sp,52
   1343c:	0007d703          	lhu	a4,0(a5)
   13440:	00278793          	addi	a5,a5,2
   13444:	28071a63          	bnez	a4,136d8 <ediv+0x568>
   13448:	fed79ae3          	bne	a5,a3,1343c <ediv+0x2cc>
   1344c:	01c15683          	lhu	a3,28(sp)
   13450:	03815603          	lhu	a2,56(sp)
   13454:	01240713          	addi	a4,s0,18
   13458:	00040793          	mv	a5,s0
   1345c:	40c686b3          	sub	a3,a3,a2
   13460:	00d036b3          	snez	a3,a3
   13464:	00f69693          	slli	a3,a3,0xf
   13468:	00d41923          	sh	a3,18(s0)
   1346c:	00278793          	addi	a5,a5,2
   13470:	fe079f23          	sh	zero,-2(a5)
   13474:	fee79ce3          	bne	a5,a4,1346c <ediv+0x2fc>
   13478:	f05ff06f          	j	1337c <ediv+0x20c>
   1347c:	01812423          	sw	s8,8(sp)
   13480:	03490793          	addi	a5,s2,52
   13484:	00f12623          	sw	a5,12(sp)
   13488:	03812783          	lw	a5,56(sp)
   1348c:	03890493          	addi	s1,s2,56
   13490:	04e90993          	addi	s3,s2,78
   13494:	02f92a23          	sw	a5,52(s2)
   13498:	00048793          	mv	a5,s1
   1349c:	00278793          	addi	a5,a5,2
   134a0:	fe079f23          	sh	zero,-2(a5)
   134a4:	ff379ce3          	bne	a5,s3,1349c <ediv+0x32c>
   134a8:	03810513          	addi	a0,sp,56
   134ac:	e51fe0ef          	jal	ra,122fc <eshdn1>
   134b0:	02215b83          	lhu	s7,34(sp)
   134b4:	00010a37          	lui	s4,0x10
   134b8:	03a10d13          	addi	s10,sp,58
   134bc:	010b9a93          	slli	s5,s7,0x10
   134c0:	417a8ab3          	sub	s5,s5,s7
   134c4:	05010c93          	addi	s9,sp,80
   134c8:	fffa0a13          	addi	s4,s4,-1 # ffff <_vfprintf_r+0x21a3>
   134cc:	06e10d93          	addi	s11,sp,110
   134d0:	05610c13          	addi	s8,sp,86
   134d4:	03c15783          	lhu	a5,60(sp)
   134d8:	03e15703          	lhu	a4,62(sp)
   134dc:	000a0b13          	mv	s6,s4
   134e0:	01079793          	slli	a5,a5,0x10
   134e4:	00e787b3          	add	a5,a5,a4
   134e8:	00fae863          	bltu	s5,a5,134f8 <ediv+0x388>
   134ec:	0377d7b3          	divu	a5,a5,s7
   134f0:	01079b13          	slli	s6,a5,0x10
   134f4:	010b5b13          	srli	s6,s6,0x10
   134f8:	05410613          	addi	a2,sp,84
   134fc:	01c10593          	addi	a1,sp,28
   13500:	000b0513          	mv	a0,s6
   13504:	ea1fe0ef          	jal	ra,123a4 <m16m>
   13508:	03c10713          	addi	a4,sp,60
   1350c:	05810793          	addi	a5,sp,88
   13510:	0007d603          	lhu	a2,0(a5)
   13514:	00075683          	lhu	a3,0(a4)
   13518:	00278793          	addi	a5,a5,2
   1351c:	00270713          	addi	a4,a4,2
   13520:	0ed61863          	bne	a2,a3,13610 <ediv+0x4a0>
   13524:	ffb796e3          	bne	a5,s11,13510 <ediv+0x3a0>
   13528:	00000693          	li	a3,0
   1352c:	06c10613          	addi	a2,sp,108
   13530:	000c8793          	mv	a5,s9
   13534:	0007d703          	lhu	a4,0(a5)
   13538:	00065583          	lhu	a1,0(a2)
   1353c:	ffe78793          	addi	a5,a5,-2
   13540:	ffe60613          	addi	a2,a2,-2
   13544:	40b70733          	sub	a4,a4,a1
   13548:	40d70733          	sub	a4,a4,a3
   1354c:	01075693          	srli	a3,a4,0x10
   13550:	00e79123          	sh	a4,2(a5)
   13554:	0016f693          	andi	a3,a3,1
   13558:	fda79ee3          	bne	a5,s10,13534 <ediv+0x3c4>
   1355c:	01649023          	sh	s6,0(s1)
   13560:	03c10793          	addi	a5,sp,60
   13564:	0027d703          	lhu	a4,2(a5)
   13568:	00278793          	addi	a5,a5,2
   1356c:	fee79f23          	sh	a4,-2(a5)
   13570:	ff979ae3          	bne	a5,s9,13564 <ediv+0x3f4>
   13574:	04011823          	sh	zero,80(sp)
   13578:	00248493          	addi	s1,s1,2
   1357c:	f4999ce3          	bne	s3,s1,134d4 <ediv+0x364>
   13580:	00000713          	li	a4,0
   13584:	03c10793          	addi	a5,sp,60
   13588:	05210693          	addi	a3,sp,82
   1358c:	0007d603          	lhu	a2,0(a5)
   13590:	00278793          	addi	a5,a5,2
   13594:	00c76733          	or	a4,a4,a2
   13598:	fed79ae3          	bne	a5,a3,1358c <ediv+0x41c>
   1359c:	00c12483          	lw	s1,12(sp)
   135a0:	00e035b3          	snez	a1,a4
   135a4:	03810793          	addi	a5,sp,56
   135a8:	0004d703          	lhu	a4,0(s1)
   135ac:	00278793          	addi	a5,a5,2
   135b0:	00248493          	addi	s1,s1,2
   135b4:	fee79f23          	sh	a4,-2(a5)
   135b8:	fef698e3          	bne	a3,a5,135a8 <ediv+0x438>
   135bc:	00412783          	lw	a5,4(sp)
   135c0:	00812703          	lw	a4,8(sp)
   135c4:	000046b7          	lui	a3,0x4
   135c8:	fff68693          	addi	a3,a3,-1 # 3fff <xTaskPriorityDisinherit+0x16f>
   135cc:	40e78b33          	sub	s6,a5,a4
   135d0:	03810513          	addi	a0,sp,56
   135d4:	00090793          	mv	a5,s2
   135d8:	04000713          	li	a4,64
   135dc:	00db06b3          	add	a3,s6,a3
   135e0:	00000613          	li	a2,0
   135e4:	c38ff0ef          	jal	ra,12a1c <emdnorm>
   135e8:	03815703          	lhu	a4,56(sp)
   135ec:	01c15783          	lhu	a5,28(sp)
   135f0:	00040593          	mv	a1,s0
   135f4:	03810513          	addi	a0,sp,56
   135f8:	40e787b3          	sub	a5,a5,a4
   135fc:	00f037b3          	snez	a5,a5
   13600:	40f007b3          	neg	a5,a5
   13604:	02f11c23          	sh	a5,56(sp)
   13608:	e29fe0ef          	jal	ra,12430 <emovo.constprop.0>
   1360c:	c8dff06f          	j	13298 <ediv+0x128>
   13610:	f0c6fce3          	bgeu	a3,a2,13528 <ediv+0x3b8>
   13614:	fffb0793          	addi	a5,s6,-1
   13618:	01079313          	slli	t1,a5,0x10
   1361c:	01035313          	srli	t1,t1,0x10
   13620:	00000693          	li	a3,0
   13624:	03410613          	addi	a2,sp,52
   13628:	06c10713          	addi	a4,sp,108
   1362c:	00075783          	lhu	a5,0(a4)
   13630:	00065583          	lhu	a1,0(a2)
   13634:	ffe70713          	addi	a4,a4,-2
   13638:	ffe60613          	addi	a2,a2,-2
   1363c:	40b787b3          	sub	a5,a5,a1
   13640:	40d787b3          	sub	a5,a5,a3
   13644:	0107d693          	srli	a3,a5,0x10
   13648:	00f71123          	sh	a5,2(a4)
   1364c:	0016f693          	andi	a3,a3,1
   13650:	fd871ee3          	bne	a4,s8,1362c <ediv+0x4bc>
   13654:	03c10713          	addi	a4,sp,60
   13658:	05810793          	addi	a5,sp,88
   1365c:	0007d603          	lhu	a2,0(a5)
   13660:	00075683          	lhu	a3,0(a4)
   13664:	00278793          	addi	a5,a5,2
   13668:	00270713          	addi	a4,a4,2
   1366c:	00d61863          	bne	a2,a3,1367c <ediv+0x50c>
   13670:	ffb796e3          	bne	a5,s11,1365c <ediv+0x4ec>
   13674:	00030b13          	mv	s6,t1
   13678:	eb1ff06f          	j	13528 <ediv+0x3b8>
   1367c:	fec6fce3          	bgeu	a3,a2,13674 <ediv+0x504>
   13680:	ffeb0513          	addi	a0,s6,-2
   13684:	01051b13          	slli	s6,a0,0x10
   13688:	010b5b13          	srli	s6,s6,0x10
   1368c:	00000693          	li	a3,0
   13690:	03410613          	addi	a2,sp,52
   13694:	06c10713          	addi	a4,sp,108
   13698:	00075783          	lhu	a5,0(a4)
   1369c:	00065583          	lhu	a1,0(a2)
   136a0:	ffe70713          	addi	a4,a4,-2
   136a4:	ffe60613          	addi	a2,a2,-2
   136a8:	40b787b3          	sub	a5,a5,a1
   136ac:	40d787b3          	sub	a5,a5,a3
   136b0:	0107d693          	srli	a3,a5,0x10
   136b4:	00f71123          	sh	a5,2(a4)
   136b8:	0016f693          	andi	a3,a3,1
   136bc:	fd871ee3          	bne	a4,s8,13698 <ediv+0x528>
   136c0:	e69ff06f          	j	13528 <ediv+0x3b8>
   136c4:	03810513          	addi	a0,sp,56
   136c8:	e25fe0ef          	jal	ra,124ec <enormlz>
   136cc:	40a007b3          	neg	a5,a0
   136d0:	00f12223          	sw	a5,4(sp)
   136d4:	d5dff06f          	j	13430 <ediv+0x2c0>
   136d8:	01c10513          	addi	a0,sp,28
   136dc:	e11fe0ef          	jal	ra,124ec <enormlz>
   136e0:	40a007b3          	neg	a5,a0
   136e4:	00f12423          	sw	a5,8(sp)
   136e8:	d99ff06f          	j	13480 <ediv+0x310>
   136ec:	00000793          	li	a5,0
   136f0:	c6dff06f          	j	1335c <ediv+0x1ec>
   136f4:	00000613          	li	a2,0
   136f8:	c51ff06f          	j	13348 <ediv+0x1d8>
   136fc:	00100813          	li	a6,1
   13700:	c25ff06f          	j	13324 <ediv+0x1b4>

00013704 <emul>:
   13704:	01255803          	lhu	a6,18(a0)
   13708:	00008737          	lui	a4,0x8
   1370c:	f7010113          	addi	sp,sp,-144
   13710:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   13714:	08812423          	sw	s0,136(sp)
   13718:	08912223          	sw	s1,132(sp)
   1371c:	09212023          	sw	s2,128(sp)
   13720:	07512a23          	sw	s5,116(sp)
   13724:	00050493          	mv	s1,a0
   13728:	08112623          	sw	ra,140(sp)
   1372c:	07312e23          	sw	s3,124(sp)
   13730:	07412c23          	sw	s4,120(sp)
   13734:	07612823          	sw	s6,112(sp)
   13738:	07712623          	sw	s7,108(sp)
   1373c:	07812423          	sw	s8,104(sp)
   13740:	07912223          	sw	s9,100(sp)
   13744:	07a12023          	sw	s10,96(sp)
   13748:	00e87533          	and	a0,a6,a4
   1374c:	00058913          	mv	s2,a1
   13750:	00060413          	mv	s0,a2
   13754:	00068a93          	mv	s5,a3
   13758:	16e51e63          	bne	a0,a4,138d4 <emul+0x1d0>
   1375c:	01248993          	addi	s3,s1,18
   13760:	00048713          	mv	a4,s1
   13764:	00075603          	lhu	a2,0(a4)
   13768:	00270713          	addi	a4,a4,2
   1376c:	1e061c63          	bnez	a2,13964 <emul+0x260>
   13770:	ff371ae3          	bne	a4,s3,13764 <emul+0x60>
   13774:	01295603          	lhu	a2,18(s2)
   13778:	fff64793          	not	a5,a2
   1377c:	01179713          	slli	a4,a5,0x11
   13780:	16070063          	beqz	a4,138e0 <emul+0x1dc>
   13784:	00048793          	mv	a5,s1
   13788:	0007d703          	lhu	a4,0(a5)
   1378c:	00278793          	addi	a5,a5,2
   13790:	28071063          	bnez	a4,13a10 <emul+0x30c>
   13794:	ff379ae3          	bne	a5,s3,13788 <emul+0x84>
   13798:	00010597          	auipc	a1,0x10
   1379c:	10858593          	addi	a1,a1,264 # 238a0 <ezero>
   137a0:	00090513          	mv	a0,s2
   137a4:	92cff0ef          	jal	ra,128d0 <ecmp>
   137a8:	28050063          	beqz	a0,13a28 <emul+0x324>
   137ac:	01295603          	lhu	a2,18(s2)
   137b0:	00008737          	lui	a4,0x8
   137b4:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   137b8:	00e676b3          	and	a3,a2,a4
   137bc:	01290793          	addi	a5,s2,18
   137c0:	40e69263          	bne	a3,a4,13bc4 <emul+0x4c0>
   137c4:	00090713          	mv	a4,s2
   137c8:	00075683          	lhu	a3,0(a4)
   137cc:	00270713          	addi	a4,a4,2
   137d0:	1e069c63          	bnez	a3,139c8 <emul+0x2c4>
   137d4:	fef71ae3          	bne	a4,a5,137c8 <emul+0xc4>
   137d8:	00010597          	auipc	a1,0x10
   137dc:	0c858593          	addi	a1,a1,200 # 238a0 <ezero>
   137e0:	00048513          	mv	a0,s1
   137e4:	8ecff0ef          	jal	ra,128d0 <ecmp>
   137e8:	24050063          	beqz	a0,13a28 <emul+0x324>
   137ec:	0124d803          	lhu	a6,18(s1)
   137f0:	01295603          	lhu	a2,18(s2)
   137f4:	000087b7          	lui	a5,0x8
   137f8:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   137fc:	00f87733          	and	a4,a6,a5
   13800:	00f676b3          	and	a3,a2,a5
   13804:	1cf70c63          	beq	a4,a5,139dc <emul+0x2d8>
   13808:	00068593          	mv	a1,a3
   1380c:	00070693          	mv	a3,a4
   13810:	000087b7          	lui	a5,0x8
   13814:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   13818:	0ef59c63          	bne	a1,a5,13910 <emul+0x20c>
   1381c:	01290793          	addi	a5,s2,18
   13820:	00090713          	mv	a4,s2
   13824:	00075583          	lhu	a1,0(a4)
   13828:	00270713          	addi	a4,a4,2
   1382c:	0e059263          	bnez	a1,13910 <emul+0x20c>
   13830:	fee79ae3          	bne	a5,a4,13824 <emul+0x120>
   13834:	00008737          	lui	a4,0x8
   13838:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   1383c:	01248993          	addi	s3,s1,18
   13840:	20e69a63          	bne	a3,a4,13a54 <emul+0x350>
   13844:	0004d783          	lhu	a5,0(s1)
   13848:	00248493          	addi	s1,s1,2
   1384c:	20079c63          	bnez	a5,13a64 <emul+0x360>
   13850:	fe999ae3          	bne	s3,s1,13844 <emul+0x140>
   13854:	00f85813          	srli	a6,a6,0xf
   13858:	000087b7          	lui	a5,0x8
   1385c:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   13860:	18f68c63          	beq	a3,a5,139f8 <emul+0x2f4>
   13864:	00f65793          	srli	a5,a2,0xf
   13868:	0107c7b3          	xor	a5,a5,a6
   1386c:	00f79793          	slli	a5,a5,0xf
   13870:	00f41923          	sh	a5,18(s0)
   13874:	01240713          	addi	a4,s0,18
   13878:	00040793          	mv	a5,s0
   1387c:	00278793          	addi	a5,a5,2
   13880:	fe079f23          	sh	zero,-2(a5)
   13884:	fee79ce3          	bne	a5,a4,1387c <emul+0x178>
   13888:	01245783          	lhu	a5,18(s0)
   1388c:	00008737          	lui	a4,0x8
   13890:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   13894:	00e7e7b3          	or	a5,a5,a4
   13898:	00f41923          	sh	a5,18(s0)
   1389c:	08c12083          	lw	ra,140(sp)
   138a0:	08812403          	lw	s0,136(sp)
   138a4:	08412483          	lw	s1,132(sp)
   138a8:	08012903          	lw	s2,128(sp)
   138ac:	07c12983          	lw	s3,124(sp)
   138b0:	07812a03          	lw	s4,120(sp)
   138b4:	07412a83          	lw	s5,116(sp)
   138b8:	07012b03          	lw	s6,112(sp)
   138bc:	06c12b83          	lw	s7,108(sp)
   138c0:	06812c03          	lw	s8,104(sp)
   138c4:	06412c83          	lw	s9,100(sp)
   138c8:	06012d03          	lw	s10,96(sp)
   138cc:	09010113          	addi	sp,sp,144
   138d0:	00008067          	ret
   138d4:	0125d603          	lhu	a2,18(a1)
   138d8:	00e677b3          	and	a5,a2,a4
   138dc:	02e79a63          	bne	a5,a4,13910 <emul+0x20c>
   138e0:	01290793          	addi	a5,s2,18
   138e4:	00090713          	mv	a4,s2
   138e8:	00075683          	lhu	a3,0(a4)
   138ec:	00270713          	addi	a4,a4,2
   138f0:	08069863          	bnez	a3,13980 <emul+0x27c>
   138f4:	fef71ae3          	bne	a4,a5,138e8 <emul+0x1e4>
   138f8:	00008737          	lui	a4,0x8
   138fc:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   13900:	01248993          	addi	s3,s1,18
   13904:	e8e500e3          	beq	a0,a4,13784 <emul+0x80>
   13908:	00e676b3          	and	a3,a2,a4
   1390c:	eae68ce3          	beq	a3,a4,137c4 <emul+0xc0>
   13910:	00048513          	mv	a0,s1
   13914:	00c10593          	addi	a1,sp,12
   13918:	f05fe0ef          	jal	ra,1281c <emovi>
   1391c:	00090513          	mv	a0,s2
   13920:	02810593          	addi	a1,sp,40
   13924:	ef9fe0ef          	jal	ra,1281c <emovi>
   13928:	00e15903          	lhu	s2,14(sp)
   1392c:	02a15483          	lhu	s1,42(sp)
   13930:	06090663          	beqz	s2,1399c <emul+0x298>
   13934:	14049463          	bnez	s1,13a7c <emul+0x378>
   13938:	02a10793          	addi	a5,sp,42
   1393c:	04010693          	addi	a3,sp,64
   13940:	0007d703          	lhu	a4,0(a5)
   13944:	00278793          	addi	a5,a5,2
   13948:	26071463          	bnez	a4,13bb0 <emul+0x4ac>
   1394c:	fed79ae3          	bne	a5,a3,13940 <emul+0x23c>
   13950:	01440793          	addi	a5,s0,20
   13954:	00240413          	addi	s0,s0,2
   13958:	fe041f23          	sh	zero,-2(s0)
   1395c:	fe879ce3          	bne	a5,s0,13954 <emul+0x250>
   13960:	f3dff06f          	j	1389c <emul+0x198>
   13964:	01440713          	addi	a4,s0,20
   13968:	0004d783          	lhu	a5,0(s1)
   1396c:	00240413          	addi	s0,s0,2
   13970:	00248493          	addi	s1,s1,2
   13974:	fef41f23          	sh	a5,-2(s0)
   13978:	fee418e3          	bne	s0,a4,13968 <emul+0x264>
   1397c:	f21ff06f          	j	1389c <emul+0x198>
   13980:	01490713          	addi	a4,s2,20
   13984:	00095783          	lhu	a5,0(s2)
   13988:	00290913          	addi	s2,s2,2
   1398c:	00240413          	addi	s0,s0,2
   13990:	fef41f23          	sh	a5,-2(s0)
   13994:	ff2718e3          	bne	a4,s2,13984 <emul+0x280>
   13998:	f05ff06f          	j	1389c <emul+0x198>
   1399c:	00e10793          	addi	a5,sp,14
   139a0:	02410693          	addi	a3,sp,36
   139a4:	0007d703          	lhu	a4,0(a5)
   139a8:	00278793          	addi	a5,a5,2
   139ac:	1e071a63          	bnez	a4,13ba0 <emul+0x49c>
   139b0:	fef69ae3          	bne	a3,a5,139a4 <emul+0x2a0>
   139b4:	01440793          	addi	a5,s0,20
   139b8:	00240413          	addi	s0,s0,2
   139bc:	fe041f23          	sh	zero,-2(s0)
   139c0:	fef41ce3          	bne	s0,a5,139b8 <emul+0x2b4>
   139c4:	ed9ff06f          	j	1389c <emul+0x198>
   139c8:	0124d803          	lhu	a6,18(s1)
   139cc:	00008737          	lui	a4,0x8
   139d0:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   139d4:	00e876b3          	and	a3,a6,a4
   139d8:	e4e694e3          	bne	a3,a4,13820 <emul+0x11c>
   139dc:	01248993          	addi	s3,s1,18
   139e0:	00048793          	mv	a5,s1
   139e4:	0007d703          	lhu	a4,0(a5)
   139e8:	00278793          	addi	a5,a5,2
   139ec:	08071063          	bnez	a4,13a6c <emul+0x368>
   139f0:	fef99ae3          	bne	s3,a5,139e4 <emul+0x2e0>
   139f4:	e51ff06f          	j	13844 <emul+0x140>
   139f8:	01290793          	addi	a5,s2,18
   139fc:	00095703          	lhu	a4,0(s2)
   13a00:	00290913          	addi	s2,s2,2
   13a04:	04071c63          	bnez	a4,13a5c <emul+0x358>
   13a08:	ff279ae3          	bne	a5,s2,139fc <emul+0x2f8>
   13a0c:	e59ff06f          	j	13864 <emul+0x160>
   13a10:	00008737          	lui	a4,0x8
   13a14:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   13a18:	00e676b3          	and	a3,a2,a4
   13a1c:	01290793          	addi	a5,s2,18
   13a20:	dae682e3          	beq	a3,a4,137c4 <emul+0xc0>
   13a24:	fbdff06f          	j	139e0 <emul+0x2dc>
   13a28:	01040713          	addi	a4,s0,16
   13a2c:	00040793          	mv	a5,s0
   13a30:	00278793          	addi	a5,a5,2
   13a34:	fe079f23          	sh	zero,-2(a5)
   13a38:	fee79ce3          	bne	a5,a4,13a30 <emul+0x32c>
   13a3c:	ffffc7b7          	lui	a5,0xffffc
   13a40:	00f41823          	sh	a5,16(s0)
   13a44:	ffff87b7          	lui	a5,0xffff8
   13a48:	fff7c793          	not	a5,a5
   13a4c:	00f41923          	sh	a5,18(s0)
   13a50:	e4dff06f          	j	1389c <emul+0x198>
   13a54:	00f85813          	srli	a6,a6,0xf
   13a58:	fa5ff06f          	j	139fc <emul+0x2f8>
   13a5c:	00000793          	li	a5,0
   13a60:	e09ff06f          	j	13868 <emul+0x164>
   13a64:	00000813          	li	a6,0
   13a68:	df1ff06f          	j	13858 <emul+0x154>
   13a6c:	00068593          	mv	a1,a3
   13a70:	000086b7          	lui	a3,0x8
   13a74:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   13a78:	d99ff06f          	j	13810 <emul+0x10c>
   13a7c:	00048993          	mv	s3,s1
   13a80:	02815783          	lhu	a5,40(sp)
   13a84:	01049493          	slli	s1,s1,0x10
   13a88:	038a8a13          	addi	s4,s5,56
   13a8c:	0097e7b3          	or	a5,a5,s1
   13a90:	02faaa23          	sw	a5,52(s5)
   13a94:	034a8493          	addi	s1,s5,52
   13a98:	000a0793          	mv	a5,s4
   13a9c:	04ea8713          	addi	a4,s5,78
   13aa0:	00079023          	sh	zero,0(a5) # ffff8000 <__alt_data_end+0xfffb8000>
   13aa4:	00278793          	addi	a5,a5,2
   13aa8:	fee79ce3          	bne	a5,a4,13aa0 <emul+0x39c>
   13aac:	04ca8c93          	addi	s9,s5,76
   13ab0:	00000c13          	li	s8,0
   13ab4:	02410b13          	addi	s6,sp,36
   13ab8:	01010d13          	addi	s10,sp,16
   13abc:	04610b93          	addi	s7,sp,70
   13ac0:	000b5503          	lhu	a0,0(s6)
   13ac4:	ffeb0b13          	addi	s6,s6,-2
   13ac8:	08051a63          	bnez	a0,13b5c <emul+0x458>
   13acc:	04cad783          	lhu	a5,76(s5)
   13ad0:	000c8713          	mv	a4,s9
   13ad4:	00fc6c33          	or	s8,s8,a5
   13ad8:	ffe75603          	lhu	a2,-2(a4)
   13adc:	ffe70713          	addi	a4,a4,-2
   13ae0:	00c71123          	sh	a2,2(a4)
   13ae4:	feea1ae3          	bne	s4,a4,13ad8 <emul+0x3d4>
   13ae8:	020a9c23          	sh	zero,56(s5)
   13aec:	fdab1ae3          	bne	s6,s10,13ac0 <emul+0x3bc>
   13af0:	02810793          	addi	a5,sp,40
   13af4:	04210693          	addi	a3,sp,66
   13af8:	0004d703          	lhu	a4,0(s1)
   13afc:	00278793          	addi	a5,a5,2
   13b00:	00248493          	addi	s1,s1,2
   13b04:	fee79f23          	sh	a4,-2(a5)
   13b08:	fef698e3          	bne	a3,a5,13af8 <emul+0x3f4>
   13b0c:	ffffc6b7          	lui	a3,0xffffc
   13b10:	01390933          	add	s2,s2,s3
   13b14:	00268693          	addi	a3,a3,2 # ffffc002 <__alt_data_end+0xfffbc002>
   13b18:	000c0593          	mv	a1,s8
   13b1c:	02810513          	addi	a0,sp,40
   13b20:	000a8793          	mv	a5,s5
   13b24:	04000713          	li	a4,64
   13b28:	00d906b3          	add	a3,s2,a3
   13b2c:	00000613          	li	a2,0
   13b30:	eedfe0ef          	jal	ra,12a1c <emdnorm>
   13b34:	02815703          	lhu	a4,40(sp)
   13b38:	00c15783          	lhu	a5,12(sp)
   13b3c:	00040593          	mv	a1,s0
   13b40:	02810513          	addi	a0,sp,40
   13b44:	40e787b3          	sub	a5,a5,a4
   13b48:	00f037b3          	snez	a5,a5
   13b4c:	40f007b3          	neg	a5,a5
   13b50:	02f11423          	sh	a5,40(sp)
   13b54:	8ddfe0ef          	jal	ra,12430 <emovo.constprop.0>
   13b58:	d45ff06f          	j	1389c <emul+0x198>
   13b5c:	04410613          	addi	a2,sp,68
   13b60:	02810593          	addi	a1,sp,40
   13b64:	841fe0ef          	jal	ra,123a4 <m16m>
   13b68:	000c8513          	mv	a0,s9
   13b6c:	00000593          	li	a1,0
   13b70:	05c10613          	addi	a2,sp,92
   13b74:	00055783          	lhu	a5,0(a0)
   13b78:	00065703          	lhu	a4,0(a2)
   13b7c:	ffe50513          	addi	a0,a0,-2
   13b80:	ffe60613          	addi	a2,a2,-2
   13b84:	00f70733          	add	a4,a4,a5
   13b88:	00b70733          	add	a4,a4,a1
   13b8c:	01075593          	srli	a1,a4,0x10
   13b90:	00e51123          	sh	a4,2(a0)
   13b94:	0015f593          	andi	a1,a1,1
   13b98:	fd761ee3          	bne	a2,s7,13b74 <emul+0x470>
   13b9c:	f31ff06f          	j	13acc <emul+0x3c8>
   13ba0:	00c10513          	addi	a0,sp,12
   13ba4:	949fe0ef          	jal	ra,124ec <enormlz>
   13ba8:	40a00933          	neg	s2,a0
   13bac:	d89ff06f          	j	13934 <emul+0x230>
   13bb0:	02810513          	addi	a0,sp,40
   13bb4:	939fe0ef          	jal	ra,124ec <enormlz>
   13bb8:	40a009b3          	neg	s3,a0
   13bbc:	02a15483          	lhu	s1,42(sp)
   13bc0:	ec1ff06f          	j	13a80 <emul+0x37c>
   13bc4:	0124d803          	lhu	a6,18(s1)
   13bc8:	00e877b3          	and	a5,a6,a4
   13bcc:	e0e78ae3          	beq	a5,a4,139e0 <emul+0x2dc>
   13bd0:	d41ff06f          	j	13910 <emul+0x20c>

00013bd4 <_ldtoa_r>:
   13bd4:	00c5a883          	lw	a7,12(a1)
   13bd8:	e0010113          	addi	sp,sp,-512
   13bdc:	0005ae83          	lw	t4,0(a1)
   13be0:	0045ae03          	lw	t3,4(a1)
   13be4:	0085a303          	lw	t1,8(a1)
   13be8:	05112623          	sw	a7,76(sp)
   13bec:	04052583          	lw	a1,64(a0)
   13bf0:	fff00893          	li	a7,-1
   13bf4:	17112823          	sw	a7,368(sp)
   13bf8:	09000893          	li	a7,144
   13bfc:	1e812c23          	sw	s0,504(sp)
   13c00:	1f312623          	sw	s3,492(sp)
   13c04:	1f512223          	sw	s5,484(sp)
   13c08:	1e112e23          	sw	ra,508(sp)
   13c0c:	1e912a23          	sw	s1,500(sp)
   13c10:	1f212823          	sw	s2,496(sp)
   13c14:	1f412423          	sw	s4,488(sp)
   13c18:	1f612023          	sw	s6,480(sp)
   13c1c:	1d712e23          	sw	s7,476(sp)
   13c20:	1d812c23          	sw	s8,472(sp)
   13c24:	1d912a23          	sw	s9,468(sp)
   13c28:	1da12823          	sw	s10,464(sp)
   13c2c:	1db12623          	sw	s11,460(sp)
   13c30:	05d12023          	sw	t4,64(sp)
   13c34:	05c12223          	sw	t3,68(sp)
   13c38:	04612423          	sw	t1,72(sp)
   13c3c:	17112a23          	sw	a7,372(sp)
   13c40:	00d12823          	sw	a3,16(sp)
   13c44:	00e12a23          	sw	a4,20(sp)
   13c48:	01012c23          	sw	a6,24(sp)
   13c4c:	00050993          	mv	s3,a0
   13c50:	00060a93          	mv	s5,a2
   13c54:	00078413          	mv	s0,a5
   13c58:	02058063          	beqz	a1,13c78 <_ldtoa_r+0xa4>
   13c5c:	04452703          	lw	a4,68(a0)
   13c60:	00100793          	li	a5,1
   13c64:	00e797b3          	sll	a5,a5,a4
   13c68:	00e5a223          	sw	a4,4(a1)
   13c6c:	00f5a423          	sw	a5,8(a1)
   13c70:	7d9010ef          	jal	ra,15c48 <_Bfree>
   13c74:	0409a023          	sw	zero,64(s3)
   13c78:	07010593          	addi	a1,sp,112
   13c7c:	04010513          	addi	a0,sp,64
   13c80:	b9cff0ef          	jal	ra,1301c <e113toe.isra.0>
   13c84:	08215603          	lhu	a2,130(sp)
   13c88:	00008737          	lui	a4,0x8
   13c8c:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   13c90:	00e677b3          	and	a5,a2,a4
   13c94:	00f12e23          	sw	a5,28(sp)
   13c98:	48e78463          	beq	a5,a4,14120 <_ldtoa_r+0x54c>
   13c9c:	00f65613          	srli	a2,a2,0xf
   13ca0:	00c42023          	sw	a2,0(s0)
   13ca4:	00300793          	li	a5,3
   13ca8:	16fa82e3          	beq	s5,a5,1460c <_ldtoa_r+0xa38>
   13cac:	01400793          	li	a5,20
   13cb0:	00f12623          	sw	a5,12(sp)
   13cb4:	160a98e3          	bnez	s5,14624 <_ldtoa_r+0xa50>
   13cb8:	07010793          	addi	a5,sp,112
   13cbc:	08410613          	addi	a2,sp,132
   13cc0:	08c10713          	addi	a4,sp,140
   13cc4:	0007a683          	lw	a3,0(a5)
   13cc8:	00478793          	addi	a5,a5,4
   13ccc:	00470713          	addi	a4,a4,4
   13cd0:	fed72e23          	sw	a3,-4(a4)
   13cd4:	fef618e3          	bne	a2,a5,13cc4 <_ldtoa_r+0xf0>
   13cd8:	09e15c83          	lhu	s9,158(sp)
   13cdc:	02012023          	sw	zero,32(sp)
   13ce0:	010c9793          	slli	a5,s9,0x10
   13ce4:	4107d793          	srai	a5,a5,0x10
   13ce8:	0007de63          	bgez	a5,13d04 <_ldtoa_r+0x130>
   13cec:	011c9c93          	slli	s9,s9,0x11
   13cf0:	000107b7          	lui	a5,0x10
   13cf4:	011cdc93          	srli	s9,s9,0x11
   13cf8:	fff78793          	addi	a5,a5,-1 # ffff <_vfprintf_r+0x21a3>
   13cfc:	09911f23          	sh	s9,158(sp)
   13d00:	02f12023          	sw	a5,32(sp)
   13d04:	00010717          	auipc	a4,0x10
   13d08:	db870713          	addi	a4,a4,-584 # 23abc <eone>
   13d0c:	0a810c13          	addi	s8,sp,168
   13d10:	00010a17          	auipc	s4,0x10
   13d14:	dc0a0a13          	addi	s4,s4,-576 # 23ad0 <bmask>
   13d18:	000c0613          	mv	a2,s8
   13d1c:	00070693          	mv	a3,a4
   13d20:	0006a783          	lw	a5,0(a3)
   13d24:	00468693          	addi	a3,a3,4
   13d28:	00460613          	addi	a2,a2,4
   13d2c:	fef62e23          	sw	a5,-4(a2)
   13d30:	ff4698e3          	bne	a3,s4,13d20 <_ldtoa_r+0x14c>
   13d34:	6a0c9e63          	bnez	s9,143f0 <_ldtoa_r+0x81c>
   13d38:	08c10793          	addi	a5,sp,140
   13d3c:	09e10593          	addi	a1,sp,158
   13d40:	00078693          	mv	a3,a5
   13d44:	0006d783          	lhu	a5,0(a3)
   13d48:	6a079e63          	bnez	a5,14404 <_ldtoa_r+0x830>
   13d4c:	00268693          	addi	a3,a3,2
   13d50:	fed59ae3          	bne	a1,a3,13d44 <_ldtoa_r+0x170>
   13d54:	00000413          	li	s0,0
   13d58:	13410d93          	addi	s11,sp,308
   13d5c:	17010913          	addi	s2,sp,368
   13d60:	0e010b93          	addi	s7,sp,224
   13d64:	0f810d13          	addi	s10,sp,248
   13d68:	000b8593          	mv	a1,s7
   13d6c:	0a810513          	addi	a0,sp,168
   13d70:	aadfe0ef          	jal	ra,1281c <emovi>
   13d74:	000b8a13          	mv	s4,s7
   13d78:	000b8713          	mv	a4,s7
   13d7c:	00072783          	lw	a5,0(a4)
   13d80:	00470713          	addi	a4,a4,4
   13d84:	004c0c13          	addi	s8,s8,4
   13d88:	fefc2e23          	sw	a5,-4(s8)
   13d8c:	feed18e3          	bne	s10,a4,13d7c <_ldtoa_r+0x1a8>
   13d90:	000b8593          	mv	a1,s7
   13d94:	08c10513          	addi	a0,sp,140
   13d98:	0c011023          	sh	zero,192(sp)
   13d9c:	a81fe0ef          	jal	ra,1281c <emovi>
   13da0:	0a410d13          	addi	s10,sp,164
   13da4:	08c10793          	addi	a5,sp,140
   13da8:	000a2703          	lw	a4,0(s4)
   13dac:	00478793          	addi	a5,a5,4
   13db0:	004a0a13          	addi	s4,s4,4
   13db4:	fee7ae23          	sw	a4,-4(a5)
   13db8:	ffa798e3          	bne	a5,s10,13da8 <_ldtoa_r+0x1d4>
   13dbc:	0a810513          	addi	a0,sp,168
   13dc0:	00090613          	mv	a2,s2
   13dc4:	08c10593          	addi	a1,sp,140
   13dc8:	0a011223          	sh	zero,164(sp)
   13dcc:	8ecff0ef          	jal	ra,12eb8 <eiremain>
   13dd0:	1bc15503          	lhu	a0,444(sp)
   13dd4:	16051c63          	bnez	a0,13f4c <_ldtoa_r+0x378>
   13dd8:	00010a17          	auipc	s4,0x10
   13ddc:	ac8a0a13          	addi	s4,s4,-1336 # 238a0 <ezero>
   13de0:	08e10c93          	addi	s9,sp,142
   13de4:	0c610b13          	addi	s6,sp,198
   13de8:	000a0593          	mv	a1,s4
   13dec:	08c10513          	addi	a0,sp,140
   13df0:	ae1fe0ef          	jal	ra,128d0 <ecmp>
   13df4:	14050c63          	beqz	a0,13f4c <_ldtoa_r+0x378>
   13df8:	00000713          	li	a4,0
   13dfc:	0a410693          	addi	a3,sp,164
   13e00:	0006d783          	lhu	a5,0(a3)
   13e04:	01079613          	slli	a2,a5,0x10
   13e08:	41065613          	srai	a2,a2,0x10
   13e0c:	00065463          	bgez	a2,13e14 <_ldtoa_r+0x240>
   13e10:	00176713          	ori	a4,a4,1
   13e14:	00179793          	slli	a5,a5,0x1
   13e18:	01079793          	slli	a5,a5,0x10
   13e1c:	00277613          	andi	a2,a4,2
   13e20:	0107d793          	srli	a5,a5,0x10
   13e24:	00060463          	beqz	a2,13e2c <_ldtoa_r+0x258>
   13e28:	0017e793          	ori	a5,a5,1
   13e2c:	00171713          	slli	a4,a4,0x1
   13e30:	00f69023          	sh	a5,0(a3)
   13e34:	01071713          	slli	a4,a4,0x10
   13e38:	ffe68693          	addi	a3,a3,-2
   13e3c:	01075713          	srli	a4,a4,0x10
   13e40:	fd9690e3          	bne	a3,s9,13e00 <_ldtoa_r+0x22c>
   13e44:	0c410713          	addi	a4,sp,196
   13e48:	08c10793          	addi	a5,sp,140
   13e4c:	0007a683          	lw	a3,0(a5)
   13e50:	00478793          	addi	a5,a5,4
   13e54:	00470713          	addi	a4,a4,4
   13e58:	fed72e23          	sw	a3,-4(a4)
   13e5c:	ffa798e3          	bne	a5,s10,13e4c <_ldtoa_r+0x278>
   13e60:	0c011e23          	sh	zero,220(sp)
   13e64:	00000713          	li	a4,0
   13e68:	0dc10693          	addi	a3,sp,220
   13e6c:	0006d783          	lhu	a5,0(a3)
   13e70:	01079613          	slli	a2,a5,0x10
   13e74:	41065613          	srai	a2,a2,0x10
   13e78:	00065463          	bgez	a2,13e80 <_ldtoa_r+0x2ac>
   13e7c:	00176713          	ori	a4,a4,1
   13e80:	00179793          	slli	a5,a5,0x1
   13e84:	01079793          	slli	a5,a5,0x10
   13e88:	00277613          	andi	a2,a4,2
   13e8c:	0107d793          	srli	a5,a5,0x10
   13e90:	00060463          	beqz	a2,13e98 <_ldtoa_r+0x2c4>
   13e94:	0017e793          	ori	a5,a5,1
   13e98:	00171713          	slli	a4,a4,0x1
   13e9c:	00f69023          	sh	a5,0(a3)
   13ea0:	01071713          	slli	a4,a4,0x10
   13ea4:	ffe68693          	addi	a3,a3,-2
   13ea8:	01075713          	srli	a4,a4,0x10
   13eac:	fd6690e3          	bne	a3,s6,13e6c <_ldtoa_r+0x298>
   13eb0:	00000713          	li	a4,0
   13eb4:	0dc10693          	addi	a3,sp,220
   13eb8:	0006d783          	lhu	a5,0(a3)
   13ebc:	01079613          	slli	a2,a5,0x10
   13ec0:	41065613          	srai	a2,a2,0x10
   13ec4:	00065463          	bgez	a2,13ecc <_ldtoa_r+0x2f8>
   13ec8:	00176713          	ori	a4,a4,1
   13ecc:	00179793          	slli	a5,a5,0x1
   13ed0:	01079793          	slli	a5,a5,0x10
   13ed4:	00277613          	andi	a2,a4,2
   13ed8:	0107d793          	srli	a5,a5,0x10
   13edc:	00060463          	beqz	a2,13ee4 <_ldtoa_r+0x310>
   13ee0:	0017e793          	ori	a5,a5,1
   13ee4:	00171713          	slli	a4,a4,0x1
   13ee8:	00f69023          	sh	a5,0(a3)
   13eec:	01071713          	slli	a4,a4,0x10
   13ef0:	ffe68693          	addi	a3,a3,-2
   13ef4:	01075713          	srli	a4,a4,0x10
   13ef8:	fd6690e3          	bne	a3,s6,13eb8 <_ldtoa_r+0x2e4>
   13efc:	00000613          	li	a2,0
   13f00:	0a410693          	addi	a3,sp,164
   13f04:	0dc10713          	addi	a4,sp,220
   13f08:	0006d583          	lhu	a1,0(a3)
   13f0c:	00075783          	lhu	a5,0(a4)
   13f10:	ffe68693          	addi	a3,a3,-2
   13f14:	ffe70713          	addi	a4,a4,-2
   13f18:	00b787b3          	add	a5,a5,a1
   13f1c:	00c787b3          	add	a5,a5,a2
   13f20:	0107d613          	srli	a2,a5,0x10
   13f24:	00f69123          	sh	a5,2(a3)
   13f28:	00167613          	andi	a2,a2,1
   13f2c:	fd671ee3          	bne	a4,s6,13f08 <_ldtoa_r+0x334>
   13f30:	0a810513          	addi	a0,sp,168
   13f34:	00090613          	mv	a2,s2
   13f38:	08c10593          	addi	a1,sp,140
   13f3c:	f7dfe0ef          	jal	ra,12eb8 <eiremain>
   13f40:	1bc15503          	lhu	a0,444(sp)
   13f44:	fff40413          	addi	s0,s0,-1
   13f48:	ea0500e3          	beqz	a0,13de8 <_ldtoa_r+0x214>
   13f4c:	02012783          	lw	a5,32(sp)
   13f50:	00300713          	li	a4,3
   13f54:	0017b793          	seqz	a5,a5
   13f58:	40f007b3          	neg	a5,a5
   13f5c:	ff37f793          	andi	a5,a5,-13
   13f60:	02d78793          	addi	a5,a5,45
   13f64:	12f10a23          	sb	a5,308(sp)
   13f68:	00c12783          	lw	a5,12(sp)
   13f6c:	00ea9463          	bne	s5,a4,13f74 <_ldtoa_r+0x3a0>
   13f70:	008787b3          	add	a5,a5,s0
   13f74:	02a00713          	li	a4,42
   13f78:	00078493          	mv	s1,a5
   13f7c:	00f75463          	bge	a4,a5,13f84 <_ldtoa_r+0x3b0>
   13f80:	02a00493          	li	s1,42
   13f84:	00a00713          	li	a4,10
   13f88:	64e50c63          	beq	a0,a4,145e0 <_ldtoa_r+0xa0c>
   13f8c:	03050513          	addi	a0,a0,48
   13f90:	02e00713          	li	a4,46
   13f94:	12a10aa3          	sb	a0,309(sp)
   13f98:	12e10b23          	sb	a4,310(sp)
   13f9c:	2407c463          	bltz	a5,141e4 <_ldtoa_r+0x610>
   13fa0:	13710c13          	addi	s8,sp,311
   13fa4:	00000b93          	li	s7,0
   13fa8:	0c410b13          	addi	s6,sp,196
   13fac:	0dc10d13          	addi	s10,sp,220
   13fb0:	08e10c93          	addi	s9,sp,142
   13fb4:	0c610a13          	addi	s4,sp,198
   13fb8:	00000713          	li	a4,0
   13fbc:	0a410693          	addi	a3,sp,164
   13fc0:	0006d783          	lhu	a5,0(a3)
   13fc4:	01079613          	slli	a2,a5,0x10
   13fc8:	41065613          	srai	a2,a2,0x10
   13fcc:	00065463          	bgez	a2,13fd4 <_ldtoa_r+0x400>
   13fd0:	00176713          	ori	a4,a4,1
   13fd4:	00179793          	slli	a5,a5,0x1
   13fd8:	01079793          	slli	a5,a5,0x10
   13fdc:	00277613          	andi	a2,a4,2
   13fe0:	0107d793          	srli	a5,a5,0x10
   13fe4:	00060463          	beqz	a2,13fec <_ldtoa_r+0x418>
   13fe8:	0017e793          	ori	a5,a5,1
   13fec:	00171713          	slli	a4,a4,0x1
   13ff0:	00f69023          	sh	a5,0(a3)
   13ff4:	01071713          	slli	a4,a4,0x10
   13ff8:	ffe68693          	addi	a3,a3,-2
   13ffc:	01075713          	srli	a4,a4,0x10
   14000:	fd9690e3          	bne	a3,s9,13fc0 <_ldtoa_r+0x3ec>
   14004:	000b0793          	mv	a5,s6
   14008:	08c10713          	addi	a4,sp,140
   1400c:	00072683          	lw	a3,0(a4)
   14010:	00478793          	addi	a5,a5,4
   14014:	00470713          	addi	a4,a4,4
   14018:	fed7ae23          	sw	a3,-4(a5)
   1401c:	fefd18e3          	bne	s10,a5,1400c <_ldtoa_r+0x438>
   14020:	0c011e23          	sh	zero,220(sp)
   14024:	00000713          	li	a4,0
   14028:	000d0693          	mv	a3,s10
   1402c:	0006d783          	lhu	a5,0(a3)
   14030:	01079613          	slli	a2,a5,0x10
   14034:	41065613          	srai	a2,a2,0x10
   14038:	00065463          	bgez	a2,14040 <_ldtoa_r+0x46c>
   1403c:	00176713          	ori	a4,a4,1
   14040:	00179793          	slli	a5,a5,0x1
   14044:	01079793          	slli	a5,a5,0x10
   14048:	00277613          	andi	a2,a4,2
   1404c:	0107d793          	srli	a5,a5,0x10
   14050:	00060463          	beqz	a2,14058 <_ldtoa_r+0x484>
   14054:	0017e793          	ori	a5,a5,1
   14058:	00171713          	slli	a4,a4,0x1
   1405c:	00f69023          	sh	a5,0(a3)
   14060:	01071713          	slli	a4,a4,0x10
   14064:	ffe68693          	addi	a3,a3,-2
   14068:	01075713          	srli	a4,a4,0x10
   1406c:	fd4690e3          	bne	a3,s4,1402c <_ldtoa_r+0x458>
   14070:	00000713          	li	a4,0
   14074:	000d0693          	mv	a3,s10
   14078:	0006d783          	lhu	a5,0(a3)
   1407c:	01079613          	slli	a2,a5,0x10
   14080:	41065613          	srai	a2,a2,0x10
   14084:	00065463          	bgez	a2,1408c <_ldtoa_r+0x4b8>
   14088:	00176713          	ori	a4,a4,1
   1408c:	00179793          	slli	a5,a5,0x1
   14090:	01079793          	slli	a5,a5,0x10
   14094:	00277613          	andi	a2,a4,2
   14098:	0107d793          	srli	a5,a5,0x10
   1409c:	00060463          	beqz	a2,140a4 <_ldtoa_r+0x4d0>
   140a0:	0017e793          	ori	a5,a5,1
   140a4:	00171713          	slli	a4,a4,0x1
   140a8:	00f69023          	sh	a5,0(a3)
   140ac:	01071713          	slli	a4,a4,0x10
   140b0:	ffe68693          	addi	a3,a3,-2
   140b4:	01075713          	srli	a4,a4,0x10
   140b8:	fd4690e3          	bne	a3,s4,14078 <_ldtoa_r+0x4a4>
   140bc:	00000613          	li	a2,0
   140c0:	0a410693          	addi	a3,sp,164
   140c4:	000d0713          	mv	a4,s10
   140c8:	0006d583          	lhu	a1,0(a3)
   140cc:	00075783          	lhu	a5,0(a4)
   140d0:	ffe68693          	addi	a3,a3,-2
   140d4:	ffe70713          	addi	a4,a4,-2
   140d8:	00b787b3          	add	a5,a5,a1
   140dc:	00c787b3          	add	a5,a5,a2
   140e0:	0107d613          	srli	a2,a5,0x10
   140e4:	00f69123          	sh	a5,2(a3)
   140e8:	00167613          	andi	a2,a2,1
   140ec:	fd471ee3          	bne	a4,s4,140c8 <_ldtoa_r+0x4f4>
   140f0:	08c10593          	addi	a1,sp,140
   140f4:	00090613          	mv	a2,s2
   140f8:	0a810513          	addi	a0,sp,168
   140fc:	dbdfe0ef          	jal	ra,12eb8 <eiremain>
   14100:	1bc15583          	lhu	a1,444(sp)
   14104:	001c0793          	addi	a5,s8,1
   14108:	001b8b93          	addi	s7,s7,1
   1410c:	03058713          	addi	a4,a1,48
   14110:	fee78fa3          	sb	a4,-1(a5)
   14114:	0d74ce63          	blt	s1,s7,141f0 <_ldtoa_r+0x61c>
   14118:	00078c13          	mv	s8,a5
   1411c:	e9dff06f          	j	13fb8 <_ldtoa_r+0x3e4>
   14120:	07010713          	addi	a4,sp,112
   14124:	08210793          	addi	a5,sp,130
   14128:	00075683          	lhu	a3,0(a4)
   1412c:	00270713          	addi	a4,a4,2
   14130:	7e069863          	bnez	a3,14920 <_ldtoa_r+0xd4c>
   14134:	fef71ae3          	bne	a4,a5,14128 <_ldtoa_r+0x554>
   14138:	00f65613          	srli	a2,a2,0xf
   1413c:	00c42023          	sw	a2,0(s0)
   14140:	00300793          	li	a5,3
   14144:	7afa8e63          	beq	s5,a5,14900 <_ldtoa_r+0xd2c>
   14148:	01400793          	li	a5,20
   1414c:	00f12623          	sw	a5,12(sp)
   14150:	000a8e63          	beqz	s5,1416c <_ldtoa_r+0x598>
   14154:	01012783          	lw	a5,16(sp)
   14158:	fff78793          	addi	a5,a5,-1
   1415c:	00078713          	mv	a4,a5
   14160:	00f12623          	sw	a5,12(sp)
   14164:	02a00793          	li	a5,42
   14168:	7ae7c463          	blt	a5,a4,14910 <_ldtoa_r+0xd3c>
   1416c:	07015703          	lhu	a4,112(sp)
   14170:	07010793          	addi	a5,sp,112
   14174:	08210693          	addi	a3,sp,130
   14178:	00278793          	addi	a5,a5,2
   1417c:	00071a63          	bnez	a4,14190 <_ldtoa_r+0x5bc>
   14180:	b2d78ce3          	beq	a5,a3,13cb8 <_ldtoa_r+0xe4>
   14184:	0007d703          	lhu	a4,0(a5)
   14188:	00278793          	addi	a5,a5,2
   1418c:	fe070ae3          	beqz	a4,14180 <_ldtoa_r+0x5ac>
   14190:	13410d93          	addi	s11,sp,308
   14194:	0000f597          	auipc	a1,0xf
   14198:	70458593          	addi	a1,a1,1796 # 23898 <zeroes.0+0xb0>
   1419c:	000d8513          	mv	a0,s11
   141a0:	0cd030ef          	jal	ra,17a6c <sprintf>
   141a4:	00002437          	lui	s0,0x2
   141a8:	70f40413          	addi	s0,s0,1807 # 270f <xTaskIncrementTick+0xbb>
   141ac:	09000793          	li	a5,144
   141b0:	16f12a23          	sw	a5,372(sp)
   141b4:	18812023          	sw	s0,384(sp)
   141b8:	07010793          	addi	a5,sp,112
   141bc:	08210693          	addi	a3,sp,130
   141c0:	0007d703          	lhu	a4,0(a5)
   141c4:	00278793          	addi	a5,a5,2
   141c8:	14071ae3          	bnez	a4,14b1c <_ldtoa_r+0xf48>
   141cc:	fed79ae3          	bne	a5,a3,141c0 <_ldtoa_r+0x5ec>
   141d0:	01412703          	lw	a4,20(sp)
   141d4:	000027b7          	lui	a5,0x2
   141d8:	70f78793          	addi	a5,a5,1807 # 270f <xTaskIncrementTick+0xbb>
   141dc:	00f72023          	sw	a5,0(a4)
   141e0:	0e00006f          	j	142c0 <_ldtoa_r+0x6ec>
   141e4:	1bc15583          	lhu	a1,444(sp)
   141e8:	13610c13          	addi	s8,sp,310
   141ec:	13710793          	addi	a5,sp,311
   141f0:	00400713          	li	a4,4
   141f4:	04b75863          	bge	a4,a1,14244 <_ldtoa_r+0x670>
   141f8:	00500713          	li	a4,5
   141fc:	16e584e3          	beq	a1,a4,14b64 <_ldtoa_r+0xf90>
   14200:	ffe7c703          	lbu	a4,-2(a5)
   14204:	ffe78593          	addi	a1,a5,-2
   14208:	07f77713          	andi	a4,a4,127
   1420c:	0204c663          	bltz	s1,14238 <_ldtoa_r+0x664>
   14210:	02e00793          	li	a5,46
   14214:	03800613          	li	a2,56
   14218:	03000513          	li	a0,48
   1421c:	0ef702e3          	beq	a4,a5,14b00 <_ldtoa_r+0xf2c>
   14220:	0ce67ae3          	bgeu	a2,a4,14af4 <_ldtoa_r+0xf20>
   14224:	fff5c703          	lbu	a4,-1(a1)
   14228:	00a58023          	sb	a0,0(a1)
   1422c:	fff58593          	addi	a1,a1,-1
   14230:	07f77713          	andi	a4,a4,127
   14234:	fe9ff06f          	j	1421c <_ldtoa_r+0x648>
   14238:	03100713          	li	a4,49
   1423c:	fee78f23          	sb	a4,-2(a5)
   14240:	00140413          	addi	s0,s0,1
   14244:	00040613          	mv	a2,s0
   14248:	0000f597          	auipc	a1,0xf
   1424c:	60458593          	addi	a1,a1,1540 # 2384c <zeroes.0+0x64>
   14250:	000c0513          	mv	a0,s8
   14254:	019030ef          	jal	ra,17a6c <sprintf>
   14258:	09000793          	li	a5,144
   1425c:	01c12703          	lw	a4,28(sp)
   14260:	16f12a23          	sw	a5,372(sp)
   14264:	000087b7          	lui	a5,0x8
   14268:	18812023          	sw	s0,384(sp)
   1426c:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   14270:	f4f704e3          	beq	a4,a5,141b8 <_ldtoa_r+0x5e4>
   14274:	01412683          	lw	a3,20(sp)
   14278:	13414703          	lbu	a4,308(sp)
   1427c:	00140793          	addi	a5,s0,1
   14280:	00f6a023          	sw	a5,0(a3)
   14284:	68070a63          	beqz	a4,14918 <_ldtoa_r+0xd44>
   14288:	000d8793          	mv	a5,s11
   1428c:	02e00693          	li	a3,46
   14290:	32d70263          	beq	a4,a3,145b4 <_ldtoa_r+0x9e0>
   14294:	0017c703          	lbu	a4,1(a5)
   14298:	00178793          	addi	a5,a5,1
   1429c:	fe071ae3          	bnez	a4,14290 <_ldtoa_r+0x6bc>
   142a0:	04500693          	li	a3,69
   142a4:	00fde663          	bltu	s11,a5,142b0 <_ldtoa_r+0x6dc>
   142a8:	0140006f          	j	142bc <_ldtoa_r+0x6e8>
   142ac:	67b78663          	beq	a5,s11,14918 <_ldtoa_r+0xd44>
   142b0:	fff7c703          	lbu	a4,-1(a5)
   142b4:	fff78793          	addi	a5,a5,-1
   142b8:	fed71ae3          	bne	a4,a3,142ac <_ldtoa_r+0x6d8>
   142bc:	00078023          	sb	zero,0(a5)
   142c0:	000d8793          	mv	a5,s11
   142c4:	02000693          	li	a3,32
   142c8:	02d00613          	li	a2,45
   142cc:	0007c703          	lbu	a4,0(a5)
   142d0:	00d70463          	beq	a4,a3,142d8 <_ldtoa_r+0x704>
   142d4:	00c71663          	bne	a4,a2,142e0 <_ldtoa_r+0x70c>
   142d8:	00178793          	addi	a5,a5,1
   142dc:	ff1ff06f          	j	142cc <_ldtoa_r+0x6f8>
   142e0:	000d8693          	mv	a3,s11
   142e4:	0007c703          	lbu	a4,0(a5)
   142e8:	00068913          	mv	s2,a3
   142ec:	00178793          	addi	a5,a5,1
   142f0:	00e68023          	sb	a4,0(a3)
   142f4:	00168693          	addi	a3,a3,1
   142f8:	fe0716e3          	bnez	a4,142e4 <_ldtoa_r+0x710>
   142fc:	00200793          	li	a5,2
   14300:	fff94683          	lbu	a3,-1(s2)
   14304:	28fa8c63          	beq	s5,a5,1459c <_ldtoa_r+0x9c8>
   14308:	00c12783          	lw	a5,12(sp)
   1430c:	00040713          	mv	a4,s0
   14310:	00f45463          	bge	s0,a5,14318 <_ldtoa_r+0x744>
   14314:	00078713          	mv	a4,a5
   14318:	03000793          	li	a5,48
   1431c:	02f69663          	bne	a3,a5,14348 <_ldtoa_r+0x774>
   14320:	41b907b3          	sub	a5,s2,s11
   14324:	02f75263          	bge	a4,a5,14348 <_ldtoa_r+0x774>
   14328:	03000693          	li	a3,48
   1432c:	00c0006f          	j	14338 <_ldtoa_r+0x764>
   14330:	41b907b3          	sub	a5,s2,s11
   14334:	00f75a63          	bge	a4,a5,14348 <_ldtoa_r+0x774>
   14338:	ffe94783          	lbu	a5,-2(s2)
   1433c:	fe090fa3          	sb	zero,-1(s2)
   14340:	fff90913          	addi	s2,s2,-1
   14344:	fed786e3          	beq	a5,a3,14330 <_ldtoa_r+0x75c>
   14348:	00300793          	li	a5,3
   1434c:	20fa8663          	beq	s5,a5,14558 <_ldtoa_r+0x984>
   14350:	01012783          	lw	a5,16(sp)
   14354:	01700693          	li	a3,23
   14358:	00100713          	li	a4,1
   1435c:	00978493          	addi	s1,a5,9
   14360:	00400793          	li	a5,4
   14364:	2296f663          	bgeu	a3,s1,14590 <_ldtoa_r+0x9bc>
   14368:	00179793          	slli	a5,a5,0x1
   1436c:	01478693          	addi	a3,a5,20
   14370:	00070593          	mv	a1,a4
   14374:	00170713          	addi	a4,a4,1
   14378:	fed4f8e3          	bgeu	s1,a3,14368 <_ldtoa_r+0x794>
   1437c:	04b9a223          	sw	a1,68(s3)
   14380:	00098513          	mv	a0,s3
   14384:	01d010ef          	jal	ra,15ba0 <_Balloc>
   14388:	00050413          	mv	s0,a0
   1438c:	1e050ee3          	beqz	a0,14d88 <_ldtoa_r+0x11b4>
   14390:	04a9a023          	sw	a0,64(s3)
   14394:	000d8593          	mv	a1,s11
   14398:	0bd030ef          	jal	ra,17c54 <strcpy>
   1439c:	01812703          	lw	a4,24(sp)
   143a0:	00070863          	beqz	a4,143b0 <_ldtoa_r+0x7dc>
   143a4:	41b907b3          	sub	a5,s2,s11
   143a8:	00f407b3          	add	a5,s0,a5
   143ac:	00f72023          	sw	a5,0(a4)
   143b0:	1fc12083          	lw	ra,508(sp)
   143b4:	00040513          	mv	a0,s0
   143b8:	1f812403          	lw	s0,504(sp)
   143bc:	1f412483          	lw	s1,500(sp)
   143c0:	1f012903          	lw	s2,496(sp)
   143c4:	1ec12983          	lw	s3,492(sp)
   143c8:	1e812a03          	lw	s4,488(sp)
   143cc:	1e412a83          	lw	s5,484(sp)
   143d0:	1e012b03          	lw	s6,480(sp)
   143d4:	1dc12b83          	lw	s7,476(sp)
   143d8:	1d812c03          	lw	s8,472(sp)
   143dc:	1d412c83          	lw	s9,468(sp)
   143e0:	1d012d03          	lw	s10,464(sp)
   143e4:	1cc12d83          	lw	s11,460(sp)
   143e8:	20010113          	addi	sp,sp,512
   143ec:	00008067          	ret
   143f0:	000086b7          	lui	a3,0x8
   143f4:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   143f8:	6cdc8663          	beq	s9,a3,14ac4 <_ldtoa_r+0xef0>
   143fc:	09c11683          	lh	a3,156(sp)
   14400:	7406d663          	bgez	a3,14b4c <_ldtoa_r+0xf78>
   14404:	08c10593          	addi	a1,sp,140
   14408:	0000f517          	auipc	a0,0xf
   1440c:	6b450513          	addi	a0,a0,1716 # 23abc <eone>
   14410:	02e12223          	sw	a4,36(sp)
   14414:	cbcfe0ef          	jal	ra,128d0 <ecmp>
   14418:	92050ee3          	beqz	a0,13d54 <_ldtoa_r+0x180>
   1441c:	02412703          	lw	a4,36(sp)
   14420:	22054263          	bltz	a0,14644 <_ldtoa_r+0xa70>
   14424:	7a0c9c63          	bnez	s9,14bdc <_ldtoa_r+0x1008>
   14428:	09c11683          	lh	a3,156(sp)
   1442c:	00000413          	li	s0,0
   14430:	17010913          	addi	s2,sp,368
   14434:	1006c0e3          	bltz	a3,14d34 <_ldtoa_r+0x1160>
   14438:	0000fb17          	auipc	s6,0xf
   1443c:	56cb0b13          	addi	s6,s6,1388 # 239a4 <etens+0xf0>
   14440:	00070493          	mv	s1,a4
   14444:	08c10613          	addi	a2,sp,140
   14448:	00090693          	mv	a3,s2
   1444c:	00060593          	mv	a1,a2
   14450:	000b0513          	mv	a0,s6
   14454:	ab0ff0ef          	jal	ra,13704 <emul>
   14458:	09c11783          	lh	a5,156(sp)
   1445c:	fff40413          	addi	s0,s0,-1
   14460:	fe07d2e3          	bgez	a5,14444 <_ldtoa_r+0x870>
   14464:	00048713          	mv	a4,s1
   14468:	0e010b93          	addi	s7,sp,224
   1446c:	0f810d13          	addi	s10,sp,248
   14470:	08c10793          	addi	a5,sp,140
   14474:	000b8613          	mv	a2,s7
   14478:	0a010513          	addi	a0,sp,160
   1447c:	00078693          	mv	a3,a5
   14480:	0006a783          	lw	a5,0(a3)
   14484:	00468693          	addi	a3,a3,4
   14488:	00460613          	addi	a2,a2,4
   1448c:	fef62e23          	sw	a5,-4(a2)
   14490:	fea698e3          	bne	a3,a0,14480 <_ldtoa_r+0x8ac>
   14494:	0a810693          	addi	a3,sp,168
   14498:	00072783          	lw	a5,0(a4)
   1449c:	00470713          	addi	a4,a4,4
   144a0:	00468693          	addi	a3,a3,4
   144a4:	fef6ae23          	sw	a5,-4(a3)
   144a8:	ff4718e3          	bne	a4,s4,14498 <_ldtoa_r+0x8c4>
   144ac:	fffffa37          	lui	s4,0xfffff
   144b0:	0000fc97          	auipc	s9,0xf
   144b4:	404c8c93          	addi	s9,s9,1028 # 238b4 <etens>
   144b8:	0000fb17          	auipc	s6,0xf
   144bc:	500b0b13          	addi	s6,s6,1280 # 239b8 <emtens>
   144c0:	0000f497          	auipc	s1,0xf
   144c4:	5fc48493          	addi	s1,s1,1532 # 23abc <eone>
   144c8:	0000fd97          	auipc	s11,0xf
   144cc:	5e0d8d93          	addi	s11,s11,1504 # 23aa8 <emtens+0xf0>
   144d0:	00c0006f          	j	144dc <_ldtoa_r+0x908>
   144d4:	014b0b13          	addi	s6,s6,20
   144d8:	014c8c93          	addi	s9,s9,20
   144dc:	000b8593          	mv	a1,s7
   144e0:	00048513          	mv	a0,s1
   144e4:	becfe0ef          	jal	ra,128d0 <ecmp>
   144e8:	04a05863          	blez	a0,14538 <_ldtoa_r+0x964>
   144ec:	000b8593          	mv	a1,s7
   144f0:	000b0513          	mv	a0,s6
   144f4:	bdcfe0ef          	jal	ra,128d0 <ecmp>
   144f8:	02054863          	bltz	a0,14528 <_ldtoa_r+0x954>
   144fc:	00090693          	mv	a3,s2
   14500:	000b8613          	mv	a2,s7
   14504:	000b8593          	mv	a1,s7
   14508:	000c8513          	mv	a0,s9
   1450c:	9f8ff0ef          	jal	ra,13704 <emul>
   14510:	0a810613          	addi	a2,sp,168
   14514:	00090693          	mv	a3,s2
   14518:	00060593          	mv	a1,a2
   1451c:	000c8513          	mv	a0,s9
   14520:	9e4ff0ef          	jal	ra,13704 <emul>
   14524:	01440433          	add	s0,s0,s4
   14528:	01fa5793          	srli	a5,s4,0x1f
   1452c:	014787b3          	add	a5,a5,s4
   14530:	4017da13          	srai	s4,a5,0x1
   14534:	fbbb10e3          	bne	s6,s11,144d4 <_ldtoa_r+0x900>
   14538:	0a810613          	addi	a2,sp,168
   1453c:	00090693          	mv	a3,s2
   14540:	0000f597          	auipc	a1,0xf
   14544:	57c58593          	addi	a1,a1,1404 # 23abc <eone>
   14548:	00060513          	mv	a0,a2
   1454c:	c25fe0ef          	jal	ra,13170 <ediv>
   14550:	13410d93          	addi	s11,sp,308
   14554:	815ff06f          	j	13d68 <_ldtoa_r+0x194>
   14558:	00c12783          	lw	a5,12(sp)
   1455c:	00f40433          	add	s0,s0,a5
   14560:	52044c63          	bltz	s0,14a98 <_ldtoa_r+0xec4>
   14564:	01412783          	lw	a5,20(sp)
   14568:	01012703          	lw	a4,16(sp)
   1456c:	0007a783          	lw	a5,0(a5)
   14570:	00f707b3          	add	a5,a4,a5
   14574:	00f12823          	sw	a5,16(sp)
   14578:	01012783          	lw	a5,16(sp)
   1457c:	01700693          	li	a3,23
   14580:	00100713          	li	a4,1
   14584:	00378493          	addi	s1,a5,3
   14588:	00400793          	li	a5,4
   1458c:	dc96eee3          	bltu	a3,s1,14368 <_ldtoa_r+0x794>
   14590:	0409a223          	sw	zero,68(s3)
   14594:	00000593          	li	a1,0
   14598:	de9ff06f          	j	14380 <_ldtoa_r+0x7ac>
   1459c:	03000793          	li	a5,48
   145a0:	daf698e3          	bne	a3,a5,14350 <_ldtoa_r+0x77c>
   145a4:	41b907b3          	sub	a5,s2,s11
   145a8:	00100713          	li	a4,1
   145ac:	d6f74ee3          	blt	a4,a5,14328 <_ldtoa_r+0x754>
   145b0:	da1ff06f          	j	14350 <_ldtoa_r+0x77c>
   145b4:	0007c703          	lbu	a4,0(a5)
   145b8:	ce0704e3          	beqz	a4,142a0 <_ldtoa_r+0x6cc>
   145bc:	0017c703          	lbu	a4,1(a5)
   145c0:	00178793          	addi	a5,a5,1
   145c4:	fee78fa3          	sb	a4,-1(a5)
   145c8:	cc070ce3          	beqz	a4,142a0 <_ldtoa_r+0x6cc>
   145cc:	0017c703          	lbu	a4,1(a5)
   145d0:	00178793          	addi	a5,a5,1
   145d4:	fee78fa3          	sb	a4,-1(a5)
   145d8:	fe0712e3          	bnez	a4,145bc <_ldtoa_r+0x9e8>
   145dc:	cc5ff06f          	j	142a0 <_ldtoa_r+0x6cc>
   145e0:	03100713          	li	a4,49
   145e4:	12e10aa3          	sb	a4,309(sp)
   145e8:	02e00713          	li	a4,46
   145ec:	12e10b23          	sb	a4,310(sp)
   145f0:	00140413          	addi	s0,s0,1
   145f4:	2ef05e63          	blez	a5,148f0 <_ldtoa_r+0xd1c>
   145f8:	03000793          	li	a5,48
   145fc:	12f10ba3          	sb	a5,311(sp)
   14600:	fff48493          	addi	s1,s1,-1
   14604:	13810c13          	addi	s8,sp,312
   14608:	99dff06f          	j	13fa4 <_ldtoa_r+0x3d0>
   1460c:	01012703          	lw	a4,16(sp)
   14610:	02a00793          	li	a5,42
   14614:	00e12623          	sw	a4,12(sp)
   14618:	eae7d063          	bge	a5,a4,13cb8 <_ldtoa_r+0xe4>
   1461c:	00f12623          	sw	a5,12(sp)
   14620:	e98ff06f          	j	13cb8 <_ldtoa_r+0xe4>
   14624:	01012783          	lw	a5,16(sp)
   14628:	fff78793          	addi	a5,a5,-1
   1462c:	00078713          	mv	a4,a5
   14630:	00f12623          	sw	a5,12(sp)
   14634:	02a00793          	li	a5,42
   14638:	e8e7d063          	bge	a5,a4,13cb8 <_ldtoa_r+0xe4>
   1463c:	00f12623          	sw	a5,12(sp)
   14640:	e78ff06f          	j	13cb8 <_ldtoa_r+0xe4>
   14644:	0c410b13          	addi	s6,sp,196
   14648:	000b0313          	mv	t1,s6
   1464c:	0a010513          	addi	a0,sp,160
   14650:	000b0613          	mv	a2,s6
   14654:	08c10693          	addi	a3,sp,140
   14658:	0006a783          	lw	a5,0(a3)
   1465c:	00468693          	addi	a3,a3,4
   14660:	00460613          	addi	a2,a2,4
   14664:	fef62e23          	sw	a5,-4(a2)
   14668:	fea698e3          	bne	a3,a0,14658 <_ldtoa_r+0xa84>
   1466c:	000046b7          	lui	a3,0x4
   14670:	08e68693          	addi	a3,a3,142 # 408e <xTaskPriorityDisinherit+0x1fe>
   14674:	0a810793          	addi	a5,sp,168
   14678:	0cd11b23          	sh	a3,214(sp)
   1467c:	000086b7          	lui	a3,0x8
   14680:	01278893          	addi	a7,a5,18
   14684:	fff68793          	addi	a5,a3,-1 # 7fff <__malloc_lock+0x67>
   14688:	ffffc6b7          	lui	a3,0xffffc
   1468c:	0bc10d13          	addi	s10,sp,188
   14690:	0e010b93          	addi	s7,sp,224
   14694:	0000f397          	auipc	t2,0xf
   14698:	2c038393          	addi	t2,t2,704 # 23954 <etens+0xa0>
   1469c:	02f12223          	sw	a5,36(sp)
   146a0:	00268793          	addi	a5,a3,2 # ffffc002 <__alt_data_end+0xfffbc002>
   146a4:	03812a23          	sw	s8,52(sp)
   146a8:	03312c23          	sw	s3,56(sp)
   146ac:	000d0c13          	mv	s8,s10
   146b0:	01000493          	li	s1,16
   146b4:	000a8d13          	mv	s10,s5
   146b8:	00000413          	li	s0,0
   146bc:	000b8a93          	mv	s5,s7
   146c0:	13410d93          	addi	s11,sp,308
   146c4:	17010913          	addi	s2,sp,368
   146c8:	02f12423          	sw	a5,40(sp)
   146cc:	02612623          	sw	t1,44(sp)
   146d0:	02e12823          	sw	a4,48(sp)
   146d4:	00038993          	mv	s3,t2
   146d8:	00088b93          	mv	s7,a7
   146dc:	0a810613          	addi	a2,sp,168
   146e0:	00090693          	mv	a3,s2
   146e4:	000b0593          	mv	a1,s6
   146e8:	00098513          	mv	a0,s3
   146ec:	a85fe0ef          	jal	ra,13170 <ediv>
   146f0:	05c10613          	addi	a2,sp,92
   146f4:	00060713          	mv	a4,a2
   146f8:	0a810793          	addi	a5,sp,168
   146fc:	07010813          	addi	a6,sp,112
   14700:	0007a683          	lw	a3,0(a5)
   14704:	00478793          	addi	a5,a5,4
   14708:	00470713          	addi	a4,a4,4
   1470c:	fed72e23          	sw	a3,-4(a4)
   14710:	fefc18e3          	bne	s8,a5,14700 <_ldtoa_r+0xb2c>
   14714:	02412783          	lw	a5,36(sp)
   14718:	06e15503          	lhu	a0,110(sp)
   1471c:	00f57eb3          	and	t4,a0,a5
   14720:	02812783          	lw	a5,40(sp)
   14724:	00fe8eb3          	add	t4,t4,a5
   14728:	39d05263          	blez	t4,14aac <_ldtoa_r+0xed8>
   1472c:	09000793          	li	a5,144
   14730:	41d785b3          	sub	a1,a5,t4
   14734:	000a8713          	mv	a4,s5
   14738:	05c10793          	addi	a5,sp,92
   1473c:	0007a683          	lw	a3,0(a5)
   14740:	00478793          	addi	a5,a5,4
   14744:	00470713          	addi	a4,a4,4
   14748:	fed72e23          	sw	a3,-4(a4)
   1474c:	ff0798e3          	bne	a5,a6,1473c <_ldtoa_r+0xb68>
   14750:	06b05a63          	blez	a1,147c4 <_ldtoa_r+0xbf0>
   14754:	00f00793          	li	a5,15
   14758:	000a8713          	mv	a4,s5
   1475c:	02b7de63          	bge	a5,a1,14798 <_ldtoa_r+0xbc4>
   14760:	08000693          	li	a3,128
   14764:	41d686b3          	sub	a3,a3,t4
   14768:	0046d693          	srli	a3,a3,0x4
   1476c:	00168713          	addi	a4,a3,1
   14770:	00171713          	slli	a4,a4,0x1
   14774:	00ea8733          	add	a4,s5,a4
   14778:	000a8793          	mv	a5,s5
   1477c:	00278793          	addi	a5,a5,2
   14780:	fe079f23          	sh	zero,-2(a5)
   14784:	fef71ce3          	bne	a4,a5,1477c <_ldtoa_r+0xba8>
   14788:	08000593          	li	a1,128
   1478c:	41d585b3          	sub	a1,a1,t4
   14790:	00469693          	slli	a3,a3,0x4
   14794:	40d585b3          	sub	a1,a1,a3
   14798:	0000f697          	auipc	a3,0xf
   1479c:	10868693          	addi	a3,a3,264 # 238a0 <ezero>
   147a0:	00159793          	slli	a5,a1,0x1
   147a4:	00f687b3          	add	a5,a3,a5
   147a8:	2307d783          	lhu	a5,560(a5)
   147ac:	00075683          	lhu	a3,0(a4)
   147b0:	00f6f7b3          	and	a5,a3,a5
   147b4:	00f71023          	sh	a5,0(a4)
   147b8:	01051513          	slli	a0,a0,0x10
   147bc:	41055513          	srai	a0,a0,0x10
   147c0:	16054463          	bltz	a0,14928 <_ldtoa_r+0xd54>
   147c4:	000a8713          	mv	a4,s5
   147c8:	0a810793          	addi	a5,sp,168
   147cc:	0007d603          	lhu	a2,0(a5)
   147d0:	00075683          	lhu	a3,0(a4)
   147d4:	02d61863          	bne	a2,a3,14804 <_ldtoa_r+0xc30>
   147d8:	00278793          	addi	a5,a5,2
   147dc:	00270713          	addi	a4,a4,2
   147e0:	ff7796e3          	bne	a5,s7,147cc <_ldtoa_r+0xbf8>
   147e4:	000b0713          	mv	a4,s6
   147e8:	0a810793          	addi	a5,sp,168
   147ec:	0007a683          	lw	a3,0(a5)
   147f0:	00478793          	addi	a5,a5,4
   147f4:	00470713          	addi	a4,a4,4
   147f8:	fed72e23          	sw	a3,-4(a4)
   147fc:	fefc18e3          	bne	s8,a5,147ec <_ldtoa_r+0xc18>
   14800:	00940433          	add	s0,s0,s1
   14804:	01498993          	addi	s3,s3,20
   14808:	0000f797          	auipc	a5,0xf
   1480c:	1b078793          	addi	a5,a5,432 # 239b8 <emtens>
   14810:	0014d493          	srli	s1,s1,0x1
   14814:	ecf994e3          	bne	s3,a5,146dc <_ldtoa_r+0xb08>
   14818:	0d615683          	lhu	a3,214(sp)
   1481c:	ffffc637          	lui	a2,0xffffc
   14820:	f7260613          	addi	a2,a2,-142 # ffffbf72 <__alt_data_end+0xfffbbf72>
   14824:	00c686b3          	add	a3,a3,a2
   14828:	02c12303          	lw	t1,44(sp)
   1482c:	03012703          	lw	a4,48(sp)
   14830:	03412c03          	lw	s8,52(sp)
   14834:	03812983          	lw	s3,56(sp)
   14838:	00dc86b3          	add	a3,s9,a3
   1483c:	000a8b93          	mv	s7,s5
   14840:	0cd11b23          	sh	a3,214(sp)
   14844:	000d0a93          	mv	s5,s10
   14848:	014b0593          	addi	a1,s6,20
   1484c:	08c10693          	addi	a3,sp,140
   14850:	00032783          	lw	a5,0(t1)
   14854:	00430313          	addi	t1,t1,4
   14858:	00468693          	addi	a3,a3,4
   1485c:	fef6ae23          	sw	a5,-4(a3)
   14860:	fe6598e3          	bne	a1,t1,14850 <_ldtoa_r+0xc7c>
   14864:	0a810693          	addi	a3,sp,168
   14868:	00072783          	lw	a5,0(a4)
   1486c:	00470713          	addi	a4,a4,4
   14870:	00468693          	addi	a3,a3,4
   14874:	fef6ae23          	sw	a5,-4(a3)
   14878:	ff4718e3          	bne	a4,s4,14868 <_ldtoa_r+0xc94>
   1487c:	00001cb7          	lui	s9,0x1
   14880:	0000fa17          	auipc	s4,0xf
   14884:	034a0a13          	addi	s4,s4,52 # 238b4 <etens>
   14888:	0000fd17          	auipc	s10,0xf
   1488c:	11cd0d13          	addi	s10,s10,284 # 239a4 <etens+0xf0>
   14890:	0100006f          	j	148a0 <_ldtoa_r+0xccc>
   14894:	001cdc93          	srli	s9,s9,0x1
   14898:	25aa0a63          	beq	s4,s10,14aec <_ldtoa_r+0xf18>
   1489c:	014a0a13          	addi	s4,s4,20
   148a0:	000b0593          	mv	a1,s6
   148a4:	000d0513          	mv	a0,s10
   148a8:	828fe0ef          	jal	ra,128d0 <ecmp>
   148ac:	24a04063          	bgtz	a0,14aec <_ldtoa_r+0xf18>
   148b0:	000b0593          	mv	a1,s6
   148b4:	000a0513          	mv	a0,s4
   148b8:	818fe0ef          	jal	ra,128d0 <ecmp>
   148bc:	fca04ce3          	bgtz	a0,14894 <_ldtoa_r+0xcc0>
   148c0:	00090693          	mv	a3,s2
   148c4:	000b0613          	mv	a2,s6
   148c8:	000b0593          	mv	a1,s6
   148cc:	000a0513          	mv	a0,s4
   148d0:	8a1fe0ef          	jal	ra,13170 <ediv>
   148d4:	0a810613          	addi	a2,sp,168
   148d8:	00090693          	mv	a3,s2
   148dc:	00060593          	mv	a1,a2
   148e0:	000a0513          	mv	a0,s4
   148e4:	e21fe0ef          	jal	ra,13704 <emul>
   148e8:	01940433          	add	s0,s0,s9
   148ec:	fa9ff06f          	j	14894 <_ldtoa_r+0xcc0>
   148f0:	13710c13          	addi	s8,sp,311
   148f4:	00000493          	li	s1,0
   148f8:	940796e3          	bnez	a5,14244 <_ldtoa_r+0x670>
   148fc:	ea8ff06f          	j	13fa4 <_ldtoa_r+0x3d0>
   14900:	01012703          	lw	a4,16(sp)
   14904:	02a00793          	li	a5,42
   14908:	00e12623          	sw	a4,12(sp)
   1490c:	86e7d0e3          	bge	a5,a4,1416c <_ldtoa_r+0x598>
   14910:	00f12623          	sw	a5,12(sp)
   14914:	859ff06f          	j	1416c <_ldtoa_r+0x598>
   14918:	000d8793          	mv	a5,s11
   1491c:	9a1ff06f          	j	142bc <_ldtoa_r+0x6e8>
   14920:	00000613          	li	a2,0
   14924:	819ff06f          	j	1413c <_ldtoa_r+0x568>
   14928:	000a8793          	mv	a5,s5
   1492c:	0140006f          	j	14940 <_ldtoa_r+0xd6c>
   14930:	00260613          	addi	a2,a2,2
   14934:	06e10713          	addi	a4,sp,110
   14938:	00278793          	addi	a5,a5,2
   1493c:	e8c704e3          	beq	a4,a2,147c4 <_ldtoa_r+0xbf0>
   14940:	00065683          	lhu	a3,0(a2)
   14944:	0007d703          	lhu	a4,0(a5)
   14948:	fee684e3          	beq	a3,a4,14930 <_ldtoa_r+0xd5c>
   1494c:	0f215783          	lhu	a5,242(sp)
   14950:	fff7c793          	not	a5,a5
   14954:	01179713          	slli	a4,a5,0x11
   14958:	3a070663          	beqz	a4,14d04 <_ldtoa_r+0x1130>
   1495c:	0fc10593          	addi	a1,sp,252
   14960:	0000f517          	auipc	a0,0xf
   14964:	15c50513          	addi	a0,a0,348 # 23abc <eone>
   14968:	eb5fd0ef          	jal	ra,1281c <emovi>
   1496c:	11810593          	addi	a1,sp,280
   14970:	000a8513          	mv	a0,s5
   14974:	ea9fd0ef          	jal	ra,1281c <emovi>
   14978:	0fc15783          	lhu	a5,252(sp)
   1497c:	11a15603          	lhu	a2,282(sp)
   14980:	0fe15e83          	lhu	t4,254(sp)
   14984:	fff7c793          	not	a5,a5
   14988:	0ef11e23          	sh	a5,252(sp)
   1498c:	40ce85b3          	sub	a1,t4,a2
   14990:	00060693          	mv	a3,a2
   14994:	06b05e63          	blez	a1,14a10 <_ldtoa_r+0xe3c>
   14998:	11810513          	addi	a0,sp,280
   1499c:	000d8693          	mv	a3,s11
   149a0:	13010793          	addi	a5,sp,304
   149a4:	000d8593          	mv	a1,s11
   149a8:	00050713          	mv	a4,a0
   149ac:	00072883          	lw	a7,0(a4)
   149b0:	00470713          	addi	a4,a4,4
   149b4:	00458593          	addi	a1,a1,4
   149b8:	ff15ae23          	sw	a7,-4(a1)
   149bc:	fee798e3          	bne	a5,a4,149ac <_ldtoa_r+0xdd8>
   149c0:	0fc10593          	addi	a1,sp,252
   149c4:	14011623          	sh	zero,332(sp)
   149c8:	11410713          	addi	a4,sp,276
   149cc:	00058793          	mv	a5,a1
   149d0:	0007a883          	lw	a7,0(a5)
   149d4:	00478793          	addi	a5,a5,4
   149d8:	00450513          	addi	a0,a0,4
   149dc:	ff152e23          	sw	a7,-4(a0)
   149e0:	fef718e3          	bne	a4,a5,149d0 <_ldtoa_r+0xdfc>
   149e4:	12011823          	sh	zero,304(sp)
   149e8:	018d8793          	addi	a5,s11,24
   149ec:	0006a703          	lw	a4,0(a3)
   149f0:	00468693          	addi	a3,a3,4
   149f4:	00458593          	addi	a1,a1,4
   149f8:	fee5ae23          	sw	a4,-4(a1)
   149fc:	fed798e3          	bne	a5,a3,149ec <_ldtoa_r+0xe18>
   14a00:	11a15683          	lhu	a3,282(sp)
   14a04:	41d605b3          	sub	a1,a2,t4
   14a08:	10011a23          	sh	zero,276(sp)
   14a0c:	00068613          	mv	a2,a3
   14a10:	32058863          	beqz	a1,14d40 <_ldtoa_r+0x116c>
   14a14:	02d12e23          	sw	a3,60(sp)
   14a18:	f6f00793          	li	a5,-145
   14a1c:	06f5c663          	blt	a1,a5,14a88 <_ldtoa_r+0xeb4>
   14a20:	0fc10513          	addi	a0,sp,252
   14a24:	c3dfd0ef          	jal	ra,12660 <eshift.part.0>
   14a28:	03c12683          	lw	a3,60(sp)
   14a2c:	00050593          	mv	a1,a0
   14a30:	13010793          	addi	a5,sp,304
   14a34:	11410713          	addi	a4,sp,276
   14a38:	0fc15503          	lhu	a0,252(sp)
   14a3c:	11815603          	lhu	a2,280(sp)
   14a40:	3ac50463          	beq	a0,a2,14de8 <_ldtoa_r+0x1214>
   14a44:	00000613          	li	a2,0
   14a48:	11a10e93          	addi	t4,sp,282
   14a4c:	0007d503          	lhu	a0,0(a5)
   14a50:	00075883          	lhu	a7,0(a4)
   14a54:	ffe78793          	addi	a5,a5,-2
   14a58:	ffe70713          	addi	a4,a4,-2
   14a5c:	41150533          	sub	a0,a0,a7
   14a60:	40c50633          	sub	a2,a0,a2
   14a64:	01065513          	srli	a0,a2,0x10
   14a68:	00c79123          	sh	a2,2(a5)
   14a6c:	00157613          	andi	a2,a0,1
   14a70:	fdd79ee3          	bne	a5,t4,14a4c <_ldtoa_r+0xe78>
   14a74:	00100613          	li	a2,1
   14a78:	00090793          	mv	a5,s2
   14a7c:	04000713          	li	a4,64
   14a80:	11810513          	addi	a0,sp,280
   14a84:	f99fd0ef          	jal	ra,12a1c <emdnorm>
   14a88:	000a8593          	mv	a1,s5
   14a8c:	11810513          	addi	a0,sp,280
   14a90:	9a1fd0ef          	jal	ra,12430 <emovo.constprop.0>
   14a94:	d31ff06f          	j	147c4 <_ldtoa_r+0xbf0>
   14a98:	01412783          	lw	a5,20(sp)
   14a9c:	12010a23          	sb	zero,308(sp)
   14aa0:	000d8913          	mv	s2,s11
   14aa4:	0007a023          	sw	zero,0(a5)
   14aa8:	ad1ff06f          	j	14578 <_ldtoa_r+0x9a4>
   14aac:	000a8793          	mv	a5,s5
   14ab0:	00278793          	addi	a5,a5,2
   14ab4:	0f410713          	addi	a4,sp,244
   14ab8:	fe079f23          	sh	zero,-2(a5)
   14abc:	fee79ae3          	bne	a5,a4,14ab0 <_ldtoa_r+0xedc>
   14ac0:	cf9ff06f          	j	147b8 <_ldtoa_r+0xbe4>
   14ac4:	02012783          	lw	a5,32(sp)
   14ac8:	13410d93          	addi	s11,sp,308
   14acc:	0e078863          	beqz	a5,14bbc <_ldtoa_r+0xfe8>
   14ad0:	0000f597          	auipc	a1,0xf
   14ad4:	d6058593          	addi	a1,a1,-672 # 23830 <zeroes.0+0x48>
   14ad8:	000d8513          	mv	a0,s11
   14adc:	791020ef          	jal	ra,17a6c <sprintf>
   14ae0:	00002437          	lui	s0,0x2
   14ae4:	70f40413          	addi	s0,s0,1807 # 270f <xTaskIncrementTick+0xbb>
   14ae8:	f70ff06f          	j	14258 <_ldtoa_r+0x684>
   14aec:	0f810d13          	addi	s10,sp,248
   14af0:	a78ff06f          	j	13d68 <_ldtoa_r+0x194>
   14af4:	00170713          	addi	a4,a4,1
   14af8:	00e58023          	sb	a4,0(a1)
   14afc:	f48ff06f          	j	14244 <_ldtoa_r+0x670>
   14b00:	fff5c783          	lbu	a5,-1(a1)
   14b04:	03800713          	li	a4,56
   14b08:	0cf77463          	bgeu	a4,a5,14bd0 <_ldtoa_r+0xffc>
   14b0c:	03100793          	li	a5,49
   14b10:	00140413          	addi	s0,s0,1
   14b14:	fef58fa3          	sb	a5,-1(a1)
   14b18:	f2cff06f          	j	14244 <_ldtoa_r+0x670>
   14b1c:	07010793          	addi	a5,sp,112
   14b20:	08210693          	addi	a3,sp,130
   14b24:	0080006f          	j	14b2c <_ldtoa_r+0xf58>
   14b28:	f4d78663          	beq	a5,a3,14274 <_ldtoa_r+0x6a0>
   14b2c:	0007d703          	lhu	a4,0(a5)
   14b30:	00278793          	addi	a5,a5,2
   14b34:	fe070ae3          	beqz	a4,14b28 <_ldtoa_r+0xf54>
   14b38:	01412703          	lw	a4,20(sp)
   14b3c:	000027b7          	lui	a5,0x2
   14b40:	70f78793          	addi	a5,a5,1807 # 270f <xTaskIncrementTick+0xbb>
   14b44:	00f72023          	sw	a5,0(a4)
   14b48:	f78ff06f          	j	142c0 <_ldtoa_r+0x6ec>
   14b4c:	13410d93          	addi	s11,sp,308
   14b50:	0000f597          	auipc	a1,0xf
   14b54:	cf858593          	addi	a1,a1,-776 # 23848 <zeroes.0+0x60>
   14b58:	000d8513          	mv	a0,s11
   14b5c:	711020ef          	jal	ra,17a6c <sprintf>
   14b60:	f81ff06f          	j	14ae0 <_ldtoa_r+0xf0c>
   14b64:	0a810593          	addi	a1,sp,168
   14b68:	08c10513          	addi	a0,sp,140
   14b6c:	02f12023          	sw	a5,32(sp)
   14b70:	8c1fd0ef          	jal	ra,12430 <emovo.constprop.0>
   14b74:	0000f597          	auipc	a1,0xf
   14b78:	d2c58593          	addi	a1,a1,-724 # 238a0 <ezero>
   14b7c:	0a810513          	addi	a0,sp,168
   14b80:	d51fd0ef          	jal	ra,128d0 <ecmp>
   14b84:	02012783          	lw	a5,32(sp)
   14b88:	e6051c63          	bnez	a0,14200 <_ldtoa_r+0x62c>
   14b8c:	ea04cc63          	bltz	s1,14244 <_ldtoa_r+0x670>
   14b90:	ffe7c703          	lbu	a4,-2(a5)
   14b94:	ffe78593          	addi	a1,a5,-2
   14b98:	fd270613          	addi	a2,a4,-46
   14b9c:	00163613          	seqz	a2,a2
   14ba0:	fff64613          	not	a2,a2
   14ba4:	00cc0633          	add	a2,s8,a2
   14ba8:	00064603          	lbu	a2,0(a2)
   14bac:	07f77713          	andi	a4,a4,127
   14bb0:	00167613          	andi	a2,a2,1
   14bb4:	e4061e63          	bnez	a2,14210 <_ldtoa_r+0x63c>
   14bb8:	e8cff06f          	j	14244 <_ldtoa_r+0x670>
   14bbc:	0000f597          	auipc	a1,0xf
   14bc0:	c8058593          	addi	a1,a1,-896 # 2383c <zeroes.0+0x54>
   14bc4:	000d8513          	mv	a0,s11
   14bc8:	6a5020ef          	jal	ra,17a6c <sprintf>
   14bcc:	f15ff06f          	j	14ae0 <_ldtoa_r+0xf0c>
   14bd0:	00178793          	addi	a5,a5,1
   14bd4:	fef58fa3          	sb	a5,-1(a1)
   14bd8:	e6cff06f          	j	14244 <_ldtoa_r+0x670>
   14bdc:	0e010b93          	addi	s7,sp,224
   14be0:	000b8593          	mv	a1,s7
   14be4:	08c10513          	addi	a0,sp,140
   14be8:	02e12223          	sw	a4,36(sp)
   14bec:	c31fd0ef          	jal	ra,1281c <emovi>
   14bf0:	000047b7          	lui	a5,0x4
   14bf4:	00000413          	li	s0,0
   14bf8:	0f810d13          	addi	s10,sp,248
   14bfc:	0e210b13          	addi	s6,sp,226
   14c00:	ffe78d93          	addi	s11,a5,-2 # 3ffe <xTaskPriorityDisinherit+0x16e>
   14c04:	0dc10c93          	addi	s9,sp,220
   14c08:	0f815783          	lhu	a5,248(sp)
   14c0c:	0077f793          	andi	a5,a5,7
   14c10:	0c079a63          	bnez	a5,14ce4 <_ldtoa_r+0x1110>
   14c14:	0c410913          	addi	s2,sp,196
   14c18:	000b8493          	mv	s1,s7
   14c1c:	00090713          	mv	a4,s2
   14c20:	000b8793          	mv	a5,s7
   14c24:	0007a683          	lw	a3,0(a5)
   14c28:	00478793          	addi	a5,a5,4
   14c2c:	00470713          	addi	a4,a4,4
   14c30:	fed72e23          	sw	a3,-4(a4)
   14c34:	ffa798e3          	bne	a5,s10,14c24 <_ldtoa_r+0x1050>
   14c38:	0c410513          	addi	a0,sp,196
   14c3c:	0c011e23          	sh	zero,220(sp)
   14c40:	ebcfd0ef          	jal	ra,122fc <eshdn1>
   14c44:	0c410513          	addi	a0,sp,196
   14c48:	eb4fd0ef          	jal	ra,122fc <eshdn1>
   14c4c:	00000613          	li	a2,0
   14c50:	0dc10693          	addi	a3,sp,220
   14c54:	000d0713          	mv	a4,s10
   14c58:	0006d503          	lhu	a0,0(a3)
   14c5c:	00075783          	lhu	a5,0(a4)
   14c60:	ffe68693          	addi	a3,a3,-2
   14c64:	ffe70713          	addi	a4,a4,-2
   14c68:	00a787b3          	add	a5,a5,a0
   14c6c:	00c787b3          	add	a5,a5,a2
   14c70:	0107d613          	srli	a2,a5,0x10
   14c74:	00f69123          	sh	a5,2(a3)
   14c78:	00167613          	andi	a2,a2,1
   14c7c:	fd671ee3          	bne	a4,s6,14c58 <_ldtoa_r+0x1084>
   14c80:	0c615783          	lhu	a5,198(sp)
   14c84:	0c815703          	lhu	a4,200(sp)
   14c88:	00378793          	addi	a5,a5,3
   14c8c:	0cf11323          	sh	a5,198(sp)
   14c90:	02070063          	beqz	a4,14cb0 <_ldtoa_r+0x10dc>
   14c94:	0c410513          	addi	a0,sp,196
   14c98:	e64fd0ef          	jal	ra,122fc <eshdn1>
   14c9c:	0c615783          	lhu	a5,198(sp)
   14ca0:	0c815703          	lhu	a4,200(sp)
   14ca4:	00178793          	addi	a5,a5,1
   14ca8:	0cf11323          	sh	a5,198(sp)
   14cac:	fe0714e3          	bnez	a4,14c94 <_ldtoa_r+0x10c0>
   14cb0:	0dc15783          	lhu	a5,220(sp)
   14cb4:	02079863          	bnez	a5,14ce4 <_ldtoa_r+0x1110>
   14cb8:	0c615783          	lhu	a5,198(sp)
   14cbc:	02fde463          	bltu	s11,a5,14ce4 <_ldtoa_r+0x1110>
   14cc0:	00092783          	lw	a5,0(s2)
   14cc4:	00490913          	addi	s2,s2,4
   14cc8:	00448493          	addi	s1,s1,4
   14ccc:	fef4ae23          	sw	a5,-4(s1)
   14cd0:	ff9918e3          	bne	s2,s9,14cc0 <_ldtoa_r+0x10ec>
   14cd4:	0e011c23          	sh	zero,248(sp)
   14cd8:	fff40413          	addi	s0,s0,-1
   14cdc:	fd500793          	li	a5,-43
   14ce0:	f2f414e3          	bne	s0,a5,14c08 <_ldtoa_r+0x1034>
   14ce4:	02412703          	lw	a4,36(sp)
   14ce8:	08c10593          	addi	a1,sp,140
   14cec:	000b8513          	mv	a0,s7
   14cf0:	02e12223          	sw	a4,36(sp)
   14cf4:	f3cfd0ef          	jal	ra,12430 <emovo.constprop.0>
   14cf8:	02412703          	lw	a4,36(sp)
   14cfc:	17010913          	addi	s2,sp,368
   14d00:	f70ff06f          	j	14470 <_ldtoa_r+0x89c>
   14d04:	000a8793          	mv	a5,s5
   14d08:	0f210713          	addi	a4,sp,242
   14d0c:	0007d683          	lhu	a3,0(a5)
   14d10:	00278793          	addi	a5,a5,2
   14d14:	aa0698e3          	bnez	a3,147c4 <_ldtoa_r+0xbf0>
   14d18:	fee79ae3          	bne	a5,a4,14d0c <_ldtoa_r+0x1138>
   14d1c:	000a8793          	mv	a5,s5
   14d20:	0007d683          	lhu	a3,0(a5)
   14d24:	00278793          	addi	a5,a5,2
   14d28:	c2069ae3          	bnez	a3,1495c <_ldtoa_r+0xd88>
   14d2c:	fee79ae3          	bne	a5,a4,14d20 <_ldtoa_r+0x114c>
   14d30:	a95ff06f          	j	147c4 <_ldtoa_r+0xbf0>
   14d34:	0e010b93          	addi	s7,sp,224
   14d38:	0f810d13          	addi	s10,sp,248
   14d3c:	f34ff06f          	j	14470 <_ldtoa_r+0x89c>
   14d40:	11c10713          	addi	a4,sp,284
   14d44:	10010793          	addi	a5,sp,256
   14d48:	11610f13          	addi	t5,sp,278
   14d4c:	0007de83          	lhu	t4,0(a5)
   14d50:	00075503          	lhu	a0,0(a4)
   14d54:	00278793          	addi	a5,a5,2
   14d58:	00270713          	addi	a4,a4,2
   14d5c:	04ae9663          	bne	t4,a0,14da8 <_ldtoa_r+0x11d4>
   14d60:	ffe796e3          	bne	a5,t5,14d4c <_ldtoa_r+0x1178>
   14d64:	0fc15703          	lhu	a4,252(sp)
   14d68:	11815783          	lhu	a5,280(sp)
   14d6c:	04f70663          	beq	a4,a5,14db8 <_ldtoa_r+0x11e4>
   14d70:	000a8793          	mv	a5,s5
   14d74:	0f410713          	addi	a4,sp,244
   14d78:	00278793          	addi	a5,a5,2
   14d7c:	fe079f23          	sh	zero,-2(a5)
   14d80:	fee79ce3          	bne	a5,a4,14d78 <_ldtoa_r+0x11a4>
   14d84:	a41ff06f          	j	147c4 <_ldtoa_r+0xbf0>
   14d88:	000015b7          	lui	a1,0x1
   14d8c:	0000f697          	auipc	a3,0xf
   14d90:	ac468693          	addi	a3,a3,-1340 # 23850 <zeroes.0+0x68>
   14d94:	00000613          	li	a2,0
   14d98:	b6e58593          	addi	a1,a1,-1170 # b6e <vTaskDelete+0x11e>
   14d9c:	0000f517          	auipc	a0,0xf
   14da0:	ac850513          	addi	a0,a0,-1336 # 23864 <zeroes.0+0x7c>
   14da4:	080070ef          	jal	ra,1be24 <__assert_func>
   14da8:	07d56c63          	bltu	a0,t4,14e20 <_ldtoa_r+0x124c>
   14dac:	13010793          	addi	a5,sp,304
   14db0:	11410713          	addi	a4,sp,276
   14db4:	c85ff06f          	j	14a38 <_ldtoa_r+0xe64>
   14db8:	00068793          	mv	a5,a3
   14dbc:	00069663          	bnez	a3,14dc8 <_ldtoa_r+0x11f4>
   14dc0:	11e11703          	lh	a4,286(sp)
   14dc4:	0c075663          	bgez	a4,14e90 <_ldtoa_r+0x12bc>
   14dc8:	11a10713          	addi	a4,sp,282
   14dcc:	13010793          	addi	a5,sp,304
   14dd0:	00075583          	lhu	a1,0(a4)
   14dd4:	10059663          	bnez	a1,14ee0 <_ldtoa_r+0x130c>
   14dd8:	00270713          	addi	a4,a4,2
   14ddc:	fee79ae3          	bne	a5,a4,14dd0 <_ldtoa_r+0x11fc>
   14de0:	10c11d23          	sh	a2,282(sp)
   14de4:	ca5ff06f          	j	14a88 <_ldtoa_r+0xeb4>
   14de8:	00000613          	li	a2,0
   14dec:	0fe10e93          	addi	t4,sp,254
   14df0:	0007d883          	lhu	a7,0(a5)
   14df4:	00075503          	lhu	a0,0(a4)
   14df8:	ffe78793          	addi	a5,a5,-2
   14dfc:	ffe70713          	addi	a4,a4,-2
   14e00:	01150533          	add	a0,a0,a7
   14e04:	00c50633          	add	a2,a0,a2
   14e08:	01065513          	srli	a0,a2,0x10
   14e0c:	00c79123          	sh	a2,2(a5)
   14e10:	00157613          	andi	a2,a0,1
   14e14:	fdd71ee3          	bne	a4,t4,14df0 <_ldtoa_r+0x121c>
   14e18:	00000613          	li	a2,0
   14e1c:	c5dff06f          	j	14a78 <_ldtoa_r+0xea4>
   14e20:	11810f13          	addi	t5,sp,280
   14e24:	000d8513          	mv	a0,s11
   14e28:	13010793          	addi	a5,sp,304
   14e2c:	000d8613          	mv	a2,s11
   14e30:	000f0713          	mv	a4,t5
   14e34:	00072883          	lw	a7,0(a4)
   14e38:	00470713          	addi	a4,a4,4
   14e3c:	00460613          	addi	a2,a2,4
   14e40:	ff162e23          	sw	a7,-4(a2)
   14e44:	fee798e3          	bne	a5,a4,14e34 <_ldtoa_r+0x1260>
   14e48:	0fc10613          	addi	a2,sp,252
   14e4c:	14011623          	sh	zero,332(sp)
   14e50:	11410713          	addi	a4,sp,276
   14e54:	00060e93          	mv	t4,a2
   14e58:	000ea883          	lw	a7,0(t4)
   14e5c:	004e8e93          	addi	t4,t4,4
   14e60:	004f0f13          	addi	t5,t5,4
   14e64:	ff1f2e23          	sw	a7,-4(t5)
   14e68:	ffd718e3          	bne	a4,t4,14e58 <_ldtoa_r+0x1284>
   14e6c:	12011823          	sh	zero,304(sp)
   14e70:	018d8e93          	addi	t4,s11,24
   14e74:	00052883          	lw	a7,0(a0)
   14e78:	00450513          	addi	a0,a0,4
   14e7c:	00460613          	addi	a2,a2,4
   14e80:	ff162e23          	sw	a7,-4(a2)
   14e84:	feae98e3          	bne	t4,a0,14e74 <_ldtoa_r+0x12a0>
   14e88:	10011a23          	sh	zero,276(sp)
   14e8c:	badff06f          	j	14a38 <_ldtoa_r+0xe64>
   14e90:	13010693          	addi	a3,sp,304
   14e94:	11a10e93          	addi	t4,sp,282
   14e98:	0006d703          	lhu	a4,0(a3)
   14e9c:	01071613          	slli	a2,a4,0x10
   14ea0:	41065613          	srai	a2,a2,0x10
   14ea4:	00065463          	bgez	a2,14eac <_ldtoa_r+0x12d8>
   14ea8:	0017e793          	ori	a5,a5,1
   14eac:	00171713          	slli	a4,a4,0x1
   14eb0:	01071713          	slli	a4,a4,0x10
   14eb4:	0027f613          	andi	a2,a5,2
   14eb8:	01075713          	srli	a4,a4,0x10
   14ebc:	00060463          	beqz	a2,14ec4 <_ldtoa_r+0x12f0>
   14ec0:	00176713          	ori	a4,a4,1
   14ec4:	00179793          	slli	a5,a5,0x1
   14ec8:	00e69023          	sh	a4,0(a3)
   14ecc:	01079793          	slli	a5,a5,0x10
   14ed0:	ffe68693          	addi	a3,a3,-2
   14ed4:	0107d793          	srli	a5,a5,0x10
   14ed8:	fdd690e3          	bne	a3,t4,14e98 <_ldtoa_r+0x12c4>
   14edc:	badff06f          	j	14a88 <_ldtoa_r+0xeb4>
   14ee0:	00168613          	addi	a2,a3,1
   14ee4:	10c11d23          	sh	a2,282(sp)
   14ee8:	ba1ff06f          	j	14a88 <_ldtoa_r+0xeb4>

00014eec <_ldcheck>:
   14eec:	00852703          	lw	a4,8(a0)
   14ef0:	00c52783          	lw	a5,12(a0)
   14ef4:	00052603          	lw	a2,0(a0)
   14ef8:	00452683          	lw	a3,4(a0)
   14efc:	fc010113          	addi	sp,sp,-64
   14f00:	00010513          	mv	a0,sp
   14f04:	01410593          	addi	a1,sp,20
   14f08:	00e12423          	sw	a4,8(sp)
   14f0c:	00f12623          	sw	a5,12(sp)
   14f10:	02112e23          	sw	ra,60(sp)
   14f14:	00c12023          	sw	a2,0(sp)
   14f18:	00d12223          	sw	a3,4(sp)
   14f1c:	900fe0ef          	jal	ra,1301c <e113toe.isra.0>
   14f20:	02615783          	lhu	a5,38(sp)
   14f24:	00000513          	li	a0,0
   14f28:	fff7c793          	not	a5,a5
   14f2c:	01179713          	slli	a4,a5,0x11
   14f30:	02071063          	bnez	a4,14f50 <_ldcheck+0x64>
   14f34:	01410793          	addi	a5,sp,20
   14f38:	02610693          	addi	a3,sp,38
   14f3c:	0007d703          	lhu	a4,0(a5)
   14f40:	00278793          	addi	a5,a5,2
   14f44:	00071c63          	bnez	a4,14f5c <_ldcheck+0x70>
   14f48:	fed79ae3          	bne	a5,a3,14f3c <_ldcheck+0x50>
   14f4c:	00200513          	li	a0,2
   14f50:	03c12083          	lw	ra,60(sp)
   14f54:	04010113          	addi	sp,sp,64
   14f58:	00008067          	ret
   14f5c:	00100513          	li	a0,1
   14f60:	ff1ff06f          	j	14f50 <_ldcheck+0x64>

00014f64 <__localeconv_l>:
   14f64:	0f050513          	addi	a0,a0,240
   14f68:	00008067          	ret

00014f6c <_localeconv_r>:
   14f6c:	00011517          	auipc	a0,0x11
   14f70:	01c50513          	addi	a0,a0,28 # 25f88 <__global_locale+0xf0>
   14f74:	00008067          	ret

00014f78 <localeconv>:
   14f78:	00011517          	auipc	a0,0x11
   14f7c:	01050513          	addi	a0,a0,16 # 25f88 <__global_locale+0xf0>
   14f80:	00008067          	ret

00014f84 <__retarget_lock_init>:
   14f84:	00008067          	ret

00014f88 <__retarget_lock_init_recursive>:
   14f88:	00008067          	ret

00014f8c <__retarget_lock_close>:
   14f8c:	00008067          	ret

00014f90 <__retarget_lock_close_recursive>:
   14f90:	00008067          	ret

00014f94 <__retarget_lock_acquire>:
   14f94:	00008067          	ret

00014f98 <__retarget_lock_acquire_recursive>:
   14f98:	00008067          	ret

00014f9c <__retarget_lock_try_acquire>:
   14f9c:	00100513          	li	a0,1
   14fa0:	00008067          	ret

00014fa4 <__retarget_lock_try_acquire_recursive>:
   14fa4:	00100513          	li	a0,1
   14fa8:	00008067          	ret

00014fac <__retarget_lock_release>:
   14fac:	00008067          	ret

00014fb0 <__retarget_lock_release_recursive>:
   14fb0:	00008067          	ret

00014fb4 <__smakebuf_r>:
   14fb4:	00c59783          	lh	a5,12(a1)
   14fb8:	f8010113          	addi	sp,sp,-128
   14fbc:	06812c23          	sw	s0,120(sp)
   14fc0:	06112e23          	sw	ra,124(sp)
   14fc4:	06912a23          	sw	s1,116(sp)
   14fc8:	07212823          	sw	s2,112(sp)
   14fcc:	07312623          	sw	s3,108(sp)
   14fd0:	07412423          	sw	s4,104(sp)
   14fd4:	0027f713          	andi	a4,a5,2
   14fd8:	00058413          	mv	s0,a1
   14fdc:	02070c63          	beqz	a4,15014 <__smakebuf_r+0x60>
   14fe0:	04358793          	addi	a5,a1,67
   14fe4:	00f5a023          	sw	a5,0(a1)
   14fe8:	00f5a823          	sw	a5,16(a1)
   14fec:	00100793          	li	a5,1
   14ff0:	00f5aa23          	sw	a5,20(a1)
   14ff4:	07c12083          	lw	ra,124(sp)
   14ff8:	07812403          	lw	s0,120(sp)
   14ffc:	07412483          	lw	s1,116(sp)
   15000:	07012903          	lw	s2,112(sp)
   15004:	06c12983          	lw	s3,108(sp)
   15008:	06812a03          	lw	s4,104(sp)
   1500c:	08010113          	addi	sp,sp,128
   15010:	00008067          	ret
   15014:	00e59583          	lh	a1,14(a1)
   15018:	00050493          	mv	s1,a0
   1501c:	0805cc63          	bltz	a1,150b4 <__smakebuf_r+0x100>
   15020:	00810613          	addi	a2,sp,8
   15024:	420070ef          	jal	ra,1c444 <_fstat_r>
   15028:	08054463          	bltz	a0,150b0 <__smakebuf_r+0xfc>
   1502c:	00c12783          	lw	a5,12(sp)
   15030:	0000f937          	lui	s2,0xf
   15034:	00001a37          	lui	s4,0x1
   15038:	00f97933          	and	s2,s2,a5
   1503c:	ffffe7b7          	lui	a5,0xffffe
   15040:	00f90933          	add	s2,s2,a5
   15044:	00193913          	seqz	s2,s2
   15048:	40000993          	li	s3,1024
   1504c:	800a0a13          	addi	s4,s4,-2048 # 800 <prvInitialiseNewTask+0x290>
   15050:	00098593          	mv	a1,s3
   15054:	00048513          	mv	a0,s1
   15058:	1c4000ef          	jal	ra,1521c <_malloc_r>
   1505c:	00c41783          	lh	a5,12(s0)
   15060:	06050e63          	beqz	a0,150dc <__smakebuf_r+0x128>
   15064:	ffffc717          	auipc	a4,0xffffc
   15068:	35470713          	addi	a4,a4,852 # 113b8 <_cleanup_r>
   1506c:	02e4ae23          	sw	a4,60(s1)
   15070:	0807e793          	ori	a5,a5,128
   15074:	00f41623          	sh	a5,12(s0)
   15078:	00a42023          	sw	a0,0(s0)
   1507c:	00a42823          	sw	a0,16(s0)
   15080:	01342a23          	sw	s3,20(s0)
   15084:	08091863          	bnez	s2,15114 <__smakebuf_r+0x160>
   15088:	0147e7b3          	or	a5,a5,s4
   1508c:	07c12083          	lw	ra,124(sp)
   15090:	00f41623          	sh	a5,12(s0)
   15094:	07812403          	lw	s0,120(sp)
   15098:	07412483          	lw	s1,116(sp)
   1509c:	07012903          	lw	s2,112(sp)
   150a0:	06c12983          	lw	s3,108(sp)
   150a4:	06812a03          	lw	s4,104(sp)
   150a8:	08010113          	addi	sp,sp,128
   150ac:	00008067          	ret
   150b0:	00c41783          	lh	a5,12(s0)
   150b4:	0807f793          	andi	a5,a5,128
   150b8:	00000913          	li	s2,0
   150bc:	04078663          	beqz	a5,15108 <__smakebuf_r+0x154>
   150c0:	04000993          	li	s3,64
   150c4:	00098593          	mv	a1,s3
   150c8:	00048513          	mv	a0,s1
   150cc:	150000ef          	jal	ra,1521c <_malloc_r>
   150d0:	00c41783          	lh	a5,12(s0)
   150d4:	00000a13          	li	s4,0
   150d8:	f80516e3          	bnez	a0,15064 <__smakebuf_r+0xb0>
   150dc:	2007f713          	andi	a4,a5,512
   150e0:	f0071ae3          	bnez	a4,14ff4 <__smakebuf_r+0x40>
   150e4:	ffc7f793          	andi	a5,a5,-4
   150e8:	0027e793          	ori	a5,a5,2
   150ec:	04340713          	addi	a4,s0,67
   150f0:	00f41623          	sh	a5,12(s0)
   150f4:	00100793          	li	a5,1
   150f8:	00e42023          	sw	a4,0(s0)
   150fc:	00e42823          	sw	a4,16(s0)
   15100:	00f42a23          	sw	a5,20(s0)
   15104:	ef1ff06f          	j	14ff4 <__smakebuf_r+0x40>
   15108:	40000993          	li	s3,1024
   1510c:	00000a13          	li	s4,0
   15110:	f41ff06f          	j	15050 <__smakebuf_r+0x9c>
   15114:	00e41583          	lh	a1,14(s0)
   15118:	00048513          	mv	a0,s1
   1511c:	388070ef          	jal	ra,1c4a4 <_isatty_r>
   15120:	00051663          	bnez	a0,1512c <__smakebuf_r+0x178>
   15124:	00c41783          	lh	a5,12(s0)
   15128:	f61ff06f          	j	15088 <__smakebuf_r+0xd4>
   1512c:	00c45783          	lhu	a5,12(s0)
   15130:	ffc7f793          	andi	a5,a5,-4
   15134:	0017e793          	ori	a5,a5,1
   15138:	01079793          	slli	a5,a5,0x10
   1513c:	4107d793          	srai	a5,a5,0x10
   15140:	f49ff06f          	j	15088 <__smakebuf_r+0xd4>

00015144 <__swhatbuf_r>:
   15144:	f9010113          	addi	sp,sp,-112
   15148:	06812423          	sw	s0,104(sp)
   1514c:	00058413          	mv	s0,a1
   15150:	00e59583          	lh	a1,14(a1)
   15154:	06912223          	sw	s1,100(sp)
   15158:	07212023          	sw	s2,96(sp)
   1515c:	06112623          	sw	ra,108(sp)
   15160:	00060493          	mv	s1,a2
   15164:	00068913          	mv	s2,a3
   15168:	0405ca63          	bltz	a1,151bc <__swhatbuf_r+0x78>
   1516c:	00810613          	addi	a2,sp,8
   15170:	2d4070ef          	jal	ra,1c444 <_fstat_r>
   15174:	04054463          	bltz	a0,151bc <__swhatbuf_r+0x78>
   15178:	00c12703          	lw	a4,12(sp)
   1517c:	0000f7b7          	lui	a5,0xf
   15180:	06c12083          	lw	ra,108(sp)
   15184:	00e7f7b3          	and	a5,a5,a4
   15188:	ffffe737          	lui	a4,0xffffe
   1518c:	00e787b3          	add	a5,a5,a4
   15190:	06812403          	lw	s0,104(sp)
   15194:	0017b793          	seqz	a5,a5
   15198:	00f92023          	sw	a5,0(s2) # f000 <_vfprintf_r+0x11a4>
   1519c:	40000713          	li	a4,1024
   151a0:	00e4a023          	sw	a4,0(s1)
   151a4:	00001537          	lui	a0,0x1
   151a8:	06412483          	lw	s1,100(sp)
   151ac:	06012903          	lw	s2,96(sp)
   151b0:	80050513          	addi	a0,a0,-2048 # 800 <prvInitialiseNewTask+0x290>
   151b4:	07010113          	addi	sp,sp,112
   151b8:	00008067          	ret
   151bc:	00c45783          	lhu	a5,12(s0)
   151c0:	0807f793          	andi	a5,a5,128
   151c4:	02078863          	beqz	a5,151f4 <__swhatbuf_r+0xb0>
   151c8:	06c12083          	lw	ra,108(sp)
   151cc:	06812403          	lw	s0,104(sp)
   151d0:	00000793          	li	a5,0
   151d4:	00f92023          	sw	a5,0(s2)
   151d8:	04000713          	li	a4,64
   151dc:	00e4a023          	sw	a4,0(s1)
   151e0:	06012903          	lw	s2,96(sp)
   151e4:	06412483          	lw	s1,100(sp)
   151e8:	00000513          	li	a0,0
   151ec:	07010113          	addi	sp,sp,112
   151f0:	00008067          	ret
   151f4:	06c12083          	lw	ra,108(sp)
   151f8:	06812403          	lw	s0,104(sp)
   151fc:	00f92023          	sw	a5,0(s2)
   15200:	40000713          	li	a4,1024
   15204:	00e4a023          	sw	a4,0(s1)
   15208:	06012903          	lw	s2,96(sp)
   1520c:	06412483          	lw	s1,100(sp)
   15210:	00000513          	li	a0,0
   15214:	07010113          	addi	sp,sp,112
   15218:	00008067          	ret

0001521c <_malloc_r>:
   1521c:	fd010113          	addi	sp,sp,-48
   15220:	03212023          	sw	s2,32(sp)
   15224:	02112623          	sw	ra,44(sp)
   15228:	02812423          	sw	s0,40(sp)
   1522c:	02912223          	sw	s1,36(sp)
   15230:	01312e23          	sw	s3,28(sp)
   15234:	01412c23          	sw	s4,24(sp)
   15238:	01512a23          	sw	s5,20(sp)
   1523c:	01612823          	sw	s6,16(sp)
   15240:	01712623          	sw	s7,12(sp)
   15244:	01812423          	sw	s8,8(sp)
   15248:	01912223          	sw	s9,4(sp)
   1524c:	00b58793          	addi	a5,a1,11
   15250:	01600713          	li	a4,22
   15254:	00050913          	mv	s2,a0
   15258:	08f76e63          	bltu	a4,a5,152f4 <_malloc_r+0xd8>
   1525c:	01000793          	li	a5,16
   15260:	22b7e063          	bltu	a5,a1,15480 <_malloc_r+0x264>
   15264:	d35f20ef          	jal	ra,7f98 <__malloc_lock>
   15268:	01000493          	li	s1,16
   1526c:	01800793          	li	a5,24
   15270:	00200593          	li	a1,2
   15274:	00011997          	auipc	s3,0x11
   15278:	81c98993          	addi	s3,s3,-2020 # 25a90 <__malloc_av_>
   1527c:	00f987b3          	add	a5,s3,a5
   15280:	0047a403          	lw	s0,4(a5) # f004 <_vfprintf_r+0x11a8>
   15284:	ff878713          	addi	a4,a5,-8
   15288:	32e40463          	beq	s0,a4,155b0 <_malloc_r+0x394>
   1528c:	00442783          	lw	a5,4(s0)
   15290:	00c42683          	lw	a3,12(s0)
   15294:	00842603          	lw	a2,8(s0)
   15298:	ffc7f793          	andi	a5,a5,-4
   1529c:	00f407b3          	add	a5,s0,a5
   152a0:	0047a703          	lw	a4,4(a5)
   152a4:	00d62623          	sw	a3,12(a2)
   152a8:	00c6a423          	sw	a2,8(a3)
   152ac:	00176713          	ori	a4,a4,1
   152b0:	00090513          	mv	a0,s2
   152b4:	00e7a223          	sw	a4,4(a5)
   152b8:	e3df20ef          	jal	ra,80f4 <__malloc_unlock>
   152bc:	00840513          	addi	a0,s0,8
   152c0:	02c12083          	lw	ra,44(sp)
   152c4:	02812403          	lw	s0,40(sp)
   152c8:	02412483          	lw	s1,36(sp)
   152cc:	02012903          	lw	s2,32(sp)
   152d0:	01c12983          	lw	s3,28(sp)
   152d4:	01812a03          	lw	s4,24(sp)
   152d8:	01412a83          	lw	s5,20(sp)
   152dc:	01012b03          	lw	s6,16(sp)
   152e0:	00c12b83          	lw	s7,12(sp)
   152e4:	00812c03          	lw	s8,8(sp)
   152e8:	00412c83          	lw	s9,4(sp)
   152ec:	03010113          	addi	sp,sp,48
   152f0:	00008067          	ret
   152f4:	ff87f493          	andi	s1,a5,-8
   152f8:	1807c463          	bltz	a5,15480 <_malloc_r+0x264>
   152fc:	18b4e263          	bltu	s1,a1,15480 <_malloc_r+0x264>
   15300:	c99f20ef          	jal	ra,7f98 <__malloc_lock>
   15304:	1f700793          	li	a5,503
   15308:	3a97fe63          	bgeu	a5,s1,156c4 <_malloc_r+0x4a8>
   1530c:	0094d793          	srli	a5,s1,0x9
   15310:	18078063          	beqz	a5,15490 <_malloc_r+0x274>
   15314:	00400713          	li	a4,4
   15318:	30f76463          	bltu	a4,a5,15620 <_malloc_r+0x404>
   1531c:	0064d793          	srli	a5,s1,0x6
   15320:	03978593          	addi	a1,a5,57
   15324:	03878513          	addi	a0,a5,56
   15328:	00359693          	slli	a3,a1,0x3
   1532c:	00010997          	auipc	s3,0x10
   15330:	76498993          	addi	s3,s3,1892 # 25a90 <__malloc_av_>
   15334:	00d986b3          	add	a3,s3,a3
   15338:	0046a403          	lw	s0,4(a3)
   1533c:	ff868693          	addi	a3,a3,-8
   15340:	02868663          	beq	a3,s0,1536c <_malloc_r+0x150>
   15344:	00f00613          	li	a2,15
   15348:	0100006f          	j	15358 <_malloc_r+0x13c>
   1534c:	24075c63          	bgez	a4,155a4 <_malloc_r+0x388>
   15350:	00c42403          	lw	s0,12(s0)
   15354:	00868c63          	beq	a3,s0,1536c <_malloc_r+0x150>
   15358:	00442783          	lw	a5,4(s0)
   1535c:	ffc7f793          	andi	a5,a5,-4
   15360:	40978733          	sub	a4,a5,s1
   15364:	fee654e3          	bge	a2,a4,1534c <_malloc_r+0x130>
   15368:	00050593          	mv	a1,a0
   1536c:	0109a403          	lw	s0,16(s3)
   15370:	00010897          	auipc	a7,0x10
   15374:	72888893          	addi	a7,a7,1832 # 25a98 <__malloc_av_+0x8>
   15378:	1f140e63          	beq	s0,a7,15574 <_malloc_r+0x358>
   1537c:	00442783          	lw	a5,4(s0)
   15380:	00f00693          	li	a3,15
   15384:	ffc7f793          	andi	a5,a5,-4
   15388:	40978733          	sub	a4,a5,s1
   1538c:	34e6c263          	blt	a3,a4,156d0 <_malloc_r+0x4b4>
   15390:	0119aa23          	sw	a7,20(s3)
   15394:	0119a823          	sw	a7,16(s3)
   15398:	30075663          	bgez	a4,156a4 <_malloc_r+0x488>
   1539c:	1ff00713          	li	a4,511
   153a0:	0049a503          	lw	a0,4(s3)
   153a4:	20f76e63          	bltu	a4,a5,155c0 <_malloc_r+0x3a4>
   153a8:	ff87f713          	andi	a4,a5,-8
   153ac:	00870713          	addi	a4,a4,8 # ffffe008 <__alt_data_end+0xfffbe008>
   153b0:	00e98733          	add	a4,s3,a4
   153b4:	00072683          	lw	a3,0(a4)
   153b8:	0057d613          	srli	a2,a5,0x5
   153bc:	00100793          	li	a5,1
   153c0:	00c797b3          	sll	a5,a5,a2
   153c4:	00f56533          	or	a0,a0,a5
   153c8:	ff870793          	addi	a5,a4,-8
   153cc:	00f42623          	sw	a5,12(s0)
   153d0:	00d42423          	sw	a3,8(s0)
   153d4:	00a9a223          	sw	a0,4(s3)
   153d8:	00872023          	sw	s0,0(a4)
   153dc:	0086a623          	sw	s0,12(a3)
   153e0:	4025d793          	srai	a5,a1,0x2
   153e4:	00100613          	li	a2,1
   153e8:	00f61633          	sll	a2,a2,a5
   153ec:	0ac56a63          	bltu	a0,a2,154a0 <_malloc_r+0x284>
   153f0:	00a677b3          	and	a5,a2,a0
   153f4:	02079463          	bnez	a5,1541c <_malloc_r+0x200>
   153f8:	00161613          	slli	a2,a2,0x1
   153fc:	ffc5f593          	andi	a1,a1,-4
   15400:	00a677b3          	and	a5,a2,a0
   15404:	00458593          	addi	a1,a1,4
   15408:	00079a63          	bnez	a5,1541c <_malloc_r+0x200>
   1540c:	00161613          	slli	a2,a2,0x1
   15410:	00a677b3          	and	a5,a2,a0
   15414:	00458593          	addi	a1,a1,4
   15418:	fe078ae3          	beqz	a5,1540c <_malloc_r+0x1f0>
   1541c:	00f00813          	li	a6,15
   15420:	00359313          	slli	t1,a1,0x3
   15424:	00698333          	add	t1,s3,t1
   15428:	00030513          	mv	a0,t1
   1542c:	00c52783          	lw	a5,12(a0)
   15430:	00058e13          	mv	t3,a1
   15434:	20f50863          	beq	a0,a5,15644 <_malloc_r+0x428>
   15438:	0047a703          	lw	a4,4(a5)
   1543c:	00078413          	mv	s0,a5
   15440:	00c7a783          	lw	a5,12(a5)
   15444:	ffc77713          	andi	a4,a4,-4
   15448:	409706b3          	sub	a3,a4,s1
   1544c:	20d84863          	blt	a6,a3,1565c <_malloc_r+0x440>
   15450:	fe06c2e3          	bltz	a3,15434 <_malloc_r+0x218>
   15454:	00e40733          	add	a4,s0,a4
   15458:	00472683          	lw	a3,4(a4)
   1545c:	00842603          	lw	a2,8(s0)
   15460:	00090513          	mv	a0,s2
   15464:	0016e693          	ori	a3,a3,1
   15468:	00d72223          	sw	a3,4(a4)
   1546c:	00f62623          	sw	a5,12(a2)
   15470:	00c7a423          	sw	a2,8(a5)
   15474:	c81f20ef          	jal	ra,80f4 <__malloc_unlock>
   15478:	00840513          	addi	a0,s0,8
   1547c:	e45ff06f          	j	152c0 <_malloc_r+0xa4>
   15480:	00c00793          	li	a5,12
   15484:	00f92023          	sw	a5,0(s2)
   15488:	00000513          	li	a0,0
   1548c:	e35ff06f          	j	152c0 <_malloc_r+0xa4>
   15490:	20000693          	li	a3,512
   15494:	04000593          	li	a1,64
   15498:	03f00513          	li	a0,63
   1549c:	e91ff06f          	j	1532c <_malloc_r+0x110>
   154a0:	0089a403          	lw	s0,8(s3)
   154a4:	00442783          	lw	a5,4(s0)
   154a8:	ffc7fb13          	andi	s6,a5,-4
   154ac:	009b6863          	bltu	s6,s1,154bc <_malloc_r+0x2a0>
   154b0:	409b0733          	sub	a4,s6,s1
   154b4:	00f00793          	li	a5,15
   154b8:	0ce7c263          	blt	a5,a4,1557c <_malloc_r+0x360>
   154bc:	00011c97          	auipc	s9,0x11
   154c0:	b88c8c93          	addi	s9,s9,-1144 # 26044 <__malloc_sbrk_base>
   154c4:	000ca703          	lw	a4,0(s9)
   154c8:	00013a97          	auipc	s5,0x13
   154cc:	814aaa83          	lw	s5,-2028(s5) # 27cdc <__malloc_top_pad>
   154d0:	fff00793          	li	a5,-1
   154d4:	01640a33          	add	s4,s0,s6
   154d8:	01548ab3          	add	s5,s1,s5
   154dc:	3cf70063          	beq	a4,a5,1589c <_malloc_r+0x680>
   154e0:	000017b7          	lui	a5,0x1
   154e4:	00f78793          	addi	a5,a5,15 # 100f <uxTaskPriorityGetFromISR+0x37>
   154e8:	00fa8ab3          	add	s5,s5,a5
   154ec:	fffff7b7          	lui	a5,0xfffff
   154f0:	00fafab3          	and	s5,s5,a5
   154f4:	000a8593          	mv	a1,s5
   154f8:	00090513          	mv	a0,s2
   154fc:	71d010ef          	jal	ra,17418 <_sbrk_r>
   15500:	fff00793          	li	a5,-1
   15504:	00050b93          	mv	s7,a0
   15508:	20f50e63          	beq	a0,a5,15724 <_malloc_r+0x508>
   1550c:	21456a63          	bltu	a0,s4,15720 <_malloc_r+0x504>
   15510:	00026c17          	auipc	s8,0x26
   15514:	29cc0c13          	addi	s8,s8,668 # 3b7ac <__malloc_current_mallinfo>
   15518:	000c2583          	lw	a1,0(s8)
   1551c:	00ba85b3          	add	a1,s5,a1
   15520:	00bc2023          	sw	a1,0(s8)
   15524:	00058713          	mv	a4,a1
   15528:	2aaa1063          	bne	s4,a0,157c8 <_malloc_r+0x5ac>
   1552c:	01451793          	slli	a5,a0,0x14
   15530:	28079c63          	bnez	a5,157c8 <_malloc_r+0x5ac>
   15534:	0089ab83          	lw	s7,8(s3)
   15538:	015b07b3          	add	a5,s6,s5
   1553c:	0017e793          	ori	a5,a5,1
   15540:	00fba223          	sw	a5,4(s7)
   15544:	00012717          	auipc	a4,0x12
   15548:	79470713          	addi	a4,a4,1940 # 27cd8 <__malloc_max_sbrked_mem>
   1554c:	00072683          	lw	a3,0(a4)
   15550:	00b6f463          	bgeu	a3,a1,15558 <_malloc_r+0x33c>
   15554:	00b72023          	sw	a1,0(a4)
   15558:	00012717          	auipc	a4,0x12
   1555c:	77c70713          	addi	a4,a4,1916 # 27cd4 <__malloc_max_total_mem>
   15560:	00072683          	lw	a3,0(a4)
   15564:	00b6f463          	bgeu	a3,a1,1556c <_malloc_r+0x350>
   15568:	00b72023          	sw	a1,0(a4)
   1556c:	000b8413          	mv	s0,s7
   15570:	1bc0006f          	j	1572c <_malloc_r+0x510>
   15574:	0049a503          	lw	a0,4(s3)
   15578:	e69ff06f          	j	153e0 <_malloc_r+0x1c4>
   1557c:	0014e793          	ori	a5,s1,1
   15580:	00f42223          	sw	a5,4(s0)
   15584:	009404b3          	add	s1,s0,s1
   15588:	0099a423          	sw	s1,8(s3)
   1558c:	00176713          	ori	a4,a4,1
   15590:	00090513          	mv	a0,s2
   15594:	00e4a223          	sw	a4,4(s1)
   15598:	b5df20ef          	jal	ra,80f4 <__malloc_unlock>
   1559c:	00840513          	addi	a0,s0,8
   155a0:	d21ff06f          	j	152c0 <_malloc_r+0xa4>
   155a4:	00c42683          	lw	a3,12(s0)
   155a8:	00842603          	lw	a2,8(s0)
   155ac:	cf1ff06f          	j	1529c <_malloc_r+0x80>
   155b0:	00c7a403          	lw	s0,12(a5) # fffff00c <__alt_data_end+0xfffbf00c>
   155b4:	00258593          	addi	a1,a1,2
   155b8:	da878ae3          	beq	a5,s0,1536c <_malloc_r+0x150>
   155bc:	cd1ff06f          	j	1528c <_malloc_r+0x70>
   155c0:	0097d713          	srli	a4,a5,0x9
   155c4:	00400693          	li	a3,4
   155c8:	14e6f263          	bgeu	a3,a4,1570c <_malloc_r+0x4f0>
   155cc:	01400693          	li	a3,20
   155d0:	30e6ec63          	bltu	a3,a4,158e8 <_malloc_r+0x6cc>
   155d4:	05c70613          	addi	a2,a4,92
   155d8:	05b70693          	addi	a3,a4,91
   155dc:	00361613          	slli	a2,a2,0x3
   155e0:	00c98633          	add	a2,s3,a2
   155e4:	00062703          	lw	a4,0(a2)
   155e8:	ff860613          	addi	a2,a2,-8
   155ec:	00e61863          	bne	a2,a4,155fc <_malloc_r+0x3e0>
   155f0:	2b40006f          	j	158a4 <_malloc_r+0x688>
   155f4:	00872703          	lw	a4,8(a4)
   155f8:	00e60863          	beq	a2,a4,15608 <_malloc_r+0x3ec>
   155fc:	00472683          	lw	a3,4(a4)
   15600:	ffc6f693          	andi	a3,a3,-4
   15604:	fed7e8e3          	bltu	a5,a3,155f4 <_malloc_r+0x3d8>
   15608:	00c72603          	lw	a2,12(a4)
   1560c:	00c42623          	sw	a2,12(s0)
   15610:	00e42423          	sw	a4,8(s0)
   15614:	00862423          	sw	s0,8(a2)
   15618:	00872623          	sw	s0,12(a4)
   1561c:	dc5ff06f          	j	153e0 <_malloc_r+0x1c4>
   15620:	01400713          	li	a4,20
   15624:	12f77663          	bgeu	a4,a5,15750 <_malloc_r+0x534>
   15628:	05400713          	li	a4,84
   1562c:	2cf76c63          	bltu	a4,a5,15904 <_malloc_r+0x6e8>
   15630:	00c4d793          	srli	a5,s1,0xc
   15634:	06f78593          	addi	a1,a5,111
   15638:	06e78513          	addi	a0,a5,110
   1563c:	00359693          	slli	a3,a1,0x3
   15640:	cedff06f          	j	1532c <_malloc_r+0x110>
   15644:	001e0e13          	addi	t3,t3,1
   15648:	003e7793          	andi	a5,t3,3
   1564c:	00850513          	addi	a0,a0,8
   15650:	10078e63          	beqz	a5,1576c <_malloc_r+0x550>
   15654:	00c52783          	lw	a5,12(a0)
   15658:	dddff06f          	j	15434 <_malloc_r+0x218>
   1565c:	00842603          	lw	a2,8(s0)
   15660:	0014e593          	ori	a1,s1,1
   15664:	00b42223          	sw	a1,4(s0)
   15668:	00f62623          	sw	a5,12(a2)
   1566c:	00c7a423          	sw	a2,8(a5)
   15670:	009404b3          	add	s1,s0,s1
   15674:	0099aa23          	sw	s1,20(s3)
   15678:	0099a823          	sw	s1,16(s3)
   1567c:	0016e793          	ori	a5,a3,1
   15680:	0114a623          	sw	a7,12(s1)
   15684:	0114a423          	sw	a7,8(s1)
   15688:	00f4a223          	sw	a5,4(s1)
   1568c:	00e40733          	add	a4,s0,a4
   15690:	00090513          	mv	a0,s2
   15694:	00d72023          	sw	a3,0(a4)
   15698:	a5df20ef          	jal	ra,80f4 <__malloc_unlock>
   1569c:	00840513          	addi	a0,s0,8
   156a0:	c21ff06f          	j	152c0 <_malloc_r+0xa4>
   156a4:	00f407b3          	add	a5,s0,a5
   156a8:	0047a703          	lw	a4,4(a5)
   156ac:	00090513          	mv	a0,s2
   156b0:	00176713          	ori	a4,a4,1
   156b4:	00e7a223          	sw	a4,4(a5)
   156b8:	a3df20ef          	jal	ra,80f4 <__malloc_unlock>
   156bc:	00840513          	addi	a0,s0,8
   156c0:	c01ff06f          	j	152c0 <_malloc_r+0xa4>
   156c4:	0034d593          	srli	a1,s1,0x3
   156c8:	00848793          	addi	a5,s1,8
   156cc:	ba9ff06f          	j	15274 <_malloc_r+0x58>
   156d0:	0014e693          	ori	a3,s1,1
   156d4:	00d42223          	sw	a3,4(s0)
   156d8:	009404b3          	add	s1,s0,s1
   156dc:	0099aa23          	sw	s1,20(s3)
   156e0:	0099a823          	sw	s1,16(s3)
   156e4:	00176693          	ori	a3,a4,1
   156e8:	0114a623          	sw	a7,12(s1)
   156ec:	0114a423          	sw	a7,8(s1)
   156f0:	00d4a223          	sw	a3,4(s1)
   156f4:	00f407b3          	add	a5,s0,a5
   156f8:	00090513          	mv	a0,s2
   156fc:	00e7a023          	sw	a4,0(a5)
   15700:	9f5f20ef          	jal	ra,80f4 <__malloc_unlock>
   15704:	00840513          	addi	a0,s0,8
   15708:	bb9ff06f          	j	152c0 <_malloc_r+0xa4>
   1570c:	0067d713          	srli	a4,a5,0x6
   15710:	03970613          	addi	a2,a4,57
   15714:	03870693          	addi	a3,a4,56
   15718:	00361613          	slli	a2,a2,0x3
   1571c:	ec5ff06f          	j	155e0 <_malloc_r+0x3c4>
   15720:	09340a63          	beq	s0,s3,157b4 <_malloc_r+0x598>
   15724:	0089a403          	lw	s0,8(s3)
   15728:	00442783          	lw	a5,4(s0)
   1572c:	ffc7f793          	andi	a5,a5,-4
   15730:	40978733          	sub	a4,a5,s1
   15734:	0097e663          	bltu	a5,s1,15740 <_malloc_r+0x524>
   15738:	00f00793          	li	a5,15
   1573c:	e4e7c0e3          	blt	a5,a4,1557c <_malloc_r+0x360>
   15740:	00090513          	mv	a0,s2
   15744:	9b1f20ef          	jal	ra,80f4 <__malloc_unlock>
   15748:	00000513          	li	a0,0
   1574c:	b75ff06f          	j	152c0 <_malloc_r+0xa4>
   15750:	05c78593          	addi	a1,a5,92
   15754:	05b78513          	addi	a0,a5,91
   15758:	00359693          	slli	a3,a1,0x3
   1575c:	bd1ff06f          	j	1532c <_malloc_r+0x110>
   15760:	00832783          	lw	a5,8(t1)
   15764:	fff58593          	addi	a1,a1,-1
   15768:	24679863          	bne	a5,t1,159b8 <_malloc_r+0x79c>
   1576c:	0035f793          	andi	a5,a1,3
   15770:	ff830313          	addi	t1,t1,-8
   15774:	fe0796e3          	bnez	a5,15760 <_malloc_r+0x544>
   15778:	0049a703          	lw	a4,4(s3)
   1577c:	fff64793          	not	a5,a2
   15780:	00e7f7b3          	and	a5,a5,a4
   15784:	00f9a223          	sw	a5,4(s3)
   15788:	00161613          	slli	a2,a2,0x1
   1578c:	d0c7eae3          	bltu	a5,a2,154a0 <_malloc_r+0x284>
   15790:	d00608e3          	beqz	a2,154a0 <_malloc_r+0x284>
   15794:	00f67733          	and	a4,a2,a5
   15798:	00071a63          	bnez	a4,157ac <_malloc_r+0x590>
   1579c:	00161613          	slli	a2,a2,0x1
   157a0:	00f67733          	and	a4,a2,a5
   157a4:	004e0e13          	addi	t3,t3,4
   157a8:	fe070ae3          	beqz	a4,1579c <_malloc_r+0x580>
   157ac:	000e0593          	mv	a1,t3
   157b0:	c71ff06f          	j	15420 <_malloc_r+0x204>
   157b4:	00026c17          	auipc	s8,0x26
   157b8:	ff8c0c13          	addi	s8,s8,-8 # 3b7ac <__malloc_current_mallinfo>
   157bc:	000c2703          	lw	a4,0(s8)
   157c0:	00ea8733          	add	a4,s5,a4
   157c4:	00ec2023          	sw	a4,0(s8)
   157c8:	000ca683          	lw	a3,0(s9)
   157cc:	fff00793          	li	a5,-1
   157d0:	14f68863          	beq	a3,a5,15920 <_malloc_r+0x704>
   157d4:	414b87b3          	sub	a5,s7,s4
   157d8:	00e787b3          	add	a5,a5,a4
   157dc:	00fc2023          	sw	a5,0(s8)
   157e0:	007bfc93          	andi	s9,s7,7
   157e4:	0c0c8c63          	beqz	s9,158bc <_malloc_r+0x6a0>
   157e8:	00001737          	lui	a4,0x1
   157ec:	419b8bb3          	sub	s7,s7,s9
   157f0:	00870593          	addi	a1,a4,8 # 1008 <uxTaskPriorityGetFromISR+0x30>
   157f4:	008b8b93          	addi	s7,s7,8
   157f8:	419585b3          	sub	a1,a1,s9
   157fc:	015b8ab3          	add	s5,s7,s5
   15800:	415585b3          	sub	a1,a1,s5
   15804:	fff70713          	addi	a4,a4,-1
   15808:	00e5fa33          	and	s4,a1,a4
   1580c:	000a0593          	mv	a1,s4
   15810:	00090513          	mv	a0,s2
   15814:	405010ef          	jal	ra,17418 <_sbrk_r>
   15818:	fff00793          	li	a5,-1
   1581c:	14f50863          	beq	a0,a5,1596c <_malloc_r+0x750>
   15820:	41750533          	sub	a0,a0,s7
   15824:	01450ab3          	add	s5,a0,s4
   15828:	000c2703          	lw	a4,0(s8)
   1582c:	0179a423          	sw	s7,8(s3)
   15830:	001ae793          	ori	a5,s5,1
   15834:	00ea05b3          	add	a1,s4,a4
   15838:	00bc2023          	sw	a1,0(s8)
   1583c:	00fba223          	sw	a5,4(s7)
   15840:	d13402e3          	beq	s0,s3,15544 <_malloc_r+0x328>
   15844:	00f00693          	li	a3,15
   15848:	0f66f063          	bgeu	a3,s6,15928 <_malloc_r+0x70c>
   1584c:	00442703          	lw	a4,4(s0)
   15850:	ff4b0793          	addi	a5,s6,-12
   15854:	ff87f793          	andi	a5,a5,-8
   15858:	00177713          	andi	a4,a4,1
   1585c:	00f76733          	or	a4,a4,a5
   15860:	00e42223          	sw	a4,4(s0)
   15864:	00500613          	li	a2,5
   15868:	00f40733          	add	a4,s0,a5
   1586c:	00c72223          	sw	a2,4(a4)
   15870:	00c72423          	sw	a2,8(a4)
   15874:	00f6e663          	bltu	a3,a5,15880 <_malloc_r+0x664>
   15878:	004ba783          	lw	a5,4(s7)
   1587c:	cc9ff06f          	j	15544 <_malloc_r+0x328>
   15880:	00840593          	addi	a1,s0,8
   15884:	00090513          	mv	a0,s2
   15888:	974fc0ef          	jal	ra,119fc <_free_r>
   1588c:	0089ab83          	lw	s7,8(s3)
   15890:	000c2583          	lw	a1,0(s8)
   15894:	004ba783          	lw	a5,4(s7)
   15898:	cadff06f          	j	15544 <_malloc_r+0x328>
   1589c:	010a8a93          	addi	s5,s5,16
   158a0:	c55ff06f          	j	154f4 <_malloc_r+0x2d8>
   158a4:	4026d693          	srai	a3,a3,0x2
   158a8:	00100793          	li	a5,1
   158ac:	00d797b3          	sll	a5,a5,a3
   158b0:	00f56533          	or	a0,a0,a5
   158b4:	00a9a223          	sw	a0,4(s3)
   158b8:	d55ff06f          	j	1560c <_malloc_r+0x3f0>
   158bc:	015b85b3          	add	a1,s7,s5
   158c0:	40b005b3          	neg	a1,a1
   158c4:	01459593          	slli	a1,a1,0x14
   158c8:	0145da13          	srli	s4,a1,0x14
   158cc:	000a0593          	mv	a1,s4
   158d0:	00090513          	mv	a0,s2
   158d4:	345010ef          	jal	ra,17418 <_sbrk_r>
   158d8:	fff00793          	li	a5,-1
   158dc:	f4f512e3          	bne	a0,a5,15820 <_malloc_r+0x604>
   158e0:	00000a13          	li	s4,0
   158e4:	f45ff06f          	j	15828 <_malloc_r+0x60c>
   158e8:	05400693          	li	a3,84
   158ec:	04e6e463          	bltu	a3,a4,15934 <_malloc_r+0x718>
   158f0:	00c7d713          	srli	a4,a5,0xc
   158f4:	06f70613          	addi	a2,a4,111
   158f8:	06e70693          	addi	a3,a4,110
   158fc:	00361613          	slli	a2,a2,0x3
   15900:	ce1ff06f          	j	155e0 <_malloc_r+0x3c4>
   15904:	15400713          	li	a4,340
   15908:	04f76463          	bltu	a4,a5,15950 <_malloc_r+0x734>
   1590c:	00f4d793          	srli	a5,s1,0xf
   15910:	07878593          	addi	a1,a5,120
   15914:	07778513          	addi	a0,a5,119
   15918:	00359693          	slli	a3,a1,0x3
   1591c:	a11ff06f          	j	1532c <_malloc_r+0x110>
   15920:	017ca023          	sw	s7,0(s9)
   15924:	ebdff06f          	j	157e0 <_malloc_r+0x5c4>
   15928:	00100793          	li	a5,1
   1592c:	00fba223          	sw	a5,4(s7)
   15930:	e11ff06f          	j	15740 <_malloc_r+0x524>
   15934:	15400693          	li	a3,340
   15938:	04e6e463          	bltu	a3,a4,15980 <_malloc_r+0x764>
   1593c:	00f7d713          	srli	a4,a5,0xf
   15940:	07870613          	addi	a2,a4,120
   15944:	07770693          	addi	a3,a4,119
   15948:	00361613          	slli	a2,a2,0x3
   1594c:	c95ff06f          	j	155e0 <_malloc_r+0x3c4>
   15950:	55400713          	li	a4,1364
   15954:	04f76463          	bltu	a4,a5,1599c <_malloc_r+0x780>
   15958:	0124d793          	srli	a5,s1,0x12
   1595c:	07d78593          	addi	a1,a5,125
   15960:	07c78513          	addi	a0,a5,124
   15964:	00359693          	slli	a3,a1,0x3
   15968:	9c5ff06f          	j	1532c <_malloc_r+0x110>
   1596c:	ff8c8c93          	addi	s9,s9,-8
   15970:	019a8ab3          	add	s5,s5,s9
   15974:	417a8ab3          	sub	s5,s5,s7
   15978:	00000a13          	li	s4,0
   1597c:	eadff06f          	j	15828 <_malloc_r+0x60c>
   15980:	55400693          	li	a3,1364
   15984:	02e6e463          	bltu	a3,a4,159ac <_malloc_r+0x790>
   15988:	0127d713          	srli	a4,a5,0x12
   1598c:	07d70613          	addi	a2,a4,125
   15990:	07c70693          	addi	a3,a4,124
   15994:	00361613          	slli	a2,a2,0x3
   15998:	c49ff06f          	j	155e0 <_malloc_r+0x3c4>
   1599c:	3f800693          	li	a3,1016
   159a0:	07f00593          	li	a1,127
   159a4:	07e00513          	li	a0,126
   159a8:	985ff06f          	j	1532c <_malloc_r+0x110>
   159ac:	3f800613          	li	a2,1016
   159b0:	07e00693          	li	a3,126
   159b4:	c2dff06f          	j	155e0 <_malloc_r+0x3c4>
   159b8:	0049a783          	lw	a5,4(s3)
   159bc:	dcdff06f          	j	15788 <_malloc_r+0x56c>

000159c0 <memchr>:
   159c0:	00357793          	andi	a5,a0,3
   159c4:	0ff5f693          	zext.b	a3,a1
   159c8:	02078e63          	beqz	a5,15a04 <memchr+0x44>
   159cc:	fff60793          	addi	a5,a2,-1
   159d0:	02060663          	beqz	a2,159fc <memchr+0x3c>
   159d4:	fff00613          	li	a2,-1
   159d8:	0180006f          	j	159f0 <memchr+0x30>
   159dc:	00150513          	addi	a0,a0,1
   159e0:	00357713          	andi	a4,a0,3
   159e4:	02070263          	beqz	a4,15a08 <memchr+0x48>
   159e8:	fff78793          	addi	a5,a5,-1
   159ec:	00c78863          	beq	a5,a2,159fc <memchr+0x3c>
   159f0:	00054703          	lbu	a4,0(a0)
   159f4:	fed714e3          	bne	a4,a3,159dc <memchr+0x1c>
   159f8:	00008067          	ret
   159fc:	00000513          	li	a0,0
   15a00:	00008067          	ret
   15a04:	00060793          	mv	a5,a2
   15a08:	00300713          	li	a4,3
   15a0c:	04f77c63          	bgeu	a4,a5,15a64 <memchr+0xa4>
   15a10:	0ff5f593          	zext.b	a1,a1
   15a14:	00859713          	slli	a4,a1,0x8
   15a18:	00b705b3          	add	a1,a4,a1
   15a1c:	01059713          	slli	a4,a1,0x10
   15a20:	feff08b7          	lui	a7,0xfeff0
   15a24:	80808837          	lui	a6,0x80808
   15a28:	00e585b3          	add	a1,a1,a4
   15a2c:	eff88893          	addi	a7,a7,-257 # fefefeff <__alt_data_end+0xfefafeff>
   15a30:	08080813          	addi	a6,a6,128 # 80808080 <__alt_data_end+0x807c8080>
   15a34:	00300313          	li	t1,3
   15a38:	0100006f          	j	15a48 <memchr+0x88>
   15a3c:	ffc78793          	addi	a5,a5,-4
   15a40:	00450513          	addi	a0,a0,4
   15a44:	02f37063          	bgeu	t1,a5,15a64 <memchr+0xa4>
   15a48:	00052703          	lw	a4,0(a0)
   15a4c:	00e5c733          	xor	a4,a1,a4
   15a50:	01170633          	add	a2,a4,a7
   15a54:	fff74713          	not	a4,a4
   15a58:	00e67733          	and	a4,a2,a4
   15a5c:	01077733          	and	a4,a4,a6
   15a60:	fc070ee3          	beqz	a4,15a3c <memchr+0x7c>
   15a64:	00f50733          	add	a4,a0,a5
   15a68:	00079863          	bnez	a5,15a78 <memchr+0xb8>
   15a6c:	f91ff06f          	j	159fc <memchr+0x3c>
   15a70:	00150513          	addi	a0,a0,1
   15a74:	f8a704e3          	beq	a4,a0,159fc <memchr+0x3c>
   15a78:	00054783          	lbu	a5,0(a0)
   15a7c:	fed79ae3          	bne	a5,a3,15a70 <memchr+0xb0>
   15a80:	00008067          	ret

00015a84 <memmove>:
   15a84:	02a5f663          	bgeu	a1,a0,15ab0 <memmove+0x2c>
   15a88:	00c58733          	add	a4,a1,a2
   15a8c:	02e57263          	bgeu	a0,a4,15ab0 <memmove+0x2c>
   15a90:	00c507b3          	add	a5,a0,a2
   15a94:	04060663          	beqz	a2,15ae0 <memmove+0x5c>
   15a98:	fff74683          	lbu	a3,-1(a4)
   15a9c:	fff78793          	addi	a5,a5,-1
   15aa0:	fff70713          	addi	a4,a4,-1
   15aa4:	00d78023          	sb	a3,0(a5)
   15aa8:	fef518e3          	bne	a0,a5,15a98 <memmove+0x14>
   15aac:	00008067          	ret
   15ab0:	00f00793          	li	a5,15
   15ab4:	02c7e863          	bltu	a5,a2,15ae4 <memmove+0x60>
   15ab8:	00050793          	mv	a5,a0
   15abc:	fff60693          	addi	a3,a2,-1
   15ac0:	0c060a63          	beqz	a2,15b94 <memmove+0x110>
   15ac4:	00168693          	addi	a3,a3,1
   15ac8:	00d786b3          	add	a3,a5,a3
   15acc:	0005c703          	lbu	a4,0(a1)
   15ad0:	00178793          	addi	a5,a5,1
   15ad4:	00158593          	addi	a1,a1,1
   15ad8:	fee78fa3          	sb	a4,-1(a5)
   15adc:	fed798e3          	bne	a5,a3,15acc <memmove+0x48>
   15ae0:	00008067          	ret
   15ae4:	00b567b3          	or	a5,a0,a1
   15ae8:	0037f793          	andi	a5,a5,3
   15aec:	08079e63          	bnez	a5,15b88 <memmove+0x104>
   15af0:	ff060893          	addi	a7,a2,-16
   15af4:	ff08f893          	andi	a7,a7,-16
   15af8:	01088893          	addi	a7,a7,16
   15afc:	011507b3          	add	a5,a0,a7
   15b00:	00058693          	mv	a3,a1
   15b04:	00050713          	mv	a4,a0
   15b08:	0006a803          	lw	a6,0(a3)
   15b0c:	01068693          	addi	a3,a3,16
   15b10:	01070713          	addi	a4,a4,16
   15b14:	ff072823          	sw	a6,-16(a4)
   15b18:	ff46a803          	lw	a6,-12(a3)
   15b1c:	ff072a23          	sw	a6,-12(a4)
   15b20:	ff86a803          	lw	a6,-8(a3)
   15b24:	ff072c23          	sw	a6,-8(a4)
   15b28:	ffc6a803          	lw	a6,-4(a3)
   15b2c:	ff072e23          	sw	a6,-4(a4)
   15b30:	fcf71ce3          	bne	a4,a5,15b08 <memmove+0x84>
   15b34:	00c67713          	andi	a4,a2,12
   15b38:	011585b3          	add	a1,a1,a7
   15b3c:	00f67813          	andi	a6,a2,15
   15b40:	04070c63          	beqz	a4,15b98 <memmove+0x114>
   15b44:	00058693          	mv	a3,a1
   15b48:	00078713          	mv	a4,a5
   15b4c:	01078eb3          	add	t4,a5,a6
   15b50:	00300e13          	li	t3,3
   15b54:	0006a303          	lw	t1,0(a3)
   15b58:	00470713          	addi	a4,a4,4
   15b5c:	40ee88b3          	sub	a7,t4,a4
   15b60:	fe672e23          	sw	t1,-4(a4)
   15b64:	00468693          	addi	a3,a3,4
   15b68:	ff1e66e3          	bltu	t3,a7,15b54 <memmove+0xd0>
   15b6c:	ffc80713          	addi	a4,a6,-4
   15b70:	ffc77713          	andi	a4,a4,-4
   15b74:	00470713          	addi	a4,a4,4
   15b78:	00367613          	andi	a2,a2,3
   15b7c:	00e787b3          	add	a5,a5,a4
   15b80:	00e585b3          	add	a1,a1,a4
   15b84:	f39ff06f          	j	15abc <memmove+0x38>
   15b88:	fff60693          	addi	a3,a2,-1
   15b8c:	00050793          	mv	a5,a0
   15b90:	f35ff06f          	j	15ac4 <memmove+0x40>
   15b94:	00008067          	ret
   15b98:	00080613          	mv	a2,a6
   15b9c:	f21ff06f          	j	15abc <memmove+0x38>

00015ba0 <_Balloc>:
   15ba0:	04c52783          	lw	a5,76(a0)
   15ba4:	ff010113          	addi	sp,sp,-16
   15ba8:	00812423          	sw	s0,8(sp)
   15bac:	00912223          	sw	s1,4(sp)
   15bb0:	00112623          	sw	ra,12(sp)
   15bb4:	01212023          	sw	s2,0(sp)
   15bb8:	00050413          	mv	s0,a0
   15bbc:	00058493          	mv	s1,a1
   15bc0:	02078e63          	beqz	a5,15bfc <_Balloc+0x5c>
   15bc4:	00249713          	slli	a4,s1,0x2
   15bc8:	00e787b3          	add	a5,a5,a4
   15bcc:	0007a503          	lw	a0,0(a5)
   15bd0:	04050663          	beqz	a0,15c1c <_Balloc+0x7c>
   15bd4:	00052703          	lw	a4,0(a0)
   15bd8:	00e7a023          	sw	a4,0(a5)
   15bdc:	00052823          	sw	zero,16(a0)
   15be0:	00052623          	sw	zero,12(a0)
   15be4:	00c12083          	lw	ra,12(sp)
   15be8:	00812403          	lw	s0,8(sp)
   15bec:	00412483          	lw	s1,4(sp)
   15bf0:	00012903          	lw	s2,0(sp)
   15bf4:	01010113          	addi	sp,sp,16
   15bf8:	00008067          	ret
   15bfc:	02100613          	li	a2,33
   15c00:	00400593          	li	a1,4
   15c04:	28c060ef          	jal	ra,1be90 <_calloc_r>
   15c08:	04a42623          	sw	a0,76(s0)
   15c0c:	00050793          	mv	a5,a0
   15c10:	fa051ae3          	bnez	a0,15bc4 <_Balloc+0x24>
   15c14:	00000513          	li	a0,0
   15c18:	fcdff06f          	j	15be4 <_Balloc+0x44>
   15c1c:	00100913          	li	s2,1
   15c20:	00991933          	sll	s2,s2,s1
   15c24:	00590613          	addi	a2,s2,5
   15c28:	00261613          	slli	a2,a2,0x2
   15c2c:	00100593          	li	a1,1
   15c30:	00040513          	mv	a0,s0
   15c34:	25c060ef          	jal	ra,1be90 <_calloc_r>
   15c38:	fc050ee3          	beqz	a0,15c14 <_Balloc+0x74>
   15c3c:	00952223          	sw	s1,4(a0)
   15c40:	01252423          	sw	s2,8(a0)
   15c44:	f99ff06f          	j	15bdc <_Balloc+0x3c>

00015c48 <_Bfree>:
   15c48:	02058063          	beqz	a1,15c68 <_Bfree+0x20>
   15c4c:	0045a703          	lw	a4,4(a1)
   15c50:	04c52783          	lw	a5,76(a0)
   15c54:	00271713          	slli	a4,a4,0x2
   15c58:	00e787b3          	add	a5,a5,a4
   15c5c:	0007a703          	lw	a4,0(a5)
   15c60:	00e5a023          	sw	a4,0(a1)
   15c64:	00b7a023          	sw	a1,0(a5)
   15c68:	00008067          	ret

00015c6c <__multadd>:
   15c6c:	fe010113          	addi	sp,sp,-32
   15c70:	00912a23          	sw	s1,20(sp)
   15c74:	0105a483          	lw	s1,16(a1)
   15c78:	00010337          	lui	t1,0x10
   15c7c:	00812c23          	sw	s0,24(sp)
   15c80:	01212823          	sw	s2,16(sp)
   15c84:	01312623          	sw	s3,12(sp)
   15c88:	00112e23          	sw	ra,28(sp)
   15c8c:	01412423          	sw	s4,8(sp)
   15c90:	00058913          	mv	s2,a1
   15c94:	00050993          	mv	s3,a0
   15c98:	00068413          	mv	s0,a3
   15c9c:	01458813          	addi	a6,a1,20
   15ca0:	00000893          	li	a7,0
   15ca4:	fff30313          	addi	t1,t1,-1 # ffff <_vfprintf_r+0x21a3>
   15ca8:	00082783          	lw	a5,0(a6)
   15cac:	00480813          	addi	a6,a6,4
   15cb0:	00188893          	addi	a7,a7,1
   15cb4:	0067f733          	and	a4,a5,t1
   15cb8:	02c70733          	mul	a4,a4,a2
   15cbc:	0107d693          	srli	a3,a5,0x10
   15cc0:	02c686b3          	mul	a3,a3,a2
   15cc4:	008707b3          	add	a5,a4,s0
   15cc8:	0107d713          	srli	a4,a5,0x10
   15ccc:	0067f7b3          	and	a5,a5,t1
   15cd0:	00e686b3          	add	a3,a3,a4
   15cd4:	01069713          	slli	a4,a3,0x10
   15cd8:	00f707b3          	add	a5,a4,a5
   15cdc:	fef82e23          	sw	a5,-4(a6)
   15ce0:	0106d413          	srli	s0,a3,0x10
   15ce4:	fc98c2e3          	blt	a7,s1,15ca8 <__multadd+0x3c>
   15ce8:	02040263          	beqz	s0,15d0c <__multadd+0xa0>
   15cec:	00892783          	lw	a5,8(s2)
   15cf0:	04f4d063          	bge	s1,a5,15d30 <__multadd+0xc4>
   15cf4:	00448793          	addi	a5,s1,4
   15cf8:	00279793          	slli	a5,a5,0x2
   15cfc:	00f907b3          	add	a5,s2,a5
   15d00:	0087a223          	sw	s0,4(a5)
   15d04:	00148493          	addi	s1,s1,1
   15d08:	00992823          	sw	s1,16(s2)
   15d0c:	01c12083          	lw	ra,28(sp)
   15d10:	01812403          	lw	s0,24(sp)
   15d14:	01412483          	lw	s1,20(sp)
   15d18:	00c12983          	lw	s3,12(sp)
   15d1c:	00812a03          	lw	s4,8(sp)
   15d20:	00090513          	mv	a0,s2
   15d24:	01012903          	lw	s2,16(sp)
   15d28:	02010113          	addi	sp,sp,32
   15d2c:	00008067          	ret
   15d30:	00492583          	lw	a1,4(s2)
   15d34:	00098513          	mv	a0,s3
   15d38:	00158593          	addi	a1,a1,1
   15d3c:	e65ff0ef          	jal	ra,15ba0 <_Balloc>
   15d40:	00050a13          	mv	s4,a0
   15d44:	04050c63          	beqz	a0,15d9c <__multadd+0x130>
   15d48:	01092603          	lw	a2,16(s2)
   15d4c:	00c90593          	addi	a1,s2,12
   15d50:	00c50513          	addi	a0,a0,12
   15d54:	00260613          	addi	a2,a2,2
   15d58:	00261613          	slli	a2,a2,0x2
   15d5c:	941f70ef          	jal	ra,d69c <memcpy>
   15d60:	00492703          	lw	a4,4(s2)
   15d64:	04c9a783          	lw	a5,76(s3)
   15d68:	00271713          	slli	a4,a4,0x2
   15d6c:	00e787b3          	add	a5,a5,a4
   15d70:	0007a703          	lw	a4,0(a5)
   15d74:	00e92023          	sw	a4,0(s2)
   15d78:	0127a023          	sw	s2,0(a5)
   15d7c:	00448793          	addi	a5,s1,4
   15d80:	000a0913          	mv	s2,s4
   15d84:	00279793          	slli	a5,a5,0x2
   15d88:	00f907b3          	add	a5,s2,a5
   15d8c:	0087a223          	sw	s0,4(a5)
   15d90:	00148493          	addi	s1,s1,1
   15d94:	00992823          	sw	s1,16(s2)
   15d98:	f75ff06f          	j	15d0c <__multadd+0xa0>
   15d9c:	0000e697          	auipc	a3,0xe
   15da0:	ab468693          	addi	a3,a3,-1356 # 23850 <zeroes.0+0x68>
   15da4:	00000613          	li	a2,0
   15da8:	0b500593          	li	a1,181
   15dac:	0000e517          	auipc	a0,0xe
   15db0:	d4850513          	addi	a0,a0,-696 # 23af4 <bmask+0x24>
   15db4:	070060ef          	jal	ra,1be24 <__assert_func>

00015db8 <__s2b>:
   15db8:	fe010113          	addi	sp,sp,-32
   15dbc:	00812c23          	sw	s0,24(sp)
   15dc0:	00912a23          	sw	s1,20(sp)
   15dc4:	01212823          	sw	s2,16(sp)
   15dc8:	01312623          	sw	s3,12(sp)
   15dcc:	01412423          	sw	s4,8(sp)
   15dd0:	00068993          	mv	s3,a3
   15dd4:	00900793          	li	a5,9
   15dd8:	00868693          	addi	a3,a3,8
   15ddc:	00112e23          	sw	ra,28(sp)
   15de0:	01512223          	sw	s5,4(sp)
   15de4:	02f6c6b3          	div	a3,a3,a5
   15de8:	00050913          	mv	s2,a0
   15dec:	00058413          	mv	s0,a1
   15df0:	00060a13          	mv	s4,a2
   15df4:	00070493          	mv	s1,a4
   15df8:	0d37d863          	bge	a5,s3,15ec8 <__s2b+0x110>
   15dfc:	00100793          	li	a5,1
   15e00:	00000593          	li	a1,0
   15e04:	00179793          	slli	a5,a5,0x1
   15e08:	00158593          	addi	a1,a1,1
   15e0c:	fed7cce3          	blt	a5,a3,15e04 <__s2b+0x4c>
   15e10:	00090513          	mv	a0,s2
   15e14:	d8dff0ef          	jal	ra,15ba0 <_Balloc>
   15e18:	00050593          	mv	a1,a0
   15e1c:	0a050a63          	beqz	a0,15ed0 <__s2b+0x118>
   15e20:	00100793          	li	a5,1
   15e24:	00f52823          	sw	a5,16(a0)
   15e28:	00952a23          	sw	s1,20(a0)
   15e2c:	00900793          	li	a5,9
   15e30:	0947d663          	bge	a5,s4,15ebc <__s2b+0x104>
   15e34:	00940a93          	addi	s5,s0,9
   15e38:	000a8493          	mv	s1,s5
   15e3c:	01440433          	add	s0,s0,s4
   15e40:	0004c683          	lbu	a3,0(s1)
   15e44:	00a00613          	li	a2,10
   15e48:	00090513          	mv	a0,s2
   15e4c:	fd068693          	addi	a3,a3,-48
   15e50:	e1dff0ef          	jal	ra,15c6c <__multadd>
   15e54:	00148493          	addi	s1,s1,1
   15e58:	00050593          	mv	a1,a0
   15e5c:	fe8492e3          	bne	s1,s0,15e40 <__s2b+0x88>
   15e60:	ff8a0413          	addi	s0,s4,-8
   15e64:	008a8433          	add	s0,s5,s0
   15e68:	033a5663          	bge	s4,s3,15e94 <__s2b+0xdc>
   15e6c:	414989b3          	sub	s3,s3,s4
   15e70:	013409b3          	add	s3,s0,s3
   15e74:	00044683          	lbu	a3,0(s0)
   15e78:	00a00613          	li	a2,10
   15e7c:	00090513          	mv	a0,s2
   15e80:	fd068693          	addi	a3,a3,-48
   15e84:	de9ff0ef          	jal	ra,15c6c <__multadd>
   15e88:	00140413          	addi	s0,s0,1
   15e8c:	00050593          	mv	a1,a0
   15e90:	fe8992e3          	bne	s3,s0,15e74 <__s2b+0xbc>
   15e94:	01c12083          	lw	ra,28(sp)
   15e98:	01812403          	lw	s0,24(sp)
   15e9c:	01412483          	lw	s1,20(sp)
   15ea0:	01012903          	lw	s2,16(sp)
   15ea4:	00c12983          	lw	s3,12(sp)
   15ea8:	00812a03          	lw	s4,8(sp)
   15eac:	00412a83          	lw	s5,4(sp)
   15eb0:	00058513          	mv	a0,a1
   15eb4:	02010113          	addi	sp,sp,32
   15eb8:	00008067          	ret
   15ebc:	00a40413          	addi	s0,s0,10
   15ec0:	00900a13          	li	s4,9
   15ec4:	fa5ff06f          	j	15e68 <__s2b+0xb0>
   15ec8:	00000593          	li	a1,0
   15ecc:	f45ff06f          	j	15e10 <__s2b+0x58>
   15ed0:	0000e697          	auipc	a3,0xe
   15ed4:	98068693          	addi	a3,a3,-1664 # 23850 <zeroes.0+0x68>
   15ed8:	00000613          	li	a2,0
   15edc:	0ce00593          	li	a1,206
   15ee0:	0000e517          	auipc	a0,0xe
   15ee4:	c1450513          	addi	a0,a0,-1004 # 23af4 <bmask+0x24>
   15ee8:	73d050ef          	jal	ra,1be24 <__assert_func>

00015eec <__hi0bits>:
   15eec:	00050793          	mv	a5,a0
   15ef0:	00010737          	lui	a4,0x10
   15ef4:	00000513          	li	a0,0
   15ef8:	00e7f663          	bgeu	a5,a4,15f04 <__hi0bits+0x18>
   15efc:	01079793          	slli	a5,a5,0x10
   15f00:	01000513          	li	a0,16
   15f04:	01000737          	lui	a4,0x1000
   15f08:	00e7f663          	bgeu	a5,a4,15f14 <__hi0bits+0x28>
   15f0c:	00850513          	addi	a0,a0,8
   15f10:	00879793          	slli	a5,a5,0x8
   15f14:	10000737          	lui	a4,0x10000
   15f18:	00e7f663          	bgeu	a5,a4,15f24 <__hi0bits+0x38>
   15f1c:	00450513          	addi	a0,a0,4
   15f20:	00479793          	slli	a5,a5,0x4
   15f24:	40000737          	lui	a4,0x40000
   15f28:	00e7ea63          	bltu	a5,a4,15f3c <__hi0bits+0x50>
   15f2c:	fff7c793          	not	a5,a5
   15f30:	01f7d793          	srli	a5,a5,0x1f
   15f34:	00f50533          	add	a0,a0,a5
   15f38:	00008067          	ret
   15f3c:	00279793          	slli	a5,a5,0x2
   15f40:	0007ca63          	bltz	a5,15f54 <__hi0bits+0x68>
   15f44:	00e7f7b3          	and	a5,a5,a4
   15f48:	00079a63          	bnez	a5,15f5c <__hi0bits+0x70>
   15f4c:	02000513          	li	a0,32
   15f50:	00008067          	ret
   15f54:	00250513          	addi	a0,a0,2
   15f58:	00008067          	ret
   15f5c:	00350513          	addi	a0,a0,3
   15f60:	00008067          	ret

00015f64 <__lo0bits>:
   15f64:	00052783          	lw	a5,0(a0)
   15f68:	00050713          	mv	a4,a0
   15f6c:	0077f693          	andi	a3,a5,7
   15f70:	02068463          	beqz	a3,15f98 <__lo0bits+0x34>
   15f74:	0017f693          	andi	a3,a5,1
   15f78:	00000513          	li	a0,0
   15f7c:	04069e63          	bnez	a3,15fd8 <__lo0bits+0x74>
   15f80:	0027f693          	andi	a3,a5,2
   15f84:	0a068863          	beqz	a3,16034 <__lo0bits+0xd0>
   15f88:	0017d793          	srli	a5,a5,0x1
   15f8c:	00f72023          	sw	a5,0(a4) # 40000000 <__alt_data_end+0x3ffc0000>
   15f90:	00100513          	li	a0,1
   15f94:	00008067          	ret
   15f98:	01079693          	slli	a3,a5,0x10
   15f9c:	0106d693          	srli	a3,a3,0x10
   15fa0:	00000513          	li	a0,0
   15fa4:	06068e63          	beqz	a3,16020 <__lo0bits+0xbc>
   15fa8:	0ff7f693          	zext.b	a3,a5
   15fac:	06068063          	beqz	a3,1600c <__lo0bits+0xa8>
   15fb0:	00f7f693          	andi	a3,a5,15
   15fb4:	04068263          	beqz	a3,15ff8 <__lo0bits+0x94>
   15fb8:	0037f693          	andi	a3,a5,3
   15fbc:	02068463          	beqz	a3,15fe4 <__lo0bits+0x80>
   15fc0:	0017f693          	andi	a3,a5,1
   15fc4:	00069c63          	bnez	a3,15fdc <__lo0bits+0x78>
   15fc8:	0017d793          	srli	a5,a5,0x1
   15fcc:	00150513          	addi	a0,a0,1
   15fd0:	00079663          	bnez	a5,15fdc <__lo0bits+0x78>
   15fd4:	02000513          	li	a0,32
   15fd8:	00008067          	ret
   15fdc:	00f72023          	sw	a5,0(a4)
   15fe0:	00008067          	ret
   15fe4:	0027d793          	srli	a5,a5,0x2
   15fe8:	0017f693          	andi	a3,a5,1
   15fec:	00250513          	addi	a0,a0,2
   15ff0:	fe0696e3          	bnez	a3,15fdc <__lo0bits+0x78>
   15ff4:	fd5ff06f          	j	15fc8 <__lo0bits+0x64>
   15ff8:	0047d793          	srli	a5,a5,0x4
   15ffc:	0037f693          	andi	a3,a5,3
   16000:	00450513          	addi	a0,a0,4
   16004:	fa069ee3          	bnez	a3,15fc0 <__lo0bits+0x5c>
   16008:	fddff06f          	j	15fe4 <__lo0bits+0x80>
   1600c:	0087d793          	srli	a5,a5,0x8
   16010:	00f7f693          	andi	a3,a5,15
   16014:	00850513          	addi	a0,a0,8
   16018:	fa0690e3          	bnez	a3,15fb8 <__lo0bits+0x54>
   1601c:	fddff06f          	j	15ff8 <__lo0bits+0x94>
   16020:	0107d793          	srli	a5,a5,0x10
   16024:	0ff7f693          	zext.b	a3,a5
   16028:	01000513          	li	a0,16
   1602c:	f80692e3          	bnez	a3,15fb0 <__lo0bits+0x4c>
   16030:	fddff06f          	j	1600c <__lo0bits+0xa8>
   16034:	0027d793          	srli	a5,a5,0x2
   16038:	00f72023          	sw	a5,0(a4)
   1603c:	00200513          	li	a0,2
   16040:	00008067          	ret

00016044 <__i2b>:
   16044:	04c52783          	lw	a5,76(a0)
   16048:	ff010113          	addi	sp,sp,-16
   1604c:	00812423          	sw	s0,8(sp)
   16050:	00912223          	sw	s1,4(sp)
   16054:	00112623          	sw	ra,12(sp)
   16058:	00050413          	mv	s0,a0
   1605c:	00058493          	mv	s1,a1
   16060:	02078c63          	beqz	a5,16098 <__i2b+0x54>
   16064:	0047a503          	lw	a0,4(a5)
   16068:	06050263          	beqz	a0,160cc <__i2b+0x88>
   1606c:	00052703          	lw	a4,0(a0)
   16070:	00e7a223          	sw	a4,4(a5)
   16074:	00c12083          	lw	ra,12(sp)
   16078:	00812403          	lw	s0,8(sp)
   1607c:	00100793          	li	a5,1
   16080:	00952a23          	sw	s1,20(a0)
   16084:	00052623          	sw	zero,12(a0)
   16088:	00f52823          	sw	a5,16(a0)
   1608c:	00412483          	lw	s1,4(sp)
   16090:	01010113          	addi	sp,sp,16
   16094:	00008067          	ret
   16098:	02100613          	li	a2,33
   1609c:	00400593          	li	a1,4
   160a0:	5f1050ef          	jal	ra,1be90 <_calloc_r>
   160a4:	04a42623          	sw	a0,76(s0)
   160a8:	00050793          	mv	a5,a0
   160ac:	fa051ce3          	bnez	a0,16064 <__i2b+0x20>
   160b0:	0000d697          	auipc	a3,0xd
   160b4:	7a068693          	addi	a3,a3,1952 # 23850 <zeroes.0+0x68>
   160b8:	00000613          	li	a2,0
   160bc:	14000593          	li	a1,320
   160c0:	0000e517          	auipc	a0,0xe
   160c4:	a3450513          	addi	a0,a0,-1484 # 23af4 <bmask+0x24>
   160c8:	55d050ef          	jal	ra,1be24 <__assert_func>
   160cc:	01c00613          	li	a2,28
   160d0:	00100593          	li	a1,1
   160d4:	00040513          	mv	a0,s0
   160d8:	5b9050ef          	jal	ra,1be90 <_calloc_r>
   160dc:	fc050ae3          	beqz	a0,160b0 <__i2b+0x6c>
   160e0:	00100793          	li	a5,1
   160e4:	00f52223          	sw	a5,4(a0)
   160e8:	00200793          	li	a5,2
   160ec:	00f52423          	sw	a5,8(a0)
   160f0:	f85ff06f          	j	16074 <__i2b+0x30>

000160f4 <__multiply>:
   160f4:	fe010113          	addi	sp,sp,-32
   160f8:	01212823          	sw	s2,16(sp)
   160fc:	01312623          	sw	s3,12(sp)
   16100:	0105a903          	lw	s2,16(a1)
   16104:	01062983          	lw	s3,16(a2)
   16108:	00912a23          	sw	s1,20(sp)
   1610c:	01412423          	sw	s4,8(sp)
   16110:	00112e23          	sw	ra,28(sp)
   16114:	00812c23          	sw	s0,24(sp)
   16118:	00058a13          	mv	s4,a1
   1611c:	00060493          	mv	s1,a2
   16120:	01394c63          	blt	s2,s3,16138 <__multiply+0x44>
   16124:	00098713          	mv	a4,s3
   16128:	00058493          	mv	s1,a1
   1612c:	00090993          	mv	s3,s2
   16130:	00060a13          	mv	s4,a2
   16134:	00070913          	mv	s2,a4
   16138:	0084a783          	lw	a5,8(s1)
   1613c:	0044a583          	lw	a1,4(s1)
   16140:	01298433          	add	s0,s3,s2
   16144:	0087a7b3          	slt	a5,a5,s0
   16148:	00f585b3          	add	a1,a1,a5
   1614c:	a55ff0ef          	jal	ra,15ba0 <_Balloc>
   16150:	1a050e63          	beqz	a0,1630c <__multiply+0x218>
   16154:	01450313          	addi	t1,a0,20
   16158:	00241893          	slli	a7,s0,0x2
   1615c:	011308b3          	add	a7,t1,a7
   16160:	00030793          	mv	a5,t1
   16164:	01137863          	bgeu	t1,a7,16174 <__multiply+0x80>
   16168:	0007a023          	sw	zero,0(a5)
   1616c:	00478793          	addi	a5,a5,4
   16170:	ff17ece3          	bltu	a5,a7,16168 <__multiply+0x74>
   16174:	014a0813          	addi	a6,s4,20
   16178:	00291e13          	slli	t3,s2,0x2
   1617c:	01448e93          	addi	t4,s1,20
   16180:	00299593          	slli	a1,s3,0x2
   16184:	01c80e33          	add	t3,a6,t3
   16188:	00be85b3          	add	a1,t4,a1
   1618c:	13c87663          	bgeu	a6,t3,162b8 <__multiply+0x1c4>
   16190:	01548793          	addi	a5,s1,21
   16194:	00400f13          	li	t5,4
   16198:	16f5f063          	bgeu	a1,a5,162f8 <__multiply+0x204>
   1619c:	000106b7          	lui	a3,0x10
   161a0:	fff68693          	addi	a3,a3,-1 # ffff <_vfprintf_r+0x21a3>
   161a4:	0180006f          	j	161bc <__multiply+0xc8>
   161a8:	010fdf93          	srli	t6,t6,0x10
   161ac:	080f9863          	bnez	t6,1623c <__multiply+0x148>
   161b0:	00480813          	addi	a6,a6,4
   161b4:	00430313          	addi	t1,t1,4
   161b8:	11c87063          	bgeu	a6,t3,162b8 <__multiply+0x1c4>
   161bc:	00082f83          	lw	t6,0(a6)
   161c0:	00dff3b3          	and	t2,t6,a3
   161c4:	fe0382e3          	beqz	t2,161a8 <__multiply+0xb4>
   161c8:	00030293          	mv	t0,t1
   161cc:	000e8f93          	mv	t6,t4
   161d0:	00000493          	li	s1,0
   161d4:	000fa783          	lw	a5,0(t6)
   161d8:	0002a603          	lw	a2,0(t0) # d8f4 <memset+0xb4>
   161dc:	00428293          	addi	t0,t0,4
   161e0:	00d7f733          	and	a4,a5,a3
   161e4:	02770733          	mul	a4,a4,t2
   161e8:	0107d793          	srli	a5,a5,0x10
   161ec:	00d67933          	and	s2,a2,a3
   161f0:	01065613          	srli	a2,a2,0x10
   161f4:	004f8f93          	addi	t6,t6,4
   161f8:	027787b3          	mul	a5,a5,t2
   161fc:	01270733          	add	a4,a4,s2
   16200:	00970733          	add	a4,a4,s1
   16204:	01075493          	srli	s1,a4,0x10
   16208:	00d77733          	and	a4,a4,a3
   1620c:	00c787b3          	add	a5,a5,a2
   16210:	009787b3          	add	a5,a5,s1
   16214:	01079613          	slli	a2,a5,0x10
   16218:	00e66733          	or	a4,a2,a4
   1621c:	fee2ae23          	sw	a4,-4(t0)
   16220:	0107d493          	srli	s1,a5,0x10
   16224:	fabfe8e3          	bltu	t6,a1,161d4 <__multiply+0xe0>
   16228:	01e307b3          	add	a5,t1,t5
   1622c:	0097a023          	sw	s1,0(a5)
   16230:	00082f83          	lw	t6,0(a6)
   16234:	010fdf93          	srli	t6,t6,0x10
   16238:	f60f8ce3          	beqz	t6,161b0 <__multiply+0xbc>
   1623c:	00032703          	lw	a4,0(t1)
   16240:	00030293          	mv	t0,t1
   16244:	000e8613          	mv	a2,t4
   16248:	00070493          	mv	s1,a4
   1624c:	00000393          	li	t2,0
   16250:	00062783          	lw	a5,0(a2)
   16254:	0104d993          	srli	s3,s1,0x10
   16258:	00d77733          	and	a4,a4,a3
   1625c:	00d7f7b3          	and	a5,a5,a3
   16260:	03f787b3          	mul	a5,a5,t6
   16264:	0042a483          	lw	s1,4(t0)
   16268:	00428293          	addi	t0,t0,4
   1626c:	00460613          	addi	a2,a2,4
   16270:	00d4f933          	and	s2,s1,a3
   16274:	007787b3          	add	a5,a5,t2
   16278:	013787b3          	add	a5,a5,s3
   1627c:	01079393          	slli	t2,a5,0x10
   16280:	00e3e733          	or	a4,t2,a4
   16284:	fee2ae23          	sw	a4,-4(t0)
   16288:	ffe65703          	lhu	a4,-2(a2)
   1628c:	0107d793          	srli	a5,a5,0x10
   16290:	03f70733          	mul	a4,a4,t6
   16294:	01270733          	add	a4,a4,s2
   16298:	00f70733          	add	a4,a4,a5
   1629c:	01075393          	srli	t2,a4,0x10
   162a0:	fab668e3          	bltu	a2,a1,16250 <__multiply+0x15c>
   162a4:	01e307b3          	add	a5,t1,t5
   162a8:	00e7a023          	sw	a4,0(a5)
   162ac:	00480813          	addi	a6,a6,4
   162b0:	00430313          	addi	t1,t1,4
   162b4:	f1c864e3          	bltu	a6,t3,161bc <__multiply+0xc8>
   162b8:	00804863          	bgtz	s0,162c8 <__multiply+0x1d4>
   162bc:	0180006f          	j	162d4 <__multiply+0x1e0>
   162c0:	fff40413          	addi	s0,s0,-1
   162c4:	00040863          	beqz	s0,162d4 <__multiply+0x1e0>
   162c8:	ffc8a783          	lw	a5,-4(a7)
   162cc:	ffc88893          	addi	a7,a7,-4
   162d0:	fe0788e3          	beqz	a5,162c0 <__multiply+0x1cc>
   162d4:	01c12083          	lw	ra,28(sp)
   162d8:	00852823          	sw	s0,16(a0)
   162dc:	01812403          	lw	s0,24(sp)
   162e0:	01412483          	lw	s1,20(sp)
   162e4:	01012903          	lw	s2,16(sp)
   162e8:	00c12983          	lw	s3,12(sp)
   162ec:	00812a03          	lw	s4,8(sp)
   162f0:	02010113          	addi	sp,sp,32
   162f4:	00008067          	ret
   162f8:	409587b3          	sub	a5,a1,s1
   162fc:	feb78793          	addi	a5,a5,-21
   16300:	ffc7f793          	andi	a5,a5,-4
   16304:	00478f13          	addi	t5,a5,4
   16308:	e95ff06f          	j	1619c <__multiply+0xa8>
   1630c:	0000d697          	auipc	a3,0xd
   16310:	54468693          	addi	a3,a3,1348 # 23850 <zeroes.0+0x68>
   16314:	00000613          	li	a2,0
   16318:	15d00593          	li	a1,349
   1631c:	0000d517          	auipc	a0,0xd
   16320:	7d850513          	addi	a0,a0,2008 # 23af4 <bmask+0x24>
   16324:	301050ef          	jal	ra,1be24 <__assert_func>

00016328 <__pow5mult>:
   16328:	fe010113          	addi	sp,sp,-32
   1632c:	00812c23          	sw	s0,24(sp)
   16330:	01212823          	sw	s2,16(sp)
   16334:	01312623          	sw	s3,12(sp)
   16338:	00112e23          	sw	ra,28(sp)
   1633c:	00912a23          	sw	s1,20(sp)
   16340:	00367793          	andi	a5,a2,3
   16344:	00060413          	mv	s0,a2
   16348:	00050993          	mv	s3,a0
   1634c:	00058913          	mv	s2,a1
   16350:	0a079a63          	bnez	a5,16404 <__pow5mult+0xdc>
   16354:	40245413          	srai	s0,s0,0x2
   16358:	06040663          	beqz	s0,163c4 <__pow5mult+0x9c>
   1635c:	0489a483          	lw	s1,72(s3)
   16360:	0c048663          	beqz	s1,1642c <__pow5mult+0x104>
   16364:	00147793          	andi	a5,s0,1
   16368:	02079063          	bnez	a5,16388 <__pow5mult+0x60>
   1636c:	40145413          	srai	s0,s0,0x1
   16370:	04040a63          	beqz	s0,163c4 <__pow5mult+0x9c>
   16374:	0004a503          	lw	a0,0(s1)
   16378:	06050663          	beqz	a0,163e4 <__pow5mult+0xbc>
   1637c:	00050493          	mv	s1,a0
   16380:	00147793          	andi	a5,s0,1
   16384:	fe0784e3          	beqz	a5,1636c <__pow5mult+0x44>
   16388:	00048613          	mv	a2,s1
   1638c:	00090593          	mv	a1,s2
   16390:	00098513          	mv	a0,s3
   16394:	d61ff0ef          	jal	ra,160f4 <__multiply>
   16398:	02090063          	beqz	s2,163b8 <__pow5mult+0x90>
   1639c:	00492703          	lw	a4,4(s2)
   163a0:	04c9a783          	lw	a5,76(s3)
   163a4:	00271713          	slli	a4,a4,0x2
   163a8:	00e787b3          	add	a5,a5,a4
   163ac:	0007a703          	lw	a4,0(a5)
   163b0:	00e92023          	sw	a4,0(s2)
   163b4:	0127a023          	sw	s2,0(a5)
   163b8:	40145413          	srai	s0,s0,0x1
   163bc:	00050913          	mv	s2,a0
   163c0:	fa041ae3          	bnez	s0,16374 <__pow5mult+0x4c>
   163c4:	01c12083          	lw	ra,28(sp)
   163c8:	01812403          	lw	s0,24(sp)
   163cc:	01412483          	lw	s1,20(sp)
   163d0:	00c12983          	lw	s3,12(sp)
   163d4:	00090513          	mv	a0,s2
   163d8:	01012903          	lw	s2,16(sp)
   163dc:	02010113          	addi	sp,sp,32
   163e0:	00008067          	ret
   163e4:	00048613          	mv	a2,s1
   163e8:	00048593          	mv	a1,s1
   163ec:	00098513          	mv	a0,s3
   163f0:	d05ff0ef          	jal	ra,160f4 <__multiply>
   163f4:	00a4a023          	sw	a0,0(s1)
   163f8:	00052023          	sw	zero,0(a0)
   163fc:	00050493          	mv	s1,a0
   16400:	f81ff06f          	j	16380 <__pow5mult+0x58>
   16404:	fff78793          	addi	a5,a5,-1
   16408:	0000d717          	auipc	a4,0xd
   1640c:	72070713          	addi	a4,a4,1824 # 23b28 <p05.0>
   16410:	00279793          	slli	a5,a5,0x2
   16414:	00f707b3          	add	a5,a4,a5
   16418:	0007a603          	lw	a2,0(a5)
   1641c:	00000693          	li	a3,0
   16420:	84dff0ef          	jal	ra,15c6c <__multadd>
   16424:	00050913          	mv	s2,a0
   16428:	f2dff06f          	j	16354 <__pow5mult+0x2c>
   1642c:	00100593          	li	a1,1
   16430:	00098513          	mv	a0,s3
   16434:	f6cff0ef          	jal	ra,15ba0 <_Balloc>
   16438:	00050493          	mv	s1,a0
   1643c:	02050063          	beqz	a0,1645c <__pow5mult+0x134>
   16440:	27100793          	li	a5,625
   16444:	00f52a23          	sw	a5,20(a0)
   16448:	00100793          	li	a5,1
   1644c:	00f52823          	sw	a5,16(a0)
   16450:	04a9a423          	sw	a0,72(s3)
   16454:	00052023          	sw	zero,0(a0)
   16458:	f0dff06f          	j	16364 <__pow5mult+0x3c>
   1645c:	0000d697          	auipc	a3,0xd
   16460:	3f468693          	addi	a3,a3,1012 # 23850 <zeroes.0+0x68>
   16464:	00000613          	li	a2,0
   16468:	14000593          	li	a1,320
   1646c:	0000d517          	auipc	a0,0xd
   16470:	68850513          	addi	a0,a0,1672 # 23af4 <bmask+0x24>
   16474:	1b1050ef          	jal	ra,1be24 <__assert_func>

00016478 <__lshift>:
   16478:	fe010113          	addi	sp,sp,-32
   1647c:	01512223          	sw	s5,4(sp)
   16480:	0105aa83          	lw	s5,16(a1)
   16484:	0085a783          	lw	a5,8(a1)
   16488:	01312623          	sw	s3,12(sp)
   1648c:	40565993          	srai	s3,a2,0x5
   16490:	01598ab3          	add	s5,s3,s5
   16494:	00812c23          	sw	s0,24(sp)
   16498:	00912a23          	sw	s1,20(sp)
   1649c:	01212823          	sw	s2,16(sp)
   164a0:	01412423          	sw	s4,8(sp)
   164a4:	00112e23          	sw	ra,28(sp)
   164a8:	001a8913          	addi	s2,s5,1
   164ac:	00058493          	mv	s1,a1
   164b0:	00060413          	mv	s0,a2
   164b4:	0045a583          	lw	a1,4(a1)
   164b8:	00050a13          	mv	s4,a0
   164bc:	0127d863          	bge	a5,s2,164cc <__lshift+0x54>
   164c0:	00179793          	slli	a5,a5,0x1
   164c4:	00158593          	addi	a1,a1,1
   164c8:	ff27cce3          	blt	a5,s2,164c0 <__lshift+0x48>
   164cc:	000a0513          	mv	a0,s4
   164d0:	ed0ff0ef          	jal	ra,15ba0 <_Balloc>
   164d4:	10050c63          	beqz	a0,165ec <__lshift+0x174>
   164d8:	01450813          	addi	a6,a0,20
   164dc:	03305463          	blez	s3,16504 <__lshift+0x8c>
   164e0:	00598993          	addi	s3,s3,5
   164e4:	00299993          	slli	s3,s3,0x2
   164e8:	01350733          	add	a4,a0,s3
   164ec:	00080793          	mv	a5,a6
   164f0:	00478793          	addi	a5,a5,4
   164f4:	fe07ae23          	sw	zero,-4(a5)
   164f8:	fee79ce3          	bne	a5,a4,164f0 <__lshift+0x78>
   164fc:	fec98993          	addi	s3,s3,-20
   16500:	01380833          	add	a6,a6,s3
   16504:	0104a883          	lw	a7,16(s1)
   16508:	01448793          	addi	a5,s1,20
   1650c:	01f47613          	andi	a2,s0,31
   16510:	00289893          	slli	a7,a7,0x2
   16514:	011788b3          	add	a7,a5,a7
   16518:	0a060463          	beqz	a2,165c0 <__lshift+0x148>
   1651c:	02000593          	li	a1,32
   16520:	40c585b3          	sub	a1,a1,a2
   16524:	00080313          	mv	t1,a6
   16528:	00000693          	li	a3,0
   1652c:	0007a703          	lw	a4,0(a5)
   16530:	00430313          	addi	t1,t1,4
   16534:	00478793          	addi	a5,a5,4
   16538:	00c71733          	sll	a4,a4,a2
   1653c:	00d76733          	or	a4,a4,a3
   16540:	fee32e23          	sw	a4,-4(t1)
   16544:	ffc7a683          	lw	a3,-4(a5)
   16548:	00b6d6b3          	srl	a3,a3,a1
   1654c:	ff17e0e3          	bltu	a5,a7,1652c <__lshift+0xb4>
   16550:	01548793          	addi	a5,s1,21
   16554:	00400713          	li	a4,4
   16558:	00f8ea63          	bltu	a7,a5,1656c <__lshift+0xf4>
   1655c:	409887b3          	sub	a5,a7,s1
   16560:	feb78793          	addi	a5,a5,-21
   16564:	ffc7f793          	andi	a5,a5,-4
   16568:	00478713          	addi	a4,a5,4
   1656c:	00e80833          	add	a6,a6,a4
   16570:	00d82023          	sw	a3,0(a6)
   16574:	00069463          	bnez	a3,1657c <__lshift+0x104>
   16578:	000a8913          	mv	s2,s5
   1657c:	0044a703          	lw	a4,4(s1)
   16580:	04ca2783          	lw	a5,76(s4)
   16584:	01c12083          	lw	ra,28(sp)
   16588:	00271713          	slli	a4,a4,0x2
   1658c:	00e787b3          	add	a5,a5,a4
   16590:	0007a703          	lw	a4,0(a5)
   16594:	01252823          	sw	s2,16(a0)
   16598:	01812403          	lw	s0,24(sp)
   1659c:	00e4a023          	sw	a4,0(s1)
   165a0:	0097a023          	sw	s1,0(a5)
   165a4:	01012903          	lw	s2,16(sp)
   165a8:	01412483          	lw	s1,20(sp)
   165ac:	00c12983          	lw	s3,12(sp)
   165b0:	00812a03          	lw	s4,8(sp)
   165b4:	00412a83          	lw	s5,4(sp)
   165b8:	02010113          	addi	sp,sp,32
   165bc:	00008067          	ret
   165c0:	0007a703          	lw	a4,0(a5)
   165c4:	00478793          	addi	a5,a5,4
   165c8:	00480813          	addi	a6,a6,4
   165cc:	fee82e23          	sw	a4,-4(a6)
   165d0:	fb17f4e3          	bgeu	a5,a7,16578 <__lshift+0x100>
   165d4:	0007a703          	lw	a4,0(a5)
   165d8:	00478793          	addi	a5,a5,4
   165dc:	00480813          	addi	a6,a6,4
   165e0:	fee82e23          	sw	a4,-4(a6)
   165e4:	fd17eee3          	bltu	a5,a7,165c0 <__lshift+0x148>
   165e8:	f91ff06f          	j	16578 <__lshift+0x100>
   165ec:	0000d697          	auipc	a3,0xd
   165f0:	26468693          	addi	a3,a3,612 # 23850 <zeroes.0+0x68>
   165f4:	00000613          	li	a2,0
   165f8:	1d900593          	li	a1,473
   165fc:	0000d517          	auipc	a0,0xd
   16600:	4f850513          	addi	a0,a0,1272 # 23af4 <bmask+0x24>
   16604:	021050ef          	jal	ra,1be24 <__assert_func>

00016608 <__mcmp>:
   16608:	01052703          	lw	a4,16(a0)
   1660c:	0105a783          	lw	a5,16(a1)
   16610:	00050813          	mv	a6,a0
   16614:	40f70533          	sub	a0,a4,a5
   16618:	04f71263          	bne	a4,a5,1665c <__mcmp+0x54>
   1661c:	00279793          	slli	a5,a5,0x2
   16620:	01480813          	addi	a6,a6,20
   16624:	01458593          	addi	a1,a1,20
   16628:	00f80733          	add	a4,a6,a5
   1662c:	00f587b3          	add	a5,a1,a5
   16630:	0080006f          	j	16638 <__mcmp+0x30>
   16634:	02e87463          	bgeu	a6,a4,1665c <__mcmp+0x54>
   16638:	ffc72603          	lw	a2,-4(a4)
   1663c:	ffc7a683          	lw	a3,-4(a5)
   16640:	ffc70713          	addi	a4,a4,-4
   16644:	ffc78793          	addi	a5,a5,-4
   16648:	fed606e3          	beq	a2,a3,16634 <__mcmp+0x2c>
   1664c:	00100513          	li	a0,1
   16650:	00d67663          	bgeu	a2,a3,1665c <__mcmp+0x54>
   16654:	fff00513          	li	a0,-1
   16658:	00008067          	ret
   1665c:	00008067          	ret

00016660 <__mdiff>:
   16660:	0105a703          	lw	a4,16(a1)
   16664:	01062783          	lw	a5,16(a2)
   16668:	ff010113          	addi	sp,sp,-16
   1666c:	00812423          	sw	s0,8(sp)
   16670:	00912223          	sw	s1,4(sp)
   16674:	01212023          	sw	s2,0(sp)
   16678:	00112623          	sw	ra,12(sp)
   1667c:	00058493          	mv	s1,a1
   16680:	00060413          	mv	s0,a2
   16684:	40f70933          	sub	s2,a4,a5
   16688:	04f71663          	bne	a4,a5,166d4 <__mdiff+0x74>
   1668c:	00279693          	slli	a3,a5,0x2
   16690:	01458593          	addi	a1,a1,20
   16694:	01460713          	addi	a4,a2,20
   16698:	00d587b3          	add	a5,a1,a3
   1669c:	00d70733          	add	a4,a4,a3
   166a0:	0080006f          	j	166a8 <__mdiff+0x48>
   166a4:	18f5f463          	bgeu	a1,a5,1682c <__mdiff+0x1cc>
   166a8:	ffc7a603          	lw	a2,-4(a5)
   166ac:	ffc72683          	lw	a3,-4(a4)
   166b0:	ffc78793          	addi	a5,a5,-4
   166b4:	ffc70713          	addi	a4,a4,-4
   166b8:	fed606e3          	beq	a2,a3,166a4 <__mdiff+0x44>
   166bc:	02d67063          	bgeu	a2,a3,166dc <__mdiff+0x7c>
   166c0:	00048793          	mv	a5,s1
   166c4:	00100913          	li	s2,1
   166c8:	00040493          	mv	s1,s0
   166cc:	00078413          	mv	s0,a5
   166d0:	00c0006f          	j	166dc <__mdiff+0x7c>
   166d4:	fe0946e3          	bltz	s2,166c0 <__mdiff+0x60>
   166d8:	00000913          	li	s2,0
   166dc:	0044a583          	lw	a1,4(s1)
   166e0:	cc0ff0ef          	jal	ra,15ba0 <_Balloc>
   166e4:	1a050863          	beqz	a0,16894 <__mdiff+0x234>
   166e8:	0104a303          	lw	t1,16(s1)
   166ec:	01042603          	lw	a2,16(s0)
   166f0:	01448293          	addi	t0,s1,20
   166f4:	00231e13          	slli	t3,t1,0x2
   166f8:	01440813          	addi	a6,s0,20
   166fc:	00261613          	slli	a2,a2,0x2
   16700:	01450f93          	addi	t6,a0,20
   16704:	000108b7          	lui	a7,0x10
   16708:	01252623          	sw	s2,12(a0)
   1670c:	01c28e33          	add	t3,t0,t3
   16710:	00c80633          	add	a2,a6,a2
   16714:	000f8f13          	mv	t5,t6
   16718:	00028e93          	mv	t4,t0
   1671c:	00000693          	li	a3,0
   16720:	fff88893          	addi	a7,a7,-1 # ffff <_vfprintf_r+0x21a3>
   16724:	000ea703          	lw	a4,0(t4)
   16728:	00082583          	lw	a1,0(a6)
   1672c:	004f0f13          	addi	t5,t5,4
   16730:	011777b3          	and	a5,a4,a7
   16734:	0115f3b3          	and	t2,a1,a7
   16738:	407787b3          	sub	a5,a5,t2
   1673c:	00d787b3          	add	a5,a5,a3
   16740:	01075713          	srli	a4,a4,0x10
   16744:	0105d593          	srli	a1,a1,0x10
   16748:	4107d693          	srai	a3,a5,0x10
   1674c:	40b70733          	sub	a4,a4,a1
   16750:	00d70733          	add	a4,a4,a3
   16754:	01071693          	slli	a3,a4,0x10
   16758:	0117f7b3          	and	a5,a5,a7
   1675c:	00d7e7b3          	or	a5,a5,a3
   16760:	00480813          	addi	a6,a6,4
   16764:	feff2e23          	sw	a5,-4(t5)
   16768:	004e8e93          	addi	t4,t4,4
   1676c:	41075693          	srai	a3,a4,0x10
   16770:	fac86ae3          	bltu	a6,a2,16724 <__mdiff+0xc4>
   16774:	40860733          	sub	a4,a2,s0
   16778:	feb70713          	addi	a4,a4,-21
   1677c:	01540413          	addi	s0,s0,21
   16780:	00275f13          	srli	t5,a4,0x2
   16784:	00400713          	li	a4,4
   16788:	00866663          	bltu	a2,s0,16794 <__mdiff+0x134>
   1678c:	001f0713          	addi	a4,t5,1
   16790:	00271713          	slli	a4,a4,0x2
   16794:	00e282b3          	add	t0,t0,a4
   16798:	00ef8833          	add	a6,t6,a4
   1679c:	00010eb7          	lui	t4,0x10
   167a0:	00080893          	mv	a7,a6
   167a4:	00028593          	mv	a1,t0
   167a8:	fffe8e93          	addi	t4,t4,-1 # ffff <_vfprintf_r+0x21a3>
   167ac:	0bc2f863          	bgeu	t0,t3,1685c <__mdiff+0x1fc>
   167b0:	0005a783          	lw	a5,0(a1)
   167b4:	00488893          	addi	a7,a7,4
   167b8:	00458593          	addi	a1,a1,4
   167bc:	01d7f733          	and	a4,a5,t4
   167c0:	00d70733          	add	a4,a4,a3
   167c4:	0107d613          	srli	a2,a5,0x10
   167c8:	41075713          	srai	a4,a4,0x10
   167cc:	00c70733          	add	a4,a4,a2
   167d0:	00d787b3          	add	a5,a5,a3
   167d4:	01d7f7b3          	and	a5,a5,t4
   167d8:	01071693          	slli	a3,a4,0x10
   167dc:	00d7e7b3          	or	a5,a5,a3
   167e0:	fef8ae23          	sw	a5,-4(a7)
   167e4:	41075693          	srai	a3,a4,0x10
   167e8:	fdc5e4e3          	bltu	a1,t3,167b0 <__mdiff+0x150>
   167ec:	fffe0e13          	addi	t3,t3,-1
   167f0:	405e0e33          	sub	t3,t3,t0
   167f4:	ffce7e13          	andi	t3,t3,-4
   167f8:	01c80733          	add	a4,a6,t3
   167fc:	00079a63          	bnez	a5,16810 <__mdiff+0x1b0>
   16800:	ffc72783          	lw	a5,-4(a4)
   16804:	fff30313          	addi	t1,t1,-1
   16808:	ffc70713          	addi	a4,a4,-4
   1680c:	fe078ae3          	beqz	a5,16800 <__mdiff+0x1a0>
   16810:	00c12083          	lw	ra,12(sp)
   16814:	00812403          	lw	s0,8(sp)
   16818:	00652823          	sw	t1,16(a0)
   1681c:	00412483          	lw	s1,4(sp)
   16820:	00012903          	lw	s2,0(sp)
   16824:	01010113          	addi	sp,sp,16
   16828:	00008067          	ret
   1682c:	00000593          	li	a1,0
   16830:	b70ff0ef          	jal	ra,15ba0 <_Balloc>
   16834:	04050263          	beqz	a0,16878 <__mdiff+0x218>
   16838:	00c12083          	lw	ra,12(sp)
   1683c:	00812403          	lw	s0,8(sp)
   16840:	00100793          	li	a5,1
   16844:	00f52823          	sw	a5,16(a0)
   16848:	00052a23          	sw	zero,20(a0)
   1684c:	00412483          	lw	s1,4(sp)
   16850:	00012903          	lw	s2,0(sp)
   16854:	01010113          	addi	sp,sp,16
   16858:	00008067          	ret
   1685c:	00000713          	li	a4,0
   16860:	00867663          	bgeu	a2,s0,1686c <__mdiff+0x20c>
   16864:	00ef8733          	add	a4,t6,a4
   16868:	f95ff06f          	j	167fc <__mdiff+0x19c>
   1686c:	002f1713          	slli	a4,t5,0x2
   16870:	00ef8733          	add	a4,t6,a4
   16874:	f89ff06f          	j	167fc <__mdiff+0x19c>
   16878:	0000d697          	auipc	a3,0xd
   1687c:	fd868693          	addi	a3,a3,-40 # 23850 <zeroes.0+0x68>
   16880:	00000613          	li	a2,0
   16884:	23200593          	li	a1,562
   16888:	0000d517          	auipc	a0,0xd
   1688c:	26c50513          	addi	a0,a0,620 # 23af4 <bmask+0x24>
   16890:	594050ef          	jal	ra,1be24 <__assert_func>
   16894:	0000d697          	auipc	a3,0xd
   16898:	fbc68693          	addi	a3,a3,-68 # 23850 <zeroes.0+0x68>
   1689c:	00000613          	li	a2,0
   168a0:	24000593          	li	a1,576
   168a4:	0000d517          	auipc	a0,0xd
   168a8:	25050513          	addi	a0,a0,592 # 23af4 <bmask+0x24>
   168ac:	578050ef          	jal	ra,1be24 <__assert_func>

000168b0 <__ulp>:
   168b0:	7ff007b7          	lui	a5,0x7ff00
   168b4:	00b7f5b3          	and	a1,a5,a1
   168b8:	fcc007b7          	lui	a5,0xfcc00
   168bc:	00f585b3          	add	a1,a1,a5
   168c0:	00000793          	li	a5,0
   168c4:	00b05663          	blez	a1,168d0 <__ulp+0x20>
   168c8:	00078513          	mv	a0,a5
   168cc:	00008067          	ret
   168d0:	40b005b3          	neg	a1,a1
   168d4:	4145d593          	srai	a1,a1,0x14
   168d8:	01300793          	li	a5,19
   168dc:	00b7cc63          	blt	a5,a1,168f4 <__ulp+0x44>
   168e0:	000807b7          	lui	a5,0x80
   168e4:	40b7d5b3          	sra	a1,a5,a1
   168e8:	00000793          	li	a5,0
   168ec:	00078513          	mv	a0,a5
   168f0:	00008067          	ret
   168f4:	fec58593          	addi	a1,a1,-20
   168f8:	01e00713          	li	a4,30
   168fc:	00100793          	li	a5,1
   16900:	00b74663          	blt	a4,a1,1690c <__ulp+0x5c>
   16904:	800007b7          	lui	a5,0x80000
   16908:	00b7d7b3          	srl	a5,a5,a1
   1690c:	00000593          	li	a1,0
   16910:	00078513          	mv	a0,a5
   16914:	00008067          	ret

00016918 <__b2d>:
   16918:	fe010113          	addi	sp,sp,-32
   1691c:	00912a23          	sw	s1,20(sp)
   16920:	01052483          	lw	s1,16(a0)
   16924:	00812c23          	sw	s0,24(sp)
   16928:	01450413          	addi	s0,a0,20
   1692c:	00249493          	slli	s1,s1,0x2
   16930:	009404b3          	add	s1,s0,s1
   16934:	01212823          	sw	s2,16(sp)
   16938:	ffc4a903          	lw	s2,-4(s1)
   1693c:	01312623          	sw	s3,12(sp)
   16940:	01412423          	sw	s4,8(sp)
   16944:	00090513          	mv	a0,s2
   16948:	00058993          	mv	s3,a1
   1694c:	00112e23          	sw	ra,28(sp)
   16950:	d9cff0ef          	jal	ra,15eec <__hi0bits>
   16954:	02000713          	li	a4,32
   16958:	40a707b3          	sub	a5,a4,a0
   1695c:	00f9a023          	sw	a5,0(s3)
   16960:	00a00793          	li	a5,10
   16964:	ffc48a13          	addi	s4,s1,-4
   16968:	08a7dc63          	bge	a5,a0,16a00 <__b2d+0xe8>
   1696c:	ff550613          	addi	a2,a0,-11
   16970:	05447063          	bgeu	s0,s4,169b0 <__b2d+0x98>
   16974:	ff84a783          	lw	a5,-8(s1)
   16978:	04060c63          	beqz	a2,169d0 <__b2d+0xb8>
   1697c:	40c706b3          	sub	a3,a4,a2
   16980:	00d7d733          	srl	a4,a5,a3
   16984:	00c91933          	sll	s2,s2,a2
   16988:	00e96933          	or	s2,s2,a4
   1698c:	ff848593          	addi	a1,s1,-8
   16990:	3ff00737          	lui	a4,0x3ff00
   16994:	00e96733          	or	a4,s2,a4
   16998:	00c797b3          	sll	a5,a5,a2
   1699c:	02b47e63          	bgeu	s0,a1,169d8 <__b2d+0xc0>
   169a0:	ff44a603          	lw	a2,-12(s1)
   169a4:	00d656b3          	srl	a3,a2,a3
   169a8:	00d7e7b3          	or	a5,a5,a3
   169ac:	02c0006f          	j	169d8 <__b2d+0xc0>
   169b0:	00b00793          	li	a5,11
   169b4:	00f50c63          	beq	a0,a5,169cc <__b2d+0xb4>
   169b8:	00c91933          	sll	s2,s2,a2
   169bc:	3ff00737          	lui	a4,0x3ff00
   169c0:	00e96733          	or	a4,s2,a4
   169c4:	00000793          	li	a5,0
   169c8:	0100006f          	j	169d8 <__b2d+0xc0>
   169cc:	00000793          	li	a5,0
   169d0:	3ff00737          	lui	a4,0x3ff00
   169d4:	00e96733          	or	a4,s2,a4
   169d8:	01c12083          	lw	ra,28(sp)
   169dc:	01812403          	lw	s0,24(sp)
   169e0:	01412483          	lw	s1,20(sp)
   169e4:	01012903          	lw	s2,16(sp)
   169e8:	00c12983          	lw	s3,12(sp)
   169ec:	00812a03          	lw	s4,8(sp)
   169f0:	00078513          	mv	a0,a5
   169f4:	00070593          	mv	a1,a4
   169f8:	02010113          	addi	sp,sp,32
   169fc:	00008067          	ret
   16a00:	00b00693          	li	a3,11
   16a04:	40a686b3          	sub	a3,a3,a0
   16a08:	3ff007b7          	lui	a5,0x3ff00
   16a0c:	00d95733          	srl	a4,s2,a3
   16a10:	00f76733          	or	a4,a4,a5
   16a14:	00000793          	li	a5,0
   16a18:	01447663          	bgeu	s0,s4,16a24 <__b2d+0x10c>
   16a1c:	ff84a783          	lw	a5,-8(s1)
   16a20:	00d7d7b3          	srl	a5,a5,a3
   16a24:	01550513          	addi	a0,a0,21
   16a28:	00a91933          	sll	s2,s2,a0
   16a2c:	00f967b3          	or	a5,s2,a5
   16a30:	fa9ff06f          	j	169d8 <__b2d+0xc0>

00016a34 <__d2b>:
   16a34:	fd010113          	addi	sp,sp,-48
   16a38:	01512a23          	sw	s5,20(sp)
   16a3c:	00058a93          	mv	s5,a1
   16a40:	00100593          	li	a1,1
   16a44:	02912223          	sw	s1,36(sp)
   16a48:	01312e23          	sw	s3,28(sp)
   16a4c:	01412c23          	sw	s4,24(sp)
   16a50:	02112623          	sw	ra,44(sp)
   16a54:	02812423          	sw	s0,40(sp)
   16a58:	03212023          	sw	s2,32(sp)
   16a5c:	00060493          	mv	s1,a2
   16a60:	00068a13          	mv	s4,a3
   16a64:	00070993          	mv	s3,a4
   16a68:	938ff0ef          	jal	ra,15ba0 <_Balloc>
   16a6c:	10050263          	beqz	a0,16b70 <__d2b+0x13c>
   16a70:	00100737          	lui	a4,0x100
   16a74:	0144d913          	srli	s2,s1,0x14
   16a78:	fff70793          	addi	a5,a4,-1 # fffff <__alt_data_end+0xbffff>
   16a7c:	7ff97913          	andi	s2,s2,2047
   16a80:	00050413          	mv	s0,a0
   16a84:	0097f7b3          	and	a5,a5,s1
   16a88:	00090463          	beqz	s2,16a90 <__d2b+0x5c>
   16a8c:	00e7e7b3          	or	a5,a5,a4
   16a90:	00f12623          	sw	a5,12(sp)
   16a94:	060a9263          	bnez	s5,16af8 <__d2b+0xc4>
   16a98:	00c10513          	addi	a0,sp,12
   16a9c:	cc8ff0ef          	jal	ra,15f64 <__lo0bits>
   16aa0:	00c12703          	lw	a4,12(sp)
   16aa4:	00100493          	li	s1,1
   16aa8:	00942823          	sw	s1,16(s0)
   16aac:	00e42a23          	sw	a4,20(s0)
   16ab0:	02050793          	addi	a5,a0,32
   16ab4:	08090863          	beqz	s2,16b44 <__d2b+0x110>
   16ab8:	bcd90913          	addi	s2,s2,-1075
   16abc:	00f90933          	add	s2,s2,a5
   16ac0:	03500493          	li	s1,53
   16ac4:	012a2023          	sw	s2,0(s4)
   16ac8:	40f48533          	sub	a0,s1,a5
   16acc:	00a9a023          	sw	a0,0(s3)
   16ad0:	02c12083          	lw	ra,44(sp)
   16ad4:	00040513          	mv	a0,s0
   16ad8:	02812403          	lw	s0,40(sp)
   16adc:	02412483          	lw	s1,36(sp)
   16ae0:	02012903          	lw	s2,32(sp)
   16ae4:	01c12983          	lw	s3,28(sp)
   16ae8:	01812a03          	lw	s4,24(sp)
   16aec:	01412a83          	lw	s5,20(sp)
   16af0:	03010113          	addi	sp,sp,48
   16af4:	00008067          	ret
   16af8:	00810513          	addi	a0,sp,8
   16afc:	01512423          	sw	s5,8(sp)
   16b00:	c64ff0ef          	jal	ra,15f64 <__lo0bits>
   16b04:	00c12703          	lw	a4,12(sp)
   16b08:	00050793          	mv	a5,a0
   16b0c:	04050e63          	beqz	a0,16b68 <__d2b+0x134>
   16b10:	00812603          	lw	a2,8(sp)
   16b14:	02000693          	li	a3,32
   16b18:	40a686b3          	sub	a3,a3,a0
   16b1c:	00d716b3          	sll	a3,a4,a3
   16b20:	00a75733          	srl	a4,a4,a0
   16b24:	00c6e6b3          	or	a3,a3,a2
   16b28:	00e12623          	sw	a4,12(sp)
   16b2c:	00e034b3          	snez	s1,a4
   16b30:	00148493          	addi	s1,s1,1
   16b34:	00d42a23          	sw	a3,20(s0)
   16b38:	00e42c23          	sw	a4,24(s0)
   16b3c:	00942823          	sw	s1,16(s0)
   16b40:	f6091ce3          	bnez	s2,16ab8 <__d2b+0x84>
   16b44:	00249713          	slli	a4,s1,0x2
   16b48:	00e40733          	add	a4,s0,a4
   16b4c:	01072503          	lw	a0,16(a4)
   16b50:	bce78793          	addi	a5,a5,-1074 # 3feffbce <__alt_data_end+0x3febfbce>
   16b54:	00fa2023          	sw	a5,0(s4)
   16b58:	b94ff0ef          	jal	ra,15eec <__hi0bits>
   16b5c:	00549493          	slli	s1,s1,0x5
   16b60:	40a48533          	sub	a0,s1,a0
   16b64:	f69ff06f          	j	16acc <__d2b+0x98>
   16b68:	00812683          	lw	a3,8(sp)
   16b6c:	fc1ff06f          	j	16b2c <__d2b+0xf8>
   16b70:	0000d697          	auipc	a3,0xd
   16b74:	ce068693          	addi	a3,a3,-800 # 23850 <zeroes.0+0x68>
   16b78:	00000613          	li	a2,0
   16b7c:	30a00593          	li	a1,778
   16b80:	0000d517          	auipc	a0,0xd
   16b84:	f7450513          	addi	a0,a0,-140 # 23af4 <bmask+0x24>
   16b88:	29c050ef          	jal	ra,1be24 <__assert_func>

00016b8c <__ratio>:
   16b8c:	fd010113          	addi	sp,sp,-48
   16b90:	03212023          	sw	s2,32(sp)
   16b94:	00058913          	mv	s2,a1
   16b98:	00810593          	addi	a1,sp,8
   16b9c:	02112623          	sw	ra,44(sp)
   16ba0:	02812423          	sw	s0,40(sp)
   16ba4:	02912223          	sw	s1,36(sp)
   16ba8:	01312e23          	sw	s3,28(sp)
   16bac:	00050993          	mv	s3,a0
   16bb0:	d69ff0ef          	jal	ra,16918 <__b2d>
   16bb4:	00050493          	mv	s1,a0
   16bb8:	00058413          	mv	s0,a1
   16bbc:	00090513          	mv	a0,s2
   16bc0:	00c10593          	addi	a1,sp,12
   16bc4:	d55ff0ef          	jal	ra,16918 <__b2d>
   16bc8:	01092703          	lw	a4,16(s2)
   16bcc:	0109a783          	lw	a5,16(s3)
   16bd0:	00c12683          	lw	a3,12(sp)
   16bd4:	40e787b3          	sub	a5,a5,a4
   16bd8:	00812703          	lw	a4,8(sp)
   16bdc:	00579793          	slli	a5,a5,0x5
   16be0:	40d70733          	sub	a4,a4,a3
   16be4:	00e787b3          	add	a5,a5,a4
   16be8:	00050713          	mv	a4,a0
   16bec:	02f05e63          	blez	a5,16c28 <__ratio+0x9c>
   16bf0:	01479793          	slli	a5,a5,0x14
   16bf4:	00878433          	add	s0,a5,s0
   16bf8:	00058693          	mv	a3,a1
   16bfc:	00048513          	mv	a0,s1
   16c00:	00040593          	mv	a1,s0
   16c04:	00070613          	mv	a2,a4
   16c08:	3a4070ef          	jal	ra,1dfac <__divdf3>
   16c0c:	02c12083          	lw	ra,44(sp)
   16c10:	02812403          	lw	s0,40(sp)
   16c14:	02412483          	lw	s1,36(sp)
   16c18:	02012903          	lw	s2,32(sp)
   16c1c:	01c12983          	lw	s3,28(sp)
   16c20:	03010113          	addi	sp,sp,48
   16c24:	00008067          	ret
   16c28:	01479793          	slli	a5,a5,0x14
   16c2c:	40f585b3          	sub	a1,a1,a5
   16c30:	fc9ff06f          	j	16bf8 <__ratio+0x6c>

00016c34 <_mprec_log10>:
   16c34:	ff010113          	addi	sp,sp,-16
   16c38:	01212023          	sw	s2,0(sp)
   16c3c:	00112623          	sw	ra,12(sp)
   16c40:	00812423          	sw	s0,8(sp)
   16c44:	00912223          	sw	s1,4(sp)
   16c48:	01700793          	li	a5,23
   16c4c:	00050913          	mv	s2,a0
   16c50:	04a7de63          	bge	a5,a0,16cac <_mprec_log10+0x78>
   16c54:	0000d717          	auipc	a4,0xd
   16c58:	7e470713          	addi	a4,a4,2020 # 24438 <_global_impure_ptr+0x8>
   16c5c:	00072783          	lw	a5,0(a4)
   16c60:	00472583          	lw	a1,4(a4)
   16c64:	0000d717          	auipc	a4,0xd
   16c68:	7dc70713          	addi	a4,a4,2012 # 24440 <_global_impure_ptr+0x10>
   16c6c:	00072403          	lw	s0,0(a4)
   16c70:	00472483          	lw	s1,4(a4)
   16c74:	00078513          	mv	a0,a5
   16c78:	00040613          	mv	a2,s0
   16c7c:	00048693          	mv	a3,s1
   16c80:	2ad070ef          	jal	ra,1e72c <__muldf3>
   16c84:	fff90913          	addi	s2,s2,-1
   16c88:	00050793          	mv	a5,a0
   16c8c:	fe0914e3          	bnez	s2,16c74 <_mprec_log10+0x40>
   16c90:	00c12083          	lw	ra,12(sp)
   16c94:	00812403          	lw	s0,8(sp)
   16c98:	00412483          	lw	s1,4(sp)
   16c9c:	00012903          	lw	s2,0(sp)
   16ca0:	00078513          	mv	a0,a5
   16ca4:	01010113          	addi	sp,sp,16
   16ca8:	00008067          	ret
   16cac:	00351913          	slli	s2,a0,0x3
   16cb0:	0000d717          	auipc	a4,0xd
   16cb4:	e7870713          	addi	a4,a4,-392 # 23b28 <p05.0>
   16cb8:	01270733          	add	a4,a4,s2
   16cbc:	01072783          	lw	a5,16(a4)
   16cc0:	00c12083          	lw	ra,12(sp)
   16cc4:	00812403          	lw	s0,8(sp)
   16cc8:	01472583          	lw	a1,20(a4)
   16ccc:	00412483          	lw	s1,4(sp)
   16cd0:	00012903          	lw	s2,0(sp)
   16cd4:	00078513          	mv	a0,a5
   16cd8:	01010113          	addi	sp,sp,16
   16cdc:	00008067          	ret

00016ce0 <__copybits>:
   16ce0:	01062683          	lw	a3,16(a2)
   16ce4:	fff58593          	addi	a1,a1,-1
   16ce8:	4055d593          	srai	a1,a1,0x5
   16cec:	00158593          	addi	a1,a1,1
   16cf0:	01460793          	addi	a5,a2,20
   16cf4:	00269693          	slli	a3,a3,0x2
   16cf8:	00259593          	slli	a1,a1,0x2
   16cfc:	00d786b3          	add	a3,a5,a3
   16d00:	00b505b3          	add	a1,a0,a1
   16d04:	02d7f863          	bgeu	a5,a3,16d34 <__copybits+0x54>
   16d08:	00050713          	mv	a4,a0
   16d0c:	0007a803          	lw	a6,0(a5)
   16d10:	00478793          	addi	a5,a5,4
   16d14:	00470713          	addi	a4,a4,4
   16d18:	ff072e23          	sw	a6,-4(a4)
   16d1c:	fed7e8e3          	bltu	a5,a3,16d0c <__copybits+0x2c>
   16d20:	40c687b3          	sub	a5,a3,a2
   16d24:	feb78793          	addi	a5,a5,-21
   16d28:	ffc7f793          	andi	a5,a5,-4
   16d2c:	00478793          	addi	a5,a5,4
   16d30:	00f50533          	add	a0,a0,a5
   16d34:	00b57863          	bgeu	a0,a1,16d44 <__copybits+0x64>
   16d38:	00450513          	addi	a0,a0,4
   16d3c:	fe052e23          	sw	zero,-4(a0)
   16d40:	feb56ce3          	bltu	a0,a1,16d38 <__copybits+0x58>
   16d44:	00008067          	ret

00016d48 <__any_on>:
   16d48:	01052703          	lw	a4,16(a0)
   16d4c:	4055d613          	srai	a2,a1,0x5
   16d50:	01450693          	addi	a3,a0,20
   16d54:	02c75263          	bge	a4,a2,16d78 <__any_on+0x30>
   16d58:	00271713          	slli	a4,a4,0x2
   16d5c:	00e687b3          	add	a5,a3,a4
   16d60:	04f6f263          	bgeu	a3,a5,16da4 <__any_on+0x5c>
   16d64:	ffc7a703          	lw	a4,-4(a5)
   16d68:	ffc78793          	addi	a5,a5,-4
   16d6c:	fe070ae3          	beqz	a4,16d60 <__any_on+0x18>
   16d70:	00100513          	li	a0,1
   16d74:	00008067          	ret
   16d78:	00261793          	slli	a5,a2,0x2
   16d7c:	00f687b3          	add	a5,a3,a5
   16d80:	fee650e3          	bge	a2,a4,16d60 <__any_on+0x18>
   16d84:	01f5f593          	andi	a1,a1,31
   16d88:	fc058ce3          	beqz	a1,16d60 <__any_on+0x18>
   16d8c:	0007a603          	lw	a2,0(a5)
   16d90:	00100513          	li	a0,1
   16d94:	00b65733          	srl	a4,a2,a1
   16d98:	00b71733          	sll	a4,a4,a1
   16d9c:	fce602e3          	beq	a2,a4,16d60 <__any_on+0x18>
   16da0:	00008067          	ret
   16da4:	00000513          	li	a0,0
   16da8:	00008067          	ret

00016dac <_open_r>:
   16dac:	ff010113          	addi	sp,sp,-16
   16db0:	00058713          	mv	a4,a1
   16db4:	00812423          	sw	s0,8(sp)
   16db8:	00060593          	mv	a1,a2
   16dbc:	00050413          	mv	s0,a0
   16dc0:	00068613          	mv	a2,a3
   16dc4:	00070513          	mv	a0,a4
   16dc8:	00011797          	auipc	a5,0x11
   16dcc:	ee07a023          	sw	zero,-288(a5) # 27ca8 <errno>
   16dd0:	00112623          	sw	ra,12(sp)
   16dd4:	5390b0ef          	jal	ra,22b0c <_open>
   16dd8:	fff00793          	li	a5,-1
   16ddc:	00f50a63          	beq	a0,a5,16df0 <_open_r+0x44>
   16de0:	00c12083          	lw	ra,12(sp)
   16de4:	00812403          	lw	s0,8(sp)
   16de8:	01010113          	addi	sp,sp,16
   16dec:	00008067          	ret
   16df0:	00011797          	auipc	a5,0x11
   16df4:	eb87a783          	lw	a5,-328(a5) # 27ca8 <errno>
   16df8:	fe0784e3          	beqz	a5,16de0 <_open_r+0x34>
   16dfc:	00c12083          	lw	ra,12(sp)
   16e00:	00f42023          	sw	a5,0(s0)
   16e04:	00812403          	lw	s0,8(sp)
   16e08:	01010113          	addi	sp,sp,16
   16e0c:	00008067          	ret

00016e10 <_realloc_r>:
   16e10:	fd010113          	addi	sp,sp,-48
   16e14:	02912223          	sw	s1,36(sp)
   16e18:	02112623          	sw	ra,44(sp)
   16e1c:	02812423          	sw	s0,40(sp)
   16e20:	03212023          	sw	s2,32(sp)
   16e24:	01312e23          	sw	s3,28(sp)
   16e28:	01412c23          	sw	s4,24(sp)
   16e2c:	01512a23          	sw	s5,20(sp)
   16e30:	01612823          	sw	s6,16(sp)
   16e34:	01712623          	sw	s7,12(sp)
   16e38:	01812423          	sw	s8,8(sp)
   16e3c:	00060493          	mv	s1,a2
   16e40:	1c058263          	beqz	a1,17004 <_realloc_r+0x1f4>
   16e44:	00058413          	mv	s0,a1
   16e48:	00050913          	mv	s2,a0
   16e4c:	94cf10ef          	jal	ra,7f98 <__malloc_lock>
   16e50:	ffc42703          	lw	a4,-4(s0)
   16e54:	00b48793          	addi	a5,s1,11
   16e58:	01600693          	li	a3,22
   16e5c:	ff840a93          	addi	s5,s0,-8
   16e60:	ffc77993          	andi	s3,a4,-4
   16e64:	0ef6f663          	bgeu	a3,a5,16f50 <_realloc_r+0x140>
   16e68:	ff87fa13          	andi	s4,a5,-8
   16e6c:	0e07c663          	bltz	a5,16f58 <_realloc_r+0x148>
   16e70:	0e9a6463          	bltu	s4,s1,16f58 <_realloc_r+0x148>
   16e74:	1149d463          	bge	s3,s4,16f7c <_realloc_r+0x16c>
   16e78:	0000fc17          	auipc	s8,0xf
   16e7c:	c18c0c13          	addi	s8,s8,-1000 # 25a90 <__malloc_av_>
   16e80:	008c2603          	lw	a2,8(s8)
   16e84:	013a86b3          	add	a3,s5,s3
   16e88:	0046a783          	lw	a5,4(a3)
   16e8c:	1cd60e63          	beq	a2,a3,17068 <_realloc_r+0x258>
   16e90:	ffe7f613          	andi	a2,a5,-2
   16e94:	00c68633          	add	a2,a3,a2
   16e98:	00462603          	lw	a2,4(a2)
   16e9c:	00167613          	andi	a2,a2,1
   16ea0:	14061463          	bnez	a2,16fe8 <_realloc_r+0x1d8>
   16ea4:	ffc7f793          	andi	a5,a5,-4
   16ea8:	00f98633          	add	a2,s3,a5
   16eac:	0b465e63          	bge	a2,s4,16f68 <_realloc_r+0x158>
   16eb0:	00177713          	andi	a4,a4,1
   16eb4:	02071463          	bnez	a4,16edc <_realloc_r+0xcc>
   16eb8:	ff842b83          	lw	s7,-8(s0)
   16ebc:	417a8bb3          	sub	s7,s5,s7
   16ec0:	004ba703          	lw	a4,4(s7)
   16ec4:	ffc77713          	andi	a4,a4,-4
   16ec8:	00e787b3          	add	a5,a5,a4
   16ecc:	01378b33          	add	s6,a5,s3
   16ed0:	334b5463          	bge	s6,s4,171f8 <_realloc_r+0x3e8>
   16ed4:	00e98b33          	add	s6,s3,a4
   16ed8:	294b5663          	bge	s6,s4,17164 <_realloc_r+0x354>
   16edc:	00048593          	mv	a1,s1
   16ee0:	00090513          	mv	a0,s2
   16ee4:	b38fe0ef          	jal	ra,1521c <_malloc_r>
   16ee8:	00050493          	mv	s1,a0
   16eec:	40050263          	beqz	a0,172f0 <_realloc_r+0x4e0>
   16ef0:	ffc42783          	lw	a5,-4(s0)
   16ef4:	ff850713          	addi	a4,a0,-8
   16ef8:	ffe7f793          	andi	a5,a5,-2
   16efc:	00fa87b3          	add	a5,s5,a5
   16f00:	24e78a63          	beq	a5,a4,17154 <_realloc_r+0x344>
   16f04:	ffc98613          	addi	a2,s3,-4
   16f08:	02400793          	li	a5,36
   16f0c:	2ec7e063          	bltu	a5,a2,171ec <_realloc_r+0x3dc>
   16f10:	01300713          	li	a4,19
   16f14:	20c76e63          	bltu	a4,a2,17130 <_realloc_r+0x320>
   16f18:	00050793          	mv	a5,a0
   16f1c:	00040713          	mv	a4,s0
   16f20:	00072683          	lw	a3,0(a4)
   16f24:	00d7a023          	sw	a3,0(a5)
   16f28:	00472683          	lw	a3,4(a4)
   16f2c:	00d7a223          	sw	a3,4(a5)
   16f30:	00872703          	lw	a4,8(a4)
   16f34:	00e7a423          	sw	a4,8(a5)
   16f38:	00090513          	mv	a0,s2
   16f3c:	00040593          	mv	a1,s0
   16f40:	abdfa0ef          	jal	ra,119fc <_free_r>
   16f44:	00090513          	mv	a0,s2
   16f48:	9acf10ef          	jal	ra,80f4 <__malloc_unlock>
   16f4c:	0680006f          	j	16fb4 <_realloc_r+0x1a4>
   16f50:	01000a13          	li	s4,16
   16f54:	f29a70e3          	bgeu	s4,s1,16e74 <_realloc_r+0x64>
   16f58:	00c00793          	li	a5,12
   16f5c:	00f92023          	sw	a5,0(s2)
   16f60:	00000493          	li	s1,0
   16f64:	0500006f          	j	16fb4 <_realloc_r+0x1a4>
   16f68:	00c6a783          	lw	a5,12(a3)
   16f6c:	0086a703          	lw	a4,8(a3)
   16f70:	00060993          	mv	s3,a2
   16f74:	00f72623          	sw	a5,12(a4)
   16f78:	00e7a423          	sw	a4,8(a5)
   16f7c:	004aa783          	lw	a5,4(s5)
   16f80:	414986b3          	sub	a3,s3,s4
   16f84:	00f00613          	li	a2,15
   16f88:	0017f793          	andi	a5,a5,1
   16f8c:	013a8733          	add	a4,s5,s3
   16f90:	0ad66463          	bltu	a2,a3,17038 <_realloc_r+0x228>
   16f94:	0137e7b3          	or	a5,a5,s3
   16f98:	00faa223          	sw	a5,4(s5)
   16f9c:	00472783          	lw	a5,4(a4)
   16fa0:	0017e793          	ori	a5,a5,1
   16fa4:	00f72223          	sw	a5,4(a4)
   16fa8:	00090513          	mv	a0,s2
   16fac:	948f10ef          	jal	ra,80f4 <__malloc_unlock>
   16fb0:	00040493          	mv	s1,s0
   16fb4:	02c12083          	lw	ra,44(sp)
   16fb8:	02812403          	lw	s0,40(sp)
   16fbc:	02012903          	lw	s2,32(sp)
   16fc0:	01c12983          	lw	s3,28(sp)
   16fc4:	01812a03          	lw	s4,24(sp)
   16fc8:	01412a83          	lw	s5,20(sp)
   16fcc:	01012b03          	lw	s6,16(sp)
   16fd0:	00c12b83          	lw	s7,12(sp)
   16fd4:	00812c03          	lw	s8,8(sp)
   16fd8:	00048513          	mv	a0,s1
   16fdc:	02412483          	lw	s1,36(sp)
   16fe0:	03010113          	addi	sp,sp,48
   16fe4:	00008067          	ret
   16fe8:	00177713          	andi	a4,a4,1
   16fec:	ee0718e3          	bnez	a4,16edc <_realloc_r+0xcc>
   16ff0:	ff842b83          	lw	s7,-8(s0)
   16ff4:	417a8bb3          	sub	s7,s5,s7
   16ff8:	004ba703          	lw	a4,4(s7)
   16ffc:	ffc77713          	andi	a4,a4,-4
   17000:	ed5ff06f          	j	16ed4 <_realloc_r+0xc4>
   17004:	02812403          	lw	s0,40(sp)
   17008:	02c12083          	lw	ra,44(sp)
   1700c:	02412483          	lw	s1,36(sp)
   17010:	02012903          	lw	s2,32(sp)
   17014:	01c12983          	lw	s3,28(sp)
   17018:	01812a03          	lw	s4,24(sp)
   1701c:	01412a83          	lw	s5,20(sp)
   17020:	01012b03          	lw	s6,16(sp)
   17024:	00c12b83          	lw	s7,12(sp)
   17028:	00812c03          	lw	s8,8(sp)
   1702c:	00060593          	mv	a1,a2
   17030:	03010113          	addi	sp,sp,48
   17034:	9e8fe06f          	j	1521c <_malloc_r>
   17038:	0147e7b3          	or	a5,a5,s4
   1703c:	00faa223          	sw	a5,4(s5)
   17040:	014a85b3          	add	a1,s5,s4
   17044:	0016e693          	ori	a3,a3,1
   17048:	00d5a223          	sw	a3,4(a1)
   1704c:	00472783          	lw	a5,4(a4)
   17050:	00858593          	addi	a1,a1,8
   17054:	00090513          	mv	a0,s2
   17058:	0017e793          	ori	a5,a5,1
   1705c:	00f72223          	sw	a5,4(a4)
   17060:	99dfa0ef          	jal	ra,119fc <_free_r>
   17064:	f45ff06f          	j	16fa8 <_realloc_r+0x198>
   17068:	ffc7f793          	andi	a5,a5,-4
   1706c:	013786b3          	add	a3,a5,s3
   17070:	010a0613          	addi	a2,s4,16
   17074:	22c6de63          	bge	a3,a2,172b0 <_realloc_r+0x4a0>
   17078:	00177713          	andi	a4,a4,1
   1707c:	e60710e3          	bnez	a4,16edc <_realloc_r+0xcc>
   17080:	ff842b83          	lw	s7,-8(s0)
   17084:	417a8bb3          	sub	s7,s5,s7
   17088:	004ba703          	lw	a4,4(s7)
   1708c:	ffc77713          	andi	a4,a4,-4
   17090:	00e787b3          	add	a5,a5,a4
   17094:	01378b33          	add	s6,a5,s3
   17098:	e2cb4ee3          	blt	s6,a2,16ed4 <_realloc_r+0xc4>
   1709c:	00cba783          	lw	a5,12(s7)
   170a0:	008ba703          	lw	a4,8(s7)
   170a4:	ffc98613          	addi	a2,s3,-4
   170a8:	02400693          	li	a3,36
   170ac:	00f72623          	sw	a5,12(a4)
   170b0:	00e7a423          	sw	a4,8(a5)
   170b4:	008b8493          	addi	s1,s7,8
   170b8:	26c6e263          	bltu	a3,a2,1731c <_realloc_r+0x50c>
   170bc:	01300713          	li	a4,19
   170c0:	00048793          	mv	a5,s1
   170c4:	02c77263          	bgeu	a4,a2,170e8 <_realloc_r+0x2d8>
   170c8:	00042703          	lw	a4,0(s0)
   170cc:	01b00793          	li	a5,27
   170d0:	00eba423          	sw	a4,8(s7)
   170d4:	00442703          	lw	a4,4(s0)
   170d8:	00eba623          	sw	a4,12(s7)
   170dc:	24c7e863          	bltu	a5,a2,1732c <_realloc_r+0x51c>
   170e0:	00840413          	addi	s0,s0,8
   170e4:	010b8793          	addi	a5,s7,16
   170e8:	00042703          	lw	a4,0(s0)
   170ec:	00e7a023          	sw	a4,0(a5)
   170f0:	00442703          	lw	a4,4(s0)
   170f4:	00e7a223          	sw	a4,4(a5)
   170f8:	00842703          	lw	a4,8(s0)
   170fc:	00e7a423          	sw	a4,8(a5)
   17100:	014b8733          	add	a4,s7,s4
   17104:	414b07b3          	sub	a5,s6,s4
   17108:	00ec2423          	sw	a4,8(s8)
   1710c:	0017e793          	ori	a5,a5,1
   17110:	00f72223          	sw	a5,4(a4)
   17114:	004ba783          	lw	a5,4(s7)
   17118:	00090513          	mv	a0,s2
   1711c:	0017f793          	andi	a5,a5,1
   17120:	0147e7b3          	or	a5,a5,s4
   17124:	00fba223          	sw	a5,4(s7)
   17128:	fcdf00ef          	jal	ra,80f4 <__malloc_unlock>
   1712c:	e89ff06f          	j	16fb4 <_realloc_r+0x1a4>
   17130:	00042683          	lw	a3,0(s0)
   17134:	01b00713          	li	a4,27
   17138:	00d52023          	sw	a3,0(a0)
   1713c:	00442683          	lw	a3,4(s0)
   17140:	00d52223          	sw	a3,4(a0)
   17144:	14c76663          	bltu	a4,a2,17290 <_realloc_r+0x480>
   17148:	00840713          	addi	a4,s0,8
   1714c:	00850793          	addi	a5,a0,8
   17150:	dd1ff06f          	j	16f20 <_realloc_r+0x110>
   17154:	ffc52783          	lw	a5,-4(a0)
   17158:	ffc7f793          	andi	a5,a5,-4
   1715c:	00f989b3          	add	s3,s3,a5
   17160:	e1dff06f          	j	16f7c <_realloc_r+0x16c>
   17164:	00cba783          	lw	a5,12(s7)
   17168:	008ba703          	lw	a4,8(s7)
   1716c:	ffc98613          	addi	a2,s3,-4
   17170:	02400693          	li	a3,36
   17174:	00f72623          	sw	a5,12(a4)
   17178:	00e7a423          	sw	a4,8(a5)
   1717c:	008b8493          	addi	s1,s7,8
   17180:	10c6e063          	bltu	a3,a2,17280 <_realloc_r+0x470>
   17184:	01300713          	li	a4,19
   17188:	00048793          	mv	a5,s1
   1718c:	02c77c63          	bgeu	a4,a2,171c4 <_realloc_r+0x3b4>
   17190:	00042703          	lw	a4,0(s0)
   17194:	01b00793          	li	a5,27
   17198:	00eba423          	sw	a4,8(s7)
   1719c:	00442703          	lw	a4,4(s0)
   171a0:	00eba623          	sw	a4,12(s7)
   171a4:	14c7f063          	bgeu	a5,a2,172e4 <_realloc_r+0x4d4>
   171a8:	00842783          	lw	a5,8(s0)
   171ac:	00fba823          	sw	a5,16(s7)
   171b0:	00c42783          	lw	a5,12(s0)
   171b4:	00fbaa23          	sw	a5,20(s7)
   171b8:	0ad60663          	beq	a2,a3,17264 <_realloc_r+0x454>
   171bc:	01040413          	addi	s0,s0,16
   171c0:	018b8793          	addi	a5,s7,24
   171c4:	00042703          	lw	a4,0(s0)
   171c8:	00e7a023          	sw	a4,0(a5)
   171cc:	00442703          	lw	a4,4(s0)
   171d0:	00e7a223          	sw	a4,4(a5)
   171d4:	00842703          	lw	a4,8(s0)
   171d8:	00e7a423          	sw	a4,8(a5)
   171dc:	00048413          	mv	s0,s1
   171e0:	000b0993          	mv	s3,s6
   171e4:	000b8a93          	mv	s5,s7
   171e8:	d95ff06f          	j	16f7c <_realloc_r+0x16c>
   171ec:	00040593          	mv	a1,s0
   171f0:	895fe0ef          	jal	ra,15a84 <memmove>
   171f4:	d45ff06f          	j	16f38 <_realloc_r+0x128>
   171f8:	00c6a783          	lw	a5,12(a3)
   171fc:	0086a703          	lw	a4,8(a3)
   17200:	ffc98613          	addi	a2,s3,-4
   17204:	02400693          	li	a3,36
   17208:	00f72623          	sw	a5,12(a4)
   1720c:	00e7a423          	sw	a4,8(a5)
   17210:	008ba703          	lw	a4,8(s7)
   17214:	00cba783          	lw	a5,12(s7)
   17218:	008b8493          	addi	s1,s7,8
   1721c:	00f72623          	sw	a5,12(a4)
   17220:	00e7a423          	sw	a4,8(a5)
   17224:	04c6ee63          	bltu	a3,a2,17280 <_realloc_r+0x470>
   17228:	01300713          	li	a4,19
   1722c:	00048793          	mv	a5,s1
   17230:	f8c77ae3          	bgeu	a4,a2,171c4 <_realloc_r+0x3b4>
   17234:	00042703          	lw	a4,0(s0)
   17238:	01b00793          	li	a5,27
   1723c:	00eba423          	sw	a4,8(s7)
   17240:	00442703          	lw	a4,4(s0)
   17244:	00eba623          	sw	a4,12(s7)
   17248:	08c7fe63          	bgeu	a5,a2,172e4 <_realloc_r+0x4d4>
   1724c:	00842703          	lw	a4,8(s0)
   17250:	02400793          	li	a5,36
   17254:	00eba823          	sw	a4,16(s7)
   17258:	00c42703          	lw	a4,12(s0)
   1725c:	00ebaa23          	sw	a4,20(s7)
   17260:	f4f61ee3          	bne	a2,a5,171bc <_realloc_r+0x3ac>
   17264:	01042703          	lw	a4,16(s0)
   17268:	020b8793          	addi	a5,s7,32
   1726c:	01840413          	addi	s0,s0,24
   17270:	00ebac23          	sw	a4,24(s7)
   17274:	ffc42703          	lw	a4,-4(s0)
   17278:	00ebae23          	sw	a4,28(s7)
   1727c:	f49ff06f          	j	171c4 <_realloc_r+0x3b4>
   17280:	00040593          	mv	a1,s0
   17284:	00048513          	mv	a0,s1
   17288:	ffcfe0ef          	jal	ra,15a84 <memmove>
   1728c:	f51ff06f          	j	171dc <_realloc_r+0x3cc>
   17290:	00842703          	lw	a4,8(s0)
   17294:	00e52423          	sw	a4,8(a0)
   17298:	00c42703          	lw	a4,12(s0)
   1729c:	00e52623          	sw	a4,12(a0)
   172a0:	06f60063          	beq	a2,a5,17300 <_realloc_r+0x4f0>
   172a4:	01040713          	addi	a4,s0,16
   172a8:	01050793          	addi	a5,a0,16
   172ac:	c75ff06f          	j	16f20 <_realloc_r+0x110>
   172b0:	014a8ab3          	add	s5,s5,s4
   172b4:	414687b3          	sub	a5,a3,s4
   172b8:	015c2423          	sw	s5,8(s8)
   172bc:	0017e793          	ori	a5,a5,1
   172c0:	00faa223          	sw	a5,4(s5)
   172c4:	ffc42783          	lw	a5,-4(s0)
   172c8:	00090513          	mv	a0,s2
   172cc:	00040493          	mv	s1,s0
   172d0:	0017f793          	andi	a5,a5,1
   172d4:	0147e7b3          	or	a5,a5,s4
   172d8:	fef42e23          	sw	a5,-4(s0)
   172dc:	e19f00ef          	jal	ra,80f4 <__malloc_unlock>
   172e0:	cd5ff06f          	j	16fb4 <_realloc_r+0x1a4>
   172e4:	00840413          	addi	s0,s0,8
   172e8:	010b8793          	addi	a5,s7,16
   172ec:	ed9ff06f          	j	171c4 <_realloc_r+0x3b4>
   172f0:	00090513          	mv	a0,s2
   172f4:	e01f00ef          	jal	ra,80f4 <__malloc_unlock>
   172f8:	00000493          	li	s1,0
   172fc:	cb9ff06f          	j	16fb4 <_realloc_r+0x1a4>
   17300:	01042683          	lw	a3,16(s0)
   17304:	01840713          	addi	a4,s0,24
   17308:	01850793          	addi	a5,a0,24
   1730c:	00d52823          	sw	a3,16(a0)
   17310:	01442683          	lw	a3,20(s0)
   17314:	00d52a23          	sw	a3,20(a0)
   17318:	c09ff06f          	j	16f20 <_realloc_r+0x110>
   1731c:	00040593          	mv	a1,s0
   17320:	00048513          	mv	a0,s1
   17324:	f60fe0ef          	jal	ra,15a84 <memmove>
   17328:	dd9ff06f          	j	17100 <_realloc_r+0x2f0>
   1732c:	00842783          	lw	a5,8(s0)
   17330:	00fba823          	sw	a5,16(s7)
   17334:	00c42783          	lw	a5,12(s0)
   17338:	00fbaa23          	sw	a5,20(s7)
   1733c:	00d60863          	beq	a2,a3,1734c <_realloc_r+0x53c>
   17340:	01040413          	addi	s0,s0,16
   17344:	018b8793          	addi	a5,s7,24
   17348:	da1ff06f          	j	170e8 <_realloc_r+0x2d8>
   1734c:	01042703          	lw	a4,16(s0)
   17350:	020b8793          	addi	a5,s7,32
   17354:	01840413          	addi	s0,s0,24
   17358:	00ebac23          	sw	a4,24(s7)
   1735c:	ffc42703          	lw	a4,-4(s0)
   17360:	00ebae23          	sw	a4,28(s7)
   17364:	d85ff06f          	j	170e8 <_realloc_r+0x2d8>

00017368 <frexp>:
   17368:	ff010113          	addi	sp,sp,-16
   1736c:	00912223          	sw	s1,4(sp)
   17370:	800004b7          	lui	s1,0x80000
   17374:	00812423          	sw	s0,8(sp)
   17378:	00112623          	sw	ra,12(sp)
   1737c:	fff4c493          	not	s1,s1
   17380:	00060413          	mv	s0,a2
   17384:	00062023          	sw	zero,0(a2)
   17388:	00b4f6b3          	and	a3,s1,a1
   1738c:	7ff00637          	lui	a2,0x7ff00
   17390:	00058793          	mv	a5,a1
   17394:	00050713          	mv	a4,a0
   17398:	02c6fe63          	bgeu	a3,a2,173d4 <frexp+0x6c>
   1739c:	00a6e8b3          	or	a7,a3,a0
   173a0:	02088a63          	beqz	a7,173d4 <frexp+0x6c>
   173a4:	00c5f833          	and	a6,a1,a2
   173a8:	04080463          	beqz	a6,173f0 <frexp+0x88>
   173ac:	00000593          	li	a1,0
   173b0:	4146d693          	srai	a3,a3,0x14
   173b4:	80100637          	lui	a2,0x80100
   173b8:	fff60613          	addi	a2,a2,-1 # 800fffff <__alt_data_end+0x800bffff>
   173bc:	c0268693          	addi	a3,a3,-1022
   173c0:	00c7f7b3          	and	a5,a5,a2
   173c4:	00b686b3          	add	a3,a3,a1
   173c8:	3fe00637          	lui	a2,0x3fe00
   173cc:	00c7e7b3          	or	a5,a5,a2
   173d0:	00d42023          	sw	a3,0(s0)
   173d4:	00c12083          	lw	ra,12(sp)
   173d8:	00812403          	lw	s0,8(sp)
   173dc:	00412483          	lw	s1,4(sp)
   173e0:	00070513          	mv	a0,a4
   173e4:	00078593          	mv	a1,a5
   173e8:	01010113          	addi	sp,sp,16
   173ec:	00008067          	ret
   173f0:	0000d797          	auipc	a5,0xd
   173f4:	05878793          	addi	a5,a5,88 # 24448 <_global_impure_ptr+0x18>
   173f8:	0047a683          	lw	a3,4(a5)
   173fc:	0007a603          	lw	a2,0(a5)
   17400:	32c070ef          	jal	ra,1e72c <__muldf3>
   17404:	00058793          	mv	a5,a1
   17408:	00b4f6b3          	and	a3,s1,a1
   1740c:	00050713          	mv	a4,a0
   17410:	fca00593          	li	a1,-54
   17414:	f9dff06f          	j	173b0 <frexp+0x48>

00017418 <_sbrk_r>:
   17418:	ff010113          	addi	sp,sp,-16
   1741c:	00812423          	sw	s0,8(sp)
   17420:	00050413          	mv	s0,a0
   17424:	00058513          	mv	a0,a1
   17428:	00011797          	auipc	a5,0x11
   1742c:	8807a023          	sw	zero,-1920(a5) # 27ca8 <errno>
   17430:	00112623          	sw	ra,12(sp)
   17434:	1950b0ef          	jal	ra,22dc8 <_sbrk>
   17438:	fff00793          	li	a5,-1
   1743c:	00f50a63          	beq	a0,a5,17450 <_sbrk_r+0x38>
   17440:	00c12083          	lw	ra,12(sp)
   17444:	00812403          	lw	s0,8(sp)
   17448:	01010113          	addi	sp,sp,16
   1744c:	00008067          	ret
   17450:	00011797          	auipc	a5,0x11
   17454:	8587a783          	lw	a5,-1960(a5) # 27ca8 <errno>
   17458:	fe0784e3          	beqz	a5,17440 <_sbrk_r+0x28>
   1745c:	00c12083          	lw	ra,12(sp)
   17460:	00f42023          	sw	a5,0(s0)
   17464:	00812403          	lw	s0,8(sp)
   17468:	01010113          	addi	sp,sp,16
   1746c:	00008067          	ret

00017470 <_init_signal_r>:
   17470:	2dc52783          	lw	a5,732(a0)
   17474:	00078663          	beqz	a5,17480 <_init_signal_r+0x10>
   17478:	00000513          	li	a0,0
   1747c:	00008067          	ret
   17480:	ff010113          	addi	sp,sp,-16
   17484:	08000593          	li	a1,128
   17488:	00812423          	sw	s0,8(sp)
   1748c:	00112623          	sw	ra,12(sp)
   17490:	00050413          	mv	s0,a0
   17494:	d89fd0ef          	jal	ra,1521c <_malloc_r>
   17498:	2ca42e23          	sw	a0,732(s0)
   1749c:	02050463          	beqz	a0,174c4 <_init_signal_r+0x54>
   174a0:	08050793          	addi	a5,a0,128
   174a4:	00052023          	sw	zero,0(a0)
   174a8:	00450513          	addi	a0,a0,4
   174ac:	fef51ce3          	bne	a0,a5,174a4 <_init_signal_r+0x34>
   174b0:	00000513          	li	a0,0
   174b4:	00c12083          	lw	ra,12(sp)
   174b8:	00812403          	lw	s0,8(sp)
   174bc:	01010113          	addi	sp,sp,16
   174c0:	00008067          	ret
   174c4:	fff00513          	li	a0,-1
   174c8:	fedff06f          	j	174b4 <_init_signal_r+0x44>

000174cc <_signal_r>:
   174cc:	fe010113          	addi	sp,sp,-32
   174d0:	00912a23          	sw	s1,20(sp)
   174d4:	00112e23          	sw	ra,28(sp)
   174d8:	00812c23          	sw	s0,24(sp)
   174dc:	01f00793          	li	a5,31
   174e0:	00050493          	mv	s1,a0
   174e4:	02b7ea63          	bltu	a5,a1,17518 <_signal_r+0x4c>
   174e8:	2dc52783          	lw	a5,732(a0)
   174ec:	00058413          	mv	s0,a1
   174f0:	02078c63          	beqz	a5,17528 <_signal_r+0x5c>
   174f4:	00241413          	slli	s0,s0,0x2
   174f8:	008787b3          	add	a5,a5,s0
   174fc:	0007a503          	lw	a0,0(a5)
   17500:	00c7a023          	sw	a2,0(a5)
   17504:	01c12083          	lw	ra,28(sp)
   17508:	01812403          	lw	s0,24(sp)
   1750c:	01412483          	lw	s1,20(sp)
   17510:	02010113          	addi	sp,sp,32
   17514:	00008067          	ret
   17518:	01600793          	li	a5,22
   1751c:	00f52023          	sw	a5,0(a0)
   17520:	fff00513          	li	a0,-1
   17524:	fe1ff06f          	j	17504 <_signal_r+0x38>
   17528:	08000593          	li	a1,128
   1752c:	00c12623          	sw	a2,12(sp)
   17530:	cedfd0ef          	jal	ra,1521c <_malloc_r>
   17534:	2ca4ae23          	sw	a0,732(s1) # 800002dc <__alt_data_end+0x7ffc02dc>
   17538:	00c12603          	lw	a2,12(sp)
   1753c:	00050793          	mv	a5,a0
   17540:	00050713          	mv	a4,a0
   17544:	08050693          	addi	a3,a0,128
   17548:	fc050ce3          	beqz	a0,17520 <_signal_r+0x54>
   1754c:	00072023          	sw	zero,0(a4)
   17550:	00470713          	addi	a4,a4,4
   17554:	fed71ce3          	bne	a4,a3,1754c <_signal_r+0x80>
   17558:	f9dff06f          	j	174f4 <_signal_r+0x28>

0001755c <_raise_r>:
   1755c:	ff010113          	addi	sp,sp,-16
   17560:	00912223          	sw	s1,4(sp)
   17564:	00112623          	sw	ra,12(sp)
   17568:	00812423          	sw	s0,8(sp)
   1756c:	01f00793          	li	a5,31
   17570:	00050493          	mv	s1,a0
   17574:	08b7ee63          	bltu	a5,a1,17610 <_raise_r+0xb4>
   17578:	2dc52783          	lw	a5,732(a0)
   1757c:	00058413          	mv	s0,a1
   17580:	04078463          	beqz	a5,175c8 <_raise_r+0x6c>
   17584:	00259713          	slli	a4,a1,0x2
   17588:	00e787b3          	add	a5,a5,a4
   1758c:	0007a703          	lw	a4,0(a5)
   17590:	02070c63          	beqz	a4,175c8 <_raise_r+0x6c>
   17594:	00100693          	li	a3,1
   17598:	00d70c63          	beq	a4,a3,175b0 <_raise_r+0x54>
   1759c:	fff00693          	li	a3,-1
   175a0:	04d70863          	beq	a4,a3,175f0 <_raise_r+0x94>
   175a4:	0007a023          	sw	zero,0(a5)
   175a8:	00058513          	mv	a0,a1
   175ac:	000700e7          	jalr	a4
   175b0:	00000513          	li	a0,0
   175b4:	00c12083          	lw	ra,12(sp)
   175b8:	00812403          	lw	s0,8(sp)
   175bc:	00412483          	lw	s1,4(sp)
   175c0:	01010113          	addi	sp,sp,16
   175c4:	00008067          	ret
   175c8:	00048513          	mv	a0,s1
   175cc:	430000ef          	jal	ra,179fc <_getpid_r>
   175d0:	00040613          	mv	a2,s0
   175d4:	00812403          	lw	s0,8(sp)
   175d8:	00c12083          	lw	ra,12(sp)
   175dc:	00050593          	mv	a1,a0
   175e0:	00048513          	mv	a0,s1
   175e4:	00412483          	lw	s1,4(sp)
   175e8:	01010113          	addi	sp,sp,16
   175ec:	3b00006f          	j	1799c <_kill_r>
   175f0:	00c12083          	lw	ra,12(sp)
   175f4:	00812403          	lw	s0,8(sp)
   175f8:	01600793          	li	a5,22
   175fc:	00f52023          	sw	a5,0(a0)
   17600:	00412483          	lw	s1,4(sp)
   17604:	00100513          	li	a0,1
   17608:	01010113          	addi	sp,sp,16
   1760c:	00008067          	ret
   17610:	01600793          	li	a5,22
   17614:	00f52023          	sw	a5,0(a0)
   17618:	fff00513          	li	a0,-1
   1761c:	f99ff06f          	j	175b4 <_raise_r+0x58>

00017620 <__sigtramp_r>:
   17620:	01f00793          	li	a5,31
   17624:	0cb7ea63          	bltu	a5,a1,176f8 <__sigtramp_r+0xd8>
   17628:	2dc52783          	lw	a5,732(a0)
   1762c:	ff010113          	addi	sp,sp,-16
   17630:	00812423          	sw	s0,8(sp)
   17634:	00912223          	sw	s1,4(sp)
   17638:	00112623          	sw	ra,12(sp)
   1763c:	00058413          	mv	s0,a1
   17640:	00050493          	mv	s1,a0
   17644:	08078063          	beqz	a5,176c4 <__sigtramp_r+0xa4>
   17648:	00241713          	slli	a4,s0,0x2
   1764c:	00e787b3          	add	a5,a5,a4
   17650:	0007a703          	lw	a4,0(a5)
   17654:	02070c63          	beqz	a4,1768c <__sigtramp_r+0x6c>
   17658:	fff00693          	li	a3,-1
   1765c:	06d70063          	beq	a4,a3,176bc <__sigtramp_r+0x9c>
   17660:	00100693          	li	a3,1
   17664:	04d70063          	beq	a4,a3,176a4 <__sigtramp_r+0x84>
   17668:	00040513          	mv	a0,s0
   1766c:	0007a023          	sw	zero,0(a5)
   17670:	000700e7          	jalr	a4
   17674:	00000513          	li	a0,0
   17678:	00c12083          	lw	ra,12(sp)
   1767c:	00812403          	lw	s0,8(sp)
   17680:	00412483          	lw	s1,4(sp)
   17684:	01010113          	addi	sp,sp,16
   17688:	00008067          	ret
   1768c:	00c12083          	lw	ra,12(sp)
   17690:	00812403          	lw	s0,8(sp)
   17694:	00412483          	lw	s1,4(sp)
   17698:	00100513          	li	a0,1
   1769c:	01010113          	addi	sp,sp,16
   176a0:	00008067          	ret
   176a4:	00c12083          	lw	ra,12(sp)
   176a8:	00812403          	lw	s0,8(sp)
   176ac:	00412483          	lw	s1,4(sp)
   176b0:	00300513          	li	a0,3
   176b4:	01010113          	addi	sp,sp,16
   176b8:	00008067          	ret
   176bc:	00200513          	li	a0,2
   176c0:	fb9ff06f          	j	17678 <__sigtramp_r+0x58>
   176c4:	08000593          	li	a1,128
   176c8:	b55fd0ef          	jal	ra,1521c <_malloc_r>
   176cc:	2ca4ae23          	sw	a0,732(s1)
   176d0:	00050793          	mv	a5,a0
   176d4:	00050e63          	beqz	a0,176f0 <__sigtramp_r+0xd0>
   176d8:	00050713          	mv	a4,a0
   176dc:	08050693          	addi	a3,a0,128
   176e0:	00072023          	sw	zero,0(a4)
   176e4:	00470713          	addi	a4,a4,4
   176e8:	fee69ce3          	bne	a3,a4,176e0 <__sigtramp_r+0xc0>
   176ec:	f5dff06f          	j	17648 <__sigtramp_r+0x28>
   176f0:	fff00513          	li	a0,-1
   176f4:	f85ff06f          	j	17678 <__sigtramp_r+0x58>
   176f8:	fff00513          	li	a0,-1
   176fc:	00008067          	ret

00017700 <raise>:
   17700:	ff010113          	addi	sp,sp,-16
   17704:	00912223          	sw	s1,4(sp)
   17708:	00112623          	sw	ra,12(sp)
   1770c:	00812423          	sw	s0,8(sp)
   17710:	01f00793          	li	a5,31
   17714:	0000f497          	auipc	s1,0xf
   17718:	9284a483          	lw	s1,-1752(s1) # 2603c <_impure_ptr>
   1771c:	08a7ec63          	bltu	a5,a0,177b4 <raise+0xb4>
   17720:	2dc4a783          	lw	a5,732(s1)
   17724:	00050413          	mv	s0,a0
   17728:	04078263          	beqz	a5,1776c <raise+0x6c>
   1772c:	00251713          	slli	a4,a0,0x2
   17730:	00e787b3          	add	a5,a5,a4
   17734:	0007a703          	lw	a4,0(a5)
   17738:	02070a63          	beqz	a4,1776c <raise+0x6c>
   1773c:	00100693          	li	a3,1
   17740:	00d70a63          	beq	a4,a3,17754 <raise+0x54>
   17744:	fff00693          	li	a3,-1
   17748:	04d70663          	beq	a4,a3,17794 <raise+0x94>
   1774c:	0007a023          	sw	zero,0(a5)
   17750:	000700e7          	jalr	a4
   17754:	00000513          	li	a0,0
   17758:	00c12083          	lw	ra,12(sp)
   1775c:	00812403          	lw	s0,8(sp)
   17760:	00412483          	lw	s1,4(sp)
   17764:	01010113          	addi	sp,sp,16
   17768:	00008067          	ret
   1776c:	00048513          	mv	a0,s1
   17770:	28c000ef          	jal	ra,179fc <_getpid_r>
   17774:	00040613          	mv	a2,s0
   17778:	00812403          	lw	s0,8(sp)
   1777c:	00c12083          	lw	ra,12(sp)
   17780:	00050593          	mv	a1,a0
   17784:	00048513          	mv	a0,s1
   17788:	00412483          	lw	s1,4(sp)
   1778c:	01010113          	addi	sp,sp,16
   17790:	20c0006f          	j	1799c <_kill_r>
   17794:	00c12083          	lw	ra,12(sp)
   17798:	00812403          	lw	s0,8(sp)
   1779c:	01600793          	li	a5,22
   177a0:	00f4a023          	sw	a5,0(s1)
   177a4:	00100513          	li	a0,1
   177a8:	00412483          	lw	s1,4(sp)
   177ac:	01010113          	addi	sp,sp,16
   177b0:	00008067          	ret
   177b4:	01600793          	li	a5,22
   177b8:	00f4a023          	sw	a5,0(s1)
   177bc:	fff00513          	li	a0,-1
   177c0:	f99ff06f          	j	17758 <raise+0x58>

000177c4 <signal>:
   177c4:	ff010113          	addi	sp,sp,-16
   177c8:	01212023          	sw	s2,0(sp)
   177cc:	00112623          	sw	ra,12(sp)
   177d0:	00812423          	sw	s0,8(sp)
   177d4:	00912223          	sw	s1,4(sp)
   177d8:	01f00793          	li	a5,31
   177dc:	0000f917          	auipc	s2,0xf
   177e0:	86092903          	lw	s2,-1952(s2) # 2603c <_impure_ptr>
   177e4:	02a7ee63          	bltu	a5,a0,17820 <signal+0x5c>
   177e8:	00050413          	mv	s0,a0
   177ec:	2dc92503          	lw	a0,732(s2)
   177f0:	00058493          	mv	s1,a1
   177f4:	02050e63          	beqz	a0,17830 <signal+0x6c>
   177f8:	00241413          	slli	s0,s0,0x2
   177fc:	008507b3          	add	a5,a0,s0
   17800:	0007a503          	lw	a0,0(a5)
   17804:	0097a023          	sw	s1,0(a5)
   17808:	00c12083          	lw	ra,12(sp)
   1780c:	00812403          	lw	s0,8(sp)
   17810:	00412483          	lw	s1,4(sp)
   17814:	00012903          	lw	s2,0(sp)
   17818:	01010113          	addi	sp,sp,16
   1781c:	00008067          	ret
   17820:	01600793          	li	a5,22
   17824:	00f92023          	sw	a5,0(s2)
   17828:	fff00513          	li	a0,-1
   1782c:	fddff06f          	j	17808 <signal+0x44>
   17830:	08000593          	li	a1,128
   17834:	00090513          	mv	a0,s2
   17838:	9e5fd0ef          	jal	ra,1521c <_malloc_r>
   1783c:	2ca92e23          	sw	a0,732(s2)
   17840:	00050793          	mv	a5,a0
   17844:	08050713          	addi	a4,a0,128
   17848:	fe0500e3          	beqz	a0,17828 <signal+0x64>
   1784c:	0007a023          	sw	zero,0(a5)
   17850:	00478793          	addi	a5,a5,4
   17854:	fee79ce3          	bne	a5,a4,1784c <signal+0x88>
   17858:	fa1ff06f          	j	177f8 <signal+0x34>

0001785c <_init_signal>:
   1785c:	ff010113          	addi	sp,sp,-16
   17860:	00812423          	sw	s0,8(sp)
   17864:	0000e417          	auipc	s0,0xe
   17868:	7d842403          	lw	s0,2008(s0) # 2603c <_impure_ptr>
   1786c:	2dc42783          	lw	a5,732(s0)
   17870:	00112623          	sw	ra,12(sp)
   17874:	00078c63          	beqz	a5,1788c <_init_signal+0x30>
   17878:	00000513          	li	a0,0
   1787c:	00c12083          	lw	ra,12(sp)
   17880:	00812403          	lw	s0,8(sp)
   17884:	01010113          	addi	sp,sp,16
   17888:	00008067          	ret
   1788c:	08000593          	li	a1,128
   17890:	00040513          	mv	a0,s0
   17894:	989fd0ef          	jal	ra,1521c <_malloc_r>
   17898:	2ca42e23          	sw	a0,732(s0)
   1789c:	00050c63          	beqz	a0,178b4 <_init_signal+0x58>
   178a0:	08050793          	addi	a5,a0,128
   178a4:	00052023          	sw	zero,0(a0)
   178a8:	00450513          	addi	a0,a0,4
   178ac:	fef51ce3          	bne	a0,a5,178a4 <_init_signal+0x48>
   178b0:	fc9ff06f          	j	17878 <_init_signal+0x1c>
   178b4:	fff00513          	li	a0,-1
   178b8:	fc5ff06f          	j	1787c <_init_signal+0x20>

000178bc <__sigtramp>:
   178bc:	ff010113          	addi	sp,sp,-16
   178c0:	00912223          	sw	s1,4(sp)
   178c4:	00112623          	sw	ra,12(sp)
   178c8:	00812423          	sw	s0,8(sp)
   178cc:	01f00793          	li	a5,31
   178d0:	0000e497          	auipc	s1,0xe
   178d4:	76c4a483          	lw	s1,1900(s1) # 2603c <_impure_ptr>
   178d8:	0aa7ee63          	bltu	a5,a0,17994 <__sigtramp+0xd8>
   178dc:	2dc4a783          	lw	a5,732(s1)
   178e0:	00050413          	mv	s0,a0
   178e4:	08078063          	beqz	a5,17964 <__sigtramp+0xa8>
   178e8:	00241713          	slli	a4,s0,0x2
   178ec:	00e787b3          	add	a5,a5,a4
   178f0:	0007a703          	lw	a4,0(a5)
   178f4:	02070c63          	beqz	a4,1792c <__sigtramp+0x70>
   178f8:	fff00693          	li	a3,-1
   178fc:	06d70063          	beq	a4,a3,1795c <__sigtramp+0xa0>
   17900:	00100693          	li	a3,1
   17904:	04d70063          	beq	a4,a3,17944 <__sigtramp+0x88>
   17908:	00040513          	mv	a0,s0
   1790c:	0007a023          	sw	zero,0(a5)
   17910:	000700e7          	jalr	a4
   17914:	00000513          	li	a0,0
   17918:	00c12083          	lw	ra,12(sp)
   1791c:	00812403          	lw	s0,8(sp)
   17920:	00412483          	lw	s1,4(sp)
   17924:	01010113          	addi	sp,sp,16
   17928:	00008067          	ret
   1792c:	00c12083          	lw	ra,12(sp)
   17930:	00812403          	lw	s0,8(sp)
   17934:	00412483          	lw	s1,4(sp)
   17938:	00100513          	li	a0,1
   1793c:	01010113          	addi	sp,sp,16
   17940:	00008067          	ret
   17944:	00c12083          	lw	ra,12(sp)
   17948:	00812403          	lw	s0,8(sp)
   1794c:	00412483          	lw	s1,4(sp)
   17950:	00300513          	li	a0,3
   17954:	01010113          	addi	sp,sp,16
   17958:	00008067          	ret
   1795c:	00200513          	li	a0,2
   17960:	fb9ff06f          	j	17918 <__sigtramp+0x5c>
   17964:	08000593          	li	a1,128
   17968:	00048513          	mv	a0,s1
   1796c:	8b1fd0ef          	jal	ra,1521c <_malloc_r>
   17970:	2ca4ae23          	sw	a0,732(s1)
   17974:	00050793          	mv	a5,a0
   17978:	00050e63          	beqz	a0,17994 <__sigtramp+0xd8>
   1797c:	00050713          	mv	a4,a0
   17980:	08050693          	addi	a3,a0,128
   17984:	00072023          	sw	zero,0(a4)
   17988:	00470713          	addi	a4,a4,4
   1798c:	fee69ce3          	bne	a3,a4,17984 <__sigtramp+0xc8>
   17990:	f59ff06f          	j	178e8 <__sigtramp+0x2c>
   17994:	fff00513          	li	a0,-1
   17998:	f81ff06f          	j	17918 <__sigtramp+0x5c>

0001799c <_kill_r>:
   1799c:	ff010113          	addi	sp,sp,-16
   179a0:	00058713          	mv	a4,a1
   179a4:	00812423          	sw	s0,8(sp)
   179a8:	00060593          	mv	a1,a2
   179ac:	00050413          	mv	s0,a0
   179b0:	00070513          	mv	a0,a4
   179b4:	00010797          	auipc	a5,0x10
   179b8:	2e07aa23          	sw	zero,756(a5) # 27ca8 <errno>
   179bc:	00112623          	sw	ra,12(sp)
   179c0:	5f50a0ef          	jal	ra,227b4 <_kill>
   179c4:	fff00793          	li	a5,-1
   179c8:	00f50a63          	beq	a0,a5,179dc <_kill_r+0x40>
   179cc:	00c12083          	lw	ra,12(sp)
   179d0:	00812403          	lw	s0,8(sp)
   179d4:	01010113          	addi	sp,sp,16
   179d8:	00008067          	ret
   179dc:	00010797          	auipc	a5,0x10
   179e0:	2cc7a783          	lw	a5,716(a5) # 27ca8 <errno>
   179e4:	fe0784e3          	beqz	a5,179cc <_kill_r+0x30>
   179e8:	00c12083          	lw	ra,12(sp)
   179ec:	00f42023          	sw	a5,0(s0)
   179f0:	00812403          	lw	s0,8(sp)
   179f4:	01010113          	addi	sp,sp,16
   179f8:	00008067          	ret

000179fc <_getpid_r>:
   179fc:	4050a06f          	j	22600 <_getpid>

00017a00 <_sprintf_r>:
   17a00:	f6010113          	addi	sp,sp,-160
   17a04:	08c10e93          	addi	t4,sp,140
   17a08:	08f12a23          	sw	a5,148(sp)
   17a0c:	80000337          	lui	t1,0x80000
   17a10:	ffff07b7          	lui	a5,0xffff0
   17a14:	00058e13          	mv	t3,a1
   17a18:	fff34313          	not	t1,t1
   17a1c:	08d12623          	sw	a3,140(sp)
   17a20:	20878793          	addi	a5,a5,520 # ffff0208 <__alt_data_end+0xfffb0208>
   17a24:	00810593          	addi	a1,sp,8
   17a28:	000e8693          	mv	a3,t4
   17a2c:	06112e23          	sw	ra,124(sp)
   17a30:	00f12a23          	sw	a5,20(sp)
   17a34:	08e12823          	sw	a4,144(sp)
   17a38:	09012c23          	sw	a6,152(sp)
   17a3c:	09112e23          	sw	a7,156(sp)
   17a40:	01c12423          	sw	t3,8(sp)
   17a44:	01c12c23          	sw	t3,24(sp)
   17a48:	00612823          	sw	t1,16(sp)
   17a4c:	00612e23          	sw	t1,28(sp)
   17a50:	01d12223          	sw	t4,4(sp)
   17a54:	35c000ef          	jal	ra,17db0 <_svfprintf_r>
   17a58:	00812783          	lw	a5,8(sp)
   17a5c:	00078023          	sb	zero,0(a5)
   17a60:	07c12083          	lw	ra,124(sp)
   17a64:	0a010113          	addi	sp,sp,160
   17a68:	00008067          	ret

00017a6c <sprintf>:
   17a6c:	f6010113          	addi	sp,sp,-160
   17a70:	08810e93          	addi	t4,sp,136
   17a74:	08f12a23          	sw	a5,148(sp)
   17a78:	80000337          	lui	t1,0x80000
   17a7c:	ffff07b7          	lui	a5,0xffff0
   17a80:	00050e13          	mv	t3,a0
   17a84:	fff34313          	not	t1,t1
   17a88:	08c12423          	sw	a2,136(sp)
   17a8c:	08d12623          	sw	a3,140(sp)
   17a90:	20878793          	addi	a5,a5,520 # ffff0208 <__alt_data_end+0xfffb0208>
   17a94:	00058613          	mv	a2,a1
   17a98:	000e8693          	mv	a3,t4
   17a9c:	00810593          	addi	a1,sp,8
   17aa0:	0000e517          	auipc	a0,0xe
   17aa4:	59c52503          	lw	a0,1436(a0) # 2603c <_impure_ptr>
   17aa8:	06112e23          	sw	ra,124(sp)
   17aac:	00f12a23          	sw	a5,20(sp)
   17ab0:	08e12823          	sw	a4,144(sp)
   17ab4:	09012c23          	sw	a6,152(sp)
   17ab8:	09112e23          	sw	a7,156(sp)
   17abc:	01c12423          	sw	t3,8(sp)
   17ac0:	01c12c23          	sw	t3,24(sp)
   17ac4:	00612823          	sw	t1,16(sp)
   17ac8:	00612e23          	sw	t1,28(sp)
   17acc:	01d12223          	sw	t4,4(sp)
   17ad0:	2e0000ef          	jal	ra,17db0 <_svfprintf_r>
   17ad4:	00812783          	lw	a5,8(sp)
   17ad8:	00078023          	sb	zero,0(a5)
   17adc:	07c12083          	lw	ra,124(sp)
   17ae0:	0a010113          	addi	sp,sp,160
   17ae4:	00008067          	ret

00017ae8 <__sread>:
   17ae8:	ff010113          	addi	sp,sp,-16
   17aec:	00812423          	sw	s0,8(sp)
   17af0:	00058413          	mv	s0,a1
   17af4:	00e59583          	lh	a1,14(a1)
   17af8:	00112623          	sw	ra,12(sp)
   17afc:	3dd040ef          	jal	ra,1c6d8 <_read_r>
   17b00:	02054063          	bltz	a0,17b20 <__sread+0x38>
   17b04:	05042783          	lw	a5,80(s0)
   17b08:	00c12083          	lw	ra,12(sp)
   17b0c:	00a787b3          	add	a5,a5,a0
   17b10:	04f42823          	sw	a5,80(s0)
   17b14:	00812403          	lw	s0,8(sp)
   17b18:	01010113          	addi	sp,sp,16
   17b1c:	00008067          	ret
   17b20:	00c45783          	lhu	a5,12(s0)
   17b24:	fffff737          	lui	a4,0xfffff
   17b28:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffbefff>
   17b2c:	00e7f7b3          	and	a5,a5,a4
   17b30:	00c12083          	lw	ra,12(sp)
   17b34:	00f41623          	sh	a5,12(s0)
   17b38:	00812403          	lw	s0,8(sp)
   17b3c:	01010113          	addi	sp,sp,16
   17b40:	00008067          	ret

00017b44 <__seofread>:
   17b44:	00000513          	li	a0,0
   17b48:	00008067          	ret

00017b4c <__swrite>:
   17b4c:	00c59783          	lh	a5,12(a1)
   17b50:	fe010113          	addi	sp,sp,-32
   17b54:	00812c23          	sw	s0,24(sp)
   17b58:	00912a23          	sw	s1,20(sp)
   17b5c:	01212823          	sw	s2,16(sp)
   17b60:	01312623          	sw	s3,12(sp)
   17b64:	00112e23          	sw	ra,28(sp)
   17b68:	1007f713          	andi	a4,a5,256
   17b6c:	00058413          	mv	s0,a1
   17b70:	00050493          	mv	s1,a0
   17b74:	00060913          	mv	s2,a2
   17b78:	00068993          	mv	s3,a3
   17b7c:	04071063          	bnez	a4,17bbc <__swrite+0x70>
   17b80:	fffff737          	lui	a4,0xfffff
   17b84:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffbefff>
   17b88:	00e7f7b3          	and	a5,a5,a4
   17b8c:	00e41583          	lh	a1,14(s0)
   17b90:	00f41623          	sh	a5,12(s0)
   17b94:	01812403          	lw	s0,24(sp)
   17b98:	01c12083          	lw	ra,28(sp)
   17b9c:	00098693          	mv	a3,s3
   17ba0:	00090613          	mv	a2,s2
   17ba4:	00c12983          	lw	s3,12(sp)
   17ba8:	01012903          	lw	s2,16(sp)
   17bac:	00048513          	mv	a0,s1
   17bb0:	01412483          	lw	s1,20(sp)
   17bb4:	02010113          	addi	sp,sp,32
   17bb8:	fc5f806f          	j	10b7c <_write_r>
   17bbc:	00e59583          	lh	a1,14(a1)
   17bc0:	00200693          	li	a3,2
   17bc4:	00000613          	li	a2,0
   17bc8:	239040ef          	jal	ra,1c600 <_lseek_r>
   17bcc:	00c41783          	lh	a5,12(s0)
   17bd0:	fb1ff06f          	j	17b80 <__swrite+0x34>

00017bd4 <__sseek>:
   17bd4:	ff010113          	addi	sp,sp,-16
   17bd8:	00812423          	sw	s0,8(sp)
   17bdc:	00058413          	mv	s0,a1
   17be0:	00e59583          	lh	a1,14(a1)
   17be4:	00112623          	sw	ra,12(sp)
   17be8:	219040ef          	jal	ra,1c600 <_lseek_r>
   17bec:	fff00793          	li	a5,-1
   17bf0:	02f50863          	beq	a0,a5,17c20 <__sseek+0x4c>
   17bf4:	00c45783          	lhu	a5,12(s0)
   17bf8:	00001737          	lui	a4,0x1
   17bfc:	00c12083          	lw	ra,12(sp)
   17c00:	00e7e7b3          	or	a5,a5,a4
   17c04:	01079793          	slli	a5,a5,0x10
   17c08:	4107d793          	srai	a5,a5,0x10
   17c0c:	04a42823          	sw	a0,80(s0)
   17c10:	00f41623          	sh	a5,12(s0)
   17c14:	00812403          	lw	s0,8(sp)
   17c18:	01010113          	addi	sp,sp,16
   17c1c:	00008067          	ret
   17c20:	00c45783          	lhu	a5,12(s0)
   17c24:	fffff737          	lui	a4,0xfffff
   17c28:	fff70713          	addi	a4,a4,-1 # ffffefff <__alt_data_end+0xfffbefff>
   17c2c:	00e7f7b3          	and	a5,a5,a4
   17c30:	01079793          	slli	a5,a5,0x10
   17c34:	4107d793          	srai	a5,a5,0x10
   17c38:	00c12083          	lw	ra,12(sp)
   17c3c:	00f41623          	sh	a5,12(s0)
   17c40:	00812403          	lw	s0,8(sp)
   17c44:	01010113          	addi	sp,sp,16
   17c48:	00008067          	ret

00017c4c <__sclose>:
   17c4c:	00e59583          	lh	a1,14(a1)
   17c50:	b18f906f          	j	10f68 <_close_r>

00017c54 <strcpy>:
   17c54:	00b567b3          	or	a5,a0,a1
   17c58:	0037f793          	andi	a5,a5,3
   17c5c:	08079263          	bnez	a5,17ce0 <strcpy+0x8c>
   17c60:	0005a703          	lw	a4,0(a1)
   17c64:	7f7f86b7          	lui	a3,0x7f7f8
   17c68:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <__alt_data_end+0x7f7b7f7f>
   17c6c:	00d777b3          	and	a5,a4,a3
   17c70:	00d787b3          	add	a5,a5,a3
   17c74:	00e7e7b3          	or	a5,a5,a4
   17c78:	00d7e7b3          	or	a5,a5,a3
   17c7c:	fff00613          	li	a2,-1
   17c80:	06c79e63          	bne	a5,a2,17cfc <strcpy+0xa8>
   17c84:	00050613          	mv	a2,a0
   17c88:	fff00813          	li	a6,-1
   17c8c:	00e62023          	sw	a4,0(a2) # 3fe00000 <__alt_data_end+0x3fdc0000>
   17c90:	0045a703          	lw	a4,4(a1)
   17c94:	00458593          	addi	a1,a1,4
   17c98:	00460613          	addi	a2,a2,4
   17c9c:	00d777b3          	and	a5,a4,a3
   17ca0:	00d787b3          	add	a5,a5,a3
   17ca4:	00e7e7b3          	or	a5,a5,a4
   17ca8:	00d7e7b3          	or	a5,a5,a3
   17cac:	ff0780e3          	beq	a5,a6,17c8c <strcpy+0x38>
   17cb0:	0005c783          	lbu	a5,0(a1)
   17cb4:	0015c703          	lbu	a4,1(a1)
   17cb8:	0025c683          	lbu	a3,2(a1)
   17cbc:	00f60023          	sb	a5,0(a2)
   17cc0:	00078a63          	beqz	a5,17cd4 <strcpy+0x80>
   17cc4:	00e600a3          	sb	a4,1(a2)
   17cc8:	00070663          	beqz	a4,17cd4 <strcpy+0x80>
   17ccc:	00d60123          	sb	a3,2(a2)
   17cd0:	00069463          	bnez	a3,17cd8 <strcpy+0x84>
   17cd4:	00008067          	ret
   17cd8:	000601a3          	sb	zero,3(a2)
   17cdc:	00008067          	ret
   17ce0:	00050793          	mv	a5,a0
   17ce4:	0005c703          	lbu	a4,0(a1)
   17ce8:	00178793          	addi	a5,a5,1
   17cec:	00158593          	addi	a1,a1,1
   17cf0:	fee78fa3          	sb	a4,-1(a5)
   17cf4:	fe0718e3          	bnez	a4,17ce4 <strcpy+0x90>
   17cf8:	00008067          	ret
   17cfc:	00050613          	mv	a2,a0
   17d00:	fb1ff06f          	j	17cb0 <strcpy+0x5c>

00017d04 <strncpy>:
   17d04:	00b567b3          	or	a5,a0,a1
   17d08:	0037f793          	andi	a5,a5,3
   17d0c:	00050713          	mv	a4,a0
   17d10:	06079a63          	bnez	a5,17d84 <strncpy+0x80>
   17d14:	00300793          	li	a5,3
   17d18:	06c7f663          	bgeu	a5,a2,17d84 <strncpy+0x80>
   17d1c:	feff0337          	lui	t1,0xfeff0
   17d20:	808088b7          	lui	a7,0x80808
   17d24:	eff30313          	addi	t1,t1,-257 # fefefeff <__alt_data_end+0xfefafeff>
   17d28:	08088893          	addi	a7,a7,128 # 80808080 <__alt_data_end+0x807c8080>
   17d2c:	00300e13          	li	t3,3
   17d30:	0180006f          	j	17d48 <strncpy+0x44>
   17d34:	00d72023          	sw	a3,0(a4)
   17d38:	ffc60613          	addi	a2,a2,-4
   17d3c:	00470713          	addi	a4,a4,4
   17d40:	00458593          	addi	a1,a1,4
   17d44:	04ce7063          	bgeu	t3,a2,17d84 <strncpy+0x80>
   17d48:	0005a683          	lw	a3,0(a1)
   17d4c:	006687b3          	add	a5,a3,t1
   17d50:	fff6c813          	not	a6,a3
   17d54:	0107f7b3          	and	a5,a5,a6
   17d58:	0117f7b3          	and	a5,a5,a7
   17d5c:	fc078ce3          	beqz	a5,17d34 <strncpy+0x30>
   17d60:	00158593          	addi	a1,a1,1
   17d64:	00170793          	addi	a5,a4,1
   17d68:	02060463          	beqz	a2,17d90 <strncpy+0x8c>
   17d6c:	fff5c683          	lbu	a3,-1(a1)
   17d70:	fff60813          	addi	a6,a2,-1
   17d74:	fed78fa3          	sb	a3,-1(a5)
   17d78:	00068e63          	beqz	a3,17d94 <strncpy+0x90>
   17d7c:	00078713          	mv	a4,a5
   17d80:	00080613          	mv	a2,a6
   17d84:	00158593          	addi	a1,a1,1
   17d88:	00170793          	addi	a5,a4,1
   17d8c:	fe0610e3          	bnez	a2,17d6c <strncpy+0x68>
   17d90:	00008067          	ret
   17d94:	00c70733          	add	a4,a4,a2
   17d98:	00080a63          	beqz	a6,17dac <strncpy+0xa8>
   17d9c:	00178793          	addi	a5,a5,1
   17da0:	fe078fa3          	sb	zero,-1(a5)
   17da4:	fee79ce3          	bne	a5,a4,17d9c <strncpy+0x98>
   17da8:	00008067          	ret
   17dac:	00008067          	ret

00017db0 <_svfprintf_r>:
   17db0:	e0010113          	addi	sp,sp,-512
   17db4:	1e112e23          	sw	ra,508(sp)
   17db8:	1e812c23          	sw	s0,504(sp)
   17dbc:	00b12623          	sw	a1,12(sp)
   17dc0:	00058413          	mv	s0,a1
   17dc4:	00c12823          	sw	a2,16(sp)
   17dc8:	00d12c23          	sw	a3,24(sp)
   17dcc:	1e912a23          	sw	s1,500(sp)
   17dd0:	1f212823          	sw	s2,496(sp)
   17dd4:	1f312623          	sw	s3,492(sp)
   17dd8:	1f412423          	sw	s4,488(sp)
   17ddc:	1f512223          	sw	s5,484(sp)
   17de0:	1f612023          	sw	s6,480(sp)
   17de4:	1d712e23          	sw	s7,476(sp)
   17de8:	1d812c23          	sw	s8,472(sp)
   17dec:	1d912a23          	sw	s9,468(sp)
   17df0:	1da12823          	sw	s10,464(sp)
   17df4:	1db12623          	sw	s11,460(sp)
   17df8:	02a12623          	sw	a0,44(sp)
   17dfc:	970fd0ef          	jal	ra,14f6c <_localeconv_r>
   17e00:	00052783          	lw	a5,0(a0)
   17e04:	00078513          	mv	a0,a5
   17e08:	02f12a23          	sw	a5,52(sp)
   17e0c:	f51f50ef          	jal	ra,dd5c <strlen>
   17e10:	00c45783          	lhu	a5,12(s0)
   17e14:	10012023          	sw	zero,256(sp)
   17e18:	10012223          	sw	zero,260(sp)
   17e1c:	10012423          	sw	zero,264(sp)
   17e20:	10012623          	sw	zero,268(sp)
   17e24:	0807f793          	andi	a5,a5,128
   17e28:	02a12823          	sw	a0,48(sp)
   17e2c:	01012f83          	lw	t6,16(sp)
   17e30:	00078863          	beqz	a5,17e40 <_svfprintf_r+0x90>
   17e34:	01042783          	lw	a5,16(s0)
   17e38:	00079463          	bnez	a5,17e40 <_svfprintf_r+0x90>
   17e3c:	4280106f          	j	19264 <_svfprintf_r+0x14b4>
   17e40:	000f8b93          	mv	s7,t6
   17e44:	000bc783          	lbu	a5,0(s7)
   17e48:	11c10d13          	addi	s10,sp,284
   17e4c:	0fa12a23          	sw	s10,244(sp)
   17e50:	0e012e23          	sw	zero,252(sp)
   17e54:	0e012c23          	sw	zero,248(sp)
   17e58:	02012023          	sw	zero,32(sp)
   17e5c:	02012c23          	sw	zero,56(sp)
   17e60:	04012023          	sw	zero,64(sp)
   17e64:	02012e23          	sw	zero,60(sp)
   17e68:	04012423          	sw	zero,72(sp)
   17e6c:	04012223          	sw	zero,68(sp)
   17e70:	00012823          	sw	zero,16(sp)
   17e74:	02c12983          	lw	s3,44(sp)
   17e78:	01000d93          	li	s11,16
   17e7c:	000d0413          	mv	s0,s10
   17e80:	22078863          	beqz	a5,180b0 <_svfprintf_r+0x300>
   17e84:	000b8493          	mv	s1,s7
   17e88:	02500713          	li	a4,37
   17e8c:	3ee78263          	beq	a5,a4,18270 <_svfprintf_r+0x4c0>
   17e90:	0014c783          	lbu	a5,1(s1)
   17e94:	00148493          	addi	s1,s1,1
   17e98:	fe079ae3          	bnez	a5,17e8c <_svfprintf_r+0xdc>
   17e9c:	41748933          	sub	s2,s1,s7
   17ea0:	21748863          	beq	s1,s7,180b0 <_svfprintf_r+0x300>
   17ea4:	0fc12703          	lw	a4,252(sp)
   17ea8:	0f812783          	lw	a5,248(sp)
   17eac:	01742023          	sw	s7,0(s0)
   17eb0:	01270733          	add	a4,a4,s2
   17eb4:	00178793          	addi	a5,a5,1
   17eb8:	01242223          	sw	s2,4(s0)
   17ebc:	0ee12e23          	sw	a4,252(sp)
   17ec0:	0ef12c23          	sw	a5,248(sp)
   17ec4:	00700713          	li	a4,7
   17ec8:	00840413          	addi	s0,s0,8
   17ecc:	3af74a63          	blt	a4,a5,18280 <_svfprintf_r+0x4d0>
   17ed0:	01012703          	lw	a4,16(sp)
   17ed4:	0004c783          	lbu	a5,0(s1)
   17ed8:	01270733          	add	a4,a4,s2
   17edc:	00e12823          	sw	a4,16(sp)
   17ee0:	1c078863          	beqz	a5,180b0 <_svfprintf_r+0x300>
   17ee4:	0014c883          	lbu	a7,1(s1)
   17ee8:	0c010ba3          	sb	zero,215(sp)
   17eec:	00148493          	addi	s1,s1,1
   17ef0:	fff00913          	li	s2,-1
   17ef4:	00000a13          	li	s4,0
   17ef8:	00000b13          	li	s6,0
   17efc:	05a00c13          	li	s8,90
   17f00:	00148493          	addi	s1,s1,1
   17f04:	fe088793          	addi	a5,a7,-32
   17f08:	04fc6a63          	bltu	s8,a5,17f5c <_svfprintf_r+0x1ac>
   17f0c:	0000c717          	auipc	a4,0xc
   17f10:	d4470713          	addi	a4,a4,-700 # 23c50 <__mprec_bigtens+0x28>
   17f14:	00279793          	slli	a5,a5,0x2
   17f18:	00e787b3          	add	a5,a5,a4
   17f1c:	0007a783          	lw	a5,0(a5)
   17f20:	00e787b3          	add	a5,a5,a4
   17f24:	00078067          	jr	a5
   17f28:	00000a13          	li	s4,0
   17f2c:	fd088793          	addi	a5,a7,-48
   17f30:	00900693          	li	a3,9
   17f34:	0004c883          	lbu	a7,0(s1)
   17f38:	002a1713          	slli	a4,s4,0x2
   17f3c:	01470a33          	add	s4,a4,s4
   17f40:	001a1a13          	slli	s4,s4,0x1
   17f44:	01478a33          	add	s4,a5,s4
   17f48:	fd088793          	addi	a5,a7,-48
   17f4c:	00148493          	addi	s1,s1,1
   17f50:	fef6f2e3          	bgeu	a3,a5,17f34 <_svfprintf_r+0x184>
   17f54:	fe088793          	addi	a5,a7,-32
   17f58:	fafc7ae3          	bgeu	s8,a5,17f0c <_svfprintf_r+0x15c>
   17f5c:	14088a63          	beqz	a7,180b0 <_svfprintf_r+0x300>
   17f60:	15110e23          	sb	a7,348(sp)
   17f64:	0c010ba3          	sb	zero,215(sp)
   17f68:	00100c13          	li	s8,1
   17f6c:	00100c93          	li	s9,1
   17f70:	15c10b93          	addi	s7,sp,348
   17f74:	00012a23          	sw	zero,20(sp)
   17f78:	00000913          	li	s2,0
   17f7c:	02012223          	sw	zero,36(sp)
   17f80:	02012423          	sw	zero,40(sp)
   17f84:	00012e23          	sw	zero,28(sp)
   17f88:	002b7293          	andi	t0,s6,2
   17f8c:	00028463          	beqz	t0,17f94 <_svfprintf_r+0x1e4>
   17f90:	002c0c13          	addi	s8,s8,2
   17f94:	084b7f13          	andi	t5,s6,132
   17f98:	000f1663          	bnez	t5,17fa4 <_svfprintf_r+0x1f4>
   17f9c:	418a0733          	sub	a4,s4,s8
   17fa0:	42e04ae3          	bgtz	a4,18bd4 <_svfprintf_r+0xe24>
   17fa4:	0d714703          	lbu	a4,215(sp)
   17fa8:	02070c63          	beqz	a4,17fe0 <_svfprintf_r+0x230>
   17fac:	0fc12603          	lw	a2,252(sp)
   17fb0:	0f812703          	lw	a4,248(sp)
   17fb4:	0d710593          	addi	a1,sp,215
   17fb8:	00160613          	addi	a2,a2,1
   17fbc:	00b42023          	sw	a1,0(s0)
   17fc0:	00170713          	addi	a4,a4,1
   17fc4:	00100593          	li	a1,1
   17fc8:	00b42223          	sw	a1,4(s0)
   17fcc:	0ec12e23          	sw	a2,252(sp)
   17fd0:	0ee12c23          	sw	a4,248(sp)
   17fd4:	00700613          	li	a2,7
   17fd8:	00840413          	addi	s0,s0,8
   17fdc:	3ce64663          	blt	a2,a4,183a8 <_svfprintf_r+0x5f8>
   17fe0:	02028c63          	beqz	t0,18018 <_svfprintf_r+0x268>
   17fe4:	0fc12603          	lw	a2,252(sp)
   17fe8:	0f812703          	lw	a4,248(sp)
   17fec:	0d810793          	addi	a5,sp,216
   17ff0:	00260613          	addi	a2,a2,2
   17ff4:	00170713          	addi	a4,a4,1
   17ff8:	00200593          	li	a1,2
   17ffc:	00f42023          	sw	a5,0(s0)
   18000:	00b42223          	sw	a1,4(s0)
   18004:	0ec12e23          	sw	a2,252(sp)
   18008:	0ee12c23          	sw	a4,248(sp)
   1800c:	00700613          	li	a2,7
   18010:	00840413          	addi	s0,s0,8
   18014:	4ce64ae3          	blt	a2,a4,18ce8 <_svfprintf_r+0xf38>
   18018:	08000713          	li	a4,128
   1801c:	1aef08e3          	beq	t5,a4,189cc <_svfprintf_r+0xc1c>
   18020:	41990933          	sub	s2,s2,s9
   18024:	2b2044e3          	bgtz	s2,18acc <_svfprintf_r+0xd1c>
   18028:	100b7713          	andi	a4,s6,256
   1802c:	000710e3          	bnez	a4,1882c <_svfprintf_r+0xa7c>
   18030:	0fc12703          	lw	a4,252(sp)
   18034:	0f812603          	lw	a2,248(sp)
   18038:	01742023          	sw	s7,0(s0)
   1803c:	00ec8733          	add	a4,s9,a4
   18040:	00160613          	addi	a2,a2,1
   18044:	01942223          	sw	s9,4(s0)
   18048:	0ee12e23          	sw	a4,252(sp)
   1804c:	0ec12c23          	sw	a2,248(sp)
   18050:	00700593          	li	a1,7
   18054:	48c5ca63          	blt	a1,a2,184e8 <_svfprintf_r+0x738>
   18058:	00840413          	addi	s0,s0,8
   1805c:	004b7793          	andi	a5,s6,4
   18060:	00078663          	beqz	a5,1806c <_svfprintf_r+0x2bc>
   18064:	418a0933          	sub	s2,s4,s8
   18068:	4b2046e3          	bgtz	s2,18d14 <_svfprintf_r+0xf64>
   1806c:	000a0313          	mv	t1,s4
   18070:	018a5463          	bge	s4,s8,18078 <_svfprintf_r+0x2c8>
   18074:	000c0313          	mv	t1,s8
   18078:	01012783          	lw	a5,16(sp)
   1807c:	006787b3          	add	a5,a5,t1
   18080:	00f12823          	sw	a5,16(sp)
   18084:	320710e3          	bnez	a4,18ba4 <_svfprintf_r+0xdf4>
   18088:	01412783          	lw	a5,20(sp)
   1808c:	0e012c23          	sw	zero,248(sp)
   18090:	00078863          	beqz	a5,180a0 <_svfprintf_r+0x2f0>
   18094:	01412583          	lw	a1,20(sp)
   18098:	00098513          	mv	a0,s3
   1809c:	961f90ef          	jal	ra,119fc <_free_r>
   180a0:	000d0413          	mv	s0,s10
   180a4:	00048b93          	mv	s7,s1
   180a8:	000bc783          	lbu	a5,0(s7)
   180ac:	dc079ce3          	bnez	a5,17e84 <_svfprintf_r+0xd4>
   180b0:	0fc12783          	lw	a5,252(sp)
   180b4:	00078463          	beqz	a5,180bc <_svfprintf_r+0x30c>
   180b8:	4810106f          	j	19d38 <_svfprintf_r+0x1f88>
   180bc:	00c12783          	lw	a5,12(sp)
   180c0:	00c7d783          	lhu	a5,12(a5)
   180c4:	0407f793          	andi	a5,a5,64
   180c8:	00078463          	beqz	a5,180d0 <_svfprintf_r+0x320>
   180cc:	5c40206f          	j	1a690 <_svfprintf_r+0x28e0>
   180d0:	1fc12083          	lw	ra,508(sp)
   180d4:	1f812403          	lw	s0,504(sp)
   180d8:	01012503          	lw	a0,16(sp)
   180dc:	1f412483          	lw	s1,500(sp)
   180e0:	1f012903          	lw	s2,496(sp)
   180e4:	1ec12983          	lw	s3,492(sp)
   180e8:	1e812a03          	lw	s4,488(sp)
   180ec:	1e412a83          	lw	s5,484(sp)
   180f0:	1e012b03          	lw	s6,480(sp)
   180f4:	1dc12b83          	lw	s7,476(sp)
   180f8:	1d812c03          	lw	s8,472(sp)
   180fc:	1d412c83          	lw	s9,468(sp)
   18100:	1d012d03          	lw	s10,464(sp)
   18104:	1cc12d83          	lw	s11,460(sp)
   18108:	20010113          	addi	sp,sp,512
   1810c:	00008067          	ret
   18110:	00098513          	mv	a0,s3
   18114:	e59fc0ef          	jal	ra,14f6c <_localeconv_r>
   18118:	00452783          	lw	a5,4(a0)
   1811c:	00078513          	mv	a0,a5
   18120:	04f12223          	sw	a5,68(sp)
   18124:	c39f50ef          	jal	ra,dd5c <strlen>
   18128:	00050793          	mv	a5,a0
   1812c:	00098513          	mv	a0,s3
   18130:	00078a93          	mv	s5,a5
   18134:	04f12423          	sw	a5,72(sp)
   18138:	e35fc0ef          	jal	ra,14f6c <_localeconv_r>
   1813c:	00852703          	lw	a4,8(a0)
   18140:	02e12e23          	sw	a4,60(sp)
   18144:	000a8463          	beqz	s5,1814c <_svfprintf_r+0x39c>
   18148:	01c0106f          	j	19164 <_svfprintf_r+0x13b4>
   1814c:	0004c883          	lbu	a7,0(s1)
   18150:	db1ff06f          	j	17f00 <_svfprintf_r+0x150>
   18154:	0004c883          	lbu	a7,0(s1)
   18158:	020b6b13          	ori	s6,s6,32
   1815c:	da5ff06f          	j	17f00 <_svfprintf_r+0x150>
   18160:	010b6b13          	ori	s6,s6,16
   18164:	020b7713          	andi	a4,s6,32
   18168:	3c070863          	beqz	a4,18538 <_svfprintf_r+0x788>
   1816c:	01812783          	lw	a5,24(sp)
   18170:	00778a93          	addi	s5,a5,7
   18174:	ff8afa93          	andi	s5,s5,-8
   18178:	004aa703          	lw	a4,4(s5)
   1817c:	000aac03          	lw	s8,0(s5)
   18180:	008a8793          	addi	a5,s5,8
   18184:	00f12c23          	sw	a5,24(sp)
   18188:	00070c93          	mv	s9,a4
   1818c:	3e074063          	bltz	a4,1856c <_svfprintf_r+0x7bc>
   18190:	fff00713          	li	a4,-1
   18194:	000b0293          	mv	t0,s6
   18198:	00e90a63          	beq	s2,a4,181ac <_svfprintf_r+0x3fc>
   1819c:	019c6733          	or	a4,s8,s9
   181a0:	f7fb7293          	andi	t0,s6,-129
   181a4:	00071463          	bnez	a4,181ac <_svfprintf_r+0x3fc>
   181a8:	7f10006f          	j	19198 <_svfprintf_r+0x13e8>
   181ac:	000c8463          	beqz	s9,181b4 <_svfprintf_r+0x404>
   181b0:	3c80106f          	j	19578 <_svfprintf_r+0x17c8>
   181b4:	00900793          	li	a5,9
   181b8:	0187f463          	bgeu	a5,s8,181c0 <_svfprintf_r+0x410>
   181bc:	3bc0106f          	j	19578 <_svfprintf_r+0x17c8>
   181c0:	030c0c13          	addi	s8,s8,48
   181c4:	1b810fa3          	sb	s8,447(sp)
   181c8:	00028b13          	mv	s6,t0
   181cc:	00100c93          	li	s9,1
   181d0:	1bf10b93          	addi	s7,sp,447
   181d4:	0d714703          	lbu	a4,215(sp)
   181d8:	000c8c13          	mv	s8,s9
   181dc:	012cd463          	bge	s9,s2,181e4 <_svfprintf_r+0x434>
   181e0:	00090c13          	mv	s8,s2
   181e4:	00012a23          	sw	zero,20(sp)
   181e8:	02012223          	sw	zero,36(sp)
   181ec:	02012423          	sw	zero,40(sp)
   181f0:	00012e23          	sw	zero,28(sp)
   181f4:	d8070ae3          	beqz	a4,17f88 <_svfprintf_r+0x1d8>
   181f8:	001c0c13          	addi	s8,s8,1
   181fc:	d8dff06f          	j	17f88 <_svfprintf_r+0x1d8>
   18200:	010b6b13          	ori	s6,s6,16
   18204:	020b7713          	andi	a4,s6,32
   18208:	30070063          	beqz	a4,18508 <_svfprintf_r+0x758>
   1820c:	01812783          	lw	a5,24(sp)
   18210:	00778a93          	addi	s5,a5,7
   18214:	ff8afa93          	andi	s5,s5,-8
   18218:	000aac03          	lw	s8,0(s5)
   1821c:	004aac83          	lw	s9,4(s5)
   18220:	008a8793          	addi	a5,s5,8
   18224:	00f12c23          	sw	a5,24(sp)
   18228:	bffb7293          	andi	t0,s6,-1025
   1822c:	00000693          	li	a3,0
   18230:	00000793          	li	a5,0
   18234:	0cf10ba3          	sb	a5,215(sp)
   18238:	fff00793          	li	a5,-1
   1823c:	34f90c63          	beq	s2,a5,18594 <_svfprintf_r+0x7e4>
   18240:	019c6733          	or	a4,s8,s9
   18244:	f7f2fb13          	andi	s6,t0,-129
   18248:	180712e3          	bnez	a4,18bcc <_svfprintf_r+0xe1c>
   1824c:	72091263          	bnez	s2,18970 <_svfprintf_r+0xbc0>
   18250:	620698e3          	bnez	a3,19080 <_svfprintf_r+0x12d0>
   18254:	0012fc93          	andi	s9,t0,1
   18258:	1c010b93          	addi	s7,sp,448
   1825c:	f60c8ce3          	beqz	s9,181d4 <_svfprintf_r+0x424>
   18260:	03000713          	li	a4,48
   18264:	1ae10fa3          	sb	a4,447(sp)
   18268:	1bf10b93          	addi	s7,sp,447
   1826c:	f69ff06f          	j	181d4 <_svfprintf_r+0x424>
   18270:	41748933          	sub	s2,s1,s7
   18274:	c37498e3          	bne	s1,s7,17ea4 <_svfprintf_r+0xf4>
   18278:	0004c783          	lbu	a5,0(s1)
   1827c:	c65ff06f          	j	17ee0 <_svfprintf_r+0x130>
   18280:	00c12583          	lw	a1,12(sp)
   18284:	0f410613          	addi	a2,sp,244
   18288:	00098513          	mv	a0,s3
   1828c:	62c040ef          	jal	ra,1c8b8 <__ssprint_r>
   18290:	e20516e3          	bnez	a0,180bc <_svfprintf_r+0x30c>
   18294:	000d0413          	mv	s0,s10
   18298:	c39ff06f          	j	17ed0 <_svfprintf_r+0x120>
   1829c:	008b7713          	andi	a4,s6,8
   182a0:	66071ae3          	bnez	a4,19114 <_svfprintf_r+0x1364>
   182a4:	01812783          	lw	a5,24(sp)
   182a8:	0c010513          	addi	a0,sp,192
   182ac:	01112a23          	sw	a7,20(sp)
   182b0:	00778a93          	addi	s5,a5,7
   182b4:	ff8afa93          	andi	s5,s5,-8
   182b8:	000aa583          	lw	a1,0(s5)
   182bc:	004aa603          	lw	a2,4(s5)
   182c0:	008a8793          	addi	a5,s5,8
   182c4:	00f12c23          	sw	a5,24(sp)
   182c8:	2bd090ef          	jal	ra,21d84 <__extenddftf2>
   182cc:	0c012583          	lw	a1,192(sp)
   182d0:	0c412603          	lw	a2,196(sp)
   182d4:	0c812683          	lw	a3,200(sp)
   182d8:	0cc12703          	lw	a4,204(sp)
   182dc:	01412883          	lw	a7,20(sp)
   182e0:	10010513          	addi	a0,sp,256
   182e4:	01112a23          	sw	a7,20(sp)
   182e8:	10e12623          	sw	a4,268(sp)
   182ec:	10b12023          	sw	a1,256(sp)
   182f0:	10c12223          	sw	a2,260(sp)
   182f4:	10d12423          	sw	a3,264(sp)
   182f8:	bf5fc0ef          	jal	ra,14eec <_ldcheck>
   182fc:	0ca12e23          	sw	a0,220(sp)
   18300:	00200713          	li	a4,2
   18304:	01412883          	lw	a7,20(sp)
   18308:	00e51463          	bne	a0,a4,18310 <_svfprintf_r+0x560>
   1830c:	4c40106f          	j	197d0 <_svfprintf_r+0x1a20>
   18310:	00100713          	li	a4,1
   18314:	00e51463          	bne	a0,a4,1831c <_svfprintf_r+0x56c>
   18318:	6300106f          	j	19948 <_svfprintf_r+0x1b98>
   1831c:	06100713          	li	a4,97
   18320:	00e89463          	bne	a7,a4,18328 <_svfprintf_r+0x578>
   18324:	78d0106f          	j	1a2b0 <_svfprintf_r+0x2500>
   18328:	04100713          	li	a4,65
   1832c:	00e89463          	bne	a7,a4,18334 <_svfprintf_r+0x584>
   18330:	1f00206f          	j	1a520 <_svfprintf_r+0x2770>
   18334:	fff00713          	li	a4,-1
   18338:	00e91463          	bne	s2,a4,18340 <_svfprintf_r+0x590>
   1833c:	2410106f          	j	19d7c <_svfprintf_r+0x1fcc>
   18340:	fdf8f713          	andi	a4,a7,-33
   18344:	04700693          	li	a3,71
   18348:	00d71463          	bne	a4,a3,18350 <_svfprintf_r+0x5a0>
   1834c:	2f40206f          	j	1a640 <_svfprintf_r+0x2890>
   18350:	10c12e03          	lw	t3,268(sp)
   18354:	100b6793          	ori	a5,s6,256
   18358:	04f12c23          	sw	a5,88(sp)
   1835c:	05612623          	sw	s6,76(sp)
   18360:	10012283          	lw	t0,256(sp)
   18364:	10412f03          	lw	t5,260(sp)
   18368:	10812e83          	lw	t4,264(sp)
   1836c:	000e5463          	bgez	t3,18374 <_svfprintf_r+0x5c4>
   18370:	0a40206f          	j	1a414 <_svfprintf_r+0x2664>
   18374:	06012823          	sw	zero,112(sp)
   18378:	00012a23          	sw	zero,20(sp)
   1837c:	fbf88793          	addi	a5,a7,-65
   18380:	02500713          	li	a4,37
   18384:	00f77463          	bgeu	a4,a5,1838c <_svfprintf_r+0x5dc>
   18388:	74c0106f          	j	19ad4 <_svfprintf_r+0x1d24>
   1838c:	0000c717          	auipc	a4,0xc
   18390:	a3070713          	addi	a4,a4,-1488 # 23dbc <__mprec_bigtens+0x194>
   18394:	00279793          	slli	a5,a5,0x2
   18398:	00e787b3          	add	a5,a5,a4
   1839c:	0007a783          	lw	a5,0(a5)
   183a0:	00e787b3          	add	a5,a5,a4
   183a4:	00078067          	jr	a5
   183a8:	00c12583          	lw	a1,12(sp)
   183ac:	0f410613          	addi	a2,sp,244
   183b0:	00098513          	mv	a0,s3
   183b4:	05112a23          	sw	a7,84(sp)
   183b8:	05e12823          	sw	t5,80(sp)
   183bc:	04512623          	sw	t0,76(sp)
   183c0:	4f8040ef          	jal	ra,1c8b8 <__ssprint_r>
   183c4:	7e051a63          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   183c8:	05412883          	lw	a7,84(sp)
   183cc:	05012f03          	lw	t5,80(sp)
   183d0:	04c12283          	lw	t0,76(sp)
   183d4:	000d0413          	mv	s0,s10
   183d8:	c09ff06f          	j	17fe0 <_svfprintf_r+0x230>
   183dc:	02012783          	lw	a5,32(sp)
   183e0:	00100593          	li	a1,1
   183e4:	00840c93          	addi	s9,s0,8
   183e8:	36f5dae3          	bge	a1,a5,18f5c <_svfprintf_r+0x11ac>
   183ec:	0fc12703          	lw	a4,252(sp)
   183f0:	0f812603          	lw	a2,248(sp)
   183f4:	00100593          	li	a1,1
   183f8:	00170713          	addi	a4,a4,1
   183fc:	00160613          	addi	a2,a2,1
   18400:	00b42223          	sw	a1,4(s0)
   18404:	01742023          	sw	s7,0(s0)
   18408:	0ee12e23          	sw	a4,252(sp)
   1840c:	0ec12c23          	sw	a2,248(sp)
   18410:	00700593          	li	a1,7
   18414:	46c5cce3          	blt	a1,a2,1908c <_svfprintf_r+0x12dc>
   18418:	03012683          	lw	a3,48(sp)
   1841c:	00160913          	addi	s2,a2,1
   18420:	0f212c23          	sw	s2,248(sp)
   18424:	00e687b3          	add	a5,a3,a4
   18428:	03412703          	lw	a4,52(sp)
   1842c:	00dca223          	sw	a3,4(s9)
   18430:	0ef12e23          	sw	a5,252(sp)
   18434:	00eca023          	sw	a4,0(s9)
   18438:	00700613          	li	a2,7
   1843c:	008c8c93          	addi	s9,s9,8
   18440:	472648e3          	blt	a2,s2,190b0 <_svfprintf_r+0x1300>
   18444:	10012603          	lw	a2,256(sp)
   18448:	0b010593          	addi	a1,sp,176
   1844c:	0c010513          	addi	a0,sp,192
   18450:	0cc12023          	sw	a2,192(sp)
   18454:	10412603          	lw	a2,260(sp)
   18458:	00f12e23          	sw	a5,28(sp)
   1845c:	0a012823          	sw	zero,176(sp)
   18460:	0cc12223          	sw	a2,196(sp)
   18464:	10812603          	lw	a2,264(sp)
   18468:	0a012a23          	sw	zero,180(sp)
   1846c:	0a012c23          	sw	zero,184(sp)
   18470:	0cc12423          	sw	a2,200(sp)
   18474:	10c12603          	lw	a2,268(sp)
   18478:	0a012e23          	sw	zero,188(sp)
   1847c:	0cc12623          	sw	a2,204(sp)
   18480:	1d1060ef          	jal	ra,1ee50 <__eqtf2>
   18484:	02012783          	lw	a5,32(sp)
   18488:	fff78413          	addi	s0,a5,-1
   1848c:	01c12783          	lw	a5,28(sp)
   18490:	320500e3          	beqz	a0,18fb0 <_svfprintf_r+0x1200>
   18494:	001b8f93          	addi	t6,s7,1
   18498:	00190913          	addi	s2,s2,1
   1849c:	008787b3          	add	a5,a5,s0
   184a0:	01fca023          	sw	t6,0(s9)
   184a4:	008ca223          	sw	s0,4(s9)
   184a8:	0ef12e23          	sw	a5,252(sp)
   184ac:	0f212c23          	sw	s2,248(sp)
   184b0:	00700613          	li	a2,7
   184b4:	008c8c93          	addi	s9,s9,8
   184b8:	2d264ae3          	blt	a2,s2,18f8c <_svfprintf_r+0x11dc>
   184bc:	04012683          	lw	a3,64(sp)
   184c0:	0e410593          	addi	a1,sp,228
   184c4:	00190613          	addi	a2,s2,1
   184c8:	00f68733          	add	a4,a3,a5
   184cc:	00bca023          	sw	a1,0(s9)
   184d0:	00dca223          	sw	a3,4(s9)
   184d4:	0ee12e23          	sw	a4,252(sp)
   184d8:	0ec12c23          	sw	a2,248(sp)
   184dc:	00700593          	li	a1,7
   184e0:	008c8413          	addi	s0,s9,8
   184e4:	b6c5dce3          	bge	a1,a2,1805c <_svfprintf_r+0x2ac>
   184e8:	00c12583          	lw	a1,12(sp)
   184ec:	0f410613          	addi	a2,sp,244
   184f0:	00098513          	mv	a0,s3
   184f4:	3c4040ef          	jal	ra,1c8b8 <__ssprint_r>
   184f8:	6c051063          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   184fc:	0fc12703          	lw	a4,252(sp)
   18500:	000d0413          	mv	s0,s10
   18504:	b59ff06f          	j	1805c <_svfprintf_r+0x2ac>
   18508:	01812783          	lw	a5,24(sp)
   1850c:	010b7713          	andi	a4,s6,16
   18510:	0007ac03          	lw	s8,0(a5)
   18514:	00478793          	addi	a5,a5,4
   18518:	00f12c23          	sw	a5,24(sp)
   1851c:	3e0718e3          	bnez	a4,1910c <_svfprintf_r+0x135c>
   18520:	040b7713          	andi	a4,s6,64
   18524:	3e0700e3          	beqz	a4,19104 <_svfprintf_r+0x1354>
   18528:	010c1c13          	slli	s8,s8,0x10
   1852c:	010c5c13          	srli	s8,s8,0x10
   18530:	00000c93          	li	s9,0
   18534:	cf5ff06f          	j	18228 <_svfprintf_r+0x478>
   18538:	01812783          	lw	a5,24(sp)
   1853c:	010b7713          	andi	a4,s6,16
   18540:	0007ac03          	lw	s8,0(a5)
   18544:	00478793          	addi	a5,a5,4
   18548:	00f12c23          	sw	a5,24(sp)
   1854c:	3a0716e3          	bnez	a4,190f8 <_svfprintf_r+0x1348>
   18550:	040b7713          	andi	a4,s6,64
   18554:	38070ee3          	beqz	a4,190f0 <_svfprintf_r+0x1340>
   18558:	010c1c13          	slli	s8,s8,0x10
   1855c:	410c5c13          	srai	s8,s8,0x10
   18560:	41fc5c93          	srai	s9,s8,0x1f
   18564:	000c8713          	mv	a4,s9
   18568:	c20754e3          	bgez	a4,18190 <_svfprintf_r+0x3e0>
   1856c:	02d00793          	li	a5,45
   18570:	01803733          	snez	a4,s8
   18574:	41900cb3          	neg	s9,s9
   18578:	0cf10ba3          	sb	a5,215(sp)
   1857c:	fff00793          	li	a5,-1
   18580:	40ec8cb3          	sub	s9,s9,a4
   18584:	41800c33          	neg	s8,s8
   18588:	000b0293          	mv	t0,s6
   1858c:	00100693          	li	a3,1
   18590:	caf918e3          	bne	s2,a5,18240 <_svfprintf_r+0x490>
   18594:	00100793          	li	a5,1
   18598:	c0f68ae3          	beq	a3,a5,181ac <_svfprintf_r+0x3fc>
   1859c:	00200793          	li	a5,2
   185a0:	3ef68463          	beq	a3,a5,18988 <_svfprintf_r+0xbd8>
   185a4:	1c010b93          	addi	s7,sp,448
   185a8:	01dc9713          	slli	a4,s9,0x1d
   185ac:	007c7793          	andi	a5,s8,7
   185b0:	003c5c13          	srli	s8,s8,0x3
   185b4:	03078793          	addi	a5,a5,48
   185b8:	01876c33          	or	s8,a4,s8
   185bc:	003cdc93          	srli	s9,s9,0x3
   185c0:	fefb8fa3          	sb	a5,-1(s7)
   185c4:	019c6733          	or	a4,s8,s9
   185c8:	000b8693          	mv	a3,s7
   185cc:	fffb8b93          	addi	s7,s7,-1
   185d0:	fc071ce3          	bnez	a4,185a8 <_svfprintf_r+0x7f8>
   185d4:	0012f713          	andi	a4,t0,1
   185d8:	3e070263          	beqz	a4,189bc <_svfprintf_r+0xc0c>
   185dc:	03000713          	li	a4,48
   185e0:	3ce78e63          	beq	a5,a4,189bc <_svfprintf_r+0xc0c>
   185e4:	ffe68693          	addi	a3,a3,-2
   185e8:	1c010793          	addi	a5,sp,448
   185ec:	feeb8fa3          	sb	a4,-1(s7)
   185f0:	40d78cb3          	sub	s9,a5,a3
   185f4:	00028b13          	mv	s6,t0
   185f8:	00068b93          	mv	s7,a3
   185fc:	bd9ff06f          	j	181d4 <_svfprintf_r+0x424>
   18600:	01812783          	lw	a5,24(sp)
   18604:	0c010ba3          	sb	zero,215(sp)
   18608:	0007ab83          	lw	s7,0(a5)
   1860c:	00478a93          	addi	s5,a5,4
   18610:	000b9463          	bnez	s7,18618 <_svfprintf_r+0x868>
   18614:	2540106f          	j	19868 <_svfprintf_r+0x1ab8>
   18618:	fff00713          	li	a4,-1
   1861c:	46e90ee3          	beq	s2,a4,19298 <_svfprintf_r+0x14e8>
   18620:	00090613          	mv	a2,s2
   18624:	00000593          	li	a1,0
   18628:	000b8513          	mv	a0,s7
   1862c:	01112c23          	sw	a7,24(sp)
   18630:	b90fd0ef          	jal	ra,159c0 <memchr>
   18634:	00a12a23          	sw	a0,20(sp)
   18638:	01812883          	lw	a7,24(sp)
   1863c:	00051463          	bnez	a0,18644 <_svfprintf_r+0x894>
   18640:	6210106f          	j	1a460 <_svfprintf_r+0x26b0>
   18644:	01412783          	lw	a5,20(sp)
   18648:	0d714703          	lbu	a4,215(sp)
   1864c:	01512c23          	sw	s5,24(sp)
   18650:	41778cb3          	sub	s9,a5,s7
   18654:	fffcc693          	not	a3,s9
   18658:	41f6d693          	srai	a3,a3,0x1f
   1865c:	00012a23          	sw	zero,20(sp)
   18660:	02012223          	sw	zero,36(sp)
   18664:	02012423          	sw	zero,40(sp)
   18668:	00012e23          	sw	zero,28(sp)
   1866c:	00dcfc33          	and	s8,s9,a3
   18670:	00000913          	li	s2,0
   18674:	b80712e3          	bnez	a4,181f8 <_svfprintf_r+0x448>
   18678:	911ff06f          	j	17f88 <_svfprintf_r+0x1d8>
   1867c:	01812783          	lw	a5,24(sp)
   18680:	0c010ba3          	sb	zero,215(sp)
   18684:	00100c13          	li	s8,1
   18688:	0007a703          	lw	a4,0(a5)
   1868c:	00478793          	addi	a5,a5,4
   18690:	00f12c23          	sw	a5,24(sp)
   18694:	14e10e23          	sb	a4,348(sp)
   18698:	00100c93          	li	s9,1
   1869c:	15c10b93          	addi	s7,sp,348
   186a0:	8d5ff06f          	j	17f74 <_svfprintf_r+0x1c4>
   186a4:	01812783          	lw	a5,24(sp)
   186a8:	0007aa03          	lw	s4,0(a5)
   186ac:	00478793          	addi	a5,a5,4
   186b0:	220a5ae3          	bgez	s4,190e4 <_svfprintf_r+0x1334>
   186b4:	41400a33          	neg	s4,s4
   186b8:	00f12c23          	sw	a5,24(sp)
   186bc:	0004c883          	lbu	a7,0(s1)
   186c0:	004b6b13          	ori	s6,s6,4
   186c4:	83dff06f          	j	17f00 <_svfprintf_r+0x150>
   186c8:	02b00793          	li	a5,43
   186cc:	0004c883          	lbu	a7,0(s1)
   186d0:	0cf10ba3          	sb	a5,215(sp)
   186d4:	82dff06f          	j	17f00 <_svfprintf_r+0x150>
   186d8:	0004c883          	lbu	a7,0(s1)
   186dc:	080b6b13          	ori	s6,s6,128
   186e0:	821ff06f          	j	17f00 <_svfprintf_r+0x150>
   186e4:	0004c883          	lbu	a7,0(s1)
   186e8:	02a00793          	li	a5,42
   186ec:	00148713          	addi	a4,s1,1
   186f0:	00f89463          	bne	a7,a5,186f8 <_svfprintf_r+0x948>
   186f4:	0640206f          	j	1a758 <_svfprintf_r+0x29a8>
   186f8:	fd088793          	addi	a5,a7,-48
   186fc:	00900613          	li	a2,9
   18700:	00070493          	mv	s1,a4
   18704:	00000913          	li	s2,0
   18708:	00900693          	li	a3,9
   1870c:	fef66c63          	bltu	a2,a5,17f04 <_svfprintf_r+0x154>
   18710:	0004c883          	lbu	a7,0(s1)
   18714:	00291713          	slli	a4,s2,0x2
   18718:	01270933          	add	s2,a4,s2
   1871c:	00191913          	slli	s2,s2,0x1
   18720:	00f90933          	add	s2,s2,a5
   18724:	fd088793          	addi	a5,a7,-48
   18728:	00148493          	addi	s1,s1,1
   1872c:	fef6f2e3          	bgeu	a3,a5,18710 <_svfprintf_r+0x960>
   18730:	fd4ff06f          	j	17f04 <_svfprintf_r+0x154>
   18734:	0004c883          	lbu	a7,0(s1)
   18738:	001b6b13          	ori	s6,s6,1
   1873c:	fc4ff06f          	j	17f00 <_svfprintf_r+0x150>
   18740:	0d714783          	lbu	a5,215(sp)
   18744:	0004c883          	lbu	a7,0(s1)
   18748:	fa079c63          	bnez	a5,17f00 <_svfprintf_r+0x150>
   1874c:	02000793          	li	a5,32
   18750:	0cf10ba3          	sb	a5,215(sp)
   18754:	facff06f          	j	17f00 <_svfprintf_r+0x150>
   18758:	010b6293          	ori	t0,s6,16
   1875c:	0202f793          	andi	a5,t0,32
   18760:	0c078ae3          	beqz	a5,19034 <_svfprintf_r+0x1284>
   18764:	01812783          	lw	a5,24(sp)
   18768:	00100693          	li	a3,1
   1876c:	00778a93          	addi	s5,a5,7
   18770:	ff8afa93          	andi	s5,s5,-8
   18774:	008a8793          	addi	a5,s5,8
   18778:	000aac03          	lw	s8,0(s5)
   1877c:	004aac83          	lw	s9,4(s5)
   18780:	00f12c23          	sw	a5,24(sp)
   18784:	aadff06f          	j	18230 <_svfprintf_r+0x480>
   18788:	0004c883          	lbu	a7,0(s1)
   1878c:	008b6b13          	ori	s6,s6,8
   18790:	f70ff06f          	j	17f00 <_svfprintf_r+0x150>
   18794:	01812703          	lw	a4,24(sp)
   18798:	ffff87b7          	lui	a5,0xffff8
   1879c:	8307c793          	xori	a5,a5,-2000
   187a0:	0cf11c23          	sh	a5,216(sp)
   187a4:	00470793          	addi	a5,a4,4
   187a8:	00f12c23          	sw	a5,24(sp)
   187ac:	0000b797          	auipc	a5,0xb
   187b0:	df478793          	addi	a5,a5,-524 # 235a0 <__flash_rodata_start+0x150>
   187b4:	00072c03          	lw	s8,0(a4)
   187b8:	00000c93          	li	s9,0
   187bc:	002b6293          	ori	t0,s6,2
   187c0:	02f12c23          	sw	a5,56(sp)
   187c4:	00200693          	li	a3,2
   187c8:	07800893          	li	a7,120
   187cc:	a65ff06f          	j	18230 <_svfprintf_r+0x480>
   187d0:	020b7713          	andi	a4,s6,32
   187d4:	160702e3          	beqz	a4,19138 <_svfprintf_r+0x1388>
   187d8:	01812783          	lw	a5,24(sp)
   187dc:	01012683          	lw	a3,16(sp)
   187e0:	0007a783          	lw	a5,0(a5)
   187e4:	41f6d713          	srai	a4,a3,0x1f
   187e8:	00d7a023          	sw	a3,0(a5)
   187ec:	00e7a223          	sw	a4,4(a5)
   187f0:	01812783          	lw	a5,24(sp)
   187f4:	00048b93          	mv	s7,s1
   187f8:	00478793          	addi	a5,a5,4
   187fc:	00f12c23          	sw	a5,24(sp)
   18800:	8a9ff06f          	j	180a8 <_svfprintf_r+0x2f8>
   18804:	0004c883          	lbu	a7,0(s1)
   18808:	06c00793          	li	a5,108
   1880c:	24f884e3          	beq	a7,a5,19254 <_svfprintf_r+0x14a4>
   18810:	010b6b13          	ori	s6,s6,16
   18814:	eecff06f          	j	17f00 <_svfprintf_r+0x150>
   18818:	0004c883          	lbu	a7,0(s1)
   1881c:	06800793          	li	a5,104
   18820:	22f882e3          	beq	a7,a5,19244 <_svfprintf_r+0x1494>
   18824:	040b6b13          	ori	s6,s6,64
   18828:	ed8ff06f          	j	17f00 <_svfprintf_r+0x150>
   1882c:	06500713          	li	a4,101
   18830:	bb1756e3          	bge	a4,a7,183dc <_svfprintf_r+0x62c>
   18834:	10012703          	lw	a4,256(sp)
   18838:	0b010593          	addi	a1,sp,176
   1883c:	0c010513          	addi	a0,sp,192
   18840:	0ce12023          	sw	a4,192(sp)
   18844:	10412703          	lw	a4,260(sp)
   18848:	0a012823          	sw	zero,176(sp)
   1884c:	0a012a23          	sw	zero,180(sp)
   18850:	0ce12223          	sw	a4,196(sp)
   18854:	10812703          	lw	a4,264(sp)
   18858:	0a012c23          	sw	zero,184(sp)
   1885c:	0a012e23          	sw	zero,188(sp)
   18860:	0ce12423          	sw	a4,200(sp)
   18864:	10c12703          	lw	a4,268(sp)
   18868:	0ce12623          	sw	a4,204(sp)
   1886c:	5e4060ef          	jal	ra,1ee50 <__eqtf2>
   18870:	54051a63          	bnez	a0,18dc4 <_svfprintf_r+0x1014>
   18874:	0fc12703          	lw	a4,252(sp)
   18878:	0f812603          	lw	a2,248(sp)
   1887c:	0000b597          	auipc	a1,0xb
   18880:	d5458593          	addi	a1,a1,-684 # 235d0 <__flash_rodata_start+0x180>
   18884:	00b42023          	sw	a1,0(s0)
   18888:	00170713          	addi	a4,a4,1
   1888c:	00100593          	li	a1,1
   18890:	00160613          	addi	a2,a2,1
   18894:	00b42223          	sw	a1,4(s0)
   18898:	0ee12e23          	sw	a4,252(sp)
   1889c:	0ec12c23          	sw	a2,248(sp)
   188a0:	00700593          	li	a1,7
   188a4:	00840413          	addi	s0,s0,8
   188a8:	6ac5c4e3          	blt	a1,a2,19750 <_svfprintf_r+0x19a0>
   188ac:	0dc12603          	lw	a2,220(sp)
   188b0:	02012783          	lw	a5,32(sp)
   188b4:	02f650e3          	bge	a2,a5,190d4 <_svfprintf_r+0x1324>
   188b8:	03012783          	lw	a5,48(sp)
   188bc:	0f812603          	lw	a2,248(sp)
   188c0:	03412683          	lw	a3,52(sp)
   188c4:	00e78733          	add	a4,a5,a4
   188c8:	00160613          	addi	a2,a2,1
   188cc:	00d42023          	sw	a3,0(s0)
   188d0:	00f42223          	sw	a5,4(s0)
   188d4:	0ee12e23          	sw	a4,252(sp)
   188d8:	0ec12c23          	sw	a2,248(sp)
   188dc:	00700593          	li	a1,7
   188e0:	00840413          	addi	s0,s0,8
   188e4:	14c5c0e3          	blt	a1,a2,19224 <_svfprintf_r+0x1474>
   188e8:	02012783          	lw	a5,32(sp)
   188ec:	fff78913          	addi	s2,a5,-1
   188f0:	f7205663          	blez	s2,1805c <_svfprintf_r+0x2ac>
   188f4:	01000593          	li	a1,16
   188f8:	0f812603          	lw	a2,248(sp)
   188fc:	0000ba97          	auipc	s5,0xb
   18900:	568a8a93          	addi	s5,s5,1384 # 23e64 <zeroes.0>
   18904:	6725dee3          	bge	a1,s2,19780 <_svfprintf_r+0x19d0>
   18908:	000a8793          	mv	a5,s5
   1890c:	01000c93          	li	s9,16
   18910:	00090a93          	mv	s5,s2
   18914:	00700b93          	li	s7,7
   18918:	00048913          	mv	s2,s1
   1891c:	00078493          	mv	s1,a5
   18920:	00c0006f          	j	1892c <_svfprintf_r+0xb7c>
   18924:	ff0a8a93          	addi	s5,s5,-16
   18928:	655cd4e3          	bge	s9,s5,19770 <_svfprintf_r+0x19c0>
   1892c:	01070713          	addi	a4,a4,16
   18930:	00160613          	addi	a2,a2,1
   18934:	00942023          	sw	s1,0(s0)
   18938:	01942223          	sw	s9,4(s0)
   1893c:	0ee12e23          	sw	a4,252(sp)
   18940:	0ec12c23          	sw	a2,248(sp)
   18944:	00840413          	addi	s0,s0,8
   18948:	fccbdee3          	bge	s7,a2,18924 <_svfprintf_r+0xb74>
   1894c:	00c12583          	lw	a1,12(sp)
   18950:	0f410613          	addi	a2,sp,244
   18954:	00098513          	mv	a0,s3
   18958:	761030ef          	jal	ra,1c8b8 <__ssprint_r>
   1895c:	24051e63          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18960:	0fc12703          	lw	a4,252(sp)
   18964:	0f812603          	lw	a2,248(sp)
   18968:	000d0413          	mv	s0,s10
   1896c:	fb9ff06f          	j	18924 <_svfprintf_r+0xb74>
   18970:	00100713          	li	a4,1
   18974:	00e69463          	bne	a3,a4,1897c <_svfprintf_r+0xbcc>
   18978:	3450106f          	j	1a4bc <_svfprintf_r+0x270c>
   1897c:	00200713          	li	a4,2
   18980:	000b0293          	mv	t0,s6
   18984:	c2e690e3          	bne	a3,a4,185a4 <_svfprintf_r+0x7f4>
   18988:	03812683          	lw	a3,56(sp)
   1898c:	1c010b93          	addi	s7,sp,448
   18990:	00fc7793          	andi	a5,s8,15
   18994:	00f687b3          	add	a5,a3,a5
   18998:	0007c703          	lbu	a4,0(a5)
   1899c:	004c5c13          	srli	s8,s8,0x4
   189a0:	01cc9793          	slli	a5,s9,0x1c
   189a4:	0187ec33          	or	s8,a5,s8
   189a8:	004cdc93          	srli	s9,s9,0x4
   189ac:	feeb8fa3          	sb	a4,-1(s7)
   189b0:	019c67b3          	or	a5,s8,s9
   189b4:	fffb8b93          	addi	s7,s7,-1
   189b8:	fc079ce3          	bnez	a5,18990 <_svfprintf_r+0xbe0>
   189bc:	1c010793          	addi	a5,sp,448
   189c0:	41778cb3          	sub	s9,a5,s7
   189c4:	00028b13          	mv	s6,t0
   189c8:	80dff06f          	j	181d4 <_svfprintf_r+0x424>
   189cc:	418a0733          	sub	a4,s4,s8
   189d0:	e4e05863          	blez	a4,18020 <_svfprintf_r+0x270>
   189d4:	01000513          	li	a0,16
   189d8:	0fc12583          	lw	a1,252(sp)
   189dc:	0f812603          	lw	a2,248(sp)
   189e0:	0000ba97          	auipc	s5,0xb
   189e4:	484a8a93          	addi	s5,s5,1156 # 23e64 <zeroes.0>
   189e8:	08e55c63          	bge	a0,a4,18a80 <_svfprintf_r+0xcd0>
   189ec:	04912623          	sw	s1,76(sp)
   189f0:	00040793          	mv	a5,s0
   189f4:	000a8493          	mv	s1,s5
   189f8:	01000e93          	li	t4,16
   189fc:	00090a93          	mv	s5,s2
   18a00:	00700f13          	li	t5,7
   18a04:	00070413          	mv	s0,a4
   18a08:	00088913          	mv	s2,a7
   18a0c:	00c0006f          	j	18a18 <_svfprintf_r+0xc68>
   18a10:	ff040413          	addi	s0,s0,-16
   18a14:	048eda63          	bge	t4,s0,18a68 <_svfprintf_r+0xcb8>
   18a18:	01058593          	addi	a1,a1,16
   18a1c:	00160613          	addi	a2,a2,1
   18a20:	0097a023          	sw	s1,0(a5)
   18a24:	01d7a223          	sw	t4,4(a5)
   18a28:	0eb12e23          	sw	a1,252(sp)
   18a2c:	0ec12c23          	sw	a2,248(sp)
   18a30:	00878793          	addi	a5,a5,8
   18a34:	fccf5ee3          	bge	t5,a2,18a10 <_svfprintf_r+0xc60>
   18a38:	00c12583          	lw	a1,12(sp)
   18a3c:	0f410613          	addi	a2,sp,244
   18a40:	00098513          	mv	a0,s3
   18a44:	675030ef          	jal	ra,1c8b8 <__ssprint_r>
   18a48:	16051863          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18a4c:	01000e93          	li	t4,16
   18a50:	ff040413          	addi	s0,s0,-16
   18a54:	0fc12583          	lw	a1,252(sp)
   18a58:	0f812603          	lw	a2,248(sp)
   18a5c:	000d0793          	mv	a5,s10
   18a60:	00700f13          	li	t5,7
   18a64:	fa8ecae3          	blt	t4,s0,18a18 <_svfprintf_r+0xc68>
   18a68:	00090893          	mv	a7,s2
   18a6c:	000a8913          	mv	s2,s5
   18a70:	00048a93          	mv	s5,s1
   18a74:	04c12483          	lw	s1,76(sp)
   18a78:	00040713          	mv	a4,s0
   18a7c:	00078413          	mv	s0,a5
   18a80:	00b705b3          	add	a1,a4,a1
   18a84:	00160613          	addi	a2,a2,1
   18a88:	00e42223          	sw	a4,4(s0)
   18a8c:	01542023          	sw	s5,0(s0)
   18a90:	0eb12e23          	sw	a1,252(sp)
   18a94:	0ec12c23          	sw	a2,248(sp)
   18a98:	00700713          	li	a4,7
   18a9c:	00840413          	addi	s0,s0,8
   18aa0:	d8c75063          	bge	a4,a2,18020 <_svfprintf_r+0x270>
   18aa4:	00c12583          	lw	a1,12(sp)
   18aa8:	0f410613          	addi	a2,sp,244
   18aac:	00098513          	mv	a0,s3
   18ab0:	05112623          	sw	a7,76(sp)
   18ab4:	605030ef          	jal	ra,1c8b8 <__ssprint_r>
   18ab8:	10051063          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18abc:	41990933          	sub	s2,s2,s9
   18ac0:	04c12883          	lw	a7,76(sp)
   18ac4:	000d0413          	mv	s0,s10
   18ac8:	d7205063          	blez	s2,18028 <_svfprintf_r+0x278>
   18acc:	0fc12603          	lw	a2,252(sp)
   18ad0:	0f812703          	lw	a4,248(sp)
   18ad4:	0000ba97          	auipc	s5,0xb
   18ad8:	390a8a93          	addi	s5,s5,912 # 23e64 <zeroes.0>
   18adc:	092dd063          	bge	s11,s2,18b5c <_svfprintf_r+0xdac>
   18ae0:	00040793          	mv	a5,s0
   18ae4:	00700e93          	li	t4,7
   18ae8:	00090413          	mv	s0,s2
   18aec:	00088913          	mv	s2,a7
   18af0:	00c0006f          	j	18afc <_svfprintf_r+0xd4c>
   18af4:	ff040413          	addi	s0,s0,-16
   18af8:	048ddc63          	bge	s11,s0,18b50 <_svfprintf_r+0xda0>
   18afc:	01060613          	addi	a2,a2,16
   18b00:	00170713          	addi	a4,a4,1
   18b04:	0000b697          	auipc	a3,0xb
   18b08:	36068693          	addi	a3,a3,864 # 23e64 <zeroes.0>
   18b0c:	00d7a023          	sw	a3,0(a5)
   18b10:	01b7a223          	sw	s11,4(a5)
   18b14:	0ec12e23          	sw	a2,252(sp)
   18b18:	0ee12c23          	sw	a4,248(sp)
   18b1c:	00878793          	addi	a5,a5,8
   18b20:	fceedae3          	bge	t4,a4,18af4 <_svfprintf_r+0xd44>
   18b24:	00c12583          	lw	a1,12(sp)
   18b28:	0f410613          	addi	a2,sp,244
   18b2c:	00098513          	mv	a0,s3
   18b30:	589030ef          	jal	ra,1c8b8 <__ssprint_r>
   18b34:	08051263          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18b38:	ff040413          	addi	s0,s0,-16
   18b3c:	0fc12603          	lw	a2,252(sp)
   18b40:	0f812703          	lw	a4,248(sp)
   18b44:	000d0793          	mv	a5,s10
   18b48:	00700e93          	li	t4,7
   18b4c:	fa8dc8e3          	blt	s11,s0,18afc <_svfprintf_r+0xd4c>
   18b50:	00090893          	mv	a7,s2
   18b54:	00040913          	mv	s2,s0
   18b58:	00078413          	mv	s0,a5
   18b5c:	00c90633          	add	a2,s2,a2
   18b60:	00170713          	addi	a4,a4,1
   18b64:	01542023          	sw	s5,0(s0)
   18b68:	01242223          	sw	s2,4(s0)
   18b6c:	0ec12e23          	sw	a2,252(sp)
   18b70:	0ee12c23          	sw	a4,248(sp)
   18b74:	00700613          	li	a2,7
   18b78:	00840413          	addi	s0,s0,8
   18b7c:	cae65663          	bge	a2,a4,18028 <_svfprintf_r+0x278>
   18b80:	00c12583          	lw	a1,12(sp)
   18b84:	0f410613          	addi	a2,sp,244
   18b88:	00098513          	mv	a0,s3
   18b8c:	05112623          	sw	a7,76(sp)
   18b90:	529030ef          	jal	ra,1c8b8 <__ssprint_r>
   18b94:	02051263          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18b98:	04c12883          	lw	a7,76(sp)
   18b9c:	000d0413          	mv	s0,s10
   18ba0:	c88ff06f          	j	18028 <_svfprintf_r+0x278>
   18ba4:	00c12583          	lw	a1,12(sp)
   18ba8:	0f410613          	addi	a2,sp,244
   18bac:	00098513          	mv	a0,s3
   18bb0:	509030ef          	jal	ra,1c8b8 <__ssprint_r>
   18bb4:	cc050a63          	beqz	a0,18088 <_svfprintf_r+0x2d8>
   18bb8:	01412583          	lw	a1,20(sp)
   18bbc:	d0058063          	beqz	a1,180bc <_svfprintf_r+0x30c>
   18bc0:	02c12503          	lw	a0,44(sp)
   18bc4:	e39f80ef          	jal	ra,119fc <_free_r>
   18bc8:	cf4ff06f          	j	180bc <_svfprintf_r+0x30c>
   18bcc:	000b0293          	mv	t0,s6
   18bd0:	9c5ff06f          	j	18594 <_svfprintf_r+0x7e4>
   18bd4:	01000513          	li	a0,16
   18bd8:	0fc12583          	lw	a1,252(sp)
   18bdc:	0f812603          	lw	a2,248(sp)
   18be0:	0000ba97          	auipc	s5,0xb
   18be4:	274a8a93          	addi	s5,s5,628 # 23e54 <blanks.1>
   18be8:	0ae55463          	bge	a0,a4,18c90 <_svfprintf_r+0xee0>
   18bec:	04912623          	sw	s1,76(sp)
   18bf0:	00040793          	mv	a5,s0
   18bf4:	000a8493          	mv	s1,s5
   18bf8:	01000e13          	li	t3,16
   18bfc:	00090a93          	mv	s5,s2
   18c00:	00700393          	li	t2,7
   18c04:	04512823          	sw	t0,80(sp)
   18c08:	05e12a23          	sw	t5,84(sp)
   18c0c:	00070413          	mv	s0,a4
   18c10:	00088913          	mv	s2,a7
   18c14:	00c0006f          	j	18c20 <_svfprintf_r+0xe70>
   18c18:	ff040413          	addi	s0,s0,-16
   18c1c:	048e5a63          	bge	t3,s0,18c70 <_svfprintf_r+0xec0>
   18c20:	01058593          	addi	a1,a1,16
   18c24:	00160613          	addi	a2,a2,1
   18c28:	0097a023          	sw	s1,0(a5)
   18c2c:	01c7a223          	sw	t3,4(a5)
   18c30:	0eb12e23          	sw	a1,252(sp)
   18c34:	0ec12c23          	sw	a2,248(sp)
   18c38:	00878793          	addi	a5,a5,8
   18c3c:	fcc3dee3          	bge	t2,a2,18c18 <_svfprintf_r+0xe68>
   18c40:	00c12583          	lw	a1,12(sp)
   18c44:	0f410613          	addi	a2,sp,244
   18c48:	00098513          	mv	a0,s3
   18c4c:	46d030ef          	jal	ra,1c8b8 <__ssprint_r>
   18c50:	f60514e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18c54:	01000e13          	li	t3,16
   18c58:	ff040413          	addi	s0,s0,-16
   18c5c:	0fc12583          	lw	a1,252(sp)
   18c60:	0f812603          	lw	a2,248(sp)
   18c64:	000d0793          	mv	a5,s10
   18c68:	00700393          	li	t2,7
   18c6c:	fa8e4ae3          	blt	t3,s0,18c20 <_svfprintf_r+0xe70>
   18c70:	00090893          	mv	a7,s2
   18c74:	05012283          	lw	t0,80(sp)
   18c78:	000a8913          	mv	s2,s5
   18c7c:	05412f03          	lw	t5,84(sp)
   18c80:	00048a93          	mv	s5,s1
   18c84:	04c12483          	lw	s1,76(sp)
   18c88:	00040713          	mv	a4,s0
   18c8c:	00078413          	mv	s0,a5
   18c90:	00b705b3          	add	a1,a4,a1
   18c94:	00160613          	addi	a2,a2,1
   18c98:	00e42223          	sw	a4,4(s0)
   18c9c:	01542023          	sw	s5,0(s0)
   18ca0:	0eb12e23          	sw	a1,252(sp)
   18ca4:	0ec12c23          	sw	a2,248(sp)
   18ca8:	00700713          	li	a4,7
   18cac:	00840413          	addi	s0,s0,8
   18cb0:	aec75a63          	bge	a4,a2,17fa4 <_svfprintf_r+0x1f4>
   18cb4:	00c12583          	lw	a1,12(sp)
   18cb8:	0f410613          	addi	a2,sp,244
   18cbc:	00098513          	mv	a0,s3
   18cc0:	05112a23          	sw	a7,84(sp)
   18cc4:	05e12823          	sw	t5,80(sp)
   18cc8:	04512623          	sw	t0,76(sp)
   18ccc:	3ed030ef          	jal	ra,1c8b8 <__ssprint_r>
   18cd0:	ee0514e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18cd4:	05412883          	lw	a7,84(sp)
   18cd8:	05012f03          	lw	t5,80(sp)
   18cdc:	04c12283          	lw	t0,76(sp)
   18ce0:	000d0413          	mv	s0,s10
   18ce4:	ac0ff06f          	j	17fa4 <_svfprintf_r+0x1f4>
   18ce8:	00c12583          	lw	a1,12(sp)
   18cec:	0f410613          	addi	a2,sp,244
   18cf0:	00098513          	mv	a0,s3
   18cf4:	05112823          	sw	a7,80(sp)
   18cf8:	05e12623          	sw	t5,76(sp)
   18cfc:	3bd030ef          	jal	ra,1c8b8 <__ssprint_r>
   18d00:	ea051ce3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18d04:	05012883          	lw	a7,80(sp)
   18d08:	04c12f03          	lw	t5,76(sp)
   18d0c:	000d0413          	mv	s0,s10
   18d10:	b08ff06f          	j	18018 <_svfprintf_r+0x268>
   18d14:	01000613          	li	a2,16
   18d18:	0f812783          	lw	a5,248(sp)
   18d1c:	0000ba97          	auipc	s5,0xb
   18d20:	138a8a93          	addi	s5,s5,312 # 23e54 <blanks.1>
   18d24:	07265263          	bge	a2,s2,18d88 <_svfprintf_r+0xfd8>
   18d28:	00c12b83          	lw	s7,12(sp)
   18d2c:	01000c93          	li	s9,16
   18d30:	00700b13          	li	s6,7
   18d34:	00c0006f          	j	18d40 <_svfprintf_r+0xf90>
   18d38:	ff090913          	addi	s2,s2,-16
   18d3c:	052cd663          	bge	s9,s2,18d88 <_svfprintf_r+0xfd8>
   18d40:	01070713          	addi	a4,a4,16
   18d44:	00178793          	addi	a5,a5,1
   18d48:	01542023          	sw	s5,0(s0)
   18d4c:	01942223          	sw	s9,4(s0)
   18d50:	0ee12e23          	sw	a4,252(sp)
   18d54:	0ef12c23          	sw	a5,248(sp)
   18d58:	00840413          	addi	s0,s0,8
   18d5c:	fcfb5ee3          	bge	s6,a5,18d38 <_svfprintf_r+0xf88>
   18d60:	0f410613          	addi	a2,sp,244
   18d64:	000b8593          	mv	a1,s7
   18d68:	00098513          	mv	a0,s3
   18d6c:	34d030ef          	jal	ra,1c8b8 <__ssprint_r>
   18d70:	e40514e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18d74:	ff090913          	addi	s2,s2,-16
   18d78:	0fc12703          	lw	a4,252(sp)
   18d7c:	0f812783          	lw	a5,248(sp)
   18d80:	000d0413          	mv	s0,s10
   18d84:	fb2ccee3          	blt	s9,s2,18d40 <_svfprintf_r+0xf90>
   18d88:	01270733          	add	a4,a4,s2
   18d8c:	00178793          	addi	a5,a5,1
   18d90:	01542023          	sw	s5,0(s0)
   18d94:	01242223          	sw	s2,4(s0)
   18d98:	0ee12e23          	sw	a4,252(sp)
   18d9c:	0ef12c23          	sw	a5,248(sp)
   18da0:	00700613          	li	a2,7
   18da4:	acf65463          	bge	a2,a5,1806c <_svfprintf_r+0x2bc>
   18da8:	00c12583          	lw	a1,12(sp)
   18dac:	0f410613          	addi	a2,sp,244
   18db0:	00098513          	mv	a0,s3
   18db4:	305030ef          	jal	ra,1c8b8 <__ssprint_r>
   18db8:	e00510e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18dbc:	0fc12703          	lw	a4,252(sp)
   18dc0:	aacff06f          	j	1806c <_svfprintf_r+0x2bc>
   18dc4:	0dc12583          	lw	a1,220(sp)
   18dc8:	0ab05ce3          	blez	a1,19680 <_svfprintf_r+0x18d0>
   18dcc:	02012783          	lw	a5,32(sp)
   18dd0:	00fb8733          	add	a4,s7,a5
   18dd4:	04e12623          	sw	a4,76(sp)
   18dd8:	01c12703          	lw	a4,28(sp)
   18ddc:	00070913          	mv	s2,a4
   18de0:	3ae7c463          	blt	a5,a4,19188 <_svfprintf_r+0x13d8>
   18de4:	0fc12703          	lw	a4,252(sp)
   18de8:	03205663          	blez	s2,18e14 <_svfprintf_r+0x1064>
   18dec:	0f812603          	lw	a2,248(sp)
   18df0:	01270733          	add	a4,a4,s2
   18df4:	01742023          	sw	s7,0(s0)
   18df8:	00160613          	addi	a2,a2,1
   18dfc:	01242223          	sw	s2,4(s0)
   18e00:	0ee12e23          	sw	a4,252(sp)
   18e04:	0ec12c23          	sw	a2,248(sp)
   18e08:	00700593          	li	a1,7
   18e0c:	00840413          	addi	s0,s0,8
   18e10:	46c5c8e3          	blt	a1,a2,19a80 <_svfprintf_r+0x1cd0>
   18e14:	fff94613          	not	a2,s2
   18e18:	01c12783          	lw	a5,28(sp)
   18e1c:	41f65613          	srai	a2,a2,0x1f
   18e20:	00c97833          	and	a6,s2,a2
   18e24:	41078933          	sub	s2,a5,a6
   18e28:	4b204c63          	bgtz	s2,192e0 <_svfprintf_r+0x1530>
   18e2c:	01c12783          	lw	a5,28(sp)
   18e30:	400b7613          	andi	a2,s6,1024
   18e34:	00fb8bb3          	add	s7,s7,a5
   18e38:	52061463          	bnez	a2,19360 <_svfprintf_r+0x15b0>
   18e3c:	0dc12583          	lw	a1,220(sp)
   18e40:	02012783          	lw	a5,32(sp)
   18e44:	00f5c663          	blt	a1,a5,18e50 <_svfprintf_r+0x10a0>
   18e48:	001b7613          	andi	a2,s6,1
   18e4c:	44060ee3          	beqz	a2,19aa8 <_svfprintf_r+0x1cf8>
   18e50:	03012783          	lw	a5,48(sp)
   18e54:	0f812603          	lw	a2,248(sp)
   18e58:	03412683          	lw	a3,52(sp)
   18e5c:	00e78733          	add	a4,a5,a4
   18e60:	00160613          	addi	a2,a2,1
   18e64:	00d42023          	sw	a3,0(s0)
   18e68:	00f42223          	sw	a5,4(s0)
   18e6c:	0ee12e23          	sw	a4,252(sp)
   18e70:	0ec12c23          	sw	a2,248(sp)
   18e74:	00700513          	li	a0,7
   18e78:	00840413          	addi	s0,s0,8
   18e7c:	00c55463          	bge	a0,a2,18e84 <_svfprintf_r+0x10d4>
   18e80:	5b80106f          	j	1a438 <_svfprintf_r+0x2688>
   18e84:	02012783          	lw	a5,32(sp)
   18e88:	40b785b3          	sub	a1,a5,a1
   18e8c:	04c12783          	lw	a5,76(sp)
   18e90:	41778933          	sub	s2,a5,s7
   18e94:	0125d463          	bge	a1,s2,18e9c <_svfprintf_r+0x10ec>
   18e98:	00058913          	mv	s2,a1
   18e9c:	03205863          	blez	s2,18ecc <_svfprintf_r+0x111c>
   18ea0:	0f812603          	lw	a2,248(sp)
   18ea4:	01270733          	add	a4,a4,s2
   18ea8:	01742023          	sw	s7,0(s0)
   18eac:	00160613          	addi	a2,a2,1
   18eb0:	01242223          	sw	s2,4(s0)
   18eb4:	0ee12e23          	sw	a4,252(sp)
   18eb8:	0ec12c23          	sw	a2,248(sp)
   18ebc:	00700513          	li	a0,7
   18ec0:	00840413          	addi	s0,s0,8
   18ec4:	00c55463          	bge	a0,a2,18ecc <_svfprintf_r+0x111c>
   18ec8:	5c40106f          	j	1a48c <_svfprintf_r+0x26dc>
   18ecc:	fff94613          	not	a2,s2
   18ed0:	41f65613          	srai	a2,a2,0x1f
   18ed4:	00c97cb3          	and	s9,s2,a2
   18ed8:	41958933          	sub	s2,a1,s9
   18edc:	99205063          	blez	s2,1805c <_svfprintf_r+0x2ac>
   18ee0:	01000593          	li	a1,16
   18ee4:	0f812603          	lw	a2,248(sp)
   18ee8:	0000ba97          	auipc	s5,0xb
   18eec:	f7ca8a93          	addi	s5,s5,-132 # 23e64 <zeroes.0>
   18ef0:	0925d8e3          	bge	a1,s2,19780 <_svfprintf_r+0x19d0>
   18ef4:	000a8793          	mv	a5,s5
   18ef8:	01000c93          	li	s9,16
   18efc:	00090a93          	mv	s5,s2
   18f00:	00700b93          	li	s7,7
   18f04:	00048913          	mv	s2,s1
   18f08:	00078493          	mv	s1,a5
   18f0c:	00c0006f          	j	18f18 <_svfprintf_r+0x1168>
   18f10:	ff0a8a93          	addi	s5,s5,-16
   18f14:	055cdee3          	bge	s9,s5,19770 <_svfprintf_r+0x19c0>
   18f18:	01070713          	addi	a4,a4,16
   18f1c:	00160613          	addi	a2,a2,1
   18f20:	00942023          	sw	s1,0(s0)
   18f24:	01942223          	sw	s9,4(s0)
   18f28:	0ee12e23          	sw	a4,252(sp)
   18f2c:	0ec12c23          	sw	a2,248(sp)
   18f30:	00840413          	addi	s0,s0,8
   18f34:	fccbdee3          	bge	s7,a2,18f10 <_svfprintf_r+0x1160>
   18f38:	00c12583          	lw	a1,12(sp)
   18f3c:	0f410613          	addi	a2,sp,244
   18f40:	00098513          	mv	a0,s3
   18f44:	175030ef          	jal	ra,1c8b8 <__ssprint_r>
   18f48:	c60518e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18f4c:	0fc12703          	lw	a4,252(sp)
   18f50:	0f812603          	lw	a2,248(sp)
   18f54:	000d0413          	mv	s0,s10
   18f58:	fb9ff06f          	j	18f10 <_svfprintf_r+0x1160>
   18f5c:	001b7713          	andi	a4,s6,1
   18f60:	c8071663          	bnez	a4,183ec <_svfprintf_r+0x63c>
   18f64:	0f812603          	lw	a2,248(sp)
   18f68:	0fc12703          	lw	a4,252(sp)
   18f6c:	01742023          	sw	s7,0(s0)
   18f70:	00160913          	addi	s2,a2,1
   18f74:	00170793          	addi	a5,a4,1
   18f78:	00b42223          	sw	a1,4(s0)
   18f7c:	0ef12e23          	sw	a5,252(sp)
   18f80:	0f212c23          	sw	s2,248(sp)
   18f84:	00700613          	li	a2,7
   18f88:	d3265a63          	bge	a2,s2,184bc <_svfprintf_r+0x70c>
   18f8c:	00c12583          	lw	a1,12(sp)
   18f90:	0f410613          	addi	a2,sp,244
   18f94:	00098513          	mv	a0,s3
   18f98:	121030ef          	jal	ra,1c8b8 <__ssprint_r>
   18f9c:	c0051ee3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   18fa0:	0fc12783          	lw	a5,252(sp)
   18fa4:	0f812903          	lw	s2,248(sp)
   18fa8:	000d0c93          	mv	s9,s10
   18fac:	d10ff06f          	j	184bc <_svfprintf_r+0x70c>
   18fb0:	02012703          	lw	a4,32(sp)
   18fb4:	00100613          	li	a2,1
   18fb8:	d0e65263          	bge	a2,a4,184bc <_svfprintf_r+0x70c>
   18fbc:	01100613          	li	a2,17
   18fc0:	0000ba97          	auipc	s5,0xb
   18fc4:	ea4a8a93          	addi	s5,s5,-348 # 23e64 <zeroes.0>
   18fc8:	16e658e3          	bge	a2,a4,19938 <_svfprintf_r+0x1b88>
   18fcc:	000a8713          	mv	a4,s5
   18fd0:	01000813          	li	a6,16
   18fd4:	00040a93          	mv	s5,s0
   18fd8:	00700b93          	li	s7,7
   18fdc:	00070413          	mv	s0,a4
   18fe0:	00c0006f          	j	18fec <_svfprintf_r+0x123c>
   18fe4:	ff0a8a93          	addi	s5,s5,-16
   18fe8:	155852e3          	bge	a6,s5,1992c <_svfprintf_r+0x1b7c>
   18fec:	01078793          	addi	a5,a5,16
   18ff0:	00190913          	addi	s2,s2,1
   18ff4:	008ca023          	sw	s0,0(s9)
   18ff8:	010ca223          	sw	a6,4(s9)
   18ffc:	0ef12e23          	sw	a5,252(sp)
   19000:	0f212c23          	sw	s2,248(sp)
   19004:	008c8c93          	addi	s9,s9,8
   19008:	fd2bdee3          	bge	s7,s2,18fe4 <_svfprintf_r+0x1234>
   1900c:	00c12583          	lw	a1,12(sp)
   19010:	0f410613          	addi	a2,sp,244
   19014:	00098513          	mv	a0,s3
   19018:	0a1030ef          	jal	ra,1c8b8 <__ssprint_r>
   1901c:	b8051ee3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19020:	0fc12783          	lw	a5,252(sp)
   19024:	0f812903          	lw	s2,248(sp)
   19028:	000d0c93          	mv	s9,s10
   1902c:	01000813          	li	a6,16
   19030:	fb5ff06f          	j	18fe4 <_svfprintf_r+0x1234>
   19034:	01812703          	lw	a4,24(sp)
   19038:	0102f793          	andi	a5,t0,16
   1903c:	00072c03          	lw	s8,0(a4)
   19040:	00470713          	addi	a4,a4,4
   19044:	00e12c23          	sw	a4,24(sp)
   19048:	02079663          	bnez	a5,19074 <_svfprintf_r+0x12c4>
   1904c:	0402f793          	andi	a5,t0,64
   19050:	00078c63          	beqz	a5,19068 <_svfprintf_r+0x12b8>
   19054:	010c1c13          	slli	s8,s8,0x10
   19058:	010c5c13          	srli	s8,s8,0x10
   1905c:	00000c93          	li	s9,0
   19060:	00100693          	li	a3,1
   19064:	9ccff06f          	j	18230 <_svfprintf_r+0x480>
   19068:	2002f793          	andi	a5,t0,512
   1906c:	00078463          	beqz	a5,19074 <_svfprintf_r+0x12c4>
   19070:	0ffc7c13          	zext.b	s8,s8
   19074:	00000c93          	li	s9,0
   19078:	00100693          	li	a3,1
   1907c:	9b4ff06f          	j	18230 <_svfprintf_r+0x480>
   19080:	00000c93          	li	s9,0
   19084:	1c010b93          	addi	s7,sp,448
   19088:	94cff06f          	j	181d4 <_svfprintf_r+0x424>
   1908c:	00c12583          	lw	a1,12(sp)
   19090:	0f410613          	addi	a2,sp,244
   19094:	00098513          	mv	a0,s3
   19098:	021030ef          	jal	ra,1c8b8 <__ssprint_r>
   1909c:	b0051ee3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   190a0:	0fc12703          	lw	a4,252(sp)
   190a4:	0f812603          	lw	a2,248(sp)
   190a8:	000d0c93          	mv	s9,s10
   190ac:	b6cff06f          	j	18418 <_svfprintf_r+0x668>
   190b0:	00c12583          	lw	a1,12(sp)
   190b4:	0f410613          	addi	a2,sp,244
   190b8:	00098513          	mv	a0,s3
   190bc:	7fc030ef          	jal	ra,1c8b8 <__ssprint_r>
   190c0:	ae051ce3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   190c4:	0fc12783          	lw	a5,252(sp)
   190c8:	0f812903          	lw	s2,248(sp)
   190cc:	000d0c93          	mv	s9,s10
   190d0:	b74ff06f          	j	18444 <_svfprintf_r+0x694>
   190d4:	001b7613          	andi	a2,s6,1
   190d8:	00061463          	bnez	a2,190e0 <_svfprintf_r+0x1330>
   190dc:	f81fe06f          	j	1805c <_svfprintf_r+0x2ac>
   190e0:	fd8ff06f          	j	188b8 <_svfprintf_r+0xb08>
   190e4:	0004c883          	lbu	a7,0(s1)
   190e8:	00f12c23          	sw	a5,24(sp)
   190ec:	e15fe06f          	j	17f00 <_svfprintf_r+0x150>
   190f0:	200b7713          	andi	a4,s6,512
   190f4:	420714e3          	bnez	a4,19d1c <_svfprintf_r+0x1f6c>
   190f8:	41fc5c93          	srai	s9,s8,0x1f
   190fc:	000c8713          	mv	a4,s9
   19100:	88cff06f          	j	1818c <_svfprintf_r+0x3dc>
   19104:	200b7713          	andi	a4,s6,512
   19108:	3e071ee3          	bnez	a4,19d04 <_svfprintf_r+0x1f54>
   1910c:	00000c93          	li	s9,0
   19110:	918ff06f          	j	18228 <_svfprintf_r+0x478>
   19114:	01812783          	lw	a5,24(sp)
   19118:	0007a703          	lw	a4,0(a5)
   1911c:	00478793          	addi	a5,a5,4
   19120:	00f12c23          	sw	a5,24(sp)
   19124:	00072583          	lw	a1,0(a4)
   19128:	00472603          	lw	a2,4(a4)
   1912c:	00872683          	lw	a3,8(a4)
   19130:	00c72703          	lw	a4,12(a4)
   19134:	9acff06f          	j	182e0 <_svfprintf_r+0x530>
   19138:	010b7713          	andi	a4,s6,16
   1913c:	70071c63          	bnez	a4,19854 <_svfprintf_r+0x1aa4>
   19140:	040b7713          	andi	a4,s6,64
   19144:	16071ee3          	bnez	a4,19ac0 <_svfprintf_r+0x1d10>
   19148:	200b7793          	andi	a5,s6,512
   1914c:	70078463          	beqz	a5,19854 <_svfprintf_r+0x1aa4>
   19150:	01812783          	lw	a5,24(sp)
   19154:	01012703          	lw	a4,16(sp)
   19158:	0007a783          	lw	a5,0(a5)
   1915c:	00e78023          	sb	a4,0(a5)
   19160:	e90ff06f          	j	187f0 <_svfprintf_r+0xa40>
   19164:	03c12783          	lw	a5,60(sp)
   19168:	0004c883          	lbu	a7,0(s1)
   1916c:	00079463          	bnez	a5,19174 <_svfprintf_r+0x13c4>
   19170:	d91fe06f          	j	17f00 <_svfprintf_r+0x150>
   19174:	0007c783          	lbu	a5,0(a5)
   19178:	00079463          	bnez	a5,19180 <_svfprintf_r+0x13d0>
   1917c:	d85fe06f          	j	17f00 <_svfprintf_r+0x150>
   19180:	400b6b13          	ori	s6,s6,1024
   19184:	d7dfe06f          	j	17f00 <_svfprintf_r+0x150>
   19188:	00078913          	mv	s2,a5
   1918c:	0fc12703          	lw	a4,252(sp)
   19190:	c5204ee3          	bgtz	s2,18dec <_svfprintf_r+0x103c>
   19194:	c81ff06f          	j	18e14 <_svfprintf_r+0x1064>
   19198:	00090463          	beqz	s2,191a0 <_svfprintf_r+0x13f0>
   1919c:	824ff06f          	j	181c0 <_svfprintf_r+0x410>
   191a0:	00000c93          	li	s9,0
   191a4:	00028b13          	mv	s6,t0
   191a8:	1c010b93          	addi	s7,sp,448
   191ac:	828ff06f          	j	181d4 <_svfprintf_r+0x424>
   191b0:	0000a797          	auipc	a5,0xa
   191b4:	40478793          	addi	a5,a5,1028 # 235b4 <__flash_rodata_start+0x164>
   191b8:	02f12c23          	sw	a5,56(sp)
   191bc:	020b7713          	andi	a4,s6,32
   191c0:	34070a63          	beqz	a4,19514 <_svfprintf_r+0x1764>
   191c4:	01812783          	lw	a5,24(sp)
   191c8:	00778a93          	addi	s5,a5,7
   191cc:	ff8afa93          	andi	s5,s5,-8
   191d0:	000aac03          	lw	s8,0(s5)
   191d4:	004aac83          	lw	s9,4(s5)
   191d8:	008a8793          	addi	a5,s5,8
   191dc:	00f12c23          	sw	a5,24(sp)
   191e0:	001b7713          	andi	a4,s6,1
   191e4:	00070e63          	beqz	a4,19200 <_svfprintf_r+0x1450>
   191e8:	019c6733          	or	a4,s8,s9
   191ec:	00070a63          	beqz	a4,19200 <_svfprintf_r+0x1450>
   191f0:	03000713          	li	a4,48
   191f4:	0ce10c23          	sb	a4,216(sp)
   191f8:	0d110ca3          	sb	a7,217(sp)
   191fc:	002b6b13          	ori	s6,s6,2
   19200:	bffb7293          	andi	t0,s6,-1025
   19204:	00200693          	li	a3,2
   19208:	828ff06f          	j	18230 <_svfprintf_r+0x480>
   1920c:	000b0293          	mv	t0,s6
   19210:	d4cff06f          	j	1875c <_svfprintf_r+0x9ac>
   19214:	0000a797          	auipc	a5,0xa
   19218:	38c78793          	addi	a5,a5,908 # 235a0 <__flash_rodata_start+0x150>
   1921c:	02f12c23          	sw	a5,56(sp)
   19220:	f9dff06f          	j	191bc <_svfprintf_r+0x140c>
   19224:	00c12583          	lw	a1,12(sp)
   19228:	0f410613          	addi	a2,sp,244
   1922c:	00098513          	mv	a0,s3
   19230:	688030ef          	jal	ra,1c8b8 <__ssprint_r>
   19234:	980512e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19238:	0fc12703          	lw	a4,252(sp)
   1923c:	000d0413          	mv	s0,s10
   19240:	ea8ff06f          	j	188e8 <_svfprintf_r+0xb38>
   19244:	0014c883          	lbu	a7,1(s1)
   19248:	200b6b13          	ori	s6,s6,512
   1924c:	00148493          	addi	s1,s1,1
   19250:	cb1fe06f          	j	17f00 <_svfprintf_r+0x150>
   19254:	0014c883          	lbu	a7,1(s1)
   19258:	020b6b13          	ori	s6,s6,32
   1925c:	00148493          	addi	s1,s1,1
   19260:	ca1fe06f          	j	17f00 <_svfprintf_r+0x150>
   19264:	02c12503          	lw	a0,44(sp)
   19268:	04000593          	li	a1,64
   1926c:	fb1fb0ef          	jal	ra,1521c <_malloc_r>
   19270:	00c12783          	lw	a5,12(sp)
   19274:	01012f83          	lw	t6,16(sp)
   19278:	00a7a023          	sw	a0,0(a5)
   1927c:	00a7a823          	sw	a0,16(a5)
   19280:	00051463          	bnez	a0,19288 <_svfprintf_r+0x14d8>
   19284:	4000106f          	j	1a684 <_svfprintf_r+0x28d4>
   19288:	00c12703          	lw	a4,12(sp)
   1928c:	04000793          	li	a5,64
   19290:	00f72a23          	sw	a5,20(a4)
   19294:	badfe06f          	j	17e40 <_svfprintf_r+0x90>
   19298:	000b8513          	mv	a0,s7
   1929c:	05112623          	sw	a7,76(sp)
   192a0:	abdf40ef          	jal	ra,dd5c <strlen>
   192a4:	0d714703          	lbu	a4,215(sp)
   192a8:	fff54693          	not	a3,a0
   192ac:	41f6d693          	srai	a3,a3,0x1f
   192b0:	01512c23          	sw	s5,24(sp)
   192b4:	00012a23          	sw	zero,20(sp)
   192b8:	02012223          	sw	zero,36(sp)
   192bc:	02012423          	sw	zero,40(sp)
   192c0:	00012e23          	sw	zero,28(sp)
   192c4:	04c12883          	lw	a7,76(sp)
   192c8:	00050c93          	mv	s9,a0
   192cc:	00d57c33          	and	s8,a0,a3
   192d0:	00000913          	li	s2,0
   192d4:	00070463          	beqz	a4,192dc <_svfprintf_r+0x152c>
   192d8:	f21fe06f          	j	181f8 <_svfprintf_r+0x448>
   192dc:	cadfe06f          	j	17f88 <_svfprintf_r+0x1d8>
   192e0:	01000593          	li	a1,16
   192e4:	0f812603          	lw	a2,248(sp)
   192e8:	0000ba97          	auipc	s5,0xb
   192ec:	b7ca8a93          	addi	s5,s5,-1156 # 23e64 <zeroes.0>
   192f0:	6925da63          	bge	a1,s2,19984 <_svfprintf_r+0x1bd4>
   192f4:	000a8793          	mv	a5,s5
   192f8:	01000893          	li	a7,16
   192fc:	00090a93          	mv	s5,s2
   19300:	00700c93          	li	s9,7
   19304:	00048913          	mv	s2,s1
   19308:	00078493          	mv	s1,a5
   1930c:	00c0006f          	j	19318 <_svfprintf_r+0x1568>
   19310:	ff0a8a93          	addi	s5,s5,-16
   19314:	6758d063          	bge	a7,s5,19974 <_svfprintf_r+0x1bc4>
   19318:	01070713          	addi	a4,a4,16
   1931c:	00160613          	addi	a2,a2,1
   19320:	00942023          	sw	s1,0(s0)
   19324:	01142223          	sw	a7,4(s0)
   19328:	0ee12e23          	sw	a4,252(sp)
   1932c:	0ec12c23          	sw	a2,248(sp)
   19330:	00840413          	addi	s0,s0,8
   19334:	fcccdee3          	bge	s9,a2,19310 <_svfprintf_r+0x1560>
   19338:	00c12583          	lw	a1,12(sp)
   1933c:	0f410613          	addi	a2,sp,244
   19340:	00098513          	mv	a0,s3
   19344:	574030ef          	jal	ra,1c8b8 <__ssprint_r>
   19348:	860518e3          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   1934c:	0fc12703          	lw	a4,252(sp)
   19350:	0f812603          	lw	a2,248(sp)
   19354:	000d0413          	mv	s0,s10
   19358:	01000893          	li	a7,16
   1935c:	fb5ff06f          	j	19310 <_svfprintf_r+0x1560>
   19360:	02812c83          	lw	s9,40(sp)
   19364:	04912823          	sw	s1,80(sp)
   19368:	05612a23          	sw	s6,84(sp)
   1936c:	03812423          	sw	s8,40(sp)
   19370:	05412c23          	sw	s4,88(sp)
   19374:	00040693          	mv	a3,s0
   19378:	000b8c13          	mv	s8,s7
   1937c:	03c12b03          	lw	s6,60(sp)
   19380:	04812403          	lw	s0,72(sp)
   19384:	02412b83          	lw	s7,36(sp)
   19388:	00c12483          	lw	s1,12(sp)
   1938c:	00700893          	li	a7,7
   19390:	01000913          	li	s2,16
   19394:	0000ba97          	auipc	s5,0xb
   19398:	ad0a8a93          	addi	s5,s5,-1328 # 23e64 <zeroes.0>
   1939c:	080c8863          	beqz	s9,1942c <_svfprintf_r+0x167c>
   193a0:	160b8463          	beqz	s7,19508 <_svfprintf_r+0x1758>
   193a4:	fffb8b93          	addi	s7,s7,-1
   193a8:	04412783          	lw	a5,68(sp)
   193ac:	00870733          	add	a4,a4,s0
   193b0:	0086a223          	sw	s0,4(a3)
   193b4:	00f6a023          	sw	a5,0(a3)
   193b8:	0f812783          	lw	a5,248(sp)
   193bc:	0ee12e23          	sw	a4,252(sp)
   193c0:	00868693          	addi	a3,a3,8
   193c4:	00178793          	addi	a5,a5,1
   193c8:	0ef12c23          	sw	a5,248(sp)
   193cc:	16f8cc63          	blt	a7,a5,19544 <_svfprintf_r+0x1794>
   193d0:	04c12783          	lw	a5,76(sp)
   193d4:	000b4603          	lbu	a2,0(s6)
   193d8:	41878a33          	sub	s4,a5,s8
   193dc:	01465463          	bge	a2,s4,193e4 <_svfprintf_r+0x1634>
   193e0:	00060a13          	mv	s4,a2
   193e4:	03405663          	blez	s4,19410 <_svfprintf_r+0x1660>
   193e8:	0f812603          	lw	a2,248(sp)
   193ec:	01470733          	add	a4,a4,s4
   193f0:	0186a023          	sw	s8,0(a3)
   193f4:	00160613          	addi	a2,a2,1
   193f8:	0146a223          	sw	s4,4(a3)
   193fc:	0ee12e23          	sw	a4,252(sp)
   19400:	0ec12c23          	sw	a2,248(sp)
   19404:	3ac8c263          	blt	a7,a2,197a8 <_svfprintf_r+0x19f8>
   19408:	000b4603          	lbu	a2,0(s6)
   1940c:	00868693          	addi	a3,a3,8
   19410:	fffa4593          	not	a1,s4
   19414:	41f5d593          	srai	a1,a1,0x1f
   19418:	00ba77b3          	and	a5,s4,a1
   1941c:	40f60a33          	sub	s4,a2,a5
   19420:	03404e63          	bgtz	s4,1945c <_svfprintf_r+0x16ac>
   19424:	00cc0c33          	add	s8,s8,a2
   19428:	f60c9ce3          	bnez	s9,193a0 <_svfprintf_r+0x15f0>
   1942c:	f60b9ce3          	bnez	s7,193a4 <_svfprintf_r+0x15f4>
   19430:	04c12783          	lw	a5,76(sp)
   19434:	03612e23          	sw	s6,60(sp)
   19438:	000c0b93          	mv	s7,s8
   1943c:	05012483          	lw	s1,80(sp)
   19440:	05412b03          	lw	s6,84(sp)
   19444:	05812a03          	lw	s4,88(sp)
   19448:	02812c03          	lw	s8,40(sp)
   1944c:	00068413          	mv	s0,a3
   19450:	9f77f6e3          	bgeu	a5,s7,18e3c <_svfprintf_r+0x108c>
   19454:	00078b93          	mv	s7,a5
   19458:	9e5ff06f          	j	18e3c <_svfprintf_r+0x108c>
   1945c:	0f812603          	lw	a2,248(sp)
   19460:	0000b597          	auipc	a1,0xb
   19464:	a0458593          	addi	a1,a1,-1532 # 23e64 <zeroes.0>
   19468:	07495a63          	bge	s2,s4,194dc <_svfprintf_r+0x172c>
   1946c:	00812e23          	sw	s0,28(sp)
   19470:	000a0413          	mv	s0,s4
   19474:	000a8a13          	mv	s4,s5
   19478:	00c0006f          	j	19484 <_svfprintf_r+0x16d4>
   1947c:	ff040413          	addi	s0,s0,-16
   19480:	04895863          	bge	s2,s0,194d0 <_svfprintf_r+0x1720>
   19484:	01070713          	addi	a4,a4,16
   19488:	00160613          	addi	a2,a2,1
   1948c:	0156a023          	sw	s5,0(a3)
   19490:	0126a223          	sw	s2,4(a3)
   19494:	0ee12e23          	sw	a4,252(sp)
   19498:	0ec12c23          	sw	a2,248(sp)
   1949c:	00868693          	addi	a3,a3,8
   194a0:	fcc8dee3          	bge	a7,a2,1947c <_svfprintf_r+0x16cc>
   194a4:	0f410613          	addi	a2,sp,244
   194a8:	00048593          	mv	a1,s1
   194ac:	00098513          	mv	a0,s3
   194b0:	408030ef          	jal	ra,1c8b8 <__ssprint_r>
   194b4:	f0051263          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   194b8:	ff040413          	addi	s0,s0,-16
   194bc:	0fc12703          	lw	a4,252(sp)
   194c0:	0f812603          	lw	a2,248(sp)
   194c4:	000d0693          	mv	a3,s10
   194c8:	00700893          	li	a7,7
   194cc:	fa894ce3          	blt	s2,s0,19484 <_svfprintf_r+0x16d4>
   194d0:	000a0593          	mv	a1,s4
   194d4:	00040a13          	mv	s4,s0
   194d8:	01c12403          	lw	s0,28(sp)
   194dc:	00ea0733          	add	a4,s4,a4
   194e0:	00160613          	addi	a2,a2,1
   194e4:	00b6a023          	sw	a1,0(a3)
   194e8:	0146a223          	sw	s4,4(a3)
   194ec:	0ee12e23          	sw	a4,252(sp)
   194f0:	0ec12c23          	sw	a2,248(sp)
   194f4:	58c8c0e3          	blt	a7,a2,1a274 <_svfprintf_r+0x24c4>
   194f8:	000b4603          	lbu	a2,0(s6)
   194fc:	00868693          	addi	a3,a3,8
   19500:	00cc0c33          	add	s8,s8,a2
   19504:	f25ff06f          	j	19428 <_svfprintf_r+0x1678>
   19508:	fffb0b13          	addi	s6,s6,-1
   1950c:	fffc8c93          	addi	s9,s9,-1
   19510:	e99ff06f          	j	193a8 <_svfprintf_r+0x15f8>
   19514:	01812783          	lw	a5,24(sp)
   19518:	010b7713          	andi	a4,s6,16
   1951c:	0007ac03          	lw	s8,0(a5)
   19520:	00478793          	addi	a5,a5,4
   19524:	00f12c23          	sw	a5,24(sp)
   19528:	04071463          	bnez	a4,19570 <_svfprintf_r+0x17c0>
   1952c:	040b7713          	andi	a4,s6,64
   19530:	02070c63          	beqz	a4,19568 <_svfprintf_r+0x17b8>
   19534:	010c1c13          	slli	s8,s8,0x10
   19538:	010c5c13          	srli	s8,s8,0x10
   1953c:	00000c93          	li	s9,0
   19540:	ca1ff06f          	j	191e0 <_svfprintf_r+0x1430>
   19544:	0f410613          	addi	a2,sp,244
   19548:	00048593          	mv	a1,s1
   1954c:	00098513          	mv	a0,s3
   19550:	368030ef          	jal	ra,1c8b8 <__ssprint_r>
   19554:	e6051263          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19558:	0fc12703          	lw	a4,252(sp)
   1955c:	000d0693          	mv	a3,s10
   19560:	00700893          	li	a7,7
   19564:	e6dff06f          	j	193d0 <_svfprintf_r+0x1620>
   19568:	200b7713          	andi	a4,s6,512
   1956c:	7a071263          	bnez	a4,19d10 <_svfprintf_r+0x1f60>
   19570:	00000c93          	li	s9,0
   19574:	c6dff06f          	j	191e0 <_svfprintf_r+0x1430>
   19578:	ccccdeb7          	lui	t4,0xccccd
   1957c:	03c12703          	lw	a4,60(sp)
   19580:	4002ff13          	andi	t5,t0,1024
   19584:	00000593          	li	a1,0
   19588:	1c010613          	addi	a2,sp,448
   1958c:	00500e13          	li	t3,5
   19590:	ccde8813          	addi	a6,t4,-819 # cccccccd <__alt_data_end+0xccc8cccd>
   19594:	ccce8b13          	addi	s6,t4,-820
   19598:	0ff00a93          	li	s5,255
   1959c:	0540006f          	j	195f0 <_svfprintf_r+0x1840>
   195a0:	018bb7b3          	sltu	a5,s7,s8
   195a4:	00fb87b3          	add	a5,s7,a5
   195a8:	03c7f7b3          	remu	a5,a5,t3
   195ac:	40fc07b3          	sub	a5,s8,a5
   195b0:	00fc3633          	sltu	a2,s8,a5
   195b4:	40cc8633          	sub	a2,s9,a2
   195b8:	03678333          	mul	t1,a5,s6
   195bc:	03060633          	mul	a2,a2,a6
   195c0:	0307b533          	mulhu	a0,a5,a6
   195c4:	00660633          	add	a2,a2,t1
   195c8:	030787b3          	mul	a5,a5,a6
   195cc:	00a60633          	add	a2,a2,a0
   195d0:	01f61513          	slli	a0,a2,0x1f
   195d4:	00165613          	srli	a2,a2,0x1
   195d8:	0017d793          	srli	a5,a5,0x1
   195dc:	00f567b3          	or	a5,a0,a5
   195e0:	4c0c82e3          	beqz	s9,1a2a4 <_svfprintf_r+0x24f4>
   195e4:	00060c93          	mv	s9,a2
   195e8:	00078c13          	mv	s8,a5
   195ec:	00068613          	mv	a2,a3
   195f0:	019c0bb3          	add	s7,s8,s9
   195f4:	018bb7b3          	sltu	a5,s7,s8
   195f8:	00fb87b3          	add	a5,s7,a5
   195fc:	03c7f7b3          	remu	a5,a5,t3
   19600:	fff60693          	addi	a3,a2,-1
   19604:	00158593          	addi	a1,a1,1
   19608:	40fc07b3          	sub	a5,s8,a5
   1960c:	00fc3533          	sltu	a0,s8,a5
   19610:	40ac8533          	sub	a0,s9,a0
   19614:	0307b333          	mulhu	t1,a5,a6
   19618:	03050533          	mul	a0,a0,a6
   1961c:	030787b3          	mul	a5,a5,a6
   19620:	00650533          	add	a0,a0,t1
   19624:	01f51513          	slli	a0,a0,0x1f
   19628:	0017d793          	srli	a5,a5,0x1
   1962c:	00f567b3          	or	a5,a0,a5
   19630:	00279513          	slli	a0,a5,0x2
   19634:	00f507b3          	add	a5,a0,a5
   19638:	00179793          	slli	a5,a5,0x1
   1963c:	40fc07b3          	sub	a5,s8,a5
   19640:	03078793          	addi	a5,a5,48
   19644:	fef60fa3          	sb	a5,-1(a2)
   19648:	f40f0ce3          	beqz	t5,195a0 <_svfprintf_r+0x17f0>
   1964c:	00074783          	lbu	a5,0(a4)
   19650:	f4f598e3          	bne	a1,a5,195a0 <_svfprintf_r+0x17f0>
   19654:	f55586e3          	beq	a1,s5,195a0 <_svfprintf_r+0x17f0>
   19658:	360c9863          	bnez	s9,199c8 <_svfprintf_r+0x1c18>
   1965c:	00900793          	li	a5,9
   19660:	3787e463          	bltu	a5,s8,199c8 <_svfprintf_r+0x1c18>
   19664:	00068b93          	mv	s7,a3
   19668:	1c010793          	addi	a5,sp,448
   1966c:	02e12e23          	sw	a4,60(sp)
   19670:	02b12023          	sw	a1,32(sp)
   19674:	41778cb3          	sub	s9,a5,s7
   19678:	00028b13          	mv	s6,t0
   1967c:	b59fe06f          	j	181d4 <_svfprintf_r+0x424>
   19680:	0fc12703          	lw	a4,252(sp)
   19684:	0f812603          	lw	a2,248(sp)
   19688:	0000a517          	auipc	a0,0xa
   1968c:	f4850513          	addi	a0,a0,-184 # 235d0 <__flash_rodata_start+0x180>
   19690:	00a42023          	sw	a0,0(s0)
   19694:	00170713          	addi	a4,a4,1
   19698:	00100513          	li	a0,1
   1969c:	00160613          	addi	a2,a2,1
   196a0:	00a42223          	sw	a0,4(s0)
   196a4:	0ee12e23          	sw	a4,252(sp)
   196a8:	0ec12c23          	sw	a2,248(sp)
   196ac:	00700513          	li	a0,7
   196b0:	00840413          	addi	s0,s0,8
   196b4:	06c54c63          	blt	a0,a2,1972c <_svfprintf_r+0x197c>
   196b8:	1c059863          	bnez	a1,19888 <_svfprintf_r+0x1ad8>
   196bc:	02012783          	lw	a5,32(sp)
   196c0:	001b7613          	andi	a2,s6,1
   196c4:	00f66633          	or	a2,a2,a5
   196c8:	00061463          	bnez	a2,196d0 <_svfprintf_r+0x1920>
   196cc:	991fe06f          	j	1805c <_svfprintf_r+0x2ac>
   196d0:	03012783          	lw	a5,48(sp)
   196d4:	0f812603          	lw	a2,248(sp)
   196d8:	03412683          	lw	a3,52(sp)
   196dc:	00e78733          	add	a4,a5,a4
   196e0:	00160613          	addi	a2,a2,1
   196e4:	00d42023          	sw	a3,0(s0)
   196e8:	00f42223          	sw	a5,4(s0)
   196ec:	0ee12e23          	sw	a4,252(sp)
   196f0:	0ec12c23          	sw	a2,248(sp)
   196f4:	00700593          	li	a1,7
   196f8:	64c5ca63          	blt	a1,a2,19d4c <_svfprintf_r+0x1f9c>
   196fc:	00840413          	addi	s0,s0,8
   19700:	02012783          	lw	a5,32(sp)
   19704:	00160613          	addi	a2,a2,1
   19708:	01742023          	sw	s7,0(s0)
   1970c:	00e78733          	add	a4,a5,a4
   19710:	00f42223          	sw	a5,4(s0)
   19714:	0ee12e23          	sw	a4,252(sp)
   19718:	0ec12c23          	sw	a2,248(sp)
   1971c:	00700593          	li	a1,7
   19720:	00c5c463          	blt	a1,a2,19728 <_svfprintf_r+0x1978>
   19724:	935fe06f          	j	18058 <_svfprintf_r+0x2a8>
   19728:	dc1fe06f          	j	184e8 <_svfprintf_r+0x738>
   1972c:	00c12583          	lw	a1,12(sp)
   19730:	0f410613          	addi	a2,sp,244
   19734:	00098513          	mv	a0,s3
   19738:	180030ef          	jal	ra,1c8b8 <__ssprint_r>
   1973c:	c6051e63          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19740:	0dc12583          	lw	a1,220(sp)
   19744:	0fc12703          	lw	a4,252(sp)
   19748:	000d0413          	mv	s0,s10
   1974c:	f6dff06f          	j	196b8 <_svfprintf_r+0x1908>
   19750:	00c12583          	lw	a1,12(sp)
   19754:	0f410613          	addi	a2,sp,244
   19758:	00098513          	mv	a0,s3
   1975c:	15c030ef          	jal	ra,1c8b8 <__ssprint_r>
   19760:	c4051c63          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19764:	0fc12703          	lw	a4,252(sp)
   19768:	000d0413          	mv	s0,s10
   1976c:	940ff06f          	j	188ac <_svfprintf_r+0xafc>
   19770:	00048793          	mv	a5,s1
   19774:	00090493          	mv	s1,s2
   19778:	000a8913          	mv	s2,s5
   1977c:	00078a93          	mv	s5,a5
   19780:	01542023          	sw	s5,0(s0)
   19784:	01242223          	sw	s2,4(s0)
   19788:	01270733          	add	a4,a4,s2
   1978c:	00160613          	addi	a2,a2,1
   19790:	0ee12e23          	sw	a4,252(sp)
   19794:	0ec12c23          	sw	a2,248(sp)
   19798:	00700593          	li	a1,7
   1979c:	00c5c463          	blt	a1,a2,197a4 <_svfprintf_r+0x19f4>
   197a0:	8b9fe06f          	j	18058 <_svfprintf_r+0x2a8>
   197a4:	d45fe06f          	j	184e8 <_svfprintf_r+0x738>
   197a8:	0f410613          	addi	a2,sp,244
   197ac:	00048593          	mv	a1,s1
   197b0:	00098513          	mv	a0,s3
   197b4:	104030ef          	jal	ra,1c8b8 <__ssprint_r>
   197b8:	c0051063          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   197bc:	000b4603          	lbu	a2,0(s6)
   197c0:	0fc12703          	lw	a4,252(sp)
   197c4:	000d0693          	mv	a3,s10
   197c8:	00700893          	li	a7,7
   197cc:	c45ff06f          	j	19410 <_svfprintf_r+0x1660>
   197d0:	10012703          	lw	a4,256(sp)
   197d4:	0b010593          	addi	a1,sp,176
   197d8:	0c010513          	addi	a0,sp,192
   197dc:	0ce12023          	sw	a4,192(sp)
   197e0:	10412703          	lw	a4,260(sp)
   197e4:	0a012823          	sw	zero,176(sp)
   197e8:	0a012a23          	sw	zero,180(sp)
   197ec:	0ce12223          	sw	a4,196(sp)
   197f0:	10812703          	lw	a4,264(sp)
   197f4:	0a012c23          	sw	zero,184(sp)
   197f8:	0a012e23          	sw	zero,188(sp)
   197fc:	0ce12423          	sw	a4,200(sp)
   19800:	10c12703          	lw	a4,268(sp)
   19804:	0ce12623          	sw	a4,204(sp)
   19808:	071050ef          	jal	ra,1f078 <__letf2>
   1980c:	01412883          	lw	a7,20(sp)
   19810:	40054ee3          	bltz	a0,1a42c <_svfprintf_r+0x267c>
   19814:	0d714703          	lbu	a4,215(sp)
   19818:	04700693          	li	a3,71
   1981c:	0000ab97          	auipc	s7,0xa
   19820:	d74b8b93          	addi	s7,s7,-652 # 23590 <__flash_rodata_start+0x140>
   19824:	2516c863          	blt	a3,a7,19a74 <_svfprintf_r+0x1cc4>
   19828:	00012a23          	sw	zero,20(sp)
   1982c:	02012223          	sw	zero,36(sp)
   19830:	02012423          	sw	zero,40(sp)
   19834:	00012e23          	sw	zero,28(sp)
   19838:	f7fb7b13          	andi	s6,s6,-129
   1983c:	00300c13          	li	s8,3
   19840:	00300c93          	li	s9,3
   19844:	00000913          	li	s2,0
   19848:	00070463          	beqz	a4,19850 <_svfprintf_r+0x1aa0>
   1984c:	9adfe06f          	j	181f8 <_svfprintf_r+0x448>
   19850:	f38fe06f          	j	17f88 <_svfprintf_r+0x1d8>
   19854:	01812783          	lw	a5,24(sp)
   19858:	01012703          	lw	a4,16(sp)
   1985c:	0007a783          	lw	a5,0(a5)
   19860:	00e7a023          	sw	a4,0(a5)
   19864:	f8dfe06f          	j	187f0 <_svfprintf_r+0xa40>
   19868:	00600713          	li	a4,6
   1986c:	00090c93          	mv	s9,s2
   19870:	23276863          	bltu	a4,s2,19aa0 <_svfprintf_r+0x1cf0>
   19874:	000c8c13          	mv	s8,s9
   19878:	01512c23          	sw	s5,24(sp)
   1987c:	0000ab97          	auipc	s7,0xa
   19880:	d4cb8b93          	addi	s7,s7,-692 # 235c8 <__flash_rodata_start+0x178>
   19884:	ef0fe06f          	j	17f74 <_svfprintf_r+0x1c4>
   19888:	03012783          	lw	a5,48(sp)
   1988c:	0f812603          	lw	a2,248(sp)
   19890:	03412683          	lw	a3,52(sp)
   19894:	00e78733          	add	a4,a5,a4
   19898:	00160613          	addi	a2,a2,1
   1989c:	00d42023          	sw	a3,0(s0)
   198a0:	00f42223          	sw	a5,4(s0)
   198a4:	0ee12e23          	sw	a4,252(sp)
   198a8:	0ec12c23          	sw	a2,248(sp)
   198ac:	00700513          	li	a0,7
   198b0:	00840413          	addi	s0,s0,8
   198b4:	48c54c63          	blt	a0,a2,19d4c <_svfprintf_r+0x1f9c>
   198b8:	e405d4e3          	bgez	a1,19700 <_svfprintf_r+0x1950>
   198bc:	ff000513          	li	a0,-16
   198c0:	40b00933          	neg	s2,a1
   198c4:	0000aa97          	auipc	s5,0xa
   198c8:	5a0a8a93          	addi	s5,s5,1440 # 23e64 <zeroes.0>
   198cc:	01000c93          	li	s9,16
   198d0:	00700813          	li	a6,7
   198d4:	00a5c863          	blt	a1,a0,198e4 <_svfprintf_r+0x1b34>
   198d8:	4ed0006f          	j	1a5c4 <_svfprintf_r+0x2814>
   198dc:	ff090913          	addi	s2,s2,-16
   198e0:	4f2cd2e3          	bge	s9,s2,1a5c4 <_svfprintf_r+0x2814>
   198e4:	01070713          	addi	a4,a4,16
   198e8:	00160613          	addi	a2,a2,1
   198ec:	01542023          	sw	s5,0(s0)
   198f0:	01942223          	sw	s9,4(s0)
   198f4:	0ee12e23          	sw	a4,252(sp)
   198f8:	0ec12c23          	sw	a2,248(sp)
   198fc:	00840413          	addi	s0,s0,8
   19900:	fcc85ee3          	bge	a6,a2,198dc <_svfprintf_r+0x1b2c>
   19904:	00c12583          	lw	a1,12(sp)
   19908:	0f410613          	addi	a2,sp,244
   1990c:	00098513          	mv	a0,s3
   19910:	7a9020ef          	jal	ra,1c8b8 <__ssprint_r>
   19914:	aa051263          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19918:	0fc12703          	lw	a4,252(sp)
   1991c:	0f812603          	lw	a2,248(sp)
   19920:	000d0413          	mv	s0,s10
   19924:	00700813          	li	a6,7
   19928:	fb5ff06f          	j	198dc <_svfprintf_r+0x1b2c>
   1992c:	00040713          	mv	a4,s0
   19930:	000a8413          	mv	s0,s5
   19934:	00070a93          	mv	s5,a4
   19938:	008787b3          	add	a5,a5,s0
   1993c:	00190913          	addi	s2,s2,1
   19940:	015ca023          	sw	s5,0(s9)
   19944:	b61fe06f          	j	184a4 <_svfprintf_r+0x6f4>
   19948:	10c12703          	lw	a4,268(sp)
   1994c:	3e075263          	bgez	a4,19d30 <_svfprintf_r+0x1f80>
   19950:	02d00713          	li	a4,45
   19954:	0ce10ba3          	sb	a4,215(sp)
   19958:	04700693          	li	a3,71
   1995c:	0000ab97          	auipc	s7,0xa
   19960:	c3cb8b93          	addi	s7,s7,-964 # 23598 <__flash_rodata_start+0x148>
   19964:	ed16d2e3          	bge	a3,a7,19828 <_svfprintf_r+0x1a78>
   19968:	0000ab97          	auipc	s7,0xa
   1996c:	c34b8b93          	addi	s7,s7,-972 # 2359c <__flash_rodata_start+0x14c>
   19970:	eb9ff06f          	j	19828 <_svfprintf_r+0x1a78>
   19974:	00048793          	mv	a5,s1
   19978:	00090493          	mv	s1,s2
   1997c:	000a8913          	mv	s2,s5
   19980:	00078a93          	mv	s5,a5
   19984:	00e90733          	add	a4,s2,a4
   19988:	00160613          	addi	a2,a2,1
   1998c:	01542023          	sw	s5,0(s0)
   19990:	01242223          	sw	s2,4(s0)
   19994:	0ee12e23          	sw	a4,252(sp)
   19998:	0ec12c23          	sw	a2,248(sp)
   1999c:	00700593          	li	a1,7
   199a0:	00840413          	addi	s0,s0,8
   199a4:	c8c5d463          	bge	a1,a2,18e2c <_svfprintf_r+0x107c>
   199a8:	00c12583          	lw	a1,12(sp)
   199ac:	0f410613          	addi	a2,sp,244
   199b0:	00098513          	mv	a0,s3
   199b4:	705020ef          	jal	ra,1c8b8 <__ssprint_r>
   199b8:	a0051063          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   199bc:	0fc12703          	lw	a4,252(sp)
   199c0:	000d0413          	mv	s0,s10
   199c4:	c68ff06f          	j	18e2c <_svfprintf_r+0x107c>
   199c8:	04812783          	lw	a5,72(sp)
   199cc:	04412583          	lw	a1,68(sp)
   199d0:	03e12423          	sw	t5,40(sp)
   199d4:	40f686b3          	sub	a3,a3,a5
   199d8:	00078613          	mv	a2,a5
   199dc:	00068513          	mv	a0,a3
   199e0:	02512223          	sw	t0,36(sp)
   199e4:	03112023          	sw	a7,32(sp)
   199e8:	00e12e23          	sw	a4,28(sp)
   199ec:	00d12a23          	sw	a3,20(sp)
   199f0:	b14fe0ef          	jal	ra,17d04 <strncpy>
   199f4:	018bb7b3          	sltu	a5,s7,s8
   199f8:	00500613          	li	a2,5
   199fc:	00fb87b3          	add	a5,s7,a5
   19a00:	02c7f7b3          	remu	a5,a5,a2
   19a04:	01c12703          	lw	a4,28(sp)
   19a08:	ccccd537          	lui	a0,0xccccd
   19a0c:	ccd50313          	addi	t1,a0,-819 # cccccccd <__alt_data_end+0xccc8cccd>
   19a10:	00174603          	lbu	a2,1(a4)
   19a14:	ccc50513          	addi	a0,a0,-820
   19a18:	01412683          	lw	a3,20(sp)
   19a1c:	00c03633          	snez	a2,a2
   19a20:	00c70733          	add	a4,a4,a2
   19a24:	02012883          	lw	a7,32(sp)
   19a28:	02412283          	lw	t0,36(sp)
   19a2c:	02812f03          	lw	t5,40(sp)
   19a30:	00000593          	li	a1,0
   19a34:	00500e13          	li	t3,5
   19a38:	00030813          	mv	a6,t1
   19a3c:	40fc07b3          	sub	a5,s8,a5
   19a40:	00fc3633          	sltu	a2,s8,a5
   19a44:	40cc8633          	sub	a2,s9,a2
   19a48:	02a78533          	mul	a0,a5,a0
   19a4c:	02660633          	mul	a2,a2,t1
   19a50:	0267beb3          	mulhu	t4,a5,t1
   19a54:	00a60633          	add	a2,a2,a0
   19a58:	02678533          	mul	a0,a5,t1
   19a5c:	01d60633          	add	a2,a2,t4
   19a60:	01f61793          	slli	a5,a2,0x1f
   19a64:	00165613          	srli	a2,a2,0x1
   19a68:	00155513          	srli	a0,a0,0x1
   19a6c:	00a7e7b3          	or	a5,a5,a0
   19a70:	b75ff06f          	j	195e4 <_svfprintf_r+0x1834>
   19a74:	0000ab97          	auipc	s7,0xa
   19a78:	b20b8b93          	addi	s7,s7,-1248 # 23594 <__flash_rodata_start+0x144>
   19a7c:	dadff06f          	j	19828 <_svfprintf_r+0x1a78>
   19a80:	00c12583          	lw	a1,12(sp)
   19a84:	0f410613          	addi	a2,sp,244
   19a88:	00098513          	mv	a0,s3
   19a8c:	62d020ef          	jal	ra,1c8b8 <__ssprint_r>
   19a90:	92051463          	bnez	a0,18bb8 <_svfprintf_r+0xe08>
   19a94:	0fc12703          	lw	a4,252(sp)
   19a98:	000d0413          	mv	s0,s10
   19a9c:	b78ff06f          	j	18e14 <_svfprintf_r+0x1064>
   19aa0:	00600c93          	li	s9,6
   19aa4:	dd1ff06f          	j	19874 <_svfprintf_r+0x1ac4>
   19aa8:	40b785b3          	sub	a1,a5,a1
   19aac:	04c12783          	lw	a5,76(sp)
   19ab0:	41778933          	sub	s2,a5,s7
   19ab4:	c125dc63          	bge	a1,s2,18ecc <_svfprintf_r+0x111c>
   19ab8:	00058913          	mv	s2,a1
   19abc:	c10ff06f          	j	18ecc <_svfprintf_r+0x111c>
   19ac0:	01812783          	lw	a5,24(sp)
   19ac4:	01012703          	lw	a4,16(sp)
   19ac8:	0007a783          	lw	a5,0(a5)
   19acc:	00e79023          	sh	a4,0(a5)
   19ad0:	d21fe06f          	j	187f0 <_svfprintf_r+0xa40>
   19ad4:	00090693          	mv	a3,s2
   19ad8:	00200613          	li	a2,2
   19adc:	0c010b13          	addi	s6,sp,192
   19ae0:	0e010793          	addi	a5,sp,224
   19ae4:	0ec10813          	addi	a6,sp,236
   19ae8:	0dc10713          	addi	a4,sp,220
   19aec:	000b0593          	mv	a1,s6
   19af0:	00098513          	mv	a0,s3
   19af4:	05112a23          	sw	a7,84(sp)
   19af8:	04d12823          	sw	a3,80(sp)
   19afc:	0c512023          	sw	t0,192(sp)
   19b00:	02512423          	sw	t0,40(sp)
   19b04:	0de12223          	sw	t5,196(sp)
   19b08:	03e12223          	sw	t5,36(sp)
   19b0c:	0dd12423          	sw	t4,200(sp)
   19b10:	03d12023          	sw	t4,32(sp)
   19b14:	0dc12623          	sw	t3,204(sp)
   19b18:	01c12e23          	sw	t3,28(sp)
   19b1c:	8b8fa0ef          	jal	ra,13bd4 <_ldtoa_r>
   19b20:	05412883          	lw	a7,84(sp)
   19b24:	06700793          	li	a5,103
   19b28:	01c12e03          	lw	t3,28(sp)
   19b2c:	02012e83          	lw	t4,32(sp)
   19b30:	02412f03          	lw	t5,36(sp)
   19b34:	02812283          	lw	t0,40(sp)
   19b38:	05012683          	lw	a3,80(sp)
   19b3c:	00050b93          	mv	s7,a0
   19b40:	68f88663          	beq	a7,a5,1a1cc <_svfprintf_r+0x241c>
   19b44:	04700793          	li	a5,71
   19b48:	68f88263          	beq	a7,a5,1a1cc <_svfprintf_r+0x241c>
   19b4c:	fdf8fa93          	andi	s5,a7,-33
   19b50:	04600613          	li	a2,70
   19b54:	00d50c33          	add	s8,a0,a3
   19b58:	0b010c93          	addi	s9,sp,176
   19b5c:	00ca9c63          	bne	s5,a2,19b74 <_svfprintf_r+0x1dc4>
   19b60:	00054583          	lbu	a1,0(a0)
   19b64:	03000613          	li	a2,48
   19b68:	20c58e63          	beq	a1,a2,19d84 <_svfprintf_r+0x1fd4>
   19b6c:	0dc12683          	lw	a3,220(sp)
   19b70:	00dc0c33          	add	s8,s8,a3
   19b74:	000b0513          	mv	a0,s6
   19b78:	000c8593          	mv	a1,s9
   19b7c:	01112e23          	sw	a7,28(sp)
   19b80:	0c512023          	sw	t0,192(sp)
   19b84:	0de12223          	sw	t5,196(sp)
   19b88:	0dd12423          	sw	t4,200(sp)
   19b8c:	0dc12623          	sw	t3,204(sp)
   19b90:	0a012823          	sw	zero,176(sp)
   19b94:	0a012a23          	sw	zero,180(sp)
   19b98:	0a012c23          	sw	zero,184(sp)
   19b9c:	0a012e23          	sw	zero,188(sp)
   19ba0:	2b0050ef          	jal	ra,1ee50 <__eqtf2>
   19ba4:	01c12883          	lw	a7,28(sp)
   19ba8:	000c0b13          	mv	s6,s8
   19bac:	02050263          	beqz	a0,19bd0 <_svfprintf_r+0x1e20>
   19bb0:	0ec12b03          	lw	s6,236(sp)
   19bb4:	018b7e63          	bgeu	s6,s8,19bd0 <_svfprintf_r+0x1e20>
   19bb8:	03000613          	li	a2,48
   19bbc:	001b0793          	addi	a5,s6,1
   19bc0:	0ef12623          	sw	a5,236(sp)
   19bc4:	00cb0023          	sb	a2,0(s6)
   19bc8:	0ec12b03          	lw	s6,236(sp)
   19bcc:	ff8b68e3          	bltu	s6,s8,19bbc <_svfprintf_r+0x1e0c>
   19bd0:	417b07b3          	sub	a5,s6,s7
   19bd4:	02f12023          	sw	a5,32(sp)
   19bd8:	0dc12683          	lw	a3,220(sp)
   19bdc:	04700793          	li	a5,71
   19be0:	00d12e23          	sw	a3,28(sp)
   19be4:	60fa8263          	beq	s5,a5,1a1e8 <_svfprintf_r+0x2438>
   19be8:	04600793          	li	a5,70
   19bec:	10fa88e3          	beq	s5,a5,1a4fc <_svfprintf_r+0x274c>
   19bf0:	fff68793          	addi	a5,a3,-1
   19bf4:	0cf12e23          	sw	a5,220(sp)
   19bf8:	06100713          	li	a4,97
   19bfc:	34e88ae3          	beq	a7,a4,1a750 <_svfprintf_r+0x29a0>
   19c00:	04100613          	li	a2,65
   19c04:	05000713          	li	a4,80
   19c08:	5ec89e63          	bne	a7,a2,1a204 <_svfprintf_r+0x2454>
   19c0c:	00100613          	li	a2,1
   19c10:	0ee10223          	sb	a4,228(sp)
   19c14:	02b00713          	li	a4,43
   19c18:	0007d863          	bgez	a5,19c28 <_svfprintf_r+0x1e78>
   19c1c:	00100793          	li	a5,1
   19c20:	40d787b3          	sub	a5,a5,a3
   19c24:	02d00713          	li	a4,45
   19c28:	0ee102a3          	sb	a4,229(sp)
   19c2c:	00900713          	li	a4,9
   19c30:	10f754e3          	bge	a4,a5,1a538 <_svfprintf_r+0x2788>
   19c34:	0f310813          	addi	a6,sp,243
   19c38:	00080693          	mv	a3,a6
   19c3c:	00a00613          	li	a2,10
   19c40:	06300e13          	li	t3,99
   19c44:	02c7e733          	rem	a4,a5,a2
   19c48:	00068513          	mv	a0,a3
   19c4c:	00078593          	mv	a1,a5
   19c50:	fff68693          	addi	a3,a3,-1
   19c54:	03070713          	addi	a4,a4,48
   19c58:	fee50fa3          	sb	a4,-1(a0)
   19c5c:	02c7c7b3          	div	a5,a5,a2
   19c60:	febe42e3          	blt	t3,a1,19c44 <_svfprintf_r+0x1e94>
   19c64:	03078793          	addi	a5,a5,48
   19c68:	ffe50713          	addi	a4,a0,-2
   19c6c:	fef68fa3          	sb	a5,-1(a3)
   19c70:	350774e3          	bgeu	a4,a6,1a7b8 <_svfprintf_r+0x2a08>
   19c74:	0e610793          	addi	a5,sp,230
   19c78:	00074683          	lbu	a3,0(a4)
   19c7c:	00170713          	addi	a4,a4,1
   19c80:	00178793          	addi	a5,a5,1
   19c84:	fed78fa3          	sb	a3,-1(a5)
   19c88:	ff0718e3          	bne	a4,a6,19c78 <_svfprintf_r+0x1ec8>
   19c8c:	0f510793          	addi	a5,sp,245
   19c90:	0e610713          	addi	a4,sp,230
   19c94:	40a787b3          	sub	a5,a5,a0
   19c98:	00f707b3          	add	a5,a4,a5
   19c9c:	0e410713          	addi	a4,sp,228
   19ca0:	40e787b3          	sub	a5,a5,a4
   19ca4:	04f12023          	sw	a5,64(sp)
   19ca8:	04012683          	lw	a3,64(sp)
   19cac:	02012703          	lw	a4,32(sp)
   19cb0:	00100793          	li	a5,1
   19cb4:	00e68cb3          	add	s9,a3,a4
   19cb8:	16e7dce3          	bge	a5,a4,1a630 <_svfprintf_r+0x2880>
   19cbc:	03012783          	lw	a5,48(sp)
   19cc0:	00fc8cb3          	add	s9,s9,a5
   19cc4:	04c12783          	lw	a5,76(sp)
   19cc8:	fffcc693          	not	a3,s9
   19ccc:	41f6d693          	srai	a3,a3,0x1f
   19cd0:	bff7f793          	andi	a5,a5,-1025
   19cd4:	1007eb13          	ori	s6,a5,256
   19cd8:	00dcfc33          	and	s8,s9,a3
   19cdc:	02012223          	sw	zero,36(sp)
   19ce0:	02012423          	sw	zero,40(sp)
   19ce4:	00012e23          	sw	zero,28(sp)
   19ce8:	07012783          	lw	a5,112(sp)
   19cec:	52078263          	beqz	a5,1a210 <_svfprintf_r+0x2460>
   19cf0:	02d00713          	li	a4,45
   19cf4:	0ce10ba3          	sb	a4,215(sp)
   19cf8:	00000913          	li	s2,0
   19cfc:	001c0c13          	addi	s8,s8,1
   19d00:	a88fe06f          	j	17f88 <_svfprintf_r+0x1d8>
   19d04:	0ffc7c13          	zext.b	s8,s8
   19d08:	00000c93          	li	s9,0
   19d0c:	d1cfe06f          	j	18228 <_svfprintf_r+0x478>
   19d10:	0ffc7c13          	zext.b	s8,s8
   19d14:	00000c93          	li	s9,0
   19d18:	cc8ff06f          	j	191e0 <_svfprintf_r+0x1430>
   19d1c:	018c1c13          	slli	s8,s8,0x18
   19d20:	418c5c13          	srai	s8,s8,0x18
   19d24:	41fc5c93          	srai	s9,s8,0x1f
   19d28:	000c8713          	mv	a4,s9
   19d2c:	c60fe06f          	j	1818c <_svfprintf_r+0x3dc>
   19d30:	0d714703          	lbu	a4,215(sp)
   19d34:	c25ff06f          	j	19958 <_svfprintf_r+0x1ba8>
   19d38:	00c12583          	lw	a1,12(sp)
   19d3c:	02c12503          	lw	a0,44(sp)
   19d40:	0f410613          	addi	a2,sp,244
   19d44:	375020ef          	jal	ra,1c8b8 <__ssprint_r>
   19d48:	b74fe06f          	j	180bc <_svfprintf_r+0x30c>
   19d4c:	00c12583          	lw	a1,12(sp)
   19d50:	0f410613          	addi	a2,sp,244
   19d54:	00098513          	mv	a0,s3
   19d58:	361020ef          	jal	ra,1c8b8 <__ssprint_r>
   19d5c:	00050463          	beqz	a0,19d64 <_svfprintf_r+0x1fb4>
   19d60:	e59fe06f          	j	18bb8 <_svfprintf_r+0xe08>
   19d64:	0dc12583          	lw	a1,220(sp)
   19d68:	0fc12703          	lw	a4,252(sp)
   19d6c:	0f812603          	lw	a2,248(sp)
   19d70:	000d0413          	mv	s0,s10
   19d74:	9805d6e3          	bgez	a1,19700 <_svfprintf_r+0x1950>
   19d78:	b45ff06f          	j	198bc <_svfprintf_r+0x1b0c>
   19d7c:	00600913          	li	s2,6
   19d80:	dd0fe06f          	j	18350 <_svfprintf_r+0x5a0>
   19d84:	000c8593          	mv	a1,s9
   19d88:	000b0513          	mv	a0,s6
   19d8c:	05112823          	sw	a7,80(sp)
   19d90:	0c512023          	sw	t0,192(sp)
   19d94:	02512423          	sw	t0,40(sp)
   19d98:	0de12223          	sw	t5,196(sp)
   19d9c:	03e12223          	sw	t5,36(sp)
   19da0:	0dd12423          	sw	t4,200(sp)
   19da4:	03d12023          	sw	t4,32(sp)
   19da8:	0dc12623          	sw	t3,204(sp)
   19dac:	01c12e23          	sw	t3,28(sp)
   19db0:	04d12a23          	sw	a3,84(sp)
   19db4:	0a012823          	sw	zero,176(sp)
   19db8:	0a012a23          	sw	zero,180(sp)
   19dbc:	0a012c23          	sw	zero,184(sp)
   19dc0:	0a012e23          	sw	zero,188(sp)
   19dc4:	08c050ef          	jal	ra,1ee50 <__eqtf2>
   19dc8:	01c12e03          	lw	t3,28(sp)
   19dcc:	02012e83          	lw	t4,32(sp)
   19dd0:	02412f03          	lw	t5,36(sp)
   19dd4:	02812283          	lw	t0,40(sp)
   19dd8:	05012883          	lw	a7,80(sp)
   19ddc:	d80508e3          	beqz	a0,19b6c <_svfprintf_r+0x1dbc>
   19de0:	05412683          	lw	a3,84(sp)
   19de4:	00100613          	li	a2,1
   19de8:	40d606b3          	sub	a3,a2,a3
   19dec:	0cd12e23          	sw	a3,220(sp)
   19df0:	d81ff06f          	j	19b70 <_svfprintf_r+0x1dc0>
   19df4:	00190693          	addi	a3,s2,1
   19df8:	00200613          	li	a2,2
   19dfc:	ce1ff06f          	j	19adc <_svfprintf_r+0x1d2c>
   19e00:	00090693          	mv	a3,s2
   19e04:	00300613          	li	a2,3
   19e08:	cd5ff06f          	j	19adc <_svfprintf_r+0x1d2c>
   19e0c:	0c010b13          	addi	s6,sp,192
   19e10:	000b0513          	mv	a0,s6
   19e14:	05112e23          	sw	a7,92(sp)
   19e18:	0c512023          	sw	t0,192(sp)
   19e1c:	0de12223          	sw	t5,196(sp)
   19e20:	0dd12423          	sw	t4,200(sp)
   19e24:	0dc12623          	sw	t3,204(sp)
   19e28:	1bc080ef          	jal	ra,21fe4 <__trunctfdf2>
   19e2c:	0dc10613          	addi	a2,sp,220
   19e30:	d38fd0ef          	jal	ra,17368 <frexp>
   19e34:	00058613          	mv	a2,a1
   19e38:	00050593          	mv	a1,a0
   19e3c:	000b0513          	mv	a0,s6
   19e40:	745070ef          	jal	ra,21d84 <__extenddftf2>
   19e44:	0c012e03          	lw	t3,192(sp)
   19e48:	0000a797          	auipc	a5,0xa
   19e4c:	9b878793          	addi	a5,a5,-1608 # 23800 <zeroes.0+0x18>
   19e50:	0007a803          	lw	a6,0(a5)
   19e54:	0bc12023          	sw	t3,160(sp)
   19e58:	0c412e03          	lw	t3,196(sp)
   19e5c:	0047a683          	lw	a3,4(a5)
   19e60:	0087a703          	lw	a4,8(a5)
   19e64:	0bc12223          	sw	t3,164(sp)
   19e68:	0c812e03          	lw	t3,200(sp)
   19e6c:	00c7a783          	lw	a5,12(a5)
   19e70:	0a010613          	addi	a2,sp,160
   19e74:	0bc12423          	sw	t3,168(sp)
   19e78:	0cc12e03          	lw	t3,204(sp)
   19e7c:	0b010c93          	addi	s9,sp,176
   19e80:	00060593          	mv	a1,a2
   19e84:	00c12e23          	sw	a2,28(sp)
   19e88:	000c8513          	mv	a0,s9
   19e8c:	09010613          	addi	a2,sp,144
   19e90:	04c12a23          	sw	a2,84(sp)
   19e94:	0bc12623          	sw	t3,172(sp)
   19e98:	09012823          	sw	a6,144(sp)
   19e9c:	08d12a23          	sw	a3,148(sp)
   19ea0:	08e12c23          	sw	a4,152(sp)
   19ea4:	08f12e23          	sw	a5,156(sp)
   19ea8:	324050ef          	jal	ra,1f1cc <__multf3>
   19eac:	0b012703          	lw	a4,176(sp)
   19eb0:	0b412683          	lw	a3,180(sp)
   19eb4:	0b812803          	lw	a6,184(sp)
   19eb8:	0bc12e03          	lw	t3,188(sp)
   19ebc:	000c8593          	mv	a1,s9
   19ec0:	000b0513          	mv	a0,s6
   19ec4:	0ce12023          	sw	a4,192(sp)
   19ec8:	04e12823          	sw	a4,80(sp)
   19ecc:	0cd12223          	sw	a3,196(sp)
   19ed0:	02d12423          	sw	a3,40(sp)
   19ed4:	0d012423          	sw	a6,200(sp)
   19ed8:	03012223          	sw	a6,36(sp)
   19edc:	0dc12623          	sw	t3,204(sp)
   19ee0:	03c12023          	sw	t3,32(sp)
   19ee4:	0a012823          	sw	zero,176(sp)
   19ee8:	0a012a23          	sw	zero,180(sp)
   19eec:	0a012c23          	sw	zero,184(sp)
   19ef0:	0a012e23          	sw	zero,188(sp)
   19ef4:	75d040ef          	jal	ra,1ee50 <__eqtf2>
   19ef8:	02012e03          	lw	t3,32(sp)
   19efc:	02412803          	lw	a6,36(sp)
   19f00:	02812683          	lw	a3,40(sp)
   19f04:	05012703          	lw	a4,80(sp)
   19f08:	05c12883          	lw	a7,92(sp)
   19f0c:	00051e63          	bnez	a0,19f28 <_svfprintf_r+0x2178>
   19f10:	00100793          	li	a5,1
   19f14:	0cf12e23          	sw	a5,220(sp)
   19f18:	06100793          	li	a5,97
   19f1c:	00009397          	auipc	t2,0x9
   19f20:	68438393          	addi	t2,t2,1668 # 235a0 <__flash_rodata_start+0x150>
   19f24:	00f88663          	beq	a7,a5,19f30 <_svfprintf_r+0x2180>
   19f28:	00009397          	auipc	t2,0x9
   19f2c:	68c38393          	addi	t2,t2,1676 # 235b4 <__flash_rodata_start+0x164>
   19f30:	0000a797          	auipc	a5,0xa
   19f34:	8e078793          	addi	a5,a5,-1824 # 23810 <zeroes.0+0x28>
   19f38:	0007a603          	lw	a2,0(a5)
   19f3c:	06912a23          	sw	s1,116(sp)
   19f40:	07412e23          	sw	s4,124(sp)
   19f44:	06c12023          	sw	a2,96(sp)
   19f48:	0047a603          	lw	a2,4(a5)
   19f4c:	09312423          	sw	s3,136(sp)
   19f50:	09712623          	sw	s7,140(sp)
   19f54:	06c12223          	sw	a2,100(sp)
   19f58:	0087a603          	lw	a2,8(a5)
   19f5c:	00c7a783          	lw	a5,12(a5)
   19f60:	000b8993          	mv	s3,s7
   19f64:	06c12423          	sw	a2,104(sp)
   19f68:	06f12623          	sw	a5,108(sp)
   19f6c:	fff90c13          	addi	s8,s2,-1
   19f70:	07112c23          	sw	a7,120(sp)
   19f74:	09212023          	sw	s2,128(sp)
   19f78:	08812223          	sw	s0,132(sp)
   19f7c:	04712823          	sw	t2,80(sp)
   19f80:	00070a13          	mv	s4,a4
   19f84:	00068a93          	mv	s5,a3
   19f88:	00080b93          	mv	s7,a6
   19f8c:	000e0493          	mv	s1,t3
   19f90:	0540006f          	j	19fe4 <_svfprintf_r+0x2234>
   19f94:	000c8593          	mv	a1,s9
   19f98:	000b0513          	mv	a0,s6
   19f9c:	02512423          	sw	t0,40(sp)
   19fa0:	03e12223          	sw	t5,36(sp)
   19fa4:	02c12023          	sw	a2,32(sp)
   19fa8:	0cc12223          	sw	a2,196(sp)
   19fac:	0de12423          	sw	t5,200(sp)
   19fb0:	0c512623          	sw	t0,204(sp)
   19fb4:	0d212023          	sw	s2,192(sp)
   19fb8:	0a012823          	sw	zero,176(sp)
   19fbc:	0a012a23          	sw	zero,180(sp)
   19fc0:	0a012c23          	sw	zero,184(sp)
   19fc4:	0a012e23          	sw	zero,188(sp)
   19fc8:	689040ef          	jal	ra,1ee50 <__eqtf2>
   19fcc:	fffc0593          	addi	a1,s8,-1
   19fd0:	000a8613          	mv	a2,s5
   19fd4:	000b8f13          	mv	t5,s7
   19fd8:	00048293          	mv	t0,s1
   19fdc:	66050a63          	beqz	a0,1a650 <_svfprintf_r+0x28a0>
   19fe0:	00058c13          	mv	s8,a1
   19fe4:	06012783          	lw	a5,96(sp)
   19fe8:	01c12603          	lw	a2,28(sp)
   19fec:	000c8593          	mv	a1,s9
   19ff0:	0af12023          	sw	a5,160(sp)
   19ff4:	06412783          	lw	a5,100(sp)
   19ff8:	000b0513          	mv	a0,s6
   19ffc:	0b412823          	sw	s4,176(sp)
   1a000:	0af12223          	sw	a5,164(sp)
   1a004:	06812783          	lw	a5,104(sp)
   1a008:	0b512a23          	sw	s5,180(sp)
   1a00c:	0b712c23          	sw	s7,184(sp)
   1a010:	0af12423          	sw	a5,168(sp)
   1a014:	06c12783          	lw	a5,108(sp)
   1a018:	0a912e23          	sw	s1,188(sp)
   1a01c:	0af12623          	sw	a5,172(sp)
   1a020:	1ac050ef          	jal	ra,1f1cc <__multf3>
   1a024:	000b0513          	mv	a0,s6
   1a028:	2cd070ef          	jal	ra,21af4 <__fixtfsi>
   1a02c:	00050593          	mv	a1,a0
   1a030:	00050413          	mv	s0,a0
   1a034:	000b0513          	mv	a0,s6
   1a038:	0c012a03          	lw	s4,192(sp)
   1a03c:	0c412903          	lw	s2,196(sp)
   1a040:	0c812483          	lw	s1,200(sp)
   1a044:	0cc12a83          	lw	s5,204(sp)
   1a048:	3a9070ef          	jal	ra,21bf0 <__floatsitf>
   1a04c:	0c012703          	lw	a4,192(sp)
   1a050:	05412603          	lw	a2,84(sp)
   1a054:	01c12583          	lw	a1,28(sp)
   1a058:	08e12823          	sw	a4,144(sp)
   1a05c:	0c412703          	lw	a4,196(sp)
   1a060:	000c8513          	mv	a0,s9
   1a064:	0b412023          	sw	s4,160(sp)
   1a068:	08e12a23          	sw	a4,148(sp)
   1a06c:	0c812703          	lw	a4,200(sp)
   1a070:	0b212223          	sw	s2,164(sp)
   1a074:	0a912423          	sw	s1,168(sp)
   1a078:	08e12c23          	sw	a4,152(sp)
   1a07c:	0cc12703          	lw	a4,204(sp)
   1a080:	0b512623          	sw	s5,172(sp)
   1a084:	08e12e23          	sw	a4,156(sp)
   1a088:	2f0060ef          	jal	ra,20378 <__subtf3>
   1a08c:	05012783          	lw	a5,80(sp)
   1a090:	0b012903          	lw	s2,176(sp)
   1a094:	0b412603          	lw	a2,180(sp)
   1a098:	00878733          	add	a4,a5,s0
   1a09c:	00074703          	lbu	a4,0(a4)
   1a0a0:	0b812f03          	lw	t5,184(sp)
   1a0a4:	0bc12283          	lw	t0,188(sp)
   1a0a8:	05312e23          	sw	s3,92(sp)
   1a0ac:	00e98023          	sb	a4,0(s3)
   1a0b0:	fff00793          	li	a5,-1
   1a0b4:	00198993          	addi	s3,s3,1
   1a0b8:	00090a13          	mv	s4,s2
   1a0bc:	00060a93          	mv	s5,a2
   1a0c0:	000f0b93          	mv	s7,t5
   1a0c4:	00028493          	mv	s1,t0
   1a0c8:	ecfc16e3          	bne	s8,a5,19f94 <_svfprintf_r+0x21e4>
   1a0cc:	00098a93          	mv	s5,s3
   1a0d0:	00812e23          	sw	s0,28(sp)
   1a0d4:	00090e93          	mv	t4,s2
   1a0d8:	07412483          	lw	s1,116(sp)
   1a0dc:	07812883          	lw	a7,120(sp)
   1a0e0:	07c12a03          	lw	s4,124(sp)
   1a0e4:	08412403          	lw	s0,132(sp)
   1a0e8:	05012383          	lw	t2,80(sp)
   1a0ec:	08812983          	lw	s3,136(sp)
   1a0f0:	08c12b83          	lw	s7,140(sp)
   1a0f4:	08012903          	lw	s2,128(sp)
   1a0f8:	fff00713          	li	a4,-1
   1a0fc:	00009597          	auipc	a1,0x9
   1a100:	72458593          	addi	a1,a1,1828 # 23820 <zeroes.0+0x38>
   1a104:	0005a683          	lw	a3,0(a1)
   1a108:	0045a803          	lw	a6,4(a1)
   1a10c:	0085ae03          	lw	t3,8(a1)
   1a110:	00c5a783          	lw	a5,12(a1)
   1a114:	000b0513          	mv	a0,s6
   1a118:	000c8593          	mv	a1,s9
   1a11c:	02712223          	sw	t2,36(sp)
   1a120:	03112023          	sw	a7,32(sp)
   1a124:	06e12c23          	sw	a4,120(sp)
   1a128:	0dd12023          	sw	t4,192(sp)
   1a12c:	07d12a23          	sw	t4,116(sp)
   1a130:	0cc12223          	sw	a2,196(sp)
   1a134:	06c12623          	sw	a2,108(sp)
   1a138:	0de12423          	sw	t5,200(sp)
   1a13c:	07e12423          	sw	t5,104(sp)
   1a140:	0c512623          	sw	t0,204(sp)
   1a144:	06512223          	sw	t0,100(sp)
   1a148:	0ad12823          	sw	a3,176(sp)
   1a14c:	06d12023          	sw	a3,96(sp)
   1a150:	0b012a23          	sw	a6,180(sp)
   1a154:	05012a23          	sw	a6,84(sp)
   1a158:	0bc12c23          	sw	t3,184(sp)
   1a15c:	05c12823          	sw	t3,80(sp)
   1a160:	0af12e23          	sw	a5,188(sp)
   1a164:	02f12423          	sw	a5,40(sp)
   1a168:	5b9040ef          	jal	ra,1ef20 <__getf2>
   1a16c:	02012883          	lw	a7,32(sp)
   1a170:	02412383          	lw	t2,36(sp)
   1a174:	3ea04a63          	bgtz	a0,1a568 <_svfprintf_r+0x27b8>
   1a178:	000c8593          	mv	a1,s9
   1a17c:	000b0513          	mv	a0,s6
   1a180:	4d1040ef          	jal	ra,1ee50 <__eqtf2>
   1a184:	02012883          	lw	a7,32(sp)
   1a188:	02412383          	lw	t2,36(sp)
   1a18c:	07812703          	lw	a4,120(sp)
   1a190:	00051863          	bnez	a0,1a1a0 <_svfprintf_r+0x23f0>
   1a194:	01c12783          	lw	a5,28(sp)
   1a198:	0017f693          	andi	a3,a5,1
   1a19c:	3c069663          	bnez	a3,1a568 <_svfprintf_r+0x27b8>
   1a1a0:	00170b13          	addi	s6,a4,1
   1a1a4:	016a8b33          	add	s6,s5,s6
   1a1a8:	03000693          	li	a3,48
   1a1ac:	40074263          	bltz	a4,1a5b0 <_svfprintf_r+0x2800>
   1a1b0:	001a8a93          	addi	s5,s5,1
   1a1b4:	feda8fa3          	sb	a3,-1(s5)
   1a1b8:	ff5b1ce3          	bne	s6,s5,1a1b0 <_svfprintf_r+0x2400>
   1a1bc:	417b07b3          	sub	a5,s6,s7
   1a1c0:	02f12023          	sw	a5,32(sp)
   1a1c4:	fdf8fa93          	andi	s5,a7,-33
   1a1c8:	a11ff06f          	j	19bd8 <_svfprintf_r+0x1e28>
   1a1cc:	04c12783          	lw	a5,76(sp)
   1a1d0:	0017f793          	andi	a5,a5,1
   1a1d4:	34079a63          	bnez	a5,1a528 <_svfprintf_r+0x2778>
   1a1d8:	0ec12b03          	lw	s6,236(sp)
   1a1dc:	0dc12683          	lw	a3,220(sp)
   1a1e0:	417b07b3          	sub	a5,s6,s7
   1a1e4:	02f12023          	sw	a5,32(sp)
   1a1e8:	ffd00793          	li	a5,-3
   1a1ec:	00d12e23          	sw	a3,28(sp)
   1a1f0:	00f6c463          	blt	a3,a5,1a1f8 <_svfprintf_r+0x2448>
   1a1f4:	02d95863          	bge	s2,a3,1a224 <_svfprintf_r+0x2474>
   1a1f8:	fff68793          	addi	a5,a3,-1
   1a1fc:	ffe88893          	addi	a7,a7,-2
   1a200:	0cf12e23          	sw	a5,220(sp)
   1a204:	0ff8f713          	zext.b	a4,a7
   1a208:	00000613          	li	a2,0
   1a20c:	a05ff06f          	j	19c10 <_svfprintf_r+0x1e60>
   1a210:	0d714703          	lbu	a4,215(sp)
   1a214:	00000913          	li	s2,0
   1a218:	00070463          	beqz	a4,1a220 <_svfprintf_r+0x2470>
   1a21c:	fddfd06f          	j	181f8 <_svfprintf_r+0x448>
   1a220:	d69fd06f          	j	17f88 <_svfprintf_r+0x1d8>
   1a224:	02012783          	lw	a5,32(sp)
   1a228:	28f6ce63          	blt	a3,a5,1a4c4 <_svfprintf_r+0x2714>
   1a22c:	04c12783          	lw	a5,76(sp)
   1a230:	00068c93          	mv	s9,a3
   1a234:	0017f793          	andi	a5,a5,1
   1a238:	00078663          	beqz	a5,1a244 <_svfprintf_r+0x2494>
   1a23c:	03012783          	lw	a5,48(sp)
   1a240:	00f68cb3          	add	s9,a3,a5
   1a244:	04c12783          	lw	a5,76(sp)
   1a248:	4007f793          	andi	a5,a5,1024
   1a24c:	00078463          	beqz	a5,1a254 <_svfprintf_r+0x24a4>
   1a250:	44d04663          	bgtz	a3,1a69c <_svfprintf_r+0x28ec>
   1a254:	fffcc693          	not	a3,s9
   1a258:	05812b03          	lw	s6,88(sp)
   1a25c:	41f6d693          	srai	a3,a3,0x1f
   1a260:	00dcfc33          	and	s8,s9,a3
   1a264:	06700893          	li	a7,103
   1a268:	02012223          	sw	zero,36(sp)
   1a26c:	02012423          	sw	zero,40(sp)
   1a270:	a79ff06f          	j	19ce8 <_svfprintf_r+0x1f38>
   1a274:	0f410613          	addi	a2,sp,244
   1a278:	00048593          	mv	a1,s1
   1a27c:	00098513          	mv	a0,s3
   1a280:	638020ef          	jal	ra,1c8b8 <__ssprint_r>
   1a284:	00050463          	beqz	a0,1a28c <_svfprintf_r+0x24dc>
   1a288:	931fe06f          	j	18bb8 <_svfprintf_r+0xe08>
   1a28c:	000b4603          	lbu	a2,0(s6)
   1a290:	0fc12703          	lw	a4,252(sp)
   1a294:	000d0693          	mv	a3,s10
   1a298:	00700893          	li	a7,7
   1a29c:	00cc0c33          	add	s8,s8,a2
   1a2a0:	988ff06f          	j	19428 <_svfprintf_r+0x1678>
   1a2a4:	00900513          	li	a0,9
   1a2a8:	b3856e63          	bltu	a0,s8,195e4 <_svfprintf_r+0x1834>
   1a2ac:	bb8ff06f          	j	19664 <_svfprintf_r+0x18b4>
   1a2b0:	07800713          	li	a4,120
   1a2b4:	03000693          	li	a3,48
   1a2b8:	002b6793          	ori	a5,s6,2
   1a2bc:	0ce10ca3          	sb	a4,217(sp)
   1a2c0:	0cd10c23          	sb	a3,216(sp)
   1a2c4:	06300713          	li	a4,99
   1a2c8:	04f12623          	sw	a5,76(sp)
   1a2cc:	00012a23          	sw	zero,20(sp)
   1a2d0:	15c10b93          	addi	s7,sp,348
   1a2d4:	33274c63          	blt	a4,s2,1a60c <_svfprintf_r+0x285c>
   1a2d8:	10c12e03          	lw	t3,268(sp)
   1a2dc:	102b6793          	ori	a5,s6,258
   1a2e0:	04f12c23          	sw	a5,88(sp)
   1a2e4:	06012823          	sw	zero,112(sp)
   1a2e8:	10012283          	lw	t0,256(sp)
   1a2ec:	10412f03          	lw	t5,260(sp)
   1a2f0:	10812e83          	lw	t4,264(sp)
   1a2f4:	120e4263          	bltz	t3,1a418 <_svfprintf_r+0x2668>
   1a2f8:	06100793          	li	a5,97
   1a2fc:	00f88463          	beq	a7,a5,1a304 <_svfprintf_r+0x2554>
   1a300:	87cfe06f          	j	1837c <_svfprintf_r+0x5cc>
   1a304:	0c010b13          	addi	s6,sp,192
   1a308:	000b0513          	mv	a0,s6
   1a30c:	05112e23          	sw	a7,92(sp)
   1a310:	0c512023          	sw	t0,192(sp)
   1a314:	0de12223          	sw	t5,196(sp)
   1a318:	0dd12423          	sw	t4,200(sp)
   1a31c:	0dc12623          	sw	t3,204(sp)
   1a320:	4c5070ef          	jal	ra,21fe4 <__trunctfdf2>
   1a324:	0dc10613          	addi	a2,sp,220
   1a328:	840fd0ef          	jal	ra,17368 <frexp>
   1a32c:	00058613          	mv	a2,a1
   1a330:	00050593          	mv	a1,a0
   1a334:	000b0513          	mv	a0,s6
   1a338:	24d070ef          	jal	ra,21d84 <__extenddftf2>
   1a33c:	0c012e03          	lw	t3,192(sp)
   1a340:	00009797          	auipc	a5,0x9
   1a344:	4c078793          	addi	a5,a5,1216 # 23800 <zeroes.0+0x18>
   1a348:	0007a803          	lw	a6,0(a5)
   1a34c:	0bc12023          	sw	t3,160(sp)
   1a350:	0c412e03          	lw	t3,196(sp)
   1a354:	0047a683          	lw	a3,4(a5)
   1a358:	0087a703          	lw	a4,8(a5)
   1a35c:	0bc12223          	sw	t3,164(sp)
   1a360:	0c812e03          	lw	t3,200(sp)
   1a364:	00c7a783          	lw	a5,12(a5)
   1a368:	0a010613          	addi	a2,sp,160
   1a36c:	0bc12423          	sw	t3,168(sp)
   1a370:	0cc12e03          	lw	t3,204(sp)
   1a374:	0b010c93          	addi	s9,sp,176
   1a378:	00060593          	mv	a1,a2
   1a37c:	00c12e23          	sw	a2,28(sp)
   1a380:	000c8513          	mv	a0,s9
   1a384:	09010613          	addi	a2,sp,144
   1a388:	04c12a23          	sw	a2,84(sp)
   1a38c:	0bc12623          	sw	t3,172(sp)
   1a390:	09012823          	sw	a6,144(sp)
   1a394:	08d12a23          	sw	a3,148(sp)
   1a398:	08e12c23          	sw	a4,152(sp)
   1a39c:	08f12e23          	sw	a5,156(sp)
   1a3a0:	62d040ef          	jal	ra,1f1cc <__multf3>
   1a3a4:	0b012703          	lw	a4,176(sp)
   1a3a8:	0b412683          	lw	a3,180(sp)
   1a3ac:	0b812803          	lw	a6,184(sp)
   1a3b0:	0bc12e03          	lw	t3,188(sp)
   1a3b4:	000c8593          	mv	a1,s9
   1a3b8:	000b0513          	mv	a0,s6
   1a3bc:	0ce12023          	sw	a4,192(sp)
   1a3c0:	04e12823          	sw	a4,80(sp)
   1a3c4:	0cd12223          	sw	a3,196(sp)
   1a3c8:	02d12423          	sw	a3,40(sp)
   1a3cc:	0d012423          	sw	a6,200(sp)
   1a3d0:	03012223          	sw	a6,36(sp)
   1a3d4:	0dc12623          	sw	t3,204(sp)
   1a3d8:	03c12023          	sw	t3,32(sp)
   1a3dc:	0a012823          	sw	zero,176(sp)
   1a3e0:	0a012a23          	sw	zero,180(sp)
   1a3e4:	0a012c23          	sw	zero,184(sp)
   1a3e8:	0a012e23          	sw	zero,188(sp)
   1a3ec:	265040ef          	jal	ra,1ee50 <__eqtf2>
   1a3f0:	02012e03          	lw	t3,32(sp)
   1a3f4:	02412803          	lw	a6,36(sp)
   1a3f8:	02812683          	lw	a3,40(sp)
   1a3fc:	05012703          	lw	a4,80(sp)
   1a400:	05c12883          	lw	a7,92(sp)
   1a404:	00009397          	auipc	t2,0x9
   1a408:	19c38393          	addi	t2,t2,412 # 235a0 <__flash_rodata_start+0x150>
   1a40c:	b20512e3          	bnez	a0,19f30 <_svfprintf_r+0x2180>
   1a410:	b01ff06f          	j	19f10 <_svfprintf_r+0x2160>
   1a414:	00012a23          	sw	zero,20(sp)
   1a418:	800007b7          	lui	a5,0x80000
   1a41c:	01c7ce33          	xor	t3,a5,t3
   1a420:	02d00793          	li	a5,45
   1a424:	06f12823          	sw	a5,112(sp)
   1a428:	ed1ff06f          	j	1a2f8 <_svfprintf_r+0x2548>
   1a42c:	02d00713          	li	a4,45
   1a430:	0ce10ba3          	sb	a4,215(sp)
   1a434:	be4ff06f          	j	19818 <_svfprintf_r+0x1a68>
   1a438:	00c12583          	lw	a1,12(sp)
   1a43c:	0f410613          	addi	a2,sp,244
   1a440:	00098513          	mv	a0,s3
   1a444:	474020ef          	jal	ra,1c8b8 <__ssprint_r>
   1a448:	00050463          	beqz	a0,1a450 <_svfprintf_r+0x26a0>
   1a44c:	f6cfe06f          	j	18bb8 <_svfprintf_r+0xe08>
   1a450:	0dc12583          	lw	a1,220(sp)
   1a454:	0fc12703          	lw	a4,252(sp)
   1a458:	000d0413          	mv	s0,s10
   1a45c:	a29fe06f          	j	18e84 <_svfprintf_r+0x10d4>
   1a460:	0d714703          	lbu	a4,215(sp)
   1a464:	01512c23          	sw	s5,24(sp)
   1a468:	02012223          	sw	zero,36(sp)
   1a46c:	02012423          	sw	zero,40(sp)
   1a470:	00012e23          	sw	zero,28(sp)
   1a474:	00090c13          	mv	s8,s2
   1a478:	00090c93          	mv	s9,s2
   1a47c:	00000913          	li	s2,0
   1a480:	00070463          	beqz	a4,1a488 <_svfprintf_r+0x26d8>
   1a484:	d75fd06f          	j	181f8 <_svfprintf_r+0x448>
   1a488:	b01fd06f          	j	17f88 <_svfprintf_r+0x1d8>
   1a48c:	00c12583          	lw	a1,12(sp)
   1a490:	0f410613          	addi	a2,sp,244
   1a494:	00098513          	mv	a0,s3
   1a498:	420020ef          	jal	ra,1c8b8 <__ssprint_r>
   1a49c:	00050463          	beqz	a0,1a4a4 <_svfprintf_r+0x26f4>
   1a4a0:	f18fe06f          	j	18bb8 <_svfprintf_r+0xe08>
   1a4a4:	0dc12583          	lw	a1,220(sp)
   1a4a8:	02012783          	lw	a5,32(sp)
   1a4ac:	0fc12703          	lw	a4,252(sp)
   1a4b0:	000d0413          	mv	s0,s10
   1a4b4:	40b785b3          	sub	a1,a5,a1
   1a4b8:	a15fe06f          	j	18ecc <_svfprintf_r+0x111c>
   1a4bc:	000b0293          	mv	t0,s6
   1a4c0:	d01fd06f          	j	181c0 <_svfprintf_r+0x410>
   1a4c4:	02012783          	lw	a5,32(sp)
   1a4c8:	03012703          	lw	a4,48(sp)
   1a4cc:	06700893          	li	a7,103
   1a4d0:	00e78cb3          	add	s9,a5,a4
   1a4d4:	01c12783          	lw	a5,28(sp)
   1a4d8:	24f05463          	blez	a5,1a720 <_svfprintf_r+0x2970>
   1a4dc:	04c12783          	lw	a5,76(sp)
   1a4e0:	4007f793          	andi	a5,a5,1024
   1a4e4:	1a079e63          	bnez	a5,1a6a0 <_svfprintf_r+0x28f0>
   1a4e8:	fffcc693          	not	a3,s9
   1a4ec:	41f6d693          	srai	a3,a3,0x1f
   1a4f0:	05812b03          	lw	s6,88(sp)
   1a4f4:	00dcfc33          	and	s8,s9,a3
   1a4f8:	d71ff06f          	j	1a268 <_svfprintf_r+0x24b8>
   1a4fc:	04c12783          	lw	a5,76(sp)
   1a500:	01c12703          	lw	a4,28(sp)
   1a504:	0017f793          	andi	a5,a5,1
   1a508:	0127e7b3          	or	a5,a5,s2
   1a50c:	26e05863          	blez	a4,1a77c <_svfprintf_r+0x29cc>
   1a510:	22079663          	bnez	a5,1a73c <_svfprintf_r+0x298c>
   1a514:	01c12c83          	lw	s9,28(sp)
   1a518:	06600893          	li	a7,102
   1a51c:	fc1ff06f          	j	1a4dc <_svfprintf_r+0x272c>
   1a520:	05800713          	li	a4,88
   1a524:	d91ff06f          	j	1a2b4 <_svfprintf_r+0x2504>
   1a528:	00db8c33          	add	s8,s7,a3
   1a52c:	04700a93          	li	s5,71
   1a530:	0b010c93          	addi	s9,sp,176
   1a534:	e40ff06f          	j	19b74 <_svfprintf_r+0x1dc4>
   1a538:	0e610713          	addi	a4,sp,230
   1a53c:	00061863          	bnez	a2,1a54c <_svfprintf_r+0x279c>
   1a540:	03000713          	li	a4,48
   1a544:	0ee10323          	sb	a4,230(sp)
   1a548:	0e710713          	addi	a4,sp,231
   1a54c:	1c010693          	addi	a3,sp,448
   1a550:	03078793          	addi	a5,a5,48 # 80000030 <__alt_data_end+0x7ffc0030>
   1a554:	40d706b3          	sub	a3,a4,a3
   1a558:	00f70023          	sb	a5,0(a4)
   1a55c:	0dd68793          	addi	a5,a3,221
   1a560:	04f12023          	sw	a5,64(sp)
   1a564:	f44ff06f          	j	19ca8 <_svfprintf_r+0x1ef8>
   1a568:	05c12783          	lw	a5,92(sp)
   1a56c:	00f3c603          	lbu	a2,15(t2)
   1a570:	000a8713          	mv	a4,s5
   1a574:	0ef12623          	sw	a5,236(sp)
   1a578:	fffac683          	lbu	a3,-1(s5)
   1a57c:	02c69063          	bne	a3,a2,1a59c <_svfprintf_r+0x27ec>
   1a580:	03000593          	li	a1,48
   1a584:	feb70fa3          	sb	a1,-1(a4)
   1a588:	0ec12703          	lw	a4,236(sp)
   1a58c:	fff70793          	addi	a5,a4,-1
   1a590:	0ef12623          	sw	a5,236(sp)
   1a594:	fff74683          	lbu	a3,-1(a4)
   1a598:	fed606e3          	beq	a2,a3,1a584 <_svfprintf_r+0x27d4>
   1a59c:	00168613          	addi	a2,a3,1
   1a5a0:	03900593          	li	a1,57
   1a5a4:	0ff67613          	zext.b	a2,a2
   1a5a8:	00b68863          	beq	a3,a1,1a5b8 <_svfprintf_r+0x2808>
   1a5ac:	fec70fa3          	sb	a2,-1(a4)
   1a5b0:	000a8b13          	mv	s6,s5
   1a5b4:	c09ff06f          	j	1a1bc <_svfprintf_r+0x240c>
   1a5b8:	00a3c603          	lbu	a2,10(t2)
   1a5bc:	fec70fa3          	sb	a2,-1(a4)
   1a5c0:	ff1ff06f          	j	1a5b0 <_svfprintf_r+0x2800>
   1a5c4:	01270733          	add	a4,a4,s2
   1a5c8:	00160613          	addi	a2,a2,1
   1a5cc:	01542023          	sw	s5,0(s0)
   1a5d0:	01242223          	sw	s2,4(s0)
   1a5d4:	0ee12e23          	sw	a4,252(sp)
   1a5d8:	0ec12c23          	sw	a2,248(sp)
   1a5dc:	00700593          	li	a1,7
   1a5e0:	90c5de63          	bge	a1,a2,196fc <_svfprintf_r+0x194c>
   1a5e4:	00c12583          	lw	a1,12(sp)
   1a5e8:	0f410613          	addi	a2,sp,244
   1a5ec:	00098513          	mv	a0,s3
   1a5f0:	2c8020ef          	jal	ra,1c8b8 <__ssprint_r>
   1a5f4:	00050463          	beqz	a0,1a5fc <_svfprintf_r+0x284c>
   1a5f8:	dc0fe06f          	j	18bb8 <_svfprintf_r+0xe08>
   1a5fc:	0fc12703          	lw	a4,252(sp)
   1a600:	0f812603          	lw	a2,248(sp)
   1a604:	000d0413          	mv	s0,s10
   1a608:	8f8ff06f          	j	19700 <_svfprintf_r+0x1950>
   1a60c:	00190593          	addi	a1,s2,1
   1a610:	00098513          	mv	a0,s3
   1a614:	01112a23          	sw	a7,20(sp)
   1a618:	c05fa0ef          	jal	ra,1521c <_malloc_r>
   1a61c:	01412883          	lw	a7,20(sp)
   1a620:	00050b93          	mv	s7,a0
   1a624:	1a050663          	beqz	a0,1a7d0 <_svfprintf_r+0x2a20>
   1a628:	00a12a23          	sw	a0,20(sp)
   1a62c:	cadff06f          	j	1a2d8 <_svfprintf_r+0x2528>
   1a630:	04c12783          	lw	a5,76(sp)
   1a634:	0017f793          	andi	a5,a5,1
   1a638:	e8078663          	beqz	a5,19cc4 <_svfprintf_r+0x1f14>
   1a63c:	e80ff06f          	j	19cbc <_svfprintf_r+0x1f0c>
   1a640:	00090463          	beqz	s2,1a648 <_svfprintf_r+0x2898>
   1a644:	d0dfd06f          	j	18350 <_svfprintf_r+0x5a0>
   1a648:	00100913          	li	s2,1
   1a64c:	d05fd06f          	j	18350 <_svfprintf_r+0x5a0>
   1a650:	00098a93          	mv	s5,s3
   1a654:	00812e23          	sw	s0,28(sp)
   1a658:	00090e93          	mv	t4,s2
   1a65c:	07412483          	lw	s1,116(sp)
   1a660:	07812883          	lw	a7,120(sp)
   1a664:	07c12a03          	lw	s4,124(sp)
   1a668:	08412403          	lw	s0,132(sp)
   1a66c:	05012383          	lw	t2,80(sp)
   1a670:	08812983          	lw	s3,136(sp)
   1a674:	08c12b83          	lw	s7,140(sp)
   1a678:	08012903          	lw	s2,128(sp)
   1a67c:	000c0713          	mv	a4,s8
   1a680:	a7dff06f          	j	1a0fc <_svfprintf_r+0x234c>
   1a684:	02c12703          	lw	a4,44(sp)
   1a688:	00c00793          	li	a5,12
   1a68c:	00f72023          	sw	a5,0(a4)
   1a690:	fff00793          	li	a5,-1
   1a694:	00f12823          	sw	a5,16(sp)
   1a698:	a39fd06f          	j	180d0 <_svfprintf_r+0x320>
   1a69c:	06700893          	li	a7,103
   1a6a0:	03c12603          	lw	a2,60(sp)
   1a6a4:	0ff00713          	li	a4,255
   1a6a8:	00064783          	lbu	a5,0(a2)
   1a6ac:	10e78c63          	beq	a5,a4,1a7c4 <_svfprintf_r+0x2a14>
   1a6b0:	01c12683          	lw	a3,28(sp)
   1a6b4:	00000593          	li	a1,0
   1a6b8:	00000513          	li	a0,0
   1a6bc:	00d7de63          	bge	a5,a3,1a6d8 <_svfprintf_r+0x2928>
   1a6c0:	40f686b3          	sub	a3,a3,a5
   1a6c4:	00164783          	lbu	a5,1(a2)
   1a6c8:	04078663          	beqz	a5,1a714 <_svfprintf_r+0x2964>
   1a6cc:	00150513          	addi	a0,a0,1
   1a6d0:	00160613          	addi	a2,a2,1
   1a6d4:	fee794e3          	bne	a5,a4,1a6bc <_svfprintf_r+0x290c>
   1a6d8:	02c12e23          	sw	a2,60(sp)
   1a6dc:	02b12223          	sw	a1,36(sp)
   1a6e0:	00d12e23          	sw	a3,28(sp)
   1a6e4:	02a12423          	sw	a0,40(sp)
   1a6e8:	02412783          	lw	a5,36(sp)
   1a6ec:	02812703          	lw	a4,40(sp)
   1a6f0:	05812b03          	lw	s6,88(sp)
   1a6f4:	00e78733          	add	a4,a5,a4
   1a6f8:	04812783          	lw	a5,72(sp)
   1a6fc:	02f70733          	mul	a4,a4,a5
   1a700:	01970cb3          	add	s9,a4,s9
   1a704:	fffcc693          	not	a3,s9
   1a708:	41f6d693          	srai	a3,a3,0x1f
   1a70c:	00dcfc33          	and	s8,s9,a3
   1a710:	dd8ff06f          	j	19ce8 <_svfprintf_r+0x1f38>
   1a714:	00064783          	lbu	a5,0(a2)
   1a718:	00158593          	addi	a1,a1,1
   1a71c:	fb9ff06f          	j	1a6d4 <_svfprintf_r+0x2924>
   1a720:	40fc8833          	sub	a6,s9,a5
   1a724:	00180c93          	addi	s9,a6,1
   1a728:	fffcc693          	not	a3,s9
   1a72c:	41f6d693          	srai	a3,a3,0x1f
   1a730:	05812b03          	lw	s6,88(sp)
   1a734:	00dcfc33          	and	s8,s9,a3
   1a738:	b31ff06f          	j	1a268 <_svfprintf_r+0x24b8>
   1a73c:	03012783          	lw	a5,48(sp)
   1a740:	06600893          	li	a7,102
   1a744:	00f70833          	add	a6,a4,a5
   1a748:	01280cb3          	add	s9,a6,s2
   1a74c:	d91ff06f          	j	1a4dc <_svfprintf_r+0x272c>
   1a750:	07000713          	li	a4,112
   1a754:	cb8ff06f          	j	19c0c <_svfprintf_r+0x1e5c>
   1a758:	01812783          	lw	a5,24(sp)
   1a75c:	0007a903          	lw	s2,0(a5)
   1a760:	00478793          	addi	a5,a5,4
   1a764:	00095463          	bgez	s2,1a76c <_svfprintf_r+0x29bc>
   1a768:	fff00913          	li	s2,-1
   1a76c:	0014c883          	lbu	a7,1(s1)
   1a770:	00f12c23          	sw	a5,24(sp)
   1a774:	00070493          	mv	s1,a4
   1a778:	f88fd06f          	j	17f00 <_svfprintf_r+0x150>
   1a77c:	00079c63          	bnez	a5,1a794 <_svfprintf_r+0x29e4>
   1a780:	05812b03          	lw	s6,88(sp)
   1a784:	00100c13          	li	s8,1
   1a788:	06600893          	li	a7,102
   1a78c:	00100c93          	li	s9,1
   1a790:	ad9ff06f          	j	1a268 <_svfprintf_r+0x24b8>
   1a794:	03012783          	lw	a5,48(sp)
   1a798:	05812b03          	lw	s6,88(sp)
   1a79c:	06600893          	li	a7,102
   1a7a0:	00178813          	addi	a6,a5,1
   1a7a4:	01280cb3          	add	s9,a6,s2
   1a7a8:	fffcc693          	not	a3,s9
   1a7ac:	41f6d693          	srai	a3,a3,0x1f
   1a7b0:	00dcfc33          	and	s8,s9,a3
   1a7b4:	ab5ff06f          	j	1a268 <_svfprintf_r+0x24b8>
   1a7b8:	00200793          	li	a5,2
   1a7bc:	04f12023          	sw	a5,64(sp)
   1a7c0:	ce8ff06f          	j	19ca8 <_svfprintf_r+0x1ef8>
   1a7c4:	02012223          	sw	zero,36(sp)
   1a7c8:	02012423          	sw	zero,40(sp)
   1a7cc:	f1dff06f          	j	1a6e8 <_svfprintf_r+0x2938>
   1a7d0:	00c12703          	lw	a4,12(sp)
   1a7d4:	00c75783          	lhu	a5,12(a4)
   1a7d8:	0407e793          	ori	a5,a5,64
   1a7dc:	00f71623          	sh	a5,12(a4)
   1a7e0:	8ddfd06f          	j	180bc <_svfprintf_r+0x30c>

0001a7e4 <__sprint_r.part.0>:
   1a7e4:	0645a703          	lw	a4,100(a1)
   1a7e8:	fd010113          	addi	sp,sp,-48
   1a7ec:	000027b7          	lui	a5,0x2
   1a7f0:	01612823          	sw	s6,16(sp)
   1a7f4:	02112623          	sw	ra,44(sp)
   1a7f8:	02812423          	sw	s0,40(sp)
   1a7fc:	02912223          	sw	s1,36(sp)
   1a800:	03212023          	sw	s2,32(sp)
   1a804:	01312e23          	sw	s3,28(sp)
   1a808:	01412c23          	sw	s4,24(sp)
   1a80c:	01512a23          	sw	s5,20(sp)
   1a810:	01712623          	sw	s7,12(sp)
   1a814:	01812423          	sw	s8,8(sp)
   1a818:	00e7f7b3          	and	a5,a5,a4
   1a81c:	00060b13          	mv	s6,a2
   1a820:	0a078863          	beqz	a5,1a8d0 <__sprint_r.part.0+0xec>
   1a824:	00862783          	lw	a5,8(a2)
   1a828:	00062b83          	lw	s7,0(a2)
   1a82c:	00058913          	mv	s2,a1
   1a830:	00050993          	mv	s3,a0
   1a834:	fff00a93          	li	s5,-1
   1a838:	08078863          	beqz	a5,1a8c8 <__sprint_r.part.0+0xe4>
   1a83c:	004bac03          	lw	s8,4(s7)
   1a840:	000ba403          	lw	s0,0(s7)
   1a844:	002c5a13          	srli	s4,s8,0x2
   1a848:	060a0663          	beqz	s4,1a8b4 <__sprint_r.part.0+0xd0>
   1a84c:	00000493          	li	s1,0
   1a850:	00c0006f          	j	1a85c <__sprint_r.part.0+0x78>
   1a854:	00440413          	addi	s0,s0,4
   1a858:	049a0c63          	beq	s4,s1,1a8b0 <__sprint_r.part.0+0xcc>
   1a85c:	00042583          	lw	a1,0(s0)
   1a860:	00090613          	mv	a2,s2
   1a864:	00098513          	mv	a0,s3
   1a868:	21d010ef          	jal	ra,1c284 <_fputwc_r>
   1a86c:	00148493          	addi	s1,s1,1
   1a870:	ff5512e3          	bne	a0,s5,1a854 <__sprint_r.part.0+0x70>
   1a874:	fff00513          	li	a0,-1
   1a878:	02c12083          	lw	ra,44(sp)
   1a87c:	02812403          	lw	s0,40(sp)
   1a880:	000b2423          	sw	zero,8(s6)
   1a884:	000b2223          	sw	zero,4(s6)
   1a888:	02412483          	lw	s1,36(sp)
   1a88c:	02012903          	lw	s2,32(sp)
   1a890:	01c12983          	lw	s3,28(sp)
   1a894:	01812a03          	lw	s4,24(sp)
   1a898:	01412a83          	lw	s5,20(sp)
   1a89c:	01012b03          	lw	s6,16(sp)
   1a8a0:	00c12b83          	lw	s7,12(sp)
   1a8a4:	00812c03          	lw	s8,8(sp)
   1a8a8:	03010113          	addi	sp,sp,48
   1a8ac:	00008067          	ret
   1a8b0:	008b2783          	lw	a5,8(s6)
   1a8b4:	ffcc7c13          	andi	s8,s8,-4
   1a8b8:	418787b3          	sub	a5,a5,s8
   1a8bc:	00fb2423          	sw	a5,8(s6)
   1a8c0:	008b8b93          	addi	s7,s7,8
   1a8c4:	f6079ce3          	bnez	a5,1a83c <__sprint_r.part.0+0x58>
   1a8c8:	00000513          	li	a0,0
   1a8cc:	fadff06f          	j	1a878 <__sprint_r.part.0+0x94>
   1a8d0:	c38f70ef          	jal	ra,11d08 <__sfvwrite_r>
   1a8d4:	fa5ff06f          	j	1a878 <__sprint_r.part.0+0x94>

0001a8d8 <__sprint_r>:
   1a8d8:	00862703          	lw	a4,8(a2)
   1a8dc:	00070463          	beqz	a4,1a8e4 <__sprint_r+0xc>
   1a8e0:	f05ff06f          	j	1a7e4 <__sprint_r.part.0>
   1a8e4:	00062223          	sw	zero,4(a2)
   1a8e8:	00000513          	li	a0,0
   1a8ec:	00008067          	ret

0001a8f0 <_vfiprintf_r>:
   1a8f0:	ed010113          	addi	sp,sp,-304
   1a8f4:	13212023          	sw	s2,288(sp)
   1a8f8:	11512a23          	sw	s5,276(sp)
   1a8fc:	11712623          	sw	s7,268(sp)
   1a900:	11812423          	sw	s8,264(sp)
   1a904:	12112623          	sw	ra,300(sp)
   1a908:	12812423          	sw	s0,296(sp)
   1a90c:	12912223          	sw	s1,292(sp)
   1a910:	11312e23          	sw	s3,284(sp)
   1a914:	11412c23          	sw	s4,280(sp)
   1a918:	11612823          	sw	s6,272(sp)
   1a91c:	11912223          	sw	s9,260(sp)
   1a920:	11a12023          	sw	s10,256(sp)
   1a924:	0fb12e23          	sw	s11,252(sp)
   1a928:	00050b93          	mv	s7,a0
   1a92c:	00058a93          	mv	s5,a1
   1a930:	00060913          	mv	s2,a2
   1a934:	00068c13          	mv	s8,a3
   1a938:	00050663          	beqz	a0,1a944 <_vfiprintf_r+0x54>
   1a93c:	03852783          	lw	a5,56(a0)
   1a940:	66078a63          	beqz	a5,1afb4 <_vfiprintf_r+0x6c4>
   1a944:	064aa703          	lw	a4,100(s5)
   1a948:	00ca9783          	lh	a5,12(s5)
   1a94c:	00177713          	andi	a4,a4,1
   1a950:	00071663          	bnez	a4,1a95c <_vfiprintf_r+0x6c>
   1a954:	2007f713          	andi	a4,a5,512
   1a958:	6e0702e3          	beqz	a4,1b83c <_vfiprintf_r+0xf4c>
   1a95c:	01279713          	slli	a4,a5,0x12
   1a960:	02074663          	bltz	a4,1a98c <_vfiprintf_r+0x9c>
   1a964:	064aa703          	lw	a4,100(s5)
   1a968:	000026b7          	lui	a3,0x2
   1a96c:	00d7e7b3          	or	a5,a5,a3
   1a970:	ffffe6b7          	lui	a3,0xffffe
   1a974:	01079793          	slli	a5,a5,0x10
   1a978:	fff68693          	addi	a3,a3,-1 # ffffdfff <__alt_data_end+0xfffbdfff>
   1a97c:	4107d793          	srai	a5,a5,0x10
   1a980:	00d77733          	and	a4,a4,a3
   1a984:	00fa9623          	sh	a5,12(s5)
   1a988:	06eaa223          	sw	a4,100(s5)
   1a98c:	0087f713          	andi	a4,a5,8
   1a990:	12070063          	beqz	a4,1aab0 <_vfiprintf_r+0x1c0>
   1a994:	010aa703          	lw	a4,16(s5)
   1a998:	10070c63          	beqz	a4,1aab0 <_vfiprintf_r+0x1c0>
   1a99c:	01a7f713          	andi	a4,a5,26
   1a9a0:	00a00693          	li	a3,10
   1a9a4:	12d70863          	beq	a4,a3,1aad4 <_vfiprintf_r+0x1e4>
   1a9a8:	04c10b13          	addi	s6,sp,76
   1a9ac:	00000d93          	li	s11,0
   1a9b0:	01712223          	sw	s7,4(sp)
   1a9b4:	05612023          	sw	s6,64(sp)
   1a9b8:	04012423          	sw	zero,72(sp)
   1a9bc:	04012223          	sw	zero,68(sp)
   1a9c0:	000b0413          	mv	s0,s6
   1a9c4:	00012423          	sw	zero,8(sp)
   1a9c8:	00012c23          	sw	zero,24(sp)
   1a9cc:	00012e23          	sw	zero,28(sp)
   1a9d0:	02012023          	sw	zero,32(sp)
   1a9d4:	00009d17          	auipc	s10,0x9
   1a9d8:	4a0d0d13          	addi	s10,s10,1184 # 23e74 <zeroes.0+0x10>
   1a9dc:	01000a13          	li	s4,16
   1a9e0:	00009c97          	auipc	s9,0x9
   1a9e4:	610c8c93          	addi	s9,s9,1552 # 23ff0 <zeroes.0>
   1a9e8:	000d8b93          	mv	s7,s11
   1a9ec:	000c0813          	mv	a6,s8
   1a9f0:	00094783          	lbu	a5,0(s2)
   1a9f4:	36078c63          	beqz	a5,1ad6c <_vfiprintf_r+0x47c>
   1a9f8:	00090493          	mv	s1,s2
   1a9fc:	02500713          	li	a4,37
   1aa00:	3ee78a63          	beq	a5,a4,1adf4 <_vfiprintf_r+0x504>
   1aa04:	0014c783          	lbu	a5,1(s1)
   1aa08:	00148493          	addi	s1,s1,1
   1aa0c:	fe079ae3          	bnez	a5,1aa00 <_vfiprintf_r+0x110>
   1aa10:	412489b3          	sub	s3,s1,s2
   1aa14:	35248c63          	beq	s1,s2,1ad6c <_vfiprintf_r+0x47c>
   1aa18:	04812703          	lw	a4,72(sp)
   1aa1c:	04412783          	lw	a5,68(sp)
   1aa20:	01242023          	sw	s2,0(s0)
   1aa24:	00e98733          	add	a4,s3,a4
   1aa28:	00178793          	addi	a5,a5,1 # 2001 <prvSearchForNameWithinSingleList+0x10d>
   1aa2c:	01342223          	sw	s3,4(s0)
   1aa30:	04e12423          	sw	a4,72(sp)
   1aa34:	04f12223          	sw	a5,68(sp)
   1aa38:	00700693          	li	a3,7
   1aa3c:	00840413          	addi	s0,s0,8
   1aa40:	02f6d463          	bge	a3,a5,1aa68 <_vfiprintf_r+0x178>
   1aa44:	520706e3          	beqz	a4,1b770 <_vfiprintf_r+0xe80>
   1aa48:	00412503          	lw	a0,4(sp)
   1aa4c:	04010613          	addi	a2,sp,64
   1aa50:	000a8593          	mv	a1,s5
   1aa54:	01012623          	sw	a6,12(sp)
   1aa58:	d8dff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1aa5c:	00c12803          	lw	a6,12(sp)
   1aa60:	0e051e63          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1aa64:	000b0413          	mv	s0,s6
   1aa68:	0004c783          	lbu	a5,0(s1)
   1aa6c:	013b8bb3          	add	s7,s7,s3
   1aa70:	2e078e63          	beqz	a5,1ad6c <_vfiprintf_r+0x47c>
   1aa74:	0014c703          	lbu	a4,1(s1)
   1aa78:	00148913          	addi	s2,s1,1
   1aa7c:	02010da3          	sb	zero,59(sp)
   1aa80:	fff00493          	li	s1,-1
   1aa84:	00000c13          	li	s8,0
   1aa88:	00000d93          	li	s11,0
   1aa8c:	05a00993          	li	s3,90
   1aa90:	00190913          	addi	s2,s2,1
   1aa94:	fe070793          	addi	a5,a4,-32
   1aa98:	14f9ec63          	bltu	s3,a5,1abf0 <_vfiprintf_r+0x300>
   1aa9c:	00279793          	slli	a5,a5,0x2
   1aaa0:	01a787b3          	add	a5,a5,s10
   1aaa4:	0007a783          	lw	a5,0(a5)
   1aaa8:	01a787b3          	add	a5,a5,s10
   1aaac:	00078067          	jr	a5
   1aab0:	000a8593          	mv	a1,s5
   1aab4:	000b8513          	mv	a0,s7
   1aab8:	928f60ef          	jal	ra,10be0 <__swsetup_r>
   1aabc:	00050463          	beqz	a0,1aac4 <_vfiprintf_r+0x1d4>
   1aac0:	2000106f          	j	1bcc0 <_vfiprintf_r+0x13d0>
   1aac4:	00ca9783          	lh	a5,12(s5)
   1aac8:	00a00693          	li	a3,10
   1aacc:	01a7f713          	andi	a4,a5,26
   1aad0:	ecd71ce3          	bne	a4,a3,1a9a8 <_vfiprintf_r+0xb8>
   1aad4:	00ea9703          	lh	a4,14(s5)
   1aad8:	ec0748e3          	bltz	a4,1a9a8 <_vfiprintf_r+0xb8>
   1aadc:	064aa703          	lw	a4,100(s5)
   1aae0:	00177713          	andi	a4,a4,1
   1aae4:	00071863          	bnez	a4,1aaf4 <_vfiprintf_r+0x204>
   1aae8:	2007f793          	andi	a5,a5,512
   1aaec:	00079463          	bnez	a5,1aaf4 <_vfiprintf_r+0x204>
   1aaf0:	1880106f          	j	1bc78 <_vfiprintf_r+0x1388>
   1aaf4:	12812403          	lw	s0,296(sp)
   1aaf8:	12c12083          	lw	ra,300(sp)
   1aafc:	12412483          	lw	s1,292(sp)
   1ab00:	11c12983          	lw	s3,284(sp)
   1ab04:	11812a03          	lw	s4,280(sp)
   1ab08:	11012b03          	lw	s6,272(sp)
   1ab0c:	10412c83          	lw	s9,260(sp)
   1ab10:	10012d03          	lw	s10,256(sp)
   1ab14:	0fc12d83          	lw	s11,252(sp)
   1ab18:	000c0693          	mv	a3,s8
   1ab1c:	00090613          	mv	a2,s2
   1ab20:	10812c03          	lw	s8,264(sp)
   1ab24:	12012903          	lw	s2,288(sp)
   1ab28:	000a8593          	mv	a1,s5
   1ab2c:	000b8513          	mv	a0,s7
   1ab30:	11412a83          	lw	s5,276(sp)
   1ab34:	10c12b83          	lw	s7,268(sp)
   1ab38:	13010113          	addi	sp,sp,304
   1ab3c:	1f00106f          	j	1bd2c <__sbprintf>
   1ab40:	00412503          	lw	a0,4(sp)
   1ab44:	04010613          	addi	a2,sp,64
   1ab48:	000a8593          	mv	a1,s5
   1ab4c:	01012623          	sw	a6,12(sp)
   1ab50:	c95ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1ab54:	00c12803          	lw	a6,12(sp)
   1ab58:	20050263          	beqz	a0,1ad5c <_vfiprintf_r+0x46c>
   1ab5c:	000b8d93          	mv	s11,s7
   1ab60:	064aa703          	lw	a4,100(s5)
   1ab64:	00ca9783          	lh	a5,12(s5)
   1ab68:	00177713          	andi	a4,a4,1
   1ab6c:	28070c63          	beqz	a4,1ae04 <_vfiprintf_r+0x514>
   1ab70:	0407f793          	andi	a5,a5,64
   1ab74:	00078463          	beqz	a5,1ab7c <_vfiprintf_r+0x28c>
   1ab78:	1680106f          	j	1bce0 <_vfiprintf_r+0x13f0>
   1ab7c:	12c12083          	lw	ra,300(sp)
   1ab80:	12812403          	lw	s0,296(sp)
   1ab84:	12412483          	lw	s1,292(sp)
   1ab88:	12012903          	lw	s2,288(sp)
   1ab8c:	11c12983          	lw	s3,284(sp)
   1ab90:	11812a03          	lw	s4,280(sp)
   1ab94:	11412a83          	lw	s5,276(sp)
   1ab98:	11012b03          	lw	s6,272(sp)
   1ab9c:	10c12b83          	lw	s7,268(sp)
   1aba0:	10812c03          	lw	s8,264(sp)
   1aba4:	10412c83          	lw	s9,260(sp)
   1aba8:	10012d03          	lw	s10,256(sp)
   1abac:	000d8513          	mv	a0,s11
   1abb0:	0fc12d83          	lw	s11,252(sp)
   1abb4:	13010113          	addi	sp,sp,304
   1abb8:	00008067          	ret
   1abbc:	00000c13          	li	s8,0
   1abc0:	fd070793          	addi	a5,a4,-48
   1abc4:	00900613          	li	a2,9
   1abc8:	00094703          	lbu	a4,0(s2)
   1abcc:	002c1693          	slli	a3,s8,0x2
   1abd0:	01868c33          	add	s8,a3,s8
   1abd4:	001c1c13          	slli	s8,s8,0x1
   1abd8:	01878c33          	add	s8,a5,s8
   1abdc:	fd070793          	addi	a5,a4,-48
   1abe0:	00190913          	addi	s2,s2,1
   1abe4:	fef672e3          	bgeu	a2,a5,1abc8 <_vfiprintf_r+0x2d8>
   1abe8:	fe070793          	addi	a5,a4,-32
   1abec:	eaf9f8e3          	bgeu	s3,a5,1aa9c <_vfiprintf_r+0x1ac>
   1abf0:	16070e63          	beqz	a4,1ad6c <_vfiprintf_r+0x47c>
   1abf4:	08e10623          	sb	a4,140(sp)
   1abf8:	02010da3          	sb	zero,59(sp)
   1abfc:	00100693          	li	a3,1
   1ac00:	00100893          	li	a7,1
   1ac04:	08c10993          	addi	s3,sp,140
   1ac08:	00000493          	li	s1,0
   1ac0c:	002dff13          	andi	t5,s11,2
   1ac10:	000f0463          	beqz	t5,1ac18 <_vfiprintf_r+0x328>
   1ac14:	00268693          	addi	a3,a3,2
   1ac18:	04412603          	lw	a2,68(sp)
   1ac1c:	084dff93          	andi	t6,s11,132
   1ac20:	04812783          	lw	a5,72(sp)
   1ac24:	00160593          	addi	a1,a2,1
   1ac28:	00058e13          	mv	t3,a1
   1ac2c:	000f9663          	bnez	t6,1ac38 <_vfiprintf_r+0x348>
   1ac30:	40dc0733          	sub	a4,s8,a3
   1ac34:	1ee040e3          	bgtz	a4,1b614 <_vfiprintf_r+0xd24>
   1ac38:	03b14703          	lbu	a4,59(sp)
   1ac3c:	02070a63          	beqz	a4,1ac70 <_vfiprintf_r+0x380>
   1ac40:	03b10713          	addi	a4,sp,59
   1ac44:	00178793          	addi	a5,a5,1
   1ac48:	00e42023          	sw	a4,0(s0)
   1ac4c:	00100713          	li	a4,1
   1ac50:	00e42223          	sw	a4,4(s0)
   1ac54:	04f12423          	sw	a5,72(sp)
   1ac58:	05c12223          	sw	t3,68(sp)
   1ac5c:	00700713          	li	a4,7
   1ac60:	0dc74ee3          	blt	a4,t3,1b53c <_vfiprintf_r+0xc4c>
   1ac64:	000e0613          	mv	a2,t3
   1ac68:	00840413          	addi	s0,s0,8
   1ac6c:	001e0e13          	addi	t3,t3,1
   1ac70:	060f0863          	beqz	t5,1ace0 <_vfiprintf_r+0x3f0>
   1ac74:	03c10713          	addi	a4,sp,60
   1ac78:	00278793          	addi	a5,a5,2
   1ac7c:	00e42023          	sw	a4,0(s0)
   1ac80:	00200713          	li	a4,2
   1ac84:	00e42223          	sw	a4,4(s0)
   1ac88:	04f12423          	sw	a5,72(sp)
   1ac8c:	05c12223          	sw	t3,68(sp)
   1ac90:	00700713          	li	a4,7
   1ac94:	11c75ce3          	bge	a4,t3,1b5ac <_vfiprintf_r+0xcbc>
   1ac98:	32078ae3          	beqz	a5,1b7cc <_vfiprintf_r+0xedc>
   1ac9c:	00412503          	lw	a0,4(sp)
   1aca0:	04010613          	addi	a2,sp,64
   1aca4:	000a8593          	mv	a1,s5
   1aca8:	03012223          	sw	a6,36(sp)
   1acac:	01112a23          	sw	a7,20(sp)
   1acb0:	00d12823          	sw	a3,16(sp)
   1acb4:	01f12623          	sw	t6,12(sp)
   1acb8:	b2dff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1acbc:	ea0510e3          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1acc0:	04412603          	lw	a2,68(sp)
   1acc4:	04812783          	lw	a5,72(sp)
   1acc8:	02412803          	lw	a6,36(sp)
   1accc:	01412883          	lw	a7,20(sp)
   1acd0:	01012683          	lw	a3,16(sp)
   1acd4:	00c12f83          	lw	t6,12(sp)
   1acd8:	000b0413          	mv	s0,s6
   1acdc:	00160e13          	addi	t3,a2,1
   1ace0:	08000713          	li	a4,128
   1ace4:	64ef8063          	beq	t6,a4,1b324 <_vfiprintf_r+0xa34>
   1ace8:	411484b3          	sub	s1,s1,a7
   1acec:	76904063          	bgtz	s1,1b44c <_vfiprintf_r+0xb5c>
   1acf0:	00f887b3          	add	a5,a7,a5
   1acf4:	01342023          	sw	s3,0(s0)
   1acf8:	01142223          	sw	a7,4(s0)
   1acfc:	04f12423          	sw	a5,72(sp)
   1ad00:	05c12223          	sw	t3,68(sp)
   1ad04:	00700713          	li	a4,7
   1ad08:	61c75263          	bge	a4,t3,1b30c <_vfiprintf_r+0xa1c>
   1ad0c:	10078863          	beqz	a5,1ae1c <_vfiprintf_r+0x52c>
   1ad10:	00412503          	lw	a0,4(sp)
   1ad14:	04010613          	addi	a2,sp,64
   1ad18:	000a8593          	mv	a1,s5
   1ad1c:	01012823          	sw	a6,16(sp)
   1ad20:	00d12623          	sw	a3,12(sp)
   1ad24:	ac1ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1ad28:	e2051ae3          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1ad2c:	04812783          	lw	a5,72(sp)
   1ad30:	01012803          	lw	a6,16(sp)
   1ad34:	00c12683          	lw	a3,12(sp)
   1ad38:	000b0413          	mv	s0,s6
   1ad3c:	004dfd93          	andi	s11,s11,4
   1ad40:	000d8663          	beqz	s11,1ad4c <_vfiprintf_r+0x45c>
   1ad44:	40dc04b3          	sub	s1,s8,a3
   1ad48:	0e904663          	bgtz	s1,1ae34 <_vfiprintf_r+0x544>
   1ad4c:	00dc5463          	bge	s8,a3,1ad54 <_vfiprintf_r+0x464>
   1ad50:	00068c13          	mv	s8,a3
   1ad54:	018b8bb3          	add	s7,s7,s8
   1ad58:	de0794e3          	bnez	a5,1ab40 <_vfiprintf_r+0x250>
   1ad5c:	00094783          	lbu	a5,0(s2)
   1ad60:	04012223          	sw	zero,68(sp)
   1ad64:	000b0413          	mv	s0,s6
   1ad68:	c80798e3          	bnez	a5,1a9f8 <_vfiprintf_r+0x108>
   1ad6c:	04812783          	lw	a5,72(sp)
   1ad70:	000b8d93          	mv	s11,s7
   1ad74:	00412b83          	lw	s7,4(sp)
   1ad78:	680792e3          	bnez	a5,1bbfc <_vfiprintf_r+0x130c>
   1ad7c:	04012223          	sw	zero,68(sp)
   1ad80:	de1ff06f          	j	1ab60 <_vfiprintf_r+0x270>
   1ad84:	00082c03          	lw	s8,0(a6)
   1ad88:	00480813          	addi	a6,a6,4
   1ad8c:	280c4e63          	bltz	s8,1b028 <_vfiprintf_r+0x738>
   1ad90:	00094703          	lbu	a4,0(s2)
   1ad94:	cfdff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1ad98:	00094703          	lbu	a4,0(s2)
   1ad9c:	020ded93          	ori	s11,s11,32
   1ada0:	cf1ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1ada4:	010ded93          	ori	s11,s11,16
   1ada8:	020df793          	andi	a5,s11,32
   1adac:	16078e63          	beqz	a5,1af28 <_vfiprintf_r+0x638>
   1adb0:	00780813          	addi	a6,a6,7
   1adb4:	ff887813          	andi	a6,a6,-8
   1adb8:	00482703          	lw	a4,4(a6)
   1adbc:	00082783          	lw	a5,0(a6)
   1adc0:	00880813          	addi	a6,a6,8
   1adc4:	00070893          	mv	a7,a4
   1adc8:	18074663          	bltz	a4,1af54 <_vfiprintf_r+0x664>
   1adcc:	fff00713          	li	a4,-1
   1add0:	1ae48463          	beq	s1,a4,1af78 <_vfiprintf_r+0x688>
   1add4:	0117e733          	or	a4,a5,a7
   1add8:	f7fdfd93          	andi	s11,s11,-129
   1addc:	18071e63          	bnez	a4,1af78 <_vfiprintf_r+0x688>
   1ade0:	680498e3          	bnez	s1,1bc70 <_vfiprintf_r+0x1380>
   1ade4:	00000693          	li	a3,0
   1ade8:	00000893          	li	a7,0
   1adec:	0f010993          	addi	s3,sp,240
   1adf0:	1b40006f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1adf4:	412489b3          	sub	s3,s1,s2
   1adf8:	c32490e3          	bne	s1,s2,1aa18 <_vfiprintf_r+0x128>
   1adfc:	0004c783          	lbu	a5,0(s1)
   1ae00:	c71ff06f          	j	1aa70 <_vfiprintf_r+0x180>
   1ae04:	2007f713          	andi	a4,a5,512
   1ae08:	d60714e3          	bnez	a4,1ab70 <_vfiprintf_r+0x280>
   1ae0c:	058aa503          	lw	a0,88(s5)
   1ae10:	9a0fa0ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1ae14:	00ca9783          	lh	a5,12(s5)
   1ae18:	d59ff06f          	j	1ab70 <_vfiprintf_r+0x280>
   1ae1c:	04012223          	sw	zero,68(sp)
   1ae20:	004dfd93          	andi	s11,s11,4
   1ae24:	0e0d8ce3          	beqz	s11,1b71c <_vfiprintf_r+0xe2c>
   1ae28:	40dc04b3          	sub	s1,s8,a3
   1ae2c:	0e9058e3          	blez	s1,1b71c <_vfiprintf_r+0xe2c>
   1ae30:	000b0413          	mv	s0,s6
   1ae34:	01000713          	li	a4,16
   1ae38:	04412603          	lw	a2,68(sp)
   1ae3c:	66975ae3          	bge	a4,s1,1bcb0 <_vfiprintf_r+0x13c0>
   1ae40:	00009e17          	auipc	t3,0x9
   1ae44:	1a0e0e13          	addi	t3,t3,416 # 23fe0 <blanks.1>
   1ae48:	00d12623          	sw	a3,12(sp)
   1ae4c:	01000993          	li	s3,16
   1ae50:	00040693          	mv	a3,s0
   1ae54:	00700d93          	li	s11,7
   1ae58:	00048413          	mv	s0,s1
   1ae5c:	01012823          	sw	a6,16(sp)
   1ae60:	000e0493          	mv	s1,t3
   1ae64:	0180006f          	j	1ae7c <_vfiprintf_r+0x58c>
   1ae68:	00260593          	addi	a1,a2,2
   1ae6c:	00868693          	addi	a3,a3,8
   1ae70:	00070613          	mv	a2,a4
   1ae74:	ff040413          	addi	s0,s0,-16
   1ae78:	0489d863          	bge	s3,s0,1aec8 <_vfiprintf_r+0x5d8>
   1ae7c:	01078793          	addi	a5,a5,16
   1ae80:	00160713          	addi	a4,a2,1
   1ae84:	0096a023          	sw	s1,0(a3)
   1ae88:	0136a223          	sw	s3,4(a3)
   1ae8c:	04f12423          	sw	a5,72(sp)
   1ae90:	04e12223          	sw	a4,68(sp)
   1ae94:	fceddae3          	bge	s11,a4,1ae68 <_vfiprintf_r+0x578>
   1ae98:	46078e63          	beqz	a5,1b314 <_vfiprintf_r+0xa24>
   1ae9c:	00412503          	lw	a0,4(sp)
   1aea0:	04010613          	addi	a2,sp,64
   1aea4:	000a8593          	mv	a1,s5
   1aea8:	93dff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1aeac:	ca0518e3          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1aeb0:	04412603          	lw	a2,68(sp)
   1aeb4:	ff040413          	addi	s0,s0,-16
   1aeb8:	04812783          	lw	a5,72(sp)
   1aebc:	000b0693          	mv	a3,s6
   1aec0:	00160593          	addi	a1,a2,1
   1aec4:	fa89cce3          	blt	s3,s0,1ae7c <_vfiprintf_r+0x58c>
   1aec8:	00048e13          	mv	t3,s1
   1aecc:	01012803          	lw	a6,16(sp)
   1aed0:	00040493          	mv	s1,s0
   1aed4:	00068413          	mv	s0,a3
   1aed8:	00c12683          	lw	a3,12(sp)
   1aedc:	009787b3          	add	a5,a5,s1
   1aee0:	01c42023          	sw	t3,0(s0)
   1aee4:	00942223          	sw	s1,4(s0)
   1aee8:	04f12423          	sw	a5,72(sp)
   1aeec:	04b12223          	sw	a1,68(sp)
   1aef0:	00700713          	li	a4,7
   1aef4:	e4b75ce3          	bge	a4,a1,1ad4c <_vfiprintf_r+0x45c>
   1aef8:	020782e3          	beqz	a5,1b71c <_vfiprintf_r+0xe2c>
   1aefc:	00412503          	lw	a0,4(sp)
   1af00:	04010613          	addi	a2,sp,64
   1af04:	000a8593          	mv	a1,s5
   1af08:	01012823          	sw	a6,16(sp)
   1af0c:	00d12623          	sw	a3,12(sp)
   1af10:	8d5ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1af14:	c40514e3          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1af18:	04812783          	lw	a5,72(sp)
   1af1c:	01012803          	lw	a6,16(sp)
   1af20:	00c12683          	lw	a3,12(sp)
   1af24:	e29ff06f          	j	1ad4c <_vfiprintf_r+0x45c>
   1af28:	010df713          	andi	a4,s11,16
   1af2c:	00082783          	lw	a5,0(a6)
   1af30:	00480813          	addi	a6,a6,4
   1af34:	140710e3          	bnez	a4,1b874 <_vfiprintf_r+0xf84>
   1af38:	040df713          	andi	a4,s11,64
   1af3c:	120708e3          	beqz	a4,1b86c <_vfiprintf_r+0xf7c>
   1af40:	01079793          	slli	a5,a5,0x10
   1af44:	4107d793          	srai	a5,a5,0x10
   1af48:	41f7d893          	srai	a7,a5,0x1f
   1af4c:	00088713          	mv	a4,a7
   1af50:	e6075ee3          	bgez	a4,1adcc <_vfiprintf_r+0x4dc>
   1af54:	02d00693          	li	a3,45
   1af58:	00f03733          	snez	a4,a5
   1af5c:	411008b3          	neg	a7,a7
   1af60:	02d10da3          	sb	a3,59(sp)
   1af64:	fff00693          	li	a3,-1
   1af68:	40e888b3          	sub	a7,a7,a4
   1af6c:	40f007b3          	neg	a5,a5
   1af70:	00d48463          	beq	s1,a3,1af78 <_vfiprintf_r+0x688>
   1af74:	f7fdfd93          	andi	s11,s11,-129
   1af78:	220896e3          	bnez	a7,1b9a4 <_vfiprintf_r+0x10b4>
   1af7c:	00900713          	li	a4,9
   1af80:	22f762e3          	bltu	a4,a5,1b9a4 <_vfiprintf_r+0x10b4>
   1af84:	03078793          	addi	a5,a5,48
   1af88:	0ff7f793          	zext.b	a5,a5
   1af8c:	0ef107a3          	sb	a5,239(sp)
   1af90:	00048693          	mv	a3,s1
   1af94:	00904463          	bgtz	s1,1af9c <_vfiprintf_r+0x6ac>
   1af98:	00100693          	li	a3,1
   1af9c:	00100893          	li	a7,1
   1afa0:	0ef10993          	addi	s3,sp,239
   1afa4:	03b14783          	lbu	a5,59(sp)
   1afa8:	00f037b3          	snez	a5,a5
   1afac:	00f686b3          	add	a3,a3,a5
   1afb0:	c5dff06f          	j	1ac0c <_vfiprintf_r+0x31c>
   1afb4:	d10f60ef          	jal	ra,114c4 <__sinit>
   1afb8:	98dff06f          	j	1a944 <_vfiprintf_r+0x54>
   1afbc:	00082983          	lw	s3,0(a6)
   1afc0:	02010da3          	sb	zero,59(sp)
   1afc4:	00480813          	addi	a6,a6,4
   1afc8:	320984e3          	beqz	s3,1baf0 <_vfiprintf_r+0x1200>
   1afcc:	fff00793          	li	a5,-1
   1afd0:	01012623          	sw	a6,12(sp)
   1afd4:	14f488e3          	beq	s1,a5,1b924 <_vfiprintf_r+0x1034>
   1afd8:	00048613          	mv	a2,s1
   1afdc:	00000593          	li	a1,0
   1afe0:	00098513          	mv	a0,s3
   1afe4:	9ddfa0ef          	jal	ra,159c0 <memchr>
   1afe8:	00c12803          	lw	a6,12(sp)
   1afec:	4a0502e3          	beqz	a0,1bc90 <_vfiprintf_r+0x13a0>
   1aff0:	413508b3          	sub	a7,a0,s3
   1aff4:	fff8c693          	not	a3,a7
   1aff8:	41f6d693          	srai	a3,a3,0x1f
   1affc:	00d8f6b3          	and	a3,a7,a3
   1b000:	00000493          	li	s1,0
   1b004:	fa1ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b008:	00082783          	lw	a5,0(a6)
   1b00c:	02010da3          	sb	zero,59(sp)
   1b010:	00480813          	addi	a6,a6,4
   1b014:	08f10623          	sb	a5,140(sp)
   1b018:	00100693          	li	a3,1
   1b01c:	00100893          	li	a7,1
   1b020:	08c10993          	addi	s3,sp,140
   1b024:	be5ff06f          	j	1ac08 <_vfiprintf_r+0x318>
   1b028:	41800c33          	neg	s8,s8
   1b02c:	00094703          	lbu	a4,0(s2)
   1b030:	004ded93          	ori	s11,s11,4
   1b034:	a5dff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b038:	00094703          	lbu	a4,0(s2)
   1b03c:	06c00793          	li	a5,108
   1b040:	28f708e3          	beq	a4,a5,1bad0 <_vfiprintf_r+0x11e0>
   1b044:	010ded93          	ori	s11,s11,16
   1b048:	a49ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b04c:	00094703          	lbu	a4,0(s2)
   1b050:	06800793          	li	a5,104
   1b054:	26f706e3          	beq	a4,a5,1bac0 <_vfiprintf_r+0x11d0>
   1b058:	040ded93          	ori	s11,s11,64
   1b05c:	a35ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b060:	010de693          	ori	a3,s11,16
   1b064:	0206f793          	andi	a5,a3,32
   1b068:	70078a63          	beqz	a5,1b77c <_vfiprintf_r+0xe8c>
   1b06c:	00780813          	addi	a6,a6,7
   1b070:	ff887813          	andi	a6,a6,-8
   1b074:	00082783          	lw	a5,0(a6)
   1b078:	00482883          	lw	a7,4(a6)
   1b07c:	00880813          	addi	a6,a6,8
   1b080:	02010da3          	sb	zero,59(sp)
   1b084:	fff00713          	li	a4,-1
   1b088:	00068d93          	mv	s11,a3
   1b08c:	eee486e3          	beq	s1,a4,1af78 <_vfiprintf_r+0x688>
   1b090:	0117e733          	or	a4,a5,a7
   1b094:	f7f6fd93          	andi	s11,a3,-129
   1b098:	ee0710e3          	bnez	a4,1af78 <_vfiprintf_r+0x688>
   1b09c:	00100793          	li	a5,1
   1b0a0:	08049063          	bnez	s1,1b120 <_vfiprintf_r+0x830>
   1b0a4:	d40790e3          	bnez	a5,1ade4 <_vfiprintf_r+0x4f4>
   1b0a8:	0016f893          	andi	a7,a3,1
   1b0ac:	78088263          	beqz	a7,1b830 <_vfiprintf_r+0xf40>
   1b0b0:	03000793          	li	a5,48
   1b0b4:	0ef107a3          	sb	a5,239(sp)
   1b0b8:	00088693          	mv	a3,a7
   1b0bc:	0ef10993          	addi	s3,sp,239
   1b0c0:	ee5ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b0c4:	02b00793          	li	a5,43
   1b0c8:	00094703          	lbu	a4,0(s2)
   1b0cc:	02f10da3          	sb	a5,59(sp)
   1b0d0:	9c1ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b0d4:	010de713          	ori	a4,s11,16
   1b0d8:	02077793          	andi	a5,a4,32
   1b0dc:	6c078463          	beqz	a5,1b7a4 <_vfiprintf_r+0xeb4>
   1b0e0:	00780813          	addi	a6,a6,7
   1b0e4:	ff887813          	andi	a6,a6,-8
   1b0e8:	00082783          	lw	a5,0(a6)
   1b0ec:	00482603          	lw	a2,4(a6)
   1b0f0:	00880813          	addi	a6,a6,8
   1b0f4:	02010da3          	sb	zero,59(sp)
   1b0f8:	fff00693          	li	a3,-1
   1b0fc:	bff77d93          	andi	s11,a4,-1025
   1b100:	02d48c63          	beq	s1,a3,1b138 <_vfiprintf_r+0x848>
   1b104:	00c7e6b3          	or	a3,a5,a2
   1b108:	b7f77713          	andi	a4,a4,-1153
   1b10c:	1a0692e3          	bnez	a3,1bab0 <_vfiprintf_r+0x11c0>
   1b110:	000d8693          	mv	a3,s11
   1b114:	00000793          	li	a5,0
   1b118:	00070d93          	mv	s11,a4
   1b11c:	f80484e3          	beqz	s1,1b0a4 <_vfiprintf_r+0x7b4>
   1b120:	00100713          	li	a4,1
   1b124:	34e786e3          	beq	a5,a4,1bc70 <_vfiprintf_r+0x1380>
   1b128:	00200713          	li	a4,2
   1b12c:	1ee780e3          	beq	a5,a4,1bb0c <_vfiprintf_r+0x121c>
   1b130:	00000793          	li	a5,0
   1b134:	00000613          	li	a2,0
   1b138:	0f010993          	addi	s3,sp,240
   1b13c:	01d61693          	slli	a3,a2,0x1d
   1b140:	0077f713          	andi	a4,a5,7
   1b144:	0037d793          	srli	a5,a5,0x3
   1b148:	03070713          	addi	a4,a4,48
   1b14c:	00f6e7b3          	or	a5,a3,a5
   1b150:	00365613          	srli	a2,a2,0x3
   1b154:	fee98fa3          	sb	a4,-1(s3)
   1b158:	00c7e6b3          	or	a3,a5,a2
   1b15c:	00098593          	mv	a1,s3
   1b160:	fff98993          	addi	s3,s3,-1
   1b164:	fc069ce3          	bnez	a3,1b13c <_vfiprintf_r+0x84c>
   1b168:	001df793          	andi	a5,s11,1
   1b16c:	48078863          	beqz	a5,1b5fc <_vfiprintf_r+0xd0c>
   1b170:	03000793          	li	a5,48
   1b174:	48f70463          	beq	a4,a5,1b5fc <_vfiprintf_r+0xd0c>
   1b178:	ffe58593          	addi	a1,a1,-2
   1b17c:	0f010713          	addi	a4,sp,240
   1b180:	40b708b3          	sub	a7,a4,a1
   1b184:	fef98fa3          	sb	a5,-1(s3)
   1b188:	00088693          	mv	a3,a7
   1b18c:	7098ce63          	blt	a7,s1,1b8a8 <_vfiprintf_r+0xfb8>
   1b190:	00058993          	mv	s3,a1
   1b194:	e11ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b198:	ffff8737          	lui	a4,0xffff8
   1b19c:	83074713          	xori	a4,a4,-2000
   1b1a0:	02e11e23          	sh	a4,60(sp)
   1b1a4:	00008717          	auipc	a4,0x8
   1b1a8:	3fc70713          	addi	a4,a4,1020 # 235a0 <__flash_rodata_start+0x150>
   1b1ac:	00082783          	lw	a5,0(a6)
   1b1b0:	00000613          	li	a2,0
   1b1b4:	002ded93          	ori	s11,s11,2
   1b1b8:	00480813          	addi	a6,a6,4
   1b1bc:	00e12423          	sw	a4,8(sp)
   1b1c0:	02010da3          	sb	zero,59(sp)
   1b1c4:	fff00713          	li	a4,-1
   1b1c8:	40e48063          	beq	s1,a4,1b5c8 <_vfiprintf_r+0xcd8>
   1b1cc:	00c7e733          	or	a4,a5,a2
   1b1d0:	f7fdf593          	andi	a1,s11,-129
   1b1d4:	3e071463          	bnez	a4,1b5bc <_vfiprintf_r+0xccc>
   1b1d8:	000d8693          	mv	a3,s11
   1b1dc:	00200793          	li	a5,2
   1b1e0:	00058d93          	mv	s11,a1
   1b1e4:	ebdff06f          	j	1b0a0 <_vfiprintf_r+0x7b0>
   1b1e8:	020df793          	andi	a5,s11,32
   1b1ec:	68079a63          	bnez	a5,1b880 <_vfiprintf_r+0xf90>
   1b1f0:	010df793          	andi	a5,s11,16
   1b1f4:	0e0796e3          	bnez	a5,1bae0 <_vfiprintf_r+0x11f0>
   1b1f8:	040df793          	andi	a5,s11,64
   1b1fc:	260792e3          	bnez	a5,1bc60 <_vfiprintf_r+0x1370>
   1b200:	200dfd93          	andi	s11,s11,512
   1b204:	0c0d8ee3          	beqz	s11,1bae0 <_vfiprintf_r+0x11f0>
   1b208:	00082783          	lw	a5,0(a6)
   1b20c:	00480813          	addi	a6,a6,4
   1b210:	01778023          	sb	s7,0(a5)
   1b214:	fdcff06f          	j	1a9f0 <_vfiprintf_r+0x100>
   1b218:	00412503          	lw	a0,4(sp)
   1b21c:	01012623          	sw	a6,12(sp)
   1b220:	d4df90ef          	jal	ra,14f6c <_localeconv_r>
   1b224:	00452783          	lw	a5,4(a0)
   1b228:	00078513          	mv	a0,a5
   1b22c:	02f12023          	sw	a5,32(sp)
   1b230:	b2df20ef          	jal	ra,dd5c <strlen>
   1b234:	00050793          	mv	a5,a0
   1b238:	00412503          	lw	a0,4(sp)
   1b23c:	00f12e23          	sw	a5,28(sp)
   1b240:	d2df90ef          	jal	ra,14f6c <_localeconv_r>
   1b244:	00852703          	lw	a4,8(a0)
   1b248:	01c12783          	lw	a5,28(sp)
   1b24c:	00c12803          	lw	a6,12(sp)
   1b250:	00e12c23          	sw	a4,24(sp)
   1b254:	b2078ee3          	beqz	a5,1ad90 <_vfiprintf_r+0x4a0>
   1b258:	01812783          	lw	a5,24(sp)
   1b25c:	00094703          	lbu	a4,0(s2)
   1b260:	820788e3          	beqz	a5,1aa90 <_vfiprintf_r+0x1a0>
   1b264:	0007c783          	lbu	a5,0(a5)
   1b268:	820784e3          	beqz	a5,1aa90 <_vfiprintf_r+0x1a0>
   1b26c:	400ded93          	ori	s11,s11,1024
   1b270:	821ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b274:	00094703          	lbu	a4,0(s2)
   1b278:	001ded93          	ori	s11,s11,1
   1b27c:	815ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b280:	03b14783          	lbu	a5,59(sp)
   1b284:	00094703          	lbu	a4,0(s2)
   1b288:	800794e3          	bnez	a5,1aa90 <_vfiprintf_r+0x1a0>
   1b28c:	02000793          	li	a5,32
   1b290:	02f10da3          	sb	a5,59(sp)
   1b294:	ffcff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b298:	00094703          	lbu	a4,0(s2)
   1b29c:	080ded93          	ori	s11,s11,128
   1b2a0:	ff0ff06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1b2a4:	00094703          	lbu	a4,0(s2)
   1b2a8:	02a00793          	li	a5,42
   1b2ac:	00190693          	addi	a3,s2,1
   1b2b0:	24f704e3          	beq	a4,a5,1bcf8 <_vfiprintf_r+0x1408>
   1b2b4:	fd070793          	addi	a5,a4,-48
   1b2b8:	00900593          	li	a1,9
   1b2bc:	00068913          	mv	s2,a3
   1b2c0:	00000493          	li	s1,0
   1b2c4:	00900613          	li	a2,9
   1b2c8:	fcf5e663          	bltu	a1,a5,1aa94 <_vfiprintf_r+0x1a4>
   1b2cc:	00094703          	lbu	a4,0(s2)
   1b2d0:	00249693          	slli	a3,s1,0x2
   1b2d4:	009684b3          	add	s1,a3,s1
   1b2d8:	00149493          	slli	s1,s1,0x1
   1b2dc:	00f484b3          	add	s1,s1,a5
   1b2e0:	fd070793          	addi	a5,a4,-48
   1b2e4:	00190913          	addi	s2,s2,1
   1b2e8:	fef672e3          	bgeu	a2,a5,1b2cc <_vfiprintf_r+0x9dc>
   1b2ec:	fa8ff06f          	j	1aa94 <_vfiprintf_r+0x1a4>
   1b2f0:	00100713          	li	a4,1
   1b2f4:	00088793          	mv	a5,a7
   1b2f8:	05312623          	sw	s3,76(sp)
   1b2fc:	05112823          	sw	a7,80(sp)
   1b300:	05112423          	sw	a7,72(sp)
   1b304:	04e12223          	sw	a4,68(sp)
   1b308:	000b0413          	mv	s0,s6
   1b30c:	00840413          	addi	s0,s0,8
   1b310:	a2dff06f          	j	1ad3c <_vfiprintf_r+0x44c>
   1b314:	00100593          	li	a1,1
   1b318:	00000613          	li	a2,0
   1b31c:	000b0693          	mv	a3,s6
   1b320:	b55ff06f          	j	1ae74 <_vfiprintf_r+0x584>
   1b324:	40dc0f33          	sub	t5,s8,a3
   1b328:	9de050e3          	blez	t5,1ace8 <_vfiprintf_r+0x3f8>
   1b32c:	01000713          	li	a4,16
   1b330:	1be75ce3          	bge	a4,t5,1bce8 <_vfiprintf_r+0x13f8>
   1b334:	00009e97          	auipc	t4,0x9
   1b338:	cbce8e93          	addi	t4,t4,-836 # 23ff0 <zeroes.0>
   1b33c:	00912623          	sw	s1,12(sp)
   1b340:	00d12823          	sw	a3,16(sp)
   1b344:	01000e13          	li	t3,16
   1b348:	00040693          	mv	a3,s0
   1b34c:	00700f93          	li	t6,7
   1b350:	01112a23          	sw	a7,20(sp)
   1b354:	000f0413          	mv	s0,t5
   1b358:	03012223          	sw	a6,36(sp)
   1b35c:	000e8493          	mv	s1,t4
   1b360:	0180006f          	j	1b378 <_vfiprintf_r+0xa88>
   1b364:	00260593          	addi	a1,a2,2
   1b368:	00868693          	addi	a3,a3,8
   1b36c:	00070613          	mv	a2,a4
   1b370:	ff040413          	addi	s0,s0,-16
   1b374:	048e5c63          	bge	t3,s0,1b3cc <_vfiprintf_r+0xadc>
   1b378:	01078793          	addi	a5,a5,16
   1b37c:	00160713          	addi	a4,a2,1
   1b380:	0096a023          	sw	s1,0(a3)
   1b384:	01c6a223          	sw	t3,4(a3)
   1b388:	04f12423          	sw	a5,72(sp)
   1b38c:	04e12223          	sw	a4,68(sp)
   1b390:	fcefdae3          	bge	t6,a4,1b364 <_vfiprintf_r+0xa74>
   1b394:	18078c63          	beqz	a5,1b52c <_vfiprintf_r+0xc3c>
   1b398:	00412503          	lw	a0,4(sp)
   1b39c:	04010613          	addi	a2,sp,64
   1b3a0:	000a8593          	mv	a1,s5
   1b3a4:	c40ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b3a8:	fa051a63          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b3ac:	04412603          	lw	a2,68(sp)
   1b3b0:	01000e13          	li	t3,16
   1b3b4:	ff040413          	addi	s0,s0,-16
   1b3b8:	04812783          	lw	a5,72(sp)
   1b3bc:	000b0693          	mv	a3,s6
   1b3c0:	00160593          	addi	a1,a2,1
   1b3c4:	00700f93          	li	t6,7
   1b3c8:	fa8e48e3          	blt	t3,s0,1b378 <_vfiprintf_r+0xa88>
   1b3cc:	00040f13          	mv	t5,s0
   1b3d0:	00048e93          	mv	t4,s1
   1b3d4:	00068413          	mv	s0,a3
   1b3d8:	01412883          	lw	a7,20(sp)
   1b3dc:	01012683          	lw	a3,16(sp)
   1b3e0:	02412803          	lw	a6,36(sp)
   1b3e4:	00c12483          	lw	s1,12(sp)
   1b3e8:	01e787b3          	add	a5,a5,t5
   1b3ec:	01d42023          	sw	t4,0(s0)
   1b3f0:	01e42223          	sw	t5,4(s0)
   1b3f4:	04f12423          	sw	a5,72(sp)
   1b3f8:	04b12223          	sw	a1,68(sp)
   1b3fc:	00700713          	li	a4,7
   1b400:	44b75663          	bge	a4,a1,1b84c <_vfiprintf_r+0xf5c>
   1b404:	7e078463          	beqz	a5,1bbec <_vfiprintf_r+0x12fc>
   1b408:	00412503          	lw	a0,4(sp)
   1b40c:	04010613          	addi	a2,sp,64
   1b410:	000a8593          	mv	a1,s5
   1b414:	01012a23          	sw	a6,20(sp)
   1b418:	01112823          	sw	a7,16(sp)
   1b41c:	00d12623          	sw	a3,12(sp)
   1b420:	bc4ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b424:	f2051c63          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b428:	01012883          	lw	a7,16(sp)
   1b42c:	04412603          	lw	a2,68(sp)
   1b430:	04812783          	lw	a5,72(sp)
   1b434:	411484b3          	sub	s1,s1,a7
   1b438:	01412803          	lw	a6,20(sp)
   1b43c:	00c12683          	lw	a3,12(sp)
   1b440:	000b0413          	mv	s0,s6
   1b444:	00160e13          	addi	t3,a2,1
   1b448:	8a9054e3          	blez	s1,1acf0 <_vfiprintf_r+0x400>
   1b44c:	00009e97          	auipc	t4,0x9
   1b450:	ba4e8e93          	addi	t4,t4,-1116 # 23ff0 <zeroes.0>
   1b454:	0a9a5063          	bge	s4,s1,1b4f4 <_vfiprintf_r+0xc04>
   1b458:	00d12623          	sw	a3,12(sp)
   1b45c:	00700f13          	li	t5,7
   1b460:	00040693          	mv	a3,s0
   1b464:	01112823          	sw	a7,16(sp)
   1b468:	00048413          	mv	s0,s1
   1b46c:	01012a23          	sw	a6,20(sp)
   1b470:	000c8493          	mv	s1,s9
   1b474:	0180006f          	j	1b48c <_vfiprintf_r+0xb9c>
   1b478:	00260e13          	addi	t3,a2,2
   1b47c:	00868693          	addi	a3,a3,8
   1b480:	00070613          	mv	a2,a4
   1b484:	ff040413          	addi	s0,s0,-16
   1b488:	048a5a63          	bge	s4,s0,1b4dc <_vfiprintf_r+0xbec>
   1b48c:	01078793          	addi	a5,a5,16
   1b490:	00160713          	addi	a4,a2,1
   1b494:	0196a023          	sw	s9,0(a3)
   1b498:	0146a223          	sw	s4,4(a3)
   1b49c:	04f12423          	sw	a5,72(sp)
   1b4a0:	04e12223          	sw	a4,68(sp)
   1b4a4:	fcef5ae3          	bge	t5,a4,1b478 <_vfiprintf_r+0xb88>
   1b4a8:	06078a63          	beqz	a5,1b51c <_vfiprintf_r+0xc2c>
   1b4ac:	00412503          	lw	a0,4(sp)
   1b4b0:	04010613          	addi	a2,sp,64
   1b4b4:	000a8593          	mv	a1,s5
   1b4b8:	b2cff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b4bc:	ea051063          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b4c0:	04412603          	lw	a2,68(sp)
   1b4c4:	ff040413          	addi	s0,s0,-16
   1b4c8:	04812783          	lw	a5,72(sp)
   1b4cc:	000b0693          	mv	a3,s6
   1b4d0:	00160e13          	addi	t3,a2,1
   1b4d4:	00700f13          	li	t5,7
   1b4d8:	fa8a4ae3          	blt	s4,s0,1b48c <_vfiprintf_r+0xb9c>
   1b4dc:	00048e93          	mv	t4,s1
   1b4e0:	01012883          	lw	a7,16(sp)
   1b4e4:	00040493          	mv	s1,s0
   1b4e8:	01412803          	lw	a6,20(sp)
   1b4ec:	00068413          	mv	s0,a3
   1b4f0:	00c12683          	lw	a3,12(sp)
   1b4f4:	009787b3          	add	a5,a5,s1
   1b4f8:	01d42023          	sw	t4,0(s0)
   1b4fc:	00942223          	sw	s1,4(s0)
   1b500:	04f12423          	sw	a5,72(sp)
   1b504:	05c12223          	sw	t3,68(sp)
   1b508:	00700713          	li	a4,7
   1b50c:	23c74063          	blt	a4,t3,1b72c <_vfiprintf_r+0xe3c>
   1b510:	00840413          	addi	s0,s0,8
   1b514:	001e0e13          	addi	t3,t3,1
   1b518:	fd8ff06f          	j	1acf0 <_vfiprintf_r+0x400>
   1b51c:	00100e13          	li	t3,1
   1b520:	00000613          	li	a2,0
   1b524:	000b0693          	mv	a3,s6
   1b528:	f5dff06f          	j	1b484 <_vfiprintf_r+0xb94>
   1b52c:	00100593          	li	a1,1
   1b530:	00000613          	li	a2,0
   1b534:	000b0693          	mv	a3,s6
   1b538:	e39ff06f          	j	1b370 <_vfiprintf_r+0xa80>
   1b53c:	04078a63          	beqz	a5,1b590 <_vfiprintf_r+0xca0>
   1b540:	00412503          	lw	a0,4(sp)
   1b544:	04010613          	addi	a2,sp,64
   1b548:	000a8593          	mv	a1,s5
   1b54c:	03012423          	sw	a6,40(sp)
   1b550:	03112223          	sw	a7,36(sp)
   1b554:	00d12a23          	sw	a3,20(sp)
   1b558:	01f12823          	sw	t6,16(sp)
   1b55c:	01e12623          	sw	t5,12(sp)
   1b560:	a84ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b564:	de051c63          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b568:	04412603          	lw	a2,68(sp)
   1b56c:	04812783          	lw	a5,72(sp)
   1b570:	02812803          	lw	a6,40(sp)
   1b574:	02412883          	lw	a7,36(sp)
   1b578:	01412683          	lw	a3,20(sp)
   1b57c:	01012f83          	lw	t6,16(sp)
   1b580:	00c12f03          	lw	t5,12(sp)
   1b584:	000b0413          	mv	s0,s6
   1b588:	00160e13          	addi	t3,a2,1
   1b58c:	ee4ff06f          	j	1ac70 <_vfiprintf_r+0x380>
   1b590:	300f0463          	beqz	t5,1b898 <_vfiprintf_r+0xfa8>
   1b594:	03c10793          	addi	a5,sp,60
   1b598:	04f12623          	sw	a5,76(sp)
   1b59c:	00200793          	li	a5,2
   1b5a0:	04f12823          	sw	a5,80(sp)
   1b5a4:	000b0413          	mv	s0,s6
   1b5a8:	00100e13          	li	t3,1
   1b5ac:	000e0613          	mv	a2,t3
   1b5b0:	00840413          	addi	s0,s0,8
   1b5b4:	001e0e13          	addi	t3,t3,1
   1b5b8:	f28ff06f          	j	1ace0 <_vfiprintf_r+0x3f0>
   1b5bc:	00200713          	li	a4,2
   1b5c0:	00058d93          	mv	s11,a1
   1b5c4:	b6070ae3          	beqz	a4,1b138 <_vfiprintf_r+0x848>
   1b5c8:	00812583          	lw	a1,8(sp)
   1b5cc:	0f010993          	addi	s3,sp,240
   1b5d0:	00f7f713          	andi	a4,a5,15
   1b5d4:	00e58733          	add	a4,a1,a4
   1b5d8:	00074683          	lbu	a3,0(a4)
   1b5dc:	0047d793          	srli	a5,a5,0x4
   1b5e0:	01c61713          	slli	a4,a2,0x1c
   1b5e4:	00f767b3          	or	a5,a4,a5
   1b5e8:	00465613          	srli	a2,a2,0x4
   1b5ec:	fed98fa3          	sb	a3,-1(s3)
   1b5f0:	00c7e733          	or	a4,a5,a2
   1b5f4:	fff98993          	addi	s3,s3,-1
   1b5f8:	fc071ce3          	bnez	a4,1b5d0 <_vfiprintf_r+0xce0>
   1b5fc:	0f010793          	addi	a5,sp,240
   1b600:	413788b3          	sub	a7,a5,s3
   1b604:	00088693          	mv	a3,a7
   1b608:	9898dee3          	bge	a7,s1,1afa4 <_vfiprintf_r+0x6b4>
   1b60c:	00048693          	mv	a3,s1
   1b610:	995ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b614:	01000513          	li	a0,16
   1b618:	68e55463          	bge	a0,a4,1bca0 <_vfiprintf_r+0x13b0>
   1b61c:	00009e17          	auipc	t3,0x9
   1b620:	9c4e0e13          	addi	t3,t3,-1596 # 23fe0 <blanks.1>
   1b624:	00912a23          	sw	s1,20(sp)
   1b628:	02d12223          	sw	a3,36(sp)
   1b62c:	01000e93          	li	t4,16
   1b630:	00040693          	mv	a3,s0
   1b634:	00700293          	li	t0,7
   1b638:	01e12623          	sw	t5,12(sp)
   1b63c:	01f12823          	sw	t6,16(sp)
   1b640:	03112423          	sw	a7,40(sp)
   1b644:	00070413          	mv	s0,a4
   1b648:	03012623          	sw	a6,44(sp)
   1b64c:	000e0493          	mv	s1,t3
   1b650:	01c0006f          	j	1b66c <_vfiprintf_r+0xd7c>
   1b654:	00260513          	addi	a0,a2,2
   1b658:	00868693          	addi	a3,a3,8
   1b65c:	00058613          	mv	a2,a1
   1b660:	ff040413          	addi	s0,s0,-16
   1b664:	048edc63          	bge	t4,s0,1b6bc <_vfiprintf_r+0xdcc>
   1b668:	00160593          	addi	a1,a2,1
   1b66c:	01078793          	addi	a5,a5,16
   1b670:	0096a023          	sw	s1,0(a3)
   1b674:	01d6a223          	sw	t4,4(a3)
   1b678:	04f12423          	sw	a5,72(sp)
   1b67c:	04b12223          	sw	a1,68(sp)
   1b680:	fcb2dae3          	bge	t0,a1,1b654 <_vfiprintf_r+0xd64>
   1b684:	08078463          	beqz	a5,1b70c <_vfiprintf_r+0xe1c>
   1b688:	00412503          	lw	a0,4(sp)
   1b68c:	04010613          	addi	a2,sp,64
   1b690:	000a8593          	mv	a1,s5
   1b694:	950ff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b698:	cc051263          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b69c:	04412603          	lw	a2,68(sp)
   1b6a0:	01000e93          	li	t4,16
   1b6a4:	ff040413          	addi	s0,s0,-16
   1b6a8:	04812783          	lw	a5,72(sp)
   1b6ac:	000b0693          	mv	a3,s6
   1b6b0:	00160513          	addi	a0,a2,1
   1b6b4:	00700293          	li	t0,7
   1b6b8:	fa8ec8e3          	blt	t4,s0,1b668 <_vfiprintf_r+0xd78>
   1b6bc:	00040713          	mv	a4,s0
   1b6c0:	00048e13          	mv	t3,s1
   1b6c4:	00068413          	mv	s0,a3
   1b6c8:	00c12f03          	lw	t5,12(sp)
   1b6cc:	01012f83          	lw	t6,16(sp)
   1b6d0:	02812883          	lw	a7,40(sp)
   1b6d4:	02412683          	lw	a3,36(sp)
   1b6d8:	02c12803          	lw	a6,44(sp)
   1b6dc:	01412483          	lw	s1,20(sp)
   1b6e0:	00e787b3          	add	a5,a5,a4
   1b6e4:	00e42223          	sw	a4,4(s0)
   1b6e8:	01c42023          	sw	t3,0(s0)
   1b6ec:	04f12423          	sw	a5,72(sp)
   1b6f0:	04a12223          	sw	a0,68(sp)
   1b6f4:	00700713          	li	a4,7
   1b6f8:	0ea74263          	blt	a4,a0,1b7dc <_vfiprintf_r+0xeec>
   1b6fc:	00840413          	addi	s0,s0,8
   1b700:	00150e13          	addi	t3,a0,1
   1b704:	00050613          	mv	a2,a0
   1b708:	d30ff06f          	j	1ac38 <_vfiprintf_r+0x348>
   1b70c:	00000613          	li	a2,0
   1b710:	00100513          	li	a0,1
   1b714:	000b0693          	mv	a3,s6
   1b718:	f49ff06f          	j	1b660 <_vfiprintf_r+0xd70>
   1b71c:	00dc5463          	bge	s8,a3,1b724 <_vfiprintf_r+0xe34>
   1b720:	00068c13          	mv	s8,a3
   1b724:	018b8bb3          	add	s7,s7,s8
   1b728:	e34ff06f          	j	1ad5c <_vfiprintf_r+0x46c>
   1b72c:	bc0782e3          	beqz	a5,1b2f0 <_vfiprintf_r+0xa00>
   1b730:	00412503          	lw	a0,4(sp)
   1b734:	04010613          	addi	a2,sp,64
   1b738:	000a8593          	mv	a1,s5
   1b73c:	01012a23          	sw	a6,20(sp)
   1b740:	01112823          	sw	a7,16(sp)
   1b744:	00d12623          	sw	a3,12(sp)
   1b748:	89cff0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b74c:	c0051863          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b750:	04412e03          	lw	t3,68(sp)
   1b754:	04812783          	lw	a5,72(sp)
   1b758:	01412803          	lw	a6,20(sp)
   1b75c:	01012883          	lw	a7,16(sp)
   1b760:	00c12683          	lw	a3,12(sp)
   1b764:	000b0413          	mv	s0,s6
   1b768:	001e0e13          	addi	t3,t3,1
   1b76c:	d84ff06f          	j	1acf0 <_vfiprintf_r+0x400>
   1b770:	04012223          	sw	zero,68(sp)
   1b774:	000b0413          	mv	s0,s6
   1b778:	af0ff06f          	j	1aa68 <_vfiprintf_r+0x178>
   1b77c:	0106f713          	andi	a4,a3,16
   1b780:	00082783          	lw	a5,0(a6)
   1b784:	00480813          	addi	a6,a6,4
   1b788:	00071a63          	bnez	a4,1b79c <_vfiprintf_r+0xeac>
   1b78c:	0406f713          	andi	a4,a3,64
   1b790:	38070463          	beqz	a4,1bb18 <_vfiprintf_r+0x1228>
   1b794:	01079793          	slli	a5,a5,0x10
   1b798:	0107d793          	srli	a5,a5,0x10
   1b79c:	00000893          	li	a7,0
   1b7a0:	8e1ff06f          	j	1b080 <_vfiprintf_r+0x790>
   1b7a4:	01077693          	andi	a3,a4,16
   1b7a8:	00082783          	lw	a5,0(a6)
   1b7ac:	00480813          	addi	a6,a6,4
   1b7b0:	0a069a63          	bnez	a3,1b864 <_vfiprintf_r+0xf74>
   1b7b4:	04077693          	andi	a3,a4,64
   1b7b8:	0a068263          	beqz	a3,1b85c <_vfiprintf_r+0xf6c>
   1b7bc:	01079793          	slli	a5,a5,0x10
   1b7c0:	0107d793          	srli	a5,a5,0x10
   1b7c4:	00000613          	li	a2,0
   1b7c8:	92dff06f          	j	1b0f4 <_vfiprintf_r+0x804>
   1b7cc:	00100e13          	li	t3,1
   1b7d0:	00000613          	li	a2,0
   1b7d4:	000b0413          	mv	s0,s6
   1b7d8:	d08ff06f          	j	1ace0 <_vfiprintf_r+0x3f0>
   1b7dc:	16078663          	beqz	a5,1b948 <_vfiprintf_r+0x1058>
   1b7e0:	00412503          	lw	a0,4(sp)
   1b7e4:	04010613          	addi	a2,sp,64
   1b7e8:	000a8593          	mv	a1,s5
   1b7ec:	03012423          	sw	a6,40(sp)
   1b7f0:	03112223          	sw	a7,36(sp)
   1b7f4:	00d12a23          	sw	a3,20(sp)
   1b7f8:	01f12823          	sw	t6,16(sp)
   1b7fc:	01e12623          	sw	t5,12(sp)
   1b800:	fe5fe0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1b804:	b4051c63          	bnez	a0,1ab5c <_vfiprintf_r+0x26c>
   1b808:	04412603          	lw	a2,68(sp)
   1b80c:	04812783          	lw	a5,72(sp)
   1b810:	02812803          	lw	a6,40(sp)
   1b814:	02412883          	lw	a7,36(sp)
   1b818:	01412683          	lw	a3,20(sp)
   1b81c:	01012f83          	lw	t6,16(sp)
   1b820:	00c12f03          	lw	t5,12(sp)
   1b824:	000b0413          	mv	s0,s6
   1b828:	00160e13          	addi	t3,a2,1
   1b82c:	c0cff06f          	j	1ac38 <_vfiprintf_r+0x348>
   1b830:	00000693          	li	a3,0
   1b834:	0f010993          	addi	s3,sp,240
   1b838:	f6cff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b83c:	058aa503          	lw	a0,88(s5)
   1b840:	f58f90ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   1b844:	00ca9783          	lh	a5,12(s5)
   1b848:	914ff06f          	j	1a95c <_vfiprintf_r+0x6c>
   1b84c:	00840413          	addi	s0,s0,8
   1b850:	00158e13          	addi	t3,a1,1
   1b854:	00058613          	mv	a2,a1
   1b858:	c90ff06f          	j	1ace8 <_vfiprintf_r+0x3f8>
   1b85c:	20077693          	andi	a3,a4,512
   1b860:	3e069463          	bnez	a3,1bc48 <_vfiprintf_r+0x1358>
   1b864:	00000613          	li	a2,0
   1b868:	88dff06f          	j	1b0f4 <_vfiprintf_r+0x804>
   1b86c:	200df713          	andi	a4,s11,512
   1b870:	3c071263          	bnez	a4,1bc34 <_vfiprintf_r+0x1344>
   1b874:	41f7d893          	srai	a7,a5,0x1f
   1b878:	00088713          	mv	a4,a7
   1b87c:	d4cff06f          	j	1adc8 <_vfiprintf_r+0x4d8>
   1b880:	00082783          	lw	a5,0(a6)
   1b884:	41fbd713          	srai	a4,s7,0x1f
   1b888:	00480813          	addi	a6,a6,4
   1b88c:	0177a023          	sw	s7,0(a5)
   1b890:	00e7a223          	sw	a4,4(a5)
   1b894:	95cff06f          	j	1a9f0 <_vfiprintf_r+0x100>
   1b898:	00000613          	li	a2,0
   1b89c:	00100e13          	li	t3,1
   1b8a0:	000b0413          	mv	s0,s6
   1b8a4:	c3cff06f          	j	1ace0 <_vfiprintf_r+0x3f0>
   1b8a8:	00048693          	mv	a3,s1
   1b8ac:	00058993          	mv	s3,a1
   1b8b0:	ef4ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b8b4:	00008797          	auipc	a5,0x8
   1b8b8:	d0078793          	addi	a5,a5,-768 # 235b4 <__flash_rodata_start+0x164>
   1b8bc:	00f12423          	sw	a5,8(sp)
   1b8c0:	020df793          	andi	a5,s11,32
   1b8c4:	0a078463          	beqz	a5,1b96c <_vfiprintf_r+0x107c>
   1b8c8:	00780813          	addi	a6,a6,7
   1b8cc:	ff887813          	andi	a6,a6,-8
   1b8d0:	00082783          	lw	a5,0(a6)
   1b8d4:	00482603          	lw	a2,4(a6)
   1b8d8:	00880813          	addi	a6,a6,8
   1b8dc:	001df693          	andi	a3,s11,1
   1b8e0:	00068e63          	beqz	a3,1b8fc <_vfiprintf_r+0x100c>
   1b8e4:	00c7e6b3          	or	a3,a5,a2
   1b8e8:	00068a63          	beqz	a3,1b8fc <_vfiprintf_r+0x100c>
   1b8ec:	03000693          	li	a3,48
   1b8f0:	02d10e23          	sb	a3,60(sp)
   1b8f4:	02e10ea3          	sb	a4,61(sp)
   1b8f8:	002ded93          	ori	s11,s11,2
   1b8fc:	bffdfd93          	andi	s11,s11,-1025
   1b900:	8c1ff06f          	j	1b1c0 <_vfiprintf_r+0x8d0>
   1b904:	000d8713          	mv	a4,s11
   1b908:	fd0ff06f          	j	1b0d8 <_vfiprintf_r+0x7e8>
   1b90c:	000d8693          	mv	a3,s11
   1b910:	f54ff06f          	j	1b064 <_vfiprintf_r+0x774>
   1b914:	00008797          	auipc	a5,0x8
   1b918:	c8c78793          	addi	a5,a5,-884 # 235a0 <__flash_rodata_start+0x150>
   1b91c:	00f12423          	sw	a5,8(sp)
   1b920:	fa1ff06f          	j	1b8c0 <_vfiprintf_r+0xfd0>
   1b924:	00098513          	mv	a0,s3
   1b928:	c34f20ef          	jal	ra,dd5c <strlen>
   1b92c:	fff54693          	not	a3,a0
   1b930:	41f6d693          	srai	a3,a3,0x1f
   1b934:	00c12803          	lw	a6,12(sp)
   1b938:	00050893          	mv	a7,a0
   1b93c:	00d576b3          	and	a3,a0,a3
   1b940:	00000493          	li	s1,0
   1b944:	e60ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1b948:	03b14703          	lbu	a4,59(sp)
   1b94c:	2c070c63          	beqz	a4,1bc24 <_vfiprintf_r+0x1334>
   1b950:	03b10793          	addi	a5,sp,59
   1b954:	04f12623          	sw	a5,76(sp)
   1b958:	00100793          	li	a5,1
   1b95c:	04f12823          	sw	a5,80(sp)
   1b960:	00100e13          	li	t3,1
   1b964:	000b0413          	mv	s0,s6
   1b968:	afcff06f          	j	1ac64 <_vfiprintf_r+0x374>
   1b96c:	010df693          	andi	a3,s11,16
   1b970:	00082783          	lw	a5,0(a6)
   1b974:	00480813          	addi	a6,a6,4
   1b978:	02069263          	bnez	a3,1b99c <_vfiprintf_r+0x10ac>
   1b97c:	040df693          	andi	a3,s11,64
   1b980:	00068a63          	beqz	a3,1b994 <_vfiprintf_r+0x10a4>
   1b984:	01079793          	slli	a5,a5,0x10
   1b988:	0107d793          	srli	a5,a5,0x10
   1b98c:	00000613          	li	a2,0
   1b990:	f4dff06f          	j	1b8dc <_vfiprintf_r+0xfec>
   1b994:	200df693          	andi	a3,s11,512
   1b998:	2a069e63          	bnez	a3,1bc54 <_vfiprintf_r+0x1364>
   1b99c:	00000613          	li	a2,0
   1b9a0:	f3dff06f          	j	1b8dc <_vfiprintf_r+0xfec>
   1b9a4:	ccccdf37          	lui	t5,0xccccd
   1b9a8:	ccdf0e13          	addi	t3,t5,-819 # cccccccd <__alt_data_end+0xccc8cccd>
   1b9ac:	01812303          	lw	t1,24(sp)
   1b9b0:	400dff93          	andi	t6,s11,1024
   1b9b4:	00000513          	li	a0,0
   1b9b8:	0f010593          	addi	a1,sp,240
   1b9bc:	00500e93          	li	t4,5
   1b9c0:	cccf0f13          	addi	t5,t5,-820
   1b9c4:	0ff00293          	li	t0,255
   1b9c8:	0540006f          	j	1ba1c <_vfiprintf_r+0x112c>
   1b9cc:	00f9b733          	sltu	a4,s3,a5
   1b9d0:	00e98733          	add	a4,s3,a4
   1b9d4:	03d77733          	remu	a4,a4,t4
   1b9d8:	40e78733          	sub	a4,a5,a4
   1b9dc:	00e7b633          	sltu	a2,a5,a4
   1b9e0:	40c88633          	sub	a2,a7,a2
   1b9e4:	03e703b3          	mul	t2,a4,t5
   1b9e8:	03c60633          	mul	a2,a2,t3
   1b9ec:	03c735b3          	mulhu	a1,a4,t3
   1b9f0:	00760633          	add	a2,a2,t2
   1b9f4:	03c70733          	mul	a4,a4,t3
   1b9f8:	00b60633          	add	a2,a2,a1
   1b9fc:	01f61593          	slli	a1,a2,0x1f
   1ba00:	00165613          	srli	a2,a2,0x1
   1ba04:	00175713          	srli	a4,a4,0x1
   1ba08:	00e5e733          	or	a4,a1,a4
   1ba0c:	26088c63          	beqz	a7,1bc84 <_vfiprintf_r+0x1394>
   1ba10:	00070793          	mv	a5,a4
   1ba14:	00060893          	mv	a7,a2
   1ba18:	00068593          	mv	a1,a3
   1ba1c:	011789b3          	add	s3,a5,a7
   1ba20:	00f9b733          	sltu	a4,s3,a5
   1ba24:	00e98733          	add	a4,s3,a4
   1ba28:	03d77733          	remu	a4,a4,t4
   1ba2c:	fff58693          	addi	a3,a1,-1
   1ba30:	00150513          	addi	a0,a0,1
   1ba34:	40e78733          	sub	a4,a5,a4
   1ba38:	00e7b3b3          	sltu	t2,a5,a4
   1ba3c:	407883b3          	sub	t2,a7,t2
   1ba40:	03c73633          	mulhu	a2,a4,t3
   1ba44:	03c383b3          	mul	t2,t2,t3
   1ba48:	03c70733          	mul	a4,a4,t3
   1ba4c:	00c383b3          	add	t2,t2,a2
   1ba50:	01f39393          	slli	t2,t2,0x1f
   1ba54:	00175613          	srli	a2,a4,0x1
   1ba58:	00c3e633          	or	a2,t2,a2
   1ba5c:	00261713          	slli	a4,a2,0x2
   1ba60:	00c70733          	add	a4,a4,a2
   1ba64:	00171713          	slli	a4,a4,0x1
   1ba68:	40e78733          	sub	a4,a5,a4
   1ba6c:	03070713          	addi	a4,a4,48
   1ba70:	fee58fa3          	sb	a4,-1(a1)
   1ba74:	f40f8ce3          	beqz	t6,1b9cc <_vfiprintf_r+0x10dc>
   1ba78:	00034703          	lbu	a4,0(t1)
   1ba7c:	f4a718e3          	bne	a4,a0,1b9cc <_vfiprintf_r+0x10dc>
   1ba80:	f45506e3          	beq	a0,t0,1b9cc <_vfiprintf_r+0x10dc>
   1ba84:	0a089463          	bnez	a7,1bb2c <_vfiprintf_r+0x123c>
   1ba88:	00900713          	li	a4,9
   1ba8c:	0af76063          	bltu	a4,a5,1bb2c <_vfiprintf_r+0x123c>
   1ba90:	0f010793          	addi	a5,sp,240
   1ba94:	40d788b3          	sub	a7,a5,a3
   1ba98:	00612c23          	sw	t1,24(sp)
   1ba9c:	00068993          	mv	s3,a3
   1baa0:	00088693          	mv	a3,a7
   1baa4:	d098d063          	bge	a7,s1,1afa4 <_vfiprintf_r+0x6b4>
   1baa8:	00048693          	mv	a3,s1
   1baac:	cf8ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1bab0:	00070d93          	mv	s11,a4
   1bab4:	00000713          	li	a4,0
   1bab8:	e8070063          	beqz	a4,1b138 <_vfiprintf_r+0x848>
   1babc:	b0dff06f          	j	1b5c8 <_vfiprintf_r+0xcd8>
   1bac0:	00194703          	lbu	a4,1(s2)
   1bac4:	200ded93          	ori	s11,s11,512
   1bac8:	00190913          	addi	s2,s2,1
   1bacc:	fc5fe06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1bad0:	00194703          	lbu	a4,1(s2)
   1bad4:	020ded93          	ori	s11,s11,32
   1bad8:	00190913          	addi	s2,s2,1
   1badc:	fb5fe06f          	j	1aa90 <_vfiprintf_r+0x1a0>
   1bae0:	00082783          	lw	a5,0(a6)
   1bae4:	00480813          	addi	a6,a6,4
   1bae8:	0177a023          	sw	s7,0(a5)
   1baec:	f05fe06f          	j	1a9f0 <_vfiprintf_r+0x100>
   1baf0:	00600793          	li	a5,6
   1baf4:	00048893          	mv	a7,s1
   1baf8:	1297e263          	bltu	a5,s1,1bc1c <_vfiprintf_r+0x132c>
   1bafc:	00088693          	mv	a3,a7
   1bb00:	00008997          	auipc	s3,0x8
   1bb04:	ac898993          	addi	s3,s3,-1336 # 235c8 <__flash_rodata_start+0x178>
   1bb08:	900ff06f          	j	1ac08 <_vfiprintf_r+0x318>
   1bb0c:	00000793          	li	a5,0
   1bb10:	00000613          	li	a2,0
   1bb14:	ab5ff06f          	j	1b5c8 <_vfiprintf_r+0xcd8>
   1bb18:	2006f713          	andi	a4,a3,512
   1bb1c:	c80700e3          	beqz	a4,1b79c <_vfiprintf_r+0xeac>
   1bb20:	0ff7f793          	zext.b	a5,a5
   1bb24:	00000893          	li	a7,0
   1bb28:	d58ff06f          	j	1b080 <_vfiprintf_r+0x790>
   1bb2c:	02f12223          	sw	a5,36(sp)
   1bb30:	01c12783          	lw	a5,28(sp)
   1bb34:	02012583          	lw	a1,32(sp)
   1bb38:	03112423          	sw	a7,40(sp)
   1bb3c:	40f686b3          	sub	a3,a3,a5
   1bb40:	00078613          	mv	a2,a5
   1bb44:	00068513          	mv	a0,a3
   1bb48:	01012c23          	sw	a6,24(sp)
   1bb4c:	01f12a23          	sw	t6,20(sp)
   1bb50:	00612823          	sw	t1,16(sp)
   1bb54:	00d12623          	sw	a3,12(sp)
   1bb58:	9acfc0ef          	jal	ra,17d04 <strncpy>
   1bb5c:	02412783          	lw	a5,36(sp)
   1bb60:	00500613          	li	a2,5
   1bb64:	01012303          	lw	t1,16(sp)
   1bb68:	00f9b733          	sltu	a4,s3,a5
   1bb6c:	00e98733          	add	a4,s3,a4
   1bb70:	02c77733          	remu	a4,a4,a2
   1bb74:	00134603          	lbu	a2,1(t1)
   1bb78:	02812883          	lw	a7,40(sp)
   1bb7c:	ccccd3b7          	lui	t2,0xccccd
   1bb80:	00c03633          	snez	a2,a2
   1bb84:	00c30333          	add	t1,t1,a2
   1bb88:	ccd38593          	addi	a1,t2,-819 # cccccccd <__alt_data_end+0xccc8cccd>
   1bb8c:	ccc38393          	addi	t2,t2,-820
   1bb90:	00c12683          	lw	a3,12(sp)
   1bb94:	01412f83          	lw	t6,20(sp)
   1bb98:	01812803          	lw	a6,24(sp)
   1bb9c:	00000513          	li	a0,0
   1bba0:	00500e93          	li	t4,5
   1bba4:	00058e13          	mv	t3,a1
   1bba8:	0ff00293          	li	t0,255
   1bbac:	40e78733          	sub	a4,a5,a4
   1bbb0:	00e7b633          	sltu	a2,a5,a4
   1bbb4:	40c88633          	sub	a2,a7,a2
   1bbb8:	027703b3          	mul	t2,a4,t2
   1bbbc:	02b60633          	mul	a2,a2,a1
   1bbc0:	02b738b3          	mulhu	a7,a4,a1
   1bbc4:	00760633          	add	a2,a2,t2
   1bbc8:	02b707b3          	mul	a5,a4,a1
   1bbcc:	01160633          	add	a2,a2,a7
   1bbd0:	01f61713          	slli	a4,a2,0x1f
   1bbd4:	00165613          	srli	a2,a2,0x1
   1bbd8:	0017d793          	srli	a5,a5,0x1
   1bbdc:	00f76733          	or	a4,a4,a5
   1bbe0:	ccccd7b7          	lui	a5,0xccccd
   1bbe4:	ccc78f13          	addi	t5,a5,-820 # cccccccc <__alt_data_end+0xccc8cccc>
   1bbe8:	e29ff06f          	j	1ba10 <_vfiprintf_r+0x1120>
   1bbec:	00100e13          	li	t3,1
   1bbf0:	00000613          	li	a2,0
   1bbf4:	000b0413          	mv	s0,s6
   1bbf8:	8f0ff06f          	j	1ace8 <_vfiprintf_r+0x3f8>
   1bbfc:	04010613          	addi	a2,sp,64
   1bc00:	000a8593          	mv	a1,s5
   1bc04:	000b8513          	mv	a0,s7
   1bc08:	bddfe0ef          	jal	ra,1a7e4 <__sprint_r.part.0>
   1bc0c:	00050463          	beqz	a0,1bc14 <_vfiprintf_r+0x1324>
   1bc10:	f51fe06f          	j	1ab60 <_vfiprintf_r+0x270>
   1bc14:	04012223          	sw	zero,68(sp)
   1bc18:	f49fe06f          	j	1ab60 <_vfiprintf_r+0x270>
   1bc1c:	00600893          	li	a7,6
   1bc20:	eddff06f          	j	1bafc <_vfiprintf_r+0x120c>
   1bc24:	00000613          	li	a2,0
   1bc28:	00100e13          	li	t3,1
   1bc2c:	000b0413          	mv	s0,s6
   1bc30:	840ff06f          	j	1ac70 <_vfiprintf_r+0x380>
   1bc34:	01879793          	slli	a5,a5,0x18
   1bc38:	4187d793          	srai	a5,a5,0x18
   1bc3c:	41f7d893          	srai	a7,a5,0x1f
   1bc40:	00088713          	mv	a4,a7
   1bc44:	984ff06f          	j	1adc8 <_vfiprintf_r+0x4d8>
   1bc48:	0ff7f793          	zext.b	a5,a5
   1bc4c:	00000613          	li	a2,0
   1bc50:	ca4ff06f          	j	1b0f4 <_vfiprintf_r+0x804>
   1bc54:	0ff7f793          	zext.b	a5,a5
   1bc58:	00000613          	li	a2,0
   1bc5c:	c81ff06f          	j	1b8dc <_vfiprintf_r+0xfec>
   1bc60:	00082783          	lw	a5,0(a6)
   1bc64:	00480813          	addi	a6,a6,4
   1bc68:	01779023          	sh	s7,0(a5)
   1bc6c:	d85fe06f          	j	1a9f0 <_vfiprintf_r+0x100>
   1bc70:	03000793          	li	a5,48
   1bc74:	b18ff06f          	j	1af8c <_vfiprintf_r+0x69c>
   1bc78:	058aa503          	lw	a0,88(s5)
   1bc7c:	b34f90ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1bc80:	e75fe06f          	j	1aaf4 <_vfiprintf_r+0x204>
   1bc84:	00900593          	li	a1,9
   1bc88:	d8f5e4e3          	bltu	a1,a5,1ba10 <_vfiprintf_r+0x1120>
   1bc8c:	e05ff06f          	j	1ba90 <_vfiprintf_r+0x11a0>
   1bc90:	00048693          	mv	a3,s1
   1bc94:	00048893          	mv	a7,s1
   1bc98:	00000493          	li	s1,0
   1bc9c:	b08ff06f          	j	1afa4 <_vfiprintf_r+0x6b4>
   1bca0:	00058513          	mv	a0,a1
   1bca4:	00008e17          	auipc	t3,0x8
   1bca8:	33ce0e13          	addi	t3,t3,828 # 23fe0 <blanks.1>
   1bcac:	a35ff06f          	j	1b6e0 <_vfiprintf_r+0xdf0>
   1bcb0:	00160593          	addi	a1,a2,1
   1bcb4:	00008e17          	auipc	t3,0x8
   1bcb8:	32ce0e13          	addi	t3,t3,812 # 23fe0 <blanks.1>
   1bcbc:	a20ff06f          	j	1aedc <_vfiprintf_r+0x5ec>
   1bcc0:	064aa783          	lw	a5,100(s5)
   1bcc4:	0017f793          	andi	a5,a5,1
   1bcc8:	00079c63          	bnez	a5,1bce0 <_vfiprintf_r+0x13f0>
   1bccc:	00cad783          	lhu	a5,12(s5)
   1bcd0:	2007f793          	andi	a5,a5,512
   1bcd4:	00079663          	bnez	a5,1bce0 <_vfiprintf_r+0x13f0>
   1bcd8:	058aa503          	lw	a0,88(s5)
   1bcdc:	ad4f90ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1bce0:	fff00d93          	li	s11,-1
   1bce4:	e99fe06f          	j	1ab7c <_vfiprintf_r+0x28c>
   1bce8:	000e0593          	mv	a1,t3
   1bcec:	00008e97          	auipc	t4,0x8
   1bcf0:	304e8e93          	addi	t4,t4,772 # 23ff0 <zeroes.0>
   1bcf4:	ef4ff06f          	j	1b3e8 <_vfiprintf_r+0xaf8>
   1bcf8:	00082483          	lw	s1,0(a6)
   1bcfc:	00480813          	addi	a6,a6,4
   1bd00:	0004d463          	bgez	s1,1bd08 <_vfiprintf_r+0x1418>
   1bd04:	fff00493          	li	s1,-1
   1bd08:	00194703          	lbu	a4,1(s2)
   1bd0c:	00068913          	mv	s2,a3
   1bd10:	d81fe06f          	j	1aa90 <_vfiprintf_r+0x1a0>

0001bd14 <vfiprintf>:
   1bd14:	00060693          	mv	a3,a2
   1bd18:	00058613          	mv	a2,a1
   1bd1c:	00050593          	mv	a1,a0
   1bd20:	0000a517          	auipc	a0,0xa
   1bd24:	31c52503          	lw	a0,796(a0) # 2603c <_impure_ptr>
   1bd28:	bc9fe06f          	j	1a8f0 <_vfiprintf_r>

0001bd2c <__sbprintf>:
   1bd2c:	00c59783          	lh	a5,12(a1)
   1bd30:	00e5d703          	lhu	a4,14(a1)
   1bd34:	b7010113          	addi	sp,sp,-1168
   1bd38:	ffd7f793          	andi	a5,a5,-3
   1bd3c:	01079793          	slli	a5,a5,0x10
   1bd40:	0645a883          	lw	a7,100(a1)
   1bd44:	01c5a803          	lw	a6,28(a1)
   1bd48:	48812423          	sw	s0,1160(sp)
   1bd4c:	01071713          	slli	a4,a4,0x10
   1bd50:	00058413          	mv	s0,a1
   1bd54:	0107d793          	srli	a5,a5,0x10
   1bd58:	0245a583          	lw	a1,36(a1)
   1bd5c:	00e7e7b3          	or	a5,a5,a4
   1bd60:	49212023          	sw	s2,1152(sp)
   1bd64:	40000713          	li	a4,1024
   1bd68:	00050913          	mv	s2,a0
   1bd6c:	00f12a23          	sw	a5,20(sp)
   1bd70:	06010513          	addi	a0,sp,96
   1bd74:	07010793          	addi	a5,sp,112
   1bd78:	48112623          	sw	ra,1164(sp)
   1bd7c:	48912223          	sw	s1,1156(sp)
   1bd80:	47312e23          	sw	s3,1148(sp)
   1bd84:	00060493          	mv	s1,a2
   1bd88:	00068993          	mv	s3,a3
   1bd8c:	07112623          	sw	a7,108(sp)
   1bd90:	03012223          	sw	a6,36(sp)
   1bd94:	02b12623          	sw	a1,44(sp)
   1bd98:	00f12423          	sw	a5,8(sp)
   1bd9c:	00f12c23          	sw	a5,24(sp)
   1bda0:	00e12823          	sw	a4,16(sp)
   1bda4:	00e12e23          	sw	a4,28(sp)
   1bda8:	02012023          	sw	zero,32(sp)
   1bdac:	9dcf90ef          	jal	ra,14f88 <__retarget_lock_init_recursive>
   1bdb0:	00048613          	mv	a2,s1
   1bdb4:	00098693          	mv	a3,s3
   1bdb8:	00810593          	addi	a1,sp,8
   1bdbc:	00090513          	mv	a0,s2
   1bdc0:	b31fe0ef          	jal	ra,1a8f0 <_vfiprintf_r>
   1bdc4:	00050493          	mv	s1,a0
   1bdc8:	04055263          	bgez	a0,1be0c <__sbprintf+0xe0>
   1bdcc:	01415783          	lhu	a5,20(sp)
   1bdd0:	0407f793          	andi	a5,a5,64
   1bdd4:	00078863          	beqz	a5,1bde4 <__sbprintf+0xb8>
   1bdd8:	00c45783          	lhu	a5,12(s0)
   1bddc:	0407e793          	ori	a5,a5,64
   1bde0:	00f41623          	sh	a5,12(s0)
   1bde4:	06012503          	lw	a0,96(sp)
   1bde8:	9a8f90ef          	jal	ra,14f90 <__retarget_lock_close_recursive>
   1bdec:	48c12083          	lw	ra,1164(sp)
   1bdf0:	48812403          	lw	s0,1160(sp)
   1bdf4:	48012903          	lw	s2,1152(sp)
   1bdf8:	47c12983          	lw	s3,1148(sp)
   1bdfc:	00048513          	mv	a0,s1
   1be00:	48412483          	lw	s1,1156(sp)
   1be04:	49010113          	addi	sp,sp,1168
   1be08:	00008067          	ret
   1be0c:	00810593          	addi	a1,sp,8
   1be10:	00090513          	mv	a0,s2
   1be14:	bf8f50ef          	jal	ra,1120c <_fflush_r>
   1be18:	fa050ae3          	beqz	a0,1bdcc <__sbprintf+0xa0>
   1be1c:	fff00493          	li	s1,-1
   1be20:	fadff06f          	j	1bdcc <__sbprintf+0xa0>

0001be24 <__assert_func>:
   1be24:	ff010113          	addi	sp,sp,-16
   1be28:	00068793          	mv	a5,a3
   1be2c:	0000a717          	auipc	a4,0xa
   1be30:	21072703          	lw	a4,528(a4) # 2603c <_impure_ptr>
   1be34:	00060813          	mv	a6,a2
   1be38:	00112623          	sw	ra,12(sp)
   1be3c:	00c72883          	lw	a7,12(a4)
   1be40:	00078613          	mv	a2,a5
   1be44:	00050693          	mv	a3,a0
   1be48:	00058713          	mv	a4,a1
   1be4c:	00008797          	auipc	a5,0x8
   1be50:	1b478793          	addi	a5,a5,436 # 24000 <zeroes.0+0x10>
   1be54:	00080c63          	beqz	a6,1be6c <__assert_func+0x48>
   1be58:	00008597          	auipc	a1,0x8
   1be5c:	1b858593          	addi	a1,a1,440 # 24010 <zeroes.0+0x20>
   1be60:	00088513          	mv	a0,a7
   1be64:	2e0000ef          	jal	ra,1c144 <fiprintf>
   1be68:	0a4020ef          	jal	ra,1df0c <abort>
   1be6c:	00007797          	auipc	a5,0x7
   1be70:	72078793          	addi	a5,a5,1824 # 2358c <__flash_rodata_start+0x13c>
   1be74:	00078813          	mv	a6,a5
   1be78:	fe1ff06f          	j	1be58 <__assert_func+0x34>

0001be7c <__assert>:
   1be7c:	ff010113          	addi	sp,sp,-16
   1be80:	00060693          	mv	a3,a2
   1be84:	00000613          	li	a2,0
   1be88:	00112623          	sw	ra,12(sp)
   1be8c:	f99ff0ef          	jal	ra,1be24 <__assert_func>

0001be90 <_calloc_r>:
   1be90:	02c5b7b3          	mulhu	a5,a1,a2
   1be94:	ff010113          	addi	sp,sp,-16
   1be98:	00112623          	sw	ra,12(sp)
   1be9c:	00812423          	sw	s0,8(sp)
   1bea0:	02c585b3          	mul	a1,a1,a2
   1bea4:	0a079063          	bnez	a5,1bf44 <_calloc_r+0xb4>
   1bea8:	b74f90ef          	jal	ra,1521c <_malloc_r>
   1beac:	00050413          	mv	s0,a0
   1beb0:	0a050063          	beqz	a0,1bf50 <_calloc_r+0xc0>
   1beb4:	ffc52603          	lw	a2,-4(a0)
   1beb8:	02400713          	li	a4,36
   1bebc:	ffc67613          	andi	a2,a2,-4
   1bec0:	ffc60613          	addi	a2,a2,-4
   1bec4:	04c76863          	bltu	a4,a2,1bf14 <_calloc_r+0x84>
   1bec8:	01300693          	li	a3,19
   1becc:	00050793          	mv	a5,a0
   1bed0:	02c6f263          	bgeu	a3,a2,1bef4 <_calloc_r+0x64>
   1bed4:	00052023          	sw	zero,0(a0)
   1bed8:	00052223          	sw	zero,4(a0)
   1bedc:	01b00793          	li	a5,27
   1bee0:	04c7f863          	bgeu	a5,a2,1bf30 <_calloc_r+0xa0>
   1bee4:	00052423          	sw	zero,8(a0)
   1bee8:	00052623          	sw	zero,12(a0)
   1beec:	01050793          	addi	a5,a0,16
   1bef0:	06e60c63          	beq	a2,a4,1bf68 <_calloc_r+0xd8>
   1bef4:	0007a023          	sw	zero,0(a5)
   1bef8:	0007a223          	sw	zero,4(a5)
   1befc:	0007a423          	sw	zero,8(a5)
   1bf00:	00c12083          	lw	ra,12(sp)
   1bf04:	00040513          	mv	a0,s0
   1bf08:	00812403          	lw	s0,8(sp)
   1bf0c:	01010113          	addi	sp,sp,16
   1bf10:	00008067          	ret
   1bf14:	00000593          	li	a1,0
   1bf18:	929f10ef          	jal	ra,d840 <memset>
   1bf1c:	00c12083          	lw	ra,12(sp)
   1bf20:	00040513          	mv	a0,s0
   1bf24:	00812403          	lw	s0,8(sp)
   1bf28:	01010113          	addi	sp,sp,16
   1bf2c:	00008067          	ret
   1bf30:	00850793          	addi	a5,a0,8
   1bf34:	0007a023          	sw	zero,0(a5)
   1bf38:	0007a223          	sw	zero,4(a5)
   1bf3c:	0007a423          	sw	zero,8(a5)
   1bf40:	fc1ff06f          	j	1bf00 <_calloc_r+0x70>
   1bf44:	034000ef          	jal	ra,1bf78 <__errno>
   1bf48:	00c00793          	li	a5,12
   1bf4c:	00f52023          	sw	a5,0(a0)
   1bf50:	00000413          	li	s0,0
   1bf54:	00c12083          	lw	ra,12(sp)
   1bf58:	00040513          	mv	a0,s0
   1bf5c:	00812403          	lw	s0,8(sp)
   1bf60:	01010113          	addi	sp,sp,16
   1bf64:	00008067          	ret
   1bf68:	00052823          	sw	zero,16(a0)
   1bf6c:	01850793          	addi	a5,a0,24
   1bf70:	00052a23          	sw	zero,20(a0)
   1bf74:	f81ff06f          	j	1bef4 <_calloc_r+0x64>

0001bf78 <__errno>:
   1bf78:	0000a517          	auipc	a0,0xa
   1bf7c:	0c452503          	lw	a0,196(a0) # 2603c <_impure_ptr>
   1bf80:	00008067          	ret

0001bf84 <_fclose_r>:
   1bf84:	ff010113          	addi	sp,sp,-16
   1bf88:	00112623          	sw	ra,12(sp)
   1bf8c:	00812423          	sw	s0,8(sp)
   1bf90:	00912223          	sw	s1,4(sp)
   1bf94:	01212023          	sw	s2,0(sp)
   1bf98:	0c058a63          	beqz	a1,1c06c <_fclose_r+0xe8>
   1bf9c:	00058413          	mv	s0,a1
   1bfa0:	00050493          	mv	s1,a0
   1bfa4:	00050663          	beqz	a0,1bfb0 <_fclose_r+0x2c>
   1bfa8:	03852783          	lw	a5,56(a0)
   1bfac:	0e078063          	beqz	a5,1c08c <_fclose_r+0x108>
   1bfb0:	06442783          	lw	a5,100(s0)
   1bfb4:	00c41703          	lh	a4,12(s0)
   1bfb8:	0017f793          	andi	a5,a5,1
   1bfbc:	0a079663          	bnez	a5,1c068 <_fclose_r+0xe4>
   1bfc0:	20077713          	andi	a4,a4,512
   1bfc4:	10070063          	beqz	a4,1c0c4 <_fclose_r+0x140>
   1bfc8:	00040593          	mv	a1,s0
   1bfcc:	00048513          	mv	a0,s1
   1bfd0:	ff1f40ef          	jal	ra,10fc0 <__sflush_r>
   1bfd4:	02c42783          	lw	a5,44(s0)
   1bfd8:	00050913          	mv	s2,a0
   1bfdc:	00078a63          	beqz	a5,1bff0 <_fclose_r+0x6c>
   1bfe0:	01c42583          	lw	a1,28(s0)
   1bfe4:	00048513          	mv	a0,s1
   1bfe8:	000780e7          	jalr	a5
   1bfec:	0a054c63          	bltz	a0,1c0a4 <_fclose_r+0x120>
   1bff0:	00c45783          	lhu	a5,12(s0)
   1bff4:	0807f793          	andi	a5,a5,128
   1bff8:	0a079e63          	bnez	a5,1c0b4 <_fclose_r+0x130>
   1bffc:	03042583          	lw	a1,48(s0)
   1c000:	00058c63          	beqz	a1,1c018 <_fclose_r+0x94>
   1c004:	04040793          	addi	a5,s0,64
   1c008:	00f58663          	beq	a1,a5,1c014 <_fclose_r+0x90>
   1c00c:	00048513          	mv	a0,s1
   1c010:	9edf50ef          	jal	ra,119fc <_free_r>
   1c014:	02042823          	sw	zero,48(s0)
   1c018:	04442583          	lw	a1,68(s0)
   1c01c:	00058863          	beqz	a1,1c02c <_fclose_r+0xa8>
   1c020:	00048513          	mv	a0,s1
   1c024:	9d9f50ef          	jal	ra,119fc <_free_r>
   1c028:	04042223          	sw	zero,68(s0)
   1c02c:	fa4f50ef          	jal	ra,117d0 <__sfp_lock_acquire>
   1c030:	06442783          	lw	a5,100(s0)
   1c034:	00041623          	sh	zero,12(s0)
   1c038:	0017f793          	andi	a5,a5,1
   1c03c:	0a078a63          	beqz	a5,1c0f0 <_fclose_r+0x16c>
   1c040:	05842503          	lw	a0,88(s0)
   1c044:	f4df80ef          	jal	ra,14f90 <__retarget_lock_close_recursive>
   1c048:	f94f50ef          	jal	ra,117dc <__sfp_lock_release>
   1c04c:	00c12083          	lw	ra,12(sp)
   1c050:	00812403          	lw	s0,8(sp)
   1c054:	00412483          	lw	s1,4(sp)
   1c058:	00090513          	mv	a0,s2
   1c05c:	00012903          	lw	s2,0(sp)
   1c060:	01010113          	addi	sp,sp,16
   1c064:	00008067          	ret
   1c068:	f60710e3          	bnez	a4,1bfc8 <_fclose_r+0x44>
   1c06c:	00000913          	li	s2,0
   1c070:	00c12083          	lw	ra,12(sp)
   1c074:	00812403          	lw	s0,8(sp)
   1c078:	00412483          	lw	s1,4(sp)
   1c07c:	00090513          	mv	a0,s2
   1c080:	00012903          	lw	s2,0(sp)
   1c084:	01010113          	addi	sp,sp,16
   1c088:	00008067          	ret
   1c08c:	c38f50ef          	jal	ra,114c4 <__sinit>
   1c090:	06442783          	lw	a5,100(s0)
   1c094:	00c41703          	lh	a4,12(s0)
   1c098:	0017f793          	andi	a5,a5,1
   1c09c:	fc0796e3          	bnez	a5,1c068 <_fclose_r+0xe4>
   1c0a0:	f21ff06f          	j	1bfc0 <_fclose_r+0x3c>
   1c0a4:	00c45783          	lhu	a5,12(s0)
   1c0a8:	fff00913          	li	s2,-1
   1c0ac:	0807f793          	andi	a5,a5,128
   1c0b0:	f40786e3          	beqz	a5,1bffc <_fclose_r+0x78>
   1c0b4:	01042583          	lw	a1,16(s0)
   1c0b8:	00048513          	mv	a0,s1
   1c0bc:	941f50ef          	jal	ra,119fc <_free_r>
   1c0c0:	f3dff06f          	j	1bffc <_fclose_r+0x78>
   1c0c4:	05842503          	lw	a0,88(s0)
   1c0c8:	ed1f80ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   1c0cc:	00c41783          	lh	a5,12(s0)
   1c0d0:	ee079ce3          	bnez	a5,1bfc8 <_fclose_r+0x44>
   1c0d4:	06442783          	lw	a5,100(s0)
   1c0d8:	0017f793          	andi	a5,a5,1
   1c0dc:	f80798e3          	bnez	a5,1c06c <_fclose_r+0xe8>
   1c0e0:	05842503          	lw	a0,88(s0)
   1c0e4:	00000913          	li	s2,0
   1c0e8:	ec9f80ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1c0ec:	f85ff06f          	j	1c070 <_fclose_r+0xec>
   1c0f0:	05842503          	lw	a0,88(s0)
   1c0f4:	ebdf80ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1c0f8:	f49ff06f          	j	1c040 <_fclose_r+0xbc>

0001c0fc <fclose>:
   1c0fc:	00050593          	mv	a1,a0
   1c100:	0000a517          	auipc	a0,0xa
   1c104:	f3c52503          	lw	a0,-196(a0) # 2603c <_impure_ptr>
   1c108:	e7dff06f          	j	1bf84 <_fclose_r>

0001c10c <_fiprintf_r>:
   1c10c:	fc010113          	addi	sp,sp,-64
   1c110:	02c10313          	addi	t1,sp,44
   1c114:	02d12623          	sw	a3,44(sp)
   1c118:	00030693          	mv	a3,t1
   1c11c:	00112e23          	sw	ra,28(sp)
   1c120:	02e12823          	sw	a4,48(sp)
   1c124:	02f12a23          	sw	a5,52(sp)
   1c128:	03012c23          	sw	a6,56(sp)
   1c12c:	03112e23          	sw	a7,60(sp)
   1c130:	00612623          	sw	t1,12(sp)
   1c134:	fbcfe0ef          	jal	ra,1a8f0 <_vfiprintf_r>
   1c138:	01c12083          	lw	ra,28(sp)
   1c13c:	04010113          	addi	sp,sp,64
   1c140:	00008067          	ret

0001c144 <fiprintf>:
   1c144:	fc010113          	addi	sp,sp,-64
   1c148:	02810313          	addi	t1,sp,40
   1c14c:	02c12423          	sw	a2,40(sp)
   1c150:	02d12623          	sw	a3,44(sp)
   1c154:	00058613          	mv	a2,a1
   1c158:	00030693          	mv	a3,t1
   1c15c:	00050593          	mv	a1,a0
   1c160:	0000a517          	auipc	a0,0xa
   1c164:	edc52503          	lw	a0,-292(a0) # 2603c <_impure_ptr>
   1c168:	00112e23          	sw	ra,28(sp)
   1c16c:	02e12823          	sw	a4,48(sp)
   1c170:	02f12a23          	sw	a5,52(sp)
   1c174:	03012c23          	sw	a6,56(sp)
   1c178:	03112e23          	sw	a7,60(sp)
   1c17c:	00612623          	sw	t1,12(sp)
   1c180:	f70fe0ef          	jal	ra,1a8f0 <_vfiprintf_r>
   1c184:	01c12083          	lw	ra,28(sp)
   1c188:	04010113          	addi	sp,sp,64
   1c18c:	00008067          	ret

0001c190 <__fputwc>:
   1c190:	fe010113          	addi	sp,sp,-32
   1c194:	00812c23          	sw	s0,24(sp)
   1c198:	00912a23          	sw	s1,20(sp)
   1c19c:	01212823          	sw	s2,16(sp)
   1c1a0:	00112e23          	sw	ra,28(sp)
   1c1a4:	00050913          	mv	s2,a0
   1c1a8:	00058493          	mv	s1,a1
   1c1ac:	00060413          	mv	s0,a2
   1c1b0:	3c8000ef          	jal	ra,1c578 <__locale_mb_cur_max>
   1c1b4:	00100793          	li	a5,1
   1c1b8:	00f51c63          	bne	a0,a5,1c1d0 <__fputwc+0x40>
   1c1bc:	fff48793          	addi	a5,s1,-1
   1c1c0:	0fe00713          	li	a4,254
   1c1c4:	00f76663          	bltu	a4,a5,1c1d0 <__fputwc+0x40>
   1c1c8:	00910623          	sb	s1,12(sp)
   1c1cc:	0240006f          	j	1c1f0 <__fputwc+0x60>
   1c1d0:	05c40693          	addi	a3,s0,92
   1c1d4:	00048613          	mv	a2,s1
   1c1d8:	00c10593          	addi	a1,sp,12
   1c1dc:	00090513          	mv	a0,s2
   1c1e0:	3e5010ef          	jal	ra,1ddc4 <_wcrtomb_r>
   1c1e4:	fff00793          	li	a5,-1
   1c1e8:	08f50463          	beq	a0,a5,1c270 <__fputwc+0xe0>
   1c1ec:	02050c63          	beqz	a0,1c224 <__fputwc+0x94>
   1c1f0:	00842783          	lw	a5,8(s0)
   1c1f4:	00c14583          	lbu	a1,12(sp)
   1c1f8:	fff78793          	addi	a5,a5,-1
   1c1fc:	00f42423          	sw	a5,8(s0)
   1c200:	0007da63          	bgez	a5,1c214 <__fputwc+0x84>
   1c204:	01842703          	lw	a4,24(s0)
   1c208:	02e7cc63          	blt	a5,a4,1c240 <__fputwc+0xb0>
   1c20c:	00a00793          	li	a5,10
   1c210:	02f58863          	beq	a1,a5,1c240 <__fputwc+0xb0>
   1c214:	00042783          	lw	a5,0(s0)
   1c218:	00178713          	addi	a4,a5,1
   1c21c:	00e42023          	sw	a4,0(s0)
   1c220:	00b78023          	sb	a1,0(a5)
   1c224:	01c12083          	lw	ra,28(sp)
   1c228:	01812403          	lw	s0,24(sp)
   1c22c:	01012903          	lw	s2,16(sp)
   1c230:	00048513          	mv	a0,s1
   1c234:	01412483          	lw	s1,20(sp)
   1c238:	02010113          	addi	sp,sp,32
   1c23c:	00008067          	ret
   1c240:	00040613          	mv	a2,s0
   1c244:	00090513          	mv	a0,s2
   1c248:	1f5010ef          	jal	ra,1dc3c <__swbuf_r>
   1c24c:	fff00793          	li	a5,-1
   1c250:	fcf51ae3          	bne	a0,a5,1c224 <__fputwc+0x94>
   1c254:	fff00513          	li	a0,-1
   1c258:	01c12083          	lw	ra,28(sp)
   1c25c:	01812403          	lw	s0,24(sp)
   1c260:	01412483          	lw	s1,20(sp)
   1c264:	01012903          	lw	s2,16(sp)
   1c268:	02010113          	addi	sp,sp,32
   1c26c:	00008067          	ret
   1c270:	00c45783          	lhu	a5,12(s0)
   1c274:	fff00513          	li	a0,-1
   1c278:	0407e793          	ori	a5,a5,64
   1c27c:	00f41623          	sh	a5,12(s0)
   1c280:	fd9ff06f          	j	1c258 <__fputwc+0xc8>

0001c284 <_fputwc_r>:
   1c284:	06462783          	lw	a5,100(a2)
   1c288:	fe010113          	addi	sp,sp,-32
   1c28c:	00812c23          	sw	s0,24(sp)
   1c290:	00912a23          	sw	s1,20(sp)
   1c294:	0017f713          	andi	a4,a5,1
   1c298:	00112e23          	sw	ra,28(sp)
   1c29c:	00c61783          	lh	a5,12(a2)
   1c2a0:	00060413          	mv	s0,a2
   1c2a4:	00050493          	mv	s1,a0
   1c2a8:	00071663          	bnez	a4,1c2b4 <_fputwc_r+0x30>
   1c2ac:	2007f713          	andi	a4,a5,512
   1c2b0:	08070463          	beqz	a4,1c338 <_fputwc_r+0xb4>
   1c2b4:	01279713          	slli	a4,a5,0x12
   1c2b8:	02074063          	bltz	a4,1c2d8 <_fputwc_r+0x54>
   1c2bc:	06442703          	lw	a4,100(s0)
   1c2c0:	000026b7          	lui	a3,0x2
   1c2c4:	00d7e7b3          	or	a5,a5,a3
   1c2c8:	000026b7          	lui	a3,0x2
   1c2cc:	00d76733          	or	a4,a4,a3
   1c2d0:	00f41623          	sh	a5,12(s0)
   1c2d4:	06e42223          	sw	a4,100(s0)
   1c2d8:	00048513          	mv	a0,s1
   1c2dc:	00040613          	mv	a2,s0
   1c2e0:	eb1ff0ef          	jal	ra,1c190 <__fputwc>
   1c2e4:	06442783          	lw	a5,100(s0)
   1c2e8:	00050493          	mv	s1,a0
   1c2ec:	0017f793          	andi	a5,a5,1
   1c2f0:	00079863          	bnez	a5,1c300 <_fputwc_r+0x7c>
   1c2f4:	00c45783          	lhu	a5,12(s0)
   1c2f8:	2007f793          	andi	a5,a5,512
   1c2fc:	00078e63          	beqz	a5,1c318 <_fputwc_r+0x94>
   1c300:	01c12083          	lw	ra,28(sp)
   1c304:	01812403          	lw	s0,24(sp)
   1c308:	00048513          	mv	a0,s1
   1c30c:	01412483          	lw	s1,20(sp)
   1c310:	02010113          	addi	sp,sp,32
   1c314:	00008067          	ret
   1c318:	05842503          	lw	a0,88(s0)
   1c31c:	c95f80ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1c320:	01c12083          	lw	ra,28(sp)
   1c324:	01812403          	lw	s0,24(sp)
   1c328:	00048513          	mv	a0,s1
   1c32c:	01412483          	lw	s1,20(sp)
   1c330:	02010113          	addi	sp,sp,32
   1c334:	00008067          	ret
   1c338:	05862503          	lw	a0,88(a2)
   1c33c:	00b12623          	sw	a1,12(sp)
   1c340:	c59f80ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   1c344:	00c41783          	lh	a5,12(s0)
   1c348:	00c12583          	lw	a1,12(sp)
   1c34c:	f69ff06f          	j	1c2b4 <_fputwc_r+0x30>

0001c350 <fputwc>:
   1c350:	fe010113          	addi	sp,sp,-32
   1c354:	00812c23          	sw	s0,24(sp)
   1c358:	00912a23          	sw	s1,20(sp)
   1c35c:	00112e23          	sw	ra,28(sp)
   1c360:	0000a497          	auipc	s1,0xa
   1c364:	cdc4a483          	lw	s1,-804(s1) # 2603c <_impure_ptr>
   1c368:	00058413          	mv	s0,a1
   1c36c:	00050593          	mv	a1,a0
   1c370:	00048663          	beqz	s1,1c37c <fputwc+0x2c>
   1c374:	0384a783          	lw	a5,56(s1)
   1c378:	08078063          	beqz	a5,1c3f8 <fputwc+0xa8>
   1c37c:	06442703          	lw	a4,100(s0)
   1c380:	00c41783          	lh	a5,12(s0)
   1c384:	00177713          	andi	a4,a4,1
   1c388:	00071663          	bnez	a4,1c394 <fputwc+0x44>
   1c38c:	2007f713          	andi	a4,a5,512
   1c390:	08070e63          	beqz	a4,1c42c <fputwc+0xdc>
   1c394:	01279713          	slli	a4,a5,0x12
   1c398:	02074063          	bltz	a4,1c3b8 <fputwc+0x68>
   1c39c:	06442703          	lw	a4,100(s0)
   1c3a0:	000026b7          	lui	a3,0x2
   1c3a4:	00d7e7b3          	or	a5,a5,a3
   1c3a8:	000026b7          	lui	a3,0x2
   1c3ac:	00d76733          	or	a4,a4,a3
   1c3b0:	00f41623          	sh	a5,12(s0)
   1c3b4:	06e42223          	sw	a4,100(s0)
   1c3b8:	00048513          	mv	a0,s1
   1c3bc:	00040613          	mv	a2,s0
   1c3c0:	dd1ff0ef          	jal	ra,1c190 <__fputwc>
   1c3c4:	06442783          	lw	a5,100(s0)
   1c3c8:	00050493          	mv	s1,a0
   1c3cc:	0017f793          	andi	a5,a5,1
   1c3d0:	00079863          	bnez	a5,1c3e0 <fputwc+0x90>
   1c3d4:	00c45783          	lhu	a5,12(s0)
   1c3d8:	2007f793          	andi	a5,a5,512
   1c3dc:	02078863          	beqz	a5,1c40c <fputwc+0xbc>
   1c3e0:	01c12083          	lw	ra,28(sp)
   1c3e4:	01812403          	lw	s0,24(sp)
   1c3e8:	00048513          	mv	a0,s1
   1c3ec:	01412483          	lw	s1,20(sp)
   1c3f0:	02010113          	addi	sp,sp,32
   1c3f4:	00008067          	ret
   1c3f8:	00a12623          	sw	a0,12(sp)
   1c3fc:	00048513          	mv	a0,s1
   1c400:	8c4f50ef          	jal	ra,114c4 <__sinit>
   1c404:	00c12583          	lw	a1,12(sp)
   1c408:	f75ff06f          	j	1c37c <fputwc+0x2c>
   1c40c:	05842503          	lw	a0,88(s0)
   1c410:	ba1f80ef          	jal	ra,14fb0 <__retarget_lock_release_recursive>
   1c414:	01c12083          	lw	ra,28(sp)
   1c418:	01812403          	lw	s0,24(sp)
   1c41c:	00048513          	mv	a0,s1
   1c420:	01412483          	lw	s1,20(sp)
   1c424:	02010113          	addi	sp,sp,32
   1c428:	00008067          	ret
   1c42c:	05842503          	lw	a0,88(s0)
   1c430:	00b12623          	sw	a1,12(sp)
   1c434:	b65f80ef          	jal	ra,14f98 <__retarget_lock_acquire_recursive>
   1c438:	00c41783          	lh	a5,12(s0)
   1c43c:	00c12583          	lw	a1,12(sp)
   1c440:	f55ff06f          	j	1c394 <fputwc+0x44>

0001c444 <_fstat_r>:
   1c444:	ff010113          	addi	sp,sp,-16
   1c448:	00058713          	mv	a4,a1
   1c44c:	00812423          	sw	s0,8(sp)
   1c450:	00060593          	mv	a1,a2
   1c454:	00050413          	mv	s0,a0
   1c458:	00070513          	mv	a0,a4
   1c45c:	0000c797          	auipc	a5,0xc
   1c460:	8407a623          	sw	zero,-1972(a5) # 27ca8 <errno>
   1c464:	00112623          	sw	ra,12(sp)
   1c468:	0d8060ef          	jal	ra,22540 <_fstat>
   1c46c:	fff00793          	li	a5,-1
   1c470:	00f50a63          	beq	a0,a5,1c484 <_fstat_r+0x40>
   1c474:	00c12083          	lw	ra,12(sp)
   1c478:	00812403          	lw	s0,8(sp)
   1c47c:	01010113          	addi	sp,sp,16
   1c480:	00008067          	ret
   1c484:	0000c797          	auipc	a5,0xc
   1c488:	8247a783          	lw	a5,-2012(a5) # 27ca8 <errno>
   1c48c:	fe0784e3          	beqz	a5,1c474 <_fstat_r+0x30>
   1c490:	00c12083          	lw	ra,12(sp)
   1c494:	00f42023          	sw	a5,0(s0)
   1c498:	00812403          	lw	s0,8(sp)
   1c49c:	01010113          	addi	sp,sp,16
   1c4a0:	00008067          	ret

0001c4a4 <_isatty_r>:
   1c4a4:	ff010113          	addi	sp,sp,-16
   1c4a8:	00812423          	sw	s0,8(sp)
   1c4ac:	00050413          	mv	s0,a0
   1c4b0:	00058513          	mv	a0,a1
   1c4b4:	0000b797          	auipc	a5,0xb
   1c4b8:	7e07aa23          	sw	zero,2036(a5) # 27ca8 <errno>
   1c4bc:	00112623          	sw	ra,12(sp)
   1c4c0:	1ac060ef          	jal	ra,2266c <_isatty>
   1c4c4:	fff00793          	li	a5,-1
   1c4c8:	00f50a63          	beq	a0,a5,1c4dc <_isatty_r+0x38>
   1c4cc:	00c12083          	lw	ra,12(sp)
   1c4d0:	00812403          	lw	s0,8(sp)
   1c4d4:	01010113          	addi	sp,sp,16
   1c4d8:	00008067          	ret
   1c4dc:	0000b797          	auipc	a5,0xb
   1c4e0:	7cc7a783          	lw	a5,1996(a5) # 27ca8 <errno>
   1c4e4:	fe0784e3          	beqz	a5,1c4cc <_isatty_r+0x28>
   1c4e8:	00c12083          	lw	ra,12(sp)
   1c4ec:	00f42023          	sw	a5,0(s0)
   1c4f0:	00812403          	lw	s0,8(sp)
   1c4f4:	01010113          	addi	sp,sp,16
   1c4f8:	00008067          	ret

0001c4fc <_setlocale_r>:
   1c4fc:	04060063          	beqz	a2,1c53c <_setlocale_r+0x40>
   1c500:	ff010113          	addi	sp,sp,-16
   1c504:	00008597          	auipc	a1,0x8
   1c508:	b4058593          	addi	a1,a1,-1216 # 24044 <zeroes.0+0x54>
   1c50c:	00060513          	mv	a0,a2
   1c510:	00812423          	sw	s0,8(sp)
   1c514:	00112623          	sw	ra,12(sp)
   1c518:	00060413          	mv	s0,a2
   1c51c:	220000ef          	jal	ra,1c73c <strcmp>
   1c520:	02051463          	bnez	a0,1c548 <_setlocale_r+0x4c>
   1c524:	00008517          	auipc	a0,0x8
   1c528:	b1c50513          	addi	a0,a0,-1252 # 24040 <zeroes.0+0x50>
   1c52c:	00c12083          	lw	ra,12(sp)
   1c530:	00812403          	lw	s0,8(sp)
   1c534:	01010113          	addi	sp,sp,16
   1c538:	00008067          	ret
   1c53c:	00008517          	auipc	a0,0x8
   1c540:	b0450513          	addi	a0,a0,-1276 # 24040 <zeroes.0+0x50>
   1c544:	00008067          	ret
   1c548:	00008597          	auipc	a1,0x8
   1c54c:	af858593          	addi	a1,a1,-1288 # 24040 <zeroes.0+0x50>
   1c550:	00040513          	mv	a0,s0
   1c554:	1e8000ef          	jal	ra,1c73c <strcmp>
   1c558:	fc0506e3          	beqz	a0,1c524 <_setlocale_r+0x28>
   1c55c:	00007597          	auipc	a1,0x7
   1c560:	03058593          	addi	a1,a1,48 # 2358c <__flash_rodata_start+0x13c>
   1c564:	00040513          	mv	a0,s0
   1c568:	1d4000ef          	jal	ra,1c73c <strcmp>
   1c56c:	fa050ce3          	beqz	a0,1c524 <_setlocale_r+0x28>
   1c570:	00000513          	li	a0,0
   1c574:	fb9ff06f          	j	1c52c <_setlocale_r+0x30>

0001c578 <__locale_mb_cur_max>:
   1c578:	0000a517          	auipc	a0,0xa
   1c57c:	a4854503          	lbu	a0,-1464(a0) # 25fc0 <__global_locale+0x128>
   1c580:	00008067          	ret

0001c584 <setlocale>:
   1c584:	04058063          	beqz	a1,1c5c4 <setlocale+0x40>
   1c588:	ff010113          	addi	sp,sp,-16
   1c58c:	00812423          	sw	s0,8(sp)
   1c590:	00058413          	mv	s0,a1
   1c594:	00040513          	mv	a0,s0
   1c598:	00008597          	auipc	a1,0x8
   1c59c:	aac58593          	addi	a1,a1,-1364 # 24044 <zeroes.0+0x54>
   1c5a0:	00112623          	sw	ra,12(sp)
   1c5a4:	198000ef          	jal	ra,1c73c <strcmp>
   1c5a8:	02051463          	bnez	a0,1c5d0 <setlocale+0x4c>
   1c5ac:	00008517          	auipc	a0,0x8
   1c5b0:	a9450513          	addi	a0,a0,-1388 # 24040 <zeroes.0+0x50>
   1c5b4:	00c12083          	lw	ra,12(sp)
   1c5b8:	00812403          	lw	s0,8(sp)
   1c5bc:	01010113          	addi	sp,sp,16
   1c5c0:	00008067          	ret
   1c5c4:	00008517          	auipc	a0,0x8
   1c5c8:	a7c50513          	addi	a0,a0,-1412 # 24040 <zeroes.0+0x50>
   1c5cc:	00008067          	ret
   1c5d0:	00008597          	auipc	a1,0x8
   1c5d4:	a7058593          	addi	a1,a1,-1424 # 24040 <zeroes.0+0x50>
   1c5d8:	00040513          	mv	a0,s0
   1c5dc:	160000ef          	jal	ra,1c73c <strcmp>
   1c5e0:	fc0506e3          	beqz	a0,1c5ac <setlocale+0x28>
   1c5e4:	00007597          	auipc	a1,0x7
   1c5e8:	fa858593          	addi	a1,a1,-88 # 2358c <__flash_rodata_start+0x13c>
   1c5ec:	00040513          	mv	a0,s0
   1c5f0:	14c000ef          	jal	ra,1c73c <strcmp>
   1c5f4:	fa050ce3          	beqz	a0,1c5ac <setlocale+0x28>
   1c5f8:	00000513          	li	a0,0
   1c5fc:	fb9ff06f          	j	1c5b4 <setlocale+0x30>

0001c600 <_lseek_r>:
   1c600:	ff010113          	addi	sp,sp,-16
   1c604:	00058713          	mv	a4,a1
   1c608:	00812423          	sw	s0,8(sp)
   1c60c:	00060593          	mv	a1,a2
   1c610:	00050413          	mv	s0,a0
   1c614:	00068613          	mv	a2,a3
   1c618:	00070513          	mv	a0,a4
   1c61c:	0000b797          	auipc	a5,0xb
   1c620:	6807a623          	sw	zero,1676(a5) # 27ca8 <errno>
   1c624:	00112623          	sw	ra,12(sp)
   1c628:	2cc060ef          	jal	ra,228f4 <_lseek>
   1c62c:	fff00793          	li	a5,-1
   1c630:	00f50a63          	beq	a0,a5,1c644 <_lseek_r+0x44>
   1c634:	00c12083          	lw	ra,12(sp)
   1c638:	00812403          	lw	s0,8(sp)
   1c63c:	01010113          	addi	sp,sp,16
   1c640:	00008067          	ret
   1c644:	0000b797          	auipc	a5,0xb
   1c648:	6647a783          	lw	a5,1636(a5) # 27ca8 <errno>
   1c64c:	fe0784e3          	beqz	a5,1c634 <_lseek_r+0x34>
   1c650:	00c12083          	lw	ra,12(sp)
   1c654:	00f42023          	sw	a5,0(s0)
   1c658:	00812403          	lw	s0,8(sp)
   1c65c:	01010113          	addi	sp,sp,16
   1c660:	00008067          	ret

0001c664 <_mbtowc_r>:
   1c664:	0000a797          	auipc	a5,0xa
   1c668:	9187a783          	lw	a5,-1768(a5) # 25f7c <__global_locale+0xe4>
   1c66c:	00078067          	jr	a5

0001c670 <__ascii_mbtowc>:
   1c670:	02058063          	beqz	a1,1c690 <__ascii_mbtowc+0x20>
   1c674:	04060263          	beqz	a2,1c6b8 <__ascii_mbtowc+0x48>
   1c678:	04068863          	beqz	a3,1c6c8 <__ascii_mbtowc+0x58>
   1c67c:	00064783          	lbu	a5,0(a2)
   1c680:	00f5a023          	sw	a5,0(a1)
   1c684:	00064503          	lbu	a0,0(a2)
   1c688:	00a03533          	snez	a0,a0
   1c68c:	00008067          	ret
   1c690:	ff010113          	addi	sp,sp,-16
   1c694:	00c10593          	addi	a1,sp,12
   1c698:	02060463          	beqz	a2,1c6c0 <__ascii_mbtowc+0x50>
   1c69c:	02068a63          	beqz	a3,1c6d0 <__ascii_mbtowc+0x60>
   1c6a0:	00064783          	lbu	a5,0(a2)
   1c6a4:	00f5a023          	sw	a5,0(a1)
   1c6a8:	00064503          	lbu	a0,0(a2)
   1c6ac:	00a03533          	snez	a0,a0
   1c6b0:	01010113          	addi	sp,sp,16
   1c6b4:	00008067          	ret
   1c6b8:	00000513          	li	a0,0
   1c6bc:	00008067          	ret
   1c6c0:	00000513          	li	a0,0
   1c6c4:	fedff06f          	j	1c6b0 <__ascii_mbtowc+0x40>
   1c6c8:	ffe00513          	li	a0,-2
   1c6cc:	00008067          	ret
   1c6d0:	ffe00513          	li	a0,-2
   1c6d4:	fddff06f          	j	1c6b0 <__ascii_mbtowc+0x40>

0001c6d8 <_read_r>:
   1c6d8:	ff010113          	addi	sp,sp,-16
   1c6dc:	00058713          	mv	a4,a1
   1c6e0:	00812423          	sw	s0,8(sp)
   1c6e4:	00060593          	mv	a1,a2
   1c6e8:	00050413          	mv	s0,a0
   1c6ec:	00068613          	mv	a2,a3
   1c6f0:	00070513          	mv	a0,a4
   1c6f4:	0000b797          	auipc	a5,0xb
   1c6f8:	5a07aa23          	sw	zero,1460(a5) # 27ca8 <errno>
   1c6fc:	00112623          	sw	ra,12(sp)
   1c700:	5c0060ef          	jal	ra,22cc0 <_read>
   1c704:	fff00793          	li	a5,-1
   1c708:	00f50a63          	beq	a0,a5,1c71c <_read_r+0x44>
   1c70c:	00c12083          	lw	ra,12(sp)
   1c710:	00812403          	lw	s0,8(sp)
   1c714:	01010113          	addi	sp,sp,16
   1c718:	00008067          	ret
   1c71c:	0000b797          	auipc	a5,0xb
   1c720:	58c7a783          	lw	a5,1420(a5) # 27ca8 <errno>
   1c724:	fe0784e3          	beqz	a5,1c70c <_read_r+0x34>
   1c728:	00c12083          	lw	ra,12(sp)
   1c72c:	00f42023          	sw	a5,0(s0)
   1c730:	00812403          	lw	s0,8(sp)
   1c734:	01010113          	addi	sp,sp,16
   1c738:	00008067          	ret

0001c73c <strcmp>:
   1c73c:	00b56733          	or	a4,a0,a1
   1c740:	fff00393          	li	t2,-1
   1c744:	00377713          	andi	a4,a4,3
   1c748:	10071063          	bnez	a4,1c848 <strcmp+0x10c>
   1c74c:	7f7f87b7          	lui	a5,0x7f7f8
   1c750:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <__alt_data_end+0x7f7b7f7f>
   1c754:	00052603          	lw	a2,0(a0)
   1c758:	0005a683          	lw	a3,0(a1)
   1c75c:	00f672b3          	and	t0,a2,a5
   1c760:	00f66333          	or	t1,a2,a5
   1c764:	00f282b3          	add	t0,t0,a5
   1c768:	0062e2b3          	or	t0,t0,t1
   1c76c:	10729263          	bne	t0,t2,1c870 <strcmp+0x134>
   1c770:	08d61663          	bne	a2,a3,1c7fc <strcmp+0xc0>
   1c774:	00452603          	lw	a2,4(a0)
   1c778:	0045a683          	lw	a3,4(a1)
   1c77c:	00f672b3          	and	t0,a2,a5
   1c780:	00f66333          	or	t1,a2,a5
   1c784:	00f282b3          	add	t0,t0,a5
   1c788:	0062e2b3          	or	t0,t0,t1
   1c78c:	0c729e63          	bne	t0,t2,1c868 <strcmp+0x12c>
   1c790:	06d61663          	bne	a2,a3,1c7fc <strcmp+0xc0>
   1c794:	00852603          	lw	a2,8(a0)
   1c798:	0085a683          	lw	a3,8(a1)
   1c79c:	00f672b3          	and	t0,a2,a5
   1c7a0:	00f66333          	or	t1,a2,a5
   1c7a4:	00f282b3          	add	t0,t0,a5
   1c7a8:	0062e2b3          	or	t0,t0,t1
   1c7ac:	0c729863          	bne	t0,t2,1c87c <strcmp+0x140>
   1c7b0:	04d61663          	bne	a2,a3,1c7fc <strcmp+0xc0>
   1c7b4:	00c52603          	lw	a2,12(a0)
   1c7b8:	00c5a683          	lw	a3,12(a1)
   1c7bc:	00f672b3          	and	t0,a2,a5
   1c7c0:	00f66333          	or	t1,a2,a5
   1c7c4:	00f282b3          	add	t0,t0,a5
   1c7c8:	0062e2b3          	or	t0,t0,t1
   1c7cc:	0c729263          	bne	t0,t2,1c890 <strcmp+0x154>
   1c7d0:	02d61663          	bne	a2,a3,1c7fc <strcmp+0xc0>
   1c7d4:	01052603          	lw	a2,16(a0)
   1c7d8:	0105a683          	lw	a3,16(a1)
   1c7dc:	00f672b3          	and	t0,a2,a5
   1c7e0:	00f66333          	or	t1,a2,a5
   1c7e4:	00f282b3          	add	t0,t0,a5
   1c7e8:	0062e2b3          	or	t0,t0,t1
   1c7ec:	0a729c63          	bne	t0,t2,1c8a4 <strcmp+0x168>
   1c7f0:	01450513          	addi	a0,a0,20
   1c7f4:	01458593          	addi	a1,a1,20
   1c7f8:	f4d60ee3          	beq	a2,a3,1c754 <strcmp+0x18>
   1c7fc:	01061713          	slli	a4,a2,0x10
   1c800:	01069793          	slli	a5,a3,0x10
   1c804:	00f71e63          	bne	a4,a5,1c820 <strcmp+0xe4>
   1c808:	01065713          	srli	a4,a2,0x10
   1c80c:	0106d793          	srli	a5,a3,0x10
   1c810:	40f70533          	sub	a0,a4,a5
   1c814:	0ff57593          	zext.b	a1,a0
   1c818:	02059063          	bnez	a1,1c838 <strcmp+0xfc>
   1c81c:	00008067          	ret
   1c820:	01075713          	srli	a4,a4,0x10
   1c824:	0107d793          	srli	a5,a5,0x10
   1c828:	40f70533          	sub	a0,a4,a5
   1c82c:	0ff57593          	zext.b	a1,a0
   1c830:	00059463          	bnez	a1,1c838 <strcmp+0xfc>
   1c834:	00008067          	ret
   1c838:	0ff77713          	zext.b	a4,a4
   1c83c:	0ff7f793          	zext.b	a5,a5
   1c840:	40f70533          	sub	a0,a4,a5
   1c844:	00008067          	ret
   1c848:	00054603          	lbu	a2,0(a0)
   1c84c:	0005c683          	lbu	a3,0(a1)
   1c850:	00150513          	addi	a0,a0,1
   1c854:	00158593          	addi	a1,a1,1
   1c858:	00d61463          	bne	a2,a3,1c860 <strcmp+0x124>
   1c85c:	fe0616e3          	bnez	a2,1c848 <strcmp+0x10c>
   1c860:	40d60533          	sub	a0,a2,a3
   1c864:	00008067          	ret
   1c868:	00450513          	addi	a0,a0,4
   1c86c:	00458593          	addi	a1,a1,4
   1c870:	fcd61ce3          	bne	a2,a3,1c848 <strcmp+0x10c>
   1c874:	00000513          	li	a0,0
   1c878:	00008067          	ret
   1c87c:	00850513          	addi	a0,a0,8
   1c880:	00858593          	addi	a1,a1,8
   1c884:	fcd612e3          	bne	a2,a3,1c848 <strcmp+0x10c>
   1c888:	00000513          	li	a0,0
   1c88c:	00008067          	ret
   1c890:	00c50513          	addi	a0,a0,12
   1c894:	00c58593          	addi	a1,a1,12
   1c898:	fad618e3          	bne	a2,a3,1c848 <strcmp+0x10c>
   1c89c:	00000513          	li	a0,0
   1c8a0:	00008067          	ret
   1c8a4:	01050513          	addi	a0,a0,16
   1c8a8:	01058593          	addi	a1,a1,16
   1c8ac:	f8d61ee3          	bne	a2,a3,1c848 <strcmp+0x10c>
   1c8b0:	00000513          	li	a0,0
   1c8b4:	00008067          	ret

0001c8b8 <__ssprint_r>:
   1c8b8:	00862783          	lw	a5,8(a2)
   1c8bc:	fd010113          	addi	sp,sp,-48
   1c8c0:	01312e23          	sw	s3,28(sp)
   1c8c4:	01412c23          	sw	s4,24(sp)
   1c8c8:	02112623          	sw	ra,44(sp)
   1c8cc:	02812423          	sw	s0,40(sp)
   1c8d0:	02912223          	sw	s1,36(sp)
   1c8d4:	03212023          	sw	s2,32(sp)
   1c8d8:	01512a23          	sw	s5,20(sp)
   1c8dc:	01612823          	sw	s6,16(sp)
   1c8e0:	01712623          	sw	s7,12(sp)
   1c8e4:	01812423          	sw	s8,8(sp)
   1c8e8:	00062983          	lw	s3,0(a2)
   1c8ec:	00060a13          	mv	s4,a2
   1c8f0:	14078c63          	beqz	a5,1ca48 <__ssprint_r+0x190>
   1c8f4:	0085a703          	lw	a4,8(a1)
   1c8f8:	0005a783          	lw	a5,0(a1)
   1c8fc:	00050a93          	mv	s5,a0
   1c900:	00058493          	mv	s1,a1
   1c904:	00000b93          	li	s7,0
   1c908:	00000913          	li	s2,0
   1c90c:	0e00006f          	j	1c9ec <__ssprint_r+0x134>
   1c910:	00c49703          	lh	a4,12(s1)
   1c914:	48077693          	andi	a3,a4,1152
   1c918:	08068a63          	beqz	a3,1c9ac <__ssprint_r+0xf4>
   1c91c:	0144a603          	lw	a2,20(s1)
   1c920:	0104a583          	lw	a1,16(s1)
   1c924:	00161693          	slli	a3,a2,0x1
   1c928:	00c686b3          	add	a3,a3,a2
   1c92c:	40b78433          	sub	s0,a5,a1
   1c930:	01f6db13          	srli	s6,a3,0x1f
   1c934:	00db0b33          	add	s6,s6,a3
   1c938:	00140793          	addi	a5,s0,1
   1c93c:	401b5b13          	srai	s6,s6,0x1
   1c940:	012787b3          	add	a5,a5,s2
   1c944:	000b0613          	mv	a2,s6
   1c948:	00fb7663          	bgeu	s6,a5,1c954 <__ssprint_r+0x9c>
   1c94c:	00078b13          	mv	s6,a5
   1c950:	00078613          	mv	a2,a5
   1c954:	40077713          	andi	a4,a4,1024
   1c958:	0a070a63          	beqz	a4,1ca0c <__ssprint_r+0x154>
   1c95c:	00060593          	mv	a1,a2
   1c960:	000a8513          	mv	a0,s5
   1c964:	8b9f80ef          	jal	ra,1521c <_malloc_r>
   1c968:	00050c13          	mv	s8,a0
   1c96c:	0a050e63          	beqz	a0,1ca28 <__ssprint_r+0x170>
   1c970:	0104a583          	lw	a1,16(s1)
   1c974:	00040613          	mv	a2,s0
   1c978:	d25f00ef          	jal	ra,d69c <memcpy>
   1c97c:	00c4d783          	lhu	a5,12(s1)
   1c980:	b7f7f793          	andi	a5,a5,-1153
   1c984:	0807e793          	ori	a5,a5,128
   1c988:	00f49623          	sh	a5,12(s1)
   1c98c:	408b07b3          	sub	a5,s6,s0
   1c990:	008c0533          	add	a0,s8,s0
   1c994:	0164aa23          	sw	s6,20(s1)
   1c998:	0184a823          	sw	s8,16(s1)
   1c99c:	00a4a023          	sw	a0,0(s1)
   1c9a0:	00090b13          	mv	s6,s2
   1c9a4:	00f4a423          	sw	a5,8(s1)
   1c9a8:	00090413          	mv	s0,s2
   1c9ac:	00040613          	mv	a2,s0
   1c9b0:	000b8593          	mv	a1,s7
   1c9b4:	8d0f90ef          	jal	ra,15a84 <memmove>
   1c9b8:	0084a703          	lw	a4,8(s1)
   1c9bc:	0004a783          	lw	a5,0(s1)
   1c9c0:	008a2683          	lw	a3,8(s4)
   1c9c4:	41670733          	sub	a4,a4,s6
   1c9c8:	008787b3          	add	a5,a5,s0
   1c9cc:	00e4a423          	sw	a4,8(s1)
   1c9d0:	00f4a023          	sw	a5,0(s1)
   1c9d4:	412686b3          	sub	a3,a3,s2
   1c9d8:	00da2423          	sw	a3,8(s4)
   1c9dc:	06068663          	beqz	a3,1ca48 <__ssprint_r+0x190>
   1c9e0:	0009ab83          	lw	s7,0(s3)
   1c9e4:	0049a903          	lw	s2,4(s3)
   1c9e8:	00898993          	addi	s3,s3,8
   1c9ec:	00070b13          	mv	s6,a4
   1c9f0:	00078513          	mv	a0,a5
   1c9f4:	fe0906e3          	beqz	s2,1c9e0 <__ssprint_r+0x128>
   1c9f8:	00070413          	mv	s0,a4
   1c9fc:	f0e97ae3          	bgeu	s2,a4,1c910 <__ssprint_r+0x58>
   1ca00:	00090b13          	mv	s6,s2
   1ca04:	00090413          	mv	s0,s2
   1ca08:	fa5ff06f          	j	1c9ac <__ssprint_r+0xf4>
   1ca0c:	000a8513          	mv	a0,s5
   1ca10:	c00fa0ef          	jal	ra,16e10 <_realloc_r>
   1ca14:	00050c13          	mv	s8,a0
   1ca18:	f6051ae3          	bnez	a0,1c98c <__ssprint_r+0xd4>
   1ca1c:	0104a583          	lw	a1,16(s1)
   1ca20:	000a8513          	mv	a0,s5
   1ca24:	fd9f40ef          	jal	ra,119fc <_free_r>
   1ca28:	00c4d783          	lhu	a5,12(s1)
   1ca2c:	00c00713          	li	a4,12
   1ca30:	00eaa023          	sw	a4,0(s5)
   1ca34:	0407e793          	ori	a5,a5,64
   1ca38:	00f49623          	sh	a5,12(s1)
   1ca3c:	000a2423          	sw	zero,8(s4)
   1ca40:	fff00513          	li	a0,-1
   1ca44:	0080006f          	j	1ca4c <__ssprint_r+0x194>
   1ca48:	00000513          	li	a0,0
   1ca4c:	02c12083          	lw	ra,44(sp)
   1ca50:	02812403          	lw	s0,40(sp)
   1ca54:	000a2223          	sw	zero,4(s4)
   1ca58:	02412483          	lw	s1,36(sp)
   1ca5c:	02012903          	lw	s2,32(sp)
   1ca60:	01c12983          	lw	s3,28(sp)
   1ca64:	01812a03          	lw	s4,24(sp)
   1ca68:	01412a83          	lw	s5,20(sp)
   1ca6c:	01012b03          	lw	s6,16(sp)
   1ca70:	00c12b83          	lw	s7,12(sp)
   1ca74:	00812c03          	lw	s8,8(sp)
   1ca78:	03010113          	addi	sp,sp,48
   1ca7c:	00008067          	ret

0001ca80 <_svfiprintf_r>:
   1ca80:	00c5d783          	lhu	a5,12(a1)
   1ca84:	ed010113          	addi	sp,sp,-304
   1ca88:	11312e23          	sw	s3,284(sp)
   1ca8c:	11612823          	sw	s6,272(sp)
   1ca90:	11812423          	sw	s8,264(sp)
   1ca94:	12112623          	sw	ra,300(sp)
   1ca98:	12812423          	sw	s0,296(sp)
   1ca9c:	12912223          	sw	s1,292(sp)
   1caa0:	13212023          	sw	s2,288(sp)
   1caa4:	11412c23          	sw	s4,280(sp)
   1caa8:	11512a23          	sw	s5,276(sp)
   1caac:	11712623          	sw	s7,268(sp)
   1cab0:	11912223          	sw	s9,260(sp)
   1cab4:	11a12023          	sw	s10,256(sp)
   1cab8:	0fb12e23          	sw	s11,252(sp)
   1cabc:	0807f793          	andi	a5,a5,128
   1cac0:	00a12223          	sw	a0,4(sp)
   1cac4:	00058b13          	mv	s6,a1
   1cac8:	00060993          	mv	s3,a2
   1cacc:	00068c13          	mv	s8,a3
   1cad0:	00078663          	beqz	a5,1cadc <_svfiprintf_r+0x5c>
   1cad4:	0105a783          	lw	a5,16(a1)
   1cad8:	760782e3          	beqz	a5,1da3c <_svfiprintf_r+0xfbc>
   1cadc:	04c10b93          	addi	s7,sp,76
   1cae0:	00000d93          	li	s11,0
   1cae4:	000b0793          	mv	a5,s6
   1cae8:	05712023          	sw	s7,64(sp)
   1caec:	000d8b13          	mv	s6,s11
   1caf0:	04012423          	sw	zero,72(sp)
   1caf4:	04012223          	sw	zero,68(sp)
   1caf8:	00000493          	li	s1,0
   1cafc:	000b8413          	mv	s0,s7
   1cb00:	00012423          	sw	zero,8(sp)
   1cb04:	00012c23          	sw	zero,24(sp)
   1cb08:	00012e23          	sw	zero,28(sp)
   1cb0c:	02012023          	sw	zero,32(sp)
   1cb10:	00007d17          	auipc	s10,0x7
   1cb14:	540d0d13          	addi	s10,s10,1344 # 24050 <zeroes.0+0x60>
   1cb18:	01000a93          	li	s5,16
   1cb1c:	00007c97          	auipc	s9,0x7
   1cb20:	6b0c8c93          	addi	s9,s9,1712 # 241cc <zeroes.0>
   1cb24:	000c0893          	mv	a7,s8
   1cb28:	00078d93          	mv	s11,a5
   1cb2c:	0009c783          	lbu	a5,0(s3)
   1cb30:	1c078663          	beqz	a5,1ccfc <_svfiprintf_r+0x27c>
   1cb34:	00098913          	mv	s2,s3
   1cb38:	02500713          	li	a4,37
   1cb3c:	26e78063          	beq	a5,a4,1cd9c <_svfiprintf_r+0x31c>
   1cb40:	00194783          	lbu	a5,1(s2)
   1cb44:	00190913          	addi	s2,s2,1
   1cb48:	fe079ae3          	bnez	a5,1cb3c <_svfiprintf_r+0xbc>
   1cb4c:	41390a33          	sub	s4,s2,s3
   1cb50:	1b390663          	beq	s2,s3,1ccfc <_svfiprintf_r+0x27c>
   1cb54:	04412783          	lw	a5,68(sp)
   1cb58:	014484b3          	add	s1,s1,s4
   1cb5c:	01342023          	sw	s3,0(s0)
   1cb60:	00178793          	addi	a5,a5,1
   1cb64:	01442223          	sw	s4,4(s0)
   1cb68:	04912423          	sw	s1,72(sp)
   1cb6c:	04f12223          	sw	a5,68(sp)
   1cb70:	00700713          	li	a4,7
   1cb74:	00840413          	addi	s0,s0,8
   1cb78:	22f74a63          	blt	a4,a5,1cdac <_svfiprintf_r+0x32c>
   1cb7c:	00094783          	lbu	a5,0(s2)
   1cb80:	014b0b33          	add	s6,s6,s4
   1cb84:	16078c63          	beqz	a5,1ccfc <_svfiprintf_r+0x27c>
   1cb88:	00194683          	lbu	a3,1(s2)
   1cb8c:	00190993          	addi	s3,s2,1
   1cb90:	02010da3          	sb	zero,59(sp)
   1cb94:	fff00913          	li	s2,-1
   1cb98:	00000c13          	li	s8,0
   1cb9c:	00000793          	li	a5,0
   1cba0:	05a00a13          	li	s4,90
   1cba4:	00198993          	addi	s3,s3,1
   1cba8:	fe068713          	addi	a4,a3,-32 # 1fe0 <prvSearchForNameWithinSingleList+0xec>
   1cbac:	04ea6663          	bltu	s4,a4,1cbf8 <_svfiprintf_r+0x178>
   1cbb0:	00271713          	slli	a4,a4,0x2
   1cbb4:	01a70733          	add	a4,a4,s10
   1cbb8:	00072703          	lw	a4,0(a4)
   1cbbc:	01a70733          	add	a4,a4,s10
   1cbc0:	00070067          	jr	a4
   1cbc4:	00000c13          	li	s8,0
   1cbc8:	fd068713          	addi	a4,a3,-48
   1cbcc:	00900593          	li	a1,9
   1cbd0:	0009c683          	lbu	a3,0(s3)
   1cbd4:	002c1613          	slli	a2,s8,0x2
   1cbd8:	01860c33          	add	s8,a2,s8
   1cbdc:	001c1c13          	slli	s8,s8,0x1
   1cbe0:	01870c33          	add	s8,a4,s8
   1cbe4:	fd068713          	addi	a4,a3,-48
   1cbe8:	00198993          	addi	s3,s3,1
   1cbec:	fee5f2e3          	bgeu	a1,a4,1cbd0 <_svfiprintf_r+0x150>
   1cbf0:	fe068713          	addi	a4,a3,-32
   1cbf4:	faea7ee3          	bgeu	s4,a4,1cbb0 <_svfiprintf_r+0x130>
   1cbf8:	10068263          	beqz	a3,1ccfc <_svfiprintf_r+0x27c>
   1cbfc:	08d10623          	sb	a3,140(sp)
   1cc00:	02010da3          	sb	zero,59(sp)
   1cc04:	00100693          	li	a3,1
   1cc08:	00100813          	li	a6,1
   1cc0c:	08c10a13          	addi	s4,sp,140
   1cc10:	00000913          	li	s2,0
   1cc14:	0027ff93          	andi	t6,a5,2
   1cc18:	000f8463          	beqz	t6,1cc20 <_svfiprintf_r+0x1a0>
   1cc1c:	00268693          	addi	a3,a3,2
   1cc20:	0847ff13          	andi	t5,a5,132
   1cc24:	04412603          	lw	a2,68(sp)
   1cc28:	000f1663          	bnez	t5,1cc34 <_svfiprintf_r+0x1b4>
   1cc2c:	40dc0733          	sub	a4,s8,a3
   1cc30:	30e048e3          	bgtz	a4,1d740 <_svfiprintf_r+0xcc0>
   1cc34:	03b14703          	lbu	a4,59(sp)
   1cc38:	02070863          	beqz	a4,1cc68 <_svfiprintf_r+0x1e8>
   1cc3c:	03b10713          	addi	a4,sp,59
   1cc40:	00e42023          	sw	a4,0(s0)
   1cc44:	00160613          	addi	a2,a2,1
   1cc48:	00100713          	li	a4,1
   1cc4c:	00148493          	addi	s1,s1,1
   1cc50:	00e42223          	sw	a4,4(s0)
   1cc54:	04912423          	sw	s1,72(sp)
   1cc58:	04c12223          	sw	a2,68(sp)
   1cc5c:	00700713          	li	a4,7
   1cc60:	00840413          	addi	s0,s0,8
   1cc64:	1cc74463          	blt	a4,a2,1ce2c <_svfiprintf_r+0x3ac>
   1cc68:	020f8863          	beqz	t6,1cc98 <_svfiprintf_r+0x218>
   1cc6c:	03c10713          	addi	a4,sp,60
   1cc70:	00e42023          	sw	a4,0(s0)
   1cc74:	00160613          	addi	a2,a2,1
   1cc78:	00200713          	li	a4,2
   1cc7c:	00248493          	addi	s1,s1,2
   1cc80:	00e42223          	sw	a4,4(s0)
   1cc84:	04912423          	sw	s1,72(sp)
   1cc88:	04c12223          	sw	a2,68(sp)
   1cc8c:	00700713          	li	a4,7
   1cc90:	00840413          	addi	s0,s0,8
   1cc94:	3ec744e3          	blt	a4,a2,1d87c <_svfiprintf_r+0xdfc>
   1cc98:	08000713          	li	a4,128
   1cc9c:	6aef0263          	beq	t5,a4,1d340 <_svfiprintf_r+0x8c0>
   1cca0:	41090933          	sub	s2,s2,a6
   1cca4:	7d204263          	bgtz	s2,1d468 <_svfiprintf_r+0x9e8>
   1cca8:	010484b3          	add	s1,s1,a6
   1ccac:	00160613          	addi	a2,a2,1
   1ccb0:	01442023          	sw	s4,0(s0)
   1ccb4:	01042223          	sw	a6,4(s0)
   1ccb8:	04912423          	sw	s1,72(sp)
   1ccbc:	04c12223          	sw	a2,68(sp)
   1ccc0:	00700713          	li	a4,7
   1ccc4:	00840413          	addi	s0,s0,8
   1ccc8:	0ac748e3          	blt	a4,a2,1d578 <_svfiprintf_r+0xaf8>
   1cccc:	0047f793          	andi	a5,a5,4
   1ccd0:	00078663          	beqz	a5,1ccdc <_svfiprintf_r+0x25c>
   1ccd4:	40dc0933          	sub	s2,s8,a3
   1ccd8:	1b204463          	bgtz	s2,1ce80 <_svfiprintf_r+0x400>
   1ccdc:	00dc5463          	bge	s8,a3,1cce4 <_svfiprintf_r+0x264>
   1cce0:	00068c13          	mv	s8,a3
   1cce4:	018b0b33          	add	s6,s6,s8
   1cce8:	0c0494e3          	bnez	s1,1d5b0 <_svfiprintf_r+0xb30>
   1ccec:	0009c783          	lbu	a5,0(s3)
   1ccf0:	04012223          	sw	zero,68(sp)
   1ccf4:	000b8413          	mv	s0,s7
   1ccf8:	e2079ee3          	bnez	a5,1cb34 <_svfiprintf_r+0xb4>
   1ccfc:	000d8793          	mv	a5,s11
   1cd00:	000b0d93          	mv	s11,s6
   1cd04:	00078b13          	mv	s6,a5
   1cd08:	0c048c63          	beqz	s1,1cde0 <_svfiprintf_r+0x360>
   1cd0c:	00412503          	lw	a0,4(sp)
   1cd10:	04010613          	addi	a2,sp,64
   1cd14:	00078593          	mv	a1,a5
   1cd18:	ba1ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1cd1c:	0c40006f          	j	1cde0 <_svfiprintf_r+0x360>
   1cd20:	0008ac03          	lw	s8,0(a7)
   1cd24:	00488893          	addi	a7,a7,4
   1cd28:	060c4263          	bltz	s8,1cd8c <_svfiprintf_r+0x30c>
   1cd2c:	0009c683          	lbu	a3,0(s3)
   1cd30:	e75ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1cd34:	0009c683          	lbu	a3,0(s3)
   1cd38:	0207e793          	ori	a5,a5,32
   1cd3c:	e69ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1cd40:	0107e793          	ori	a5,a5,16
   1cd44:	0207f713          	andi	a4,a5,32
   1cd48:	22070463          	beqz	a4,1cf70 <_svfiprintf_r+0x4f0>
   1cd4c:	00788893          	addi	a7,a7,7
   1cd50:	ff88f893          	andi	a7,a7,-8
   1cd54:	0048a683          	lw	a3,4(a7)
   1cd58:	0008a703          	lw	a4,0(a7)
   1cd5c:	00888893          	addi	a7,a7,8
   1cd60:	00068313          	mv	t1,a3
   1cd64:	2206cc63          	bltz	a3,1cf9c <_svfiprintf_r+0x51c>
   1cd68:	fff00693          	li	a3,-1
   1cd6c:	24d90a63          	beq	s2,a3,1cfc0 <_svfiprintf_r+0x540>
   1cd70:	006766b3          	or	a3,a4,t1
   1cd74:	f7f7f793          	andi	a5,a5,-129
   1cd78:	24069463          	bnez	a3,1cfc0 <_svfiprintf_r+0x540>
   1cd7c:	680914e3          	bnez	s2,1dc04 <_svfiprintf_r+0x1184>
   1cd80:	00000813          	li	a6,0
   1cd84:	0f010a13          	addi	s4,sp,240
   1cd88:	35c0006f          	j	1d0e4 <_svfiprintf_r+0x664>
   1cd8c:	41800c33          	neg	s8,s8
   1cd90:	0009c683          	lbu	a3,0(s3)
   1cd94:	0047e793          	ori	a5,a5,4
   1cd98:	e0dff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1cd9c:	41390a33          	sub	s4,s2,s3
   1cda0:	db391ae3          	bne	s2,s3,1cb54 <_svfiprintf_r+0xd4>
   1cda4:	00094783          	lbu	a5,0(s2)
   1cda8:	dddff06f          	j	1cb84 <_svfiprintf_r+0x104>
   1cdac:	00412503          	lw	a0,4(sp)
   1cdb0:	04010613          	addi	a2,sp,64
   1cdb4:	000d8593          	mv	a1,s11
   1cdb8:	01112623          	sw	a7,12(sp)
   1cdbc:	afdff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1cdc0:	00051a63          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1cdc4:	04812483          	lw	s1,72(sp)
   1cdc8:	00c12883          	lw	a7,12(sp)
   1cdcc:	000b8413          	mv	s0,s7
   1cdd0:	dadff06f          	j	1cb7c <_svfiprintf_r+0xfc>
   1cdd4:	000d8793          	mv	a5,s11
   1cdd8:	000b0d93          	mv	s11,s6
   1cddc:	00078b13          	mv	s6,a5
   1cde0:	00cb5783          	lhu	a5,12(s6)
   1cde4:	0407f793          	andi	a5,a5,64
   1cde8:	620798e3          	bnez	a5,1dc18 <_svfiprintf_r+0x1198>
   1cdec:	12c12083          	lw	ra,300(sp)
   1cdf0:	12812403          	lw	s0,296(sp)
   1cdf4:	12412483          	lw	s1,292(sp)
   1cdf8:	12012903          	lw	s2,288(sp)
   1cdfc:	11c12983          	lw	s3,284(sp)
   1ce00:	11812a03          	lw	s4,280(sp)
   1ce04:	11412a83          	lw	s5,276(sp)
   1ce08:	11012b03          	lw	s6,272(sp)
   1ce0c:	10c12b83          	lw	s7,268(sp)
   1ce10:	10812c03          	lw	s8,264(sp)
   1ce14:	10412c83          	lw	s9,260(sp)
   1ce18:	10012d03          	lw	s10,256(sp)
   1ce1c:	000d8513          	mv	a0,s11
   1ce20:	0fc12d83          	lw	s11,252(sp)
   1ce24:	13010113          	addi	sp,sp,304
   1ce28:	00008067          	ret
   1ce2c:	00412503          	lw	a0,4(sp)
   1ce30:	04010613          	addi	a2,sp,64
   1ce34:	000d8593          	mv	a1,s11
   1ce38:	03112623          	sw	a7,44(sp)
   1ce3c:	03012423          	sw	a6,40(sp)
   1ce40:	02d12223          	sw	a3,36(sp)
   1ce44:	00f12a23          	sw	a5,20(sp)
   1ce48:	01e12823          	sw	t5,16(sp)
   1ce4c:	01f12623          	sw	t6,12(sp)
   1ce50:	a69ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1ce54:	f80510e3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1ce58:	04812483          	lw	s1,72(sp)
   1ce5c:	04412603          	lw	a2,68(sp)
   1ce60:	02c12883          	lw	a7,44(sp)
   1ce64:	02812803          	lw	a6,40(sp)
   1ce68:	02412683          	lw	a3,36(sp)
   1ce6c:	01412783          	lw	a5,20(sp)
   1ce70:	01012f03          	lw	t5,16(sp)
   1ce74:	00c12f83          	lw	t6,12(sp)
   1ce78:	000b8413          	mv	s0,s7
   1ce7c:	dedff06f          	j	1cc68 <_svfiprintf_r+0x1e8>
   1ce80:	01000713          	li	a4,16
   1ce84:	04412783          	lw	a5,68(sp)
   1ce88:	00007317          	auipc	t1,0x7
   1ce8c:	33430313          	addi	t1,t1,820 # 241bc <blanks.1>
   1ce90:	09275a63          	bge	a4,s2,1cf24 <_svfiprintf_r+0x4a4>
   1ce94:	00d12623          	sw	a3,12(sp)
   1ce98:	00048613          	mv	a2,s1
   1ce9c:	00040693          	mv	a3,s0
   1cea0:	01000a13          	li	s4,16
   1cea4:	00090413          	mv	s0,s2
   1cea8:	00700713          	li	a4,7
   1ceac:	00088913          	mv	s2,a7
   1ceb0:	00030493          	mv	s1,t1
   1ceb4:	00c0006f          	j	1cec0 <_svfiprintf_r+0x440>
   1ceb8:	ff040413          	addi	s0,s0,-16
   1cebc:	048a5863          	bge	s4,s0,1cf0c <_svfiprintf_r+0x48c>
   1cec0:	01060613          	addi	a2,a2,16
   1cec4:	00178793          	addi	a5,a5,1
   1cec8:	0096a023          	sw	s1,0(a3)
   1cecc:	0146a223          	sw	s4,4(a3)
   1ced0:	04c12423          	sw	a2,72(sp)
   1ced4:	04f12223          	sw	a5,68(sp)
   1ced8:	00868693          	addi	a3,a3,8
   1cedc:	fcf75ee3          	bge	a4,a5,1ceb8 <_svfiprintf_r+0x438>
   1cee0:	00412503          	lw	a0,4(sp)
   1cee4:	04010613          	addi	a2,sp,64
   1cee8:	000d8593          	mv	a1,s11
   1ceec:	9cdff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1cef0:	ee0512e3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1cef4:	ff040413          	addi	s0,s0,-16
   1cef8:	04812603          	lw	a2,72(sp)
   1cefc:	04412783          	lw	a5,68(sp)
   1cf00:	000b8693          	mv	a3,s7
   1cf04:	00700713          	li	a4,7
   1cf08:	fa8a4ce3          	blt	s4,s0,1cec0 <_svfiprintf_r+0x440>
   1cf0c:	00090893          	mv	a7,s2
   1cf10:	00040913          	mv	s2,s0
   1cf14:	00068413          	mv	s0,a3
   1cf18:	00c12683          	lw	a3,12(sp)
   1cf1c:	00048313          	mv	t1,s1
   1cf20:	00060493          	mv	s1,a2
   1cf24:	012484b3          	add	s1,s1,s2
   1cf28:	00178793          	addi	a5,a5,1
   1cf2c:	00642023          	sw	t1,0(s0)
   1cf30:	01242223          	sw	s2,4(s0)
   1cf34:	04912423          	sw	s1,72(sp)
   1cf38:	04f12223          	sw	a5,68(sp)
   1cf3c:	00700713          	li	a4,7
   1cf40:	d8f75ee3          	bge	a4,a5,1ccdc <_svfiprintf_r+0x25c>
   1cf44:	00412503          	lw	a0,4(sp)
   1cf48:	04010613          	addi	a2,sp,64
   1cf4c:	000d8593          	mv	a1,s11
   1cf50:	01112823          	sw	a7,16(sp)
   1cf54:	00d12623          	sw	a3,12(sp)
   1cf58:	961ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1cf5c:	e6051ce3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1cf60:	04812483          	lw	s1,72(sp)
   1cf64:	01012883          	lw	a7,16(sp)
   1cf68:	00c12683          	lw	a3,12(sp)
   1cf6c:	d71ff06f          	j	1ccdc <_svfiprintf_r+0x25c>
   1cf70:	0107f693          	andi	a3,a5,16
   1cf74:	0008a703          	lw	a4,0(a7)
   1cf78:	00488893          	addi	a7,a7,4
   1cf7c:	0e069863          	bnez	a3,1d06c <_svfiprintf_r+0x5ec>
   1cf80:	0407f693          	andi	a3,a5,64
   1cf84:	0e068063          	beqz	a3,1d064 <_svfiprintf_r+0x5e4>
   1cf88:	01071713          	slli	a4,a4,0x10
   1cf8c:	41075713          	srai	a4,a4,0x10
   1cf90:	41f75313          	srai	t1,a4,0x1f
   1cf94:	00030693          	mv	a3,t1
   1cf98:	dc06d8e3          	bgez	a3,1cd68 <_svfiprintf_r+0x2e8>
   1cf9c:	02d00613          	li	a2,45
   1cfa0:	00e036b3          	snez	a3,a4
   1cfa4:	40600333          	neg	t1,t1
   1cfa8:	02c10da3          	sb	a2,59(sp)
   1cfac:	fff00613          	li	a2,-1
   1cfb0:	40d30333          	sub	t1,t1,a3
   1cfb4:	40e00733          	neg	a4,a4
   1cfb8:	00c90463          	beq	s2,a2,1cfc0 <_svfiprintf_r+0x540>
   1cfbc:	f7f7f793          	andi	a5,a5,-129
   1cfc0:	66031663          	bnez	t1,1d62c <_svfiprintf_r+0xbac>
   1cfc4:	00900693          	li	a3,9
   1cfc8:	66e6e263          	bltu	a3,a4,1d62c <_svfiprintf_r+0xbac>
   1cfcc:	03070713          	addi	a4,a4,48
   1cfd0:	0ff77713          	zext.b	a4,a4
   1cfd4:	0ee107a3          	sb	a4,239(sp)
   1cfd8:	00090693          	mv	a3,s2
   1cfdc:	01204463          	bgtz	s2,1cfe4 <_svfiprintf_r+0x564>
   1cfe0:	00100693          	li	a3,1
   1cfe4:	00100813          	li	a6,1
   1cfe8:	0ef10a13          	addi	s4,sp,239
   1cfec:	0f80006f          	j	1d0e4 <_svfiprintf_r+0x664>
   1cff0:	0008aa03          	lw	s4,0(a7)
   1cff4:	02010da3          	sb	zero,59(sp)
   1cff8:	00488893          	addi	a7,a7,4
   1cffc:	360a08e3          	beqz	s4,1db6c <_svfiprintf_r+0x10ec>
   1d000:	fff00713          	li	a4,-1
   1d004:	01112823          	sw	a7,16(sp)
   1d008:	00f12623          	sw	a5,12(sp)
   1d00c:	20e904e3          	beq	s2,a4,1da14 <_svfiprintf_r+0xf94>
   1d010:	00090613          	mv	a2,s2
   1d014:	00000593          	li	a1,0
   1d018:	000a0513          	mv	a0,s4
   1d01c:	9a5f80ef          	jal	ra,159c0 <memchr>
   1d020:	00c12783          	lw	a5,12(sp)
   1d024:	01012883          	lw	a7,16(sp)
   1d028:	3c0506e3          	beqz	a0,1dbf4 <_svfiprintf_r+0x1174>
   1d02c:	41450833          	sub	a6,a0,s4
   1d030:	fff84693          	not	a3,a6
   1d034:	41f6d693          	srai	a3,a3,0x1f
   1d038:	00d876b3          	and	a3,a6,a3
   1d03c:	00000913          	li	s2,0
   1d040:	0a40006f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d044:	0008a703          	lw	a4,0(a7)
   1d048:	02010da3          	sb	zero,59(sp)
   1d04c:	00488893          	addi	a7,a7,4
   1d050:	08e10623          	sb	a4,140(sp)
   1d054:	00100693          	li	a3,1
   1d058:	00100813          	li	a6,1
   1d05c:	08c10a13          	addi	s4,sp,140
   1d060:	bb1ff06f          	j	1cc10 <_svfiprintf_r+0x190>
   1d064:	2007f693          	andi	a3,a5,512
   1d068:	36069ce3          	bnez	a3,1dbe0 <_svfiprintf_r+0x1160>
   1d06c:	41f75313          	srai	t1,a4,0x1f
   1d070:	00030693          	mv	a3,t1
   1d074:	cf1ff06f          	j	1cd64 <_svfiprintf_r+0x2e4>
   1d078:	ffff86b7          	lui	a3,0xffff8
   1d07c:	8306c693          	xori	a3,a3,-2000
   1d080:	02d11e23          	sh	a3,60(sp)
   1d084:	00006697          	auipc	a3,0x6
   1d088:	51c68693          	addi	a3,a3,1308 # 235a0 <__flash_rodata_start+0x150>
   1d08c:	0008a703          	lw	a4,0(a7)
   1d090:	00000593          	li	a1,0
   1d094:	0027e793          	ori	a5,a5,2
   1d098:	00488893          	addi	a7,a7,4
   1d09c:	00d12423          	sw	a3,8(sp)
   1d0a0:	02010da3          	sb	zero,59(sp)
   1d0a4:	fff00693          	li	a3,-1
   1d0a8:	52d90c63          	beq	s2,a3,1d5e0 <_svfiprintf_r+0xb60>
   1d0ac:	00b766b3          	or	a3,a4,a1
   1d0b0:	f7f7f613          	andi	a2,a5,-129
   1d0b4:	52069063          	bnez	a3,1d5d4 <_svfiprintf_r+0xb54>
   1d0b8:	00078813          	mv	a6,a5
   1d0bc:	00200713          	li	a4,2
   1d0c0:	00060793          	mv	a5,a2
   1d0c4:	06091863          	bnez	s2,1d134 <_svfiprintf_r+0x6b4>
   1d0c8:	060718e3          	bnez	a4,1d938 <_svfiprintf_r+0xeb8>
   1d0cc:	00187813          	andi	a6,a6,1
   1d0d0:	06080ce3          	beqz	a6,1d948 <_svfiprintf_r+0xec8>
   1d0d4:	03000713          	li	a4,48
   1d0d8:	0ee107a3          	sb	a4,239(sp)
   1d0dc:	00080693          	mv	a3,a6
   1d0e0:	0ef10a13          	addi	s4,sp,239
   1d0e4:	03b14703          	lbu	a4,59(sp)
   1d0e8:	00e03733          	snez	a4,a4
   1d0ec:	00e686b3          	add	a3,a3,a4
   1d0f0:	b25ff06f          	j	1cc14 <_svfiprintf_r+0x194>
   1d0f4:	0107e813          	ori	a6,a5,16
   1d0f8:	02087793          	andi	a5,a6,32
   1d0fc:	000782e3          	beqz	a5,1d900 <_svfiprintf_r+0xe80>
   1d100:	00788893          	addi	a7,a7,7
   1d104:	ff88f893          	andi	a7,a7,-8
   1d108:	0008a703          	lw	a4,0(a7)
   1d10c:	0048a303          	lw	t1,4(a7)
   1d110:	00888893          	addi	a7,a7,8
   1d114:	02010da3          	sb	zero,59(sp)
   1d118:	fff00793          	li	a5,-1
   1d11c:	00f90ae3          	beq	s2,a5,1d930 <_svfiprintf_r+0xeb0>
   1d120:	006766b3          	or	a3,a4,t1
   1d124:	f7f87793          	andi	a5,a6,-129
   1d128:	e8069ce3          	bnez	a3,1cfc0 <_svfiprintf_r+0x540>
   1d12c:	00100713          	li	a4,1
   1d130:	f8090ce3          	beqz	s2,1d0c8 <_svfiprintf_r+0x648>
   1d134:	00100693          	li	a3,1
   1d138:	2cd706e3          	beq	a4,a3,1dc04 <_svfiprintf_r+0x1184>
   1d13c:	00200693          	li	a3,2
   1d140:	24d706e3          	beq	a4,a3,1db8c <_svfiprintf_r+0x110c>
   1d144:	00000713          	li	a4,0
   1d148:	00000593          	li	a1,0
   1d14c:	0f010a13          	addi	s4,sp,240
   1d150:	01d59613          	slli	a2,a1,0x1d
   1d154:	00777693          	andi	a3,a4,7
   1d158:	00375713          	srli	a4,a4,0x3
   1d15c:	03068693          	addi	a3,a3,48
   1d160:	00e66733          	or	a4,a2,a4
   1d164:	0035d593          	srli	a1,a1,0x3
   1d168:	feda0fa3          	sb	a3,-1(s4)
   1d16c:	00b76633          	or	a2,a4,a1
   1d170:	000a0513          	mv	a0,s4
   1d174:	fffa0a13          	addi	s4,s4,-1
   1d178:	fc061ce3          	bnez	a2,1d150 <_svfiprintf_r+0x6d0>
   1d17c:	0017f713          	andi	a4,a5,1
   1d180:	5a070463          	beqz	a4,1d728 <_svfiprintf_r+0xca8>
   1d184:	03000713          	li	a4,48
   1d188:	5ae68063          	beq	a3,a4,1d728 <_svfiprintf_r+0xca8>
   1d18c:	0f010693          	addi	a3,sp,240
   1d190:	ffe50513          	addi	a0,a0,-2
   1d194:	40a68833          	sub	a6,a3,a0
   1d198:	feea0fa3          	sb	a4,-1(s4)
   1d19c:	00080693          	mv	a3,a6
   1d1a0:	7d284663          	blt	a6,s2,1d96c <_svfiprintf_r+0xeec>
   1d1a4:	00050a13          	mv	s4,a0
   1d1a8:	f3dff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d1ac:	0009c683          	lbu	a3,0(s3)
   1d1b0:	0807e793          	ori	a5,a5,128
   1d1b4:	9f1ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d1b8:	0207f713          	andi	a4,a5,32
   1d1bc:	78071c63          	bnez	a4,1d954 <_svfiprintf_r+0xed4>
   1d1c0:	0107f713          	andi	a4,a5,16
   1d1c4:	18071ce3          	bnez	a4,1db5c <_svfiprintf_r+0x10dc>
   1d1c8:	0407f713          	andi	a4,a5,64
   1d1cc:	1e0716e3          	bnez	a4,1dbb8 <_svfiprintf_r+0x1138>
   1d1d0:	2007f793          	andi	a5,a5,512
   1d1d4:	180784e3          	beqz	a5,1db5c <_svfiprintf_r+0x10dc>
   1d1d8:	0008a783          	lw	a5,0(a7)
   1d1dc:	00488893          	addi	a7,a7,4
   1d1e0:	01678023          	sb	s6,0(a5)
   1d1e4:	949ff06f          	j	1cb2c <_svfiprintf_r+0xac>
   1d1e8:	0009c683          	lbu	a3,0(s3)
   1d1ec:	06c00713          	li	a4,108
   1d1f0:	14e686e3          	beq	a3,a4,1db3c <_svfiprintf_r+0x10bc>
   1d1f4:	0107e793          	ori	a5,a5,16
   1d1f8:	9adff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d1fc:	0009c683          	lbu	a3,0(s3)
   1d200:	06800713          	li	a4,104
   1d204:	14e684e3          	beq	a3,a4,1db4c <_svfiprintf_r+0x10cc>
   1d208:	0407e793          	ori	a5,a5,64
   1d20c:	999ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d210:	0107e693          	ori	a3,a5,16
   1d214:	0206f793          	andi	a5,a3,32
   1d218:	6a078863          	beqz	a5,1d8c8 <_svfiprintf_r+0xe48>
   1d21c:	00788893          	addi	a7,a7,7
   1d220:	ff88f893          	andi	a7,a7,-8
   1d224:	0008a703          	lw	a4,0(a7)
   1d228:	0048a583          	lw	a1,4(a7)
   1d22c:	00888893          	addi	a7,a7,8
   1d230:	02010da3          	sb	zero,59(sp)
   1d234:	fff00613          	li	a2,-1
   1d238:	bff6f793          	andi	a5,a3,-1025
   1d23c:	f0c908e3          	beq	s2,a2,1d14c <_svfiprintf_r+0x6cc>
   1d240:	00b76633          	or	a2,a4,a1
   1d244:	b7f6f693          	andi	a3,a3,-1153
   1d248:	0e0612e3          	bnez	a2,1db2c <_svfiprintf_r+0x10ac>
   1d24c:	00078813          	mv	a6,a5
   1d250:	00000713          	li	a4,0
   1d254:	00068793          	mv	a5,a3
   1d258:	e6dff06f          	j	1d0c4 <_svfiprintf_r+0x644>
   1d25c:	00412503          	lw	a0,4(sp)
   1d260:	01112823          	sw	a7,16(sp)
   1d264:	00f12623          	sw	a5,12(sp)
   1d268:	d05f70ef          	jal	ra,14f6c <_localeconv_r>
   1d26c:	00452783          	lw	a5,4(a0)
   1d270:	00078513          	mv	a0,a5
   1d274:	02f12023          	sw	a5,32(sp)
   1d278:	ae5f00ef          	jal	ra,dd5c <strlen>
   1d27c:	00050713          	mv	a4,a0
   1d280:	00412503          	lw	a0,4(sp)
   1d284:	00e12e23          	sw	a4,28(sp)
   1d288:	ce5f70ef          	jal	ra,14f6c <_localeconv_r>
   1d28c:	00852783          	lw	a5,8(a0)
   1d290:	01c12703          	lw	a4,28(sp)
   1d294:	01012883          	lw	a7,16(sp)
   1d298:	00f12c23          	sw	a5,24(sp)
   1d29c:	00c12783          	lw	a5,12(sp)
   1d2a0:	a80706e3          	beqz	a4,1cd2c <_svfiprintf_r+0x2ac>
   1d2a4:	01812703          	lw	a4,24(sp)
   1d2a8:	0009c683          	lbu	a3,0(s3)
   1d2ac:	8e070ce3          	beqz	a4,1cba4 <_svfiprintf_r+0x124>
   1d2b0:	00074703          	lbu	a4,0(a4)
   1d2b4:	8e0708e3          	beqz	a4,1cba4 <_svfiprintf_r+0x124>
   1d2b8:	4007e793          	ori	a5,a5,1024
   1d2bc:	8e9ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d2c0:	0009c683          	lbu	a3,0(s3)
   1d2c4:	0017e793          	ori	a5,a5,1
   1d2c8:	8ddff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d2cc:	03b14703          	lbu	a4,59(sp)
   1d2d0:	0009c683          	lbu	a3,0(s3)
   1d2d4:	8c0718e3          	bnez	a4,1cba4 <_svfiprintf_r+0x124>
   1d2d8:	02000713          	li	a4,32
   1d2dc:	02e10da3          	sb	a4,59(sp)
   1d2e0:	8c5ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d2e4:	0009c683          	lbu	a3,0(s3)
   1d2e8:	02a00713          	li	a4,42
   1d2ec:	00198613          	addi	a2,s3,1
   1d2f0:	12e688e3          	beq	a3,a4,1dc20 <_svfiprintf_r+0x11a0>
   1d2f4:	fd068713          	addi	a4,a3,-48
   1d2f8:	00900513          	li	a0,9
   1d2fc:	00060993          	mv	s3,a2
   1d300:	00000913          	li	s2,0
   1d304:	00900593          	li	a1,9
   1d308:	8ae560e3          	bltu	a0,a4,1cba8 <_svfiprintf_r+0x128>
   1d30c:	0009c683          	lbu	a3,0(s3)
   1d310:	00291613          	slli	a2,s2,0x2
   1d314:	01260933          	add	s2,a2,s2
   1d318:	00191913          	slli	s2,s2,0x1
   1d31c:	00e90933          	add	s2,s2,a4
   1d320:	fd068713          	addi	a4,a3,-48
   1d324:	00198993          	addi	s3,s3,1
   1d328:	fee5f2e3          	bgeu	a1,a4,1d30c <_svfiprintf_r+0x88c>
   1d32c:	87dff06f          	j	1cba8 <_svfiprintf_r+0x128>
   1d330:	02b00713          	li	a4,43
   1d334:	0009c683          	lbu	a3,0(s3)
   1d338:	02e10da3          	sb	a4,59(sp)
   1d33c:	869ff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1d340:	40dc0733          	sub	a4,s8,a3
   1d344:	94e05ee3          	blez	a4,1cca0 <_svfiprintf_r+0x220>
   1d348:	01000593          	li	a1,16
   1d34c:	00007e97          	auipc	t4,0x7
   1d350:	e80e8e93          	addi	t4,t4,-384 # 241cc <zeroes.0>
   1d354:	0ae5d463          	bge	a1,a4,1d3fc <_svfiprintf_r+0x97c>
   1d358:	00f12623          	sw	a5,12(sp)
   1d35c:	00d12823          	sw	a3,16(sp)
   1d360:	00040793          	mv	a5,s0
   1d364:	00048693          	mv	a3,s1
   1d368:	01000313          	li	t1,16
   1d36c:	00700f13          	li	t5,7
   1d370:	01012a23          	sw	a6,20(sp)
   1d374:	00070413          	mv	s0,a4
   1d378:	03112223          	sw	a7,36(sp)
   1d37c:	000e8493          	mv	s1,t4
   1d380:	00c0006f          	j	1d38c <_svfiprintf_r+0x90c>
   1d384:	ff040413          	addi	s0,s0,-16
   1d388:	04835a63          	bge	t1,s0,1d3dc <_svfiprintf_r+0x95c>
   1d38c:	01068693          	addi	a3,a3,16
   1d390:	00160613          	addi	a2,a2,1
   1d394:	0097a023          	sw	s1,0(a5)
   1d398:	0067a223          	sw	t1,4(a5)
   1d39c:	04d12423          	sw	a3,72(sp)
   1d3a0:	04c12223          	sw	a2,68(sp)
   1d3a4:	00878793          	addi	a5,a5,8
   1d3a8:	fccf5ee3          	bge	t5,a2,1d384 <_svfiprintf_r+0x904>
   1d3ac:	00412503          	lw	a0,4(sp)
   1d3b0:	04010613          	addi	a2,sp,64
   1d3b4:	000d8593          	mv	a1,s11
   1d3b8:	d00ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d3bc:	a0051ce3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d3c0:	01000313          	li	t1,16
   1d3c4:	ff040413          	addi	s0,s0,-16
   1d3c8:	04812683          	lw	a3,72(sp)
   1d3cc:	04412603          	lw	a2,68(sp)
   1d3d0:	000b8793          	mv	a5,s7
   1d3d4:	00700f13          	li	t5,7
   1d3d8:	fa834ae3          	blt	t1,s0,1d38c <_svfiprintf_r+0x90c>
   1d3dc:	00040713          	mv	a4,s0
   1d3e0:	00048e93          	mv	t4,s1
   1d3e4:	00078413          	mv	s0,a5
   1d3e8:	00068493          	mv	s1,a3
   1d3ec:	01412803          	lw	a6,20(sp)
   1d3f0:	00c12783          	lw	a5,12(sp)
   1d3f4:	02412883          	lw	a7,36(sp)
   1d3f8:	01012683          	lw	a3,16(sp)
   1d3fc:	00e484b3          	add	s1,s1,a4
   1d400:	00160613          	addi	a2,a2,1
   1d404:	00e42223          	sw	a4,4(s0)
   1d408:	01d42023          	sw	t4,0(s0)
   1d40c:	04912423          	sw	s1,72(sp)
   1d410:	04c12223          	sw	a2,68(sp)
   1d414:	00700713          	li	a4,7
   1d418:	00840413          	addi	s0,s0,8
   1d41c:	88c752e3          	bge	a4,a2,1cca0 <_svfiprintf_r+0x220>
   1d420:	00412503          	lw	a0,4(sp)
   1d424:	04010613          	addi	a2,sp,64
   1d428:	000d8593          	mv	a1,s11
   1d42c:	03112223          	sw	a7,36(sp)
   1d430:	01012a23          	sw	a6,20(sp)
   1d434:	00d12823          	sw	a3,16(sp)
   1d438:	00f12623          	sw	a5,12(sp)
   1d43c:	c7cff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d440:	98051ae3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d444:	01412803          	lw	a6,20(sp)
   1d448:	04812483          	lw	s1,72(sp)
   1d44c:	04412603          	lw	a2,68(sp)
   1d450:	41090933          	sub	s2,s2,a6
   1d454:	02412883          	lw	a7,36(sp)
   1d458:	01012683          	lw	a3,16(sp)
   1d45c:	00c12783          	lw	a5,12(sp)
   1d460:	000b8413          	mv	s0,s7
   1d464:	852052e3          	blez	s2,1cca8 <_svfiprintf_r+0x228>
   1d468:	00007e97          	auipc	t4,0x7
   1d46c:	d64e8e93          	addi	t4,t4,-668 # 241cc <zeroes.0>
   1d470:	0b2ad063          	bge	s5,s2,1d510 <_svfiprintf_r+0xa90>
   1d474:	00f12623          	sw	a5,12(sp)
   1d478:	00d12823          	sw	a3,16(sp)
   1d47c:	00040793          	mv	a5,s0
   1d480:	00048693          	mv	a3,s1
   1d484:	00090413          	mv	s0,s2
   1d488:	00700713          	li	a4,7
   1d48c:	01012a23          	sw	a6,20(sp)
   1d490:	00088493          	mv	s1,a7
   1d494:	000c8913          	mv	s2,s9
   1d498:	00c0006f          	j	1d4a4 <_svfiprintf_r+0xa24>
   1d49c:	ff040413          	addi	s0,s0,-16
   1d4a0:	048ad863          	bge	s5,s0,1d4f0 <_svfiprintf_r+0xa70>
   1d4a4:	01068693          	addi	a3,a3,16
   1d4a8:	00160613          	addi	a2,a2,1
   1d4ac:	0197a023          	sw	s9,0(a5)
   1d4b0:	0157a223          	sw	s5,4(a5)
   1d4b4:	04d12423          	sw	a3,72(sp)
   1d4b8:	04c12223          	sw	a2,68(sp)
   1d4bc:	00878793          	addi	a5,a5,8
   1d4c0:	fcc75ee3          	bge	a4,a2,1d49c <_svfiprintf_r+0xa1c>
   1d4c4:	00412503          	lw	a0,4(sp)
   1d4c8:	04010613          	addi	a2,sp,64
   1d4cc:	000d8593          	mv	a1,s11
   1d4d0:	be8ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d4d4:	900510e3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d4d8:	ff040413          	addi	s0,s0,-16
   1d4dc:	04812683          	lw	a3,72(sp)
   1d4e0:	04412603          	lw	a2,68(sp)
   1d4e4:	000b8793          	mv	a5,s7
   1d4e8:	00700713          	li	a4,7
   1d4ec:	fa8acce3          	blt	s5,s0,1d4a4 <_svfiprintf_r+0xa24>
   1d4f0:	00048893          	mv	a7,s1
   1d4f4:	00090e93          	mv	t4,s2
   1d4f8:	00068493          	mv	s1,a3
   1d4fc:	00040913          	mv	s2,s0
   1d500:	01412803          	lw	a6,20(sp)
   1d504:	00078413          	mv	s0,a5
   1d508:	01012683          	lw	a3,16(sp)
   1d50c:	00c12783          	lw	a5,12(sp)
   1d510:	012484b3          	add	s1,s1,s2
   1d514:	00160613          	addi	a2,a2,1
   1d518:	01d42023          	sw	t4,0(s0)
   1d51c:	01242223          	sw	s2,4(s0)
   1d520:	04912423          	sw	s1,72(sp)
   1d524:	04c12223          	sw	a2,68(sp)
   1d528:	00700713          	li	a4,7
   1d52c:	00840413          	addi	s0,s0,8
   1d530:	f6c75c63          	bge	a4,a2,1cca8 <_svfiprintf_r+0x228>
   1d534:	00412503          	lw	a0,4(sp)
   1d538:	04010613          	addi	a2,sp,64
   1d53c:	000d8593          	mv	a1,s11
   1d540:	03112223          	sw	a7,36(sp)
   1d544:	01012a23          	sw	a6,20(sp)
   1d548:	00d12823          	sw	a3,16(sp)
   1d54c:	00f12623          	sw	a5,12(sp)
   1d550:	b68ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d554:	880510e3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d558:	04812483          	lw	s1,72(sp)
   1d55c:	04412603          	lw	a2,68(sp)
   1d560:	02412883          	lw	a7,36(sp)
   1d564:	01412803          	lw	a6,20(sp)
   1d568:	01012683          	lw	a3,16(sp)
   1d56c:	00c12783          	lw	a5,12(sp)
   1d570:	000b8413          	mv	s0,s7
   1d574:	f34ff06f          	j	1cca8 <_svfiprintf_r+0x228>
   1d578:	00412503          	lw	a0,4(sp)
   1d57c:	04010613          	addi	a2,sp,64
   1d580:	000d8593          	mv	a1,s11
   1d584:	01112a23          	sw	a7,20(sp)
   1d588:	00d12823          	sw	a3,16(sp)
   1d58c:	00f12623          	sw	a5,12(sp)
   1d590:	b28ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d594:	840510e3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d598:	04812483          	lw	s1,72(sp)
   1d59c:	01412883          	lw	a7,20(sp)
   1d5a0:	01012683          	lw	a3,16(sp)
   1d5a4:	00c12783          	lw	a5,12(sp)
   1d5a8:	000b8413          	mv	s0,s7
   1d5ac:	f20ff06f          	j	1cccc <_svfiprintf_r+0x24c>
   1d5b0:	00412503          	lw	a0,4(sp)
   1d5b4:	04010613          	addi	a2,sp,64
   1d5b8:	000d8593          	mv	a1,s11
   1d5bc:	01112623          	sw	a7,12(sp)
   1d5c0:	af8ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d5c4:	800518e3          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d5c8:	04812483          	lw	s1,72(sp)
   1d5cc:	00c12883          	lw	a7,12(sp)
   1d5d0:	f1cff06f          	j	1ccec <_svfiprintf_r+0x26c>
   1d5d4:	00200693          	li	a3,2
   1d5d8:	00060793          	mv	a5,a2
   1d5dc:	b60688e3          	beqz	a3,1d14c <_svfiprintf_r+0x6cc>
   1d5e0:	00812503          	lw	a0,8(sp)
   1d5e4:	0f010a13          	addi	s4,sp,240
   1d5e8:	00f77693          	andi	a3,a4,15
   1d5ec:	00d506b3          	add	a3,a0,a3
   1d5f0:	0006c603          	lbu	a2,0(a3)
   1d5f4:	00475713          	srli	a4,a4,0x4
   1d5f8:	01c59693          	slli	a3,a1,0x1c
   1d5fc:	00e6e733          	or	a4,a3,a4
   1d600:	0045d593          	srli	a1,a1,0x4
   1d604:	feca0fa3          	sb	a2,-1(s4)
   1d608:	00b766b3          	or	a3,a4,a1
   1d60c:	fffa0a13          	addi	s4,s4,-1
   1d610:	fc069ce3          	bnez	a3,1d5e8 <_svfiprintf_r+0xb68>
   1d614:	0f010713          	addi	a4,sp,240
   1d618:	41470833          	sub	a6,a4,s4
   1d61c:	00090693          	mv	a3,s2
   1d620:	ad0952e3          	bge	s2,a6,1d0e4 <_svfiprintf_r+0x664>
   1d624:	00080693          	mv	a3,a6
   1d628:	abdff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d62c:	ccccdfb7          	lui	t6,0xccccd
   1d630:	ccdf8e93          	addi	t4,t6,-819 # cccccccd <__alt_data_end+0xccc8cccd>
   1d634:	01812383          	lw	t2,24(sp)
   1d638:	4007f293          	andi	t0,a5,1024
   1d63c:	00000513          	li	a0,0
   1d640:	0f010593          	addi	a1,sp,240
   1d644:	00500f13          	li	t5,5
   1d648:	cccf8f93          	addi	t6,t6,-820
   1d64c:	0ff00e13          	li	t3,255
   1d650:	00f12623          	sw	a5,12(sp)
   1d654:	0540006f          	j	1d6a8 <_svfiprintf_r+0xc28>
   1d658:	00ea37b3          	sltu	a5,s4,a4
   1d65c:	00fa07b3          	add	a5,s4,a5
   1d660:	03e7f7b3          	remu	a5,a5,t5
   1d664:	40f707b3          	sub	a5,a4,a5
   1d668:	00f736b3          	sltu	a3,a4,a5
   1d66c:	40d306b3          	sub	a3,t1,a3
   1d670:	03f785b3          	mul	a1,a5,t6
   1d674:	03d686b3          	mul	a3,a3,t4
   1d678:	03d7b633          	mulhu	a2,a5,t4
   1d67c:	00b686b3          	add	a3,a3,a1
   1d680:	03d787b3          	mul	a5,a5,t4
   1d684:	00c686b3          	add	a3,a3,a2
   1d688:	01f69613          	slli	a2,a3,0x1f
   1d68c:	0016d693          	srli	a3,a3,0x1
   1d690:	0017d793          	srli	a5,a5,0x1
   1d694:	00f667b3          	or	a5,a2,a5
   1d698:	50030a63          	beqz	t1,1dbac <_svfiprintf_r+0x112c>
   1d69c:	00078713          	mv	a4,a5
   1d6a0:	00068313          	mv	t1,a3
   1d6a4:	00080593          	mv	a1,a6
   1d6a8:	00670a33          	add	s4,a4,t1
   1d6ac:	00ea37b3          	sltu	a5,s4,a4
   1d6b0:	00fa07b3          	add	a5,s4,a5
   1d6b4:	03e7f7b3          	remu	a5,a5,t5
   1d6b8:	fff58813          	addi	a6,a1,-1
   1d6bc:	00150513          	addi	a0,a0,1
   1d6c0:	40f707b3          	sub	a5,a4,a5
   1d6c4:	00f736b3          	sltu	a3,a4,a5
   1d6c8:	40d306b3          	sub	a3,t1,a3
   1d6cc:	03d7b633          	mulhu	a2,a5,t4
   1d6d0:	03d686b3          	mul	a3,a3,t4
   1d6d4:	03d787b3          	mul	a5,a5,t4
   1d6d8:	00c686b3          	add	a3,a3,a2
   1d6dc:	01f69693          	slli	a3,a3,0x1f
   1d6e0:	0017d613          	srli	a2,a5,0x1
   1d6e4:	00c6e633          	or	a2,a3,a2
   1d6e8:	00261793          	slli	a5,a2,0x2
   1d6ec:	00c787b3          	add	a5,a5,a2
   1d6f0:	00179793          	slli	a5,a5,0x1
   1d6f4:	40f707b3          	sub	a5,a4,a5
   1d6f8:	03078793          	addi	a5,a5,48
   1d6fc:	fef58fa3          	sb	a5,-1(a1)
   1d700:	f4028ce3          	beqz	t0,1d658 <_svfiprintf_r+0xbd8>
   1d704:	0003c783          	lbu	a5,0(t2)
   1d708:	f4a798e3          	bne	a5,a0,1d658 <_svfiprintf_r+0xbd8>
   1d70c:	f5c506e3          	beq	a0,t3,1d658 <_svfiprintf_r+0xbd8>
   1d710:	34031663          	bnez	t1,1da5c <_svfiprintf_r+0xfdc>
   1d714:	00900793          	li	a5,9
   1d718:	34e7e263          	bltu	a5,a4,1da5c <_svfiprintf_r+0xfdc>
   1d71c:	00c12783          	lw	a5,12(sp)
   1d720:	00080a13          	mv	s4,a6
   1d724:	00712c23          	sw	t2,24(sp)
   1d728:	0f010713          	addi	a4,sp,240
   1d72c:	41470833          	sub	a6,a4,s4
   1d730:	00080693          	mv	a3,a6
   1d734:	9b2858e3          	bge	a6,s2,1d0e4 <_svfiprintf_r+0x664>
   1d738:	00090693          	mv	a3,s2
   1d73c:	9a9ff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d740:	01000593          	li	a1,16
   1d744:	00007317          	auipc	t1,0x7
   1d748:	a7830313          	addi	t1,t1,-1416 # 241bc <blanks.1>
   1d74c:	0ae5dc63          	bge	a1,a4,1d804 <_svfiprintf_r+0xd84>
   1d750:	00f12a23          	sw	a5,20(sp)
   1d754:	02d12223          	sw	a3,36(sp)
   1d758:	00040793          	mv	a5,s0
   1d75c:	00048693          	mv	a3,s1
   1d760:	01000e93          	li	t4,16
   1d764:	00700293          	li	t0,7
   1d768:	01f12623          	sw	t6,12(sp)
   1d76c:	01e12823          	sw	t5,16(sp)
   1d770:	03012423          	sw	a6,40(sp)
   1d774:	00070413          	mv	s0,a4
   1d778:	03112623          	sw	a7,44(sp)
   1d77c:	00030493          	mv	s1,t1
   1d780:	00c0006f          	j	1d78c <_svfiprintf_r+0xd0c>
   1d784:	ff040413          	addi	s0,s0,-16
   1d788:	048eda63          	bge	t4,s0,1d7dc <_svfiprintf_r+0xd5c>
   1d78c:	01068693          	addi	a3,a3,16
   1d790:	00160613          	addi	a2,a2,1
   1d794:	0097a023          	sw	s1,0(a5)
   1d798:	01d7a223          	sw	t4,4(a5)
   1d79c:	04d12423          	sw	a3,72(sp)
   1d7a0:	04c12223          	sw	a2,68(sp)
   1d7a4:	00878793          	addi	a5,a5,8
   1d7a8:	fcc2dee3          	bge	t0,a2,1d784 <_svfiprintf_r+0xd04>
   1d7ac:	00412503          	lw	a0,4(sp)
   1d7b0:	04010613          	addi	a2,sp,64
   1d7b4:	000d8593          	mv	a1,s11
   1d7b8:	900ff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d7bc:	e0051c63          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d7c0:	01000e93          	li	t4,16
   1d7c4:	ff040413          	addi	s0,s0,-16
   1d7c8:	04812683          	lw	a3,72(sp)
   1d7cc:	04412603          	lw	a2,68(sp)
   1d7d0:	000b8793          	mv	a5,s7
   1d7d4:	00700293          	li	t0,7
   1d7d8:	fa8ecae3          	blt	t4,s0,1d78c <_svfiprintf_r+0xd0c>
   1d7dc:	00040713          	mv	a4,s0
   1d7e0:	00048313          	mv	t1,s1
   1d7e4:	00078413          	mv	s0,a5
   1d7e8:	00068493          	mv	s1,a3
   1d7ec:	00c12f83          	lw	t6,12(sp)
   1d7f0:	01012f03          	lw	t5,16(sp)
   1d7f4:	02812803          	lw	a6,40(sp)
   1d7f8:	01412783          	lw	a5,20(sp)
   1d7fc:	02c12883          	lw	a7,44(sp)
   1d800:	02412683          	lw	a3,36(sp)
   1d804:	00e484b3          	add	s1,s1,a4
   1d808:	00160613          	addi	a2,a2,1
   1d80c:	00e42223          	sw	a4,4(s0)
   1d810:	00642023          	sw	t1,0(s0)
   1d814:	04912423          	sw	s1,72(sp)
   1d818:	04c12223          	sw	a2,68(sp)
   1d81c:	00700713          	li	a4,7
   1d820:	00840413          	addi	s0,s0,8
   1d824:	c0c75863          	bge	a4,a2,1cc34 <_svfiprintf_r+0x1b4>
   1d828:	00412503          	lw	a0,4(sp)
   1d82c:	04010613          	addi	a2,sp,64
   1d830:	000d8593          	mv	a1,s11
   1d834:	03112623          	sw	a7,44(sp)
   1d838:	03012423          	sw	a6,40(sp)
   1d83c:	02d12223          	sw	a3,36(sp)
   1d840:	00f12a23          	sw	a5,20(sp)
   1d844:	01e12823          	sw	t5,16(sp)
   1d848:	01f12623          	sw	t6,12(sp)
   1d84c:	86cff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d850:	d8051263          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d854:	04812483          	lw	s1,72(sp)
   1d858:	04412603          	lw	a2,68(sp)
   1d85c:	02c12883          	lw	a7,44(sp)
   1d860:	02812803          	lw	a6,40(sp)
   1d864:	02412683          	lw	a3,36(sp)
   1d868:	01412783          	lw	a5,20(sp)
   1d86c:	01012f03          	lw	t5,16(sp)
   1d870:	00c12f83          	lw	t6,12(sp)
   1d874:	000b8413          	mv	s0,s7
   1d878:	bbcff06f          	j	1cc34 <_svfiprintf_r+0x1b4>
   1d87c:	00412503          	lw	a0,4(sp)
   1d880:	04010613          	addi	a2,sp,64
   1d884:	000d8593          	mv	a1,s11
   1d888:	03112423          	sw	a7,40(sp)
   1d88c:	03012223          	sw	a6,36(sp)
   1d890:	00d12a23          	sw	a3,20(sp)
   1d894:	00f12823          	sw	a5,16(sp)
   1d898:	01e12623          	sw	t5,12(sp)
   1d89c:	81cff0ef          	jal	ra,1c8b8 <__ssprint_r>
   1d8a0:	d2051a63          	bnez	a0,1cdd4 <_svfiprintf_r+0x354>
   1d8a4:	04812483          	lw	s1,72(sp)
   1d8a8:	04412603          	lw	a2,68(sp)
   1d8ac:	02812883          	lw	a7,40(sp)
   1d8b0:	02412803          	lw	a6,36(sp)
   1d8b4:	01412683          	lw	a3,20(sp)
   1d8b8:	01012783          	lw	a5,16(sp)
   1d8bc:	00c12f03          	lw	t5,12(sp)
   1d8c0:	000b8413          	mv	s0,s7
   1d8c4:	bd4ff06f          	j	1cc98 <_svfiprintf_r+0x218>
   1d8c8:	0106f793          	andi	a5,a3,16
   1d8cc:	0008a703          	lw	a4,0(a7)
   1d8d0:	00488893          	addi	a7,a7,4
   1d8d4:	02079263          	bnez	a5,1d8f8 <_svfiprintf_r+0xe78>
   1d8d8:	0406f793          	andi	a5,a3,64
   1d8dc:	00078a63          	beqz	a5,1d8f0 <_svfiprintf_r+0xe70>
   1d8e0:	01071713          	slli	a4,a4,0x10
   1d8e4:	01075713          	srli	a4,a4,0x10
   1d8e8:	00000593          	li	a1,0
   1d8ec:	945ff06f          	j	1d230 <_svfiprintf_r+0x7b0>
   1d8f0:	2006f793          	andi	a5,a3,512
   1d8f4:	2e079063          	bnez	a5,1dbd4 <_svfiprintf_r+0x1154>
   1d8f8:	00000593          	li	a1,0
   1d8fc:	935ff06f          	j	1d230 <_svfiprintf_r+0x7b0>
   1d900:	01087793          	andi	a5,a6,16
   1d904:	0008a703          	lw	a4,0(a7)
   1d908:	00488893          	addi	a7,a7,4
   1d90c:	00079a63          	bnez	a5,1d920 <_svfiprintf_r+0xea0>
   1d910:	04087793          	andi	a5,a6,64
   1d914:	28078263          	beqz	a5,1db98 <_svfiprintf_r+0x1118>
   1d918:	01071713          	slli	a4,a4,0x10
   1d91c:	01075713          	srli	a4,a4,0x10
   1d920:	02010da3          	sb	zero,59(sp)
   1d924:	fff00793          	li	a5,-1
   1d928:	00000313          	li	t1,0
   1d92c:	fef91a63          	bne	s2,a5,1d120 <_svfiprintf_r+0x6a0>
   1d930:	00080793          	mv	a5,a6
   1d934:	e8cff06f          	j	1cfc0 <_svfiprintf_r+0x540>
   1d938:	00000693          	li	a3,0
   1d93c:	00000813          	li	a6,0
   1d940:	0f010a13          	addi	s4,sp,240
   1d944:	fa0ff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d948:	00000693          	li	a3,0
   1d94c:	0f010a13          	addi	s4,sp,240
   1d950:	f94ff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d954:	0008a783          	lw	a5,0(a7)
   1d958:	41fb5713          	srai	a4,s6,0x1f
   1d95c:	00488893          	addi	a7,a7,4
   1d960:	0167a023          	sw	s6,0(a5)
   1d964:	00e7a223          	sw	a4,4(a5)
   1d968:	9c4ff06f          	j	1cb2c <_svfiprintf_r+0xac>
   1d96c:	00090693          	mv	a3,s2
   1d970:	00050a13          	mv	s4,a0
   1d974:	f70ff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1d978:	00078693          	mv	a3,a5
   1d97c:	899ff06f          	j	1d214 <_svfiprintf_r+0x794>
   1d980:	00006717          	auipc	a4,0x6
   1d984:	c3470713          	addi	a4,a4,-972 # 235b4 <__flash_rodata_start+0x164>
   1d988:	00e12423          	sw	a4,8(sp)
   1d98c:	0207f713          	andi	a4,a5,32
   1d990:	04070e63          	beqz	a4,1d9ec <_svfiprintf_r+0xf6c>
   1d994:	00788893          	addi	a7,a7,7
   1d998:	ff88f893          	andi	a7,a7,-8
   1d99c:	0008a703          	lw	a4,0(a7)
   1d9a0:	0048a583          	lw	a1,4(a7)
   1d9a4:	00888893          	addi	a7,a7,8
   1d9a8:	0017f613          	andi	a2,a5,1
   1d9ac:	00060e63          	beqz	a2,1d9c8 <_svfiprintf_r+0xf48>
   1d9b0:	00b76633          	or	a2,a4,a1
   1d9b4:	00060a63          	beqz	a2,1d9c8 <_svfiprintf_r+0xf48>
   1d9b8:	03000613          	li	a2,48
   1d9bc:	02c10e23          	sb	a2,60(sp)
   1d9c0:	02d10ea3          	sb	a3,61(sp)
   1d9c4:	0027e793          	ori	a5,a5,2
   1d9c8:	bff7f793          	andi	a5,a5,-1025
   1d9cc:	ed4ff06f          	j	1d0a0 <_svfiprintf_r+0x620>
   1d9d0:	00078813          	mv	a6,a5
   1d9d4:	f24ff06f          	j	1d0f8 <_svfiprintf_r+0x678>
   1d9d8:	00006717          	auipc	a4,0x6
   1d9dc:	bc870713          	addi	a4,a4,-1080 # 235a0 <__flash_rodata_start+0x150>
   1d9e0:	00e12423          	sw	a4,8(sp)
   1d9e4:	0207f713          	andi	a4,a5,32
   1d9e8:	fa0716e3          	bnez	a4,1d994 <_svfiprintf_r+0xf14>
   1d9ec:	0107f613          	andi	a2,a5,16
   1d9f0:	0008a703          	lw	a4,0(a7)
   1d9f4:	00488893          	addi	a7,a7,4
   1d9f8:	12061663          	bnez	a2,1db24 <_svfiprintf_r+0x10a4>
   1d9fc:	0407f613          	andi	a2,a5,64
   1da00:	10060e63          	beqz	a2,1db1c <_svfiprintf_r+0x109c>
   1da04:	01071713          	slli	a4,a4,0x10
   1da08:	01075713          	srli	a4,a4,0x10
   1da0c:	00000593          	li	a1,0
   1da10:	f99ff06f          	j	1d9a8 <_svfiprintf_r+0xf28>
   1da14:	000a0513          	mv	a0,s4
   1da18:	b44f00ef          	jal	ra,dd5c <strlen>
   1da1c:	fff54693          	not	a3,a0
   1da20:	41f6d693          	srai	a3,a3,0x1f
   1da24:	01012883          	lw	a7,16(sp)
   1da28:	00c12783          	lw	a5,12(sp)
   1da2c:	00050813          	mv	a6,a0
   1da30:	00d576b3          	and	a3,a0,a3
   1da34:	00000913          	li	s2,0
   1da38:	eacff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1da3c:	04000593          	li	a1,64
   1da40:	fdcf70ef          	jal	ra,1521c <_malloc_r>
   1da44:	00ab2023          	sw	a0,0(s6)
   1da48:	00ab2823          	sw	a0,16(s6)
   1da4c:	1c050063          	beqz	a0,1dc0c <_svfiprintf_r+0x118c>
   1da50:	04000793          	li	a5,64
   1da54:	00fb2a23          	sw	a5,20(s6)
   1da58:	884ff06f          	j	1cadc <_svfiprintf_r+0x5c>
   1da5c:	01c12783          	lw	a5,28(sp)
   1da60:	02012583          	lw	a1,32(sp)
   1da64:	02612623          	sw	t1,44(sp)
   1da68:	40f80833          	sub	a6,a6,a5
   1da6c:	00078613          	mv	a2,a5
   1da70:	00080513          	mv	a0,a6
   1da74:	02e12423          	sw	a4,40(sp)
   1da78:	03112223          	sw	a7,36(sp)
   1da7c:	00712c23          	sw	t2,24(sp)
   1da80:	00512a23          	sw	t0,20(sp)
   1da84:	01012823          	sw	a6,16(sp)
   1da88:	a7cfa0ef          	jal	ra,17d04 <strncpy>
   1da8c:	02812703          	lw	a4,40(sp)
   1da90:	00500693          	li	a3,5
   1da94:	01812383          	lw	t2,24(sp)
   1da98:	00ea37b3          	sltu	a5,s4,a4
   1da9c:	00fa07b3          	add	a5,s4,a5
   1daa0:	02d7f7b3          	remu	a5,a5,a3
   1daa4:	0013c683          	lbu	a3,1(t2)
   1daa8:	02c12303          	lw	t1,44(sp)
   1daac:	ccccd5b7          	lui	a1,0xccccd
   1dab0:	00d036b3          	snez	a3,a3
   1dab4:	00d383b3          	add	t2,t2,a3
   1dab8:	ccd58613          	addi	a2,a1,-819 # cccccccd <__alt_data_end+0xccc8cccd>
   1dabc:	ccc58593          	addi	a1,a1,-820
   1dac0:	01012803          	lw	a6,16(sp)
   1dac4:	01412283          	lw	t0,20(sp)
   1dac8:	02412883          	lw	a7,36(sp)
   1dacc:	00000513          	li	a0,0
   1dad0:	00500f13          	li	t5,5
   1dad4:	00060e93          	mv	t4,a2
   1dad8:	0ff00e13          	li	t3,255
   1dadc:	40f707b3          	sub	a5,a4,a5
   1dae0:	00f736b3          	sltu	a3,a4,a5
   1dae4:	40d306b3          	sub	a3,t1,a3
   1dae8:	02b785b3          	mul	a1,a5,a1
   1daec:	02c686b3          	mul	a3,a3,a2
   1daf0:	02c7b333          	mulhu	t1,a5,a2
   1daf4:	00b686b3          	add	a3,a3,a1
   1daf8:	02c78733          	mul	a4,a5,a2
   1dafc:	006686b3          	add	a3,a3,t1
   1db00:	01f69793          	slli	a5,a3,0x1f
   1db04:	0016d693          	srli	a3,a3,0x1
   1db08:	00175713          	srli	a4,a4,0x1
   1db0c:	00e7e7b3          	or	a5,a5,a4
   1db10:	ccccd737          	lui	a4,0xccccd
   1db14:	ccc70f93          	addi	t6,a4,-820 # cccccccc <__alt_data_end+0xccc8cccc>
   1db18:	b85ff06f          	j	1d69c <_svfiprintf_r+0xc1c>
   1db1c:	2007f613          	andi	a2,a5,512
   1db20:	0a061463          	bnez	a2,1dbc8 <_svfiprintf_r+0x1148>
   1db24:	00000593          	li	a1,0
   1db28:	e81ff06f          	j	1d9a8 <_svfiprintf_r+0xf28>
   1db2c:	00068793          	mv	a5,a3
   1db30:	00000693          	li	a3,0
   1db34:	e0068c63          	beqz	a3,1d14c <_svfiprintf_r+0x6cc>
   1db38:	aa9ff06f          	j	1d5e0 <_svfiprintf_r+0xb60>
   1db3c:	0019c683          	lbu	a3,1(s3)
   1db40:	0207e793          	ori	a5,a5,32
   1db44:	00198993          	addi	s3,s3,1
   1db48:	85cff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1db4c:	0019c683          	lbu	a3,1(s3)
   1db50:	2007e793          	ori	a5,a5,512
   1db54:	00198993          	addi	s3,s3,1
   1db58:	84cff06f          	j	1cba4 <_svfiprintf_r+0x124>
   1db5c:	0008a783          	lw	a5,0(a7)
   1db60:	00488893          	addi	a7,a7,4
   1db64:	0167a023          	sw	s6,0(a5)
   1db68:	fc5fe06f          	j	1cb2c <_svfiprintf_r+0xac>
   1db6c:	00600713          	li	a4,6
   1db70:	00090813          	mv	a6,s2
   1db74:	01277463          	bgeu	a4,s2,1db7c <_svfiprintf_r+0x10fc>
   1db78:	00600813          	li	a6,6
   1db7c:	00080693          	mv	a3,a6
   1db80:	00006a17          	auipc	s4,0x6
   1db84:	a48a0a13          	addi	s4,s4,-1464 # 235c8 <__flash_rodata_start+0x178>
   1db88:	888ff06f          	j	1cc10 <_svfiprintf_r+0x190>
   1db8c:	00000713          	li	a4,0
   1db90:	00000593          	li	a1,0
   1db94:	a4dff06f          	j	1d5e0 <_svfiprintf_r+0xb60>
   1db98:	20087793          	andi	a5,a6,512
   1db9c:	d80782e3          	beqz	a5,1d920 <_svfiprintf_r+0xea0>
   1dba0:	0ff77713          	zext.b	a4,a4
   1dba4:	00000313          	li	t1,0
   1dba8:	d6cff06f          	j	1d114 <_svfiprintf_r+0x694>
   1dbac:	00900613          	li	a2,9
   1dbb0:	aee666e3          	bltu	a2,a4,1d69c <_svfiprintf_r+0xc1c>
   1dbb4:	b69ff06f          	j	1d71c <_svfiprintf_r+0xc9c>
   1dbb8:	0008a783          	lw	a5,0(a7)
   1dbbc:	00488893          	addi	a7,a7,4
   1dbc0:	01679023          	sh	s6,0(a5)
   1dbc4:	f69fe06f          	j	1cb2c <_svfiprintf_r+0xac>
   1dbc8:	0ff77713          	zext.b	a4,a4
   1dbcc:	00000593          	li	a1,0
   1dbd0:	dd9ff06f          	j	1d9a8 <_svfiprintf_r+0xf28>
   1dbd4:	0ff77713          	zext.b	a4,a4
   1dbd8:	00000593          	li	a1,0
   1dbdc:	e54ff06f          	j	1d230 <_svfiprintf_r+0x7b0>
   1dbe0:	01871713          	slli	a4,a4,0x18
   1dbe4:	41875713          	srai	a4,a4,0x18
   1dbe8:	41f75313          	srai	t1,a4,0x1f
   1dbec:	00030693          	mv	a3,t1
   1dbf0:	974ff06f          	j	1cd64 <_svfiprintf_r+0x2e4>
   1dbf4:	00090693          	mv	a3,s2
   1dbf8:	00090813          	mv	a6,s2
   1dbfc:	00000913          	li	s2,0
   1dc00:	ce4ff06f          	j	1d0e4 <_svfiprintf_r+0x664>
   1dc04:	03000713          	li	a4,48
   1dc08:	bccff06f          	j	1cfd4 <_svfiprintf_r+0x554>
   1dc0c:	00412703          	lw	a4,4(sp)
   1dc10:	00c00793          	li	a5,12
   1dc14:	00f72023          	sw	a5,0(a4)
   1dc18:	fff00d93          	li	s11,-1
   1dc1c:	9d0ff06f          	j	1cdec <_svfiprintf_r+0x36c>
   1dc20:	0008a903          	lw	s2,0(a7)
   1dc24:	00488893          	addi	a7,a7,4
   1dc28:	00095463          	bgez	s2,1dc30 <_svfiprintf_r+0x11b0>
   1dc2c:	fff00913          	li	s2,-1
   1dc30:	0019c683          	lbu	a3,1(s3)
   1dc34:	00060993          	mv	s3,a2
   1dc38:	f6dfe06f          	j	1cba4 <_svfiprintf_r+0x124>

0001dc3c <__swbuf_r>:
   1dc3c:	fe010113          	addi	sp,sp,-32
   1dc40:	00812c23          	sw	s0,24(sp)
   1dc44:	00912a23          	sw	s1,20(sp)
   1dc48:	01212823          	sw	s2,16(sp)
   1dc4c:	00112e23          	sw	ra,28(sp)
   1dc50:	01312623          	sw	s3,12(sp)
   1dc54:	00050913          	mv	s2,a0
   1dc58:	00058493          	mv	s1,a1
   1dc5c:	00060413          	mv	s0,a2
   1dc60:	00050663          	beqz	a0,1dc6c <__swbuf_r+0x30>
   1dc64:	03852783          	lw	a5,56(a0)
   1dc68:	14078063          	beqz	a5,1dda8 <__swbuf_r+0x16c>
   1dc6c:	01842783          	lw	a5,24(s0)
   1dc70:	00c41703          	lh	a4,12(s0)
   1dc74:	00f42423          	sw	a5,8(s0)
   1dc78:	00877793          	andi	a5,a4,8
   1dc7c:	08078263          	beqz	a5,1dd00 <__swbuf_r+0xc4>
   1dc80:	01042783          	lw	a5,16(s0)
   1dc84:	06078e63          	beqz	a5,1dd00 <__swbuf_r+0xc4>
   1dc88:	01271693          	slli	a3,a4,0x12
   1dc8c:	0ff4f993          	zext.b	s3,s1
   1dc90:	0ff4f493          	zext.b	s1,s1
   1dc94:	0806da63          	bgez	a3,1dd28 <__swbuf_r+0xec>
   1dc98:	00042703          	lw	a4,0(s0)
   1dc9c:	01442683          	lw	a3,20(s0)
   1dca0:	40f707b3          	sub	a5,a4,a5
   1dca4:	0ad7da63          	bge	a5,a3,1dd58 <__swbuf_r+0x11c>
   1dca8:	00842683          	lw	a3,8(s0)
   1dcac:	00170613          	addi	a2,a4,1
   1dcb0:	00c42023          	sw	a2,0(s0)
   1dcb4:	fff68693          	addi	a3,a3,-1
   1dcb8:	00d42423          	sw	a3,8(s0)
   1dcbc:	01370023          	sb	s3,0(a4)
   1dcc0:	01442703          	lw	a4,20(s0)
   1dcc4:	00178793          	addi	a5,a5,1
   1dcc8:	0cf70463          	beq	a4,a5,1dd90 <__swbuf_r+0x154>
   1dccc:	00c45783          	lhu	a5,12(s0)
   1dcd0:	0017f793          	andi	a5,a5,1
   1dcd4:	00078663          	beqz	a5,1dce0 <__swbuf_r+0xa4>
   1dcd8:	00a00793          	li	a5,10
   1dcdc:	0af48a63          	beq	s1,a5,1dd90 <__swbuf_r+0x154>
   1dce0:	01c12083          	lw	ra,28(sp)
   1dce4:	01812403          	lw	s0,24(sp)
   1dce8:	01012903          	lw	s2,16(sp)
   1dcec:	00c12983          	lw	s3,12(sp)
   1dcf0:	00048513          	mv	a0,s1
   1dcf4:	01412483          	lw	s1,20(sp)
   1dcf8:	02010113          	addi	sp,sp,32
   1dcfc:	00008067          	ret
   1dd00:	00040593          	mv	a1,s0
   1dd04:	00090513          	mv	a0,s2
   1dd08:	ed9f20ef          	jal	ra,10be0 <__swsetup_r>
   1dd0c:	08051a63          	bnez	a0,1dda0 <__swbuf_r+0x164>
   1dd10:	00c41703          	lh	a4,12(s0)
   1dd14:	0ff4f993          	zext.b	s3,s1
   1dd18:	01042783          	lw	a5,16(s0)
   1dd1c:	01271693          	slli	a3,a4,0x12
   1dd20:	0ff4f493          	zext.b	s1,s1
   1dd24:	f606cae3          	bltz	a3,1dc98 <__swbuf_r+0x5c>
   1dd28:	06442683          	lw	a3,100(s0)
   1dd2c:	00002637          	lui	a2,0x2
   1dd30:	00c76733          	or	a4,a4,a2
   1dd34:	ffffe637          	lui	a2,0xffffe
   1dd38:	fff60613          	addi	a2,a2,-1 # ffffdfff <__alt_data_end+0xfffbdfff>
   1dd3c:	00c6f6b3          	and	a3,a3,a2
   1dd40:	00e41623          	sh	a4,12(s0)
   1dd44:	00042703          	lw	a4,0(s0)
   1dd48:	06d42223          	sw	a3,100(s0)
   1dd4c:	01442683          	lw	a3,20(s0)
   1dd50:	40f707b3          	sub	a5,a4,a5
   1dd54:	f4d7cae3          	blt	a5,a3,1dca8 <__swbuf_r+0x6c>
   1dd58:	00040593          	mv	a1,s0
   1dd5c:	00090513          	mv	a0,s2
   1dd60:	cacf30ef          	jal	ra,1120c <_fflush_r>
   1dd64:	02051e63          	bnez	a0,1dda0 <__swbuf_r+0x164>
   1dd68:	00042703          	lw	a4,0(s0)
   1dd6c:	00842683          	lw	a3,8(s0)
   1dd70:	00100793          	li	a5,1
   1dd74:	00170613          	addi	a2,a4,1
   1dd78:	fff68693          	addi	a3,a3,-1
   1dd7c:	00c42023          	sw	a2,0(s0)
   1dd80:	00d42423          	sw	a3,8(s0)
   1dd84:	01370023          	sb	s3,0(a4)
   1dd88:	01442703          	lw	a4,20(s0)
   1dd8c:	f4f710e3          	bne	a4,a5,1dccc <__swbuf_r+0x90>
   1dd90:	00040593          	mv	a1,s0
   1dd94:	00090513          	mv	a0,s2
   1dd98:	c74f30ef          	jal	ra,1120c <_fflush_r>
   1dd9c:	f40502e3          	beqz	a0,1dce0 <__swbuf_r+0xa4>
   1dda0:	fff00493          	li	s1,-1
   1dda4:	f3dff06f          	j	1dce0 <__swbuf_r+0xa4>
   1dda8:	f1cf30ef          	jal	ra,114c4 <__sinit>
   1ddac:	ec1ff06f          	j	1dc6c <__swbuf_r+0x30>

0001ddb0 <__swbuf>:
   1ddb0:	00058613          	mv	a2,a1
   1ddb4:	00050593          	mv	a1,a0
   1ddb8:	00008517          	auipc	a0,0x8
   1ddbc:	28452503          	lw	a0,644(a0) # 2603c <_impure_ptr>
   1ddc0:	e7dff06f          	j	1dc3c <__swbuf_r>

0001ddc4 <_wcrtomb_r>:
   1ddc4:	fe010113          	addi	sp,sp,-32
   1ddc8:	00812c23          	sw	s0,24(sp)
   1ddcc:	00912a23          	sw	s1,20(sp)
   1ddd0:	00112e23          	sw	ra,28(sp)
   1ddd4:	00050413          	mv	s0,a0
   1ddd8:	00068493          	mv	s1,a3
   1dddc:	00008797          	auipc	a5,0x8
   1dde0:	19c7a783          	lw	a5,412(a5) # 25f78 <__global_locale+0xe0>
   1dde4:	02058263          	beqz	a1,1de08 <_wcrtomb_r+0x44>
   1dde8:	000780e7          	jalr	a5
   1ddec:	fff00793          	li	a5,-1
   1ddf0:	02f50663          	beq	a0,a5,1de1c <_wcrtomb_r+0x58>
   1ddf4:	01c12083          	lw	ra,28(sp)
   1ddf8:	01812403          	lw	s0,24(sp)
   1ddfc:	01412483          	lw	s1,20(sp)
   1de00:	02010113          	addi	sp,sp,32
   1de04:	00008067          	ret
   1de08:	00000613          	li	a2,0
   1de0c:	00410593          	addi	a1,sp,4
   1de10:	000780e7          	jalr	a5
   1de14:	fff00793          	li	a5,-1
   1de18:	fcf51ee3          	bne	a0,a5,1ddf4 <_wcrtomb_r+0x30>
   1de1c:	0004a023          	sw	zero,0(s1)
   1de20:	08a00793          	li	a5,138
   1de24:	01c12083          	lw	ra,28(sp)
   1de28:	00f42023          	sw	a5,0(s0)
   1de2c:	01812403          	lw	s0,24(sp)
   1de30:	01412483          	lw	s1,20(sp)
   1de34:	02010113          	addi	sp,sp,32
   1de38:	00008067          	ret

0001de3c <wcrtomb>:
   1de3c:	fe010113          	addi	sp,sp,-32
   1de40:	00812c23          	sw	s0,24(sp)
   1de44:	00912a23          	sw	s1,20(sp)
   1de48:	00112e23          	sw	ra,28(sp)
   1de4c:	00060413          	mv	s0,a2
   1de50:	00008497          	auipc	s1,0x8
   1de54:	1ec4a483          	lw	s1,492(s1) # 2603c <_impure_ptr>
   1de58:	00008797          	auipc	a5,0x8
   1de5c:	1207a783          	lw	a5,288(a5) # 25f78 <__global_locale+0xe0>
   1de60:	02050a63          	beqz	a0,1de94 <wcrtomb+0x58>
   1de64:	00058613          	mv	a2,a1
   1de68:	00040693          	mv	a3,s0
   1de6c:	00050593          	mv	a1,a0
   1de70:	00048513          	mv	a0,s1
   1de74:	000780e7          	jalr	a5
   1de78:	fff00793          	li	a5,-1
   1de7c:	02f50a63          	beq	a0,a5,1deb0 <wcrtomb+0x74>
   1de80:	01c12083          	lw	ra,28(sp)
   1de84:	01812403          	lw	s0,24(sp)
   1de88:	01412483          	lw	s1,20(sp)
   1de8c:	02010113          	addi	sp,sp,32
   1de90:	00008067          	ret
   1de94:	00060693          	mv	a3,a2
   1de98:	00410593          	addi	a1,sp,4
   1de9c:	00000613          	li	a2,0
   1dea0:	00048513          	mv	a0,s1
   1dea4:	000780e7          	jalr	a5
   1dea8:	fff00793          	li	a5,-1
   1deac:	fcf51ae3          	bne	a0,a5,1de80 <wcrtomb+0x44>
   1deb0:	00042023          	sw	zero,0(s0)
   1deb4:	01c12083          	lw	ra,28(sp)
   1deb8:	01812403          	lw	s0,24(sp)
   1debc:	08a00793          	li	a5,138
   1dec0:	00f4a023          	sw	a5,0(s1)
   1dec4:	01412483          	lw	s1,20(sp)
   1dec8:	02010113          	addi	sp,sp,32
   1decc:	00008067          	ret

0001ded0 <_wctomb_r>:
   1ded0:	00008797          	auipc	a5,0x8
   1ded4:	0a87a783          	lw	a5,168(a5) # 25f78 <__global_locale+0xe0>
   1ded8:	00078067          	jr	a5

0001dedc <__ascii_wctomb>:
   1dedc:	02058463          	beqz	a1,1df04 <__ascii_wctomb+0x28>
   1dee0:	0ff00793          	li	a5,255
   1dee4:	00c7e863          	bltu	a5,a2,1def4 <__ascii_wctomb+0x18>
   1dee8:	00c58023          	sb	a2,0(a1)
   1deec:	00100513          	li	a0,1
   1def0:	00008067          	ret
   1def4:	08a00793          	li	a5,138
   1def8:	00f52023          	sw	a5,0(a0)
   1defc:	fff00513          	li	a0,-1
   1df00:	00008067          	ret
   1df04:	00000513          	li	a0,0
   1df08:	00008067          	ret

0001df0c <abort>:
   1df0c:	ff010113          	addi	sp,sp,-16
   1df10:	00600513          	li	a0,6
   1df14:	00112623          	sw	ra,12(sp)
   1df18:	fe8f90ef          	jal	ra,17700 <raise>
   1df1c:	00100513          	li	a0,1
   1df20:	594040ef          	jal	ra,224b4 <_exit>

0001df24 <__clzsi2>:
   1df24:	000107b7          	lui	a5,0x10
   1df28:	02f57a63          	bgeu	a0,a5,1df5c <__clzsi2+0x38>
   1df2c:	10053713          	sltiu	a4,a0,256
   1df30:	00174713          	xori	a4,a4,1
   1df34:	00371713          	slli	a4,a4,0x3
   1df38:	000247b7          	lui	a5,0x24
   1df3c:	00e55533          	srl	a0,a0,a4
   1df40:	32078793          	addi	a5,a5,800 # 24320 <__clz_tab>
   1df44:	00a787b3          	add	a5,a5,a0
   1df48:	0007c503          	lbu	a0,0(a5)
   1df4c:	02000693          	li	a3,32
   1df50:	40e686b3          	sub	a3,a3,a4
   1df54:	40a68533          	sub	a0,a3,a0
   1df58:	00008067          	ret
   1df5c:	010007b7          	lui	a5,0x1000
   1df60:	02f57463          	bgeu	a0,a5,1df88 <__clzsi2+0x64>
   1df64:	01000713          	li	a4,16
   1df68:	000247b7          	lui	a5,0x24
   1df6c:	00e55533          	srl	a0,a0,a4
   1df70:	32078793          	addi	a5,a5,800 # 24320 <__clz_tab>
   1df74:	00a787b3          	add	a5,a5,a0
   1df78:	0007c503          	lbu	a0,0(a5)
   1df7c:	01000693          	li	a3,16
   1df80:	40a68533          	sub	a0,a3,a0
   1df84:	00008067          	ret
   1df88:	01800713          	li	a4,24
   1df8c:	000247b7          	lui	a5,0x24
   1df90:	00e55533          	srl	a0,a0,a4
   1df94:	32078793          	addi	a5,a5,800 # 24320 <__clz_tab>
   1df98:	00a787b3          	add	a5,a5,a0
   1df9c:	0007c503          	lbu	a0,0(a5)
   1dfa0:	00800693          	li	a3,8
   1dfa4:	40a68533          	sub	a0,a3,a0
   1dfa8:	00008067          	ret

0001dfac <__divdf3>:
   1dfac:	fd010113          	addi	sp,sp,-48
   1dfb0:	0145d793          	srli	a5,a1,0x14
   1dfb4:	02812423          	sw	s0,40(sp)
   1dfb8:	02912223          	sw	s1,36(sp)
   1dfbc:	03212023          	sw	s2,32(sp)
   1dfc0:	01512a23          	sw	s5,20(sp)
   1dfc4:	01712623          	sw	s7,12(sp)
   1dfc8:	00c59493          	slli	s1,a1,0xc
   1dfcc:	02112623          	sw	ra,44(sp)
   1dfd0:	01312e23          	sw	s3,28(sp)
   1dfd4:	01412c23          	sw	s4,24(sp)
   1dfd8:	01612823          	sw	s6,16(sp)
   1dfdc:	01812423          	sw	s8,8(sp)
   1dfe0:	7ff7f793          	andi	a5,a5,2047
   1dfe4:	00050413          	mv	s0,a0
   1dfe8:	00060b93          	mv	s7,a2
   1dfec:	00068913          	mv	s2,a3
   1dff0:	00c4d493          	srli	s1,s1,0xc
   1dff4:	01f5da93          	srli	s5,a1,0x1f
   1dff8:	18078063          	beqz	a5,1e178 <__divdf3+0x1cc>
   1dffc:	7ff00713          	li	a4,2047
   1e000:	1ce78263          	beq	a5,a4,1e1c4 <__divdf3+0x218>
   1e004:	00349493          	slli	s1,s1,0x3
   1e008:	01d55b13          	srli	s6,a0,0x1d
   1e00c:	009b6b33          	or	s6,s6,s1
   1e010:	00800737          	lui	a4,0x800
   1e014:	00eb6b33          	or	s6,s6,a4
   1e018:	00351a13          	slli	s4,a0,0x3
   1e01c:	c0178993          	addi	s3,a5,-1023
   1e020:	00000493          	li	s1,0
   1e024:	00000c13          	li	s8,0
   1e028:	01495793          	srli	a5,s2,0x14
   1e02c:	00c91413          	slli	s0,s2,0xc
   1e030:	7ff7f793          	andi	a5,a5,2047
   1e034:	00c45413          	srli	s0,s0,0xc
   1e038:	01f95913          	srli	s2,s2,0x1f
   1e03c:	0e078a63          	beqz	a5,1e130 <__divdf3+0x184>
   1e040:	7ff00713          	li	a4,2047
   1e044:	0ce78863          	beq	a5,a4,1e114 <__divdf3+0x168>
   1e048:	00341413          	slli	s0,s0,0x3
   1e04c:	01dbd713          	srli	a4,s7,0x1d
   1e050:	00876733          	or	a4,a4,s0
   1e054:	c0178793          	addi	a5,a5,-1023
   1e058:	00800437          	lui	s0,0x800
   1e05c:	00876433          	or	s0,a4,s0
   1e060:	003b9893          	slli	a7,s7,0x3
   1e064:	40f989b3          	sub	s3,s3,a5
   1e068:	00000613          	li	a2,0
   1e06c:	00f00713          	li	a4,15
   1e070:	012ac6b3          	xor	a3,s5,s2
   1e074:	22976c63          	bltu	a4,s1,1e2ac <__divdf3+0x300>
   1e078:	000247b7          	lui	a5,0x24
   1e07c:	00249493          	slli	s1,s1,0x2
   1e080:	2e078793          	addi	a5,a5,736 # 242e0 <_ctype_+0x104>
   1e084:	00f484b3          	add	s1,s1,a5
   1e088:	0004a703          	lw	a4,0(s1)
   1e08c:	00070067          	jr	a4 # 800000 <__alt_data_end+0x7c0000>
   1e090:	40f70733          	sub	a4,a4,a5
   1e094:	03800613          	li	a2,56
   1e098:	56e65063          	bge	a2,a4,1e5f8 <__divdf3+0x64c>
   1e09c:	00000793          	li	a5,0
   1e0a0:	00000613          	li	a2,0
   1e0a4:	00000713          	li	a4,0
   1e0a8:	02c12083          	lw	ra,44(sp)
   1e0ac:	02812403          	lw	s0,40(sp)
   1e0b0:	01479793          	slli	a5,a5,0x14
   1e0b4:	00c7e7b3          	or	a5,a5,a2
   1e0b8:	01f69693          	slli	a3,a3,0x1f
   1e0bc:	00d7e7b3          	or	a5,a5,a3
   1e0c0:	02412483          	lw	s1,36(sp)
   1e0c4:	02012903          	lw	s2,32(sp)
   1e0c8:	01c12983          	lw	s3,28(sp)
   1e0cc:	01812a03          	lw	s4,24(sp)
   1e0d0:	01412a83          	lw	s5,20(sp)
   1e0d4:	01012b03          	lw	s6,16(sp)
   1e0d8:	00c12b83          	lw	s7,12(sp)
   1e0dc:	00812c03          	lw	s8,8(sp)
   1e0e0:	00070513          	mv	a0,a4
   1e0e4:	00078593          	mv	a1,a5
   1e0e8:	03010113          	addi	sp,sp,48
   1e0ec:	00008067          	ret
   1e0f0:	7ff00793          	li	a5,2047
   1e0f4:	00000613          	li	a2,0
   1e0f8:	00000713          	li	a4,0
   1e0fc:	fadff06f          	j	1e0a8 <__divdf3+0xfc>
   1e100:	00000693          	li	a3,0
   1e104:	7ff00793          	li	a5,2047
   1e108:	00080637          	lui	a2,0x80
   1e10c:	00000713          	li	a4,0
   1e110:	f99ff06f          	j	1e0a8 <__divdf3+0xfc>
   1e114:	017468b3          	or	a7,s0,s7
   1e118:	80198993          	addi	s3,s3,-2047
   1e11c:	16089663          	bnez	a7,1e288 <__divdf3+0x2dc>
   1e120:	0024e493          	ori	s1,s1,2
   1e124:	00000413          	li	s0,0
   1e128:	00200613          	li	a2,2
   1e12c:	f41ff06f          	j	1e06c <__divdf3+0xc0>
   1e130:	017468b3          	or	a7,s0,s7
   1e134:	14088263          	beqz	a7,1e278 <__divdf3+0x2cc>
   1e138:	44040e63          	beqz	s0,1e594 <__divdf3+0x5e8>
   1e13c:	00040513          	mv	a0,s0
   1e140:	de5ff0ef          	jal	ra,1df24 <__clzsi2>
   1e144:	00050793          	mv	a5,a0
   1e148:	ff550693          	addi	a3,a0,-11
   1e14c:	01d00713          	li	a4,29
   1e150:	ff878893          	addi	a7,a5,-8
   1e154:	40d70733          	sub	a4,a4,a3
   1e158:	01141433          	sll	s0,s0,a7
   1e15c:	00ebd733          	srl	a4,s7,a4
   1e160:	00876433          	or	s0,a4,s0
   1e164:	011b98b3          	sll	a7,s7,a7
   1e168:	013787b3          	add	a5,a5,s3
   1e16c:	3f378993          	addi	s3,a5,1011
   1e170:	00000613          	li	a2,0
   1e174:	ef9ff06f          	j	1e06c <__divdf3+0xc0>
   1e178:	00a4eb33          	or	s6,s1,a0
   1e17c:	100b0e63          	beqz	s6,1e298 <__divdf3+0x2ec>
   1e180:	3e048863          	beqz	s1,1e570 <__divdf3+0x5c4>
   1e184:	00048513          	mv	a0,s1
   1e188:	d9dff0ef          	jal	ra,1df24 <__clzsi2>
   1e18c:	00050713          	mv	a4,a0
   1e190:	ff550693          	addi	a3,a0,-11
   1e194:	01d00793          	li	a5,29
   1e198:	ff870a13          	addi	s4,a4,-8
   1e19c:	40d787b3          	sub	a5,a5,a3
   1e1a0:	014494b3          	sll	s1,s1,s4
   1e1a4:	00f457b3          	srl	a5,s0,a5
   1e1a8:	0097eb33          	or	s6,a5,s1
   1e1ac:	01441a33          	sll	s4,s0,s4
   1e1b0:	c0d00793          	li	a5,-1011
   1e1b4:	40e789b3          	sub	s3,a5,a4
   1e1b8:	00000493          	li	s1,0
   1e1bc:	00000c13          	li	s8,0
   1e1c0:	e69ff06f          	j	1e028 <__divdf3+0x7c>
   1e1c4:	00a4eb33          	or	s6,s1,a0
   1e1c8:	080b1c63          	bnez	s6,1e260 <__divdf3+0x2b4>
   1e1cc:	00000a13          	li	s4,0
   1e1d0:	00800493          	li	s1,8
   1e1d4:	7ff00993          	li	s3,2047
   1e1d8:	00200c13          	li	s8,2
   1e1dc:	e4dff06f          	j	1e028 <__divdf3+0x7c>
   1e1e0:	00060c13          	mv	s8,a2
   1e1e4:	00200793          	li	a5,2
   1e1e8:	50fc0063          	beq	s8,a5,1e6e8 <__divdf3+0x73c>
   1e1ec:	00300793          	li	a5,3
   1e1f0:	f0fc08e3          	beq	s8,a5,1e100 <__divdf3+0x154>
   1e1f4:	00100793          	li	a5,1
   1e1f8:	00090693          	mv	a3,s2
   1e1fc:	eafc00e3          	beq	s8,a5,1e09c <__divdf3+0xf0>
   1e200:	3ff98793          	addi	a5,s3,1023
   1e204:	2af05c63          	blez	a5,1e4bc <__divdf3+0x510>
   1e208:	0078f713          	andi	a4,a7,7
   1e20c:	4a071e63          	bnez	a4,1e6c8 <__divdf3+0x71c>
   1e210:	01000737          	lui	a4,0x1000
   1e214:	00e47733          	and	a4,s0,a4
   1e218:	00070a63          	beqz	a4,1e22c <__divdf3+0x280>
   1e21c:	ff0007b7          	lui	a5,0xff000
   1e220:	fff78793          	addi	a5,a5,-1 # feffffff <__alt_data_end+0xfefbffff>
   1e224:	00f47433          	and	s0,s0,a5
   1e228:	40098793          	addi	a5,s3,1024
   1e22c:	7fe00713          	li	a4,2046
   1e230:	ecf740e3          	blt	a4,a5,1e0f0 <__divdf3+0x144>
   1e234:	0038d893          	srli	a7,a7,0x3
   1e238:	01d41713          	slli	a4,s0,0x1d
   1e23c:	00941613          	slli	a2,s0,0x9
   1e240:	01176733          	or	a4,a4,a7
   1e244:	00c65613          	srli	a2,a2,0xc
   1e248:	7ff7f793          	andi	a5,a5,2047
   1e24c:	e5dff06f          	j	1e0a8 <__divdf3+0xfc>
   1e250:	000a8913          	mv	s2,s5
   1e254:	000b0413          	mv	s0,s6
   1e258:	000a0893          	mv	a7,s4
   1e25c:	f89ff06f          	j	1e1e4 <__divdf3+0x238>
   1e260:	00048b13          	mv	s6,s1
   1e264:	00050a13          	mv	s4,a0
   1e268:	00c00493          	li	s1,12
   1e26c:	7ff00993          	li	s3,2047
   1e270:	00300c13          	li	s8,3
   1e274:	db5ff06f          	j	1e028 <__divdf3+0x7c>
   1e278:	0014e493          	ori	s1,s1,1
   1e27c:	00000413          	li	s0,0
   1e280:	00100613          	li	a2,1
   1e284:	de9ff06f          	j	1e06c <__divdf3+0xc0>
   1e288:	0034e493          	ori	s1,s1,3
   1e28c:	000b8893          	mv	a7,s7
   1e290:	00300613          	li	a2,3
   1e294:	dd9ff06f          	j	1e06c <__divdf3+0xc0>
   1e298:	00000a13          	li	s4,0
   1e29c:	00400493          	li	s1,4
   1e2a0:	00000993          	li	s3,0
   1e2a4:	00100c13          	li	s8,1
   1e2a8:	d81ff06f          	j	1e028 <__divdf3+0x7c>
   1e2ac:	2b646663          	bltu	s0,s6,1e558 <__divdf3+0x5ac>
   1e2b0:	2a8b0263          	beq	s6,s0,1e554 <__divdf3+0x5a8>
   1e2b4:	000a0313          	mv	t1,s4
   1e2b8:	fff98993          	addi	s3,s3,-1
   1e2bc:	000b0793          	mv	a5,s6
   1e2c0:	00000a13          	li	s4,0
   1e2c4:	00841713          	slli	a4,s0,0x8
   1e2c8:	01075513          	srli	a0,a4,0x10
   1e2cc:	02a7d433          	divu	s0,a5,a0
   1e2d0:	0188d613          	srli	a2,a7,0x18
   1e2d4:	00e66633          	or	a2,a2,a4
   1e2d8:	01061813          	slli	a6,a2,0x10
   1e2dc:	01085813          	srli	a6,a6,0x10
   1e2e0:	00889593          	slli	a1,a7,0x8
   1e2e4:	01035713          	srli	a4,t1,0x10
   1e2e8:	02a7f7b3          	remu	a5,a5,a0
   1e2ec:	028808b3          	mul	a7,a6,s0
   1e2f0:	01079793          	slli	a5,a5,0x10
   1e2f4:	00f767b3          	or	a5,a4,a5
   1e2f8:	0117fa63          	bgeu	a5,a7,1e30c <__divdf3+0x360>
   1e2fc:	00f607b3          	add	a5,a2,a5
   1e300:	fff40713          	addi	a4,s0,-1 # 7fffff <__alt_data_end+0x7bffff>
   1e304:	2ec7f263          	bgeu	a5,a2,1e5e8 <__divdf3+0x63c>
   1e308:	00070413          	mv	s0,a4
   1e30c:	411787b3          	sub	a5,a5,a7
   1e310:	02a7d8b3          	divu	a7,a5,a0
   1e314:	01031713          	slli	a4,t1,0x10
   1e318:	01075713          	srli	a4,a4,0x10
   1e31c:	02a7f7b3          	remu	a5,a5,a0
   1e320:	03180fb3          	mul	t6,a6,a7
   1e324:	01079793          	slli	a5,a5,0x10
   1e328:	00f76733          	or	a4,a4,a5
   1e32c:	01f77a63          	bgeu	a4,t6,1e340 <__divdf3+0x394>
   1e330:	00e60733          	add	a4,a2,a4
   1e334:	fff88793          	addi	a5,a7,-1
   1e338:	2ac77063          	bgeu	a4,a2,1e5d8 <__divdf3+0x62c>
   1e33c:	00078893          	mv	a7,a5
   1e340:	01041413          	slli	s0,s0,0x10
   1e344:	000102b7          	lui	t0,0x10
   1e348:	01146433          	or	s0,s0,a7
   1e34c:	fff28313          	addi	t1,t0,-1 # ffff <_vfprintf_r+0x21a3>
   1e350:	006478b3          	and	a7,s0,t1
   1e354:	01045e93          	srli	t4,s0,0x10
   1e358:	0105de13          	srli	t3,a1,0x10
   1e35c:	0065f333          	and	t1,a1,t1
   1e360:	03130f33          	mul	t5,t1,a7
   1e364:	41f70733          	sub	a4,a4,t6
   1e368:	031e08b3          	mul	a7,t3,a7
   1e36c:	010f5793          	srli	a5,t5,0x10
   1e370:	026e8fb3          	mul	t6,t4,t1
   1e374:	01f888b3          	add	a7,a7,t6
   1e378:	011787b3          	add	a5,a5,a7
   1e37c:	03ce8eb3          	mul	t4,t4,t3
   1e380:	01f7f463          	bgeu	a5,t6,1e388 <__divdf3+0x3dc>
   1e384:	005e8eb3          	add	t4,t4,t0
   1e388:	00010fb7          	lui	t6,0x10
   1e38c:	ffff8f93          	addi	t6,t6,-1 # ffff <_vfprintf_r+0x21a3>
   1e390:	0107d893          	srli	a7,a5,0x10
   1e394:	01f7f7b3          	and	a5,a5,t6
   1e398:	01079793          	slli	a5,a5,0x10
   1e39c:	01ff7f33          	and	t5,t5,t6
   1e3a0:	01d888b3          	add	a7,a7,t4
   1e3a4:	01e787b3          	add	a5,a5,t5
   1e3a8:	19176063          	bltu	a4,a7,1e528 <__divdf3+0x57c>
   1e3ac:	17170c63          	beq	a4,a7,1e524 <__divdf3+0x578>
   1e3b0:	40fa07b3          	sub	a5,s4,a5
   1e3b4:	41170733          	sub	a4,a4,a7
   1e3b8:	00fa3a33          	sltu	s4,s4,a5
   1e3bc:	41470733          	sub	a4,a4,s4
   1e3c0:	2ee60263          	beq	a2,a4,1e6a4 <__divdf3+0x6f8>
   1e3c4:	02a758b3          	divu	a7,a4,a0
   1e3c8:	0107de93          	srli	t4,a5,0x10
   1e3cc:	02a77733          	remu	a4,a4,a0
   1e3d0:	03180f33          	mul	t5,a6,a7
   1e3d4:	01071713          	slli	a4,a4,0x10
   1e3d8:	00eee733          	or	a4,t4,a4
   1e3dc:	01e77e63          	bgeu	a4,t5,1e3f8 <__divdf3+0x44c>
   1e3e0:	00e60733          	add	a4,a2,a4
   1e3e4:	fff88e93          	addi	t4,a7,-1
   1e3e8:	2ec76c63          	bltu	a4,a2,1e6e0 <__divdf3+0x734>
   1e3ec:	2fe77a63          	bgeu	a4,t5,1e6e0 <__divdf3+0x734>
   1e3f0:	ffe88893          	addi	a7,a7,-2
   1e3f4:	00c70733          	add	a4,a4,a2
   1e3f8:	41e70733          	sub	a4,a4,t5
   1e3fc:	02a75eb3          	divu	t4,a4,a0
   1e400:	01079793          	slli	a5,a5,0x10
   1e404:	0107d793          	srli	a5,a5,0x10
   1e408:	02a77733          	remu	a4,a4,a0
   1e40c:	03d80833          	mul	a6,a6,t4
   1e410:	01071713          	slli	a4,a4,0x10
   1e414:	00e7e7b3          	or	a5,a5,a4
   1e418:	0107fe63          	bgeu	a5,a6,1e434 <__divdf3+0x488>
   1e41c:	00f607b3          	add	a5,a2,a5
   1e420:	fffe8713          	addi	a4,t4,-1
   1e424:	2ac7ea63          	bltu	a5,a2,1e6d8 <__divdf3+0x72c>
   1e428:	2b07f863          	bgeu	a5,a6,1e6d8 <__divdf3+0x72c>
   1e42c:	ffee8e93          	addi	t4,t4,-2
   1e430:	00c787b3          	add	a5,a5,a2
   1e434:	01089893          	slli	a7,a7,0x10
   1e438:	01d8e8b3          	or	a7,a7,t4
   1e43c:	01089513          	slli	a0,a7,0x10
   1e440:	0108df13          	srli	t5,a7,0x10
   1e444:	01055513          	srli	a0,a0,0x10
   1e448:	02650eb3          	mul	t4,a0,t1
   1e44c:	410787b3          	sub	a5,a5,a6
   1e450:	02ae0533          	mul	a0,t3,a0
   1e454:	010ed713          	srli	a4,t4,0x10
   1e458:	026f0333          	mul	t1,t5,t1
   1e45c:	00650533          	add	a0,a0,t1
   1e460:	00a70733          	add	a4,a4,a0
   1e464:	03ee0e33          	mul	t3,t3,t5
   1e468:	00677663          	bgeu	a4,t1,1e474 <__divdf3+0x4c8>
   1e46c:	00010537          	lui	a0,0x10
   1e470:	00ae0e33          	add	t3,t3,a0
   1e474:	00010837          	lui	a6,0x10
   1e478:	fff80813          	addi	a6,a6,-1 # ffff <_vfprintf_r+0x21a3>
   1e47c:	01075513          	srli	a0,a4,0x10
   1e480:	01077733          	and	a4,a4,a6
   1e484:	01071713          	slli	a4,a4,0x10
   1e488:	010efeb3          	and	t4,t4,a6
   1e48c:	01c50533          	add	a0,a0,t3
   1e490:	01d70733          	add	a4,a4,t4
   1e494:	12a7f463          	bgeu	a5,a0,1e5bc <__divdf3+0x610>
   1e498:	00f607b3          	add	a5,a2,a5
   1e49c:	fff88313          	addi	t1,a7,-1
   1e4a0:	00078813          	mv	a6,a5
   1e4a4:	1cc7e663          	bltu	a5,a2,1e670 <__divdf3+0x6c4>
   1e4a8:	24a7ea63          	bltu	a5,a0,1e6fc <__divdf3+0x750>
   1e4ac:	26a78863          	beq	a5,a0,1e71c <__divdf3+0x770>
   1e4b0:	00030893          	mv	a7,t1
   1e4b4:	0018e893          	ori	a7,a7,1
   1e4b8:	d49ff06f          	j	1e200 <__divdf3+0x254>
   1e4bc:	00100713          	li	a4,1
   1e4c0:	bc0798e3          	bnez	a5,1e090 <__divdf3+0xe4>
   1e4c4:	41e98793          	addi	a5,s3,1054
   1e4c8:	00f89633          	sll	a2,a7,a5
   1e4cc:	00c03633          	snez	a2,a2
   1e4d0:	00f417b3          	sll	a5,s0,a5
   1e4d4:	00f667b3          	or	a5,a2,a5
   1e4d8:	00e8d8b3          	srl	a7,a7,a4
   1e4dc:	00f8e8b3          	or	a7,a7,a5
   1e4e0:	0078f793          	andi	a5,a7,7
   1e4e4:	00e45433          	srl	s0,s0,a4
   1e4e8:	02078063          	beqz	a5,1e508 <__divdf3+0x55c>
   1e4ec:	00f8f793          	andi	a5,a7,15
   1e4f0:	00400713          	li	a4,4
   1e4f4:	00e78a63          	beq	a5,a4,1e508 <__divdf3+0x55c>
   1e4f8:	00488793          	addi	a5,a7,4
   1e4fc:	0117b8b3          	sltu	a7,a5,a7
   1e500:	01140433          	add	s0,s0,a7
   1e504:	00078893          	mv	a7,a5
   1e508:	008005b7          	lui	a1,0x800
   1e50c:	00b475b3          	and	a1,s0,a1
   1e510:	00100793          	li	a5,1
   1e514:	00000613          	li	a2,0
   1e518:	00000713          	li	a4,0
   1e51c:	b80596e3          	bnez	a1,1e0a8 <__divdf3+0xfc>
   1e520:	1340006f          	j	1e654 <__divdf3+0x6a8>
   1e524:	e8fa76e3          	bgeu	s4,a5,1e3b0 <__divdf3+0x404>
   1e528:	00ba0eb3          	add	t4,s4,a1
   1e52c:	014ebf33          	sltu	t5,t4,s4
   1e530:	00cf0fb3          	add	t6,t5,a2
   1e534:	01f70733          	add	a4,a4,t6
   1e538:	000e8a13          	mv	s4,t4
   1e53c:	fff40f93          	addi	t6,s0,-1
   1e540:	08e67463          	bgeu	a2,a4,1e5c8 <__divdf3+0x61c>
   1e544:	15176263          	bltu	a4,a7,1e688 <__divdf3+0x6dc>
   1e548:	12e88e63          	beq	a7,a4,1e684 <__divdf3+0x6d8>
   1e54c:	000f8413          	mv	s0,t6
   1e550:	e61ff06f          	j	1e3b0 <__divdf3+0x404>
   1e554:	d71a60e3          	bltu	s4,a7,1e2b4 <__divdf3+0x308>
   1e558:	001a5713          	srli	a4,s4,0x1
   1e55c:	01fb1313          	slli	t1,s6,0x1f
   1e560:	001b5793          	srli	a5,s6,0x1
   1e564:	00e36333          	or	t1,t1,a4
   1e568:	01fa1a13          	slli	s4,s4,0x1f
   1e56c:	d59ff06f          	j	1e2c4 <__divdf3+0x318>
   1e570:	9b5ff0ef          	jal	ra,1df24 <__clzsi2>
   1e574:	01550693          	addi	a3,a0,21 # 10015 <_vfprintf_r+0x21b9>
   1e578:	01c00793          	li	a5,28
   1e57c:	02050713          	addi	a4,a0,32
   1e580:	c0d7dae3          	bge	a5,a3,1e194 <__divdf3+0x1e8>
   1e584:	ff850793          	addi	a5,a0,-8
   1e588:	00f41b33          	sll	s6,s0,a5
   1e58c:	00000a13          	li	s4,0
   1e590:	c21ff06f          	j	1e1b0 <__divdf3+0x204>
   1e594:	000b8513          	mv	a0,s7
   1e598:	98dff0ef          	jal	ra,1df24 <__clzsi2>
   1e59c:	01550693          	addi	a3,a0,21
   1e5a0:	01c00713          	li	a4,28
   1e5a4:	02050793          	addi	a5,a0,32
   1e5a8:	bad752e3          	bge	a4,a3,1e14c <__divdf3+0x1a0>
   1e5ac:	ff850513          	addi	a0,a0,-8
   1e5b0:	00000893          	li	a7,0
   1e5b4:	00ab9433          	sll	s0,s7,a0
   1e5b8:	bb1ff06f          	j	1e168 <__divdf3+0x1bc>
   1e5bc:	eea79ce3          	bne	a5,a0,1e4b4 <__divdf3+0x508>
   1e5c0:	c40700e3          	beqz	a4,1e200 <__divdf3+0x254>
   1e5c4:	ed5ff06f          	j	1e498 <__divdf3+0x4ec>
   1e5c8:	f8e612e3          	bne	a2,a4,1e54c <__divdf3+0x5a0>
   1e5cc:	f60f0ce3          	beqz	t5,1e544 <__divdf3+0x598>
   1e5d0:	000f8413          	mv	s0,t6
   1e5d4:	dddff06f          	j	1e3b0 <__divdf3+0x404>
   1e5d8:	d7f772e3          	bgeu	a4,t6,1e33c <__divdf3+0x390>
   1e5dc:	ffe88893          	addi	a7,a7,-2
   1e5e0:	00c70733          	add	a4,a4,a2
   1e5e4:	d5dff06f          	j	1e340 <__divdf3+0x394>
   1e5e8:	d317f0e3          	bgeu	a5,a7,1e308 <__divdf3+0x35c>
   1e5ec:	ffe40413          	addi	s0,s0,-2
   1e5f0:	00c787b3          	add	a5,a5,a2
   1e5f4:	d19ff06f          	j	1e30c <__divdf3+0x360>
   1e5f8:	01f00613          	li	a2,31
   1e5fc:	ece654e3          	bge	a2,a4,1e4c4 <__divdf3+0x518>
   1e600:	fe100613          	li	a2,-31
   1e604:	40f60633          	sub	a2,a2,a5
   1e608:	02000793          	li	a5,32
   1e60c:	00c45633          	srl	a2,s0,a2
   1e610:	00f70863          	beq	a4,a5,1e620 <__divdf3+0x674>
   1e614:	43e98793          	addi	a5,s3,1086
   1e618:	00f417b3          	sll	a5,s0,a5
   1e61c:	00f8e8b3          	or	a7,a7,a5
   1e620:	011038b3          	snez	a7,a7
   1e624:	00c8e8b3          	or	a7,a7,a2
   1e628:	0078f713          	andi	a4,a7,7
   1e62c:	00000613          	li	a2,0
   1e630:	02070863          	beqz	a4,1e660 <__divdf3+0x6b4>
   1e634:	00f8f793          	andi	a5,a7,15
   1e638:	00400713          	li	a4,4
   1e63c:	00000413          	li	s0,0
   1e640:	00e78a63          	beq	a5,a4,1e654 <__divdf3+0x6a8>
   1e644:	00488793          	addi	a5,a7,4
   1e648:	0117b8b3          	sltu	a7,a5,a7
   1e64c:	01103433          	snez	s0,a7
   1e650:	00078893          	mv	a7,a5
   1e654:	00941613          	slli	a2,s0,0x9
   1e658:	01d41713          	slli	a4,s0,0x1d
   1e65c:	00c65613          	srli	a2,a2,0xc
   1e660:	0038d893          	srli	a7,a7,0x3
   1e664:	00e8e733          	or	a4,a7,a4
   1e668:	00000793          	li	a5,0
   1e66c:	a3dff06f          	j	1e0a8 <__divdf3+0xfc>
   1e670:	00030893          	mv	a7,t1
   1e674:	e4a810e3          	bne	a6,a0,1e4b4 <__divdf3+0x508>
   1e678:	b8b704e3          	beq	a4,a1,1e200 <__divdf3+0x254>
   1e67c:	0018e893          	ori	a7,a7,1
   1e680:	b81ff06f          	j	1e200 <__divdf3+0x254>
   1e684:	ecfef4e3          	bgeu	t4,a5,1e54c <__divdf3+0x5a0>
   1e688:	01d58eb3          	add	t4,a1,t4
   1e68c:	00bebf33          	sltu	t5,t4,a1
   1e690:	00cf0f33          	add	t5,t5,a2
   1e694:	ffe40413          	addi	s0,s0,-2
   1e698:	000e8a13          	mv	s4,t4
   1e69c:	01e70733          	add	a4,a4,t5
   1e6a0:	d11ff06f          	j	1e3b0 <__divdf3+0x404>
   1e6a4:	c0200713          	li	a4,-1022
   1e6a8:	3ff98793          	addi	a5,s3,1023
   1e6ac:	fff00893          	li	a7,-1
   1e6b0:	e0e9c6e3          	blt	s3,a4,1e4bc <__divdf3+0x510>
   1e6b4:	00488713          	addi	a4,a7,4
   1e6b8:	011738b3          	sltu	a7,a4,a7
   1e6bc:	01140433          	add	s0,s0,a7
   1e6c0:	00070893          	mv	a7,a4
   1e6c4:	b4dff06f          	j	1e210 <__divdf3+0x264>
   1e6c8:	00f8f713          	andi	a4,a7,15
   1e6cc:	00400613          	li	a2,4
   1e6d0:	b4c700e3          	beq	a4,a2,1e210 <__divdf3+0x264>
   1e6d4:	fe1ff06f          	j	1e6b4 <__divdf3+0x708>
   1e6d8:	00070e93          	mv	t4,a4
   1e6dc:	d59ff06f          	j	1e434 <__divdf3+0x488>
   1e6e0:	000e8893          	mv	a7,t4
   1e6e4:	d15ff06f          	j	1e3f8 <__divdf3+0x44c>
   1e6e8:	00090693          	mv	a3,s2
   1e6ec:	7ff00793          	li	a5,2047
   1e6f0:	00000613          	li	a2,0
   1e6f4:	00000713          	li	a4,0
   1e6f8:	9b1ff06f          	j	1e0a8 <__divdf3+0xfc>
   1e6fc:	00159313          	slli	t1,a1,0x1
   1e700:	00b33833          	sltu	a6,t1,a1
   1e704:	00c80833          	add	a6,a6,a2
   1e708:	01078833          	add	a6,a5,a6
   1e70c:	ffe88893          	addi	a7,a7,-2
   1e710:	00030593          	mv	a1,t1
   1e714:	f6a802e3          	beq	a6,a0,1e678 <__divdf3+0x6cc>
   1e718:	d9dff06f          	j	1e4b4 <__divdf3+0x508>
   1e71c:	fee5e0e3          	bltu	a1,a4,1e6fc <__divdf3+0x750>
   1e720:	00030893          	mv	a7,t1
   1e724:	f4b71ce3          	bne	a4,a1,1e67c <__divdf3+0x6d0>
   1e728:	ad9ff06f          	j	1e200 <__divdf3+0x254>

0001e72c <__muldf3>:
   1e72c:	fc010113          	addi	sp,sp,-64
   1e730:	0145d793          	srli	a5,a1,0x14
   1e734:	02812c23          	sw	s0,56(sp)
   1e738:	02912a23          	sw	s1,52(sp)
   1e73c:	03312623          	sw	s3,44(sp)
   1e740:	01812c23          	sw	s8,24(sp)
   1e744:	00c59493          	slli	s1,a1,0xc
   1e748:	02112e23          	sw	ra,60(sp)
   1e74c:	03212823          	sw	s2,48(sp)
   1e750:	03412423          	sw	s4,40(sp)
   1e754:	03512223          	sw	s5,36(sp)
   1e758:	03612023          	sw	s6,32(sp)
   1e75c:	01712e23          	sw	s7,28(sp)
   1e760:	7ff7f793          	andi	a5,a5,2047
   1e764:	00050413          	mv	s0,a0
   1e768:	00060c13          	mv	s8,a2
   1e76c:	00c4d493          	srli	s1,s1,0xc
   1e770:	01f5d993          	srli	s3,a1,0x1f
   1e774:	1e078663          	beqz	a5,1e960 <__muldf3+0x234>
   1e778:	7ff00813          	li	a6,2047
   1e77c:	23078c63          	beq	a5,a6,1e9b4 <__muldf3+0x288>
   1e780:	00349493          	slli	s1,s1,0x3
   1e784:	01d55593          	srli	a1,a0,0x1d
   1e788:	0095e5b3          	or	a1,a1,s1
   1e78c:	008004b7          	lui	s1,0x800
   1e790:	0095e4b3          	or	s1,a1,s1
   1e794:	00351a13          	slli	s4,a0,0x3
   1e798:	c0178b93          	addi	s7,a5,-1023
   1e79c:	00000b13          	li	s6,0
   1e7a0:	00000a93          	li	s5,0
   1e7a4:	0146d793          	srli	a5,a3,0x14
   1e7a8:	00c69813          	slli	a6,a3,0xc
   1e7ac:	7ff7f793          	andi	a5,a5,2047
   1e7b0:	000c0e93          	mv	t4,s8
   1e7b4:	00c85413          	srli	s0,a6,0xc
   1e7b8:	01f6d913          	srli	s2,a3,0x1f
   1e7bc:	14078863          	beqz	a5,1e90c <__muldf3+0x1e0>
   1e7c0:	7ff00813          	li	a6,2047
   1e7c4:	0b078a63          	beq	a5,a6,1e878 <__muldf3+0x14c>
   1e7c8:	00341693          	slli	a3,s0,0x3
   1e7cc:	c0178793          	addi	a5,a5,-1023
   1e7d0:	01dc5593          	srli	a1,s8,0x1d
   1e7d4:	00d5e5b3          	or	a1,a1,a3
   1e7d8:	01778e33          	add	t3,a5,s7
   1e7dc:	008006b7          	lui	a3,0x800
   1e7e0:	00a00793          	li	a5,10
   1e7e4:	00d5e433          	or	s0,a1,a3
   1e7e8:	003c1e93          	slli	t4,s8,0x3
   1e7ec:	00000513          	li	a0,0
   1e7f0:	001e0313          	addi	t1,t3,1
   1e7f4:	2367c663          	blt	a5,s6,1ea20 <__muldf3+0x2f4>
   1e7f8:	0129c833          	xor	a6,s3,s2
   1e7fc:	00080693          	mv	a3,a6
   1e800:	00200613          	li	a2,2
   1e804:	0b664263          	blt	a2,s6,1e8a8 <__muldf3+0x17c>
   1e808:	fffb0893          	addi	a7,s6,-1
   1e80c:	00100593          	li	a1,1
   1e810:	2715ec63          	bltu	a1,a7,1ea88 <__muldf3+0x35c>
   1e814:	1ac50e63          	beq	a0,a2,1e9d0 <__muldf3+0x2a4>
   1e818:	00100793          	li	a5,1
   1e81c:	00068813          	mv	a6,a3
   1e820:	0cf51063          	bne	a0,a5,1e8e0 <__muldf3+0x1b4>
   1e824:	00000793          	li	a5,0
   1e828:	00000693          	li	a3,0
   1e82c:	00000713          	li	a4,0
   1e830:	03c12083          	lw	ra,60(sp)
   1e834:	03812403          	lw	s0,56(sp)
   1e838:	01479793          	slli	a5,a5,0x14
   1e83c:	00d7e7b3          	or	a5,a5,a3
   1e840:	01f81813          	slli	a6,a6,0x1f
   1e844:	0107e7b3          	or	a5,a5,a6
   1e848:	03412483          	lw	s1,52(sp)
   1e84c:	03012903          	lw	s2,48(sp)
   1e850:	02c12983          	lw	s3,44(sp)
   1e854:	02812a03          	lw	s4,40(sp)
   1e858:	02412a83          	lw	s5,36(sp)
   1e85c:	02012b03          	lw	s6,32(sp)
   1e860:	01c12b83          	lw	s7,28(sp)
   1e864:	01812c03          	lw	s8,24(sp)
   1e868:	00070513          	mv	a0,a4
   1e86c:	00078593          	mv	a1,a5
   1e870:	04010113          	addi	sp,sp,64
   1e874:	00008067          	ret
   1e878:	01846733          	or	a4,s0,s8
   1e87c:	7ffb8e13          	addi	t3,s7,2047
   1e880:	16070a63          	beqz	a4,1e9f4 <__muldf3+0x2c8>
   1e884:	00001737          	lui	a4,0x1
   1e888:	0129c833          	xor	a6,s3,s2
   1e88c:	80070713          	addi	a4,a4,-2048 # 800 <prvInitialiseNewTask+0x290>
   1e890:	003b6b13          	ori	s6,s6,3
   1e894:	00a00613          	li	a2,10
   1e898:	00080693          	mv	a3,a6
   1e89c:	00eb8333          	add	t1,s7,a4
   1e8a0:	59664463          	blt	a2,s6,1ee28 <__muldf3+0x6fc>
   1e8a4:	00300513          	li	a0,3
   1e8a8:	00100613          	li	a2,1
   1e8ac:	01661633          	sll	a2,a2,s6
   1e8b0:	53067713          	andi	a4,a2,1328
   1e8b4:	02070a63          	beqz	a4,1e8e8 <__muldf3+0x1bc>
   1e8b8:	00200793          	li	a5,2
   1e8bc:	10fa8a63          	beq	s5,a5,1e9d0 <__muldf3+0x2a4>
   1e8c0:	00300793          	li	a5,3
   1e8c4:	1afa8863          	beq	s5,a5,1ea74 <__muldf3+0x348>
   1e8c8:	000a8513          	mv	a0,s5
   1e8cc:	00100793          	li	a5,1
   1e8d0:	00048413          	mv	s0,s1
   1e8d4:	000a0e93          	mv	t4,s4
   1e8d8:	00068813          	mv	a6,a3
   1e8dc:	f4f504e3          	beq	a0,a5,1e824 <__muldf3+0xf8>
   1e8e0:	00030e13          	mv	t3,t1
   1e8e4:	36c0006f          	j	1ec50 <__muldf3+0x524>
   1e8e8:	24067793          	andi	a5,a2,576
   1e8ec:	0e079c63          	bnez	a5,1e9e4 <__muldf3+0x2b8>
   1e8f0:	08867613          	andi	a2,a2,136
   1e8f4:	18060a63          	beqz	a2,1ea88 <__muldf3+0x35c>
   1e8f8:	00090693          	mv	a3,s2
   1e8fc:	00040493          	mv	s1,s0
   1e900:	000e8a13          	mv	s4,t4
   1e904:	00050a93          	mv	s5,a0
   1e908:	fb1ff06f          	j	1e8b8 <__muldf3+0x18c>
   1e90c:	018467b3          	or	a5,s0,s8
   1e910:	14078063          	beqz	a5,1ea50 <__muldf3+0x324>
   1e914:	42040c63          	beqz	s0,1ed4c <__muldf3+0x620>
   1e918:	00040513          	mv	a0,s0
   1e91c:	e08ff0ef          	jal	ra,1df24 <__clzsi2>
   1e920:	00050e13          	mv	t3,a0
   1e924:	ff550713          	addi	a4,a0,-11
   1e928:	01d00793          	li	a5,29
   1e92c:	ff8e0e93          	addi	t4,t3,-8
   1e930:	40e787b3          	sub	a5,a5,a4
   1e934:	01d416b3          	sll	a3,s0,t4
   1e938:	00fc57b3          	srl	a5,s8,a5
   1e93c:	00d7e433          	or	s0,a5,a3
   1e940:	01dc1eb3          	sll	t4,s8,t4
   1e944:	41cb8e33          	sub	t3,s7,t3
   1e948:	c0de0e13          	addi	t3,t3,-1011
   1e94c:	00a00793          	li	a5,10
   1e950:	00000513          	li	a0,0
   1e954:	001e0313          	addi	t1,t3,1
   1e958:	eb67d0e3          	bge	a5,s6,1e7f8 <__muldf3+0xcc>
   1e95c:	0c40006f          	j	1ea20 <__muldf3+0x2f4>
   1e960:	00a4ea33          	or	s4,s1,a0
   1e964:	0c0a0c63          	beqz	s4,1ea3c <__muldf3+0x310>
   1e968:	00d12623          	sw	a3,12(sp)
   1e96c:	3a048c63          	beqz	s1,1ed24 <__muldf3+0x5f8>
   1e970:	00048513          	mv	a0,s1
   1e974:	db0ff0ef          	jal	ra,1df24 <__clzsi2>
   1e978:	00c12683          	lw	a3,12(sp)
   1e97c:	00050713          	mv	a4,a0
   1e980:	ff550613          	addi	a2,a0,-11
   1e984:	01d00793          	li	a5,29
   1e988:	ff870a13          	addi	s4,a4,-8
   1e98c:	40c787b3          	sub	a5,a5,a2
   1e990:	014494b3          	sll	s1,s1,s4
   1e994:	00f457b3          	srl	a5,s0,a5
   1e998:	0097e4b3          	or	s1,a5,s1
   1e99c:	01441a33          	sll	s4,s0,s4
   1e9a0:	c0d00793          	li	a5,-1011
   1e9a4:	40e78bb3          	sub	s7,a5,a4
   1e9a8:	00000b13          	li	s6,0
   1e9ac:	00000a93          	li	s5,0
   1e9b0:	df5ff06f          	j	1e7a4 <__muldf3+0x78>
   1e9b4:	00a4ea33          	or	s4,s1,a0
   1e9b8:	060a1863          	bnez	s4,1ea28 <__muldf3+0x2fc>
   1e9bc:	00000493          	li	s1,0
   1e9c0:	00800b13          	li	s6,8
   1e9c4:	7ff00b93          	li	s7,2047
   1e9c8:	00200a93          	li	s5,2
   1e9cc:	dd9ff06f          	j	1e7a4 <__muldf3+0x78>
   1e9d0:	00068813          	mv	a6,a3
   1e9d4:	7ff00793          	li	a5,2047
   1e9d8:	00000693          	li	a3,0
   1e9dc:	00000713          	li	a4,0
   1e9e0:	e51ff06f          	j	1e830 <__muldf3+0x104>
   1e9e4:	00000813          	li	a6,0
   1e9e8:	7ff00793          	li	a5,2047
   1e9ec:	000806b7          	lui	a3,0x80
   1e9f0:	e41ff06f          	j	1e830 <__muldf3+0x104>
   1e9f4:	000017b7          	lui	a5,0x1
   1e9f8:	80078793          	addi	a5,a5,-2048 # 800 <prvInitialiseNewTask+0x290>
   1e9fc:	002b6b13          	ori	s6,s6,2
   1ea00:	00a00693          	li	a3,10
   1ea04:	00fb8333          	add	t1,s7,a5
   1ea08:	3766de63          	bge	a3,s6,1ed84 <__muldf3+0x658>
   1ea0c:	00000e93          	li	t4,0
   1ea10:	00e00793          	li	a5,14
   1ea14:	00200513          	li	a0,2
   1ea18:	00b00693          	li	a3,11
   1ea1c:	40d78263          	beq	a5,a3,1ee20 <__muldf3+0x6f4>
   1ea20:	00098693          	mv	a3,s3
   1ea24:	e95ff06f          	j	1e8b8 <__muldf3+0x18c>
   1ea28:	00050a13          	mv	s4,a0
   1ea2c:	00c00b13          	li	s6,12
   1ea30:	7ff00b93          	li	s7,2047
   1ea34:	00300a93          	li	s5,3
   1ea38:	d6dff06f          	j	1e7a4 <__muldf3+0x78>
   1ea3c:	00000493          	li	s1,0
   1ea40:	00400b13          	li	s6,4
   1ea44:	00000b93          	li	s7,0
   1ea48:	00100a93          	li	s5,1
   1ea4c:	d59ff06f          	j	1e7a4 <__muldf3+0x78>
   1ea50:	000b8e13          	mv	t3,s7
   1ea54:	001b6b13          	ori	s6,s6,1
   1ea58:	00a00793          	li	a5,10
   1ea5c:	00000413          	li	s0,0
   1ea60:	00000e93          	li	t4,0
   1ea64:	00100513          	li	a0,1
   1ea68:	001e0313          	addi	t1,t3,1
   1ea6c:	d967d6e3          	bge	a5,s6,1e7f8 <__muldf3+0xcc>
   1ea70:	fb1ff06f          	j	1ea20 <__muldf3+0x2f4>
   1ea74:	00000813          	li	a6,0
   1ea78:	7ff00793          	li	a5,2047
   1ea7c:	000806b7          	lui	a3,0x80
   1ea80:	00000713          	li	a4,0
   1ea84:	dadff06f          	j	1e830 <__muldf3+0x104>
   1ea88:	000105b7          	lui	a1,0x10
   1ea8c:	fff58713          	addi	a4,a1,-1 # ffff <_vfprintf_r+0x21a3>
   1ea90:	010a5793          	srli	a5,s4,0x10
   1ea94:	010ed893          	srli	a7,t4,0x10
   1ea98:	00ea7a33          	and	s4,s4,a4
   1ea9c:	00eefeb3          	and	t4,t4,a4
   1eaa0:	03da0733          	mul	a4,s4,t4
   1eaa4:	03d78633          	mul	a2,a5,t4
   1eaa8:	01075513          	srli	a0,a4,0x10
   1eaac:	034886b3          	mul	a3,a7,s4
   1eab0:	00c686b3          	add	a3,a3,a2
   1eab4:	00d50533          	add	a0,a0,a3
   1eab8:	03178f33          	mul	t5,a5,a7
   1eabc:	00c57463          	bgeu	a0,a2,1eac4 <__muldf3+0x398>
   1eac0:	00bf0f33          	add	t5,t5,a1
   1eac4:	000103b7          	lui	t2,0x10
   1eac8:	fff38613          	addi	a2,t2,-1 # ffff <_vfprintf_r+0x21a3>
   1eacc:	00c575b3          	and	a1,a0,a2
   1ead0:	00c476b3          	and	a3,s0,a2
   1ead4:	00c77733          	and	a4,a4,a2
   1ead8:	01045f93          	srli	t6,s0,0x10
   1eadc:	01059593          	slli	a1,a1,0x10
   1eae0:	02da02b3          	mul	t0,s4,a3
   1eae4:	00e585b3          	add	a1,a1,a4
   1eae8:	01055513          	srli	a0,a0,0x10
   1eaec:	02d78733          	mul	a4,a5,a3
   1eaf0:	0102d613          	srli	a2,t0,0x10
   1eaf4:	034f8a33          	mul	s4,t6,s4
   1eaf8:	00ea0a33          	add	s4,s4,a4
   1eafc:	01460633          	add	a2,a2,s4
   1eb00:	03f787b3          	mul	a5,a5,t6
   1eb04:	00e67463          	bgeu	a2,a4,1eb0c <__muldf3+0x3e0>
   1eb08:	007787b3          	add	a5,a5,t2
   1eb0c:	00010937          	lui	s2,0x10
   1eb10:	fff90413          	addi	s0,s2,-1 # ffff <_vfprintf_r+0x21a3>
   1eb14:	00867733          	and	a4,a2,s0
   1eb18:	0104d393          	srli	t2,s1,0x10
   1eb1c:	0082f2b3          	and	t0,t0,s0
   1eb20:	0084f4b3          	and	s1,s1,s0
   1eb24:	01071713          	slli	a4,a4,0x10
   1eb28:	029e8433          	mul	s0,t4,s1
   1eb2c:	00570733          	add	a4,a4,t0
   1eb30:	01065613          	srli	a2,a2,0x10
   1eb34:	00f60633          	add	a2,a2,a5
   1eb38:	00e50533          	add	a0,a0,a4
   1eb3c:	029882b3          	mul	t0,a7,s1
   1eb40:	01045793          	srli	a5,s0,0x10
   1eb44:	03d38eb3          	mul	t4,t2,t4
   1eb48:	01d282b3          	add	t0,t0,t4
   1eb4c:	005787b3          	add	a5,a5,t0
   1eb50:	027888b3          	mul	a7,a7,t2
   1eb54:	01d7f463          	bgeu	a5,t4,1eb5c <__muldf3+0x430>
   1eb58:	012888b3          	add	a7,a7,s2
   1eb5c:	00010937          	lui	s2,0x10
   1eb60:	fff90e93          	addi	t4,s2,-1 # ffff <_vfprintf_r+0x21a3>
   1eb64:	01d7f2b3          	and	t0,a5,t4
   1eb68:	01d47eb3          	and	t4,s0,t4
   1eb6c:	01029293          	slli	t0,t0,0x10
   1eb70:	0107d793          	srli	a5,a5,0x10
   1eb74:	011787b3          	add	a5,a5,a7
   1eb78:	02968433          	mul	s0,a3,s1
   1eb7c:	01d288b3          	add	a7,t0,t4
   1eb80:	02d386b3          	mul	a3,t2,a3
   1eb84:	01045293          	srli	t0,s0,0x10
   1eb88:	029f84b3          	mul	s1,t6,s1
   1eb8c:	00d484b3          	add	s1,s1,a3
   1eb90:	009282b3          	add	t0,t0,s1
   1eb94:	027f8eb3          	mul	t4,t6,t2
   1eb98:	00d2f463          	bgeu	t0,a3,1eba0 <__muldf3+0x474>
   1eb9c:	012e8eb3          	add	t4,t4,s2
   1eba0:	00010fb7          	lui	t6,0x10
   1eba4:	ffff8f93          	addi	t6,t6,-1 # ffff <_vfprintf_r+0x21a3>
   1eba8:	01f2f6b3          	and	a3,t0,t6
   1ebac:	01f47433          	and	s0,s0,t6
   1ebb0:	01069693          	slli	a3,a3,0x10
   1ebb4:	01e50533          	add	a0,a0,t5
   1ebb8:	008686b3          	add	a3,a3,s0
   1ebbc:	00c68633          	add	a2,a3,a2
   1ebc0:	00e53733          	sltu	a4,a0,a4
   1ebc4:	00e60733          	add	a4,a2,a4
   1ebc8:	011508b3          	add	a7,a0,a7
   1ebcc:	00f707b3          	add	a5,a4,a5
   1ebd0:	00a8b533          	sltu	a0,a7,a0
   1ebd4:	00a78533          	add	a0,a5,a0
   1ebd8:	00d636b3          	sltu	a3,a2,a3
   1ebdc:	00c73633          	sltu	a2,a4,a2
   1ebe0:	00c6e6b3          	or	a3,a3,a2
   1ebe4:	00e7b733          	sltu	a4,a5,a4
   1ebe8:	0102d613          	srli	a2,t0,0x10
   1ebec:	00f537b3          	sltu	a5,a0,a5
   1ebf0:	00f76733          	or	a4,a4,a5
   1ebf4:	00c686b3          	add	a3,a3,a2
   1ebf8:	00d70733          	add	a4,a4,a3
   1ebfc:	01d70733          	add	a4,a4,t4
   1ec00:	00989e93          	slli	t4,a7,0x9
   1ec04:	01755793          	srli	a5,a0,0x17
   1ec08:	00971713          	slli	a4,a4,0x9
   1ec0c:	00beeeb3          	or	t4,t4,a1
   1ec10:	00f76433          	or	s0,a4,a5
   1ec14:	01d03eb3          	snez	t4,t4
   1ec18:	0178d793          	srli	a5,a7,0x17
   1ec1c:	00feeeb3          	or	t4,t4,a5
   1ec20:	010007b7          	lui	a5,0x1000
   1ec24:	00951513          	slli	a0,a0,0x9
   1ec28:	00f477b3          	and	a5,s0,a5
   1ec2c:	00aeeeb3          	or	t4,t4,a0
   1ec30:	02078063          	beqz	a5,1ec50 <__muldf3+0x524>
   1ec34:	001ed793          	srli	a5,t4,0x1
   1ec38:	001efe93          	andi	t4,t4,1
   1ec3c:	01f41713          	slli	a4,s0,0x1f
   1ec40:	01d7e7b3          	or	a5,a5,t4
   1ec44:	00e7eeb3          	or	t4,a5,a4
   1ec48:	00145413          	srli	s0,s0,0x1
   1ec4c:	00030e13          	mv	t3,t1
   1ec50:	3ffe0793          	addi	a5,t3,1023
   1ec54:	06f05463          	blez	a5,1ecbc <__muldf3+0x590>
   1ec58:	007ef713          	andi	a4,t4,7
   1ec5c:	02070063          	beqz	a4,1ec7c <__muldf3+0x550>
   1ec60:	00fef713          	andi	a4,t4,15
   1ec64:	00400693          	li	a3,4
   1ec68:	00d70a63          	beq	a4,a3,1ec7c <__muldf3+0x550>
   1ec6c:	004e8713          	addi	a4,t4,4
   1ec70:	01d73eb3          	sltu	t4,a4,t4
   1ec74:	01d40433          	add	s0,s0,t4
   1ec78:	00070e93          	mv	t4,a4
   1ec7c:	01000737          	lui	a4,0x1000
   1ec80:	00e47733          	and	a4,s0,a4
   1ec84:	00070a63          	beqz	a4,1ec98 <__muldf3+0x56c>
   1ec88:	ff0007b7          	lui	a5,0xff000
   1ec8c:	fff78793          	addi	a5,a5,-1 # feffffff <__alt_data_end+0xfefbffff>
   1ec90:	00f47433          	and	s0,s0,a5
   1ec94:	400e0793          	addi	a5,t3,1024
   1ec98:	7fe00713          	li	a4,2046
   1ec9c:	0cf74c63          	blt	a4,a5,1ed74 <__muldf3+0x648>
   1eca0:	003ede93          	srli	t4,t4,0x3
   1eca4:	01d41713          	slli	a4,s0,0x1d
   1eca8:	00941693          	slli	a3,s0,0x9
   1ecac:	01d76733          	or	a4,a4,t4
   1ecb0:	00c6d693          	srli	a3,a3,0xc
   1ecb4:	7ff7f793          	andi	a5,a5,2047
   1ecb8:	b79ff06f          	j	1e830 <__muldf3+0x104>
   1ecbc:	00100713          	li	a4,1
   1ecc0:	0c079e63          	bnez	a5,1ed9c <__muldf3+0x670>
   1ecc4:	41ee0e13          	addi	t3,t3,1054
   1ecc8:	01ce9633          	sll	a2,t4,t3
   1eccc:	00c03633          	snez	a2,a2
   1ecd0:	01c41e33          	sll	t3,s0,t3
   1ecd4:	00eedeb3          	srl	t4,t4,a4
   1ecd8:	01c66633          	or	a2,a2,t3
   1ecdc:	01d66633          	or	a2,a2,t4
   1ece0:	00767793          	andi	a5,a2,7
   1ece4:	00e455b3          	srl	a1,s0,a4
   1ece8:	02078063          	beqz	a5,1ed08 <__muldf3+0x5dc>
   1ecec:	00f67793          	andi	a5,a2,15
   1ecf0:	00400713          	li	a4,4
   1ecf4:	00e78a63          	beq	a5,a4,1ed08 <__muldf3+0x5dc>
   1ecf8:	00460793          	addi	a5,a2,4 # 80004 <__alt_data_end+0x40004>
   1ecfc:	00c7b633          	sltu	a2,a5,a2
   1ed00:	00c585b3          	add	a1,a1,a2
   1ed04:	00078613          	mv	a2,a5
   1ed08:	00800537          	lui	a0,0x800
   1ed0c:	00a5f533          	and	a0,a1,a0
   1ed10:	00100793          	li	a5,1
   1ed14:	00000693          	li	a3,0
   1ed18:	00000713          	li	a4,0
   1ed1c:	b0051ae3          	bnez	a0,1e830 <__muldf3+0x104>
   1ed20:	0e40006f          	j	1ee04 <__muldf3+0x6d8>
   1ed24:	a00ff0ef          	jal	ra,1df24 <__clzsi2>
   1ed28:	01550613          	addi	a2,a0,21 # 800015 <__alt_data_end+0x7c0015>
   1ed2c:	01c00793          	li	a5,28
   1ed30:	00c12683          	lw	a3,12(sp)
   1ed34:	02050713          	addi	a4,a0,32
   1ed38:	c4c7d6e3          	bge	a5,a2,1e984 <__muldf3+0x258>
   1ed3c:	ff850513          	addi	a0,a0,-8
   1ed40:	00000a13          	li	s4,0
   1ed44:	00a414b3          	sll	s1,s0,a0
   1ed48:	c59ff06f          	j	1e9a0 <__muldf3+0x274>
   1ed4c:	000c0513          	mv	a0,s8
   1ed50:	9d4ff0ef          	jal	ra,1df24 <__clzsi2>
   1ed54:	01550713          	addi	a4,a0,21
   1ed58:	01c00793          	li	a5,28
   1ed5c:	02050e13          	addi	t3,a0,32
   1ed60:	bce7d4e3          	bge	a5,a4,1e928 <__muldf3+0x1fc>
   1ed64:	ff850513          	addi	a0,a0,-8
   1ed68:	00000e93          	li	t4,0
   1ed6c:	00ac1433          	sll	s0,s8,a0
   1ed70:	bd5ff06f          	j	1e944 <__muldf3+0x218>
   1ed74:	7ff00793          	li	a5,2047
   1ed78:	00000693          	li	a3,0
   1ed7c:	00000713          	li	a4,0
   1ed80:	ab1ff06f          	j	1e830 <__muldf3+0x104>
   1ed84:	0129c833          	xor	a6,s3,s2
   1ed88:	00080693          	mv	a3,a6
   1ed8c:	00000413          	li	s0,0
   1ed90:	00000e93          	li	t4,0
   1ed94:	00200513          	li	a0,2
   1ed98:	a69ff06f          	j	1e800 <__muldf3+0xd4>
   1ed9c:	40f70733          	sub	a4,a4,a5
   1eda0:	03800693          	li	a3,56
   1eda4:	a8e6c0e3          	blt	a3,a4,1e824 <__muldf3+0xf8>
   1eda8:	01f00693          	li	a3,31
   1edac:	f0e6dce3          	bge	a3,a4,1ecc4 <__muldf3+0x598>
   1edb0:	fe100693          	li	a3,-31
   1edb4:	40f687b3          	sub	a5,a3,a5
   1edb8:	02000693          	li	a3,32
   1edbc:	00f457b3          	srl	a5,s0,a5
   1edc0:	00d70863          	beq	a4,a3,1edd0 <__muldf3+0x6a4>
   1edc4:	43ee0e13          	addi	t3,t3,1086
   1edc8:	01c41e33          	sll	t3,s0,t3
   1edcc:	01ceeeb3          	or	t4,t4,t3
   1edd0:	01d03633          	snez	a2,t4
   1edd4:	00f66633          	or	a2,a2,a5
   1edd8:	00767713          	andi	a4,a2,7
   1eddc:	00000693          	li	a3,0
   1ede0:	02070863          	beqz	a4,1ee10 <__muldf3+0x6e4>
   1ede4:	00f67793          	andi	a5,a2,15
   1ede8:	00400713          	li	a4,4
   1edec:	00000593          	li	a1,0
   1edf0:	00e78a63          	beq	a5,a4,1ee04 <__muldf3+0x6d8>
   1edf4:	00460793          	addi	a5,a2,4
   1edf8:	00c7b633          	sltu	a2,a5,a2
   1edfc:	00c035b3          	snez	a1,a2
   1ee00:	00078613          	mv	a2,a5
   1ee04:	00959693          	slli	a3,a1,0x9
   1ee08:	01d59713          	slli	a4,a1,0x1d
   1ee0c:	00c6d693          	srli	a3,a3,0xc
   1ee10:	00365613          	srli	a2,a2,0x3
   1ee14:	00e66733          	or	a4,a2,a4
   1ee18:	00000793          	li	a5,0
   1ee1c:	a15ff06f          	j	1e830 <__muldf3+0x104>
   1ee20:	00070413          	mv	s0,a4
   1ee24:	ad5ff06f          	j	1e8f8 <__muldf3+0x1cc>
   1ee28:	00f00713          	li	a4,15
   1ee2c:	00eb1a63          	bne	s6,a4,1ee40 <__muldf3+0x714>
   1ee30:	00000813          	li	a6,0
   1ee34:	000806b7          	lui	a3,0x80
   1ee38:	00000713          	li	a4,0
   1ee3c:	9f5ff06f          	j	1e830 <__muldf3+0x104>
   1ee40:	00040713          	mv	a4,s0
   1ee44:	00b00793          	li	a5,11
   1ee48:	00300513          	li	a0,3
   1ee4c:	bcdff06f          	j	1ea18 <__muldf3+0x2ec>

0001ee50 <__eqtf2>:
   1ee50:	00c52703          	lw	a4,12(a0)
   1ee54:	00c5a683          	lw	a3,12(a1)
   1ee58:	000087b7          	lui	a5,0x8
   1ee5c:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   1ee60:	01075613          	srli	a2,a4,0x10
   1ee64:	0106d813          	srli	a6,a3,0x10
   1ee68:	01071293          	slli	t0,a4,0x10
   1ee6c:	01069393          	slli	t2,a3,0x10
   1ee70:	00f67633          	and	a2,a2,a5
   1ee74:	00052883          	lw	a7,0(a0)
   1ee78:	00452e03          	lw	t3,4(a0)
   1ee7c:	00852f03          	lw	t5,8(a0)
   1ee80:	0005a303          	lw	t1,0(a1)
   1ee84:	0045ae83          	lw	t4,4(a1)
   1ee88:	0085af83          	lw	t6,8(a1)
   1ee8c:	ff010113          	addi	sp,sp,-16
   1ee90:	0102d293          	srli	t0,t0,0x10
   1ee94:	01f75713          	srli	a4,a4,0x1f
   1ee98:	0103d393          	srli	t2,t2,0x10
   1ee9c:	00f875b3          	and	a1,a6,a5
   1eea0:	01f6d693          	srli	a3,a3,0x1f
   1eea4:	00100513          	li	a0,1
   1eea8:	00f60c63          	beq	a2,a5,1eec0 <__eqtf2+0x70>
   1eeac:	00f58663          	beq	a1,a5,1eeb8 <__eqtf2+0x68>
   1eeb0:	00c59463          	bne	a1,a2,1eeb8 <__eqtf2+0x68>
   1eeb4:	02688e63          	beq	a7,t1,1eef0 <__eqtf2+0xa0>
   1eeb8:	01010113          	addi	sp,sp,16
   1eebc:	00008067          	ret
   1eec0:	fec59ce3          	bne	a1,a2,1eeb8 <__eqtf2+0x68>
   1eec4:	01c8e7b3          	or	a5,a7,t3
   1eec8:	01e7e7b3          	or	a5,a5,t5
   1eecc:	0057e7b3          	or	a5,a5,t0
   1eed0:	0067e7b3          	or	a5,a5,t1
   1eed4:	01d7e7b3          	or	a5,a5,t4
   1eed8:	01f7e7b3          	or	a5,a5,t6
   1eedc:	0077e7b3          	or	a5,a5,t2
   1eee0:	fc079ce3          	bnez	a5,1eeb8 <__eqtf2+0x68>
   1eee4:	40d70733          	sub	a4,a4,a3
   1eee8:	00e03533          	snez	a0,a4
   1eeec:	fcdff06f          	j	1eeb8 <__eqtf2+0x68>
   1eef0:	fdde14e3          	bne	t3,t4,1eeb8 <__eqtf2+0x68>
   1eef4:	fdff12e3          	bne	t5,t6,1eeb8 <__eqtf2+0x68>
   1eef8:	fc7290e3          	bne	t0,t2,1eeb8 <__eqtf2+0x68>
   1eefc:	00d70e63          	beq	a4,a3,1ef18 <__eqtf2+0xc8>
   1ef00:	fa059ce3          	bnez	a1,1eeb8 <__eqtf2+0x68>
   1ef04:	01c8e7b3          	or	a5,a7,t3
   1ef08:	01e7e7b3          	or	a5,a5,t5
   1ef0c:	0057e7b3          	or	a5,a5,t0
   1ef10:	00f03533          	snez	a0,a5
   1ef14:	fa5ff06f          	j	1eeb8 <__eqtf2+0x68>
   1ef18:	00000513          	li	a0,0
   1ef1c:	f9dff06f          	j	1eeb8 <__eqtf2+0x68>

0001ef20 <__getf2>:
   1ef20:	00c52303          	lw	t1,12(a0)
   1ef24:	00c5a883          	lw	a7,12(a1)
   1ef28:	000087b7          	lui	a5,0x8
   1ef2c:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   1ef30:	01035693          	srli	a3,t1,0x10
   1ef34:	01031f13          	slli	t5,t1,0x10
   1ef38:	0005a703          	lw	a4,0(a1)
   1ef3c:	0045ae83          	lw	t4,4(a1)
   1ef40:	0085ae03          	lw	t3,8(a1)
   1ef44:	0108d613          	srli	a2,a7,0x10
   1ef48:	01089593          	slli	a1,a7,0x10
   1ef4c:	00f6f6b3          	and	a3,a3,a5
   1ef50:	00052283          	lw	t0,0(a0)
   1ef54:	00452803          	lw	a6,4(a0)
   1ef58:	00852f83          	lw	t6,8(a0)
   1ef5c:	ff010113          	addi	sp,sp,-16
   1ef60:	010f5f13          	srli	t5,t5,0x10
   1ef64:	01f35313          	srli	t1,t1,0x1f
   1ef68:	0105d593          	srli	a1,a1,0x10
   1ef6c:	00f67633          	and	a2,a2,a5
   1ef70:	01f8d513          	srli	a0,a7,0x1f
   1ef74:	0af68263          	beq	a3,a5,1f018 <__getf2+0xf8>
   1ef78:	02f60c63          	beq	a2,a5,1efb0 <__getf2+0x90>
   1ef7c:	0c069463          	bnez	a3,1f044 <__getf2+0x124>
   1ef80:	005867b3          	or	a5,a6,t0
   1ef84:	01f7e7b3          	or	a5,a5,t6
   1ef88:	01e7e7b3          	or	a5,a5,t5
   1ef8c:	04061a63          	bnez	a2,1efe0 <__getf2+0xc0>
   1ef90:	01d768b3          	or	a7,a4,t4
   1ef94:	01c8e8b3          	or	a7,a7,t3
   1ef98:	00b8e8b3          	or	a7,a7,a1
   1ef9c:	04089263          	bnez	a7,1efe0 <__getf2+0xc0>
   1efa0:	00000513          	li	a0,0
   1efa4:	08079463          	bnez	a5,1f02c <__getf2+0x10c>
   1efa8:	01010113          	addi	sp,sp,16
   1efac:	00008067          	ret
   1efb0:	01d76733          	or	a4,a4,t4
   1efb4:	01c76733          	or	a4,a4,t3
   1efb8:	00b76733          	or	a4,a4,a1
   1efbc:	0a071a63          	bnez	a4,1f070 <__getf2+0x150>
   1efc0:	06069e63          	bnez	a3,1f03c <__getf2+0x11c>
   1efc4:	00586833          	or	a6,a6,t0
   1efc8:	01f86833          	or	a6,a6,t6
   1efcc:	01e86833          	or	a6,a6,t5
   1efd0:	06081663          	bnez	a6,1f03c <__getf2+0x11c>
   1efd4:	06050063          	beqz	a0,1f034 <__getf2+0x114>
   1efd8:	01010113          	addi	sp,sp,16
   1efdc:	00008067          	ret
   1efe0:	fe078ae3          	beqz	a5,1efd4 <__getf2+0xb4>
   1efe4:	04651463          	bne	a0,t1,1f02c <__getf2+0x10c>
   1efe8:	02c6c263          	blt	a3,a2,1f00c <__getf2+0xec>
   1efec:	05e5e063          	bltu	a1,t5,1f02c <__getf2+0x10c>
   1eff0:	00bf1e63          	bne	t5,a1,1f00c <__getf2+0xec>
   1eff4:	03fe6c63          	bltu	t3,t6,1f02c <__getf2+0x10c>
   1eff8:	01cf9a63          	bne	t6,t3,1f00c <__getf2+0xec>
   1effc:	030ee863          	bltu	t4,a6,1f02c <__getf2+0x10c>
   1f000:	01d81663          	bne	a6,t4,1f00c <__getf2+0xec>
   1f004:	02576463          	bltu	a4,t0,1f02c <__getf2+0x10c>
   1f008:	06e2f063          	bgeu	t0,a4,1f068 <__getf2+0x148>
   1f00c:	02030463          	beqz	t1,1f034 <__getf2+0x114>
   1f010:	00030513          	mv	a0,t1
   1f014:	fc5ff06f          	j	1efd8 <__getf2+0xb8>
   1f018:	00586833          	or	a6,a6,t0
   1f01c:	01f86833          	or	a6,a6,t6
   1f020:	01e86833          	or	a6,a6,t5
   1f024:	04081663          	bnez	a6,1f070 <__getf2+0x150>
   1f028:	02d60663          	beq	a2,a3,1f054 <__getf2+0x134>
   1f02c:	00100513          	li	a0,1
   1f030:	fa0304e3          	beqz	t1,1efd8 <__getf2+0xb8>
   1f034:	fff00513          	li	a0,-1
   1f038:	fa1ff06f          	j	1efd8 <__getf2+0xb8>
   1f03c:	fe6518e3          	bne	a0,t1,1f02c <__getf2+0x10c>
   1f040:	fcdff06f          	j	1f00c <__getf2+0xec>
   1f044:	fe0604e3          	beqz	a2,1f02c <__getf2+0x10c>
   1f048:	fe6512e3          	bne	a0,t1,1f02c <__getf2+0x10c>
   1f04c:	f8d65ee3          	bge	a2,a3,1efe8 <__getf2+0xc8>
   1f050:	fddff06f          	j	1f02c <__getf2+0x10c>
   1f054:	01d76733          	or	a4,a4,t4
   1f058:	01c76733          	or	a4,a4,t3
   1f05c:	00b76733          	or	a4,a4,a1
   1f060:	00071863          	bnez	a4,1f070 <__getf2+0x150>
   1f064:	fc6514e3          	bne	a0,t1,1f02c <__getf2+0x10c>
   1f068:	00000513          	li	a0,0
   1f06c:	f6dff06f          	j	1efd8 <__getf2+0xb8>
   1f070:	ffe00513          	li	a0,-2
   1f074:	f65ff06f          	j	1efd8 <__getf2+0xb8>

0001f078 <__letf2>:
   1f078:	00c52303          	lw	t1,12(a0)
   1f07c:	00c5a883          	lw	a7,12(a1)
   1f080:	000087b7          	lui	a5,0x8
   1f084:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   1f088:	01035713          	srli	a4,t1,0x10
   1f08c:	01031f13          	slli	t5,t1,0x10
   1f090:	0005a683          	lw	a3,0(a1)
   1f094:	0045ae83          	lw	t4,4(a1)
   1f098:	0085ae03          	lw	t3,8(a1)
   1f09c:	0108d613          	srli	a2,a7,0x10
   1f0a0:	01089593          	slli	a1,a7,0x10
   1f0a4:	00f77733          	and	a4,a4,a5
   1f0a8:	00052283          	lw	t0,0(a0)
   1f0ac:	00452803          	lw	a6,4(a0)
   1f0b0:	00852f83          	lw	t6,8(a0)
   1f0b4:	ff010113          	addi	sp,sp,-16
   1f0b8:	010f5f13          	srli	t5,t5,0x10
   1f0bc:	01f35313          	srli	t1,t1,0x1f
   1f0c0:	0105d593          	srli	a1,a1,0x10
   1f0c4:	00f67633          	and	a2,a2,a5
   1f0c8:	01f8d513          	srli	a0,a7,0x1f
   1f0cc:	06f70a63          	beq	a4,a5,1f140 <__letf2+0xc8>
   1f0d0:	04f60063          	beq	a2,a5,1f110 <__letf2+0x98>
   1f0d4:	0c071a63          	bnez	a4,1f1a8 <__letf2+0x130>
   1f0d8:	005867b3          	or	a5,a6,t0
   1f0dc:	01f7e7b3          	or	a5,a5,t6
   1f0e0:	01e7e7b3          	or	a5,a5,t5
   1f0e4:	08061663          	bnez	a2,1f170 <__letf2+0xf8>
   1f0e8:	01d6e8b3          	or	a7,a3,t4
   1f0ec:	01c8e8b3          	or	a7,a7,t3
   1f0f0:	00b8e8b3          	or	a7,a7,a1
   1f0f4:	06089e63          	bnez	a7,1f170 <__letf2+0xf8>
   1f0f8:	00000513          	li	a0,0
   1f0fc:	06078663          	beqz	a5,1f168 <__letf2+0xf0>
   1f100:	00100513          	li	a0,1
   1f104:	06030263          	beqz	t1,1f168 <__letf2+0xf0>
   1f108:	fff00513          	li	a0,-1
   1f10c:	05c0006f          	j	1f168 <__letf2+0xf0>
   1f110:	01d6e6b3          	or	a3,a3,t4
   1f114:	01c6e6b3          	or	a3,a3,t3
   1f118:	00b6e6b3          	or	a3,a3,a1
   1f11c:	04069463          	bnez	a3,1f164 <__letf2+0xec>
   1f120:	08071c63          	bnez	a4,1f1b8 <__letf2+0x140>
   1f124:	00586833          	or	a6,a6,t0
   1f128:	01f86833          	or	a6,a6,t6
   1f12c:	01e86833          	or	a6,a6,t5
   1f130:	08081463          	bnez	a6,1f1b8 <__letf2+0x140>
   1f134:	fc050ae3          	beqz	a0,1f108 <__letf2+0x90>
   1f138:	01010113          	addi	sp,sp,16
   1f13c:	00008067          	ret
   1f140:	00586833          	or	a6,a6,t0
   1f144:	01f86833          	or	a6,a6,t6
   1f148:	01e86833          	or	a6,a6,t5
   1f14c:	00081c63          	bnez	a6,1f164 <__letf2+0xec>
   1f150:	fae618e3          	bne	a2,a4,1f100 <__letf2+0x88>
   1f154:	01d6e6b3          	or	a3,a3,t4
   1f158:	01c6e6b3          	or	a3,a3,t3
   1f15c:	00b6e6b3          	or	a3,a3,a1
   1f160:	06068063          	beqz	a3,1f1c0 <__letf2+0x148>
   1f164:	00200513          	li	a0,2
   1f168:	01010113          	addi	sp,sp,16
   1f16c:	00008067          	ret
   1f170:	fc0782e3          	beqz	a5,1f134 <__letf2+0xbc>
   1f174:	f86516e3          	bne	a0,t1,1f100 <__letf2+0x88>
   1f178:	02c74263          	blt	a4,a2,1f19c <__letf2+0x124>
   1f17c:	f9e5e2e3          	bltu	a1,t5,1f100 <__letf2+0x88>
   1f180:	00bf1e63          	bne	t5,a1,1f19c <__letf2+0x124>
   1f184:	f7fe6ee3          	bltu	t3,t6,1f100 <__letf2+0x88>
   1f188:	01cf9a63          	bne	t6,t3,1f19c <__letf2+0x124>
   1f18c:	f70eeae3          	bltu	t4,a6,1f100 <__letf2+0x88>
   1f190:	01d81663          	bne	a6,t4,1f19c <__letf2+0x124>
   1f194:	f656e6e3          	bltu	a3,t0,1f100 <__letf2+0x88>
   1f198:	02d2f663          	bgeu	t0,a3,1f1c4 <__letf2+0x14c>
   1f19c:	f60306e3          	beqz	t1,1f108 <__letf2+0x90>
   1f1a0:	00030513          	mv	a0,t1
   1f1a4:	fc5ff06f          	j	1f168 <__letf2+0xf0>
   1f1a8:	f4060ce3          	beqz	a2,1f100 <__letf2+0x88>
   1f1ac:	f4651ae3          	bne	a0,t1,1f100 <__letf2+0x88>
   1f1b0:	fce654e3          	bge	a2,a4,1f178 <__letf2+0x100>
   1f1b4:	f4dff06f          	j	1f100 <__letf2+0x88>
   1f1b8:	f46514e3          	bne	a0,t1,1f100 <__letf2+0x88>
   1f1bc:	fe1ff06f          	j	1f19c <__letf2+0x124>
   1f1c0:	f46510e3          	bne	a0,t1,1f100 <__letf2+0x88>
   1f1c4:	00000513          	li	a0,0
   1f1c8:	fa1ff06f          	j	1f168 <__letf2+0xf0>

0001f1cc <__multf3>:
   1f1cc:	00c5a683          	lw	a3,12(a1)
   1f1d0:	f4010113          	addi	sp,sp,-192
   1f1d4:	0045a803          	lw	a6,4(a1)
   1f1d8:	0b212823          	sw	s2,176(sp)
   1f1dc:	0005a903          	lw	s2,0(a1)
   1f1e0:	0085a583          	lw	a1,8(a1)
   1f1e4:	01069793          	slli	a5,a3,0x10
   1f1e8:	00008737          	lui	a4,0x8
   1f1ec:	0a912a23          	sw	s1,180(sp)
   1f1f0:	0107d793          	srli	a5,a5,0x10
   1f1f4:	0106d493          	srli	s1,a3,0x10
   1f1f8:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   1f1fc:	0a812c23          	sw	s0,184(sp)
   1f200:	0b312623          	sw	s3,172(sp)
   1f204:	0b412423          	sw	s4,168(sp)
   1f208:	0b512223          	sw	s5,164(sp)
   1f20c:	0b612023          	sw	s6,160(sp)
   1f210:	09712e23          	sw	s7,156(sp)
   1f214:	0a112e23          	sw	ra,188(sp)
   1f218:	09812c23          	sw	s8,152(sp)
   1f21c:	09912a23          	sw	s9,148(sp)
   1f220:	09a12823          	sw	s10,144(sp)
   1f224:	09b12623          	sw	s11,140(sp)
   1f228:	07212023          	sw	s2,96(sp)
   1f22c:	07012223          	sw	a6,100(sp)
   1f230:	06b12423          	sw	a1,104(sp)
   1f234:	06d12623          	sw	a3,108(sp)
   1f238:	03212823          	sw	s2,48(sp)
   1f23c:	03012a23          	sw	a6,52(sp)
   1f240:	02b12c23          	sw	a1,56(sp)
   1f244:	02f12e23          	sw	a5,60(sp)
   1f248:	00e4f4b3          	and	s1,s1,a4
   1f24c:	00062a83          	lw	s5,0(a2)
   1f250:	00462b83          	lw	s7,4(a2)
   1f254:	00862b03          	lw	s6,8(a2)
   1f258:	00c62983          	lw	s3,12(a2)
   1f25c:	00050413          	mv	s0,a0
   1f260:	01f6da13          	srli	s4,a3,0x1f
   1f264:	36048863          	beqz	s1,1f5d4 <__multf3+0x408>
   1f268:	44e48a63          	beq	s1,a4,1f6bc <__multf3+0x4f0>
   1f26c:	00010737          	lui	a4,0x10
   1f270:	00e7e7b3          	or	a5,a5,a4
   1f274:	02f12e23          	sw	a5,60(sp)
   1f278:	03010593          	addi	a1,sp,48
   1f27c:	03c10713          	addi	a4,sp,60
   1f280:	00379613          	slli	a2,a5,0x3
   1f284:	ffc72783          	lw	a5,-4(a4) # fffc <_vfprintf_r+0x21a0>
   1f288:	ffc70713          	addi	a4,a4,-4
   1f28c:	01d7d693          	srli	a3,a5,0x1d
   1f290:	00c6e6b3          	or	a3,a3,a2
   1f294:	00d72223          	sw	a3,4(a4)
   1f298:	fee594e3          	bne	a1,a4,1f280 <__multf3+0xb4>
   1f29c:	03012783          	lw	a5,48(sp)
   1f2a0:	00000913          	li	s2,0
   1f2a4:	00000c13          	li	s8,0
   1f2a8:	00379793          	slli	a5,a5,0x3
   1f2ac:	02f12823          	sw	a5,48(sp)
   1f2b0:	ffffc7b7          	lui	a5,0xffffc
   1f2b4:	00178793          	addi	a5,a5,1 # ffffc001 <__alt_data_end+0xfffbc001>
   1f2b8:	00f484b3          	add	s1,s1,a5
   1f2bc:	01099513          	slli	a0,s3,0x10
   1f2c0:	00008637          	lui	a2,0x8
   1f2c4:	0109d793          	srli	a5,s3,0x10
   1f2c8:	01055513          	srli	a0,a0,0x10
   1f2cc:	fff60713          	addi	a4,a2,-1 # 7fff <__malloc_lock+0x67>
   1f2d0:	07312623          	sw	s3,108(sp)
   1f2d4:	07512023          	sw	s5,96(sp)
   1f2d8:	07712223          	sw	s7,100(sp)
   1f2dc:	07612423          	sw	s6,104(sp)
   1f2e0:	05512023          	sw	s5,64(sp)
   1f2e4:	05712223          	sw	s7,68(sp)
   1f2e8:	05612423          	sw	s6,72(sp)
   1f2ec:	04a12623          	sw	a0,76(sp)
   1f2f0:	00e7f7b3          	and	a5,a5,a4
   1f2f4:	01f9d993          	srli	s3,s3,0x1f
   1f2f8:	1e078c63          	beqz	a5,1f4f0 <__multf3+0x324>
   1f2fc:	12e78a63          	beq	a5,a4,1f430 <__multf3+0x264>
   1f300:	00010737          	lui	a4,0x10
   1f304:	00e56533          	or	a0,a0,a4
   1f308:	04a12623          	sw	a0,76(sp)
   1f30c:	04010593          	addi	a1,sp,64
   1f310:	04c10713          	addi	a4,sp,76
   1f314:	00351613          	slli	a2,a0,0x3
   1f318:	ffc72503          	lw	a0,-4(a4) # fffc <_vfprintf_r+0x21a0>
   1f31c:	ffc70713          	addi	a4,a4,-4
   1f320:	01d55693          	srli	a3,a0,0x1d
   1f324:	00c6e6b3          	or	a3,a3,a2
   1f328:	00d72223          	sw	a3,4(a4)
   1f32c:	fee594e3          	bne	a1,a4,1f314 <__multf3+0x148>
   1f330:	04012683          	lw	a3,64(sp)
   1f334:	ffffc737          	lui	a4,0xffffc
   1f338:	00170713          	addi	a4,a4,1 # ffffc001 <__alt_data_end+0xfffbc001>
   1f33c:	00369693          	slli	a3,a3,0x3
   1f340:	00e787b3          	add	a5,a5,a4
   1f344:	04d12023          	sw	a3,64(sp)
   1f348:	009787b3          	add	a5,a5,s1
   1f34c:	00000613          	li	a2,0
   1f350:	00178693          	addi	a3,a5,1
   1f354:	00a00713          	li	a4,10
   1f358:	00d12623          	sw	a3,12(sp)
   1f35c:	11274c63          	blt	a4,s2,1f474 <__multf3+0x2a8>
   1f360:	013a4733          	xor	a4,s4,s3
   1f364:	00070a13          	mv	s4,a4
   1f368:	00200593          	li	a1,2
   1f36c:	0f25cc63          	blt	a1,s2,1f464 <__multf3+0x298>
   1f370:	fff90913          	addi	s2,s2,-1
   1f374:	00100593          	li	a1,1
   1f378:	4b25e863          	bltu	a1,s2,1f828 <__multf3+0x65c>
   1f37c:	04412703          	lw	a4,68(sp)
   1f380:	04c12783          	lw	a5,76(sp)
   1f384:	04e12a23          	sw	a4,84(sp)
   1f388:	04012703          	lw	a4,64(sp)
   1f38c:	04f12e23          	sw	a5,92(sp)
   1f390:	00200793          	li	a5,2
   1f394:	04e12823          	sw	a4,80(sp)
   1f398:	04812703          	lw	a4,72(sp)
   1f39c:	04e12c23          	sw	a4,88(sp)
   1f3a0:	10f60063          	beq	a2,a5,1f4a0 <__multf3+0x2d4>
   1f3a4:	00300793          	li	a5,3
   1f3a8:	12f60463          	beq	a2,a5,1f4d0 <__multf3+0x304>
   1f3ac:	00100793          	li	a5,1
   1f3b0:	000a0713          	mv	a4,s4
   1f3b4:	32f61c63          	bne	a2,a5,1f6ec <__multf3+0x520>
   1f3b8:	00000793          	li	a5,0
   1f3bc:	00000693          	li	a3,0
   1f3c0:	00000613          	li	a2,0
   1f3c4:	00000593          	li	a1,0
   1f3c8:	00000513          	li	a0,0
   1f3cc:	00f71713          	slli	a4,a4,0xf
   1f3d0:	00e7e7b3          	or	a5,a5,a4
   1f3d4:	06d11623          	sh	a3,108(sp)
   1f3d8:	06f11723          	sh	a5,110(sp)
   1f3dc:	06c12783          	lw	a5,108(sp)
   1f3e0:	00a42023          	sw	a0,0(s0)
   1f3e4:	0bc12083          	lw	ra,188(sp)
   1f3e8:	00b42223          	sw	a1,4(s0)
   1f3ec:	00c42423          	sw	a2,8(s0)
   1f3f0:	00f42623          	sw	a5,12(s0)
   1f3f4:	00040513          	mv	a0,s0
   1f3f8:	0b812403          	lw	s0,184(sp)
   1f3fc:	0b412483          	lw	s1,180(sp)
   1f400:	0b012903          	lw	s2,176(sp)
   1f404:	0ac12983          	lw	s3,172(sp)
   1f408:	0a812a03          	lw	s4,168(sp)
   1f40c:	0a412a83          	lw	s5,164(sp)
   1f410:	0a012b03          	lw	s6,160(sp)
   1f414:	09c12b83          	lw	s7,156(sp)
   1f418:	09812c03          	lw	s8,152(sp)
   1f41c:	09412c83          	lw	s9,148(sp)
   1f420:	09012d03          	lw	s10,144(sp)
   1f424:	08c12d83          	lw	s11,140(sp)
   1f428:	0c010113          	addi	sp,sp,192
   1f42c:	00008067          	ret
   1f430:	017aeab3          	or	s5,s5,s7
   1f434:	016aeab3          	or	s5,s5,s6
   1f438:	00aaeab3          	or	s5,s5,a0
   1f43c:	00f487b3          	add	a5,s1,a5
   1f440:	3c0a8263          	beqz	s5,1f804 <__multf3+0x638>
   1f444:	00c48633          	add	a2,s1,a2
   1f448:	013a4733          	xor	a4,s4,s3
   1f44c:	00396913          	ori	s2,s2,3
   1f450:	00a00693          	li	a3,10
   1f454:	00c12623          	sw	a2,12(sp)
   1f458:	00070a13          	mv	s4,a4
   1f45c:	2726ce63          	blt	a3,s2,1f6d8 <__multf3+0x50c>
   1f460:	00300613          	li	a2,3
   1f464:	00100693          	li	a3,1
   1f468:	012696b3          	sll	a3,a3,s2
   1f46c:	5306f593          	andi	a1,a3,1328
   1f470:	04058863          	beqz	a1,1f4c0 <__multf3+0x2f4>
   1f474:	03412703          	lw	a4,52(sp)
   1f478:	03c12783          	lw	a5,60(sp)
   1f47c:	000c0613          	mv	a2,s8
   1f480:	04e12a23          	sw	a4,84(sp)
   1f484:	03012703          	lw	a4,48(sp)
   1f488:	04f12e23          	sw	a5,92(sp)
   1f48c:	00200793          	li	a5,2
   1f490:	04e12823          	sw	a4,80(sp)
   1f494:	03812703          	lw	a4,56(sp)
   1f498:	04e12c23          	sw	a4,88(sp)
   1f49c:	f0f614e3          	bne	a2,a5,1f3a4 <__multf3+0x1d8>
   1f4a0:	000087b7          	lui	a5,0x8
   1f4a4:	000a0713          	mv	a4,s4
   1f4a8:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   1f4ac:	00000693          	li	a3,0
   1f4b0:	00000613          	li	a2,0
   1f4b4:	00000593          	li	a1,0
   1f4b8:	00000513          	li	a0,0
   1f4bc:	f11ff06f          	j	1f3cc <__multf3+0x200>
   1f4c0:	0886f593          	andi	a1,a3,136
   1f4c4:	22059063          	bnez	a1,1f6e4 <__multf3+0x518>
   1f4c8:	2406f693          	andi	a3,a3,576
   1f4cc:	34068e63          	beqz	a3,1f828 <__multf3+0x65c>
   1f4d0:	000087b7          	lui	a5,0x8
   1f4d4:	00000713          	li	a4,0
   1f4d8:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   1f4dc:	000086b7          	lui	a3,0x8
   1f4e0:	00000613          	li	a2,0
   1f4e4:	00000593          	li	a1,0
   1f4e8:	00000513          	li	a0,0
   1f4ec:	ee1ff06f          	j	1f3cc <__multf3+0x200>
   1f4f0:	017ae7b3          	or	a5,s5,s7
   1f4f4:	0167e7b3          	or	a5,a5,s6
   1f4f8:	00a7e7b3          	or	a5,a5,a0
   1f4fc:	2e078463          	beqz	a5,1f7e4 <__multf3+0x618>
   1f500:	420506e3          	beqz	a0,2012c <__multf3+0xf60>
   1f504:	a21fe0ef          	jal	ra,1df24 <__clzsi2>
   1f508:	ff450813          	addi	a6,a0,-12
   1f50c:	02000313          	li	t1,32
   1f510:	41030333          	sub	t1,t1,a6
   1f514:	00000613          	li	a2,0
   1f518:	40c008b3          	neg	a7,a2
   1f51c:	00289893          	slli	a7,a7,0x2
   1f520:	04010693          	addi	a3,sp,64
   1f524:	01168733          	add	a4,a3,a7
   1f528:	00300593          	li	a1,3
   1f52c:	411008b3          	neg	a7,a7
   1f530:	00c72783          	lw	a5,12(a4)
   1f534:	00872e03          	lw	t3,8(a4)
   1f538:	01170eb3          	add	t4,a4,a7
   1f53c:	010797b3          	sll	a5,a5,a6
   1f540:	006e5e33          	srl	t3,t3,t1
   1f544:	01c7e7b3          	or	a5,a5,t3
   1f548:	00fea623          	sw	a5,12(t4)
   1f54c:	fff58593          	addi	a1,a1,-1
   1f550:	ffc70713          	addi	a4,a4,-4
   1f554:	fcb64ee3          	blt	a2,a1,1f530 <__multf3+0x364>
   1f558:	00200713          	li	a4,2
   1f55c:	00300793          	li	a5,3
   1f560:	52c758e3          	bge	a4,a2,20290 <__multf3+0x10c4>
   1f564:	00261613          	slli	a2,a2,0x2
   1f568:	05060713          	addi	a4,a2,80
   1f56c:	03010613          	addi	a2,sp,48
   1f570:	00c70633          	add	a2,a4,a2
   1f574:	04012703          	lw	a4,64(sp)
   1f578:	ffe78793          	addi	a5,a5,-2
   1f57c:	01071733          	sll	a4,a4,a6
   1f580:	fce62023          	sw	a4,-64(a2)
   1f584:	fff00713          	li	a4,-1
   1f588:	02e78a63          	beq	a5,a4,1f5bc <__multf3+0x3f0>
   1f58c:	00178793          	addi	a5,a5,1
   1f590:	00279793          	slli	a5,a5,0x2
   1f594:	00800613          	li	a2,8
   1f598:	00068713          	mv	a4,a3
   1f59c:	00c7ea63          	bltu	a5,a2,1f5b0 <__multf3+0x3e4>
   1f5a0:	04012023          	sw	zero,64(sp)
   1f5a4:	0006a223          	sw	zero,4(a3) # 8004 <__malloc_lock+0x6c>
   1f5a8:	ff878793          	addi	a5,a5,-8
   1f5ac:	04810713          	addi	a4,sp,72
   1f5b0:	00400693          	li	a3,4
   1f5b4:	00d7e463          	bltu	a5,a3,1f5bc <__multf3+0x3f0>
   1f5b8:	00072023          	sw	zero,0(a4)
   1f5bc:	ffffc7b7          	lui	a5,0xffffc
   1f5c0:	01178793          	addi	a5,a5,17 # ffffc011 <__alt_data_end+0xfffbc011>
   1f5c4:	40a787b3          	sub	a5,a5,a0
   1f5c8:	009787b3          	add	a5,a5,s1
   1f5cc:	00000613          	li	a2,0
   1f5d0:	d81ff06f          	j	1f350 <__multf3+0x184>
   1f5d4:	01096733          	or	a4,s2,a6
   1f5d8:	00b76733          	or	a4,a4,a1
   1f5dc:	00f76733          	or	a4,a4,a5
   1f5e0:	20070a63          	beqz	a4,1f7f4 <__multf3+0x628>
   1f5e4:	3a0782e3          	beqz	a5,20188 <__multf3+0xfbc>
   1f5e8:	00078513          	mv	a0,a5
   1f5ec:	939fe0ef          	jal	ra,1df24 <__clzsi2>
   1f5f0:	ff450813          	addi	a6,a0,-12
   1f5f4:	02000313          	li	t1,32
   1f5f8:	41030333          	sub	t1,t1,a6
   1f5fc:	00000613          	li	a2,0
   1f600:	40c008b3          	neg	a7,a2
   1f604:	00289893          	slli	a7,a7,0x2
   1f608:	03010693          	addi	a3,sp,48
   1f60c:	01168733          	add	a4,a3,a7
   1f610:	00300593          	li	a1,3
   1f614:	411008b3          	neg	a7,a7
   1f618:	00c72783          	lw	a5,12(a4)
   1f61c:	00872e03          	lw	t3,8(a4)
   1f620:	01170eb3          	add	t4,a4,a7
   1f624:	010797b3          	sll	a5,a5,a6
   1f628:	006e5e33          	srl	t3,t3,t1
   1f62c:	01c7e7b3          	or	a5,a5,t3
   1f630:	00fea623          	sw	a5,12(t4)
   1f634:	fff58593          	addi	a1,a1,-1
   1f638:	ffc70713          	addi	a4,a4,-4
   1f63c:	fcb64ee3          	blt	a2,a1,1f618 <__multf3+0x44c>
   1f640:	00200713          	li	a4,2
   1f644:	00300793          	li	a5,3
   1f648:	44c750e3          	bge	a4,a2,20288 <__multf3+0x10bc>
   1f64c:	00261613          	slli	a2,a2,0x2
   1f650:	05060713          	addi	a4,a2,80
   1f654:	03010613          	addi	a2,sp,48
   1f658:	00c70633          	add	a2,a4,a2
   1f65c:	03012703          	lw	a4,48(sp)
   1f660:	ffe78793          	addi	a5,a5,-2
   1f664:	01071733          	sll	a4,a4,a6
   1f668:	fae62823          	sw	a4,-80(a2)
   1f66c:	fff00713          	li	a4,-1
   1f670:	02e78a63          	beq	a5,a4,1f6a4 <__multf3+0x4d8>
   1f674:	00178793          	addi	a5,a5,1
   1f678:	00279793          	slli	a5,a5,0x2
   1f67c:	00800613          	li	a2,8
   1f680:	00068713          	mv	a4,a3
   1f684:	00c7ea63          	bltu	a5,a2,1f698 <__multf3+0x4cc>
   1f688:	02012823          	sw	zero,48(sp)
   1f68c:	0006a223          	sw	zero,4(a3)
   1f690:	ff878793          	addi	a5,a5,-8
   1f694:	03810713          	addi	a4,sp,56
   1f698:	00400693          	li	a3,4
   1f69c:	00d7e463          	bltu	a5,a3,1f6a4 <__multf3+0x4d8>
   1f6a0:	00072023          	sw	zero,0(a4)
   1f6a4:	ffffc4b7          	lui	s1,0xffffc
   1f6a8:	01148493          	addi	s1,s1,17 # ffffc011 <__alt_data_end+0xfffbc011>
   1f6ac:	40a484b3          	sub	s1,s1,a0
   1f6b0:	00000913          	li	s2,0
   1f6b4:	00000c13          	li	s8,0
   1f6b8:	c05ff06f          	j	1f2bc <__multf3+0xf0>
   1f6bc:	01096933          	or	s2,s2,a6
   1f6c0:	00b96933          	or	s2,s2,a1
   1f6c4:	00f96933          	or	s2,s2,a5
   1f6c8:	10091863          	bnez	s2,1f7d8 <__multf3+0x60c>
   1f6cc:	00800913          	li	s2,8
   1f6d0:	00200c13          	li	s8,2
   1f6d4:	be9ff06f          	j	1f2bc <__multf3+0xf0>
   1f6d8:	00f00793          	li	a5,15
   1f6dc:	00300613          	li	a2,3
   1f6e0:	def908e3          	beq	s2,a5,1f4d0 <__multf3+0x304>
   1f6e4:	00098a13          	mv	s4,s3
   1f6e8:	c95ff06f          	j	1f37c <__multf3+0x1b0>
   1f6ec:	00c12783          	lw	a5,12(sp)
   1f6f0:	000046b7          	lui	a3,0x4
   1f6f4:	fff68693          	addi	a3,a3,-1 # 3fff <xTaskPriorityDisinherit+0x16f>
   1f6f8:	00d786b3          	add	a3,a5,a3
   1f6fc:	0cd056e3          	blez	a3,1ffc8 <__multf3+0xdfc>
   1f700:	05012583          	lw	a1,80(sp)
   1f704:	05c12603          	lw	a2,92(sp)
   1f708:	0075f513          	andi	a0,a1,7
   1f70c:	04050263          	beqz	a0,1f750 <__multf3+0x584>
   1f710:	00f5f513          	andi	a0,a1,15
   1f714:	00400813          	li	a6,4
   1f718:	03050c63          	beq	a0,a6,1f750 <__multf3+0x584>
   1f71c:	05412803          	lw	a6,84(sp)
   1f720:	00458593          	addi	a1,a1,4
   1f724:	05812883          	lw	a7,88(sp)
   1f728:	0045b513          	sltiu	a0,a1,4
   1f72c:	01050833          	add	a6,a0,a6
   1f730:	00a83533          	sltu	a0,a6,a0
   1f734:	00a88533          	add	a0,a7,a0
   1f738:	011538b3          	sltu	a7,a0,a7
   1f73c:	01160633          	add	a2,a2,a7
   1f740:	04b12823          	sw	a1,80(sp)
   1f744:	05012a23          	sw	a6,84(sp)
   1f748:	04a12c23          	sw	a0,88(sp)
   1f74c:	04c12e23          	sw	a2,92(sp)
   1f750:	001005b7          	lui	a1,0x100
   1f754:	00b675b3          	and	a1,a2,a1
   1f758:	00058e63          	beqz	a1,1f774 <__multf3+0x5a8>
   1f75c:	fff006b7          	lui	a3,0xfff00
   1f760:	fff68693          	addi	a3,a3,-1 # ffefffff <__alt_data_end+0xffebffff>
   1f764:	00d67633          	and	a2,a2,a3
   1f768:	000046b7          	lui	a3,0x4
   1f76c:	04c12e23          	sw	a2,92(sp)
   1f770:	00d786b3          	add	a3,a5,a3
   1f774:	05012583          	lw	a1,80(sp)
   1f778:	05010793          	addi	a5,sp,80
   1f77c:	05c10813          	addi	a6,sp,92
   1f780:	0035d513          	srli	a0,a1,0x3
   1f784:	0047a583          	lw	a1,4(a5)
   1f788:	00478793          	addi	a5,a5,4
   1f78c:	01d59613          	slli	a2,a1,0x1d
   1f790:	00a66633          	or	a2,a2,a0
   1f794:	fec7ae23          	sw	a2,-4(a5)
   1f798:	ff0794e3          	bne	a5,a6,1f780 <__multf3+0x5b4>
   1f79c:	000087b7          	lui	a5,0x8
   1f7a0:	ffe78613          	addi	a2,a5,-2 # 7ffe <__malloc_lock+0x66>
   1f7a4:	fff78793          	addi	a5,a5,-1
   1f7a8:	c0d64ae3          	blt	a2,a3,1f3bc <__multf3+0x1f0>
   1f7ac:	00f6f7b3          	and	a5,a3,a5
   1f7b0:	05c12683          	lw	a3,92(sp)
   1f7b4:	01079793          	slli	a5,a5,0x10
   1f7b8:	05012503          	lw	a0,80(sp)
   1f7bc:	0036d693          	srli	a3,a3,0x3
   1f7c0:	01069693          	slli	a3,a3,0x10
   1f7c4:	05412583          	lw	a1,84(sp)
   1f7c8:	05812603          	lw	a2,88(sp)
   1f7cc:	0106d693          	srli	a3,a3,0x10
   1f7d0:	0107d793          	srli	a5,a5,0x10
   1f7d4:	bf9ff06f          	j	1f3cc <__multf3+0x200>
   1f7d8:	00c00913          	li	s2,12
   1f7dc:	00300c13          	li	s8,3
   1f7e0:	addff06f          	j	1f2bc <__multf3+0xf0>
   1f7e4:	00196913          	ori	s2,s2,1
   1f7e8:	00048793          	mv	a5,s1
   1f7ec:	00100613          	li	a2,1
   1f7f0:	b61ff06f          	j	1f350 <__multf3+0x184>
   1f7f4:	00400913          	li	s2,4
   1f7f8:	00000493          	li	s1,0
   1f7fc:	00100c13          	li	s8,1
   1f800:	abdff06f          	j	1f2bc <__multf3+0xf0>
   1f804:	00c486b3          	add	a3,s1,a2
   1f808:	00296913          	ori	s2,s2,2
   1f80c:	00a00713          	li	a4,10
   1f810:	00d12623          	sw	a3,12(sp)
   1f814:	c72740e3          	blt	a4,s2,1f474 <__multf3+0x2a8>
   1f818:	013a4733          	xor	a4,s4,s3
   1f81c:	00070a13          	mv	s4,a4
   1f820:	00200613          	li	a2,2
   1f824:	b45ff06f          	j	1f368 <__multf3+0x19c>
   1f828:	03012303          	lw	t1,48(sp)
   1f82c:	04012f83          	lw	t6,64(sp)
   1f830:	00010837          	lui	a6,0x10
   1f834:	fff80693          	addi	a3,a6,-1 # ffff <_vfprintf_r+0x21a3>
   1f838:	01035913          	srli	s2,t1,0x10
   1f83c:	010fd493          	srli	s1,t6,0x10
   1f840:	00d37333          	and	t1,t1,a3
   1f844:	00dfffb3          	and	t6,t6,a3
   1f848:	026f86b3          	mul	a3,t6,t1
   1f84c:	03f90533          	mul	a0,s2,t6
   1f850:	0106de93          	srli	t4,a3,0x10
   1f854:	02648633          	mul	a2,s1,t1
   1f858:	00a60633          	add	a2,a2,a0
   1f85c:	00ce8eb3          	add	t4,t4,a2
   1f860:	029905b3          	mul	a1,s2,s1
   1f864:	00aef463          	bgeu	t4,a0,1f86c <__multf3+0x6a0>
   1f868:	010585b3          	add	a1,a1,a6
   1f86c:	000108b7          	lui	a7,0x10
   1f870:	fff88813          	addi	a6,a7,-1 # ffff <_vfprintf_r+0x21a3>
   1f874:	04412f03          	lw	t5,68(sp)
   1f878:	010ef533          	and	a0,t4,a6
   1f87c:	01051513          	slli	a0,a0,0x10
   1f880:	0106f6b3          	and	a3,a3,a6
   1f884:	010f5e13          	srli	t3,t5,0x10
   1f888:	00d506b3          	add	a3,a0,a3
   1f88c:	010f7f33          	and	t5,t5,a6
   1f890:	026f0633          	mul	a2,t5,t1
   1f894:	00d12e23          	sw	a3,28(sp)
   1f898:	06d12023          	sw	a3,96(sp)
   1f89c:	01c12823          	sw	t3,16(sp)
   1f8a0:	010ede93          	srli	t4,t4,0x10
   1f8a4:	03e90533          	mul	a0,s2,t5
   1f8a8:	01065293          	srli	t0,a2,0x10
   1f8ac:	026e06b3          	mul	a3,t3,t1
   1f8b0:	00a686b3          	add	a3,a3,a0
   1f8b4:	00d282b3          	add	t0,t0,a3
   1f8b8:	03c90b33          	mul	s6,s2,t3
   1f8bc:	00a2f463          	bgeu	t0,a0,1f8c4 <__multf3+0x6f8>
   1f8c0:	011b0b33          	add	s6,s6,a7
   1f8c4:	03412883          	lw	a7,52(sp)
   1f8c8:	00010837          	lui	a6,0x10
   1f8cc:	fff80513          	addi	a0,a6,-1 # ffff <_vfprintf_r+0x21a3>
   1f8d0:	0108d393          	srli	t2,a7,0x10
   1f8d4:	00a8f8b3          	and	a7,a7,a0
   1f8d8:	00a2f9b3          	and	s3,t0,a0
   1f8dc:	00a67633          	and	a2,a2,a0
   1f8e0:	03f886b3          	mul	a3,a7,t6
   1f8e4:	01099993          	slli	s3,s3,0x10
   1f8e8:	00c989b3          	add	s3,s3,a2
   1f8ec:	0102d293          	srli	t0,t0,0x10
   1f8f0:	013e8eb3          	add	t4,t4,s3
   1f8f4:	03f38e33          	mul	t3,t2,t6
   1f8f8:	0106d613          	srli	a2,a3,0x10
   1f8fc:	03148533          	mul	a0,s1,a7
   1f900:	01c50533          	add	a0,a0,t3
   1f904:	00a60633          	add	a2,a2,a0
   1f908:	02748533          	mul	a0,s1,t2
   1f90c:	01c67463          	bgeu	a2,t3,1f914 <__multf3+0x748>
   1f910:	01050533          	add	a0,a0,a6
   1f914:	01012b83          	lw	s7,16(sp)
   1f918:	00010e37          	lui	t3,0x10
   1f91c:	fffe0813          	addi	a6,t3,-1 # ffff <_vfprintf_r+0x21a3>
   1f920:	01067a33          	and	s4,a2,a6
   1f924:	01065613          	srli	a2,a2,0x10
   1f928:	0106f6b3          	and	a3,a3,a6
   1f92c:	00a60633          	add	a2,a2,a0
   1f930:	031b8ab3          	mul	s5,s7,a7
   1f934:	010a1a13          	slli	s4,s4,0x10
   1f938:	00da0a33          	add	s4,s4,a3
   1f93c:	031f0533          	mul	a0,t5,a7
   1f940:	03e38833          	mul	a6,t2,t5
   1f944:	01055693          	srli	a3,a0,0x10
   1f948:	010a8ab3          	add	s5,s5,a6
   1f94c:	015686b3          	add	a3,a3,s5
   1f950:	027b8bb3          	mul	s7,s7,t2
   1f954:	0106f463          	bgeu	a3,a6,1f95c <__multf3+0x790>
   1f958:	01cb8bb3          	add	s7,s7,t3
   1f95c:	00010837          	lui	a6,0x10
   1f960:	04812e03          	lw	t3,72(sp)
   1f964:	fff80c13          	addi	s8,a6,-1 # ffff <_vfprintf_r+0x21a3>
   1f968:	0186fab3          	and	s5,a3,s8
   1f96c:	0106d693          	srli	a3,a3,0x10
   1f970:	017686b3          	add	a3,a3,s7
   1f974:	010a9a93          	slli	s5,s5,0x10
   1f978:	01857533          	and	a0,a0,s8
   1f97c:	010e5d13          	srli	s10,t3,0x10
   1f980:	018e7cb3          	and	s9,t3,s8
   1f984:	02d12023          	sw	a3,32(sp)
   1f988:	00aa86b3          	add	a3,s5,a0
   1f98c:	026c8e33          	mul	t3,s9,t1
   1f990:	02d12223          	sw	a3,36(sp)
   1f994:	026d0ab3          	mul	s5,s10,t1
   1f998:	010e5513          	srli	a0,t3,0x10
   1f99c:	039906b3          	mul	a3,s2,s9
   1f9a0:	00da8ab3          	add	s5,s5,a3
   1f9a4:	01550533          	add	a0,a0,s5
   1f9a8:	03a90bb3          	mul	s7,s2,s10
   1f9ac:	00d57463          	bgeu	a0,a3,1f9b4 <__multf3+0x7e8>
   1f9b0:	010b8bb3          	add	s7,s7,a6
   1f9b4:	03812803          	lw	a6,56(sp)
   1f9b8:	000106b7          	lui	a3,0x10
   1f9bc:	fff68c13          	addi	s8,a3,-1 # ffff <_vfprintf_r+0x21a3>
   1f9c0:	01085d93          	srli	s11,a6,0x10
   1f9c4:	01887833          	and	a6,a6,s8
   1f9c8:	018576b3          	and	a3,a0,s8
   1f9cc:	01055513          	srli	a0,a0,0x10
   1f9d0:	03f80ab3          	mul	s5,a6,t6
   1f9d4:	01750bb3          	add	s7,a0,s7
   1f9d8:	018e7e33          	and	t3,t3,s8
   1f9dc:	01069693          	slli	a3,a3,0x10
   1f9e0:	03712423          	sw	s7,40(sp)
   1f9e4:	01c686b3          	add	a3,a3,t3
   1f9e8:	03fd8bb3          	mul	s7,s11,t6
   1f9ec:	010ade13          	srli	t3,s5,0x10
   1f9f0:	03512623          	sw	s5,44(sp)
   1f9f4:	03048c33          	mul	s8,s1,a6
   1f9f8:	03b48ab3          	mul	s5,s1,s11
   1f9fc:	017c0c33          	add	s8,s8,s7
   1fa00:	018e0e33          	add	t3,t3,s8
   1fa04:	01512a23          	sw	s5,20(sp)
   1fa08:	017e7863          	bgeu	t3,s7,1fa18 <__multf3+0x84c>
   1fa0c:	00010537          	lui	a0,0x10
   1fa10:	00aa8533          	add	a0,s5,a0
   1fa14:	00a12a23          	sw	a0,20(sp)
   1fa18:	01d585b3          	add	a1,a1,t4
   1fa1c:	0135b9b3          	sltu	s3,a1,s3
   1fa20:	013282b3          	add	t0,t0,s3
   1fa24:	016282b3          	add	t0,t0,s6
   1fa28:	01458b33          	add	s6,a1,s4
   1fa2c:	00c28633          	add	a2,t0,a2
   1fa30:	00bb35b3          	sltu	a1,s6,a1
   1fa34:	00b605b3          	add	a1,a2,a1
   1fa38:	04c12e83          	lw	t4,76(sp)
   1fa3c:	00563bb3          	sltu	s7,a2,t0
   1fa40:	00010ab7          	lui	s5,0x10
   1fa44:	00c5b633          	sltu	a2,a1,a2
   1fa48:	fffa8a93          	addi	s5,s5,-1 # ffff <_vfprintf_r+0x21a3>
   1fa4c:	0132b9b3          	sltu	s3,t0,s3
   1fa50:	02c12503          	lw	a0,44(sp)
   1fa54:	00cbe633          	or	a2,s7,a2
   1fa58:	02412283          	lw	t0,36(sp)
   1fa5c:	010eda13          	srli	s4,t4,0x10
   1fa60:	01360633          	add	a2,a2,s3
   1fa64:	015efeb3          	and	t4,t4,s5
   1fa68:	02012983          	lw	s3,32(sp)
   1fa6c:	015e7bb3          	and	s7,t3,s5
   1fa70:	03d90c33          	mul	s8,s2,t4
   1fa74:	01612c23          	sw	s6,24(sp)
   1fa78:	005582b3          	add	t0,a1,t0
   1fa7c:	010b9b93          	slli	s7,s7,0x10
   1fa80:	01557ab3          	and	s5,a0,s5
   1fa84:	02812503          	lw	a0,40(sp)
   1fa88:	013609b3          	add	s3,a2,s3
   1fa8c:	00b2b5b3          	sltu	a1,t0,a1
   1fa90:	015b8ab3          	add	s5,s7,s5
   1fa94:	01412b83          	lw	s7,20(sp)
   1fa98:	026e8b33          	mul	s6,t4,t1
   1fa9c:	00b985b3          	add	a1,s3,a1
   1faa0:	00d286b3          	add	a3,t0,a3
   1faa4:	00a58533          	add	a0,a1,a0
   1faa8:	0056b2b3          	sltu	t0,a3,t0
   1faac:	010e5e13          	srli	t3,t3,0x10
   1fab0:	005502b3          	add	t0,a0,t0
   1fab4:	01568ab3          	add	s5,a3,s5
   1fab8:	017e0e33          	add	t3,t3,s7
   1fabc:	01c28e33          	add	t3,t0,t3
   1fac0:	026a0333          	mul	t1,s4,t1
   1fac4:	00c9b633          	sltu	a2,s3,a2
   1fac8:	00dab6b3          	sltu	a3,s5,a3
   1facc:	0135b9b3          	sltu	s3,a1,s3
   1fad0:	00b535b3          	sltu	a1,a0,a1
   1fad4:	00a2b533          	sltu	a0,t0,a0
   1fad8:	00a5e533          	or	a0,a1,a0
   1fadc:	00de06b3          	add	a3,t3,a3
   1fae0:	01812583          	lw	a1,24(sp)
   1fae4:	013669b3          	or	s3,a2,s3
   1fae8:	005e32b3          	sltu	t0,t3,t0
   1faec:	01c6be33          	sltu	t3,a3,t3
   1faf0:	00a989b3          	add	s3,s3,a0
   1faf4:	01c2e2b3          	or	t0,t0,t3
   1faf8:	01830333          	add	t1,t1,s8
   1fafc:	010b5613          	srli	a2,s6,0x10
   1fb00:	06b12223          	sw	a1,100(sp)
   1fb04:	013285b3          	add	a1,t0,s3
   1fb08:	03512023          	sw	s5,32(sp)
   1fb0c:	07512423          	sw	s5,104(sp)
   1fb10:	00660633          	add	a2,a2,t1
   1fb14:	00b12a23          	sw	a1,20(sp)
   1fb18:	03490933          	mul	s2,s2,s4
   1fb1c:	01867663          	bgeu	a2,s8,1fb28 <__multf3+0x95c>
   1fb20:	00010ab7          	lui	s5,0x10
   1fb24:	01590933          	add	s2,s2,s5
   1fb28:	03c12283          	lw	t0,60(sp)
   1fb2c:	00010537          	lui	a0,0x10
   1fb30:	fff50313          	addi	t1,a0,-1 # ffff <_vfprintf_r+0x21a3>
   1fb34:	0102d993          	srli	s3,t0,0x10
   1fb38:	00667ab3          	and	s5,a2,t1
   1fb3c:	0062f2b3          	and	t0,t0,t1
   1fb40:	01065613          	srli	a2,a2,0x10
   1fb44:	03f285b3          	mul	a1,t0,t6
   1fb48:	01260933          	add	s2,a2,s2
   1fb4c:	006b7b33          	and	s6,s6,t1
   1fb50:	010a9a93          	slli	s5,s5,0x10
   1fb54:	016a8ab3          	add	s5,s5,s6
   1fb58:	02548633          	mul	a2,s1,t0
   1fb5c:	0105d313          	srli	t1,a1,0x10
   1fb60:	03f98fb3          	mul	t6,s3,t6
   1fb64:	01f60633          	add	a2,a2,t6
   1fb68:	00c30333          	add	t1,t1,a2
   1fb6c:	033484b3          	mul	s1,s1,s3
   1fb70:	01f37463          	bgeu	t1,t6,1fb78 <__multf3+0x9ac>
   1fb74:	00a484b3          	add	s1,s1,a0
   1fb78:	00010637          	lui	a2,0x10
   1fb7c:	fff60513          	addi	a0,a2,-1 # ffff <_vfprintf_r+0x21a3>
   1fb80:	00a37e33          	and	t3,t1,a0
   1fb84:	01035313          	srli	t1,t1,0x10
   1fb88:	00a5f533          	and	a0,a1,a0
   1fb8c:	00930333          	add	t1,t1,s1
   1fb90:	010e1e13          	slli	t3,t3,0x10
   1fb94:	039885b3          	mul	a1,a7,s9
   1fb98:	00ae0e33          	add	t3,t3,a0
   1fb9c:	03938fb3          	mul	t6,t2,s9
   1fba0:	0105d513          	srli	a0,a1,0x10
   1fba4:	031d04b3          	mul	s1,s10,a7
   1fba8:	01f484b3          	add	s1,s1,t6
   1fbac:	00950533          	add	a0,a0,s1
   1fbb0:	03a38b33          	mul	s6,t2,s10
   1fbb4:	01f57463          	bgeu	a0,t6,1fbbc <__multf3+0x9f0>
   1fbb8:	00cb0b33          	add	s6,s6,a2
   1fbbc:	01012c03          	lw	s8,16(sp)
   1fbc0:	000104b7          	lui	s1,0x10
   1fbc4:	fff48f93          	addi	t6,s1,-1 # ffff <_vfprintf_r+0x21a3>
   1fbc8:	01f57633          	and	a2,a0,t6
   1fbcc:	01055513          	srli	a0,a0,0x10
   1fbd0:	01f5f5b3          	and	a1,a1,t6
   1fbd4:	01650533          	add	a0,a0,s6
   1fbd8:	03ed8fb3          	mul	t6,s11,t5
   1fbdc:	01061613          	slli	a2,a2,0x10
   1fbe0:	00b60633          	add	a2,a2,a1
   1fbe4:	030f0b33          	mul	s6,t5,a6
   1fbe8:	030c0bb3          	mul	s7,s8,a6
   1fbec:	010b5593          	srli	a1,s6,0x10
   1fbf0:	01fb8bb3          	add	s7,s7,t6
   1fbf4:	017585b3          	add	a1,a1,s7
   1fbf8:	03bc0bb3          	mul	s7,s8,s11
   1fbfc:	01f5f463          	bgeu	a1,t6,1fc04 <__multf3+0xa38>
   1fc00:	009b8bb3          	add	s7,s7,s1
   1fc04:	01412483          	lw	s1,20(sp)
   1fc08:	01568fb3          	add	t6,a3,s5
   1fc0c:	00dfb6b3          	sltu	a3,t6,a3
   1fc10:	012484b3          	add	s1,s1,s2
   1fc14:	00d48933          	add	s2,s1,a3
   1fc18:	000106b7          	lui	a3,0x10
   1fc1c:	fff68693          	addi	a3,a3,-1 # ffff <_vfprintf_r+0x21a3>
   1fc20:	00d5fab3          	and	s5,a1,a3
   1fc24:	010a9a93          	slli	s5,s5,0x10
   1fc28:	00db76b3          	and	a3,s6,a3
   1fc2c:	00da86b3          	add	a3,s5,a3
   1fc30:	01412a83          	lw	s5,20(sp)
   1fc34:	0105d593          	srli	a1,a1,0x10
   1fc38:	017585b3          	add	a1,a1,s7
   1fc3c:	030c8c33          	mul	s8,s9,a6
   1fc40:	0154bbb3          	sltu	s7,s1,s5
   1fc44:	01cf8e33          	add	t3,t6,t3
   1fc48:	00690333          	add	t1,s2,t1
   1fc4c:	01fe3fb3          	sltu	t6,t3,t6
   1fc50:	01f30fb3          	add	t6,t1,t6
   1fc54:	00ce0633          	add	a2,t3,a2
   1fc58:	00af8533          	add	a0,t6,a0
   1fc5c:	01c63e33          	sltu	t3,a2,t3
   1fc60:	01c50e33          	add	t3,a0,t3
   1fc64:	039d8b33          	mul	s6,s11,s9
   1fc68:	00d606b3          	add	a3,a2,a3
   1fc6c:	00be05b3          	add	a1,t3,a1
   1fc70:	009934b3          	sltu	s1,s2,s1
   1fc74:	00c6b633          	sltu	a2,a3,a2
   1fc78:	01233933          	sltu	s2,t1,s2
   1fc7c:	006fb333          	sltu	t1,t6,t1
   1fc80:	009bebb3          	or	s7,s7,s1
   1fc84:	01f53fb3          	sltu	t6,a0,t6
   1fc88:	00696333          	or	t1,s2,t1
   1fc8c:	030d0ab3          	mul	s5,s10,a6
   1fc90:	00ae3533          	sltu	a0,t3,a0
   1fc94:	00c58633          	add	a2,a1,a2
   1fc98:	01c5be33          	sltu	t3,a1,t3
   1fc9c:	006b8333          	add	t1,s7,t1
   1fca0:	00afe533          	or	a0,t6,a0
   1fca4:	00b635b3          	sltu	a1,a2,a1
   1fca8:	010c5f93          	srli	t6,s8,0x10
   1fcac:	00650533          	add	a0,a0,t1
   1fcb0:	00be65b3          	or	a1,t3,a1
   1fcb4:	016a8ab3          	add	s5,s5,s6
   1fcb8:	06d12623          	sw	a3,108(sp)
   1fcbc:	015f8ab3          	add	s5,t6,s5
   1fcc0:	03bd0e33          	mul	t3,s10,s11
   1fcc4:	00068313          	mv	t1,a3
   1fcc8:	00a585b3          	add	a1,a1,a0
   1fccc:	016af663          	bgeu	s5,s6,1fcd8 <__multf3+0xb0c>
   1fcd0:	00010537          	lui	a0,0x10
   1fcd4:	00ae0e33          	add	t3,t3,a0
   1fcd8:	000104b7          	lui	s1,0x10
   1fcdc:	fff48513          	addi	a0,s1,-1 # ffff <_vfprintf_r+0x21a3>
   1fce0:	00aaffb3          	and	t6,s5,a0
   1fce4:	010f9f93          	slli	t6,t6,0x10
   1fce8:	00ac7533          	and	a0,s8,a0
   1fcec:	031e8933          	mul	s2,t4,a7
   1fcf0:	00af8533          	add	a0,t6,a0
   1fcf4:	010ada93          	srli	s5,s5,0x10
   1fcf8:	01ca8ab3          	add	s5,s5,t3
   1fcfc:	03d38fb3          	mul	t6,t2,t4
   1fd00:	01095e13          	srli	t3,s2,0x10
   1fd04:	031a08b3          	mul	a7,s4,a7
   1fd08:	01f888b3          	add	a7,a7,t6
   1fd0c:	011e0e33          	add	t3,t3,a7
   1fd10:	034383b3          	mul	t2,t2,s4
   1fd14:	01fe7463          	bgeu	t3,t6,1fd1c <__multf3+0xb50>
   1fd18:	009383b3          	add	t2,t2,s1
   1fd1c:	01012b03          	lw	s6,16(sp)
   1fd20:	00010fb7          	lui	t6,0x10
   1fd24:	ffff8893          	addi	a7,t6,-1 # ffff <_vfprintf_r+0x21a3>
   1fd28:	011e74b3          	and	s1,t3,a7
   1fd2c:	010e5e13          	srli	t3,t3,0x10
   1fd30:	011978b3          	and	a7,s2,a7
   1fd34:	007e0e33          	add	t3,t3,t2
   1fd38:	025b0933          	mul	s2,s6,t0
   1fd3c:	01049493          	slli	s1,s1,0x10
   1fd40:	011484b3          	add	s1,s1,a7
   1fd44:	03e283b3          	mul	t2,t0,t5
   1fd48:	03e98f33          	mul	t5,s3,t5
   1fd4c:	0103d893          	srli	a7,t2,0x10
   1fd50:	01e90933          	add	s2,s2,t5
   1fd54:	012888b3          	add	a7,a7,s2
   1fd58:	033b0933          	mul	s2,s6,s3
   1fd5c:	01e8f463          	bgeu	a7,t5,1fd64 <__multf3+0xb98>
   1fd60:	01f90933          	add	s2,s2,t6
   1fd64:	00010b37          	lui	s6,0x10
   1fd68:	fffb0f13          	addi	t5,s6,-1 # ffff <_vfprintf_r+0x21a3>
   1fd6c:	01e8ffb3          	and	t6,a7,t5
   1fd70:	0108d893          	srli	a7,a7,0x10
   1fd74:	01e3ff33          	and	t5,t2,t5
   1fd78:	012888b3          	add	a7,a7,s2
   1fd7c:	010f9f93          	slli	t6,t6,0x10
   1fd80:	030e83b3          	mul	t2,t4,a6
   1fd84:	01ef8f33          	add	t5,t6,t5
   1fd88:	03dd8933          	mul	s2,s11,t4
   1fd8c:	0103df93          	srli	t6,t2,0x10
   1fd90:	030a0833          	mul	a6,s4,a6
   1fd94:	01280833          	add	a6,a6,s2
   1fd98:	010f8fb3          	add	t6,t6,a6
   1fd9c:	034d8bb3          	mul	s7,s11,s4
   1fda0:	012ff463          	bgeu	t6,s2,1fda8 <__multf3+0xbdc>
   1fda4:	016b8bb3          	add	s7,s7,s6
   1fda8:	00010b37          	lui	s6,0x10
   1fdac:	fffb0813          	addi	a6,s6,-1 # ffff <_vfprintf_r+0x21a3>
   1fdb0:	010ff933          	and	s2,t6,a6
   1fdb4:	010fdf93          	srli	t6,t6,0x10
   1fdb8:	0103f833          	and	a6,t2,a6
   1fdbc:	017f8fb3          	add	t6,t6,s7
   1fdc0:	01091913          	slli	s2,s2,0x10
   1fdc4:	039283b3          	mul	t2,t0,s9
   1fdc8:	01090833          	add	a6,s2,a6
   1fdcc:	03998c33          	mul	s8,s3,s9
   1fdd0:	0103d913          	srli	s2,t2,0x10
   1fdd4:	025d0bb3          	mul	s7,s10,t0
   1fdd8:	018b8bb3          	add	s7,s7,s8
   1fddc:	01790933          	add	s2,s2,s7
   1fde0:	033d0bb3          	mul	s7,s10,s3
   1fde4:	01897463          	bgeu	s2,s8,1fdec <__multf3+0xc20>
   1fde8:	016b8bb3          	add	s7,s7,s6
   1fdec:	00a60533          	add	a0,a2,a0
   1fdf0:	01558ab3          	add	s5,a1,s5
   1fdf4:	00c53633          	sltu	a2,a0,a2
   1fdf8:	00ca8633          	add	a2,s5,a2
   1fdfc:	009504b3          	add	s1,a0,s1
   1fe00:	01c60e33          	add	t3,a2,t3
   1fe04:	00a4b533          	sltu	a0,s1,a0
   1fe08:	025e8c33          	mul	s8,t4,t0
   1fe0c:	00ae0b33          	add	s6,t3,a0
   1fe10:	01e48f33          	add	t5,s1,t5
   1fe14:	011b08b3          	add	a7,s6,a7
   1fe18:	009f34b3          	sltu	s1,t5,s1
   1fe1c:	00988533          	add	a0,a7,s1
   1fe20:	00bab5b3          	sltu	a1,s5,a1
   1fe24:	000104b7          	lui	s1,0x10
   1fe28:	01563ab3          	sltu	s5,a2,s5
   1fe2c:	00ce3633          	sltu	a2,t3,a2
   1fe30:	03d98eb3          	mul	t4,s3,t4
   1fe34:	01cb3e33          	sltu	t3,s6,t3
   1fe38:	fff48c93          	addi	s9,s1,-1 # ffff <_vfprintf_r+0x21a3>
   1fe3c:	0155eab3          	or	s5,a1,s5
   1fe40:	01c66e33          	or	t3,a2,t3
   1fe44:	0168bb33          	sltu	s6,a7,s6
   1fe48:	011538b3          	sltu	a7,a0,a7
   1fe4c:	01997633          	and	a2,s2,s9
   1fe50:	01ca8e33          	add	t3,s5,t3
   1fe54:	011b68b3          	or	a7,s6,a7
   1fe58:	025a02b3          	mul	t0,s4,t0
   1fe5c:	01050833          	add	a6,a0,a6
   1fe60:	01c888b3          	add	a7,a7,t3
   1fe64:	01061613          	slli	a2,a2,0x10
   1fe68:	0193f3b3          	and	t2,t2,s9
   1fe6c:	01f88fb3          	add	t6,a7,t6
   1fe70:	00a835b3          	sltu	a1,a6,a0
   1fe74:	00760633          	add	a2,a2,t2
   1fe78:	01095913          	srli	s2,s2,0x10
   1fe7c:	00bf85b3          	add	a1,t6,a1
   1fe80:	00c80533          	add	a0,a6,a2
   1fe84:	01790933          	add	s2,s2,s7
   1fe88:	01258933          	add	s2,a1,s2
   1fe8c:	01053633          	sltu	a2,a0,a6
   1fe90:	00c90633          	add	a2,s2,a2
   1fe94:	01d282b3          	add	t0,t0,t4
   1fe98:	010c5813          	srli	a6,s8,0x10
   1fe9c:	011fb8b3          	sltu	a7,t6,a7
   1fea0:	07e12823          	sw	t5,112(sp)
   1fea4:	01f5bfb3          	sltu	t6,a1,t6
   1fea8:	06a12a23          	sw	a0,116(sp)
   1feac:	00b935b3          	sltu	a1,s2,a1
   1feb0:	00580833          	add	a6,a6,t0
   1feb4:	01263933          	sltu	s2,a2,s2
   1feb8:	033a09b3          	mul	s3,s4,s3
   1febc:	01f8ef33          	or	t5,a7,t6
   1fec0:	0125e5b3          	or	a1,a1,s2
   1fec4:	01d87463          	bgeu	a6,t4,1fecc <__multf3+0xd00>
   1fec8:	009989b3          	add	s3,s3,s1
   1fecc:	00010e37          	lui	t3,0x10
   1fed0:	fffe0e13          	addi	t3,t3,-1 # ffff <_vfprintf_r+0x21a3>
   1fed4:	01c87533          	and	a0,a6,t3
   1fed8:	01051513          	slli	a0,a0,0x10
   1fedc:	01cc7c33          	and	s8,s8,t3
   1fee0:	01085893          	srli	a7,a6,0x10
   1fee4:	01850533          	add	a0,a0,s8
   1fee8:	00a60533          	add	a0,a2,a0
   1feec:	01e888b3          	add	a7,a7,t5
   1fef0:	011585b3          	add	a1,a1,a7
   1fef4:	00c53633          	sltu	a2,a0,a2
   1fef8:	01812803          	lw	a6,24(sp)
   1fefc:	00b60633          	add	a2,a2,a1
   1ff00:	01c12583          	lw	a1,28(sp)
   1ff04:	01360633          	add	a2,a2,s3
   1ff08:	00d69693          	slli	a3,a3,0xd
   1ff0c:	0105e5b3          	or	a1,a1,a6
   1ff10:	02012803          	lw	a6,32(sp)
   1ff14:	06c12e23          	sw	a2,124(sp)
   1ff18:	06a12c23          	sw	a0,120(sp)
   1ff1c:	00b865b3          	or	a1,a6,a1
   1ff20:	00b6e6b3          	or	a3,a3,a1
   1ff24:	06010613          	addi	a2,sp,96
   1ff28:	07010813          	addi	a6,sp,112
   1ff2c:	01335513          	srli	a0,t1,0x13
   1ff30:	01062303          	lw	t1,16(a2)
   1ff34:	00460613          	addi	a2,a2,4
   1ff38:	00d31593          	slli	a1,t1,0xd
   1ff3c:	00a5e5b3          	or	a1,a1,a0
   1ff40:	feb62e23          	sw	a1,-4(a2)
   1ff44:	fec814e3          	bne	a6,a2,1ff2c <__multf3+0xd60>
   1ff48:	06012583          	lw	a1,96(sp)
   1ff4c:	00d036b3          	snez	a3,a3
   1ff50:	06c12603          	lw	a2,108(sp)
   1ff54:	00b6e6b3          	or	a3,a3,a1
   1ff58:	06812583          	lw	a1,104(sp)
   1ff5c:	04c12e23          	sw	a2,92(sp)
   1ff60:	04d12823          	sw	a3,80(sp)
   1ff64:	04b12c23          	sw	a1,88(sp)
   1ff68:	06412583          	lw	a1,100(sp)
   1ff6c:	04b12a23          	sw	a1,84(sp)
   1ff70:	001005b7          	lui	a1,0x100
   1ff74:	00b67633          	and	a2,a2,a1
   1ff78:	f6060c63          	beqz	a2,1f6f0 <__multf3+0x524>
   1ff7c:	01f69593          	slli	a1,a3,0x1f
   1ff80:	05010793          	addi	a5,sp,80
   1ff84:	05c10513          	addi	a0,sp,92
   1ff88:	0016d813          	srli	a6,a3,0x1
   1ff8c:	0047a683          	lw	a3,4(a5)
   1ff90:	00478793          	addi	a5,a5,4
   1ff94:	01f69613          	slli	a2,a3,0x1f
   1ff98:	01066633          	or	a2,a2,a6
   1ff9c:	fec7ae23          	sw	a2,-4(a5)
   1ffa0:	fea794e3          	bne	a5,a0,1ff88 <__multf3+0xdbc>
   1ffa4:	05c12683          	lw	a3,92(sp)
   1ffa8:	05012783          	lw	a5,80(sp)
   1ffac:	00b03633          	snez	a2,a1
   1ffb0:	0016d693          	srli	a3,a3,0x1
   1ffb4:	00c7e7b3          	or	a5,a5,a2
   1ffb8:	04f12823          	sw	a5,80(sp)
   1ffbc:	04d12e23          	sw	a3,92(sp)
   1ffc0:	00c12783          	lw	a5,12(sp)
   1ffc4:	f2cff06f          	j	1f6f0 <__multf3+0x524>
   1ffc8:	20069e63          	bnez	a3,201e4 <__multf3+0x1018>
   1ffcc:	05012783          	lw	a5,80(sp)
   1ffd0:	00300613          	li	a2,3
   1ffd4:	01f00e93          	li	t4,31
   1ffd8:	01f79793          	slli	a5,a5,0x1f
   1ffdc:	00100513          	li	a0,1
   1ffe0:	05010593          	addi	a1,sp,80
   1ffe4:	00269693          	slli	a3,a3,0x2
   1ffe8:	00261313          	slli	t1,a2,0x2
   1ffec:	00d58833          	add	a6,a1,a3
   1fff0:	00058893          	mv	a7,a1
   1fff4:	00658e33          	add	t3,a1,t1
   1fff8:	00082683          	lw	a3,0(a6)
   1fffc:	00482f03          	lw	t5,4(a6)
   20000:	00488893          	addi	a7,a7,4
   20004:	00a6d6b3          	srl	a3,a3,a0
   20008:	01df1f33          	sll	t5,t5,t4
   2000c:	01e6e6b3          	or	a3,a3,t5
   20010:	fed8ae23          	sw	a3,-4(a7)
   20014:	00480813          	addi	a6,a6,4
   20018:	ffc890e3          	bne	a7,t3,1fff8 <__multf3+0xe2c>
   2001c:	05030693          	addi	a3,t1,80
   20020:	03010813          	addi	a6,sp,48
   20024:	01068333          	add	t1,a3,a6
   20028:	05c12683          	lw	a3,92(sp)
   2002c:	00160613          	addi	a2,a2,1
   20030:	00a6d6b3          	srl	a3,a3,a0
   20034:	fcd32823          	sw	a3,-48(t1)
   20038:	00400693          	li	a3,4
   2003c:	05012503          	lw	a0,80(sp)
   20040:	02d60e63          	beq	a2,a3,2007c <__multf3+0xeb0>
   20044:	00400693          	li	a3,4
   20048:	40c686b3          	sub	a3,a3,a2
   2004c:	00269693          	slli	a3,a3,0x2
   20050:	00261613          	slli	a2,a2,0x2
   20054:	00800813          	li	a6,8
   20058:	00c58633          	add	a2,a1,a2
   2005c:	0106ea63          	bltu	a3,a6,20070 <__multf3+0xea4>
   20060:	00062023          	sw	zero,0(a2)
   20064:	00062223          	sw	zero,4(a2)
   20068:	ff868693          	addi	a3,a3,-8
   2006c:	00860613          	addi	a2,a2,8
   20070:	00400813          	li	a6,4
   20074:	0106e463          	bltu	a3,a6,2007c <__multf3+0xeb0>
   20078:	00062023          	sw	zero,0(a2)
   2007c:	00f037b3          	snez	a5,a5
   20080:	00a7e7b3          	or	a5,a5,a0
   20084:	04f12823          	sw	a5,80(sp)
   20088:	0077f613          	andi	a2,a5,7
   2008c:	05c12683          	lw	a3,92(sp)
   20090:	04060263          	beqz	a2,200d4 <__multf3+0xf08>
   20094:	00f7f613          	andi	a2,a5,15
   20098:	00400513          	li	a0,4
   2009c:	02a60c63          	beq	a2,a0,200d4 <__multf3+0xf08>
   200a0:	05412603          	lw	a2,84(sp)
   200a4:	00478793          	addi	a5,a5,4
   200a8:	05812803          	lw	a6,88(sp)
   200ac:	0047b513          	sltiu	a0,a5,4
   200b0:	00a60533          	add	a0,a2,a0
   200b4:	00c53633          	sltu	a2,a0,a2
   200b8:	00c80633          	add	a2,a6,a2
   200bc:	01063833          	sltu	a6,a2,a6
   200c0:	010686b3          	add	a3,a3,a6
   200c4:	04f12823          	sw	a5,80(sp)
   200c8:	04a12a23          	sw	a0,84(sp)
   200cc:	04c12c23          	sw	a2,88(sp)
   200d0:	04d12e23          	sw	a3,92(sp)
   200d4:	000807b7          	lui	a5,0x80
   200d8:	00f6f6b3          	and	a3,a3,a5
   200dc:	1a069e63          	bnez	a3,20298 <__multf3+0x10cc>
   200e0:	05012603          	lw	a2,80(sp)
   200e4:	00058793          	mv	a5,a1
   200e8:	05c10513          	addi	a0,sp,92
   200ec:	00365593          	srli	a1,a2,0x3
   200f0:	0047a603          	lw	a2,4(a5) # 80004 <__alt_data_end+0x40004>
   200f4:	00478793          	addi	a5,a5,4
   200f8:	01d61693          	slli	a3,a2,0x1d
   200fc:	00b6e6b3          	or	a3,a3,a1
   20100:	fed7ae23          	sw	a3,-4(a5)
   20104:	fea794e3          	bne	a5,a0,200ec <__multf3+0xf20>
   20108:	05c12683          	lw	a3,92(sp)
   2010c:	05012503          	lw	a0,80(sp)
   20110:	05412583          	lw	a1,84(sp)
   20114:	0036d693          	srli	a3,a3,0x3
   20118:	01069693          	slli	a3,a3,0x10
   2011c:	05812603          	lw	a2,88(sp)
   20120:	0106d693          	srli	a3,a3,0x10
   20124:	00000793          	li	a5,0
   20128:	aa4ff06f          	j	1f3cc <__multf3+0x200>
   2012c:	140b1663          	bnez	s6,20278 <__multf3+0x10ac>
   20130:	1c0b8263          	beqz	s7,202f4 <__multf3+0x1128>
   20134:	000b8513          	mv	a0,s7
   20138:	dedfd0ef          	jal	ra,1df24 <__clzsi2>
   2013c:	04050513          	addi	a0,a0,64 # 10040 <_vfprintf_r+0x21e4>
   20140:	ff450613          	addi	a2,a0,-12
   20144:	01f67813          	andi	a6,a2,31
   20148:	40565613          	srai	a2,a2,0x5
   2014c:	1c081663          	bnez	a6,20318 <__multf3+0x114c>
   20150:	40c00733          	neg	a4,a2
   20154:	00271713          	slli	a4,a4,0x2
   20158:	00c70793          	addi	a5,a4,12
   2015c:	04010693          	addi	a3,sp,64
   20160:	00f687b3          	add	a5,a3,a5
   20164:	40e00733          	neg	a4,a4
   20168:	0007a883          	lw	a7,0(a5)
   2016c:	00e78833          	add	a6,a5,a4
   20170:	00078593          	mv	a1,a5
   20174:	01182023          	sw	a7,0(a6)
   20178:	ffc78793          	addi	a5,a5,-4
   2017c:	feb696e3          	bne	a3,a1,20168 <__multf3+0xf9c>
   20180:	fff60793          	addi	a5,a2,-1
   20184:	c00ff06f          	j	1f584 <__multf3+0x3b8>
   20188:	0e059063          	bnez	a1,20268 <__multf3+0x109c>
   2018c:	12080263          	beqz	a6,202b0 <__multf3+0x10e4>
   20190:	00080513          	mv	a0,a6
   20194:	d91fd0ef          	jal	ra,1df24 <__clzsi2>
   20198:	04050513          	addi	a0,a0,64
   2019c:	ff450613          	addi	a2,a0,-12
   201a0:	01f67813          	andi	a6,a2,31
   201a4:	40565613          	srai	a2,a2,0x5
   201a8:	12081663          	bnez	a6,202d4 <__multf3+0x1108>
   201ac:	40c00733          	neg	a4,a2
   201b0:	00271713          	slli	a4,a4,0x2
   201b4:	00c70793          	addi	a5,a4,12
   201b8:	03010693          	addi	a3,sp,48
   201bc:	00f687b3          	add	a5,a3,a5
   201c0:	40e00733          	neg	a4,a4
   201c4:	0007a883          	lw	a7,0(a5)
   201c8:	00e78833          	add	a6,a5,a4
   201cc:	00078593          	mv	a1,a5
   201d0:	01182023          	sw	a7,0(a6)
   201d4:	ffc78793          	addi	a5,a5,-4
   201d8:	feb696e3          	bne	a3,a1,201c4 <__multf3+0xff8>
   201dc:	fff60793          	addi	a5,a2,-1
   201e0:	c8cff06f          	j	1f66c <__multf3+0x4a0>
   201e4:	00100793          	li	a5,1
   201e8:	40d787b3          	sub	a5,a5,a3
   201ec:	07400693          	li	a3,116
   201f0:	9cf6c463          	blt	a3,a5,1f3b8 <__multf3+0x1ec>
   201f4:	01f7f513          	andi	a0,a5,31
   201f8:	02000e93          	li	t4,32
   201fc:	4057d693          	srai	a3,a5,0x5
   20200:	40ae8eb3          	sub	t4,t4,a0
   20204:	16068263          	beqz	a3,20368 <__multf3+0x119c>
   20208:	05010593          	addi	a1,sp,80
   2020c:	00269893          	slli	a7,a3,0x2
   20210:	00058613          	mv	a2,a1
   20214:	00b888b3          	add	a7,a7,a1
   20218:	00000793          	li	a5,0
   2021c:	00062803          	lw	a6,0(a2)
   20220:	00460613          	addi	a2,a2,4
   20224:	0107e7b3          	or	a5,a5,a6
   20228:	fec89ae3          	bne	a7,a2,2021c <__multf3+0x1050>
   2022c:	00068893          	mv	a7,a3
   20230:	00300613          	li	a2,3
   20234:	40d60633          	sub	a2,a2,a3
   20238:	00058813          	mv	a6,a1
   2023c:	00269313          	slli	t1,a3,0x2
   20240:	0e051c63          	bnez	a0,20338 <__multf3+0x116c>
   20244:	006808b3          	add	a7,a6,t1
   20248:	0008a883          	lw	a7,0(a7)
   2024c:	00150513          	addi	a0,a0,1
   20250:	00480813          	addi	a6,a6,4
   20254:	ff182e23          	sw	a7,-4(a6)
   20258:	fea656e3          	bge	a2,a0,20244 <__multf3+0x1078>
   2025c:	00400613          	li	a2,4
   20260:	40d60633          	sub	a2,a2,a3
   20264:	dd5ff06f          	j	20038 <__multf3+0xe6c>
   20268:	00058513          	mv	a0,a1
   2026c:	cb9fd0ef          	jal	ra,1df24 <__clzsi2>
   20270:	02050513          	addi	a0,a0,32
   20274:	f29ff06f          	j	2019c <__multf3+0xfd0>
   20278:	000b0513          	mv	a0,s6
   2027c:	ca9fd0ef          	jal	ra,1df24 <__clzsi2>
   20280:	02050513          	addi	a0,a0,32
   20284:	ebdff06f          	j	20140 <__multf3+0xf74>
   20288:	00160793          	addi	a5,a2,1
   2028c:	bc0ff06f          	j	1f64c <__multf3+0x480>
   20290:	00160793          	addi	a5,a2,1
   20294:	ad0ff06f          	j	1f564 <__multf3+0x398>
   20298:	00100793          	li	a5,1
   2029c:	00000693          	li	a3,0
   202a0:	00000613          	li	a2,0
   202a4:	00000593          	li	a1,0
   202a8:	00000513          	li	a0,0
   202ac:	920ff06f          	j	1f3cc <__multf3+0x200>
   202b0:	00090513          	mv	a0,s2
   202b4:	c71fd0ef          	jal	ra,1df24 <__clzsi2>
   202b8:	05450613          	addi	a2,a0,84
   202bc:	01f67813          	andi	a6,a2,31
   202c0:	06050513          	addi	a0,a0,96
   202c4:	40565613          	srai	a2,a2,0x5
   202c8:	ee0802e3          	beqz	a6,201ac <__multf3+0xfe0>
   202cc:	00200793          	li	a5,2
   202d0:	00f61863          	bne	a2,a5,202e0 <__multf3+0x1114>
   202d4:	02000313          	li	t1,32
   202d8:	41030333          	sub	t1,t1,a6
   202dc:	b24ff06f          	j	1f600 <__multf3+0x434>
   202e0:	01091933          	sll	s2,s2,a6
   202e4:	03212e23          	sw	s2,60(sp)
   202e8:	00200793          	li	a5,2
   202ec:	03010693          	addi	a3,sp,48
   202f0:	b84ff06f          	j	1f674 <__multf3+0x4a8>
   202f4:	000a8513          	mv	a0,s5
   202f8:	c2dfd0ef          	jal	ra,1df24 <__clzsi2>
   202fc:	05450613          	addi	a2,a0,84
   20300:	01f67813          	andi	a6,a2,31
   20304:	06050513          	addi	a0,a0,96
   20308:	40565613          	srai	a2,a2,0x5
   2030c:	e40802e3          	beqz	a6,20150 <__multf3+0xf84>
   20310:	00200793          	li	a5,2
   20314:	00f61863          	bne	a2,a5,20324 <__multf3+0x1158>
   20318:	02000313          	li	t1,32
   2031c:	41030333          	sub	t1,t1,a6
   20320:	9f8ff06f          	j	1f518 <__multf3+0x34c>
   20324:	010a9833          	sll	a6,s5,a6
   20328:	05012623          	sw	a6,76(sp)
   2032c:	00200793          	li	a5,2
   20330:	04010693          	addi	a3,sp,64
   20334:	a58ff06f          	j	1f58c <__multf3+0x3c0>
   20338:	00289813          	slli	a6,a7,0x2
   2033c:	05080813          	addi	a6,a6,80
   20340:	03010893          	addi	a7,sp,48
   20344:	01180833          	add	a6,a6,a7
   20348:	fd082803          	lw	a6,-48(a6)
   2034c:	01d81833          	sll	a6,a6,t4
   20350:	0107e7b3          	or	a5,a5,a6
   20354:	c80618e3          	bnez	a2,1ffe4 <__multf3+0xe18>
   20358:	05c12683          	lw	a3,92(sp)
   2035c:	00100613          	li	a2,1
   20360:	00a6d533          	srl	a0,a3,a0
   20364:	ce1ff06f          	j	20044 <__multf3+0xe78>
   20368:	00000893          	li	a7,0
   2036c:	00000793          	li	a5,0
   20370:	05010593          	addi	a1,sp,80
   20374:	ebdff06f          	j	20230 <__multf3+0x1064>

00020378 <__subtf3>:
   20378:	fa010113          	addi	sp,sp,-96
   2037c:	04812c23          	sw	s0,88(sp)
   20380:	00c5a403          	lw	s0,12(a1) # 10000c <__alt_data_end+0xc000c>
   20384:	0085a783          	lw	a5,8(a1)
   20388:	0005a803          	lw	a6,0(a1)
   2038c:	0045a703          	lw	a4,4(a1)
   20390:	01041693          	slli	a3,s0,0x10
   20394:	00062e83          	lw	t4,0(a2)
   20398:	00462e03          	lw	t3,4(a2)
   2039c:	00862883          	lw	a7,8(a2)
   203a0:	00c62583          	lw	a1,12(a2)
   203a4:	05212823          	sw	s2,80(sp)
   203a8:	0106d693          	srli	a3,a3,0x10
   203ac:	00141913          	slli	s2,s0,0x1
   203b0:	04912a23          	sw	s1,84(sp)
   203b4:	02f12c23          	sw	a5,56(sp)
   203b8:	02812e23          	sw	s0,60(sp)
   203bc:	00f12c23          	sw	a5,24(sp)
   203c0:	04112e23          	sw	ra,92(sp)
   203c4:	05312623          	sw	s3,76(sp)
   203c8:	00050493          	mv	s1,a0
   203cc:	03012823          	sw	a6,48(sp)
   203d0:	02e12a23          	sw	a4,52(sp)
   203d4:	01012823          	sw	a6,16(sp)
   203d8:	00e12a23          	sw	a4,20(sp)
   203dc:	00d12e23          	sw	a3,28(sp)
   203e0:	01195913          	srli	s2,s2,0x11
   203e4:	01f45413          	srli	s0,s0,0x1f
   203e8:	01010f13          	addi	t5,sp,16
   203ec:	01c10793          	addi	a5,sp,28
   203f0:	00369613          	slli	a2,a3,0x3
   203f4:	ffc7a683          	lw	a3,-4(a5)
   203f8:	00078f93          	mv	t6,a5
   203fc:	ffc78793          	addi	a5,a5,-4
   20400:	01d6d713          	srli	a4,a3,0x1d
   20404:	00c76733          	or	a4,a4,a2
   20408:	00e7a223          	sw	a4,4(a5)
   2040c:	feff12e3          	bne	t5,a5,203f0 <__subtf3+0x78>
   20410:	01012803          	lw	a6,16(sp)
   20414:	01059613          	slli	a2,a1,0x10
   20418:	00159313          	slli	t1,a1,0x1
   2041c:	01065613          	srli	a2,a2,0x10
   20420:	00381813          	slli	a6,a6,0x3
   20424:	03c12a23          	sw	t3,52(sp)
   20428:	02b12e23          	sw	a1,60(sp)
   2042c:	03c12223          	sw	t3,36(sp)
   20430:	01012823          	sw	a6,16(sp)
   20434:	03d12823          	sw	t4,48(sp)
   20438:	03112c23          	sw	a7,56(sp)
   2043c:	03d12023          	sw	t4,32(sp)
   20440:	03112423          	sw	a7,40(sp)
   20444:	02c12623          	sw	a2,44(sp)
   20448:	01135313          	srli	t1,t1,0x11
   2044c:	01f5d593          	srli	a1,a1,0x1f
   20450:	02010e13          	addi	t3,sp,32
   20454:	02c10713          	addi	a4,sp,44
   20458:	00361893          	slli	a7,a2,0x3
   2045c:	ffc72603          	lw	a2,-4(a4)
   20460:	ffc70713          	addi	a4,a4,-4
   20464:	01d65693          	srli	a3,a2,0x1d
   20468:	0116e6b3          	or	a3,a3,a7
   2046c:	00d72223          	sw	a3,4(a4)
   20470:	feee14e3          	bne	t3,a4,20458 <__subtf3+0xe0>
   20474:	02012683          	lw	a3,32(sp)
   20478:	000088b7          	lui	a7,0x8
   2047c:	fff88893          	addi	a7,a7,-1 # 7fff <__malloc_lock+0x67>
   20480:	00369693          	slli	a3,a3,0x3
   20484:	02d12023          	sw	a3,32(sp)
   20488:	31130e63          	beq	t1,a7,207a4 <__subtf3+0x42c>
   2048c:	0015c593          	xori	a1,a1,1
   20490:	40690533          	sub	a0,s2,t1
   20494:	20b40463          	beq	s0,a1,2069c <__subtf3+0x324>
   20498:	00a04463          	bgtz	a0,204a0 <__subtf3+0x128>
   2049c:	6380106f          	j	21ad4 <__subtf3+0x175c>
   204a0:	01412583          	lw	a1,20(sp)
   204a4:	01812e83          	lw	t4,24(sp)
   204a8:	01c12603          	lw	a2,28(sp)
   204ac:	46030c63          	beqz	t1,20924 <__subtf3+0x5ac>
   204b0:	1f190ee3          	beq	s2,a7,20eac <__subtf3+0xb34>
   204b4:	02c12783          	lw	a5,44(sp)
   204b8:	000808b7          	lui	a7,0x80
   204bc:	07400693          	li	a3,116
   204c0:	0117e7b3          	or	a5,a5,a7
   204c4:	02f12623          	sw	a5,44(sp)
   204c8:	48a6d863          	bge	a3,a0,20958 <__subtf3+0x5e0>
   204cc:	00000513          	li	a0,0
   204d0:	00000893          	li	a7,0
   204d4:	00000313          	li	t1,0
   204d8:	00100713          	li	a4,1
   204dc:	406587b3          	sub	a5,a1,t1
   204e0:	40e80733          	sub	a4,a6,a4
   204e4:	00e836b3          	sltu	a3,a6,a4
   204e8:	00f5be33          	sltu	t3,a1,a5
   204ec:	000e0f93          	mv	t6,t3
   204f0:	40d78f33          	sub	t5,a5,a3
   204f4:	00e87463          	bgeu	a6,a4,204fc <__subtf3+0x184>
   204f8:	18b30ce3          	beq	t1,a1,20e90 <__subtf3+0xb18>
   204fc:	411e86b3          	sub	a3,t4,a7
   20500:	00deb7b3          	sltu	a5,t4,a3
   20504:	41f686b3          	sub	a3,a3,t6
   20508:	180e1ae3          	bnez	t3,20e9c <__subtf3+0xb24>
   2050c:	00f50533          	add	a0,a0,a5
   20510:	40a60533          	sub	a0,a2,a0
   20514:	000807b7          	lui	a5,0x80
   20518:	02d12c23          	sw	a3,56(sp)
   2051c:	02a12e23          	sw	a0,60(sp)
   20520:	03e12a23          	sw	t5,52(sp)
   20524:	02e12823          	sw	a4,48(sp)
   20528:	00f576b3          	and	a3,a0,a5
   2052c:	74068063          	beqz	a3,20c6c <__subtf3+0x8f4>
   20530:	fff78793          	addi	a5,a5,-1 # 7ffff <__alt_data_end+0x3ffff>
   20534:	00f57533          	and	a0,a0,a5
   20538:	02a12e23          	sw	a0,60(sp)
   2053c:	34051ce3          	bnez	a0,21094 <__subtf3+0xd1c>
   20540:	03812503          	lw	a0,56(sp)
   20544:	300508e3          	beqz	a0,21054 <__subtf3+0xcdc>
   20548:	9ddfd0ef          	jal	ra,1df24 <__clzsi2>
   2054c:	01450593          	addi	a1,a0,20
   20550:	01f5f313          	andi	t1,a1,31
   20554:	4055d713          	srai	a4,a1,0x5
   20558:	560312e3          	bnez	t1,212bc <__subtf3+0xf44>
   2055c:	40e00633          	neg	a2,a4
   20560:	00261613          	slli	a2,a2,0x2
   20564:	00c60693          	addi	a3,a2,12
   20568:	03010793          	addi	a5,sp,48
   2056c:	00d786b3          	add	a3,a5,a3
   20570:	40c00633          	neg	a2,a2
   20574:	0006a883          	lw	a7,0(a3)
   20578:	00c68833          	add	a6,a3,a2
   2057c:	00068513          	mv	a0,a3
   20580:	01182023          	sw	a7,0(a6)
   20584:	ffc68693          	addi	a3,a3,-4
   20588:	fef516e3          	bne	a0,a5,20574 <__subtf3+0x1fc>
   2058c:	fff70713          	addi	a4,a4,-1
   20590:	fff00693          	li	a3,-1
   20594:	02d70a63          	beq	a4,a3,205c8 <__subtf3+0x250>
   20598:	00170713          	addi	a4,a4,1
   2059c:	00271713          	slli	a4,a4,0x2
   205a0:	00800613          	li	a2,8
   205a4:	00078693          	mv	a3,a5
   205a8:	00c76a63          	bltu	a4,a2,205bc <__subtf3+0x244>
   205ac:	02012823          	sw	zero,48(sp)
   205b0:	0007a223          	sw	zero,4(a5)
   205b4:	03810693          	addi	a3,sp,56
   205b8:	ff870713          	addi	a4,a4,-8
   205bc:	00400613          	li	a2,4
   205c0:	00c76463          	bltu	a4,a2,205c8 <__subtf3+0x250>
   205c4:	0006a023          	sw	zero,0(a3)
   205c8:	0b25c0e3          	blt	a1,s2,20e68 <__subtf3+0xaf0>
   205cc:	412586b3          	sub	a3,a1,s2
   205d0:	00168693          	addi	a3,a3,1
   205d4:	4056d613          	srai	a2,a3,0x5
   205d8:	01f6f693          	andi	a3,a3,31
   205dc:	760604e3          	beqz	a2,21544 <__subtf3+0x11cc>
   205e0:	00261513          	slli	a0,a2,0x2
   205e4:	00078593          	mv	a1,a5
   205e8:	00f50533          	add	a0,a0,a5
   205ec:	00000713          	li	a4,0
   205f0:	0005a803          	lw	a6,0(a1)
   205f4:	00458593          	addi	a1,a1,4
   205f8:	01076733          	or	a4,a4,a6
   205fc:	feb51ae3          	bne	a0,a1,205f0 <__subtf3+0x278>
   20600:	00060593          	mv	a1,a2
   20604:	00300813          	li	a6,3
   20608:	40c80833          	sub	a6,a6,a2
   2060c:	300696e3          	bnez	a3,21118 <__subtf3+0xda0>
   20610:	00078593          	mv	a1,a5
   20614:	00261893          	slli	a7,a2,0x2
   20618:	01158533          	add	a0,a1,a7
   2061c:	00052503          	lw	a0,0(a0)
   20620:	00168693          	addi	a3,a3,1
   20624:	00458593          	addi	a1,a1,4
   20628:	fea5ae23          	sw	a0,-4(a1)
   2062c:	fed856e3          	bge	a6,a3,20618 <__subtf3+0x2a0>
   20630:	00400693          	li	a3,4
   20634:	40c68633          	sub	a2,a3,a2
   20638:	00400693          	li	a3,4
   2063c:	03012583          	lw	a1,48(sp)
   20640:	02d60e63          	beq	a2,a3,2067c <__subtf3+0x304>
   20644:	00400693          	li	a3,4
   20648:	40c686b3          	sub	a3,a3,a2
   2064c:	00269693          	slli	a3,a3,0x2
   20650:	00261613          	slli	a2,a2,0x2
   20654:	00800513          	li	a0,8
   20658:	00c78633          	add	a2,a5,a2
   2065c:	00a6ea63          	bltu	a3,a0,20670 <__subtf3+0x2f8>
   20660:	00062023          	sw	zero,0(a2)
   20664:	00062223          	sw	zero,4(a2)
   20668:	ff868693          	addi	a3,a3,-8
   2066c:	00860613          	addi	a2,a2,8
   20670:	00400513          	li	a0,4
   20674:	00a6e463          	bltu	a3,a0,2067c <__subtf3+0x304>
   20678:	00062023          	sw	zero,0(a2)
   2067c:	00e03733          	snez	a4,a4
   20680:	00b76733          	or	a4,a4,a1
   20684:	02e12823          	sw	a4,48(sp)
   20688:	00777693          	andi	a3,a4,7
   2068c:	03c12603          	lw	a2,60(sp)
   20690:	00000913          	li	s2,0
   20694:	5e069463          	bnez	a3,20c7c <__subtf3+0x904>
   20698:	6240006f          	j	20cbc <__subtf3+0x944>
   2069c:	00a04463          	bgtz	a0,206a4 <__subtf3+0x32c>
   206a0:	4440106f          	j	21ae4 <__subtf3+0x176c>
   206a4:	01412f03          	lw	t5,20(sp)
   206a8:	01812e83          	lw	t4,24(sp)
   206ac:	01c12603          	lw	a2,28(sp)
   206b0:	4a031c63          	bnez	t1,20b68 <__subtf3+0x7f0>
   206b4:	02412303          	lw	t1,36(sp)
   206b8:	02812583          	lw	a1,40(sp)
   206bc:	02c12783          	lw	a5,44(sp)
   206c0:	00b36fb3          	or	t6,t1,a1
   206c4:	00ffefb3          	or	t6,t6,a5
   206c8:	00dfefb3          	or	t6,t6,a3
   206cc:	640f8ee3          	beqz	t6,21528 <__subtf3+0x11b0>
   206d0:	fff50f93          	addi	t6,a0,-1
   206d4:	580f86e3          	beqz	t6,21460 <__subtf3+0x10e8>
   206d8:	6d150863          	beq	a0,a7,20da8 <__subtf3+0xa30>
   206dc:	07400693          	li	a3,116
   206e0:	4bf6c263          	blt	a3,t6,20b84 <__subtf3+0x80c>
   206e4:	000f8513          	mv	a0,t6
   206e8:	40555893          	srai	a7,a0,0x5
   206ec:	01f57513          	andi	a0,a0,31
   206f0:	5a0888e3          	beqz	a7,214a0 <__subtf3+0x1128>
   206f4:	00289f93          	slli	t6,a7,0x2
   206f8:	00ef8fb3          	add	t6,t6,a4
   206fc:	00070593          	mv	a1,a4
   20700:	00000693          	li	a3,0
   20704:	0005a303          	lw	t1,0(a1)
   20708:	00458593          	addi	a1,a1,4
   2070c:	0066e6b3          	or	a3,a3,t1
   20710:	fff59ae3          	bne	a1,t6,20704 <__subtf3+0x38c>
   20714:	00088593          	mv	a1,a7
   20718:	00300313          	li	t1,3
   2071c:	41130333          	sub	t1,t1,a7
   20720:	620518e3          	bnez	a0,21550 <__subtf3+0x11d8>
   20724:	00289593          	slli	a1,a7,0x2
   20728:	00b707b3          	add	a5,a4,a1
   2072c:	0007a783          	lw	a5,0(a5)
   20730:	00150513          	addi	a0,a0,1
   20734:	00470713          	addi	a4,a4,4
   20738:	fef72e23          	sw	a5,-4(a4)
   2073c:	fea356e3          	bge	t1,a0,20728 <__subtf3+0x3b0>
   20740:	00400793          	li	a5,4
   20744:	411787b3          	sub	a5,a5,a7
   20748:	00400713          	li	a4,4
   2074c:	02012583          	lw	a1,32(sp)
   20750:	02e78e63          	beq	a5,a4,2078c <__subtf3+0x414>
   20754:	00400713          	li	a4,4
   20758:	40f70733          	sub	a4,a4,a5
   2075c:	00271713          	slli	a4,a4,0x2
   20760:	00279793          	slli	a5,a5,0x2
   20764:	00800513          	li	a0,8
   20768:	00fe07b3          	add	a5,t3,a5
   2076c:	00a76a63          	bltu	a4,a0,20780 <__subtf3+0x408>
   20770:	0007a023          	sw	zero,0(a5)
   20774:	0007a223          	sw	zero,4(a5)
   20778:	ff870713          	addi	a4,a4,-8
   2077c:	00878793          	addi	a5,a5,8
   20780:	00400513          	li	a0,4
   20784:	00a76463          	bltu	a4,a0,2078c <__subtf3+0x414>
   20788:	0007a023          	sw	zero,0(a5)
   2078c:	00d03733          	snez	a4,a3
   20790:	02812783          	lw	a5,40(sp)
   20794:	02412683          	lw	a3,36(sp)
   20798:	02c12503          	lw	a0,44(sp)
   2079c:	00b76733          	or	a4,a4,a1
   207a0:	3f40006f          	j	20b94 <__subtf3+0x81c>
   207a4:	02412703          	lw	a4,36(sp)
   207a8:	02812e03          	lw	t3,40(sp)
   207ac:	02c12603          	lw	a2,44(sp)
   207b0:	40690533          	sub	a0,s2,t1
   207b4:	01c768b3          	or	a7,a4,t3
   207b8:	00c8e8b3          	or	a7,a7,a2
   207bc:	00d8e8b3          	or	a7,a7,a3
   207c0:	24089a63          	bnez	a7,20a14 <__subtf3+0x69c>
   207c4:	0015c593          	xori	a1,a1,1
   207c8:	00000613          	li	a2,0
   207cc:	00000e13          	li	t3,0
   207d0:	24b40663          	beq	s0,a1,20a1c <__subtf3+0x6a4>
   207d4:	62050263          	beqz	a0,20df8 <__subtf3+0xa80>
   207d8:	41230eb3          	sub	t4,t1,s2
   207dc:	76091463          	bnez	s2,20f44 <__subtf3+0xbcc>
   207e0:	01412383          	lw	t2,20(sp)
   207e4:	01812283          	lw	t0,24(sp)
   207e8:	01c12503          	lw	a0,28(sp)
   207ec:	0053e733          	or	a4,t2,t0
   207f0:	00a76733          	or	a4,a4,a0
   207f4:	01076733          	or	a4,a4,a6
   207f8:	360706e3          	beqz	a4,21364 <__subtf3+0xfec>
   207fc:	fffe8713          	addi	a4,t4,-1
   20800:	6a0708e3          	beqz	a4,216b0 <__subtf3+0x1338>
   20804:	00008837          	lui	a6,0x8
   20808:	fff80813          	addi	a6,a6,-1 # 7fff <__malloc_lock+0x67>
   2080c:	270e86e3          	beq	t4,a6,21278 <__subtf3+0xf00>
   20810:	07400813          	li	a6,116
   20814:	74e84a63          	blt	a6,a4,20f68 <__subtf3+0xbf0>
   20818:	00070e93          	mv	t4,a4
   2081c:	41fed413          	srai	s0,t4,0x1f
   20820:	01f47713          	andi	a4,s0,31
   20824:	01d70733          	add	a4,a4,t4
   20828:	01f00813          	li	a6,31
   2082c:	40575713          	srai	a4,a4,0x5
   20830:	01d84463          	blt	a6,t4,20838 <__subtf3+0x4c0>
   20834:	1300106f          	j	21964 <__subtf3+0x15ec>
   20838:	00078393          	mv	t2,a5
   2083c:	00000813          	li	a6,0
   20840:	00000293          	li	t0,0
   20844:	0003a903          	lw	s2,0(t2)
   20848:	00128293          	addi	t0,t0,1
   2084c:	00438393          	addi	t2,t2,4
   20850:	01286833          	or	a6,a6,s2
   20854:	fee2c8e3          	blt	t0,a4,20844 <__subtf3+0x4cc>
   20858:	00070393          	mv	t2,a4
   2085c:	00300913          	li	s2,3
   20860:	01fef293          	andi	t0,t4,31
   20864:	40e90933          	sub	s2,s2,a4
   20868:	580290e3          	bnez	t0,215e8 <__subtf3+0x1270>
   2086c:	00271e93          	slli	t4,a4,0x2
   20870:	01d78533          	add	a0,a5,t4
   20874:	00052503          	lw	a0,0(a0)
   20878:	00128293          	addi	t0,t0,1
   2087c:	00478793          	addi	a5,a5,4
   20880:	fea7ae23          	sw	a0,-4(a5)
   20884:	fe5956e3          	bge	s2,t0,20870 <__subtf3+0x4f8>
   20888:	00400793          	li	a5,4
   2088c:	40e787b3          	sub	a5,a5,a4
   20890:	00300713          	li	a4,3
   20894:	01012283          	lw	t0,16(sp)
   20898:	06f74463          	blt	a4,a5,20900 <__subtf3+0x588>
   2089c:	00300513          	li	a0,3
   208a0:	00400713          	li	a4,4
   208a4:	00f54663          	blt	a0,a5,208b0 <__subtf3+0x538>
   208a8:	40f70733          	sub	a4,a4,a5
   208ac:	00271713          	slli	a4,a4,0x2
   208b0:	00279793          	slli	a5,a5,0x2
   208b4:	00800513          	li	a0,8
   208b8:	00ff07b3          	add	a5,t5,a5
   208bc:	00a76a63          	bltu	a4,a0,208d0 <__subtf3+0x558>
   208c0:	0007a023          	sw	zero,0(a5)
   208c4:	0007a223          	sw	zero,4(a5)
   208c8:	ff870713          	addi	a4,a4,-8
   208cc:	00878793          	addi	a5,a5,8
   208d0:	00400513          	li	a0,4
   208d4:	00a76863          	bltu	a4,a0,208e4 <__subtf3+0x56c>
   208d8:	0007a023          	sw	zero,0(a5)
   208dc:	ffc70713          	addi	a4,a4,-4
   208e0:	00478793          	addi	a5,a5,4
   208e4:	00200513          	li	a0,2
   208e8:	00a76863          	bltu	a4,a0,208f8 <__subtf3+0x580>
   208ec:	00079023          	sh	zero,0(a5)
   208f0:	ffe70713          	addi	a4,a4,-2
   208f4:	00278793          	addi	a5,a5,2
   208f8:	00070463          	beqz	a4,20900 <__subtf3+0x588>
   208fc:	00078023          	sb	zero,0(a5)
   20900:	01412503          	lw	a0,20(sp)
   20904:	01812e83          	lw	t4,24(sp)
   20908:	01c12783          	lw	a5,28(sp)
   2090c:	01003733          	snez	a4,a6
   20910:	00576733          	or	a4,a4,t0
   20914:	40a88833          	sub	a6,a7,a0
   20918:	41de0fb3          	sub	t6,t3,t4
   2091c:	40f60633          	sub	a2,a2,a5
   20920:	65c0006f          	j	20f7c <__subtf3+0xc04>
   20924:	02412283          	lw	t0,36(sp)
   20928:	02812f83          	lw	t6,40(sp)
   2092c:	02c12783          	lw	a5,44(sp)
   20930:	01f2e333          	or	t1,t0,t6
   20934:	00f36333          	or	t1,t1,a5
   20938:	00d36333          	or	t1,t1,a3
   2093c:	6e030e63          	beqz	t1,21038 <__subtf3+0xcc0>
   20940:	fff50313          	addi	t1,a0,-1
   20944:	380302e3          	beqz	t1,214c8 <__subtf3+0x1150>
   20948:	57150263          	beq	a0,a7,20eac <__subtf3+0xb34>
   2094c:	07400693          	li	a3,116
   20950:	b666cee3          	blt	a3,t1,204cc <__subtf3+0x154>
   20954:	00030513          	mv	a0,t1
   20958:	40555393          	srai	t2,a0,0x5
   2095c:	01f57513          	andi	a0,a0,31
   20960:	460384e3          	beqz	t2,215c8 <__subtf3+0x1250>
   20964:	00239f13          	slli	t5,t2,0x2
   20968:	00ef0f33          	add	t5,t5,a4
   2096c:	00070693          	mv	a3,a4
   20970:	00000893          	li	a7,0
   20974:	0006a303          	lw	t1,0(a3)
   20978:	00468693          	addi	a3,a3,4
   2097c:	0068e8b3          	or	a7,a7,t1
   20980:	fedf1ae3          	bne	t5,a3,20974 <__subtf3+0x5fc>
   20984:	00038693          	mv	a3,t2
   20988:	00300313          	li	t1,3
   2098c:	40730333          	sub	t1,t1,t2
   20990:	000512e3          	bnez	a0,21194 <__subtf3+0xe1c>
   20994:	00239693          	slli	a3,t2,0x2
   20998:	00d707b3          	add	a5,a4,a3
   2099c:	0007a783          	lw	a5,0(a5)
   209a0:	00150513          	addi	a0,a0,1
   209a4:	00470713          	addi	a4,a4,4
   209a8:	fef72e23          	sw	a5,-4(a4)
   209ac:	fea356e3          	bge	t1,a0,20998 <__subtf3+0x620>
   209b0:	00400793          	li	a5,4
   209b4:	407787b3          	sub	a5,a5,t2
   209b8:	00400713          	li	a4,4
   209bc:	02012683          	lw	a3,32(sp)
   209c0:	02e78e63          	beq	a5,a4,209fc <__subtf3+0x684>
   209c4:	00400713          	li	a4,4
   209c8:	40f70733          	sub	a4,a4,a5
   209cc:	00271713          	slli	a4,a4,0x2
   209d0:	00279793          	slli	a5,a5,0x2
   209d4:	00800513          	li	a0,8
   209d8:	00fe07b3          	add	a5,t3,a5
   209dc:	00a76a63          	bltu	a4,a0,209f0 <__subtf3+0x678>
   209e0:	0007a023          	sw	zero,0(a5)
   209e4:	0007a223          	sw	zero,4(a5)
   209e8:	ff870713          	addi	a4,a4,-8
   209ec:	00878793          	addi	a5,a5,8
   209f0:	00400513          	li	a0,4
   209f4:	00a76463          	bltu	a4,a0,209fc <__subtf3+0x684>
   209f8:	0007a023          	sw	zero,0(a5)
   209fc:	01103733          	snez	a4,a7
   20a00:	02412303          	lw	t1,36(sp)
   20a04:	02812883          	lw	a7,40(sp)
   20a08:	02c12503          	lw	a0,44(sp)
   20a0c:	00d76733          	or	a4,a4,a3
   20a10:	acdff06f          	j	204dc <__subtf3+0x164>
   20a14:	00070893          	mv	a7,a4
   20a18:	dab41ee3          	bne	s0,a1,207d4 <__subtf3+0x45c>
   20a1c:	4a050c63          	beqz	a0,20ed4 <__subtf3+0xb5c>
   20a20:	41230eb3          	sub	t4,t1,s2
   20a24:	7e091863          	bnez	s2,21214 <__subtf3+0xe9c>
   20a28:	01412583          	lw	a1,20(sp)
   20a2c:	01812703          	lw	a4,24(sp)
   20a30:	01c12503          	lw	a0,28(sp)
   20a34:	00e5e2b3          	or	t0,a1,a4
   20a38:	00a2e2b3          	or	t0,t0,a0
   20a3c:	0102e2b3          	or	t0,t0,a6
   20a40:	5a0284e3          	beqz	t0,217e8 <__subtf3+0x1470>
   20a44:	fffe8293          	addi	t0,t4,-1
   20a48:	720284e3          	beqz	t0,21970 <__subtf3+0x15f8>
   20a4c:	00008737          	lui	a4,0x8
   20a50:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   20a54:	58ee82e3          	beq	t4,a4,217d8 <__subtf3+0x1460>
   20a58:	07400713          	li	a4,116
   20a5c:	7c574e63          	blt	a4,t0,21238 <__subtf3+0xec0>
   20a60:	00028e93          	mv	t4,t0
   20a64:	41fed393          	srai	t2,t4,0x1f
   20a68:	01f3f593          	andi	a1,t2,31
   20a6c:	01d585b3          	add	a1,a1,t4
   20a70:	01f00713          	li	a4,31
   20a74:	4055d593          	srai	a1,a1,0x5
   20a78:	7bd75ee3          	bge	a4,t4,21a34 <__subtf3+0x16bc>
   20a7c:	00078293          	mv	t0,a5
   20a80:	00000713          	li	a4,0
   20a84:	00000813          	li	a6,0
   20a88:	0002a903          	lw	s2,0(t0)
   20a8c:	00180813          	addi	a6,a6,1
   20a90:	00428293          	addi	t0,t0,4
   20a94:	01276733          	or	a4,a4,s2
   20a98:	feb848e3          	blt	a6,a1,20a88 <__subtf3+0x710>
   20a9c:	00058293          	mv	t0,a1
   20aa0:	00300913          	li	s2,3
   20aa4:	01fef813          	andi	a6,t4,31
   20aa8:	40b90933          	sub	s2,s2,a1
   20aac:	620818e3          	bnez	a6,218dc <__subtf3+0x1564>
   20ab0:	00259e93          	slli	t4,a1,0x2
   20ab4:	01d78533          	add	a0,a5,t4
   20ab8:	00052503          	lw	a0,0(a0)
   20abc:	00180813          	addi	a6,a6,1
   20ac0:	00478793          	addi	a5,a5,4
   20ac4:	fea7ae23          	sw	a0,-4(a5)
   20ac8:	ff0956e3          	bge	s2,a6,20ab4 <__subtf3+0x73c>
   20acc:	00400793          	li	a5,4
   20ad0:	40b785b3          	sub	a1,a5,a1
   20ad4:	00300793          	li	a5,3
   20ad8:	01012803          	lw	a6,16(sp)
   20adc:	06b7c463          	blt	a5,a1,20b44 <__subtf3+0x7cc>
   20ae0:	00300793          	li	a5,3
   20ae4:	00400513          	li	a0,4
   20ae8:	00b7c663          	blt	a5,a1,20af4 <__subtf3+0x77c>
   20aec:	40b50533          	sub	a0,a0,a1
   20af0:	00251513          	slli	a0,a0,0x2
   20af4:	00259593          	slli	a1,a1,0x2
   20af8:	00800e93          	li	t4,8
   20afc:	00bf07b3          	add	a5,t5,a1
   20b00:	01d56a63          	bltu	a0,t4,20b14 <__subtf3+0x79c>
   20b04:	0007a023          	sw	zero,0(a5)
   20b08:	0007a223          	sw	zero,4(a5)
   20b0c:	ff850513          	addi	a0,a0,-8
   20b10:	00878793          	addi	a5,a5,8
   20b14:	00400593          	li	a1,4
   20b18:	00b56863          	bltu	a0,a1,20b28 <__subtf3+0x7b0>
   20b1c:	0007a023          	sw	zero,0(a5)
   20b20:	ffc50513          	addi	a0,a0,-4
   20b24:	00478793          	addi	a5,a5,4
   20b28:	00200593          	li	a1,2
   20b2c:	00b56863          	bltu	a0,a1,20b3c <__subtf3+0x7c4>
   20b30:	00079023          	sh	zero,0(a5)
   20b34:	ffe50513          	addi	a0,a0,-2
   20b38:	00278793          	addi	a5,a5,2
   20b3c:	00050463          	beqz	a0,20b44 <__subtf3+0x7cc>
   20b40:	00078023          	sb	zero,0(a5)
   20b44:	01412583          	lw	a1,20(sp)
   20b48:	01812783          	lw	a5,24(sp)
   20b4c:	01c12503          	lw	a0,28(sp)
   20b50:	00e03733          	snez	a4,a4
   20b54:	01076733          	or	a4,a4,a6
   20b58:	00b885b3          	add	a1,a7,a1
   20b5c:	00fe07b3          	add	a5,t3,a5
   20b60:	00a60633          	add	a2,a2,a0
   20b64:	6e00006f          	j	21244 <__subtf3+0xecc>
   20b68:	25190063          	beq	s2,a7,20da8 <__subtf3+0xa30>
   20b6c:	02c12783          	lw	a5,44(sp)
   20b70:	000805b7          	lui	a1,0x80
   20b74:	07400693          	li	a3,116
   20b78:	00b7e7b3          	or	a5,a5,a1
   20b7c:	02f12623          	sw	a5,44(sp)
   20b80:	b6a6d4e3          	bge	a3,a0,206e8 <__subtf3+0x370>
   20b84:	00000513          	li	a0,0
   20b88:	00000793          	li	a5,0
   20b8c:	00000693          	li	a3,0
   20b90:	00100713          	li	a4,1
   20b94:	00e80733          	add	a4,a6,a4
   20b98:	01e685b3          	add	a1,a3,t5
   20b9c:	01073833          	sltu	a6,a4,a6
   20ba0:	01058833          	add	a6,a1,a6
   20ba4:	00d5b6b3          	sltu	a3,a1,a3
   20ba8:	00b835b3          	sltu	a1,a6,a1
   20bac:	01d78eb3          	add	t4,a5,t4
   20bb0:	00b6e6b3          	or	a3,a3,a1
   20bb4:	00de86b3          	add	a3,t4,a3
   20bb8:	00feb7b3          	sltu	a5,t4,a5
   20bbc:	01d6beb3          	sltu	t4,a3,t4
   20bc0:	01d7e7b3          	or	a5,a5,t4
   20bc4:	00c50633          	add	a2,a0,a2
   20bc8:	00c787b3          	add	a5,a5,a2
   20bcc:	02d12c23          	sw	a3,56(sp)
   20bd0:	000806b7          	lui	a3,0x80
   20bd4:	02e12823          	sw	a4,48(sp)
   20bd8:	03012a23          	sw	a6,52(sp)
   20bdc:	00d7f6b3          	and	a3,a5,a3
   20be0:	08068463          	beqz	a3,20c68 <__subtf3+0x8f0>
   20be4:	fff806b7          	lui	a3,0xfff80
   20be8:	fff68693          	addi	a3,a3,-1 # fff7ffff <__alt_data_end+0xfff3ffff>
   20bec:	00d7f6b3          	and	a3,a5,a3
   20bf0:	03010793          	addi	a5,sp,48
   20bf4:	02d12e23          	sw	a3,60(sp)
   20bf8:	00190913          	addi	s2,s2,1
   20bfc:	01f71513          	slli	a0,a4,0x1f
   20c00:	00078693          	mv	a3,a5
   20c04:	03c10813          	addi	a6,sp,60
   20c08:	00175593          	srli	a1,a4,0x1
   20c0c:	0046a703          	lw	a4,4(a3)
   20c10:	00468693          	addi	a3,a3,4
   20c14:	01f71613          	slli	a2,a4,0x1f
   20c18:	00b66633          	or	a2,a2,a1
   20c1c:	fec6ae23          	sw	a2,-4(a3)
   20c20:	ff0694e3          	bne	a3,a6,20c08 <__subtf3+0x890>
   20c24:	03c12603          	lw	a2,60(sp)
   20c28:	03012703          	lw	a4,48(sp)
   20c2c:	00a036b3          	snez	a3,a0
   20c30:	00165613          	srli	a2,a2,0x1
   20c34:	00e6e733          	or	a4,a3,a4
   20c38:	000086b7          	lui	a3,0x8
   20c3c:	02c12e23          	sw	a2,60(sp)
   20c40:	02e12823          	sw	a4,48(sp)
   20c44:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   20c48:	22d91e63          	bne	s2,a3,20e84 <__subtf3+0xb0c>
   20c4c:	00008937          	lui	s2,0x8
   20c50:	02012e23          	sw	zero,60(sp)
   20c54:	02012c23          	sw	zero,56(sp)
   20c58:	02012a23          	sw	zero,52(sp)
   20c5c:	02012823          	sw	zero,48(sp)
   20c60:	fff90913          	addi	s2,s2,-1 # 7fff <__malloc_lock+0x67>
   20c64:	0840006f          	j	20ce8 <__subtf3+0x970>
   20c68:	02f12e23          	sw	a5,60(sp)
   20c6c:	00777693          	andi	a3,a4,7
   20c70:	03010793          	addi	a5,sp,48
   20c74:	06068a63          	beqz	a3,20ce8 <__subtf3+0x970>
   20c78:	03c12603          	lw	a2,60(sp)
   20c7c:	00f77693          	andi	a3,a4,15
   20c80:	00400593          	li	a1,4
   20c84:	02b68c63          	beq	a3,a1,20cbc <__subtf3+0x944>
   20c88:	03412683          	lw	a3,52(sp)
   20c8c:	00470713          	addi	a4,a4,4
   20c90:	03812503          	lw	a0,56(sp)
   20c94:	00473593          	sltiu	a1,a4,4
   20c98:	00b685b3          	add	a1,a3,a1
   20c9c:	00d5b6b3          	sltu	a3,a1,a3
   20ca0:	00d506b3          	add	a3,a0,a3
   20ca4:	00a6b533          	sltu	a0,a3,a0
   20ca8:	00a60633          	add	a2,a2,a0
   20cac:	02e12823          	sw	a4,48(sp)
   20cb0:	02b12a23          	sw	a1,52(sp)
   20cb4:	02d12c23          	sw	a3,56(sp)
   20cb8:	02c12e23          	sw	a2,60(sp)
   20cbc:	00080737          	lui	a4,0x80
   20cc0:	00e67733          	and	a4,a2,a4
   20cc4:	02070263          	beqz	a4,20ce8 <__subtf3+0x970>
   20cc8:	00008737          	lui	a4,0x8
   20ccc:	00190913          	addi	s2,s2,1
   20cd0:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   20cd4:	0ee91c63          	bne	s2,a4,20dcc <__subtf3+0xa54>
   20cd8:	02012e23          	sw	zero,60(sp)
   20cdc:	02012c23          	sw	zero,56(sp)
   20ce0:	02012a23          	sw	zero,52(sp)
   20ce4:	02012823          	sw	zero,48(sp)
   20ce8:	03012683          	lw	a3,48(sp)
   20cec:	03c10593          	addi	a1,sp,60
   20cf0:	0036d613          	srli	a2,a3,0x3
   20cf4:	0047a683          	lw	a3,4(a5)
   20cf8:	00478793          	addi	a5,a5,4
   20cfc:	01d69713          	slli	a4,a3,0x1d
   20d00:	00c76733          	or	a4,a4,a2
   20d04:	fee7ae23          	sw	a4,-4(a5)
   20d08:	feb794e3          	bne	a5,a1,20cf0 <__subtf3+0x978>
   20d0c:	03c12783          	lw	a5,60(sp)
   20d10:	000086b7          	lui	a3,0x8
   20d14:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   20d18:	03012703          	lw	a4,48(sp)
   20d1c:	03412583          	lw	a1,52(sp)
   20d20:	03812603          	lw	a2,56(sp)
   20d24:	0037d793          	srli	a5,a5,0x3
   20d28:	04d90e63          	beq	s2,a3,20d84 <__subtf3+0xa0c>
   20d2c:	01079793          	slli	a5,a5,0x10
   20d30:	0107d793          	srli	a5,a5,0x10
   20d34:	00147413          	andi	s0,s0,1
   20d38:	01191913          	slli	s2,s2,0x11
   20d3c:	01195913          	srli	s2,s2,0x11
   20d40:	00f41413          	slli	s0,s0,0xf
   20d44:	01246433          	or	s0,s0,s2
   20d48:	00811723          	sh	s0,14(sp)
   20d4c:	00f11623          	sh	a5,12(sp)
   20d50:	00c12783          	lw	a5,12(sp)
   20d54:	05c12083          	lw	ra,92(sp)
   20d58:	05812403          	lw	s0,88(sp)
   20d5c:	00e4a023          	sw	a4,0(s1)
   20d60:	00b4a223          	sw	a1,4(s1)
   20d64:	00c4a423          	sw	a2,8(s1)
   20d68:	00f4a623          	sw	a5,12(s1)
   20d6c:	05012903          	lw	s2,80(sp)
   20d70:	04c12983          	lw	s3,76(sp)
   20d74:	00048513          	mv	a0,s1
   20d78:	05412483          	lw	s1,84(sp)
   20d7c:	06010113          	addi	sp,sp,96
   20d80:	00008067          	ret
   20d84:	00b76733          	or	a4,a4,a1
   20d88:	00c76733          	or	a4,a4,a2
   20d8c:	00f76733          	or	a4,a4,a5
   20d90:	04071863          	bnez	a4,20de0 <__subtf3+0xa68>
   20d94:	00147413          	andi	s0,s0,1
   20d98:	00000613          	li	a2,0
   20d9c:	00000593          	li	a1,0
   20da0:	00000793          	li	a5,0
   20da4:	f95ff06f          	j	20d38 <__subtf3+0x9c0>
   20da8:	03012823          	sw	a6,48(sp)
   20dac:	03e12a23          	sw	t5,52(sp)
   20db0:	03d12c23          	sw	t4,56(sp)
   20db4:	00080737          	lui	a4,0x80
   20db8:	02c12e23          	sw	a2,60(sp)
   20dbc:	00e67733          	and	a4,a2,a4
   20dc0:	00008937          	lui	s2,0x8
   20dc4:	03010793          	addi	a5,sp,48
   20dc8:	4c070863          	beqz	a4,21298 <__subtf3+0xf20>
   20dcc:	fff80737          	lui	a4,0xfff80
   20dd0:	fff70713          	addi	a4,a4,-1 # fff7ffff <__alt_data_end+0xfff3ffff>
   20dd4:	00e67733          	and	a4,a2,a4
   20dd8:	02e12e23          	sw	a4,60(sp)
   20ddc:	f0dff06f          	j	20ce8 <__subtf3+0x970>
   20de0:	00000413          	li	s0,0
   20de4:	000087b7          	lui	a5,0x8
   20de8:	00000613          	li	a2,0
   20dec:	00000593          	li	a1,0
   20df0:	00000713          	li	a4,0
   20df4:	f45ff06f          	j	20d38 <__subtf3+0x9c0>
   20df8:	00008537          	lui	a0,0x8
   20dfc:	00190793          	addi	a5,s2,1 # 8001 <__malloc_lock+0x69>
   20e00:	ffe50713          	addi	a4,a0,-2 # 7ffe <__malloc_lock+0x66>
   20e04:	00e7f7b3          	and	a5,a5,a4
   20e08:	01412e83          	lw	t4,20(sp)
   20e0c:	01812303          	lw	t1,24(sp)
   20e10:	01c12f03          	lw	t5,28(sp)
   20e14:	18079e63          	bnez	a5,20fb0 <__subtf3+0xc38>
   20e18:	01c8e733          	or	a4,a7,t3
   20e1c:	006ee7b3          	or	a5,t4,t1
   20e20:	00d76733          	or	a4,a4,a3
   20e24:	01e7e7b3          	or	a5,a5,t5
   20e28:	00c76733          	or	a4,a4,a2
   20e2c:	0107e7b3          	or	a5,a5,a6
   20e30:	5a091e63          	bnez	s2,213ec <__subtf3+0x1074>
   20e34:	0c0784e3          	beqz	a5,216fc <__subtf3+0x1384>
   20e38:	0e0718e3          	bnez	a4,21728 <__subtf3+0x13b0>
   20e3c:	000807b7          	lui	a5,0x80
   20e40:	03012823          	sw	a6,48(sp)
   20e44:	03d12a23          	sw	t4,52(sp)
   20e48:	02612c23          	sw	t1,56(sp)
   20e4c:	03e12e23          	sw	t5,60(sp)
   20e50:	00ff77b3          	and	a5,t5,a5
   20e54:	000f0613          	mv	a2,t5
   20e58:	200784e3          	beqz	a5,21860 <__subtf3+0x14e8>
   20e5c:	00100913          	li	s2,1
   20e60:	03010793          	addi	a5,sp,48
   20e64:	f69ff06f          	j	20dcc <__subtf3+0xa54>
   20e68:	03c12603          	lw	a2,60(sp)
   20e6c:	fff806b7          	lui	a3,0xfff80
   20e70:	fff68693          	addi	a3,a3,-1 # fff7ffff <__alt_data_end+0xfff3ffff>
   20e74:	03012703          	lw	a4,48(sp)
   20e78:	00d67633          	and	a2,a2,a3
   20e7c:	40b90933          	sub	s2,s2,a1
   20e80:	02c12e23          	sw	a2,60(sp)
   20e84:	00777693          	andi	a3,a4,7
   20e88:	de069ae3          	bnez	a3,20c7c <__subtf3+0x904>
   20e8c:	e31ff06f          	j	20cbc <__subtf3+0x944>
   20e90:	fffe8693          	addi	a3,t4,-1
   20e94:	011eb7b3          	sltu	a5,t4,a7
   20e98:	411686b3          	sub	a3,a3,a7
   20e9c:	41d888b3          	sub	a7,a7,t4
   20ea0:	0018b893          	seqz	a7,a7
   20ea4:	0117e7b3          	or	a5,a5,a7
   20ea8:	e64ff06f          	j	2050c <__subtf3+0x194>
   20eac:	000807b7          	lui	a5,0x80
   20eb0:	03012823          	sw	a6,48(sp)
   20eb4:	02b12a23          	sw	a1,52(sp)
   20eb8:	03d12c23          	sw	t4,56(sp)
   20ebc:	02c12e23          	sw	a2,60(sp)
   20ec0:	00f677b3          	and	a5,a2,a5
   20ec4:	3c078a63          	beqz	a5,21298 <__subtf3+0xf20>
   20ec8:	00008937          	lui	s2,0x8
   20ecc:	03010793          	addi	a5,sp,48
   20ed0:	efdff06f          	j	20dcc <__subtf3+0xa54>
   20ed4:	00008eb7          	lui	t4,0x8
   20ed8:	00190313          	addi	t1,s2,1 # 8001 <__malloc_lock+0x69>
   20edc:	ffee8593          	addi	a1,t4,-2 # 7ffe <__malloc_lock+0x66>
   20ee0:	00b375b3          	and	a1,t1,a1
   20ee4:	01412703          	lw	a4,20(sp)
   20ee8:	01812783          	lw	a5,24(sp)
   20eec:	01c12503          	lw	a0,28(sp)
   20ef0:	3c059c63          	bnez	a1,212c8 <__subtf3+0xf50>
   20ef4:	00f765b3          	or	a1,a4,a5
   20ef8:	00a5e5b3          	or	a1,a1,a0
   20efc:	0105e5b3          	or	a1,a1,a6
   20f00:	76091863          	bnez	s2,21670 <__subtf3+0x12f8>
   20f04:	12058ce3          	beqz	a1,2183c <__subtf3+0x14c4>
   20f08:	01c8e5b3          	or	a1,a7,t3
   20f0c:	00d5e5b3          	or	a1,a1,a3
   20f10:	00c5e5b3          	or	a1,a1,a2
   20f14:	14059ce3          	bnez	a1,2186c <__subtf3+0x14f4>
   20f18:	02f12c23          	sw	a5,56(sp)
   20f1c:	000807b7          	lui	a5,0x80
   20f20:	03012823          	sw	a6,48(sp)
   20f24:	02e12a23          	sw	a4,52(sp)
   20f28:	02a12e23          	sw	a0,60(sp)
   20f2c:	00f577b3          	and	a5,a0,a5
   20f30:	120788e3          	beqz	a5,21860 <__subtf3+0x14e8>
   20f34:	00050613          	mv	a2,a0
   20f38:	00100913          	li	s2,1
   20f3c:	03010793          	addi	a5,sp,48
   20f40:	e8dff06f          	j	20dcc <__subtf3+0xa54>
   20f44:	00008737          	lui	a4,0x8
   20f48:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   20f4c:	32e30663          	beq	t1,a4,21278 <__subtf3+0xf00>
   20f50:	01c12503          	lw	a0,28(sp)
   20f54:	00080837          	lui	a6,0x80
   20f58:	07400713          	li	a4,116
   20f5c:	01056533          	or	a0,a0,a6
   20f60:	00a12e23          	sw	a0,28(sp)
   20f64:	8bd75ce3          	bge	a4,t4,2081c <__subtf3+0x4a4>
   20f68:	000e0f93          	mv	t6,t3
   20f6c:	00088813          	mv	a6,a7
   20f70:	00000e93          	li	t4,0
   20f74:	00000513          	li	a0,0
   20f78:	00100713          	li	a4,1
   20f7c:	40e68733          	sub	a4,a3,a4
   20f80:	00e6b7b3          	sltu	a5,a3,a4
   20f84:	0108b2b3          	sltu	t0,a7,a6
   20f88:	40f80f33          	sub	t5,a6,a5
   20f8c:	00e6f463          	bgeu	a3,a4,20f94 <__subtf3+0xc1c>
   20f90:	58a88063          	beq	a7,a0,21510 <__subtf3+0x1198>
   20f94:	01fe3533          	sltu	a0,t3,t6
   20f98:	405f86b3          	sub	a3,t6,t0
   20f9c:	5708ee63          	bltu	a7,a6,21518 <__subtf3+0x11a0>
   20fa0:	40a60533          	sub	a0,a2,a0
   20fa4:	00030913          	mv	s2,t1
   20fa8:	00058413          	mv	s0,a1
   20fac:	d68ff06f          	j	20514 <__subtf3+0x19c>
   20fb0:	411e8733          	sub	a4,t4,a7
   20fb4:	40d807b3          	sub	a5,a6,a3
   20fb8:	00eeb3b3          	sltu	t2,t4,a4
   20fbc:	00f83533          	sltu	a0,a6,a5
   20fc0:	00038993          	mv	s3,t2
   20fc4:	40a70733          	sub	a4,a4,a0
   20fc8:	41c30fb3          	sub	t6,t1,t3
   20fcc:	01c332b3          	sltu	t0,t1,t3
   20fd0:	04f87e63          	bgeu	a6,a5,2102c <__subtf3+0xcb4>
   20fd4:	05d89c63          	bne	a7,t4,2102c <__subtf3+0xcb4>
   20fd8:	ffff8f93          	addi	t6,t6,-1
   20fdc:	406e0533          	sub	a0,t3,t1
   20fe0:	00153513          	seqz	a0,a0
   20fe4:	00a2e2b3          	or	t0,t0,a0
   20fe8:	40cf0533          	sub	a0,t5,a2
   20fec:	40550533          	sub	a0,a0,t0
   20ff0:	000802b7          	lui	t0,0x80
   20ff4:	02a12e23          	sw	a0,60(sp)
   20ff8:	03f12c23          	sw	t6,56(sp)
   20ffc:	02e12a23          	sw	a4,52(sp)
   21000:	02f12823          	sw	a5,48(sp)
   21004:	005572b3          	and	t0,a0,t0
   21008:	36029e63          	bnez	t0,21384 <__subtf3+0x100c>
   2100c:	00e7e7b3          	or	a5,a5,a4
   21010:	01f7e7b3          	or	a5,a5,t6
   21014:	00a7e7b3          	or	a5,a5,a0
   21018:	3a079c63          	bnez	a5,213d0 <__subtf3+0x1058>
   2101c:	00000913          	li	s2,0
   21020:	00000413          	li	s0,0
   21024:	03010793          	addi	a5,sp,48
   21028:	cc1ff06f          	j	20ce8 <__subtf3+0x970>
   2102c:	413f8fb3          	sub	t6,t6,s3
   21030:	fa038ce3          	beqz	t2,20fe8 <__subtf3+0xc70>
   21034:	fa9ff06f          	j	20fdc <__subtf3+0xc64>
   21038:	03012823          	sw	a6,48(sp)
   2103c:	02b12a23          	sw	a1,52(sp)
   21040:	03d12c23          	sw	t4,56(sp)
   21044:	02c12e23          	sw	a2,60(sp)
   21048:	00050913          	mv	s2,a0
   2104c:	03010793          	addi	a5,sp,48
   21050:	c6dff06f          	j	20cbc <__subtf3+0x944>
   21054:	03412503          	lw	a0,52(sp)
   21058:	24051863          	bnez	a0,212a8 <__subtf3+0xf30>
   2105c:	03012983          	lw	s3,48(sp)
   21060:	00098513          	mv	a0,s3
   21064:	ec1fc0ef          	jal	ra,1df24 <__clzsi2>
   21068:	05450593          	addi	a1,a0,84
   2106c:	01f5f313          	andi	t1,a1,31
   21070:	4055d713          	srai	a4,a1,0x5
   21074:	ce030463          	beqz	t1,2055c <__subtf3+0x1e4>
   21078:	05f00793          	li	a5,95
   2107c:	22b7dee3          	bge	a5,a1,21ab8 <__subtf3+0x1740>
   21080:	006999b3          	sll	s3,s3,t1
   21084:	03312e23          	sw	s3,60(sp)
   21088:	00200713          	li	a4,2
   2108c:	03010793          	addi	a5,sp,48
   21090:	d08ff06f          	j	20598 <__subtf3+0x220>
   21094:	e91fc0ef          	jal	ra,1df24 <__clzsi2>
   21098:	ff450593          	addi	a1,a0,-12
   2109c:	00058313          	mv	t1,a1
   210a0:	02000e93          	li	t4,32
   210a4:	40be8eb3          	sub	t4,t4,a1
   210a8:	00000713          	li	a4,0
   210ac:	40e008b3          	neg	a7,a4
   210b0:	00289893          	slli	a7,a7,0x2
   210b4:	03010793          	addi	a5,sp,48
   210b8:	01178633          	add	a2,a5,a7
   210bc:	00300813          	li	a6,3
   210c0:	411008b3          	neg	a7,a7
   210c4:	00c62683          	lw	a3,12(a2)
   210c8:	00862503          	lw	a0,8(a2)
   210cc:	01160e33          	add	t3,a2,a7
   210d0:	006696b3          	sll	a3,a3,t1
   210d4:	01d55533          	srl	a0,a0,t4
   210d8:	00a6e6b3          	or	a3,a3,a0
   210dc:	00de2623          	sw	a3,12(t3)
   210e0:	fff80813          	addi	a6,a6,-1 # 7ffff <__alt_data_end+0x3ffff>
   210e4:	ffc60613          	addi	a2,a2,-4
   210e8:	fd074ee3          	blt	a4,a6,210c4 <__subtf3+0xd4c>
   210ec:	00200693          	li	a3,2
   210f0:	00300513          	li	a0,3
   210f4:	10e6dc63          	bge	a3,a4,2120c <__subtf3+0xe94>
   210f8:	03012603          	lw	a2,48(sp)
   210fc:	00271693          	slli	a3,a4,0x2
   21100:	04068713          	addi	a4,a3,64
   21104:	002706b3          	add	a3,a4,sp
   21108:	00661633          	sll	a2,a2,t1
   2110c:	ffe50713          	addi	a4,a0,-2
   21110:	fec6a823          	sw	a2,-16(a3)
   21114:	c7cff06f          	j	20590 <__subtf3+0x218>
   21118:	00259593          	slli	a1,a1,0x2
   2111c:	04058593          	addi	a1,a1,64 # 80040 <__alt_data_end+0x40040>
   21120:	002585b3          	add	a1,a1,sp
   21124:	ff05a583          	lw	a1,-16(a1)
   21128:	02000e13          	li	t3,32
   2112c:	40de0e33          	sub	t3,t3,a3
   21130:	01c595b3          	sll	a1,a1,t3
   21134:	00b76733          	or	a4,a4,a1
   21138:	36080a63          	beqz	a6,214ac <__subtf3+0x1134>
   2113c:	00261513          	slli	a0,a2,0x2
   21140:	00281813          	slli	a6,a6,0x2
   21144:	00a78533          	add	a0,a5,a0
   21148:	00078893          	mv	a7,a5
   2114c:	01078eb3          	add	t4,a5,a6
   21150:	00052583          	lw	a1,0(a0)
   21154:	00452303          	lw	t1,4(a0)
   21158:	00488893          	addi	a7,a7,4 # 80004 <__alt_data_end+0x40004>
   2115c:	00d5d5b3          	srl	a1,a1,a3
   21160:	01c31333          	sll	t1,t1,t3
   21164:	0065e5b3          	or	a1,a1,t1
   21168:	feb8ae23          	sw	a1,-4(a7)
   2116c:	00450513          	addi	a0,a0,4
   21170:	ff1e90e3          	bne	t4,a7,21150 <__subtf3+0xdd8>
   21174:	04080593          	addi	a1,a6,64
   21178:	00258833          	add	a6,a1,sp
   2117c:	03c12583          	lw	a1,60(sp)
   21180:	00d5d6b3          	srl	a3,a1,a3
   21184:	00400593          	li	a1,4
   21188:	40c58633          	sub	a2,a1,a2
   2118c:	fed82823          	sw	a3,-16(a6)
   21190:	ca8ff06f          	j	20638 <__subtf3+0x2c0>
   21194:	00269693          	slli	a3,a3,0x2
   21198:	04068693          	addi	a3,a3,64
   2119c:	002686b3          	add	a3,a3,sp
   211a0:	fe06af03          	lw	t5,-32(a3)
   211a4:	02000693          	li	a3,32
   211a8:	40a686b3          	sub	a3,a3,a0
   211ac:	00df1f33          	sll	t5,t5,a3
   211b0:	01e8e8b3          	or	a7,a7,t5
   211b4:	30030463          	beqz	t1,214bc <__subtf3+0x1144>
   211b8:	00239f13          	slli	t5,t2,0x2
   211bc:	00231f93          	slli	t6,t1,0x2
   211c0:	01ee0f33          	add	t5,t3,t5
   211c4:	00ef87b3          	add	a5,t6,a4
   211c8:	000f2303          	lw	t1,0(t5)
   211cc:	004f2283          	lw	t0,4(t5)
   211d0:	00470713          	addi	a4,a4,4
   211d4:	00a35333          	srl	t1,t1,a0
   211d8:	00d292b3          	sll	t0,t0,a3
   211dc:	00536333          	or	t1,t1,t0
   211e0:	fe672e23          	sw	t1,-4(a4)
   211e4:	004f0f13          	addi	t5,t5,4
   211e8:	fee790e3          	bne	a5,a4,211c8 <__subtf3+0xe50>
   211ec:	02c12703          	lw	a4,44(sp)
   211f0:	040f8793          	addi	a5,t6,64
   211f4:	00278333          	add	t1,a5,sp
   211f8:	00a75733          	srl	a4,a4,a0
   211fc:	00400793          	li	a5,4
   21200:	407787b3          	sub	a5,a5,t2
   21204:	fee32023          	sw	a4,-32(t1)
   21208:	fb0ff06f          	j	209b8 <__subtf3+0x640>
   2120c:	00170513          	addi	a0,a4,1
   21210:	ee9ff06f          	j	210f8 <__subtf3+0xd80>
   21214:	00008737          	lui	a4,0x8
   21218:	fff70713          	addi	a4,a4,-1 # 7fff <__malloc_lock+0x67>
   2121c:	5ae30e63          	beq	t1,a4,217d8 <__subtf3+0x1460>
   21220:	01c12503          	lw	a0,28(sp)
   21224:	000805b7          	lui	a1,0x80
   21228:	07400713          	li	a4,116
   2122c:	00b56533          	or	a0,a0,a1
   21230:	00a12e23          	sw	a0,28(sp)
   21234:	83d758e3          	bge	a4,t4,20a64 <__subtf3+0x6ec>
   21238:	000e0793          	mv	a5,t3
   2123c:	00088593          	mv	a1,a7
   21240:	00100713          	li	a4,1
   21244:	00e68733          	add	a4,a3,a4
   21248:	00d736b3          	sltu	a3,a4,a3
   2124c:	00b68833          	add	a6,a3,a1
   21250:	00d836b3          	sltu	a3,a6,a3
   21254:	0115b5b3          	sltu	a1,a1,a7
   21258:	00d5e5b3          	or	a1,a1,a3
   2125c:	00f586b3          	add	a3,a1,a5
   21260:	00b6b5b3          	sltu	a1,a3,a1
   21264:	01c7b7b3          	sltu	a5,a5,t3
   21268:	00b7e7b3          	or	a5,a5,a1
   2126c:	00c787b3          	add	a5,a5,a2
   21270:	00030913          	mv	s2,t1
   21274:	959ff06f          	j	20bcc <__subtf3+0x854>
   21278:	000807b7          	lui	a5,0x80
   2127c:	02d12823          	sw	a3,48(sp)
   21280:	03112a23          	sw	a7,52(sp)
   21284:	03c12c23          	sw	t3,56(sp)
   21288:	02c12e23          	sw	a2,60(sp)
   2128c:	00f677b3          	and	a5,a2,a5
   21290:	00058413          	mv	s0,a1
   21294:	c2079ae3          	bnez	a5,20ec8 <__subtf3+0xb50>
   21298:	00008937          	lui	s2,0x8
   2129c:	fff90913          	addi	s2,s2,-1 # 7fff <__malloc_lock+0x67>
   212a0:	03010793          	addi	a5,sp,48
   212a4:	a45ff06f          	j	20ce8 <__subtf3+0x970>
   212a8:	c7dfc0ef          	jal	ra,1df24 <__clzsi2>
   212ac:	03450593          	addi	a1,a0,52
   212b0:	01f5f313          	andi	t1,a1,31
   212b4:	4055d713          	srai	a4,a1,0x5
   212b8:	aa030263          	beqz	t1,2055c <__subtf3+0x1e4>
   212bc:	02000e93          	li	t4,32
   212c0:	406e8eb3          	sub	t4,t4,t1
   212c4:	de9ff06f          	j	210ac <__subtf3+0xd34>
   212c8:	00d806b3          	add	a3,a6,a3
   212cc:	00e88733          	add	a4,a7,a4
   212d0:	0106b5b3          	sltu	a1,a3,a6
   212d4:	00b705b3          	add	a1,a4,a1
   212d8:	011738b3          	sltu	a7,a4,a7
   212dc:	00e5b733          	sltu	a4,a1,a4
   212e0:	00fe07b3          	add	a5,t3,a5
   212e4:	00e8e733          	or	a4,a7,a4
   212e8:	00e78733          	add	a4,a5,a4
   212ec:	01c7be33          	sltu	t3,a5,t3
   212f0:	00f737b3          	sltu	a5,a4,a5
   212f4:	00fe67b3          	or	a5,t3,a5
   212f8:	00a60533          	add	a0,a2,a0
   212fc:	00a78633          	add	a2,a5,a0
   21300:	03010793          	addi	a5,sp,48
   21304:	02e12c23          	sw	a4,56(sp)
   21308:	02d12823          	sw	a3,48(sp)
   2130c:	02b12a23          	sw	a1,52(sp)
   21310:	02c12e23          	sw	a2,60(sp)
   21314:	00078713          	mv	a4,a5
   21318:	03c10513          	addi	a0,sp,60
   2131c:	0016d593          	srli	a1,a3,0x1
   21320:	00472683          	lw	a3,4(a4)
   21324:	00470713          	addi	a4,a4,4
   21328:	01f69613          	slli	a2,a3,0x1f
   2132c:	00b66633          	or	a2,a2,a1
   21330:	fec72e23          	sw	a2,-4(a4)
   21334:	fee514e3          	bne	a0,a4,2131c <__subtf3+0xfa4>
   21338:	03c12603          	lw	a2,60(sp)
   2133c:	000086b7          	lui	a3,0x8
   21340:	fff68693          	addi	a3,a3,-1 # 7fff <__malloc_lock+0x67>
   21344:	00165613          	srli	a2,a2,0x1
   21348:	02c12e23          	sw	a2,60(sp)
   2134c:	03012703          	lw	a4,48(sp)
   21350:	8ed30ee3          	beq	t1,a3,20c4c <__subtf3+0x8d4>
   21354:	00777693          	andi	a3,a4,7
   21358:	00030913          	mv	s2,t1
   2135c:	920690e3          	bnez	a3,20c7c <__subtf3+0x904>
   21360:	95dff06f          	j	20cbc <__subtf3+0x944>
   21364:	02d12823          	sw	a3,48(sp)
   21368:	03112a23          	sw	a7,52(sp)
   2136c:	03c12c23          	sw	t3,56(sp)
   21370:	02c12e23          	sw	a2,60(sp)
   21374:	000e8913          	mv	s2,t4
   21378:	00058413          	mv	s0,a1
   2137c:	03010793          	addi	a5,sp,48
   21380:	93dff06f          	j	20cbc <__subtf3+0x944>
   21384:	41d887b3          	sub	a5,a7,t4
   21388:	41068833          	sub	a6,a3,a6
   2138c:	00f8bfb3          	sltu	t6,a7,a5
   21390:	0106b533          	sltu	a0,a3,a6
   21394:	406e0333          	sub	t1,t3,t1
   21398:	000f8713          	mv	a4,t6
   2139c:	40a787b3          	sub	a5,a5,a0
   213a0:	006e3e33          	sltu	t3,t3,t1
   213a4:	0106f463          	bgeu	a3,a6,213ac <__subtf3+0x1034>
   213a8:	45d88e63          	beq	a7,t4,21804 <__subtf3+0x148c>
   213ac:	40e30733          	sub	a4,t1,a4
   213b0:	440f9c63          	bnez	t6,21808 <__subtf3+0x1490>
   213b4:	41e60533          	sub	a0,a2,t5
   213b8:	41c50533          	sub	a0,a0,t3
   213bc:	02a12e23          	sw	a0,60(sp)
   213c0:	02e12c23          	sw	a4,56(sp)
   213c4:	02f12a23          	sw	a5,52(sp)
   213c8:	03012823          	sw	a6,48(sp)
   213cc:	00058413          	mv	s0,a1
   213d0:	96050863          	beqz	a0,20540 <__subtf3+0x1c8>
   213d4:	b51fc0ef          	jal	ra,1df24 <__clzsi2>
   213d8:	ff450593          	addi	a1,a0,-12
   213dc:	01f5f713          	andi	a4,a1,31
   213e0:	00070313          	mv	t1,a4
   213e4:	96070c63          	beqz	a4,2055c <__subtf3+0x1e4>
   213e8:	cb9ff06f          	j	210a0 <__subtf3+0xd28>
   213ec:	42079463          	bnez	a5,21814 <__subtf3+0x149c>
   213f0:	e80714e3          	bnez	a4,21278 <__subtf3+0xf00>
   213f4:	02a12e23          	sw	a0,60(sp)
   213f8:	02012c23          	sw	zero,56(sp)
   213fc:	02012a23          	sw	zero,52(sp)
   21400:	02012823          	sw	zero,48(sp)
   21404:	03010793          	addi	a5,sp,48
   21408:	03c10713          	addi	a4,sp,60
   2140c:	00008637          	lui	a2,0x8
   21410:	00361593          	slli	a1,a2,0x3
   21414:	ffc72603          	lw	a2,-4(a4)
   21418:	ffc70713          	addi	a4,a4,-4
   2141c:	01d65693          	srli	a3,a2,0x1d
   21420:	00b6e6b3          	or	a3,a3,a1
   21424:	00d72223          	sw	a3,4(a4)
   21428:	fee794e3          	bne	a5,a4,21410 <__subtf3+0x1098>
   2142c:	03012703          	lw	a4,48(sp)
   21430:	03c12603          	lw	a2,60(sp)
   21434:	00000413          	li	s0,0
   21438:	00371713          	slli	a4,a4,0x3
   2143c:	02e12823          	sw	a4,48(sp)
   21440:	00080737          	lui	a4,0x80
   21444:	00e67733          	and	a4,a2,a4
   21448:	00008937          	lui	s2,0x8
   2144c:	980710e3          	bnez	a4,20dcc <__subtf3+0xa54>
   21450:	00000413          	li	s0,0
   21454:	00008937          	lui	s2,0x8
   21458:	fff90913          	addi	s2,s2,-1 # 7fff <__malloc_lock+0x67>
   2145c:	88dff06f          	j	20ce8 <__subtf3+0x970>
   21460:	00d80733          	add	a4,a6,a3
   21464:	01e30f33          	add	t5,t1,t5
   21468:	01073833          	sltu	a6,a4,a6
   2146c:	010f0833          	add	a6,t5,a6
   21470:	006f36b3          	sltu	a3,t5,t1
   21474:	01e83f33          	sltu	t5,a6,t5
   21478:	01d58eb3          	add	t4,a1,t4
   2147c:	01e6e6b3          	or	a3,a3,t5
   21480:	00de86b3          	add	a3,t4,a3
   21484:	00beb5b3          	sltu	a1,t4,a1
   21488:	01d6beb3          	sltu	t4,a3,t4
   2148c:	01d5e5b3          	or	a1,a1,t4
   21490:	00c787b3          	add	a5,a5,a2
   21494:	00f587b3          	add	a5,a1,a5
   21498:	00100913          	li	s2,1
   2149c:	f30ff06f          	j	20bcc <__subtf3+0x854>
   214a0:	00000593          	li	a1,0
   214a4:	00000693          	li	a3,0
   214a8:	a70ff06f          	j	20718 <__subtf3+0x3a0>
   214ac:	03c12583          	lw	a1,60(sp)
   214b0:	00100613          	li	a2,1
   214b4:	00d5d5b3          	srl	a1,a1,a3
   214b8:	98cff06f          	j	20644 <__subtf3+0x2cc>
   214bc:	00a7d6b3          	srl	a3,a5,a0
   214c0:	00100793          	li	a5,1
   214c4:	d00ff06f          	j	209c4 <__subtf3+0x64c>
   214c8:	40d806b3          	sub	a3,a6,a3
   214cc:	40558f33          	sub	t5,a1,t0
   214d0:	00d83533          	sltu	a0,a6,a3
   214d4:	01e5b8b3          	sltu	a7,a1,t5
   214d8:	00068713          	mv	a4,a3
   214dc:	40af0f33          	sub	t5,t5,a0
   214e0:	00088313          	mv	t1,a7
   214e4:	41fe86b3          	sub	a3,t4,t6
   214e8:	01feb533          	sltu	a0,t4,t6
   214ec:	00e87463          	bgeu	a6,a4,214f4 <__subtf3+0x117c>
   214f0:	0eb28263          	beq	t0,a1,215d4 <__subtf3+0x125c>
   214f4:	406686b3          	sub	a3,a3,t1
   214f8:	00050593          	mv	a1,a0
   214fc:	0c089e63          	bnez	a7,215d8 <__subtf3+0x1260>
   21500:	40f607b3          	sub	a5,a2,a5
   21504:	40b78533          	sub	a0,a5,a1
   21508:	00100913          	li	s2,1
   2150c:	808ff06f          	j	20514 <__subtf3+0x19c>
   21510:	01fe3533          	sltu	a0,t3,t6
   21514:	ffff8693          	addi	a3,t6,-1
   21518:	41de07b3          	sub	a5,t3,t4
   2151c:	0017b793          	seqz	a5,a5
   21520:	00f56533          	or	a0,a0,a5
   21524:	a7dff06f          	j	20fa0 <__subtf3+0xc28>
   21528:	03012823          	sw	a6,48(sp)
   2152c:	03e12a23          	sw	t5,52(sp)
   21530:	03d12c23          	sw	t4,56(sp)
   21534:	02c12e23          	sw	a2,60(sp)
   21538:	00050913          	mv	s2,a0
   2153c:	03010793          	addi	a5,sp,48
   21540:	f7cff06f          	j	20cbc <__subtf3+0x944>
   21544:	00000593          	li	a1,0
   21548:	00000713          	li	a4,0
   2154c:	8b8ff06f          	j	20604 <__subtf3+0x28c>
   21550:	00259593          	slli	a1,a1,0x2
   21554:	04058593          	addi	a1,a1,64 # 80040 <__alt_data_end+0x40040>
   21558:	002585b3          	add	a1,a1,sp
   2155c:	fe05a583          	lw	a1,-32(a1)
   21560:	02000293          	li	t0,32
   21564:	40a282b3          	sub	t0,t0,a0
   21568:	005595b3          	sll	a1,a1,t0
   2156c:	00b6e6b3          	or	a3,a3,a1
   21570:	46030e63          	beqz	t1,219ec <__subtf3+0x1674>
   21574:	00289593          	slli	a1,a7,0x2
   21578:	00231313          	slli	t1,t1,0x2
   2157c:	00be05b3          	add	a1,t3,a1
   21580:	00e303b3          	add	t2,t1,a4
   21584:	0005a783          	lw	a5,0(a1)
   21588:	0045af83          	lw	t6,4(a1)
   2158c:	00470713          	addi	a4,a4,4 # 80004 <__alt_data_end+0x40004>
   21590:	00a7d7b3          	srl	a5,a5,a0
   21594:	005f9fb3          	sll	t6,t6,t0
   21598:	01f7e7b3          	or	a5,a5,t6
   2159c:	fef72e23          	sw	a5,-4(a4)
   215a0:	00458593          	addi	a1,a1,4
   215a4:	fee390e3          	bne	t2,a4,21584 <__subtf3+0x120c>
   215a8:	02c12703          	lw	a4,44(sp)
   215ac:	04030793          	addi	a5,t1,64
   215b0:	00278333          	add	t1,a5,sp
   215b4:	00a75733          	srl	a4,a4,a0
   215b8:	00400793          	li	a5,4
   215bc:	411787b3          	sub	a5,a5,a7
   215c0:	fee32023          	sw	a4,-32(t1)
   215c4:	984ff06f          	j	20748 <__subtf3+0x3d0>
   215c8:	00000693          	li	a3,0
   215cc:	00000893          	li	a7,0
   215d0:	bb8ff06f          	j	20988 <__subtf3+0x610>
   215d4:	fff68693          	addi	a3,a3,-1
   215d8:	41df85b3          	sub	a1,t6,t4
   215dc:	0015b593          	seqz	a1,a1
   215e0:	00b565b3          	or	a1,a0,a1
   215e4:	f1dff06f          	j	21500 <__subtf3+0x1188>
   215e8:	01b45413          	srli	s0,s0,0x1b
   215ec:	00239393          	slli	t2,t2,0x2
   215f0:	008e87b3          	add	a5,t4,s0
   215f4:	04038e93          	addi	t4,t2,64
   215f8:	002e8eb3          	add	t4,t4,sp
   215fc:	01f7f793          	andi	a5,a5,31
   21600:	fd0eae83          	lw	t4,-48(t4)
   21604:	40f40433          	sub	s0,s0,a5
   21608:	02040393          	addi	t2,s0,32
   2160c:	007e97b3          	sll	a5,t4,t2
   21610:	00f86833          	or	a6,a6,a5
   21614:	48090c63          	beqz	s2,21aac <__subtf3+0x1734>
   21618:	00271993          	slli	s3,a4,0x2
   2161c:	013f07b3          	add	a5,t5,s3
   21620:	008f8f93          	addi	t6,t6,8
   21624:	413009b3          	neg	s3,s3
   21628:	0007a503          	lw	a0,0(a5) # 80000 <__alt_data_end+0x40000>
   2162c:	0047ae83          	lw	t4,4(a5)
   21630:	01378433          	add	s0,a5,s3
   21634:	00555533          	srl	a0,a0,t0
   21638:	007e9eb3          	sll	t4,t4,t2
   2163c:	01d56533          	or	a0,a0,t4
   21640:	00a42023          	sw	a0,0(s0)
   21644:	00478793          	addi	a5,a5,4
   21648:	feff90e3          	bne	t6,a5,21628 <__subtf3+0x12b0>
   2164c:	01c12e83          	lw	t4,28(sp)
   21650:	00291513          	slli	a0,s2,0x2
   21654:	04050793          	addi	a5,a0,64
   21658:	00278533          	add	a0,a5,sp
   2165c:	005edeb3          	srl	t4,t4,t0
   21660:	00400793          	li	a5,4
   21664:	40e787b3          	sub	a5,a5,a4
   21668:	fdd52823          	sw	t4,-48(a0)
   2166c:	a24ff06f          	j	20890 <__subtf3+0x518>
   21670:	16058463          	beqz	a1,217d8 <__subtf3+0x1460>
   21674:	01c8e8b3          	or	a7,a7,t3
   21678:	00d8e6b3          	or	a3,a7,a3
   2167c:	00c6e6b3          	or	a3,a3,a2
   21680:	3c069063          	bnez	a3,21a40 <__subtf3+0x16c8>
   21684:	02f12c23          	sw	a5,56(sp)
   21688:	000807b7          	lui	a5,0x80
   2168c:	03012823          	sw	a6,48(sp)
   21690:	02e12a23          	sw	a4,52(sp)
   21694:	02a12e23          	sw	a0,60(sp)
   21698:	00f577b3          	and	a5,a0,a5
   2169c:	be078ee3          	beqz	a5,21298 <__subtf3+0xf20>
   216a0:	00050613          	mv	a2,a0
   216a4:	00008937          	lui	s2,0x8
   216a8:	03010793          	addi	a5,sp,48
   216ac:	f20ff06f          	j	20dcc <__subtf3+0xa54>
   216b0:	407887b3          	sub	a5,a7,t2
   216b4:	41068733          	sub	a4,a3,a6
   216b8:	00e6b833          	sltu	a6,a3,a4
   216bc:	405e0333          	sub	t1,t3,t0
   216c0:	00f8beb3          	sltu	t4,a7,a5
   216c4:	41078f33          	sub	t5,a5,a6
   216c8:	000e8f93          	mv	t6,t4
   216cc:	006e3833          	sltu	a6,t3,t1
   216d0:	00e6f663          	bgeu	a3,a4,216dc <__subtf3+0x1364>
   216d4:	fff30693          	addi	a3,t1,-1
   216d8:	2d138e63          	beq	t2,a7,219b4 <__subtf3+0x163c>
   216dc:	41f306b3          	sub	a3,t1,t6
   216e0:	00080793          	mv	a5,a6
   216e4:	2c0e9863          	bnez	t4,219b4 <__subtf3+0x163c>
   216e8:	40a60533          	sub	a0,a2,a0
   216ec:	40f50533          	sub	a0,a0,a5
   216f0:	00058413          	mv	s0,a1
   216f4:	00100913          	li	s2,1
   216f8:	e1dfe06f          	j	20514 <__subtf3+0x19c>
   216fc:	02d12823          	sw	a3,48(sp)
   21700:	03112a23          	sw	a7,52(sp)
   21704:	03c12c23          	sw	t3,56(sp)
   21708:	02c12e23          	sw	a2,60(sp)
   2170c:	900708e3          	beqz	a4,2101c <__subtf3+0xca4>
   21710:	000807b7          	lui	a5,0x80
   21714:	00f677b3          	and	a5,a2,a5
   21718:	00058413          	mv	s0,a1
   2171c:	f4079063          	bnez	a5,20e5c <__subtf3+0xae4>
   21720:	03010793          	addi	a5,sp,48
   21724:	dc4ff06f          	j	20ce8 <__subtf3+0x970>
   21728:	40d80533          	sub	a0,a6,a3
   2172c:	411e87b3          	sub	a5,t4,a7
   21730:	00a832b3          	sltu	t0,a6,a0
   21734:	00febfb3          	sltu	t6,t4,a5
   21738:	00050713          	mv	a4,a0
   2173c:	405787b3          	sub	a5,a5,t0
   21740:	000f8993          	mv	s3,t6
   21744:	41c302b3          	sub	t0,t1,t3
   21748:	01c333b3          	sltu	t2,t1,t3
   2174c:	00a87463          	bgeu	a6,a0,21754 <__subtf3+0x13dc>
   21750:	27d88a63          	beq	a7,t4,219c4 <__subtf3+0x164c>
   21754:	413282b3          	sub	t0,t0,s3
   21758:	260f9863          	bnez	t6,219c8 <__subtf3+0x1650>
   2175c:	40cf0fb3          	sub	t6,t5,a2
   21760:	407f8fb3          	sub	t6,t6,t2
   21764:	000803b7          	lui	t2,0x80
   21768:	03f12e23          	sw	t6,60(sp)
   2176c:	02512c23          	sw	t0,56(sp)
   21770:	02f12a23          	sw	a5,52(sp)
   21774:	02a12823          	sw	a0,48(sp)
   21778:	007ff3b3          	and	t2,t6,t2
   2177c:	24038e63          	beqz	t2,219d8 <__subtf3+0x1660>
   21780:	41d887b3          	sub	a5,a7,t4
   21784:	41068833          	sub	a6,a3,a6
   21788:	0106b733          	sltu	a4,a3,a6
   2178c:	00f8bfb3          	sltu	t6,a7,a5
   21790:	406e0333          	sub	t1,t3,t1
   21794:	40e787b3          	sub	a5,a5,a4
   21798:	000f8513          	mv	a0,t6
   2179c:	006e3733          	sltu	a4,t3,t1
   217a0:	0106f663          	bgeu	a3,a6,217ac <__subtf3+0x1434>
   217a4:	fff30693          	addi	a3,t1,-1
   217a8:	2fd88c63          	beq	a7,t4,21aa0 <__subtf3+0x1728>
   217ac:	40a306b3          	sub	a3,t1,a0
   217b0:	2e0f9863          	bnez	t6,21aa0 <__subtf3+0x1728>
   217b4:	41e60f33          	sub	t5,a2,t5
   217b8:	40ef0633          	sub	a2,t5,a4
   217bc:	02f12a23          	sw	a5,52(sp)
   217c0:	02c12e23          	sw	a2,60(sp)
   217c4:	02d12c23          	sw	a3,56(sp)
   217c8:	03012823          	sw	a6,48(sp)
   217cc:	00058413          	mv	s0,a1
   217d0:	03010793          	addi	a5,sp,48
   217d4:	ce8ff06f          	j	20cbc <__subtf3+0x944>
   217d8:	02d12823          	sw	a3,48(sp)
   217dc:	03112a23          	sw	a7,52(sp)
   217e0:	03c12c23          	sw	t3,56(sp)
   217e4:	dd0ff06f          	j	20db4 <__subtf3+0xa3c>
   217e8:	02d12823          	sw	a3,48(sp)
   217ec:	03112a23          	sw	a7,52(sp)
   217f0:	03c12c23          	sw	t3,56(sp)
   217f4:	02c12e23          	sw	a2,60(sp)
   217f8:	000e8913          	mv	s2,t4
   217fc:	03010793          	addi	a5,sp,48
   21800:	cbcff06f          	j	20cbc <__subtf3+0x944>
   21804:	fff30713          	addi	a4,t1,-1
   21808:	00133313          	seqz	t1,t1
   2180c:	006e6e33          	or	t3,t3,t1
   21810:	ba5ff06f          	j	213b4 <__subtf3+0x103c>
   21814:	1e071263          	bnez	a4,219f8 <__subtf3+0x1680>
   21818:	000807b7          	lui	a5,0x80
   2181c:	03012823          	sw	a6,48(sp)
   21820:	03d12a23          	sw	t4,52(sp)
   21824:	02612c23          	sw	t1,56(sp)
   21828:	03e12e23          	sw	t5,60(sp)
   2182c:	00ff77b3          	and	a5,t5,a5
   21830:	000f0613          	mv	a2,t5
   21834:	e8079a63          	bnez	a5,20ec8 <__subtf3+0xb50>
   21838:	a61ff06f          	j	21298 <__subtf3+0xf20>
   2183c:	00080737          	lui	a4,0x80
   21840:	02d12823          	sw	a3,48(sp)
   21844:	03112a23          	sw	a7,52(sp)
   21848:	03c12c23          	sw	t3,56(sp)
   2184c:	02c12e23          	sw	a2,60(sp)
   21850:	00e67733          	and	a4,a2,a4
   21854:	00100913          	li	s2,1
   21858:	03010793          	addi	a5,sp,48
   2185c:	d6071863          	bnez	a4,20dcc <__subtf3+0xa54>
   21860:	00000913          	li	s2,0
   21864:	03010793          	addi	a5,sp,48
   21868:	c80ff06f          	j	20ce8 <__subtf3+0x970>
   2186c:	00d806b3          	add	a3,a6,a3
   21870:	00e88733          	add	a4,a7,a4
   21874:	0106b833          	sltu	a6,a3,a6
   21878:	01070833          	add	a6,a4,a6
   2187c:	011738b3          	sltu	a7,a4,a7
   21880:	00e83733          	sltu	a4,a6,a4
   21884:	00fe05b3          	add	a1,t3,a5
   21888:	00e8e733          	or	a4,a7,a4
   2188c:	00e58733          	add	a4,a1,a4
   21890:	01c5b7b3          	sltu	a5,a1,t3
   21894:	00b735b3          	sltu	a1,a4,a1
   21898:	00a60533          	add	a0,a2,a0
   2189c:	00b7e7b3          	or	a5,a5,a1
   218a0:	00a787b3          	add	a5,a5,a0
   218a4:	00080637          	lui	a2,0x80
   218a8:	02e12c23          	sw	a4,56(sp)
   218ac:	02d12823          	sw	a3,48(sp)
   218b0:	03012a23          	sw	a6,52(sp)
   218b4:	00c7f633          	and	a2,a5,a2
   218b8:	00068713          	mv	a4,a3
   218bc:	ba060663          	beqz	a2,20c68 <__subtf3+0x8f0>
   218c0:	fff80637          	lui	a2,0xfff80
   218c4:	fff60613          	addi	a2,a2,-1 # fff7ffff <__alt_data_end+0xfff3ffff>
   218c8:	00c7f633          	and	a2,a5,a2
   218cc:	02c12e23          	sw	a2,60(sp)
   218d0:	00100913          	li	s2,1
   218d4:	03010793          	addi	a5,sp,48
   218d8:	be4ff06f          	j	20cbc <__subtf3+0x944>
   218dc:	01b3d393          	srli	t2,t2,0x1b
   218e0:	00229293          	slli	t0,t0,0x2
   218e4:	007e87b3          	add	a5,t4,t2
   218e8:	04028e93          	addi	t4,t0,64 # 80040 <__alt_data_end+0x40040>
   218ec:	002e8eb3          	add	t4,t4,sp
   218f0:	01f7f793          	andi	a5,a5,31
   218f4:	fd0eae83          	lw	t4,-48(t4)
   218f8:	40f383b3          	sub	t2,t2,a5
   218fc:	02038293          	addi	t0,t2,32 # 80020 <__alt_data_end+0x40020>
   21900:	005e97b3          	sll	a5,t4,t0
   21904:	00f76733          	or	a4,a4,a5
   21908:	1c090063          	beqz	s2,21ac8 <__subtf3+0x1750>
   2190c:	00259993          	slli	s3,a1,0x2
   21910:	013f07b3          	add	a5,t5,s3
   21914:	008f8f93          	addi	t6,t6,8
   21918:	413009b3          	neg	s3,s3
   2191c:	0007a503          	lw	a0,0(a5) # 80000 <__alt_data_end+0x40000>
   21920:	0047ae83          	lw	t4,4(a5)
   21924:	013783b3          	add	t2,a5,s3
   21928:	01055533          	srl	a0,a0,a6
   2192c:	005e9eb3          	sll	t4,t4,t0
   21930:	01d56533          	or	a0,a0,t4
   21934:	00a3a023          	sw	a0,0(t2)
   21938:	00478793          	addi	a5,a5,4
   2193c:	feff90e3          	bne	t6,a5,2191c <__subtf3+0x15a4>
   21940:	01c12503          	lw	a0,28(sp)
   21944:	00291793          	slli	a5,s2,0x2
   21948:	04078793          	addi	a5,a5,64
   2194c:	01055533          	srl	a0,a0,a6
   21950:	002787b3          	add	a5,a5,sp
   21954:	00400813          	li	a6,4
   21958:	40b805b3          	sub	a1,a6,a1
   2195c:	fca7a823          	sw	a0,-48(a5)
   21960:	974ff06f          	j	20ad4 <__subtf3+0x75c>
   21964:	00000813          	li	a6,0
   21968:	00000393          	li	t2,0
   2196c:	ef1fe06f          	j	2085c <__subtf3+0x4e4>
   21970:	00d80333          	add	t1,a6,a3
   21974:	011588b3          	add	a7,a1,a7
   21978:	01033833          	sltu	a6,t1,a6
   2197c:	01088833          	add	a6,a7,a6
   21980:	00b8b6b3          	sltu	a3,a7,a1
   21984:	011838b3          	sltu	a7,a6,a7
   21988:	01c70e33          	add	t3,a4,t3
   2198c:	0116e6b3          	or	a3,a3,a7
   21990:	00de06b3          	add	a3,t3,a3
   21994:	00ee37b3          	sltu	a5,t3,a4
   21998:	01c6be33          	sltu	t3,a3,t3
   2199c:	01c7e7b3          	or	a5,a5,t3
   219a0:	00c50533          	add	a0,a0,a2
   219a4:	00030713          	mv	a4,t1
   219a8:	00a787b3          	add	a5,a5,a0
   219ac:	00100913          	li	s2,1
   219b0:	a1cff06f          	j	20bcc <__subtf3+0x854>
   219b4:	41c287b3          	sub	a5,t0,t3
   219b8:	0017b793          	seqz	a5,a5
   219bc:	00f867b3          	or	a5,a6,a5
   219c0:	d29ff06f          	j	216e8 <__subtf3+0x1370>
   219c4:	fff28293          	addi	t0,t0,-1
   219c8:	406e0fb3          	sub	t6,t3,t1
   219cc:	001fbf93          	seqz	t6,t6
   219d0:	01f3e3b3          	or	t2,t2,t6
   219d4:	d89ff06f          	j	2175c <__subtf3+0x13e4>
   219d8:	00f567b3          	or	a5,a0,a5
   219dc:	0057e7b3          	or	a5,a5,t0
   219e0:	01f7e7b3          	or	a5,a5,t6
   219e4:	e2078c63          	beqz	a5,2101c <__subtf3+0xca4>
   219e8:	a84ff06f          	j	20c6c <__subtf3+0x8f4>
   219ec:	00a7d5b3          	srl	a1,a5,a0
   219f0:	00100793          	li	a5,1
   219f4:	d61fe06f          	j	20754 <__subtf3+0x3dc>
   219f8:	02a12e23          	sw	a0,60(sp)
   219fc:	02012c23          	sw	zero,56(sp)
   21a00:	02012a23          	sw	zero,52(sp)
   21a04:	02012823          	sw	zero,48(sp)
   21a08:	03010793          	addi	a5,sp,48
   21a0c:	03c10713          	addi	a4,sp,60
   21a10:	00008637          	lui	a2,0x8
   21a14:	00361593          	slli	a1,a2,0x3
   21a18:	ffc72603          	lw	a2,-4(a4) # 7fffc <__alt_data_end+0x3fffc>
   21a1c:	ffc70713          	addi	a4,a4,-4
   21a20:	01d65693          	srli	a3,a2,0x1d
   21a24:	00b6e6b3          	or	a3,a3,a1
   21a28:	00d72223          	sw	a3,4(a4)
   21a2c:	fee794e3          	bne	a5,a4,21a14 <__subtf3+0x169c>
   21a30:	9fdff06f          	j	2142c <__subtf3+0x10b4>
   21a34:	00000713          	li	a4,0
   21a38:	00000293          	li	t0,0
   21a3c:	864ff06f          	j	20aa0 <__subtf3+0x728>
   21a40:	03d12e23          	sw	t4,60(sp)
   21a44:	02012c23          	sw	zero,56(sp)
   21a48:	02012a23          	sw	zero,52(sp)
   21a4c:	02012823          	sw	zero,48(sp)
   21a50:	03010793          	addi	a5,sp,48
   21a54:	03c10713          	addi	a4,sp,60
   21a58:	00008637          	lui	a2,0x8
   21a5c:	00361593          	slli	a1,a2,0x3
   21a60:	ffc72603          	lw	a2,-4(a4)
   21a64:	ffc70713          	addi	a4,a4,-4
   21a68:	01d65693          	srli	a3,a2,0x1d
   21a6c:	00b6e6b3          	or	a3,a3,a1
   21a70:	00d72223          	sw	a3,4(a4)
   21a74:	fee794e3          	bne	a5,a4,21a5c <__subtf3+0x16e4>
   21a78:	03012703          	lw	a4,48(sp)
   21a7c:	03c12603          	lw	a2,60(sp)
   21a80:	00000413          	li	s0,0
   21a84:	00371713          	slli	a4,a4,0x3
   21a88:	02e12823          	sw	a4,48(sp)
   21a8c:	00080737          	lui	a4,0x80
   21a90:	00e67733          	and	a4,a2,a4
   21a94:	00008937          	lui	s2,0x8
   21a98:	b2071a63          	bnez	a4,20dcc <__subtf3+0xa54>
   21a9c:	9bdff06f          	j	21458 <__subtf3+0x10e0>
   21aa0:	00133313          	seqz	t1,t1
   21aa4:	00676733          	or	a4,a4,t1
   21aa8:	d0dff06f          	j	217b4 <__subtf3+0x143c>
   21aac:	005552b3          	srl	t0,a0,t0
   21ab0:	00100793          	li	a5,1
   21ab4:	de9fe06f          	j	2089c <__subtf3+0x524>
   21ab8:	02000e93          	li	t4,32
   21abc:	406e8eb3          	sub	t4,t4,t1
   21ac0:	00200713          	li	a4,2
   21ac4:	de8ff06f          	j	210ac <__subtf3+0xd34>
   21ac8:	01055833          	srl	a6,a0,a6
   21acc:	00100593          	li	a1,1
   21ad0:	810ff06f          	j	20ae0 <__subtf3+0x768>
   21ad4:	02412883          	lw	a7,36(sp)
   21ad8:	02812e03          	lw	t3,40(sp)
   21adc:	02c12603          	lw	a2,44(sp)
   21ae0:	cf5fe06f          	j	207d4 <__subtf3+0x45c>
   21ae4:	02412883          	lw	a7,36(sp)
   21ae8:	02812e03          	lw	t3,40(sp)
   21aec:	02c12603          	lw	a2,44(sp)
   21af0:	f2dfe06f          	j	20a1c <__subtf3+0x6a4>

00021af4 <__fixtfsi>:
   21af4:	00c52783          	lw	a5,12(a0)
   21af8:	00052583          	lw	a1,0(a0)
   21afc:	00852603          	lw	a2,8(a0)
   21b00:	00452503          	lw	a0,4(a0)
   21b04:	fe010113          	addi	sp,sp,-32
   21b08:	00179693          	slli	a3,a5,0x1
   21b0c:	00004737          	lui	a4,0x4
   21b10:	00b12023          	sw	a1,0(sp)
   21b14:	00a12223          	sw	a0,4(sp)
   21b18:	00b12823          	sw	a1,16(sp)
   21b1c:	00c12423          	sw	a2,8(sp)
   21b20:	00f12623          	sw	a5,12(sp)
   21b24:	00c12c23          	sw	a2,24(sp)
   21b28:	0116d693          	srli	a3,a3,0x11
   21b2c:	ffe70593          	addi	a1,a4,-2 # 3ffe <xTaskPriorityDisinherit+0x16e>
   21b30:	00000513          	li	a0,0
   21b34:	00d5de63          	bge	a1,a3,21b50 <__fixtfsi+0x5c>
   21b38:	01d70593          	addi	a1,a4,29
   21b3c:	01f7d813          	srli	a6,a5,0x1f
   21b40:	00d5dc63          	bge	a1,a3,21b58 <__fixtfsi+0x64>
   21b44:	80000537          	lui	a0,0x80000
   21b48:	fff54513          	not	a0,a0
   21b4c:	00a80533          	add	a0,a6,a0
   21b50:	02010113          	addi	sp,sp,32
   21b54:	00008067          	ret
   21b58:	01079793          	slli	a5,a5,0x10
   21b5c:	06f70713          	addi	a4,a4,111
   21b60:	40d70733          	sub	a4,a4,a3
   21b64:	0107d793          	srli	a5,a5,0x10
   21b68:	000106b7          	lui	a3,0x10
   21b6c:	00d7e7b3          	or	a5,a5,a3
   21b70:	01f77593          	andi	a1,a4,31
   21b74:	02000693          	li	a3,32
   21b78:	00f12e23          	sw	a5,28(sp)
   21b7c:	40575713          	srai	a4,a4,0x5
   21b80:	40b686b3          	sub	a3,a3,a1
   21b84:	04058663          	beqz	a1,21bd0 <__fixtfsi+0xdc>
   21b88:	00200513          	li	a0,2
   21b8c:	04a71e63          	bne	a4,a0,21be8 <__fixtfsi+0xf4>
   21b90:	00b65633          	srl	a2,a2,a1
   21b94:	00d796b3          	sll	a3,a5,a3
   21b98:	00d66633          	or	a2,a2,a3
   21b9c:	00c12823          	sw	a2,16(sp)
   21ba0:	00100713          	li	a4,1
   21ba4:	00271713          	slli	a4,a4,0x2
   21ba8:	02070713          	addi	a4,a4,32
   21bac:	00270733          	add	a4,a4,sp
   21bb0:	00b7d7b3          	srl	a5,a5,a1
   21bb4:	fef72823          	sw	a5,-16(a4)
   21bb8:	01012783          	lw	a5,16(sp)
   21bbc:	40f00533          	neg	a0,a5
   21bc0:	f80818e3          	bnez	a6,21b50 <__fixtfsi+0x5c>
   21bc4:	00078513          	mv	a0,a5
   21bc8:	02010113          	addi	sp,sp,32
   21bcc:	00008067          	ret
   21bd0:	00271713          	slli	a4,a4,0x2
   21bd4:	02070793          	addi	a5,a4,32
   21bd8:	00278733          	add	a4,a5,sp
   21bdc:	ff072783          	lw	a5,-16(a4)
   21be0:	00f12823          	sw	a5,16(sp)
   21be4:	fd5ff06f          	j	21bb8 <__fixtfsi+0xc4>
   21be8:	00000713          	li	a4,0
   21bec:	fb9ff06f          	j	21ba4 <__fixtfsi+0xb0>

00021bf0 <__floatsitf>:
   21bf0:	fd010113          	addi	sp,sp,-48
   21bf4:	02912223          	sw	s1,36(sp)
   21bf8:	02112623          	sw	ra,44(sp)
   21bfc:	02812423          	sw	s0,40(sp)
   21c00:	03212023          	sw	s2,32(sp)
   21c04:	00050493          	mv	s1,a0
   21c08:	0a058463          	beqz	a1,21cb0 <__floatsitf+0xc0>
   21c0c:	41f5d793          	srai	a5,a1,0x1f
   21c10:	00b7c933          	xor	s2,a5,a1
   21c14:	40f90933          	sub	s2,s2,a5
   21c18:	00090513          	mv	a0,s2
   21c1c:	01f5d413          	srli	s0,a1,0x1f
   21c20:	b04fc0ef          	jal	ra,1df24 <__clzsi2>
   21c24:	05150713          	addi	a4,a0,81 # 80000051 <__alt_data_end+0x7ffc0051>
   21c28:	000047b7          	lui	a5,0x4
   21c2c:	01f77613          	andi	a2,a4,31
   21c30:	01e78793          	addi	a5,a5,30 # 401e <xTaskPriorityDisinherit+0x18e>
   21c34:	01212823          	sw	s2,16(sp)
   21c38:	00012a23          	sw	zero,20(sp)
   21c3c:	00012c23          	sw	zero,24(sp)
   21c40:	00012e23          	sw	zero,28(sp)
   21c44:	40a787b3          	sub	a5,a5,a0
   21c48:	40575713          	srai	a4,a4,0x5
   21c4c:	0a061e63          	bnez	a2,21d08 <__floatsitf+0x118>
   21c50:	00300613          	li	a2,3
   21c54:	40e60633          	sub	a2,a2,a4
   21c58:	00261613          	slli	a2,a2,0x2
   21c5c:	02060693          	addi	a3,a2,32 # 8020 <__malloc_lock+0x88>
   21c60:	00268633          	add	a2,a3,sp
   21c64:	00200693          	li	a3,2
   21c68:	ff062603          	lw	a2,-16(a2)
   21c6c:	00d71663          	bne	a4,a3,21c78 <__floatsitf+0x88>
   21c70:	01212c23          	sw	s2,24(sp)
   21c74:	00100693          	li	a3,1
   21c78:	00269693          	slli	a3,a3,0x2
   21c7c:	00012823          	sw	zero,16(sp)
   21c80:	00012a23          	sw	zero,20(sp)
   21c84:	ffc68693          	addi	a3,a3,-4 # fffc <_vfprintf_r+0x21a0>
   21c88:	00400713          	li	a4,4
   21c8c:	0ae6fe63          	bgeu	a3,a4,21d48 <__floatsitf+0x158>
   21c90:	01179793          	slli	a5,a5,0x11
   21c94:	01061713          	slli	a4,a2,0x10
   21c98:	01012803          	lw	a6,16(sp)
   21c9c:	01412503          	lw	a0,20(sp)
   21ca0:	01812683          	lw	a3,24(sp)
   21ca4:	01075713          	srli	a4,a4,0x10
   21ca8:	0117d793          	srli	a5,a5,0x11
   21cac:	01c0006f          	j	21cc8 <__floatsitf+0xd8>
   21cb0:	00000413          	li	s0,0
   21cb4:	00000793          	li	a5,0
   21cb8:	00000713          	li	a4,0
   21cbc:	00000693          	li	a3,0
   21cc0:	00000513          	li	a0,0
   21cc4:	00000813          	li	a6,0
   21cc8:	00f41593          	slli	a1,s0,0xf
   21ccc:	00b7e7b3          	or	a5,a5,a1
   21cd0:	00e11623          	sh	a4,12(sp)
   21cd4:	00f11723          	sh	a5,14(sp)
   21cd8:	00c12783          	lw	a5,12(sp)
   21cdc:	02c12083          	lw	ra,44(sp)
   21ce0:	02812403          	lw	s0,40(sp)
   21ce4:	00a4a223          	sw	a0,4(s1)
   21ce8:	0104a023          	sw	a6,0(s1)
   21cec:	00d4a423          	sw	a3,8(s1)
   21cf0:	00f4a623          	sw	a5,12(s1)
   21cf4:	02012903          	lw	s2,32(sp)
   21cf8:	00048513          	mv	a0,s1
   21cfc:	02412483          	lw	s1,36(sp)
   21d00:	03010113          	addi	sp,sp,48
   21d04:	00008067          	ret
   21d08:	00200693          	li	a3,2
   21d0c:	06d70063          	beq	a4,a3,21d6c <__floatsitf+0x17c>
   21d10:	00200693          	li	a3,2
   21d14:	00300713          	li	a4,3
   21d18:	00271713          	slli	a4,a4,0x2
   21d1c:	02070713          	addi	a4,a4,32
   21d20:	00270733          	add	a4,a4,sp
   21d24:	00c91933          	sll	s2,s2,a2
   21d28:	ff272823          	sw	s2,-16(a4)
   21d2c:	00269693          	slli	a3,a3,0x2
   21d30:	00012823          	sw	zero,16(sp)
   21d34:	00012a23          	sw	zero,20(sp)
   21d38:	ffc68693          	addi	a3,a3,-4
   21d3c:	00400713          	li	a4,4
   21d40:	01c12603          	lw	a2,28(sp)
   21d44:	f4e6e6e3          	bltu	a3,a4,21c90 <__floatsitf+0xa0>
   21d48:	00012c23          	sw	zero,24(sp)
   21d4c:	01179793          	slli	a5,a5,0x11
   21d50:	01061713          	slli	a4,a2,0x10
   21d54:	01012803          	lw	a6,16(sp)
   21d58:	01412503          	lw	a0,20(sp)
   21d5c:	01812683          	lw	a3,24(sp)
   21d60:	01075713          	srli	a4,a4,0x10
   21d64:	0117d793          	srli	a5,a5,0x11
   21d68:	f61ff06f          	j	21cc8 <__floatsitf+0xd8>
   21d6c:	02000693          	li	a3,32
   21d70:	40c686b3          	sub	a3,a3,a2
   21d74:	00d956b3          	srl	a3,s2,a3
   21d78:	00d12e23          	sw	a3,28(sp)
   21d7c:	00100693          	li	a3,1
   21d80:	f99ff06f          	j	21d18 <__floatsitf+0x128>

00021d84 <__extenddftf2>:
   21d84:	01465793          	srli	a5,a2,0x14
   21d88:	00c61713          	slli	a4,a2,0xc
   21d8c:	7ff7f793          	andi	a5,a5,2047
   21d90:	fd010113          	addi	sp,sp,-48
   21d94:	00c75713          	srli	a4,a4,0xc
   21d98:	00178693          	addi	a3,a5,1
   21d9c:	02812423          	sw	s0,40(sp)
   21da0:	02912223          	sw	s1,36(sp)
   21da4:	03212023          	sw	s2,32(sp)
   21da8:	02112623          	sw	ra,44(sp)
   21dac:	00b12823          	sw	a1,16(sp)
   21db0:	00e12a23          	sw	a4,20(sp)
   21db4:	00012e23          	sw	zero,28(sp)
   21db8:	00012c23          	sw	zero,24(sp)
   21dbc:	7fe6f693          	andi	a3,a3,2046
   21dc0:	00058413          	mv	s0,a1
   21dc4:	00050913          	mv	s2,a0
   21dc8:	01f65493          	srli	s1,a2,0x1f
   21dcc:	06068863          	beqz	a3,21e3c <__extenddftf2+0xb8>
   21dd0:	000046b7          	lui	a3,0x4
   21dd4:	c0068693          	addi	a3,a3,-1024 # 3c00 <xTaskGetSchedulerState+0x14>
   21dd8:	00d787b3          	add	a5,a5,a3
   21ddc:	0045d613          	srli	a2,a1,0x4
   21de0:	01c71693          	slli	a3,a4,0x1c
   21de4:	01179793          	slli	a5,a5,0x11
   21de8:	00c6e6b3          	or	a3,a3,a2
   21dec:	01c59413          	slli	s0,a1,0x1c
   21df0:	00475713          	srli	a4,a4,0x4
   21df4:	0117d793          	srli	a5,a5,0x11
   21df8:	00000513          	li	a0,0
   21dfc:	00f49613          	slli	a2,s1,0xf
   21e00:	00c7e7b3          	or	a5,a5,a2
   21e04:	00e11623          	sh	a4,12(sp)
   21e08:	00f11723          	sh	a5,14(sp)
   21e0c:	00c12783          	lw	a5,12(sp)
   21e10:	00892223          	sw	s0,4(s2) # 8004 <__malloc_lock+0x6c>
   21e14:	02c12083          	lw	ra,44(sp)
   21e18:	02812403          	lw	s0,40(sp)
   21e1c:	00a92023          	sw	a0,0(s2)
   21e20:	00d92423          	sw	a3,8(s2)
   21e24:	00f92623          	sw	a5,12(s2)
   21e28:	02412483          	lw	s1,36(sp)
   21e2c:	00090513          	mv	a0,s2
   21e30:	02012903          	lw	s2,32(sp)
   21e34:	03010113          	addi	sp,sp,48
   21e38:	00008067          	ret
   21e3c:	00b76533          	or	a0,a4,a1
   21e40:	0a079463          	bnez	a5,21ee8 <__extenddftf2+0x164>
   21e44:	0e050463          	beqz	a0,21f2c <__extenddftf2+0x1a8>
   21e48:	0e070c63          	beqz	a4,21f40 <__extenddftf2+0x1bc>
   21e4c:	00070513          	mv	a0,a4
   21e50:	8d4fc0ef          	jal	ra,1df24 <__clzsi2>
   21e54:	03150793          	addi	a5,a0,49
   21e58:	01f7f813          	andi	a6,a5,31
   21e5c:	4057d793          	srai	a5,a5,0x5
   21e60:	10081863          	bnez	a6,21f70 <__extenddftf2+0x1ec>
   21e64:	40f006b3          	neg	a3,a5
   21e68:	00269693          	slli	a3,a3,0x2
   21e6c:	01010593          	addi	a1,sp,16
   21e70:	00d58733          	add	a4,a1,a3
   21e74:	00010893          	mv	a7,sp
   21e78:	40d006b3          	neg	a3,a3
   21e7c:	00c72803          	lw	a6,12(a4)
   21e80:	00d70633          	add	a2,a4,a3
   21e84:	ffc70713          	addi	a4,a4,-4
   21e88:	01062623          	sw	a6,12(a2)
   21e8c:	fee898e3          	bne	a7,a4,21e7c <__extenddftf2+0xf8>
   21e90:	fff78713          	addi	a4,a5,-1
   21e94:	00170793          	addi	a5,a4,1
   21e98:	00279793          	slli	a5,a5,0x2
   21e9c:	00800713          	li	a4,8
   21ea0:	00e7ea63          	bltu	a5,a4,21eb4 <__extenddftf2+0x130>
   21ea4:	00012823          	sw	zero,16(sp)
   21ea8:	0005a223          	sw	zero,4(a1)
   21eac:	ff878793          	addi	a5,a5,-8
   21eb0:	01810593          	addi	a1,sp,24
   21eb4:	00400713          	li	a4,4
   21eb8:	00e7e463          	bltu	a5,a4,21ec0 <__extenddftf2+0x13c>
   21ebc:	0005a023          	sw	zero,0(a1)
   21ec0:	000047b7          	lui	a5,0x4
   21ec4:	c0c78793          	addi	a5,a5,-1012 # 3c0c <xTaskGetSchedulerState+0x20>
   21ec8:	40a787b3          	sub	a5,a5,a0
   21ecc:	01179793          	slli	a5,a5,0x11
   21ed0:	01012503          	lw	a0,16(sp)
   21ed4:	01412403          	lw	s0,20(sp)
   21ed8:	01812683          	lw	a3,24(sp)
   21edc:	01c15703          	lhu	a4,28(sp)
   21ee0:	0117d793          	srli	a5,a5,0x11
   21ee4:	f19ff06f          	j	21dfc <__extenddftf2+0x78>
   21ee8:	02050663          	beqz	a0,21f14 <__extenddftf2+0x190>
   21eec:	000087b7          	lui	a5,0x8
   21ef0:	01c71693          	slli	a3,a4,0x1c
   21ef4:	0045d613          	srli	a2,a1,0x4
   21ef8:	00475713          	srli	a4,a4,0x4
   21efc:	00f76733          	or	a4,a4,a5
   21f00:	00c6e6b3          	or	a3,a3,a2
   21f04:	01c59413          	slli	s0,a1,0x1c
   21f08:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   21f0c:	00000513          	li	a0,0
   21f10:	eedff06f          	j	21dfc <__extenddftf2+0x78>
   21f14:	000087b7          	lui	a5,0x8
   21f18:	00000693          	li	a3,0
   21f1c:	00000413          	li	s0,0
   21f20:	fff78793          	addi	a5,a5,-1 # 7fff <__malloc_lock+0x67>
   21f24:	00000713          	li	a4,0
   21f28:	ed5ff06f          	j	21dfc <__extenddftf2+0x78>
   21f2c:	00000693          	li	a3,0
   21f30:	00000413          	li	s0,0
   21f34:	00000793          	li	a5,0
   21f38:	00000713          	li	a4,0
   21f3c:	ec1ff06f          	j	21dfc <__extenddftf2+0x78>
   21f40:	fe5fb0ef          	jal	ra,1df24 <__clzsi2>
   21f44:	05150793          	addi	a5,a0,81
   21f48:	01f7f813          	andi	a6,a5,31
   21f4c:	02050513          	addi	a0,a0,32
   21f50:	4057d793          	srai	a5,a5,0x5
   21f54:	f00808e3          	beqz	a6,21e64 <__extenddftf2+0xe0>
   21f58:	00200713          	li	a4,2
   21f5c:	00e78a63          	beq	a5,a4,21f70 <__extenddftf2+0x1ec>
   21f60:	00200713          	li	a4,2
   21f64:	00300793          	li	a5,3
   21f68:	01010593          	addi	a1,sp,16
   21f6c:	0600006f          	j	21fcc <__extenddftf2+0x248>
   21f70:	40f00333          	neg	t1,a5
   21f74:	00231313          	slli	t1,t1,0x2
   21f78:	00c30613          	addi	a2,t1,12
   21f7c:	02000e93          	li	t4,32
   21f80:	01010593          	addi	a1,sp,16
   21f84:	410e8eb3          	sub	t4,t4,a6
   21f88:	00c58633          	add	a2,a1,a2
   21f8c:	40600333          	neg	t1,t1
   21f90:	00300713          	li	a4,3
   21f94:	00062683          	lw	a3,0(a2)
   21f98:	ffc62883          	lw	a7,-4(a2)
   21f9c:	ffe70713          	addi	a4,a4,-2
   21fa0:	010696b3          	sll	a3,a3,a6
   21fa4:	01d8d8b3          	srl	a7,a7,t4
   21fa8:	00660e33          	add	t3,a2,t1
   21fac:	0116e6b3          	or	a3,a3,a7
   21fb0:	00e03733          	snez	a4,a4
   21fb4:	00de2023          	sw	a3,0(t3)
   21fb8:	00170693          	addi	a3,a4,1
   21fbc:	ffc60613          	addi	a2,a2,-4
   21fc0:	00200713          	li	a4,2
   21fc4:	fcd7c8e3          	blt	a5,a3,21f94 <__extenddftf2+0x210>
   21fc8:	fff78713          	addi	a4,a5,-1
   21fcc:	00279793          	slli	a5,a5,0x2
   21fd0:	02078793          	addi	a5,a5,32
   21fd4:	002787b3          	add	a5,a5,sp
   21fd8:	01041833          	sll	a6,s0,a6
   21fdc:	ff07a823          	sw	a6,-16(a5)
   21fe0:	eb5ff06f          	j	21e94 <__extenddftf2+0x110>

00021fe4 <__trunctfdf2>:
   21fe4:	00c52583          	lw	a1,12(a0)
   21fe8:	00052803          	lw	a6,0(a0)
   21fec:	00852783          	lw	a5,8(a0)
   21ff0:	00452683          	lw	a3,4(a0)
   21ff4:	01059613          	slli	a2,a1,0x10
   21ff8:	fe010113          	addi	sp,sp,-32
   21ffc:	00159713          	slli	a4,a1,0x1
   22000:	01065613          	srli	a2,a2,0x10
   22004:	01012023          	sw	a6,0(sp)
   22008:	00f12423          	sw	a5,8(sp)
   2200c:	00b12623          	sw	a1,12(sp)
   22010:	01012823          	sw	a6,16(sp)
   22014:	00f12c23          	sw	a5,24(sp)
   22018:	00d12223          	sw	a3,4(sp)
   2201c:	00d12a23          	sw	a3,20(sp)
   22020:	00c12e23          	sw	a2,28(sp)
   22024:	01175713          	srli	a4,a4,0x11
   22028:	01f5d593          	srli	a1,a1,0x1f
   2202c:	01010813          	addi	a6,sp,16
   22030:	01c10793          	addi	a5,sp,28
   22034:	00361513          	slli	a0,a2,0x3
   22038:	ffc7a603          	lw	a2,-4(a5)
   2203c:	ffc78793          	addi	a5,a5,-4
   22040:	01d65693          	srli	a3,a2,0x1d
   22044:	00a6e6b3          	or	a3,a3,a0
   22048:	00d7a223          	sw	a3,4(a5)
   2204c:	fef814e3          	bne	a6,a5,22034 <__trunctfdf2+0x50>
   22050:	01012603          	lw	a2,16(sp)
   22054:	00008537          	lui	a0,0x8
   22058:	00170693          	addi	a3,a4,1
   2205c:	00361613          	slli	a2,a2,0x3
   22060:	ffe50513          	addi	a0,a0,-2 # 7ffe <__malloc_lock+0x66>
   22064:	00c12823          	sw	a2,16(sp)
   22068:	00a6f6b3          	and	a3,a3,a0
   2206c:	02068463          	beqz	a3,22094 <__trunctfdf2+0xb0>
   22070:	ffffc6b7          	lui	a3,0xffffc
   22074:	40068693          	addi	a3,a3,1024 # ffffc400 <__alt_data_end+0xfffbc400>
   22078:	00d70733          	add	a4,a4,a3
   2207c:	7fe00693          	li	a3,2046
   22080:	0ce6d663          	bge	a3,a4,2214c <__trunctfdf2+0x168>
   22084:	7ff00713          	li	a4,2047
   22088:	00000513          	li	a0,0
   2208c:	00000613          	li	a2,0
   22090:	0280006f          	j	220b8 <__trunctfdf2+0xd4>
   22094:	01412783          	lw	a5,20(sp)
   22098:	01812683          	lw	a3,24(sp)
   2209c:	01c12503          	lw	a0,28(sp)
   220a0:	02071c63          	bnez	a4,220d8 <__trunctfdf2+0xf4>
   220a4:	00000513          	li	a0,0
   220a8:	00000613          	li	a2,0
   220ac:	00c51513          	slli	a0,a0,0xc
   220b0:	00c55513          	srli	a0,a0,0xc
   220b4:	7ff77713          	andi	a4,a4,2047
   220b8:	01471713          	slli	a4,a4,0x14
   220bc:	00a76733          	or	a4,a4,a0
   220c0:	01f59593          	slli	a1,a1,0x1f
   220c4:	00b76733          	or	a4,a4,a1
   220c8:	00060513          	mv	a0,a2
   220cc:	00070593          	mv	a1,a4
   220d0:	02010113          	addi	sp,sp,32
   220d4:	00008067          	ret
   220d8:	00d7e733          	or	a4,a5,a3
   220dc:	00a76733          	or	a4,a4,a0
   220e0:	00c76733          	or	a4,a4,a2
   220e4:	fa0700e3          	beqz	a4,22084 <__trunctfdf2+0xa0>
   220e8:	00469713          	slli	a4,a3,0x4
   220ec:	01c7d793          	srli	a5,a5,0x1c
   220f0:	01c6d693          	srli	a3,a3,0x1c
   220f4:	00451513          	slli	a0,a0,0x4
   220f8:	00e7e7b3          	or	a5,a5,a4
   220fc:	00a6e6b3          	or	a3,a3,a0
   22100:	00400737          	lui	a4,0x400
   22104:	00e6e6b3          	or	a3,a3,a4
   22108:	ff87f793          	andi	a5,a5,-8
   2210c:	7ff00713          	li	a4,2047
   22110:	00800637          	lui	a2,0x800
   22114:	00c6f633          	and	a2,a3,a2
   22118:	08061e63          	bnez	a2,221b4 <__trunctfdf2+0x1d0>
   2211c:	01d69513          	slli	a0,a3,0x1d
   22120:	0037d793          	srli	a5,a5,0x3
   22124:	7ff00813          	li	a6,2047
   22128:	00a7e7b3          	or	a5,a5,a0
   2212c:	0036d513          	srli	a0,a3,0x3
   22130:	25071863          	bne	a4,a6,22380 <__trunctfdf2+0x39c>
   22134:	00a7e7b3          	or	a5,a5,a0
   22138:	f40786e3          	beqz	a5,22084 <__trunctfdf2+0xa0>
   2213c:	00000593          	li	a1,0
   22140:	7ff00713          	li	a4,2047
   22144:	00080537          	lui	a0,0x80
   22148:	f71ff06f          	j	220b8 <__trunctfdf2+0xd4>
   2214c:	0ce05063          	blez	a4,2220c <__trunctfdf2+0x228>
   22150:	01412683          	lw	a3,20(sp)
   22154:	01812503          	lw	a0,24(sp)
   22158:	00469793          	slli	a5,a3,0x4
   2215c:	00c7e7b3          	or	a5,a5,a2
   22160:	01c6d693          	srli	a3,a3,0x1c
   22164:	00451613          	slli	a2,a0,0x4
   22168:	00c6e633          	or	a2,a3,a2
   2216c:	01c12683          	lw	a3,28(sp)
   22170:	00f037b3          	snez	a5,a5
   22174:	01c55513          	srli	a0,a0,0x1c
   22178:	00469693          	slli	a3,a3,0x4
   2217c:	00c7e7b3          	or	a5,a5,a2
   22180:	00a6e6b3          	or	a3,a3,a0
   22184:	0077f613          	andi	a2,a5,7
   22188:	f80604e3          	beqz	a2,22110 <__trunctfdf2+0x12c>
   2218c:	00f7f613          	andi	a2,a5,15
   22190:	00400513          	li	a0,4
   22194:	00a60a63          	beq	a2,a0,221a8 <__trunctfdf2+0x1c4>
   22198:	00478613          	addi	a2,a5,4
   2219c:	00f637b3          	sltu	a5,a2,a5
   221a0:	00f686b3          	add	a3,a3,a5
   221a4:	00060793          	mv	a5,a2
   221a8:	00800637          	lui	a2,0x800
   221ac:	00c6f633          	and	a2,a3,a2
   221b0:	0e060a63          	beqz	a2,222a4 <__trunctfdf2+0x2c0>
   221b4:	ff800637          	lui	a2,0xff800
   221b8:	fff60613          	addi	a2,a2,-1 # ff7fffff <__alt_data_end+0xff7bffff>
   221bc:	00170813          	addi	a6,a4,1 # 400001 <__alt_data_end+0x3c0001>
   221c0:	7ff00713          	li	a4,2047
   221c4:	00c6f6b3          	and	a3,a3,a2
   221c8:	00000513          	li	a0,0
   221cc:	00000613          	li	a2,0
   221d0:	eee804e3          	beq	a6,a4,220b8 <__trunctfdf2+0xd4>
   221d4:	01d69613          	slli	a2,a3,0x1d
   221d8:	7ff87713          	andi	a4,a6,2047
   221dc:	00969693          	slli	a3,a3,0x9
   221e0:	00c6d513          	srli	a0,a3,0xc
   221e4:	01471713          	slli	a4,a4,0x14
   221e8:	00a76733          	or	a4,a4,a0
   221ec:	01f59593          	slli	a1,a1,0x1f
   221f0:	0037d793          	srli	a5,a5,0x3
   221f4:	00f66633          	or	a2,a2,a5
   221f8:	00b76733          	or	a4,a4,a1
   221fc:	00060513          	mv	a0,a2
   22200:	00070593          	mv	a1,a4
   22204:	02010113          	addi	sp,sp,32
   22208:	00008067          	ret
   2220c:	fcc00693          	li	a3,-52
   22210:	08d74463          	blt	a4,a3,22298 <__trunctfdf2+0x2b4>
   22214:	03d00693          	li	a3,61
   22218:	40e686b3          	sub	a3,a3,a4
   2221c:	01c12703          	lw	a4,28(sp)
   22220:	4056de13          	srai	t3,a3,0x5
   22224:	00080eb7          	lui	t4,0x80
   22228:	00eeeeb3          	or	t4,t4,a4
   2222c:	002e1513          	slli	a0,t3,0x2
   22230:	01d12e23          	sw	t4,28(sp)
   22234:	01f6f693          	andi	a3,a3,31
   22238:	00a808b3          	add	a7,a6,a0
   2223c:	00080613          	mv	a2,a6
   22240:	00000713          	li	a4,0
   22244:	00062303          	lw	t1,0(a2)
   22248:	00460613          	addi	a2,a2,4
   2224c:	00676733          	or	a4,a4,t1
   22250:	fec89ae3          	bne	a7,a2,22244 <__trunctfdf2+0x260>
   22254:	00300613          	li	a2,3
   22258:	41c60633          	sub	a2,a2,t3
   2225c:	04069e63          	bnez	a3,222b8 <__trunctfdf2+0x2d4>
   22260:	0008a883          	lw	a7,0(a7)
   22264:	00168693          	addi	a3,a3,1
   22268:	00478793          	addi	a5,a5,4
   2226c:	ff17ae23          	sw	a7,-4(a5)
   22270:	00d64e63          	blt	a2,a3,2228c <__trunctfdf2+0x2a8>
   22274:	00a788b3          	add	a7,a5,a0
   22278:	0008a883          	lw	a7,0(a7)
   2227c:	00168693          	addi	a3,a3,1
   22280:	00478793          	addi	a5,a5,4
   22284:	ff17ae23          	sw	a7,-4(a5)
   22288:	fed656e3          	bge	a2,a3,22274 <__trunctfdf2+0x290>
   2228c:	00400793          	li	a5,4
   22290:	41c787b3          	sub	a5,a5,t3
   22294:	08c0006f          	j	22320 <__trunctfdf2+0x33c>
   22298:	00000713          	li	a4,0
   2229c:	00500793          	li	a5,5
   222a0:	00000693          	li	a3,0
   222a4:	01d69613          	slli	a2,a3,0x1d
   222a8:	0037d793          	srli	a5,a5,0x3
   222ac:	00f66633          	or	a2,a2,a5
   222b0:	0036d513          	srli	a0,a3,0x3
   222b4:	df9ff06f          	j	220ac <__trunctfdf2+0xc8>
   222b8:	02050893          	addi	a7,a0,32 # 80020 <__alt_data_end+0x40020>
   222bc:	002888b3          	add	a7,a7,sp
   222c0:	ff08a883          	lw	a7,-16(a7)
   222c4:	02000f13          	li	t5,32
   222c8:	40df0f33          	sub	t5,t5,a3
   222cc:	01e898b3          	sll	a7,a7,t5
   222d0:	01176733          	or	a4,a4,a7
   222d4:	0a060063          	beqz	a2,22374 <__trunctfdf2+0x390>
   222d8:	00261893          	slli	a7,a2,0x2
   222dc:	00f88fb3          	add	t6,a7,a5
   222e0:	00a80633          	add	a2,a6,a0
   222e4:	00062503          	lw	a0,0(a2)
   222e8:	00462303          	lw	t1,4(a2)
   222ec:	00478793          	addi	a5,a5,4
   222f0:	00d55533          	srl	a0,a0,a3
   222f4:	01e31333          	sll	t1,t1,t5
   222f8:	00656533          	or	a0,a0,t1
   222fc:	fea7ae23          	sw	a0,-4(a5)
   22300:	00460613          	addi	a2,a2,4
   22304:	feff90e3          	bne	t6,a5,222e4 <__trunctfdf2+0x300>
   22308:	00400793          	li	a5,4
   2230c:	41c787b3          	sub	a5,a5,t3
   22310:	02088613          	addi	a2,a7,32
   22314:	00260633          	add	a2,a2,sp
   22318:	00dedeb3          	srl	t4,t4,a3
   2231c:	ffd62823          	sw	t4,-16(a2)
   22320:	00400693          	li	a3,4
   22324:	40f686b3          	sub	a3,a3,a5
   22328:	00269693          	slli	a3,a3,0x2
   2232c:	00279793          	slli	a5,a5,0x2
   22330:	00800613          	li	a2,8
   22334:	00f80833          	add	a6,a6,a5
   22338:	00c6ea63          	bltu	a3,a2,2234c <__trunctfdf2+0x368>
   2233c:	00082023          	sw	zero,0(a6)
   22340:	00082223          	sw	zero,4(a6)
   22344:	ff868693          	addi	a3,a3,-8
   22348:	00880813          	addi	a6,a6,8
   2234c:	00400793          	li	a5,4
   22350:	00f6e463          	bltu	a3,a5,22358 <__trunctfdf2+0x374>
   22354:	00082023          	sw	zero,0(a6)
   22358:	00e037b3          	snez	a5,a4
   2235c:	01012703          	lw	a4,16(sp)
   22360:	01412683          	lw	a3,20(sp)
   22364:	00e7e7b3          	or	a5,a5,a4
   22368:	0077f613          	andi	a2,a5,7
   2236c:	00000713          	li	a4,0
   22370:	e19ff06f          	j	22188 <__trunctfdf2+0x1a4>
   22374:	00100793          	li	a5,1
   22378:	00000893          	li	a7,0
   2237c:	f95ff06f          	j	22310 <__trunctfdf2+0x32c>
   22380:	00078613          	mv	a2,a5
   22384:	d29ff06f          	j	220ac <__trunctfdf2+0xc8>

00022388 <alt_get_errno>:
{
   22388:	ff010113          	addi	sp,sp,-16
   2238c:	00112623          	sw	ra,12(sp)
   22390:	00812423          	sw	s0,8(sp)
   22394:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   22398:	000267b7          	lui	a5,0x26
   2239c:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   223a0:	00078c63          	beqz	a5,223b8 <alt_get_errno+0x30>
   223a4:	000267b7          	lui	a5,0x26
   223a8:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   223ac:	000780e7          	jalr	a5
   223b0:	00050793          	mv	a5,a0
   223b4:	00c0006f          	j	223c0 <alt_get_errno+0x38>
   223b8:	000287b7          	lui	a5,0x28
   223bc:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   223c0:	00078513          	mv	a0,a5
   223c4:	00c12083          	lw	ra,12(sp)
   223c8:	00812403          	lw	s0,8(sp)
   223cc:	01010113          	addi	sp,sp,16
   223d0:	00008067          	ret

000223d4 <_close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   223d4:	fd010113          	addi	sp,sp,-48
   223d8:	02112623          	sw	ra,44(sp)
   223dc:	02812423          	sw	s0,40(sp)
   223e0:	03010413          	addi	s0,sp,48
   223e4:	fca42e23          	sw	a0,-36(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   223e8:	fdc42783          	lw	a5,-36(s0)
   223ec:	0207c463          	bltz	a5,22414 <_close+0x40>
   223f0:	fdc42703          	lw	a4,-36(s0)
   223f4:	00070793          	mv	a5,a4
   223f8:	00179793          	slli	a5,a5,0x1
   223fc:	00e787b3          	add	a5,a5,a4
   22400:	00279793          	slli	a5,a5,0x2
   22404:	00025737          	lui	a4,0x25
   22408:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   2240c:	00e787b3          	add	a5,a5,a4
   22410:	0080006f          	j	22418 <_close+0x44>
   22414:	00000793          	li	a5,0
   22418:	fef42423          	sw	a5,-24(s0)

  if (fd)
   2241c:	fe842783          	lw	a5,-24(s0)
   22420:	06078663          	beqz	a5,2248c <_close+0xb8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22424:	fe842783          	lw	a5,-24(s0)
   22428:	0007a783          	lw	a5,0(a5)
   2242c:	0107a783          	lw	a5,16(a5)
   22430:	02078063          	beqz	a5,22450 <_close+0x7c>
   22434:	fe842783          	lw	a5,-24(s0)
   22438:	0007a783          	lw	a5,0(a5)
   2243c:	0107a783          	lw	a5,16(a5)
   22440:	fe842503          	lw	a0,-24(s0)
   22444:	000780e7          	jalr	a5
   22448:	00050793          	mv	a5,a0
   2244c:	0080006f          	j	22454 <_close+0x80>
   22450:	00000793          	li	a5,0
   22454:	fef42623          	sw	a5,-20(s0)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22458:	fdc42503          	lw	a0,-36(s0)
   2245c:	d1dea0ef          	jal	ra,d178 <alt_release_fd>
    if (rval < 0)
   22460:	fec42783          	lw	a5,-20(s0)
   22464:	0207d063          	bgez	a5,22484 <_close+0xb0>
    {
      ALT_ERRNO = -rval;
   22468:	f21ff0ef          	jal	ra,22388 <alt_get_errno>
   2246c:	00050713          	mv	a4,a0
   22470:	fec42783          	lw	a5,-20(s0)
   22474:	40f007b3          	neg	a5,a5
   22478:	00f72023          	sw	a5,0(a4)
      return -1;
   2247c:	fff00793          	li	a5,-1
   22480:	0200006f          	j	224a0 <_close+0xcc>
    }
    return 0;
   22484:	00000793          	li	a5,0
   22488:	0180006f          	j	224a0 <_close+0xcc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2248c:	efdff0ef          	jal	ra,22388 <alt_get_errno>
   22490:	00050713          	mv	a4,a0
   22494:	05100793          	li	a5,81
   22498:	00f72023          	sw	a5,0(a4)
    return -1;
   2249c:	fff00793          	li	a5,-1
  }
}
   224a0:	00078513          	mv	a0,a5
   224a4:	02c12083          	lw	ra,44(sp)
   224a8:	02812403          	lw	s0,40(sp)
   224ac:	03010113          	addi	sp,sp,48
   224b0:	00008067          	ret

000224b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   224b4:	fd010113          	addi	sp,sp,-48
   224b8:	02812623          	sw	s0,44(sp)
   224bc:	03010413          	addi	s0,sp,48
   224c0:	fca42e23          	sw	a0,-36(s0)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   224c4:	00000013          	nop
   224c8:	fdc42783          	lw	a5,-36(s0)
   224cc:	fef42623          	sw	a5,-20(s0)
 * Routine called on exit.
 * TODO: Add support for GMON/gprof.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int a0 asm ("a0") = exit_code;
   224d0:	fec42503          	lw	a0,-20(s0)
    "ebreak" 
    : 
    : "r"(a0), "r"(a1));

#else /* !DEBUG_STUB */
  if (a0) {
   224d4:	00050793          	mv	a5,a0
   224d8:	00078663          	beqz	a5,224e4 <_exit+0x30>
    ALT_SIM_FAIL();
   224dc:	7c103013          	sltiu	zero,zero,1985
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   224e0:	0080006f          	j	224e8 <_exit+0x34>
    ALT_SIM_PASS();
   224e4:	7c203013          	sltiu	zero,zero,1986
}
   224e8:	00000013          	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   224ec:	00000013          	nop
   224f0:	ffdff06f          	j	224ec <_exit+0x38>

000224f4 <alt_get_errno>:
{
   224f4:	ff010113          	addi	sp,sp,-16
   224f8:	00112623          	sw	ra,12(sp)
   224fc:	00812423          	sw	s0,8(sp)
   22500:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   22504:	000267b7          	lui	a5,0x26
   22508:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   2250c:	00078c63          	beqz	a5,22524 <alt_get_errno+0x30>
   22510:	000267b7          	lui	a5,0x26
   22514:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22518:	000780e7          	jalr	a5
   2251c:	00050793          	mv	a5,a0
   22520:	00c0006f          	j	2252c <alt_get_errno+0x38>
   22524:	000287b7          	lui	a5,0x28
   22528:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   2252c:	00078513          	mv	a0,a5
   22530:	00c12083          	lw	ra,12(sp)
   22534:	00812403          	lw	s0,8(sp)
   22538:	01010113          	addi	sp,sp,16
   2253c:	00008067          	ret

00022540 <_fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   22540:	fd010113          	addi	sp,sp,-48
   22544:	02112623          	sw	ra,44(sp)
   22548:	02812423          	sw	s0,40(sp)
   2254c:	03010413          	addi	s0,sp,48
   22550:	fca42e23          	sw	a0,-36(s0)
   22554:	fcb42c23          	sw	a1,-40(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22558:	fdc42783          	lw	a5,-36(s0)
   2255c:	0207c463          	bltz	a5,22584 <_fstat+0x44>
   22560:	fdc42703          	lw	a4,-36(s0)
   22564:	00070793          	mv	a5,a4
   22568:	00179793          	slli	a5,a5,0x1
   2256c:	00e787b3          	add	a5,a5,a4
   22570:	00279793          	slli	a5,a5,0x2
   22574:	00025737          	lui	a4,0x25
   22578:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   2257c:	00e787b3          	add	a5,a5,a4
   22580:	0080006f          	j	22588 <_fstat+0x48>
   22584:	00000793          	li	a5,0
   22588:	fef42623          	sw	a5,-20(s0)
  
  if (fd)
   2258c:	fec42783          	lw	a5,-20(s0)
   22590:	04078463          	beqz	a5,225d8 <_fstat+0x98>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   22594:	fec42783          	lw	a5,-20(s0)
   22598:	0007a783          	lw	a5,0(a5)
   2259c:	0207a783          	lw	a5,32(a5)
   225a0:	02078263          	beqz	a5,225c4 <_fstat+0x84>
    {
      return fd->dev->fstat(fd, st);
   225a4:	fec42783          	lw	a5,-20(s0)
   225a8:	0007a783          	lw	a5,0(a5)
   225ac:	0207a783          	lw	a5,32(a5)
   225b0:	fd842583          	lw	a1,-40(s0)
   225b4:	fec42503          	lw	a0,-20(s0)
   225b8:	000780e7          	jalr	a5
   225bc:	00050793          	mv	a5,a0
   225c0:	02c0006f          	j	225ec <_fstat+0xac>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   225c4:	fd842783          	lw	a5,-40(s0)
   225c8:	00002737          	lui	a4,0x2
   225cc:	00e7a223          	sw	a4,4(a5)
      return 0;
   225d0:	00000793          	li	a5,0
   225d4:	0180006f          	j	225ec <_fstat+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   225d8:	f1dff0ef          	jal	ra,224f4 <alt_get_errno>
   225dc:	00050713          	mv	a4,a0
   225e0:	05100793          	li	a5,81
   225e4:	00f72023          	sw	a5,0(a4) # 2000 <prvSearchForNameWithinSingleList+0x10c>
    return -1;
   225e8:	fff00793          	li	a5,-1
  }
}
   225ec:	00078513          	mv	a0,a5
   225f0:	02c12083          	lw	ra,44(sp)
   225f4:	02812403          	lw	s0,40(sp)
   225f8:	03010113          	addi	sp,sp,48
   225fc:	00008067          	ret

00022600 <_getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   22600:	ff010113          	addi	sp,sp,-16
   22604:	00812623          	sw	s0,12(sp)
   22608:	01010413          	addi	s0,sp,16
  return 0;
   2260c:	00000793          	li	a5,0
}
   22610:	00078513          	mv	a0,a5
   22614:	00c12403          	lw	s0,12(sp)
   22618:	01010113          	addi	sp,sp,16
   2261c:	00008067          	ret

00022620 <alt_get_errno>:
{
   22620:	ff010113          	addi	sp,sp,-16
   22624:	00112623          	sw	ra,12(sp)
   22628:	00812423          	sw	s0,8(sp)
   2262c:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   22630:	000267b7          	lui	a5,0x26
   22634:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22638:	00078c63          	beqz	a5,22650 <alt_get_errno+0x30>
   2263c:	000267b7          	lui	a5,0x26
   22640:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22644:	000780e7          	jalr	a5
   22648:	00050793          	mv	a5,a0
   2264c:	00c0006f          	j	22658 <alt_get_errno+0x38>
   22650:	000287b7          	lui	a5,0x28
   22654:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   22658:	00078513          	mv	a0,a5
   2265c:	00c12083          	lw	ra,12(sp)
   22660:	00812403          	lw	s0,8(sp)
   22664:	01010113          	addi	sp,sp,16
   22668:	00008067          	ret

0002266c <_isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2266c:	f7010113          	addi	sp,sp,-144
   22670:	08112623          	sw	ra,140(sp)
   22674:	08812423          	sw	s0,136(sp)
   22678:	09010413          	addi	s0,sp,144
   2267c:	f6a42e23          	sw	a0,-132(s0)
   22680:	000287b7          	lui	a5,0x28
   22684:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
   22688:	fee42623          	sw	a4,-20(s0)
   2268c:	00000713          	li	a4,0
  alt_fd*     fd;
  struct stat stat;
  
  stat.st_mode=0;  /* misrac compliance */
   22690:	f8042a23          	sw	zero,-108(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22694:	f7c42783          	lw	a5,-132(s0)
   22698:	0207c463          	bltz	a5,226c0 <_isatty+0x54>
   2269c:	f7c42703          	lw	a4,-132(s0)
   226a0:	00070793          	mv	a5,a4
   226a4:	00179793          	slli	a5,a5,0x1
   226a8:	00e787b3          	add	a5,a5,a4
   226ac:	00279793          	slli	a5,a5,0x2
   226b0:	00025737          	lui	a4,0x25
   226b4:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   226b8:	00e787b3          	add	a5,a5,a4
   226bc:	0080006f          	j	226c4 <_isatty+0x58>
   226c0:	00000793          	li	a5,0
   226c4:	f8f42623          	sw	a5,-116(s0)
  
  if (fd)
   226c8:	f8c42783          	lw	a5,-116(s0)
   226cc:	04078a63          	beqz	a5,22720 <_isatty+0xb4>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   226d0:	f8c42783          	lw	a5,-116(s0)
   226d4:	0007a783          	lw	a5,0(a5)
   226d8:	0207a783          	lw	a5,32(a5)
   226dc:	00079663          	bnez	a5,226e8 <_isatty+0x7c>
    {
      return 1;
   226e0:	00100793          	li	a5,1
   226e4:	0500006f          	j	22734 <_isatty+0xc8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      if (fstat (file, &stat) < 0)
   226e8:	f9040793          	addi	a5,s0,-112
   226ec:	00078593          	mv	a1,a5
   226f0:	f7c42503          	lw	a0,-132(s0)
   226f4:	53d000ef          	jal	ra,23430 <fstat>
   226f8:	00050793          	mv	a5,a0
   226fc:	0007d663          	bgez	a5,22708 <_isatty+0x9c>
        return 0;  // fstat will set ERRNO
   22700:	00000793          	li	a5,0
   22704:	0300006f          	j	22734 <_isatty+0xc8>
      else
        return (stat.st_mode == _IFCHR) ? 1 : 0;
   22708:	f9442703          	lw	a4,-108(s0)
   2270c:	ffffe7b7          	lui	a5,0xffffe
   22710:	00f707b3          	add	a5,a4,a5
   22714:	0017b793          	seqz	a5,a5
   22718:	0ff7f793          	zext.b	a5,a5
   2271c:	0180006f          	j	22734 <_isatty+0xc8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22720:	f01ff0ef          	jal	ra,22620 <alt_get_errno>
   22724:	00050713          	mv	a4,a0
   22728:	05100793          	li	a5,81
   2272c:	00f72023          	sw	a5,0(a4)
    return 0;
   22730:	00000793          	li	a5,0
  }
}
   22734:	00078713          	mv	a4,a5
   22738:	000287b7          	lui	a5,0x28
   2273c:	fec42683          	lw	a3,-20(s0)
   22740:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
   22744:	00f6c7b3          	xor	a5,a3,a5
   22748:	00000693          	li	a3,0
   2274c:	00078463          	beqz	a5,22754 <_isatty+0xe8>
   22750:	d4ceb0ef          	jal	ra,dc9c <__stack_chk_fail>
   22754:	00070513          	mv	a0,a4
   22758:	08c12083          	lw	ra,140(sp)
   2275c:	08812403          	lw	s0,136(sp)
   22760:	09010113          	addi	sp,sp,144
   22764:	00008067          	ret

00022768 <alt_get_errno>:
{
   22768:	ff010113          	addi	sp,sp,-16
   2276c:	00112623          	sw	ra,12(sp)
   22770:	00812423          	sw	s0,8(sp)
   22774:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   22778:	000267b7          	lui	a5,0x26
   2277c:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22780:	00078c63          	beqz	a5,22798 <alt_get_errno+0x30>
   22784:	000267b7          	lui	a5,0x26
   22788:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   2278c:	000780e7          	jalr	a5
   22790:	00050793          	mv	a5,a0
   22794:	00c0006f          	j	227a0 <alt_get_errno+0x38>
   22798:	000287b7          	lui	a5,0x28
   2279c:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   227a0:	00078513          	mv	a0,a5
   227a4:	00c12083          	lw	ra,12(sp)
   227a8:	00812403          	lw	s0,8(sp)
   227ac:	01010113          	addi	sp,sp,16
   227b0:	00008067          	ret

000227b4 <_kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   227b4:	fd010113          	addi	sp,sp,-48
   227b8:	02112623          	sw	ra,44(sp)
   227bc:	02812423          	sw	s0,40(sp)
   227c0:	03010413          	addi	s0,sp,48
   227c4:	fca42e23          	sw	a0,-36(s0)
   227c8:	fcb42c23          	sw	a1,-40(s0)
  int status = 0;
   227cc:	fe042623          	sw	zero,-20(s0)

  if (pid <= 0)
   227d0:	fdc42783          	lw	a5,-36(s0)
   227d4:	06f04e63          	bgtz	a5,22850 <_kill+0x9c>
  {
    switch (sig)
   227d8:	fd842783          	lw	a5,-40(s0)
   227dc:	08078463          	beqz	a5,22864 <_kill+0xb0>
   227e0:	fd842783          	lw	a5,-40(s0)
   227e4:	0607c063          	bltz	a5,22844 <_kill+0x90>
   227e8:	fd842703          	lw	a4,-40(s0)
   227ec:	01f00793          	li	a5,31
   227f0:	04e7ca63          	blt	a5,a4,22844 <_kill+0x90>
   227f4:	fd842703          	lw	a4,-40(s0)
   227f8:	00300793          	li	a5,3
   227fc:	04f74463          	blt	a4,a5,22844 <_kill+0x90>
   22800:	fd842783          	lw	a5,-40(s0)
   22804:	00100713          	li	a4,1
   22808:	00f717b3          	sll	a5,a4,a5
   2280c:	cf810737          	lui	a4,0xcf810
   22810:	f7870713          	addi	a4,a4,-136 # cf80ff78 <__alt_data_end+0xcf7cff78>
   22814:	00e7f733          	and	a4,a5,a4
   22818:	00e03733          	snez	a4,a4
   2281c:	0ff77713          	zext.b	a4,a4
   22820:	00071e63          	bnez	a4,2283c <_kill+0x88>
   22824:	00110737          	lui	a4,0x110
   22828:	00e7f7b3          	and	a5,a5,a4
   2282c:	00f037b3          	snez	a5,a5
   22830:	0ff7f793          	zext.b	a5,a5
   22834:	02079c63          	bnez	a5,2286c <_kill+0xb8>
   22838:	00c0006f          	j	22844 <_kill+0x90>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   2283c:	00000513          	li	a0,0
   22840:	c75ff0ef          	jal	ra,224b4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   22844:	01600793          	li	a5,22
   22848:	fef42623          	sw	a5,-20(s0)
   2284c:	0240006f          	j	22870 <_kill+0xbc>
    }
  }

  else if (pid > 0)
   22850:	fdc42783          	lw	a5,-36(s0)
   22854:	00f05e63          	blez	a5,22870 <_kill+0xbc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   22858:	00300793          	li	a5,3
   2285c:	fef42623          	sw	a5,-20(s0)
   22860:	0100006f          	j	22870 <_kill+0xbc>
      break;
   22864:	00000013          	nop
   22868:	0080006f          	j	22870 <_kill+0xbc>
      break;
   2286c:	00000013          	nop
  }

  if (status)
   22870:	fec42783          	lw	a5,-20(s0)
   22874:	00078e63          	beqz	a5,22890 <_kill+0xdc>
  {
    ALT_ERRNO = status;
   22878:	ef1ff0ef          	jal	ra,22768 <alt_get_errno>
   2287c:	00050713          	mv	a4,a0
   22880:	fec42783          	lw	a5,-20(s0)
   22884:	00f72023          	sw	a5,0(a4) # 110000 <__alt_data_end+0xd0000>
    return -1;
   22888:	fff00793          	li	a5,-1
   2288c:	0080006f          	j	22894 <_kill+0xe0>
  }

  return 0;
   22890:	00000793          	li	a5,0
}
   22894:	00078513          	mv	a0,a5
   22898:	02c12083          	lw	ra,44(sp)
   2289c:	02812403          	lw	s0,40(sp)
   228a0:	03010113          	addi	sp,sp,48
   228a4:	00008067          	ret

000228a8 <alt_get_errno>:
{
   228a8:	ff010113          	addi	sp,sp,-16
   228ac:	00112623          	sw	ra,12(sp)
   228b0:	00812423          	sw	s0,8(sp)
   228b4:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   228b8:	000267b7          	lui	a5,0x26
   228bc:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   228c0:	00078c63          	beqz	a5,228d8 <alt_get_errno+0x30>
   228c4:	000267b7          	lui	a5,0x26
   228c8:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   228cc:	000780e7          	jalr	a5
   228d0:	00050793          	mv	a5,a0
   228d4:	00c0006f          	j	228e0 <alt_get_errno+0x38>
   228d8:	000287b7          	lui	a5,0x28
   228dc:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   228e0:	00078513          	mv	a0,a5
   228e4:	00c12083          	lw	ra,12(sp)
   228e8:	00812403          	lw	s0,8(sp)
   228ec:	01010113          	addi	sp,sp,16
   228f0:	00008067          	ret

000228f4 <_lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   228f4:	fd010113          	addi	sp,sp,-48
   228f8:	02112623          	sw	ra,44(sp)
   228fc:	02812423          	sw	s0,40(sp)
   22900:	03010413          	addi	s0,sp,48
   22904:	fca42e23          	sw	a0,-36(s0)
   22908:	fcb42c23          	sw	a1,-40(s0)
   2290c:	fcc42a23          	sw	a2,-44(s0)
  alt_fd* fd;
  off_t   rc = 0; 
   22910:	fe042423          	sw	zero,-24(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22914:	fdc42783          	lw	a5,-36(s0)
   22918:	0207c463          	bltz	a5,22940 <_lseek+0x4c>
   2291c:	fdc42703          	lw	a4,-36(s0)
   22920:	00070793          	mv	a5,a4
   22924:	00179793          	slli	a5,a5,0x1
   22928:	00e787b3          	add	a5,a5,a4
   2292c:	00279793          	slli	a5,a5,0x2
   22930:	00025737          	lui	a4,0x25
   22934:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   22938:	00e787b3          	add	a5,a5,a4
   2293c:	0080006f          	j	22944 <_lseek+0x50>
   22940:	00000793          	li	a5,0
   22944:	fef42623          	sw	a5,-20(s0)
  
  if (fd) 
   22948:	fec42783          	lw	a5,-20(s0)
   2294c:	04078263          	beqz	a5,22990 <_lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   22950:	fec42783          	lw	a5,-20(s0)
   22954:	0007a783          	lw	a5,0(a5)
   22958:	01c7a783          	lw	a5,28(a5)
   2295c:	02078463          	beqz	a5,22984 <_lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   22960:	fec42783          	lw	a5,-20(s0)
   22964:	0007a783          	lw	a5,0(a5)
   22968:	01c7a783          	lw	a5,28(a5)
   2296c:	fd442603          	lw	a2,-44(s0)
   22970:	fd842583          	lw	a1,-40(s0)
   22974:	fec42503          	lw	a0,-20(s0)
   22978:	000780e7          	jalr	a5
   2297c:	fea42423          	sw	a0,-24(s0)
   22980:	0180006f          	j	22998 <_lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   22984:	f7a00793          	li	a5,-134
   22988:	fef42423          	sw	a5,-24(s0)
   2298c:	00c0006f          	j	22998 <_lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   22990:	faf00793          	li	a5,-81
   22994:	fef42423          	sw	a5,-24(s0)
  }

  if (rc < 0)
   22998:	fe842783          	lw	a5,-24(s0)
   2299c:	0207d063          	bgez	a5,229bc <_lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   229a0:	f09ff0ef          	jal	ra,228a8 <alt_get_errno>
   229a4:	00050713          	mv	a4,a0
   229a8:	fe842783          	lw	a5,-24(s0)
   229ac:	40f007b3          	neg	a5,a5
   229b0:	00f72023          	sw	a5,0(a4)
    rc = -1;
   229b4:	fff00793          	li	a5,-1
   229b8:	fef42423          	sw	a5,-24(s0)
  }

  return rc;
   229bc:	fe842783          	lw	a5,-24(s0)
}
   229c0:	00078513          	mv	a0,a5
   229c4:	02c12083          	lw	ra,44(sp)
   229c8:	02812403          	lw	s0,40(sp)
   229cc:	03010113          	addi	sp,sp,48
   229d0:	00008067          	ret

000229d4 <alt_get_errno>:
{
   229d4:	ff010113          	addi	sp,sp,-16
   229d8:	00112623          	sw	ra,12(sp)
   229dc:	00812423          	sw	s0,8(sp)
   229e0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   229e4:	000267b7          	lui	a5,0x26
   229e8:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   229ec:	00078c63          	beqz	a5,22a04 <alt_get_errno+0x30>
   229f0:	000267b7          	lui	a5,0x26
   229f4:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   229f8:	000780e7          	jalr	a5
   229fc:	00050793          	mv	a5,a0
   22a00:	00c0006f          	j	22a0c <alt_get_errno+0x38>
   22a04:	000287b7          	lui	a5,0x28
   22a08:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   22a0c:	00078513          	mv	a0,a5
   22a10:	00c12083          	lw	ra,12(sp)
   22a14:	00812403          	lw	s0,8(sp)
   22a18:	01010113          	addi	sp,sp,16
   22a1c:	00008067          	ret

00022a20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22a20:	fd010113          	addi	sp,sp,-48
   22a24:	02812623          	sw	s0,44(sp)
   22a28:	03010413          	addi	s0,sp,48
   22a2c:	fca42e23          	sw	a0,-36(s0)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22a30:	fdc42783          	lw	a5,-36(s0)
   22a34:	0087a703          	lw	a4,8(a5)
   22a38:	400007b7          	lui	a5,0x40000
   22a3c:	00f76733          	or	a4,a4,a5
   22a40:	fdc42783          	lw	a5,-36(s0)
   22a44:	00e7a423          	sw	a4,8(a5) # 40000008 <__alt_data_end+0x3ffc0008>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22a48:	fe042623          	sw	zero,-20(s0)
   22a4c:	0980006f          	j	22ae4 <alt_file_locked+0xc4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22a50:	000257b7          	lui	a5,0x25
   22a54:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
   22a58:	fec42703          	lw	a4,-20(s0)
   22a5c:	00070793          	mv	a5,a4
   22a60:	00179793          	slli	a5,a5,0x1
   22a64:	00e787b3          	add	a5,a5,a4
   22a68:	00279793          	slli	a5,a5,0x2
   22a6c:	00f687b3          	add	a5,a3,a5
   22a70:	0007a703          	lw	a4,0(a5)
   22a74:	fdc42783          	lw	a5,-36(s0)
   22a78:	0007a783          	lw	a5,0(a5)
   22a7c:	04f71e63          	bne	a4,a5,22ad8 <alt_file_locked+0xb8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22a80:	000257b7          	lui	a5,0x25
   22a84:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
   22a88:	fec42703          	lw	a4,-20(s0)
   22a8c:	00070793          	mv	a5,a4
   22a90:	00179793          	slli	a5,a5,0x1
   22a94:	00e787b3          	add	a5,a5,a4
   22a98:	00279793          	slli	a5,a5,0x2
   22a9c:	00f687b3          	add	a5,a3,a5
   22aa0:	0087a783          	lw	a5,8(a5)
    if ((alt_fd_list[i].dev == fd->dev) &&
   22aa4:	0207da63          	bgez	a5,22ad8 <alt_file_locked+0xb8>
        (&alt_fd_list[i] != fd))
   22aa8:	fec42703          	lw	a4,-20(s0)
   22aac:	00070793          	mv	a5,a4
   22ab0:	00179793          	slli	a5,a5,0x1
   22ab4:	00e787b3          	add	a5,a5,a4
   22ab8:	00279793          	slli	a5,a5,0x2
   22abc:	00025737          	lui	a4,0x25
   22ac0:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   22ac4:	00e787b3          	add	a5,a5,a4
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22ac8:	fdc42703          	lw	a4,-36(s0)
   22acc:	00f70663          	beq	a4,a5,22ad8 <alt_file_locked+0xb8>
    {
      return -EACCES;
   22ad0:	ff300793          	li	a5,-13
   22ad4:	0280006f          	j	22afc <alt_file_locked+0xdc>
  for (i = 0; i <= alt_max_fd; i++)
   22ad8:	fec42783          	lw	a5,-20(s0)
   22adc:	00178793          	addi	a5,a5,1
   22ae0:	fef42623          	sw	a5,-20(s0)
   22ae4:	000267b7          	lui	a5,0x26
   22ae8:	02c7a783          	lw	a5,44(a5) # 2602c <alt_max_fd>
   22aec:	00078713          	mv	a4,a5
   22af0:	fec42783          	lw	a5,-20(s0)
   22af4:	f4f77ee3          	bgeu	a4,a5,22a50 <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22af8:	00000793          	li	a5,0
}
   22afc:	00078513          	mv	a0,a5
   22b00:	02c12403          	lw	s0,44(sp)
   22b04:	03010113          	addi	sp,sp,48
   22b08:	00008067          	ret

00022b0c <_open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22b0c:	fc010113          	addi	sp,sp,-64
   22b10:	02112e23          	sw	ra,60(sp)
   22b14:	02812c23          	sw	s0,56(sp)
   22b18:	04010413          	addi	s0,sp,64
   22b1c:	fca42623          	sw	a0,-52(s0)
   22b20:	fcb42423          	sw	a1,-56(s0)
   22b24:	fcc42223          	sw	a2,-60(s0)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22b28:	fff00793          	li	a5,-1
   22b2c:	fef42023          	sw	a5,-32(s0)
  int status = -ENODEV;
   22b30:	fed00793          	li	a5,-19
   22b34:	fef42223          	sw	a5,-28(s0)
  int isafs = 0;
   22b38:	fe042423          	sw	zero,-24(s0)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22b3c:	000267b7          	lui	a5,0x26
   22b40:	02478593          	addi	a1,a5,36 # 26024 <alt_dev_list>
   22b44:	fcc42503          	lw	a0,-52(s0)
   22b48:	49c000ef          	jal	ra,22fe4 <alt_find_dev>
   22b4c:	fca42e23          	sw	a0,-36(s0)
   22b50:	fdc42783          	lw	a5,-36(s0)
   22b54:	00079c63          	bnez	a5,22b6c <_open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22b58:	fcc42503          	lw	a0,-52(s0)
   22b5c:	5a8000ef          	jal	ra,23104 <alt_find_file>
   22b60:	fca42e23          	sw	a0,-36(s0)
    isafs = 1;
   22b64:	00100793          	li	a5,1
   22b68:	fef42423          	sw	a5,-24(s0)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22b6c:	fdc42783          	lw	a5,-36(s0)
   22b70:	0a078c63          	beqz	a5,22c28 <_open+0x11c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22b74:	fdc42503          	lw	a0,-36(s0)
   22b78:	6c8000ef          	jal	ra,23240 <alt_get_fd>
   22b7c:	fea42023          	sw	a0,-32(s0)
   22b80:	fe042783          	lw	a5,-32(s0)
   22b84:	0007d863          	bgez	a5,22b94 <_open+0x88>
    {
      status = index;
   22b88:	fe042783          	lw	a5,-32(s0)
   22b8c:	fef42223          	sw	a5,-28(s0)
   22b90:	0a00006f          	j	22c30 <_open+0x124>
    }
    else
    {
      fd = &alt_fd_list[index];
   22b94:	fe042703          	lw	a4,-32(s0)
   22b98:	00070793          	mv	a5,a4
   22b9c:	00179793          	slli	a5,a5,0x1
   22ba0:	00e787b3          	add	a5,a5,a4
   22ba4:	00279793          	slli	a5,a5,0x2
   22ba8:	00025737          	lui	a4,0x25
   22bac:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   22bb0:	00e787b3          	add	a5,a5,a4
   22bb4:	fef42623          	sw	a5,-20(s0)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22bb8:	fc842703          	lw	a4,-56(s0)
   22bbc:	400007b7          	lui	a5,0x40000
   22bc0:	fff78793          	addi	a5,a5,-1 # 3fffffff <__alt_data_end+0x3ffbffff>
   22bc4:	00f77733          	and	a4,a4,a5
   22bc8:	fec42783          	lw	a5,-20(s0)
   22bcc:	00e7a423          	sw	a4,8(a5)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22bd0:	fe842783          	lw	a5,-24(s0)
   22bd4:	00079c63          	bnez	a5,22bec <_open+0xe0>
   22bd8:	fec42503          	lw	a0,-20(s0)
   22bdc:	e45ff0ef          	jal	ra,22a20 <alt_file_locked>
   22be0:	fea42223          	sw	a0,-28(s0)
   22be4:	fe442783          	lw	a5,-28(s0)
   22be8:	0407c463          	bltz	a5,22c30 <_open+0x124>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22bec:	fdc42783          	lw	a5,-36(s0)
   22bf0:	00c7a783          	lw	a5,12(a5)
   22bf4:	02078463          	beqz	a5,22c1c <_open+0x110>
   22bf8:	fdc42783          	lw	a5,-36(s0)
   22bfc:	00c7a783          	lw	a5,12(a5)
   22c00:	fc442683          	lw	a3,-60(s0)
   22c04:	fc842603          	lw	a2,-56(s0)
   22c08:	fcc42583          	lw	a1,-52(s0)
   22c0c:	fec42503          	lw	a0,-20(s0)
   22c10:	000780e7          	jalr	a5
   22c14:	00050793          	mv	a5,a0
   22c18:	0080006f          	j	22c20 <_open+0x114>
   22c1c:	00000793          	li	a5,0
   22c20:	fef42223          	sw	a5,-28(s0)
   22c24:	00c0006f          	j	22c30 <_open+0x124>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22c28:	fed00793          	li	a5,-19
   22c2c:	fef42223          	sw	a5,-28(s0)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22c30:	fe442783          	lw	a5,-28(s0)
   22c34:	0207d463          	bgez	a5,22c5c <_open+0x150>
  {
    alt_release_fd (index);  
   22c38:	fe042503          	lw	a0,-32(s0)
   22c3c:	d3cea0ef          	jal	ra,d178 <alt_release_fd>
    ALT_ERRNO = -status;
   22c40:	d95ff0ef          	jal	ra,229d4 <alt_get_errno>
   22c44:	00050713          	mv	a4,a0
   22c48:	fe442783          	lw	a5,-28(s0)
   22c4c:	40f007b3          	neg	a5,a5
   22c50:	00f72023          	sw	a5,0(a4)
    return -1;
   22c54:	fff00793          	li	a5,-1
   22c58:	0080006f          	j	22c60 <_open+0x154>
  }
  
  /* return the reference upon success */

  return index;
   22c5c:	fe042783          	lw	a5,-32(s0)
}
   22c60:	00078513          	mv	a0,a5
   22c64:	03c12083          	lw	ra,60(sp)
   22c68:	03812403          	lw	s0,56(sp)
   22c6c:	04010113          	addi	sp,sp,64
   22c70:	00008067          	ret

00022c74 <alt_get_errno>:
{
   22c74:	ff010113          	addi	sp,sp,-16
   22c78:	00112623          	sw	ra,12(sp)
   22c7c:	00812423          	sw	s0,8(sp)
   22c80:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   22c84:	000267b7          	lui	a5,0x26
   22c88:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22c8c:	00078c63          	beqz	a5,22ca4 <alt_get_errno+0x30>
   22c90:	000267b7          	lui	a5,0x26
   22c94:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22c98:	000780e7          	jalr	a5
   22c9c:	00050793          	mv	a5,a0
   22ca0:	00c0006f          	j	22cac <alt_get_errno+0x38>
   22ca4:	000287b7          	lui	a5,0x28
   22ca8:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   22cac:	00078513          	mv	a0,a5
   22cb0:	00c12083          	lw	ra,12(sp)
   22cb4:	00812403          	lw	s0,8(sp)
   22cb8:	01010113          	addi	sp,sp,16
   22cbc:	00008067          	ret

00022cc0 <_read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   22cc0:	fd010113          	addi	sp,sp,-48
   22cc4:	02112623          	sw	ra,44(sp)
   22cc8:	02812423          	sw	s0,40(sp)
   22ccc:	03010413          	addi	s0,sp,48
   22cd0:	fca42e23          	sw	a0,-36(s0)
   22cd4:	fcb42c23          	sw	a1,-40(s0)
   22cd8:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22cdc:	fdc42783          	lw	a5,-36(s0)
   22ce0:	0207c463          	bltz	a5,22d08 <_read+0x48>
   22ce4:	fdc42703          	lw	a4,-36(s0)
   22ce8:	00070793          	mv	a5,a4
   22cec:	00179793          	slli	a5,a5,0x1
   22cf0:	00e787b3          	add	a5,a5,a4
   22cf4:	00279793          	slli	a5,a5,0x2
   22cf8:	00025737          	lui	a4,0x25
   22cfc:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   22d00:	00e787b3          	add	a5,a5,a4
   22d04:	0080006f          	j	22d0c <_read+0x4c>
   22d08:	00000793          	li	a5,0
   22d0c:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
   22d10:	fe842783          	lw	a5,-24(s0)
   22d14:	08078663          	beqz	a5,22da0 <_read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   22d18:	fe842783          	lw	a5,-24(s0)
   22d1c:	0087a783          	lw	a5,8(a5)
   22d20:	0037f713          	andi	a4,a5,3
   22d24:	00100793          	li	a5,1
   22d28:	06f70263          	beq	a4,a5,22d8c <_read+0xcc>
        (fd->dev->read))
   22d2c:	fe842783          	lw	a5,-24(s0)
   22d30:	0007a783          	lw	a5,0(a5)
   22d34:	0147a783          	lw	a5,20(a5)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   22d38:	04078a63          	beqz	a5,22d8c <_read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   22d3c:	fe842783          	lw	a5,-24(s0)
   22d40:	0007a783          	lw	a5,0(a5)
   22d44:	0147a783          	lw	a5,20(a5)
   22d48:	fd442703          	lw	a4,-44(s0)
   22d4c:	00070613          	mv	a2,a4
   22d50:	fd842583          	lw	a1,-40(s0)
   22d54:	fe842503          	lw	a0,-24(s0)
   22d58:	000780e7          	jalr	a5
   22d5c:	fea42623          	sw	a0,-20(s0)
   22d60:	fec42783          	lw	a5,-20(s0)
   22d64:	0207d063          	bgez	a5,22d84 <_read+0xc4>
        {
          ALT_ERRNO = -rval;
   22d68:	f0dff0ef          	jal	ra,22c74 <alt_get_errno>
   22d6c:	00050713          	mv	a4,a0
   22d70:	fec42783          	lw	a5,-20(s0)
   22d74:	40f007b3          	neg	a5,a5
   22d78:	00f72023          	sw	a5,0(a4)
          return -1;
   22d7c:	fff00793          	li	a5,-1
   22d80:	0340006f          	j	22db4 <_read+0xf4>
        }
        return rval;
   22d84:	fec42783          	lw	a5,-20(s0)
   22d88:	02c0006f          	j	22db4 <_read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   22d8c:	ee9ff0ef          	jal	ra,22c74 <alt_get_errno>
   22d90:	00050713          	mv	a4,a0
   22d94:	00d00793          	li	a5,13
   22d98:	00f72023          	sw	a5,0(a4)
   22d9c:	0140006f          	j	22db0 <_read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   22da0:	ed5ff0ef          	jal	ra,22c74 <alt_get_errno>
   22da4:	00050713          	mv	a4,a0
   22da8:	05100793          	li	a5,81
   22dac:	00f72023          	sw	a5,0(a4)
  }
  return -1;
   22db0:	fff00793          	li	a5,-1
}
   22db4:	00078513          	mv	a0,a5
   22db8:	02c12083          	lw	ra,44(sp)
   22dbc:	02812403          	lw	s0,40(sp)
   22dc0:	03010113          	addi	sp,sp,48
   22dc4:	00008067          	ret

00022dc8 <_sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   22dc8:	fc010113          	addi	sp,sp,-64
   22dcc:	02812e23          	sw	s0,60(sp)
   22dd0:	04010413          	addi	s0,sp,64
   22dd4:	fca42623          	sw	a0,-52(s0)
    NIOSV_READ_AND_CLR_CSR(NIOSV_MSTATUS_CSR, context, NIOSV_MSTATUS_MIE_MASK);
   22dd8:	00800793          	li	a5,8
   22ddc:	3007b7f3          	csrrc	a5,mstatus,a5
   22de0:	fef42223          	sw	a5,-28(s0)
    return context;
   22de4:	fe442783          	lw	a5,-28(s0)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   22de8:	fcf42e23          	sw	a5,-36(s0)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   22dec:	000267b7          	lui	a5,0x26
   22df0:	04c7a783          	lw	a5,76(a5) # 2604c <heap_end>
   22df4:	00378793          	addi	a5,a5,3
   22df8:	ffc7f793          	andi	a5,a5,-4
   22dfc:	00078713          	mv	a4,a5
   22e00:	000267b7          	lui	a5,0x26
   22e04:	04e7a623          	sw	a4,76(a5) # 2604c <heap_end>
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   22e08:	000267b7          	lui	a5,0x26
   22e0c:	04c7a703          	lw	a4,76(a5) # 2604c <heap_end>
   22e10:	fcc42783          	lw	a5,-52(s0)
   22e14:	00f70733          	add	a4,a4,a5
   22e18:	000407b7          	lui	a5,0x40
   22e1c:	00078793          	mv	a5,a5
   22e20:	02e7f263          	bgeu	a5,a4,22e44 <_sbrk+0x7c>
   22e24:	fdc42783          	lw	a5,-36(s0)
   22e28:	fef42423          	sw	a5,-24(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
   22e2c:	fe842783          	lw	a5,-24(s0)
   22e30:	0087f793          	andi	a5,a5,8
   22e34:	3007a073          	csrs	mstatus,a5
}
   22e38:	00000013          	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   22e3c:	fff00793          	li	a5,-1
   22e40:	0440006f          	j	22e84 <_sbrk+0xbc>
  }
#endif

  prev_heap_end = heap_end; 
   22e44:	000267b7          	lui	a5,0x26
   22e48:	04c7a783          	lw	a5,76(a5) # 2604c <heap_end>
   22e4c:	fef42023          	sw	a5,-32(s0)
  heap_end += incr; 
   22e50:	000267b7          	lui	a5,0x26
   22e54:	04c7a703          	lw	a4,76(a5) # 2604c <heap_end>
   22e58:	fcc42783          	lw	a5,-52(s0)
   22e5c:	00f70733          	add	a4,a4,a5
   22e60:	000267b7          	lui	a5,0x26
   22e64:	04e7a623          	sw	a4,76(a5) # 2604c <heap_end>
   22e68:	fdc42783          	lw	a5,-36(s0)
   22e6c:	fef42623          	sw	a5,-20(s0)
    NIOSV_SET_CSR(NIOSV_MSTATUS_CSR, context & NIOSV_MSTATUS_MIE_MASK);
   22e70:	fec42783          	lw	a5,-20(s0)
   22e74:	0087f793          	andi	a5,a5,8
   22e78:	3007a073          	csrs	mstatus,a5
}
   22e7c:	00000013          	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   22e80:	fe042783          	lw	a5,-32(s0)
}
   22e84:	00078513          	mv	a0,a5
   22e88:	03c12403          	lw	s0,60(sp)
   22e8c:	04010113          	addi	sp,sp,64
   22e90:	00008067          	ret

00022e94 <alt_get_errno>:
{
   22e94:	ff010113          	addi	sp,sp,-16
   22e98:	00112623          	sw	ra,12(sp)
   22e9c:	00812423          	sw	s0,8(sp)
   22ea0:	01010413          	addi	s0,sp,16
  return ((alt_errno) ? alt_errno() : &errno);
   22ea4:	000267b7          	lui	a5,0x26
   22ea8:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22eac:	00078c63          	beqz	a5,22ec4 <alt_get_errno+0x30>
   22eb0:	000267b7          	lui	a5,0x26
   22eb4:	0307a783          	lw	a5,48(a5) # 26030 <alt_errno>
   22eb8:	000780e7          	jalr	a5
   22ebc:	00050793          	mv	a5,a0
   22ec0:	00c0006f          	j	22ecc <alt_get_errno+0x38>
   22ec4:	000287b7          	lui	a5,0x28
   22ec8:	ca878793          	addi	a5,a5,-856 # 27ca8 <errno>
}
   22ecc:	00078513          	mv	a0,a5
   22ed0:	00c12083          	lw	ra,12(sp)
   22ed4:	00812403          	lw	s0,8(sp)
   22ed8:	01010113          	addi	sp,sp,16
   22edc:	00008067          	ret

00022ee0 <_write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   22ee0:	fd010113          	addi	sp,sp,-48
   22ee4:	02112623          	sw	ra,44(sp)
   22ee8:	02812423          	sw	s0,40(sp)
   22eec:	03010413          	addi	s0,sp,48
   22ef0:	fca42e23          	sw	a0,-36(s0)
   22ef4:	fcb42c23          	sw	a1,-40(s0)
   22ef8:	fcc42a23          	sw	a2,-44(s0)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22efc:	fdc42783          	lw	a5,-36(s0)
   22f00:	0207c463          	bltz	a5,22f28 <_write+0x48>
   22f04:	fdc42703          	lw	a4,-36(s0)
   22f08:	00070793          	mv	a5,a4
   22f0c:	00179793          	slli	a5,a5,0x1
   22f10:	00e787b3          	add	a5,a5,a4
   22f14:	00279793          	slli	a5,a5,0x2
   22f18:	00025737          	lui	a4,0x25
   22f1c:	4e870713          	addi	a4,a4,1256 # 254e8 <alt_fd_list>
   22f20:	00e787b3          	add	a5,a5,a4
   22f24:	0080006f          	j	22f2c <_write+0x4c>
   22f28:	00000793          	li	a5,0
   22f2c:	fef42423          	sw	a5,-24(s0)
  
  if (fd)
   22f30:	fe842783          	lw	a5,-24(s0)
   22f34:	08078463          	beqz	a5,22fbc <_write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   22f38:	fe842783          	lw	a5,-24(s0)
   22f3c:	0087a783          	lw	a5,8(a5)
   22f40:	0037f793          	andi	a5,a5,3
   22f44:	06078263          	beqz	a5,22fa8 <_write+0xc8>
   22f48:	fe842783          	lw	a5,-24(s0)
   22f4c:	0007a783          	lw	a5,0(a5)
   22f50:	0187a783          	lw	a5,24(a5)
   22f54:	04078a63          	beqz	a5,22fa8 <_write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   22f58:	fe842783          	lw	a5,-24(s0)
   22f5c:	0007a783          	lw	a5,0(a5)
   22f60:	0187a783          	lw	a5,24(a5)
   22f64:	fd442703          	lw	a4,-44(s0)
   22f68:	00070613          	mv	a2,a4
   22f6c:	fd842583          	lw	a1,-40(s0)
   22f70:	fe842503          	lw	a0,-24(s0)
   22f74:	000780e7          	jalr	a5
   22f78:	fea42623          	sw	a0,-20(s0)
   22f7c:	fec42783          	lw	a5,-20(s0)
   22f80:	0207d063          	bgez	a5,22fa0 <_write+0xc0>
      {
        ALT_ERRNO = -rval;
   22f84:	f11ff0ef          	jal	ra,22e94 <alt_get_errno>
   22f88:	00050713          	mv	a4,a0
   22f8c:	fec42783          	lw	a5,-20(s0)
   22f90:	40f007b3          	neg	a5,a5
   22f94:	00f72023          	sw	a5,0(a4)
        return -1;
   22f98:	fff00793          	li	a5,-1
   22f9c:	0340006f          	j	22fd0 <_write+0xf0>
      }
      return rval;
   22fa0:	fec42783          	lw	a5,-20(s0)
   22fa4:	02c0006f          	j	22fd0 <_write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   22fa8:	eedff0ef          	jal	ra,22e94 <alt_get_errno>
   22fac:	00050713          	mv	a4,a0
   22fb0:	00d00793          	li	a5,13
   22fb4:	00f72023          	sw	a5,0(a4)
   22fb8:	0140006f          	j	22fcc <_write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   22fbc:	ed9ff0ef          	jal	ra,22e94 <alt_get_errno>
   22fc0:	00050713          	mv	a4,a0
   22fc4:	05100793          	li	a5,81
   22fc8:	00f72023          	sw	a5,0(a4)
  }
  return -1;
   22fcc:	fff00793          	li	a5,-1
}
   22fd0:	00078513          	mv	a0,a5
   22fd4:	02c12083          	lw	ra,44(sp)
   22fd8:	02812403          	lw	s0,40(sp)
   22fdc:	03010113          	addi	sp,sp,48
   22fe0:	00008067          	ret

00022fe4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22fe4:	fd010113          	addi	sp,sp,-48
   22fe8:	02812623          	sw	s0,44(sp)
   22fec:	03010413          	addi	s0,sp,48
   22ff0:	fca42e23          	sw	a0,-36(s0)
   22ff4:	fcb42c23          	sw	a1,-40(s0)
    alt_dev* next=NULL; 
   22ff8:	fe042223          	sw	zero,-28(s0)
    alt_32   len=0;
   22ffc:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
   23000:	3e800793          	li	a5,1000
   23004:	fef42623          	sw	a5,-20(s0)
    
    if (llist == NULL) { return NULL; }
   23008:	fd842783          	lw	a5,-40(s0)
   2300c:	00079663          	bnez	a5,23018 <alt_find_dev+0x34>
   23010:	00000793          	li	a5,0
   23014:	0e00006f          	j	230f4 <alt_find_dev+0x110>
    next = (alt_dev*) llist->next;
   23018:	fd842783          	lw	a5,-40(s0)
   2301c:	0007a783          	lw	a5,0(a5)
   23020:	fef42223          	sw	a5,-28(s0)
    /*
     * Check each list entry in turn, until a match is found, or we reach the
     * end of the list (i.e. next winds up pointing back to the list head).
     */ 

    while (next != (alt_dev*) llist)
   23024:	0c00006f          	j	230e4 <alt_find_dev+0x100>
    {
        len=0;
   23028:	fe042423          	sw	zero,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   2302c:	0380006f          	j	23064 <alt_find_dev+0x80>
        {
            if (next->name[len] != name[len]) { break; }
   23030:	fe442783          	lw	a5,-28(s0)
   23034:	0087a703          	lw	a4,8(a5)
   23038:	fe842783          	lw	a5,-24(s0)
   2303c:	00f707b3          	add	a5,a4,a5
   23040:	0007c703          	lbu	a4,0(a5)
   23044:	fe842783          	lw	a5,-24(s0)
   23048:	fdc42683          	lw	a3,-36(s0)
   2304c:	00f687b3          	add	a5,a3,a5
   23050:	0007c783          	lbu	a5,0(a5)
   23054:	04f71663          	bne	a4,a5,230a0 <alt_find_dev+0xbc>
            len++;
   23058:	fe842783          	lw	a5,-24(s0)
   2305c:	00178793          	addi	a5,a5,1
   23060:	fef42423          	sw	a5,-24(s0)
        while ((name[len] != 0) && (next->name[len]!=0) && (len < MAX_STRING_LENGTH))
   23064:	fe842783          	lw	a5,-24(s0)
   23068:	fdc42703          	lw	a4,-36(s0)
   2306c:	00f707b3          	add	a5,a4,a5
   23070:	0007c783          	lbu	a5,0(a5)
   23074:	02078863          	beqz	a5,230a4 <alt_find_dev+0xc0>
   23078:	fe442783          	lw	a5,-28(s0)
   2307c:	0087a703          	lw	a4,8(a5)
   23080:	fe842783          	lw	a5,-24(s0)
   23084:	00f707b3          	add	a5,a4,a5
   23088:	0007c783          	lbu	a5,0(a5)
   2308c:	00078c63          	beqz	a5,230a4 <alt_find_dev+0xc0>
   23090:	fe842703          	lw	a4,-24(s0)
   23094:	fec42783          	lw	a5,-20(s0)
   23098:	f8f74ce3          	blt	a4,a5,23030 <alt_find_dev+0x4c>
   2309c:	0080006f          	j	230a4 <alt_find_dev+0xc0>
            if (next->name[len] != name[len]) { break; }
   230a0:	00000013          	nop
        }
    
        /* match found */
        if ((name[len] == 0) && (next->name[len]==0)) {  return next; }
   230a4:	fe842783          	lw	a5,-24(s0)
   230a8:	fdc42703          	lw	a4,-36(s0)
   230ac:	00f707b3          	add	a5,a4,a5
   230b0:	0007c783          	lbu	a5,0(a5)
   230b4:	02079263          	bnez	a5,230d8 <alt_find_dev+0xf4>
   230b8:	fe442783          	lw	a5,-28(s0)
   230bc:	0087a703          	lw	a4,8(a5)
   230c0:	fe842783          	lw	a5,-24(s0)
   230c4:	00f707b3          	add	a5,a4,a5
   230c8:	0007c783          	lbu	a5,0(a5)
   230cc:	00079663          	bnez	a5,230d8 <alt_find_dev+0xf4>
   230d0:	fe442783          	lw	a5,-28(s0)
   230d4:	0200006f          	j	230f4 <alt_find_dev+0x110>

        next = (alt_dev*) next->llist.next;
   230d8:	fe442783          	lw	a5,-28(s0)
   230dc:	0007a783          	lw	a5,0(a5)
   230e0:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) llist)
   230e4:	fe442703          	lw	a4,-28(s0)
   230e8:	fd842783          	lw	a5,-40(s0)
   230ec:	f2f71ee3          	bne	a4,a5,23028 <alt_find_dev+0x44>
    }
  
    /* No match found */
  
    return NULL;
   230f0:	00000793          	li	a5,0
}
   230f4:	00078513          	mv	a0,a5
   230f8:	02c12403          	lw	s0,44(sp)
   230fc:	03010113          	addi	sp,sp,48
   23100:	00008067          	ret

00023104 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23104:	fd010113          	addi	sp,sp,-48
   23108:	02812623          	sw	s0,44(sp)
   2310c:	03010413          	addi	s0,sp,48
   23110:	fca42e23          	sw	a0,-36(s0)
    alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23114:	000267b7          	lui	a5,0x26
   23118:	01c78793          	addi	a5,a5,28 # 2601c <alt_fs_list>
   2311c:	0007a783          	lw	a5,0(a5)
   23120:	fef42223          	sw	a5,-28(s0)
    alt_32   len=0;
   23124:	fe042423          	sw	zero,-24(s0)
    alt_32   MAX_STRING_LENGTH=1000;
   23128:	3e800793          	li	a5,1000
   2312c:	fef42623          	sw	a5,-20(s0)
 
    /*
    * Check each list entry in turn, until a match is found, or we reach the
    * end of the list (i.e. next winds up pointing back to the list head).
    */ 
    while (next != (alt_dev*) &alt_fs_list)
   23130:	0ec0006f          	j	2321c <alt_find_file+0x118>
    {
        len=0;
   23134:	fe042423          	sw	zero,-24(s0)
        while (len < MAX_STRING_LENGTH)    
   23138:	0bc0006f          	j	231f4 <alt_find_file+0xf0>
        {
            if (((next->name[len]== '/') && (next->name[len+1] == 0)) || (next->name[len] == 0))
   2313c:	fe442783          	lw	a5,-28(s0)
   23140:	0087a703          	lw	a4,8(a5)
   23144:	fe842783          	lw	a5,-24(s0)
   23148:	00f707b3          	add	a5,a4,a5
   2314c:	0007c703          	lbu	a4,0(a5)
   23150:	02f00793          	li	a5,47
   23154:	02f71063          	bne	a4,a5,23174 <alt_find_file+0x70>
   23158:	fe442783          	lw	a5,-28(s0)
   2315c:	0087a703          	lw	a4,8(a5)
   23160:	fe842783          	lw	a5,-24(s0)
   23164:	00178793          	addi	a5,a5,1
   23168:	00f707b3          	add	a5,a4,a5
   2316c:	0007c783          	lbu	a5,0(a5)
   23170:	00078e63          	beqz	a5,2318c <alt_find_file+0x88>
   23174:	fe442783          	lw	a5,-28(s0)
   23178:	0087a703          	lw	a4,8(a5)
   2317c:	fe842783          	lw	a5,-24(s0)
   23180:	00f707b3          	add	a5,a4,a5
   23184:	0007c783          	lbu	a5,0(a5)
   23188:	02079c63          	bnez	a5,231c0 <alt_find_file+0xbc>
            { 
                if ((name[len]== '/') || (name[len] == 0))
   2318c:	fe842783          	lw	a5,-24(s0)
   23190:	fdc42703          	lw	a4,-36(s0)
   23194:	00f707b3          	add	a5,a4,a5
   23198:	0007c703          	lbu	a4,0(a5)
   2319c:	02f00793          	li	a5,47
   231a0:	00f70c63          	beq	a4,a5,231b8 <alt_find_file+0xb4>
   231a4:	fe842783          	lw	a5,-24(s0)
   231a8:	fdc42703          	lw	a4,-36(s0)
   231ac:	00f707b3          	add	a5,a4,a5
   231b0:	0007c783          	lbu	a5,0(a5)
   231b4:	04079863          	bnez	a5,23204 <alt_find_file+0x100>
                {
                    return next;
   231b8:	fe442783          	lw	a5,-28(s0)
   231bc:	0740006f          	j	23230 <alt_find_file+0x12c>
                }
                break;
            }
            
            if (next->name[len]!=name[len]) { break; }
   231c0:	fe442783          	lw	a5,-28(s0)
   231c4:	0087a703          	lw	a4,8(a5)
   231c8:	fe842783          	lw	a5,-24(s0)
   231cc:	00f707b3          	add	a5,a4,a5
   231d0:	0007c703          	lbu	a4,0(a5)
   231d4:	fe842783          	lw	a5,-24(s0)
   231d8:	fdc42683          	lw	a3,-36(s0)
   231dc:	00f687b3          	add	a5,a3,a5
   231e0:	0007c783          	lbu	a5,0(a5)
   231e4:	02f71463          	bne	a4,a5,2320c <alt_find_file+0x108>
            len++;
   231e8:	fe842783          	lw	a5,-24(s0)
   231ec:	00178793          	addi	a5,a5,1
   231f0:	fef42423          	sw	a5,-24(s0)
        while (len < MAX_STRING_LENGTH)    
   231f4:	fe842703          	lw	a4,-24(s0)
   231f8:	fec42783          	lw	a5,-20(s0)
   231fc:	f4f740e3          	blt	a4,a5,2313c <alt_find_file+0x38>
   23200:	0100006f          	j	23210 <alt_find_file+0x10c>
                break;
   23204:	00000013          	nop
   23208:	0080006f          	j	23210 <alt_find_file+0x10c>
            if (next->name[len]!=name[len]) { break; }
   2320c:	00000013          	nop
        }  
        
        next = (alt_dev*) next->llist.next;
   23210:	fe442783          	lw	a5,-28(s0)
   23214:	0007a783          	lw	a5,0(a5)
   23218:	fef42223          	sw	a5,-28(s0)
    while (next != (alt_dev*) &alt_fs_list)
   2321c:	fe442703          	lw	a4,-28(s0)
   23220:	000267b7          	lui	a5,0x26
   23224:	01c78793          	addi	a5,a5,28 # 2601c <alt_fs_list>
   23228:	f0f716e3          	bne	a4,a5,23134 <alt_find_file+0x30>
    }
  
    /* No match found */
  
    return NULL;     
   2322c:	00000793          	li	a5,0
}
   23230:	00078513          	mv	a0,a5
   23234:	02c12403          	lw	s0,44(sp)
   23238:	03010113          	addi	sp,sp,48
   2323c:	00008067          	ret

00023240 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23240:	fb010113          	addi	sp,sp,-80
   23244:	04112623          	sw	ra,76(sp)
   23248:	04812423          	sw	s0,72(sp)
   2324c:	05010413          	addi	s0,sp,80
   23250:	faa42e23          	sw	a0,-68(s0)
   23254:	000287b7          	lui	a5,0x28
   23258:	cac7a703          	lw	a4,-852(a5) # 27cac <__stack_chk_guard>
   2325c:	fee42623          	sw	a4,-20(s0)
   23260:	00000713          	li	a4,0
  alt_32 i;
  int rc = -EMFILE;
   23264:	fe800793          	li	a5,-24
   23268:	fcf42a23          	sw	a5,-44(s0)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   2326c:	000287b7          	lui	a5,0x28
   23270:	c887a783          	lw	a5,-888(a5) # 27c88 <alt_fd_list_lock>
   23274:	fcf42c23          	sw	a5,-40(s0)
   23278:	fc042e23          	sw	zero,-36(s0)
  int ret = -1;
   2327c:	fff00793          	li	a5,-1
   23280:	fef42023          	sw	a5,-32(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   23284:	fc042623          	sw	zero,-52(s0)
  if (IS_IN_ISR_CONTEXT()){
   23288:	000287b7          	lui	a5,0x28
   2328c:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
   23290:	02078c63          	beqz	a5,232c8 <alt_get_fd+0x88>
      if (pdTRUE == xSemaphoreTakeFromISR(sem, &xHigherPriorityTaskWoken)){
   23294:	fcc40793          	addi	a5,s0,-52
   23298:	00078613          	mv	a2,a5
   2329c:	00000593          	li	a1,0
   232a0:	fd842503          	lw	a0,-40(s0)
   232a4:	e88e80ef          	jal	ra,b92c <xQueueReceiveFromISR>
   232a8:	00050713          	mv	a4,a0
   232ac:	00100793          	li	a5,1
   232b0:	02f71a63          	bne	a4,a5,232e4 <alt_get_fd+0xa4>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   232b4:	fcc42783          	lw	a5,-52(s0)
   232b8:	00078463          	beqz	a5,232c0 <alt_get_fd+0x80>
   232bc:	f5cdf0ef          	jal	ra,2a18 <vTaskSwitchContext>
        ret = 0;
   232c0:	fe042023          	sw	zero,-32(s0)
   232c4:	0200006f          	j	232e4 <alt_get_fd+0xa4>
      if ( pdTRUE == xSemaphoreTake(sem, timeout)){
   232c8:	fdc42583          	lw	a1,-36(s0)
   232cc:	fd842503          	lw	a0,-40(s0)
   232d0:	f6de70ef          	jal	ra,b23c <xQueueSemaphoreTake>
   232d4:	00050713          	mv	a4,a0
   232d8:	00100793          	li	a5,1
   232dc:	00f71463          	bne	a4,a5,232e4 <alt_get_fd+0xa4>
        ret = 0;
   232e0:	fe042023          	sw	zero,-32(s0)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   232e4:	fc042823          	sw	zero,-48(s0)
   232e8:	0880006f          	j	23370 <alt_get_fd+0x130>
  {
    if (!alt_fd_list[i].dev)
   232ec:	000257b7          	lui	a5,0x25
   232f0:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
   232f4:	fd042703          	lw	a4,-48(s0)
   232f8:	00070793          	mv	a5,a4
   232fc:	00179793          	slli	a5,a5,0x1
   23300:	00e787b3          	add	a5,a5,a4
   23304:	00279793          	slli	a5,a5,0x2
   23308:	00f687b3          	add	a5,a3,a5
   2330c:	0007a783          	lw	a5,0(a5)
   23310:	04079a63          	bnez	a5,23364 <alt_get_fd+0x124>
    {
      alt_fd_list[i].dev = dev;
   23314:	000257b7          	lui	a5,0x25
   23318:	4e878693          	addi	a3,a5,1256 # 254e8 <alt_fd_list>
   2331c:	fd042703          	lw	a4,-48(s0)
   23320:	00070793          	mv	a5,a4
   23324:	00179793          	slli	a5,a5,0x1
   23328:	00e787b3          	add	a5,a5,a4
   2332c:	00279793          	slli	a5,a5,0x2
   23330:	00f687b3          	add	a5,a3,a5
   23334:	fbc42703          	lw	a4,-68(s0)
   23338:	00e7a023          	sw	a4,0(a5)
      if (i > alt_max_fd)
   2333c:	000267b7          	lui	a5,0x26
   23340:	02c7a783          	lw	a5,44(a5) # 2602c <alt_max_fd>
   23344:	fd042703          	lw	a4,-48(s0)
   23348:	00e7d863          	bge	a5,a4,23358 <alt_get_fd+0x118>
      {
        alt_max_fd = i;
   2334c:	000267b7          	lui	a5,0x26
   23350:	fd042703          	lw	a4,-48(s0)
   23354:	02e7a623          	sw	a4,44(a5) # 2602c <alt_max_fd>
      }
      rc = i;
   23358:	fd042783          	lw	a5,-48(s0)
   2335c:	fcf42a23          	sw	a5,-44(s0)
      goto alt_get_fd_exit;
   23360:	0200006f          	j	23380 <alt_get_fd+0x140>
  for (i = 0; i < ALT_MAX_FD; i++)
   23364:	fd042783          	lw	a5,-48(s0)
   23368:	00178793          	addi	a5,a5,1
   2336c:	fcf42823          	sw	a5,-48(s0)
   23370:	fd042703          	lw	a4,-48(s0)
   23374:	01f00793          	li	a5,31
   23378:	f6e7dae3          	bge	a5,a4,232ec <alt_get_fd+0xac>
    }
  }

 alt_get_fd_exit:
   2337c:	00000013          	nop
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   23380:	000287b7          	lui	a5,0x28
   23384:	c887a783          	lw	a5,-888(a5) # 27c88 <alt_fd_list_lock>
   23388:	fef42223          	sw	a5,-28(s0)
  int ret = -1;
   2338c:	fff00793          	li	a5,-1
   23390:	fef42423          	sw	a5,-24(s0)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   23394:	fc042623          	sw	zero,-52(s0)
  if (IS_IN_ISR_CONTEXT()){
   23398:	000287b7          	lui	a5,0x28
   2339c:	c687a783          	lw	a5,-920(a5) # 27c68 <ulHalNestedInterruptCounter>
   233a0:	02078a63          	beqz	a5,233d4 <alt_get_fd+0x194>
      if (pdTRUE == xSemaphoreGiveFromISR(sem, &xHigherPriorityTaskWoken)){
   233a4:	fcc40793          	addi	a5,s0,-52
   233a8:	00078593          	mv	a1,a5
   233ac:	fe442503          	lw	a0,-28(s0)
   233b0:	9c9e70ef          	jal	ra,ad78 <xQueueGiveFromISR>
   233b4:	00050713          	mv	a4,a0
   233b8:	00100793          	li	a5,1
   233bc:	02f71e63          	bne	a4,a5,233f8 <alt_get_fd+0x1b8>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   233c0:	fcc42783          	lw	a5,-52(s0)
   233c4:	00078463          	beqz	a5,233cc <alt_get_fd+0x18c>
   233c8:	e50df0ef          	jal	ra,2a18 <vTaskSwitchContext>
        ret = 0;
   233cc:	fe042423          	sw	zero,-24(s0)
   233d0:	0280006f          	j	233f8 <alt_get_fd+0x1b8>
      if ( pdTRUE == xSemaphoreGive(sem)){
   233d4:	00000693          	li	a3,0
   233d8:	00000613          	li	a2,0
   233dc:	00000593          	li	a1,0
   233e0:	fe442503          	lw	a0,-28(s0)
   233e4:	c00e70ef          	jal	ra,a7e4 <xQueueGenericSend>
   233e8:	00050713          	mv	a4,a0
   233ec:	00100793          	li	a5,1
   233f0:	00f71463          	bne	a4,a5,233f8 <alt_get_fd+0x1b8>
        ret = 0;
   233f4:	fe042423          	sw	zero,-24(s0)

  return rc;
   233f8:	fd442783          	lw	a5,-44(s0)
   233fc:	00078713          	mv	a4,a5
}
   23400:	000287b7          	lui	a5,0x28
   23404:	fec42683          	lw	a3,-20(s0)
   23408:	cac7a783          	lw	a5,-852(a5) # 27cac <__stack_chk_guard>
   2340c:	00f6c7b3          	xor	a5,a3,a5
   23410:	00000693          	li	a3,0
   23414:	00078463          	beqz	a5,2341c <alt_get_fd+0x1dc>
   23418:	885ea0ef          	jal	ra,dc9c <__stack_chk_fail>
   2341c:	00070513          	mv	a0,a4
   23420:	04c12083          	lw	ra,76(sp)
   23424:	04812403          	lw	s0,72(sp)
   23428:	05010113          	addi	sp,sp,80
   2342c:	00008067          	ret

00023430 <fstat>:
   23430:	00058613          	mv	a2,a1
   23434:	00050593          	mv	a1,a0
   23438:	00003517          	auipc	a0,0x3
   2343c:	c0452503          	lw	a0,-1020(a0) # 2603c <_impure_ptr>
   23440:	804f906f          	j	1c444 <_fstat_r>
   23444:	0f50                	.2byte	0xf50
   23446:	0001                	.2byte	0x1
   23448:	dd40                	.2byte	0xdd40
	...
